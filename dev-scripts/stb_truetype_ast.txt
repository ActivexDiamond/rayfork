TranslationUnitDecl 0x7fffd81de218 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x7fffd81de790 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x7fffd81de4b0 '__int128'
|-TypedefDecl 0x7fffd81de800 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x7fffd81de4d0 'unsigned __int128'
|-TypedefDecl 0x7fffd81dead8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x7fffd81de8e0 'struct __NSConstantString_tag'
|   `-Record 0x7fffd81de858 '__NSConstantString_tag'
|-TypedefDecl 0x7fffd81deb70 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x7fffd81deb30 'char *'
|   `-BuiltinType 0x7fffd81de2b0 'char'
|-TypedefDecl 0x7fffd81dee38 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x7fffd81dede0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x7fffd81dec50 'struct __va_list_tag'
|     `-Record 0x7fffd81debc8 '__va_list_tag'
|-TypedefDecl 0x7fffd8237e40 <././stb/stb_truetype.h:424:4, col:28> col:28 referenced stbtt_uint8 'unsigned char'
| `-BuiltinType 0x7fffd81de370 'unsigned char'
|-TypedefDecl 0x7fffd8237eb0 <line:425:4, col:28> col:28 referenced stbtt_int8 'signed char'
| `-BuiltinType 0x7fffd81de2d0 'signed char'
|-TypedefDecl 0x7fffd8237f20 <line:426:4, col:28> col:28 referenced stbtt_uint16 'unsigned short'
| `-BuiltinType 0x7fffd81de390 'unsigned short'
|-TypedefDecl 0x7fffd8237f90 <line:427:4, col:28> col:28 referenced stbtt_int16 'short'
| `-BuiltinType 0x7fffd81de2f0 'short'
|-TypedefDecl 0x7fffd8238000 <line:428:4, col:28> col:28 referenced stbtt_uint32 'unsigned int'
| `-BuiltinType 0x7fffd81de3b0 'unsigned int'
|-TypedefDecl 0x7fffd8238070 <line:429:4, col:28> col:28 referenced stbtt_int32 'int'
| `-BuiltinType 0x7fffd81de310 'int'
|-TypedefDecl 0x7fffd8238268 <line:432:4, col:68> col:17 stbtt__check_size32 'char [1]'
| `-ConstantArrayType 0x7fffd8238210 'char [1]' 1 
|   `-BuiltinType 0x7fffd81de2b0 'char'
|-TypedefDecl 0x7fffd8238420 <line:433:4, col:68> col:17 stbtt__check_size16 'char [1]'
| `-ConstantArrayType 0x7fffd8238210 'char [1]' 1 
|   `-BuiltinType 0x7fffd81de2b0 'char'
|-TypedefDecl 0x7fffd8238490 </usr/include/x86_64-linux-gnu/bits/types.h:30:1, col:23> col:23 referenced __u_char 'unsigned char'
| `-BuiltinType 0x7fffd81de370 'unsigned char'
|-TypedefDecl 0x7fffd8238500 <line:31:1, col:28> col:28 referenced __u_short 'unsigned short'
| `-BuiltinType 0x7fffd81de390 'unsigned short'
|-TypedefDecl 0x7fffd8238570 <line:32:1, col:22> col:22 referenced __u_int 'unsigned int'
| `-BuiltinType 0x7fffd81de3b0 'unsigned int'
|-TypedefDecl 0x7fffd82385e0 <line:33:1, col:27> col:27 referenced __u_long 'unsigned long'
| `-BuiltinType 0x7fffd81de3d0 'unsigned long'
|-TypedefDecl 0x7fffd8238650 <line:36:1, col:21> col:21 referenced __int8_t 'signed char'
| `-BuiltinType 0x7fffd81de2d0 'signed char'
|-TypedefDecl 0x7fffd82386c0 <line:37:1, col:23> col:23 __uint8_t 'unsigned char'
| `-BuiltinType 0x7fffd81de370 'unsigned char'
|-TypedefDecl 0x7fffd8238730 <line:38:1, col:26> col:26 referenced __int16_t 'short'
| `-BuiltinType 0x7fffd81de2f0 'short'
|-TypedefDecl 0x7fffd82387a0 <line:39:1, col:28> col:28 referenced __uint16_t 'unsigned short'
| `-BuiltinType 0x7fffd81de390 'unsigned short'
|-TypedefDecl 0x7fffd8238810 <line:40:1, col:20> col:20 referenced __int32_t 'int'
| `-BuiltinType 0x7fffd81de310 'int'
|-TypedefDecl 0x7fffd8238880 <line:41:1, col:22> col:22 referenced __uint32_t 'unsigned int'
| `-BuiltinType 0x7fffd81de3b0 'unsigned int'
|-TypedefDecl 0x7fffd82388f0 <line:43:1, col:25> col:25 referenced __int64_t 'long'
| `-BuiltinType 0x7fffd81de330 'long'
|-TypedefDecl 0x7fffd8238960 <line:44:1, col:27> col:27 referenced __uint64_t 'unsigned long'
| `-BuiltinType 0x7fffd81de3d0 'unsigned long'
|-TypedefDecl 0x7fffd82389d0 <line:52:1, col:18> col:18 referenced __quad_t 'long'
| `-BuiltinType 0x7fffd81de330 'long'
|-TypedefDecl 0x7fffd8238a40 <line:53:1, col:27> col:27 referenced __u_quad_t 'unsigned long'
| `-BuiltinType 0x7fffd81de3d0 'unsigned long'
|-TypedefDecl 0x7fffd8238ab0 <line:61:1, col:18> col:18 __intmax_t 'long'
| `-BuiltinType 0x7fffd81de330 'long'
|-TypedefDecl 0x7fffd8238b20 <line:62:1, col:27> col:27 __uintmax_t 'unsigned long'
| `-BuiltinType 0x7fffd81de3d0 'unsigned long'
|-TypedefDecl 0x7fffd8238b90 <line:126:22, line:133:25> col:25 referenced __dev_t 'unsigned long'
| `-BuiltinType 0x7fffd81de3d0 'unsigned long'
|-TypedefDecl 0x7fffd8238c00 <line:126:22, line:134:25> col:25 referenced __uid_t 'unsigned int'
| `-BuiltinType 0x7fffd81de3b0 'unsigned int'
|-TypedefDecl 0x7fffd8238c70 <line:126:22, line:135:25> col:25 referenced __gid_t 'unsigned int'
| `-BuiltinType 0x7fffd81de3b0 'unsigned int'
|-TypedefDecl 0x7fffd8238ce0 <line:126:22, line:136:25> col:25 referenced __ino_t 'unsigned long'
| `-BuiltinType 0x7fffd81de3d0 'unsigned long'
|-TypedefDecl 0x7fffd8238d50 <line:126:22, line:137:27> col:27 __ino64_t 'unsigned long'
| `-BuiltinType 0x7fffd81de3d0 'unsigned long'
|-TypedefDecl 0x7fffd825c5e0 <line:126:22, line:138:26> col:26 referenced __mode_t 'unsigned int'
| `-BuiltinType 0x7fffd81de3b0 'unsigned int'
|-TypedefDecl 0x7fffd825c650 <line:126:22, line:139:27> col:27 referenced __nlink_t 'unsigned long'
| `-BuiltinType 0x7fffd81de3d0 'unsigned long'
|-TypedefDecl 0x7fffd825c6c0 <line:126:22, line:140:25> col:25 referenced __off_t 'long'
| `-BuiltinType 0x7fffd81de330 'long'
|-TypedefDecl 0x7fffd825c730 <line:126:22, line:141:27> col:27 referenced __off64_t 'long'
| `-BuiltinType 0x7fffd81de330 'long'
|-TypedefDecl 0x7fffd825c7a0 <line:126:22, line:142:25> col:25 referenced __pid_t 'int'
| `-BuiltinType 0x7fffd81de310 'int'
|-RecordDecl 0x7fffd825c7f8 </usr/include/x86_64-linux-gnu/bits/typesizes.h:72:24, col:47> col:24 struct definition
| `-FieldDecl 0x7fffd825c920 <col:33, col:44> col:37 __val 'int [2]'
|-TypedefDecl 0x7fffd825c9c0 </usr/include/x86_64-linux-gnu/bits/types.h:126:22, line:143:26> col:26 referenced __fsid_t 'struct __fsid_t':'__fsid_t'
| `-ElaboratedType 0x7fffd825c970 'struct __fsid_t' sugar
|   `-RecordType 0x7fffd825c880 '__fsid_t'
|     `-Record 0x7fffd825c7f8 ''
|-TypedefDecl 0x7fffd825ca48 <line:126:22, line:144:27> col:27 referenced __clock_t 'long'
| `-BuiltinType 0x7fffd81de330 'long'
|-TypedefDecl 0x7fffd825cab8 <line:126:22, line:145:26> col:26 __rlim_t 'unsigned long'
| `-BuiltinType 0x7fffd81de3d0 'unsigned long'
|-TypedefDecl 0x7fffd825cb28 <line:126:22, line:146:28> col:28 __rlim64_t 'unsigned long'
| `-BuiltinType 0x7fffd81de3d0 'unsigned long'
|-TypedefDecl 0x7fffd825cb98 <line:126:22, line:147:24> col:24 referenced __id_t 'unsigned int'
| `-BuiltinType 0x7fffd81de3b0 'unsigned int'
|-TypedefDecl 0x7fffd825cc08 <line:126:22, line:148:26> col:26 referenced __time_t 'long'
| `-BuiltinType 0x7fffd81de330 'long'
|-TypedefDecl 0x7fffd825cc78 <line:126:22, line:149:30> col:30 __useconds_t 'unsigned int'
| `-BuiltinType 0x7fffd81de3b0 'unsigned int'
|-TypedefDecl 0x7fffd825cce8 <line:126:22, line:150:31> col:31 referenced __suseconds_t 'long'
| `-BuiltinType 0x7fffd81de330 'long'
|-TypedefDecl 0x7fffd825cd58 <line:126:22, line:152:27> col:27 referenced __daddr_t 'int'
| `-BuiltinType 0x7fffd81de310 'int'
|-TypedefDecl 0x7fffd825cdc8 <line:126:22, line:153:25> col:25 referenced __key_t 'int'
| `-BuiltinType 0x7fffd81de310 'int'
|-TypedefDecl 0x7fffd825ce38 <line:126:22, line:156:29> col:29 referenced __clockid_t 'int'
| `-BuiltinType 0x7fffd81de310 'int'
|-TypedefDecl 0x7fffd825cea8 <line:126:22, line:159:27> col:27 referenced __timer_t 'void *'
| `-PointerType 0x7fffd81de710 'void *'
|   `-BuiltinType 0x7fffd81de270 'void'
|-TypedefDecl 0x7fffd825cf18 <line:126:22, line:162:29> col:29 referenced __blksize_t 'long'
| `-BuiltinType 0x7fffd81de330 'long'
|-TypedefDecl 0x7fffd825cf88 <line:126:22, line:167:28> col:28 referenced __blkcnt_t 'long'
| `-BuiltinType 0x7fffd81de330 'long'
|-TypedefDecl 0x7fffd825cff8 <line:126:22, line:168:30> col:30 __blkcnt64_t 'long'
| `-BuiltinType 0x7fffd81de330 'long'
|-TypedefDecl 0x7fffd825d068 <line:126:22, line:171:30> col:30 referenced __fsblkcnt_t 'unsigned long'
| `-BuiltinType 0x7fffd81de3d0 'unsigned long'
|-TypedefDecl 0x7fffd825d0d8 <line:126:22, line:172:32> col:32 __fsblkcnt64_t 'unsigned long'
| `-BuiltinType 0x7fffd81de3d0 'unsigned long'
|-TypedefDecl 0x7fffd825d148 <line:126:22, line:175:30> col:30 referenced __fsfilcnt_t 'unsigned long'
| `-BuiltinType 0x7fffd81de3d0 'unsigned long'
|-TypedefDecl 0x7fffd825d1b8 <line:126:22, line:176:32> col:32 __fsfilcnt64_t 'unsigned long'
| `-BuiltinType 0x7fffd81de3d0 'unsigned long'
|-TypedefDecl 0x7fffd825d228 <line:126:22, line:179:28> col:28 __fsword_t 'long'
| `-BuiltinType 0x7fffd81de330 'long'
|-TypedefDecl 0x7fffd825d298 <line:126:22, line:181:27> col:27 referenced __ssize_t 'long'
| `-BuiltinType 0x7fffd81de330 'long'
|-TypedefDecl 0x7fffd825d308 <line:126:22, line:184:33> col:33 referenced __syscall_slong_t 'long'
| `-BuiltinType 0x7fffd81de330 'long'
|-TypedefDecl 0x7fffd825d378 <line:126:22, line:186:33> col:33 __syscall_ulong_t 'unsigned long'
| `-BuiltinType 0x7fffd81de3d0 'unsigned long'
|-TypedefDecl 0x7fffd825d400 <line:190:1, col:19> col:19 referenced __loff_t '__off64_t':'long'
| `-TypedefType 0x7fffd825d3d0 '__off64_t' sugar
|   |-Typedef 0x7fffd825c730 '__off64_t'
|   `-BuiltinType 0x7fffd81de330 'long'
|-TypedefDecl 0x7fffd825d470 <line:191:1, col:15> col:15 referenced __caddr_t 'char *'
| `-PointerType 0x7fffd81deb30 'char *'
|   `-BuiltinType 0x7fffd81de2b0 'char'
|-TypedefDecl 0x7fffd825d4e0 <line:126:22, line:194:25> col:25 __intptr_t 'long'
| `-BuiltinType 0x7fffd81de330 'long'
|-TypedefDecl 0x7fffd825d550 <line:126:22, line:197:23> col:23 __socklen_t 'unsigned int'
| `-BuiltinType 0x7fffd81de3b0 'unsigned int'
|-TypedefDecl 0x7fffd824e2e0 <line:202:1, col:13> col:13 __sig_atomic_t 'int'
| `-BuiltinType 0x7fffd81de310 'int'
|-TypedefDecl 0x7fffd824e350 </usr/include/x86_64-linux-gnu/bits/floatn-common.h:207:1, col:15> col:15 _Float32 'float'
| `-BuiltinType 0x7fffd81de410 'float'
|-TypedefDecl 0x7fffd824e3c0 <line:244:1, col:16> col:16 _Float64 'double'
| `-BuiltinType 0x7fffd81de430 'double'
|-TypedefDecl 0x7fffd824e430 <line:261:1, col:16> col:16 _Float32x 'double'
| `-BuiltinType 0x7fffd81de430 'double'
|-TypedefDecl 0x7fffd824e4a0 <line:278:1, col:21> col:21 _Float64x 'long double'
| `-BuiltinType 0x7fffd81de450 'long double'
|-TypedefDecl 0x7fffd824e510 </usr/include/math.h:149:1, col:15> col:15 float_t 'float'
| `-BuiltinType 0x7fffd81de410 'float'
|-TypedefDecl 0x7fffd824e580 <line:150:1, col:16> col:16 double_t 'double'
| `-BuiltinType 0x7fffd81de430 'double'
|-FunctionDecl 0x7fffd824e6b8 <line:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:22:32> line:21:20 __fpclassify 'int (double)' extern
| |-ParmVarDecl 0x7fffd824e5f0 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:21:46> col:46 __value 'double'
| |-ConstAttr 0x7fffd824e760 <line:22:22>
| `-NoThrowAttr 0x7fffd824e7a8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd824e8a0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:26:32> line:25:20 __signbit 'int (double)' extern
| |-ParmVarDecl 0x7fffd824e810 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:25:43> col:43 __value 'double'
| |-ConstAttr 0x7fffd824e948 <line:26:22>
| `-NoThrowAttr 0x7fffd824e990 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd824ea48 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:30:77> col:20 __isinf 'int (double)' extern
| |-ParmVarDecl 0x7fffd824e9b8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:30:41> col:41 __value 'double'
| |-ConstAttr 0x7fffd824eaf0 <col:67>
| `-NoThrowAttr 0x7fffd824eb38 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd824ebf0 </usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:33:20> col:20 implicit __finite 'int (double)' extern
| |-ParmVarDecl 0x7fffd824ec90 <<invalid sloc>> <invalid sloc> 'double'
| |-NoThrowAttr 0x7fffd824ecf8 <col:20> Implicit
| `-ConstAttr 0x7fffd824ed40 <col:20> Implicit
|-FunctionDecl 0x7fffd824ed50 prev 0x7fffd824ebf0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:33:78> col:20 __finite 'int (double)' extern
| |-ParmVarDecl 0x7fffd824eb60 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:33:42> col:42 __value 'double'
| |-ConstAttr 0x7fffd824edf8 <col:68>
| `-NoThrowAttr 0x7fffd824ee40 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd824eef8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:36:77> col:20 __isnan 'int (double)' extern
| |-ParmVarDecl 0x7fffd824ee68 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:36:41> col:41 __value 'double'
| |-ConstAttr 0x7fffd824efa0 <col:67>
| `-NoThrowAttr 0x7fffd824efe8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd824f168 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:39:20 __iseqsig 'int (double, double)' extern
| |-ParmVarDecl 0x7fffd824f010 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:39:43> col:43 __x 'double'
| |-ParmVarDecl 0x7fffd824f088 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:39:58> col:58 __y 'double'
| `-NoThrowAttr 0x7fffd824f218 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8278a60 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:43:32> line:42:20 __issignaling 'int (double)' extern
| |-ParmVarDecl 0x7fffd824f278 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:42:47> col:47 __value 'double'
| |-ConstAttr 0x7fffd8278b08 <line:43:22>
| `-NoThrowAttr 0x7fffd8278b50 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8278c48 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:53:13> col:13 implicit used acos 'double (double)' extern
| |-ParmVarDecl 0x7fffd8278ce8 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd8278d50 <col:13> Implicit
|-FunctionDecl 0x7fffd8278d98 prev 0x7fffd8278c48 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:53:13 used acos 'double (double)' extern
| |-ParmVarDecl 0x7fffd8278b78 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:53:31> col:31 __x 'double'
| `-NoThrowAttr 0x7fffd8278e40 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8278f30 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:21:1 __acos 'double (double)' extern
| |-ParmVarDecl 0x7fffd8278ea0 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:53:31> col:31 __x 'double'
| `-NoThrowAttr 0x7fffd8278fd8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82790c8 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:55:13> col:13 implicit asin 'double (double)' extern
| |-ParmVarDecl 0x7fffd8279168 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd82791d0 <col:13> Implicit
|-FunctionDecl 0x7fffd8279218 prev 0x7fffd82790c8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:55:13 asin 'double (double)' extern
| |-ParmVarDecl 0x7fffd8279038 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:55:31> col:31 __x 'double'
| `-NoThrowAttr 0x7fffd82792c0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82793b0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:22:1 __asin 'double (double)' extern
| |-ParmVarDecl 0x7fffd8279320 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:55:31> col:31 __x 'double'
| `-NoThrowAttr 0x7fffd8279458 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8279548 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:57:13> col:13 implicit atan 'double (double)' extern
| |-ParmVarDecl 0x7fffd82795e8 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd8279650 <col:13> Implicit
|-FunctionDecl 0x7fffd8279698 prev 0x7fffd8279548 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:57:13 atan 'double (double)' extern
| |-ParmVarDecl 0x7fffd82794b8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:57:31> col:31 __x 'double'
| `-NoThrowAttr 0x7fffd8279740 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8279830 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:23:1 __atan 'double (double)' extern
| |-ParmVarDecl 0x7fffd82797a0 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:57:31> col:31 __x 'double'
| `-NoThrowAttr 0x7fffd82798d8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd827fc68 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:59:13> col:13 implicit atan2 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd827fd08 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x7fffd827fd68 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd827fdd8 <col:13> Implicit
|-FunctionDecl 0x7fffd827fe20 prev 0x7fffd827fc68 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:59:13 atan2 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd8279938 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:59:32> col:32 __y 'double'
| |-ParmVarDecl 0x7fffd82799b0 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:59:47> col:47 __x 'double'
| `-NoThrowAttr 0x7fffd827fed0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8280040 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:24:1 __atan2 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd827ff30 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:59:32> col:32 __y 'double'
| |-ParmVarDecl 0x7fffd827ffa8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:59:47> col:47 __x 'double'
| `-NoThrowAttr 0x7fffd82800f0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82801e0 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:62:17> col:17 implicit used cos 'double (double)' extern
| |-ParmVarDecl 0x7fffd8280280 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd82802e8 <col:17> Implicit
|-FunctionDecl 0x7fffd8280330 prev 0x7fffd82801e0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:62:17 used cos 'double (double)' extern
| |-ParmVarDecl 0x7fffd8280150 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:62:34> col:34 __x 'double'
| `-NoThrowAttr 0x7fffd82803d8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82804c8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:26:1 __cos 'double (double)' extern
| |-ParmVarDecl 0x7fffd8280438 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:62:34> col:34 __x 'double'
| `-NoThrowAttr 0x7fffd8280570 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8280660 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:64:17> col:17 implicit sin 'double (double)' extern
| |-ParmVarDecl 0x7fffd8280700 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd8280768 <col:17> Implicit
|-FunctionDecl 0x7fffd82807b0 prev 0x7fffd8280660 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:64:17 sin 'double (double)' extern
| |-ParmVarDecl 0x7fffd82805d0 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:64:34> col:34 __x 'double'
| `-NoThrowAttr 0x7fffd8280858 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8280948 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:28:1 __sin 'double (double)' extern
| |-ParmVarDecl 0x7fffd82808b8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:64:34> col:34 __x 'double'
| `-NoThrowAttr 0x7fffd82809f0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8280ae0 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:66:13> col:13 implicit tan 'double (double)' extern
| |-ParmVarDecl 0x7fffd8280b80 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd8280c00 <col:13> Implicit
|-FunctionDecl 0x7fffd8280c48 prev 0x7fffd8280ae0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:66:13 tan 'double (double)' extern
| |-ParmVarDecl 0x7fffd8280a50 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:66:30> col:30 __x 'double'
| `-NoThrowAttr 0x7fffd8280cf0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8280de0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:29:1 __tan 'double (double)' extern
| |-ParmVarDecl 0x7fffd8280d50 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:66:30> col:30 __x 'double'
| `-NoThrowAttr 0x7fffd8280e88 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8280f78 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:71:13> col:13 implicit cosh 'double (double)' extern
| |-ParmVarDecl 0x7fffd8281018 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd8281080 <col:13> Implicit
|-FunctionDecl 0x7fffd82810c8 prev 0x7fffd8280f78 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:71:13 cosh 'double (double)' extern
| |-ParmVarDecl 0x7fffd8280ee8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:71:31> col:31 __x 'double'
| `-NoThrowAttr 0x7fffd8281170 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8281260 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:30:1 __cosh 'double (double)' extern
| |-ParmVarDecl 0x7fffd82811d0 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:71:31> col:31 __x 'double'
| `-NoThrowAttr 0x7fffd8281308 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82813f8 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:73:13> col:13 implicit sinh 'double (double)' extern
| |-ParmVarDecl 0x7fffd8281498 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd8281500 <col:13> Implicit
|-FunctionDecl 0x7fffd8281548 prev 0x7fffd82813f8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:73:13 sinh 'double (double)' extern
| |-ParmVarDecl 0x7fffd8281368 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:73:31> col:31 __x 'double'
| `-NoThrowAttr 0x7fffd82815f0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82816e0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:31:1 __sinh 'double (double)' extern
| |-ParmVarDecl 0x7fffd8281650 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:73:31> col:31 __x 'double'
| `-NoThrowAttr 0x7fffd8281788 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8281878 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:75:13> col:13 implicit tanh 'double (double)' extern
| |-ParmVarDecl 0x7fffd8281918 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd8281980 <col:13> Implicit
|-FunctionDecl 0x7fffd82819c8 prev 0x7fffd8281878 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:75:13 tanh 'double (double)' extern
| |-ParmVarDecl 0x7fffd82817e8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:75:31> col:31 __x 'double'
| `-NoThrowAttr 0x7fffd8281a70 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8281b60 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:32:1 __tanh 'double (double)' extern
| |-ParmVarDecl 0x7fffd8281ad0 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:75:31> col:31 __x 'double'
| `-NoThrowAttr 0x7fffd82700c8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82701b8 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:85:13> col:13 implicit acosh 'double (double)' extern
| |-ParmVarDecl 0x7fffd8270258 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd82702c0 <col:13> Implicit
|-FunctionDecl 0x7fffd8270308 prev 0x7fffd82701b8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:85:13 acosh 'double (double)' extern
| |-ParmVarDecl 0x7fffd8270128 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:85:32> col:32 __x 'double'
| `-NoThrowAttr 0x7fffd82703b0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82704a0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:33:1 __acosh 'double (double)' extern
| |-ParmVarDecl 0x7fffd8270410 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:85:32> col:32 __x 'double'
| `-NoThrowAttr 0x7fffd8270548 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8270638 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:87:13> col:13 implicit asinh 'double (double)' extern
| |-ParmVarDecl 0x7fffd82706d8 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd8270740 <col:13> Implicit
|-FunctionDecl 0x7fffd8270788 prev 0x7fffd8270638 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:87:13 asinh 'double (double)' extern
| |-ParmVarDecl 0x7fffd82705a8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:87:32> col:32 __x 'double'
| `-NoThrowAttr 0x7fffd8270830 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8270920 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:34:1 __asinh 'double (double)' extern
| |-ParmVarDecl 0x7fffd8270890 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:87:32> col:32 __x 'double'
| `-NoThrowAttr 0x7fffd82709c8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8270ab8 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:89:13> col:13 implicit atanh 'double (double)' extern
| |-ParmVarDecl 0x7fffd8270b58 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd8270bc0 <col:13> Implicit
|-FunctionDecl 0x7fffd8270c08 prev 0x7fffd8270ab8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:89:13 atanh 'double (double)' extern
| |-ParmVarDecl 0x7fffd8270a28 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:89:32> col:32 __x 'double'
| `-NoThrowAttr 0x7fffd8270cb0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8270da0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:35:1 __atanh 'double (double)' extern
| |-ParmVarDecl 0x7fffd8270d10 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:89:32> col:32 __x 'double'
| `-NoThrowAttr 0x7fffd8270e48 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8270f38 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:95:17> col:17 implicit exp 'double (double)' extern
| |-ParmVarDecl 0x7fffd8270fd8 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd8271040 <col:17> Implicit
|-FunctionDecl 0x7fffd82718e0 prev 0x7fffd8270f38 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:95:17 exp 'double (double)' extern
| |-ParmVarDecl 0x7fffd8270ea8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:95:34> col:34 __x 'double'
| `-NoThrowAttr 0x7fffd8271988 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8271a78 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:37:1 __exp 'double (double)' extern
| |-ParmVarDecl 0x7fffd82719e8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:95:34> col:34 __x 'double'
| `-NoThrowAttr 0x7fffd8271b20 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8271cf8 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:98:13> col:13 implicit frexp 'double (double, int *)' extern
| |-ParmVarDecl 0x7fffd8271d98 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x7fffd8271df8 <<invalid sloc>> <invalid sloc> 'int *'
| `-NoThrowAttr 0x7fffd8271e68 <col:13> Implicit
|-FunctionDecl 0x7fffd8271eb0 prev 0x7fffd8271cf8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:98:13 frexp 'double (double, int *)' extern
| |-ParmVarDecl 0x7fffd8271b80 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:98:32> col:32 __x 'double'
| |-ParmVarDecl 0x7fffd8271c20 <col:37, col:42> col:42 __exponent 'int *'
| `-NoThrowAttr 0x7fffd8271f60 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82720d0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:38:1 __frexp 'double (double, int *)' extern
| |-ParmVarDecl 0x7fffd8271fc0 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:98:32> col:32 __x 'double'
| |-ParmVarDecl 0x7fffd8272038 <col:37, col:42> col:42 __exponent 'int *'
| `-NoThrowAttr 0x7fffd8272180 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8272338 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:101:13> col:13 implicit ldexp 'double (double, int)' extern
| |-ParmVarDecl 0x7fffd82723d8 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x7fffd8272438 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x7fffd82724a8 <col:13> Implicit
|-FunctionDecl 0x7fffd82724f0 prev 0x7fffd8272338 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:101:13 ldexp 'double (double, int)' extern
| |-ParmVarDecl 0x7fffd82721e0 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:101:32> col:32 __x 'double'
| |-ParmVarDecl 0x7fffd8272258 <col:37, col:41> col:41 __exponent 'int'
| `-NoThrowAttr 0x7fffd82725a0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8272710 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:39:1 __ldexp 'double (double, int)' extern
| |-ParmVarDecl 0x7fffd8272600 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:101:32> col:32 __x 'double'
| |-ParmVarDecl 0x7fffd8272678 <col:37, col:41> col:41 __exponent 'int'
| `-NoThrowAttr 0x7fffd82727c0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8273150 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:104:17> col:17 implicit log 'double (double)' extern
| |-ParmVarDecl 0x7fffd82731f0 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd8273258 <col:17> Implicit
|-FunctionDecl 0x7fffd82732a0 prev 0x7fffd8273150 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:104:17 log 'double (double)' extern
| |-ParmVarDecl 0x7fffd8272820 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:104:34> col:34 __x 'double'
| `-NoThrowAttr 0x7fffd8273348 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8273438 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:41:1 __log 'double (double)' extern
| |-ParmVarDecl 0x7fffd82733a8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:104:34> col:34 __x 'double'
| `-NoThrowAttr 0x7fffd82734e0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82735d0 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:107:13> col:13 implicit log10 'double (double)' extern
| |-ParmVarDecl 0x7fffd8273670 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd82736d8 <col:13> Implicit
|-FunctionDecl 0x7fffd8273720 prev 0x7fffd82735d0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:107:13 log10 'double (double)' extern
| |-ParmVarDecl 0x7fffd8273540 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:107:32> col:32 __x 'double'
| `-NoThrowAttr 0x7fffd82737c8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82738b8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:42:1 __log10 'double (double)' extern
| |-ParmVarDecl 0x7fffd8273828 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:107:32> col:32 __x 'double'
| `-NoThrowAttr 0x7fffd8273960 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8273b38 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:110:13> col:13 implicit modf 'double (double, double *)' extern
| |-ParmVarDecl 0x7fffd8273bd8 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x7fffd8273c38 <<invalid sloc>> <invalid sloc> 'double *'
| `-NoThrowAttr 0x7fffd8273ca8 <col:13> Implicit
|-FunctionDecl 0x7fffd8273cf0 prev 0x7fffd8273b38 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:110:13 modf 'double (double, double *)' extern
| |-ParmVarDecl 0x7fffd82739c0 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:110:31> col:31 __x 'double'
| |-ParmVarDecl 0x7fffd8273a60 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:110:47> col:47 __iptr 'double *'
| `-NoThrowAttr 0x7fffd8273da0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8273f30 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> <scratch space>:43:1 __modf 'double (double, double *)' extern
| |-ParmVarDecl 0x7fffd8273e00 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:110:31> col:31 __x 'double'
| |-ParmVarDecl 0x7fffd8273e78 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:110:47> col:47 __iptr 'double *'
| |-NonNullAttr 0x7fffd8273fe0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:110:69> 1
| `-NoThrowAttr 0x7fffd8274040 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8274780 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:119:13> col:13 implicit expm1 'double (double)' extern
| |-ParmVarDecl 0x7fffd8274820 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd8274888 <col:13> Implicit
|-FunctionDecl 0x7fffd82748d0 prev 0x7fffd8274780 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:119:13 expm1 'double (double)' extern
| |-ParmVarDecl 0x7fffd8274068 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:119:32> col:32 __x 'double'
| `-NoThrowAttr 0x7fffd8274978 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8274a68 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:45:1 __expm1 'double (double)' extern
| |-ParmVarDecl 0x7fffd82749d8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:119:32> col:32 __x 'double'
| `-NoThrowAttr 0x7fffd8274b10 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8274c00 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:122:13> col:13 implicit log1p 'double (double)' extern
| |-ParmVarDecl 0x7fffd8274ca0 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd8274d08 <col:13> Implicit
|-FunctionDecl 0x7fffd8274d50 prev 0x7fffd8274c00 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:122:13 log1p 'double (double)' extern
| |-ParmVarDecl 0x7fffd8274b70 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:122:32> col:32 __x 'double'
| `-NoThrowAttr 0x7fffd8274df8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8274ee8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:46:1 __log1p 'double (double)' extern
| |-ParmVarDecl 0x7fffd8274e58 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:122:32> col:32 __x 'double'
| `-NoThrowAttr 0x7fffd8274f90 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8275080 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:125:13> col:13 implicit logb 'double (double)' extern
| |-ParmVarDecl 0x7fffd8275120 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd8275188 <col:13> Implicit
|-FunctionDecl 0x7fffd82751d0 prev 0x7fffd8275080 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:125:13 logb 'double (double)' extern
| |-ParmVarDecl 0x7fffd8274ff0 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:125:31> col:31 __x 'double'
| `-NoThrowAttr 0x7fffd8275278 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8275368 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:47:1 __logb 'double (double)' extern
| |-ParmVarDecl 0x7fffd82752d8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:125:31> col:31 __x 'double'
| `-NoThrowAttr 0x7fffd8275410 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8275500 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:130:13> col:13 implicit exp2 'double (double)' extern
| |-ParmVarDecl 0x7fffd82755a0 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd8275608 <col:13> Implicit
|-FunctionDecl 0x7fffd8275650 prev 0x7fffd8275500 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:130:13 exp2 'double (double)' extern
| |-ParmVarDecl 0x7fffd8275470 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:130:31> col:31 __x 'double'
| `-NoThrowAttr 0x7fffd82756f8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd828dc90 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:48:1 __exp2 'double (double)' extern
| |-ParmVarDecl 0x7fffd828dc00 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:130:31> col:31 __x 'double'
| `-NoThrowAttr 0x7fffd828dd38 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd828de28 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:133:13> col:13 implicit log2 'double (double)' extern
| |-ParmVarDecl 0x7fffd828dec8 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd828df30 <col:13> Implicit
|-FunctionDecl 0x7fffd828df78 prev 0x7fffd828de28 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:133:13 log2 'double (double)' extern
| |-ParmVarDecl 0x7fffd828dd98 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:133:31> col:31 __x 'double'
| `-NoThrowAttr 0x7fffd828e020 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd828e110 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:49:1 __log2 'double (double)' extern
| |-ParmVarDecl 0x7fffd828e080 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:133:31> col:31 __x 'double'
| `-NoThrowAttr 0x7fffd828e1b8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd828e328 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:140:17> col:17 implicit used pow 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd828e3c8 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x7fffd828e428 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd828e498 <col:17> Implicit
|-FunctionDecl 0x7fffd828e4e0 prev 0x7fffd828e328 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:140:17 used pow 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd828e218 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:140:34> col:34 __x 'double'
| |-ParmVarDecl 0x7fffd828e290 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:140:49> col:49 __y 'double'
| `-NoThrowAttr 0x7fffd828e590 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd828e700 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:51:1 __pow 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd828e5f0 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:140:34> col:34 __x 'double'
| |-ParmVarDecl 0x7fffd828e668 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:140:49> col:49 __y 'double'
| `-NoThrowAttr 0x7fffd828e7b0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd828e8a0 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:143:13> col:13 implicit used sqrt 'double (double)' extern
| |-ParmVarDecl 0x7fffd828e940 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd828e9a8 <col:13> Implicit
|-FunctionDecl 0x7fffd828e9f0 prev 0x7fffd828e8a0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:143:13 used sqrt 'double (double)' extern
| |-ParmVarDecl 0x7fffd828e810 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:143:31> col:31 __x 'double'
| `-NoThrowAttr 0x7fffd828ea98 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd828ee10 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:52:1 __sqrt 'double (double)' extern
| |-ParmVarDecl 0x7fffd828eaf8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:143:31> col:31 __x 'double'
| `-NoThrowAttr 0x7fffd828eeb8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd828f028 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:147:13> col:13 implicit hypot 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd828f0c8 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x7fffd828f128 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd828f198 <col:13> Implicit
|-FunctionDecl 0x7fffd828f1e0 prev 0x7fffd828f028 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:147:13 hypot 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd828ef18 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:147:32> col:32 __x 'double'
| |-ParmVarDecl 0x7fffd828ef90 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:147:47> col:47 __y 'double'
| `-NoThrowAttr 0x7fffd828f290 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd828f400 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:53:1 __hypot 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd828f2f0 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:147:32> col:32 __x 'double'
| |-ParmVarDecl 0x7fffd828f368 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:147:47> col:47 __y 'double'
| `-NoThrowAttr 0x7fffd828f4b0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd828f5a0 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:152:13> col:13 implicit cbrt 'double (double)' extern
| |-ParmVarDecl 0x7fffd828f640 <<invalid sloc>> <invalid sloc> 'double'
| |-NoThrowAttr 0x7fffd828f6a8 <col:13> Implicit
| `-ConstAttr 0x7fffd828f6f0 <col:13> Implicit
|-FunctionDecl 0x7fffd828f700 prev 0x7fffd828f5a0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:152:13 cbrt 'double (double)' extern
| |-ParmVarDecl 0x7fffd828f510 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:152:31> col:31 __x 'double'
| |-NoThrowAttr 0x7fffd828f7a8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
| `-ConstAttr 0x7fffd828f7f0 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:152:13> Inherited Implicit
|-FunctionDecl 0x7fffd828f8a8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:54:1 __cbrt 'double (double)' extern
| |-ParmVarDecl 0x7fffd828f818 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:152:31> col:31 __x 'double'
| `-NoThrowAttr 0x7fffd828f950 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd828fa40 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:159:14> col:14 implicit used ceil 'double (double)' extern
| |-ParmVarDecl 0x7fffd828fae0 <<invalid sloc>> <invalid sloc> 'double'
| |-NoThrowAttr 0x7fffd828fb48 <col:14> Implicit
| `-ConstAttr 0x7fffd828fb90 <col:14> Implicit
|-FunctionDecl 0x7fffd828fba0 prev 0x7fffd828fa40 </usr/include/math.h:283:3, line:280:66> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:159:14 used ceil 'double (double)' extern
| |-ParmVarDecl 0x7fffd828f9b0 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:159:32> col:32 __x 'double'
| |-ConstAttr 0x7fffd828fc48 <col:39>
| `-NoThrowAttr 0x7fffd828fc90 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd828fd48 </usr/include/math.h:283:3, line:281:79> <scratch space>:55:1 __ceil 'double (double)' extern
| |-ParmVarDecl 0x7fffd828fcb8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:159:32> col:32 __x 'double'
| |-ConstAttr 0x7fffd828fdf0 <col:39>
| `-NoThrowAttr 0x7fffd8291188 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8291240 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:162:14> col:14 implicit used fabs 'double (double)' extern
| |-ParmVarDecl 0x7fffd82912e0 <<invalid sloc>> <invalid sloc> 'double'
| |-NoThrowAttr 0x7fffd8291348 <col:14> Implicit
| `-ConstAttr 0x7fffd8291390 <col:14> Implicit
|-FunctionDecl 0x7fffd82913a0 prev 0x7fffd8291240 </usr/include/math.h:283:3, line:280:66> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:162:14 used fabs 'double (double)' extern
| |-ParmVarDecl 0x7fffd82911b0 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:162:32> col:32 __x 'double'
| |-ConstAttr 0x7fffd8291448 <col:39>
| `-NoThrowAttr 0x7fffd8291490 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8291548 </usr/include/math.h:283:3, line:281:79> <scratch space>:56:1 __fabs 'double (double)' extern
| |-ParmVarDecl 0x7fffd82914b8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:162:32> col:32 __x 'double'
| |-ConstAttr 0x7fffd82915f0 <col:39>
| `-NoThrowAttr 0x7fffd8291638 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82916f0 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:165:14> col:14 implicit used floor 'double (double)' extern
| |-ParmVarDecl 0x7fffd8291790 <<invalid sloc>> <invalid sloc> 'double'
| |-NoThrowAttr 0x7fffd82917f8 <col:14> Implicit
| `-ConstAttr 0x7fffd8291840 <col:14> Implicit
|-FunctionDecl 0x7fffd8291850 prev 0x7fffd82916f0 </usr/include/math.h:283:3, line:280:66> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:165:14 used floor 'double (double)' extern
| |-ParmVarDecl 0x7fffd8291660 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:165:33> col:33 __x 'double'
| |-ConstAttr 0x7fffd82918f8 <col:40>
| `-NoThrowAttr 0x7fffd8291940 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82919f8 </usr/include/math.h:283:3, line:281:79> <scratch space>:57:1 __floor 'double (double)' extern
| |-ParmVarDecl 0x7fffd8291968 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:165:33> col:33 __x 'double'
| |-ConstAttr 0x7fffd8291aa0 <col:40>
| `-NoThrowAttr 0x7fffd8291ae8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8291c20 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:168:13> col:13 implicit used fmod 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd8291cc0 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x7fffd8291d20 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd8291d90 <col:13> Implicit
|-FunctionDecl 0x7fffd8291dd8 prev 0x7fffd8291c20 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:168:13 used fmod 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd8291b10 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:168:31> col:31 __x 'double'
| |-ParmVarDecl 0x7fffd8291b88 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:168:46> col:46 __y 'double'
| `-NoThrowAttr 0x7fffd8291e88 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8291ff8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:58:1 __fmod 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd8291ee8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:168:31> col:31 __x 'double'
| |-ParmVarDecl 0x7fffd8291f60 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:168:46> col:46 __y 'double'
| `-NoThrowAttr 0x7fffd82920a8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8281ca0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:177:74> col:19 isinf 'int (double)' extern
| |-ParmVarDecl 0x7fffd8281c10 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:177:38> col:38 __value 'double'
| |-ConstAttr 0x7fffd8281d48 <col:64>
| `-NoThrowAttr 0x7fffd8281d90 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8281e48 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:182:19> col:19 implicit finite 'int (double)' extern
| |-ParmVarDecl 0x7fffd8281ee8 <<invalid sloc>> <invalid sloc> 'double'
| |-NoThrowAttr 0x7fffd8281f50 <col:19> Implicit
| `-ConstAttr 0x7fffd8281f98 <col:19> Implicit
|-FunctionDecl 0x7fffd8281fa8 prev 0x7fffd8281e48 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:182:75> col:19 finite 'int (double)' extern
| |-ParmVarDecl 0x7fffd8281db8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:182:39> col:39 __value 'double'
| |-ConstAttr 0x7fffd8282050 <col:65>
| `-NoThrowAttr 0x7fffd8282098 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82821d0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:185:13 drem 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd82820c0 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:185:31> col:31 __x 'double'
| |-ParmVarDecl 0x7fffd8282138 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:185:46> col:46 __y 'double'
| `-NoThrowAttr 0x7fffd8282280 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82823f0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:59:1 __drem 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd82822e0 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:185:31> col:31 __x 'double'
| |-ParmVarDecl 0x7fffd8282358 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:185:46> col:46 __y 'double'
| `-NoThrowAttr 0x7fffd82824a0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8282590 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:189:13 significand 'double (double)' extern
| |-ParmVarDecl 0x7fffd8282500 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:189:38> col:38 __x 'double'
| `-NoThrowAttr 0x7fffd8282638 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8282728 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:60:1 __significand 'double (double)' extern
| |-ParmVarDecl 0x7fffd8282698 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:189:38> col:38 __x 'double'
| `-NoThrowAttr 0x7fffd82827d0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8282940 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:196:14> col:14 implicit copysign 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd82829e0 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x7fffd8282a40 <<invalid sloc>> <invalid sloc> 'double'
| |-NoThrowAttr 0x7fffd8282ab0 <col:14> Implicit
| `-ConstAttr 0x7fffd8282af8 <col:14> Implicit
|-FunctionDecl 0x7fffd8282b08 prev 0x7fffd8282940 </usr/include/math.h:283:3, line:280:66> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:196:14 copysign 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd8282830 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:196:36> col:36 __x 'double'
| |-ParmVarDecl 0x7fffd82828a8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:196:51> col:51 __y 'double'
| |-ConstAttr 0x7fffd8282bb8 <col:58>
| `-NoThrowAttr 0x7fffd8282c00 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8282f88 </usr/include/math.h:283:3, line:281:79> <scratch space>:61:1 __copysign 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd8282e78 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:196:36> col:36 __x 'double'
| |-ParmVarDecl 0x7fffd8282ef0 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:196:51> col:51 __y 'double'
| |-ConstAttr 0x7fffd8283038 <col:58>
| `-NoThrowAttr 0x7fffd8283080 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8283178 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:201:14> col:14 implicit nan 'double (const char *)' extern
| |-ParmVarDecl 0x7fffd8283218 <<invalid sloc>> <invalid sloc> 'const char *'
| |-NoThrowAttr 0x7fffd8283280 <col:14> Implicit
| `-PureAttr 0x7fffd82832c8 <col:14> Implicit
|-FunctionDecl 0x7fffd82832d8 prev 0x7fffd8283178 </usr/include/math.h:283:3, line:280:66> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:201:14 nan 'double (const char *)' extern
| |-ParmVarDecl 0x7fffd82830a8 <col:21, col:33> col:33 __tagb 'const char *'
| |-ConstAttr 0x7fffd8283380 <col:43>
| |-NoThrowAttr 0x7fffd82833c8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
| `-PureAttr 0x7fffd82833d8 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:201:14> Inherited Implicit
|-FunctionDecl 0x7fffd8283490 </usr/include/math.h:283:3, line:281:79> <scratch space>:62:1 __nan 'double (const char *)' extern
| |-ParmVarDecl 0x7fffd8283400 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:201:21, col:33> col:33 __tagb 'const char *'
| |-ConstAttr 0x7fffd8283538 <col:43>
| `-NoThrowAttr 0x7fffd8283580 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8283638 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:211:74> col:19 isnan 'int (double)' extern
| |-ParmVarDecl 0x7fffd82835a8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:211:38> col:38 __value 'double'
| |-ConstAttr 0x7fffd82836e0 <col:64>
| `-NoThrowAttr 0x7fffd8283728 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82837e0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:217:13 j0 'double (double)' extern
| |-ParmVarDecl 0x7fffd8283750 </usr/include/math.h:285:20> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:217:28 'double'
| `-NoThrowAttr 0x7fffd8283888 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8283978 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:63:1 __j0 'double (double)' extern
| |-ParmVarDecl 0x7fffd82838e8 </usr/include/math.h:285:20> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:217:28 'double'
| `-NoThrowAttr 0x7fffd8283a20 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8283b10 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:218:13 j1 'double (double)' extern
| |-ParmVarDecl 0x7fffd8283a80 </usr/include/math.h:285:20> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:218:28 'double'
| `-NoThrowAttr 0x7fffd8283bb8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8283ca8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:64:1 __j1 'double (double)' extern
| |-ParmVarDecl 0x7fffd8283c18 </usr/include/math.h:285:20> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:218:28 'double'
| `-NoThrowAttr 0x7fffd8283d50 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8283f88 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:219:13 jn 'double (int, double)' extern
| |-ParmVarDecl 0x7fffd8283db0 <col:19> col:22 'int'
| |-ParmVarDecl 0x7fffd8283eb0 </usr/include/math.h:285:20> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:219:33 'double'
| `-NoThrowAttr 0x7fffd8284038 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82841a8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:65:1 __jn 'double (int, double)' extern
| |-ParmVarDecl 0x7fffd8284098 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:219:19> col:22 'int'
| |-ParmVarDecl 0x7fffd8284110 </usr/include/math.h:285:20> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:219:33 'double'
| `-NoThrowAttr 0x7fffd8284258 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8284348 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:220:13 y0 'double (double)' extern
| |-ParmVarDecl 0x7fffd82842b8 </usr/include/math.h:285:20> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:220:28 'double'
| `-NoThrowAttr 0x7fffd82843f0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82844e0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:66:1 __y0 'double (double)' extern
| |-ParmVarDecl 0x7fffd8284450 </usr/include/math.h:285:20> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:220:28 'double'
| `-NoThrowAttr 0x7fffd8284588 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8284678 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:221:13 y1 'double (double)' extern
| |-ParmVarDecl 0x7fffd82845e8 </usr/include/math.h:285:20> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:221:28 'double'
| `-NoThrowAttr 0x7fffd8284720 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8284810 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:67:1 __y1 'double (double)' extern
| |-ParmVarDecl 0x7fffd8284780 </usr/include/math.h:285:20> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:221:28 'double'
| `-NoThrowAttr 0x7fffd82848b8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8284a28 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:222:13 yn 'double (int, double)' extern
| |-ParmVarDecl 0x7fffd8284918 <col:19> col:22 'int'
| |-ParmVarDecl 0x7fffd8284990 </usr/include/math.h:285:20> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:222:33 'double'
| `-NoThrowAttr 0x7fffd8284ad8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8284c48 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:68:1 __yn 'double (int, double)' extern
| |-ParmVarDecl 0x7fffd8284b38 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:222:19> col:22 'int'
| |-ParmVarDecl 0x7fffd8284bb0 </usr/include/math.h:285:20> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:222:33 'double'
| `-NoThrowAttr 0x7fffd8284cf8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8284de8 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:228:13> col:13 implicit erf 'double (double)' extern
| |-ParmVarDecl 0x7fffd8285080 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd82850e8 <col:13> Implicit
|-FunctionDecl 0x7fffd8285130 prev 0x7fffd8284de8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:228:13 erf 'double (double)' extern
| |-ParmVarDecl 0x7fffd8284d58 </usr/include/math.h:285:20> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:228:29 'double'
| `-NoThrowAttr 0x7fffd82851d8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82852c8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:69:1 __erf 'double (double)' extern
| |-ParmVarDecl 0x7fffd8285238 </usr/include/math.h:285:20> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:228:29 'double'
| `-NoThrowAttr 0x7fffd8285370 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8285460 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:229:13> col:13 implicit erfc 'double (double)' extern
| |-ParmVarDecl 0x7fffd8285500 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd8285568 <col:13> Implicit
|-FunctionDecl 0x7fffd82855b0 prev 0x7fffd8285460 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:229:13 erfc 'double (double)' extern
| |-ParmVarDecl 0x7fffd82853d0 </usr/include/math.h:285:20> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:229:30 'double'
| `-NoThrowAttr 0x7fffd8285658 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8285748 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:70:1 __erfc 'double (double)' extern
| |-ParmVarDecl 0x7fffd82856b8 </usr/include/math.h:285:20> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:229:30 'double'
| `-NoThrowAttr 0x7fffd82857f0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82858e0 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:230:13> col:13 implicit lgamma 'double (double)' extern
| |-ParmVarDecl 0x7fffd8285980 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd82859e8 <col:13> Implicit
|-FunctionDecl 0x7fffd8285a30 prev 0x7fffd82858e0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:230:13 lgamma 'double (double)' extern
| |-ParmVarDecl 0x7fffd8285850 </usr/include/math.h:285:20> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:230:32 'double'
| `-NoThrowAttr 0x7fffd8285ad8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8285bc8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:71:1 __lgamma 'double (double)' extern
| |-ParmVarDecl 0x7fffd8285b38 </usr/include/math.h:285:20> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:230:32 'double'
| `-NoThrowAttr 0x7fffd8285c70 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8285d60 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:235:13> col:13 implicit tgamma 'double (double)' extern
| |-ParmVarDecl 0x7fffd8285e00 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd8285e68 <col:13> Implicit
|-FunctionDecl 0x7fffd8285eb0 prev 0x7fffd8285d60 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:235:13 tgamma 'double (double)' extern
| |-ParmVarDecl 0x7fffd8285cd0 </usr/include/math.h:285:20> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:235:32 'double'
| `-NoThrowAttr 0x7fffd8285f58 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82870a0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:72:1 __tgamma 'double (double)' extern
| |-ParmVarDecl 0x7fffd8285fb8 </usr/include/math.h:285:20> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:235:32 'double'
| `-NoThrowAttr 0x7fffd8287148 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8287238 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:241:13 gamma 'double (double)' extern
| |-ParmVarDecl 0x7fffd82871a8 </usr/include/math.h:285:20> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:241:31 'double'
| `-NoThrowAttr 0x7fffd82872e0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82873d0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:73:1 __gamma 'double (double)' extern
| |-ParmVarDecl 0x7fffd8287340 </usr/include/math.h:285:20> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:241:31 'double'
| `-NoThrowAttr 0x7fffd8287478 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82875e8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:74:1 lgamma_r 'double (double, int *)' extern
| |-ParmVarDecl 0x7fffd82874d8 </usr/include/math.h:285:20> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:249:34 'double'
| |-ParmVarDecl 0x7fffd8287550 <col:36, col:41> col:41 __signgamp 'int *'
| `-NoThrowAttr 0x7fffd8287698 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8287808 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:76:1 __lgamma_r 'double (double, int *)' extern
| |-ParmVarDecl 0x7fffd82876f8 </usr/include/math.h:285:20> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:249:34 'double'
| |-ParmVarDecl 0x7fffd8287770 <col:36, col:41> col:41 __signgamp 'int *'
| `-NoThrowAttr 0x7fffd82878b8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82879a8 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:256:13> col:13 implicit rint 'double (double)' extern
| |-ParmVarDecl 0x7fffd8287a48 <<invalid sloc>> <invalid sloc> 'double'
| |-NoThrowAttr 0x7fffd8287ab0 <col:13> Implicit
| `-ConstAttr 0x7fffd8287af8 <col:13> Implicit
|-FunctionDecl 0x7fffd8287b08 prev 0x7fffd82879a8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:256:13 rint 'double (double)' extern
| |-ParmVarDecl 0x7fffd8287918 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:256:31> col:31 __x 'double'
| |-NoThrowAttr 0x7fffd8287bb0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
| `-ConstAttr 0x7fffd8287bf8 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:256:13> Inherited Implicit
|-FunctionDecl 0x7fffd8287cb0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:77:1 __rint 'double (double)' extern
| |-ParmVarDecl 0x7fffd8287c20 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:256:31> col:31 __x 'double'
| `-NoThrowAttr 0x7fffd8287d58 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8287ec8 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:259:13> col:13 implicit nextafter 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd8287f68 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x7fffd8287fc8 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd8288038 <col:13> Implicit
|-FunctionDecl 0x7fffd8288310 prev 0x7fffd8287ec8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:259:13 nextafter 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd8287db8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:259:36> col:36 __x 'double'
| |-ParmVarDecl 0x7fffd8287e30 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:259:51> col:51 __y 'double'
| `-NoThrowAttr 0x7fffd82883c0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8288530 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:78:1 __nextafter 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd8288420 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:259:36> col:36 __x 'double'
| |-ParmVarDecl 0x7fffd8288498 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:259:51> col:51 __y 'double'
| `-NoThrowAttr 0x7fffd82885e0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8288798 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:261:13> col:13 implicit nexttoward 'double (double, long double)' extern
| |-ParmVarDecl 0x7fffd8288838 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x7fffd8288898 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd8288908 <col:13> Implicit
|-FunctionDecl 0x7fffd8288950 prev 0x7fffd8288798 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:261:13 nexttoward 'double (double, long double)' extern
| |-ParmVarDecl 0x7fffd8288640 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:261:37> col:37 __x 'double'
| |-ParmVarDecl 0x7fffd82886b8 <col:42, col:54> col:54 __y 'long double'
| `-NoThrowAttr 0x7fffd8288a00 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8288b70 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:79:1 __nexttoward 'double (double, long double)' extern
| |-ParmVarDecl 0x7fffd8288a60 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:261:37> col:37 __x 'double'
| |-ParmVarDecl 0x7fffd8288ad8 <col:42, col:54> col:54 __y 'long double'
| `-NoThrowAttr 0x7fffd8288c20 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8288d90 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:272:13> col:13 implicit remainder 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd8288e30 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x7fffd8288e90 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd8288f00 <col:13> Implicit
|-FunctionDecl 0x7fffd8288f48 prev 0x7fffd8288d90 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:272:13 remainder 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd8288c80 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:272:36> col:36 __x 'double'
| |-ParmVarDecl 0x7fffd8288cf8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:272:51> col:51 __y 'double'
| `-NoThrowAttr 0x7fffd8288ff8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8289168 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:81:1 __remainder 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd8289058 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:272:36> col:36 __x 'double'
| |-ParmVarDecl 0x7fffd82890d0 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:272:51> col:51 __y 'double'
| `-NoThrowAttr 0x7fffd8289218 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8289688 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:276:13> col:13 implicit scalbn 'double (double, int)' extern
| |-ParmVarDecl 0x7fffd8289728 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x7fffd8289788 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x7fffd82897f8 <col:13> Implicit
|-FunctionDecl 0x7fffd8289840 prev 0x7fffd8289688 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:276:13 scalbn 'double (double, int)' extern
| |-ParmVarDecl 0x7fffd8289278 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:276:33> col:33 __x 'double'
| |-ParmVarDecl 0x7fffd82895f0 <col:38, col:42> col:42 __n 'int'
| `-NoThrowAttr 0x7fffd82898f0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8289a60 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:82:1 __scalbn 'double (double, int)' extern
| |-ParmVarDecl 0x7fffd8289950 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:276:33> col:33 __x 'double'
| |-ParmVarDecl 0x7fffd82899c8 <col:38, col:42> col:42 __n 'int'
| `-NoThrowAttr 0x7fffd8289b10 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8289c00 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:280:17> col:17 implicit ilogb 'int (double)' extern
| |-ParmVarDecl 0x7fffd8289ca0 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd8289d08 <col:17> Implicit
|-FunctionDecl 0x7fffd8289d50 prev 0x7fffd8289c00 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:280:17 ilogb 'int (double)' extern
| |-ParmVarDecl 0x7fffd8289b70 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:280:36> col:36 __x 'double'
| `-NoThrowAttr 0x7fffd8289df8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8289ee8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:83:1 __ilogb 'int (double)' extern
| |-ParmVarDecl 0x7fffd8289e58 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:280:36> col:36 __x 'double'
| `-NoThrowAttr 0x7fffd8289f90 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd828a148 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:290:13> col:13 implicit scalbln 'double (double, long)' extern
| |-ParmVarDecl 0x7fffd828a1e8 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x7fffd828a248 <<invalid sloc>> <invalid sloc> 'long'
| `-NoThrowAttr 0x7fffd828a2b8 <col:13> Implicit
|-FunctionDecl 0x7fffd828a300 prev 0x7fffd828a148 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:290:13 scalbln 'double (double, long)' extern
| |-ParmVarDecl 0x7fffd8289ff0 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:290:34> col:34 __x 'double'
| |-ParmVarDecl 0x7fffd828a068 <col:39, col:48> col:48 __n 'long'
| `-NoThrowAttr 0x7fffd828a3b0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd828a520 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:85:1 __scalbln 'double (double, long)' extern
| |-ParmVarDecl 0x7fffd828a410 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:290:34> col:34 __x 'double'
| |-ParmVarDecl 0x7fffd828a488 <col:39, col:48> col:48 __n 'long'
| `-NoThrowAttr 0x7fffd828a5d0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd828adf0 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:294:13> col:13 implicit nearbyint 'double (double)' extern
| |-ParmVarDecl 0x7fffd828ae90 <<invalid sloc>> <invalid sloc> 'double'
| |-NoThrowAttr 0x7fffd828aef8 <col:13> Implicit
| `-ConstAttr 0x7fffd828af40 <col:13> Implicit
|-FunctionDecl 0x7fffd828af50 prev 0x7fffd828adf0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:294:13 nearbyint 'double (double)' extern
| |-ParmVarDecl 0x7fffd828ad60 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:294:36> col:36 __x 'double'
| |-NoThrowAttr 0x7fffd828aff8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
| `-ConstAttr 0x7fffd828b040 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:294:13> Inherited Implicit
|-FunctionDecl 0x7fffd828b0f8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:86:1 __nearbyint 'double (double)' extern
| |-ParmVarDecl 0x7fffd828b068 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:294:36> col:36 __x 'double'
| `-NoThrowAttr 0x7fffd828b1a0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd828b290 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:298:14> col:14 implicit round 'double (double)' extern
| |-ParmVarDecl 0x7fffd828b330 <<invalid sloc>> <invalid sloc> 'double'
| |-NoThrowAttr 0x7fffd828b398 <col:14> Implicit
| `-ConstAttr 0x7fffd828b3e0 <col:14> Implicit
|-FunctionDecl 0x7fffd828b3f0 prev 0x7fffd828b290 </usr/include/math.h:283:3, line:280:66> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:298:14 round 'double (double)' extern
| |-ParmVarDecl 0x7fffd828b200 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:298:33> col:33 __x 'double'
| |-ConstAttr 0x7fffd828b498 <col:40>
| `-NoThrowAttr 0x7fffd828b4e0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd828b598 </usr/include/math.h:283:3, line:281:79> <scratch space>:87:1 __round 'double (double)' extern
| |-ParmVarDecl 0x7fffd828b508 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:298:33> col:33 __x 'double'
| |-ConstAttr 0x7fffd828b640 <col:40>
| `-NoThrowAttr 0x7fffd828b688 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd828b740 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:302:14> col:14 implicit trunc 'double (double)' extern
| |-ParmVarDecl 0x7fffd828b7e0 <<invalid sloc>> <invalid sloc> 'double'
| |-NoThrowAttr 0x7fffd828b848 <col:14> Implicit
| `-ConstAttr 0x7fffd828b890 <col:14> Implicit
|-FunctionDecl 0x7fffd828b8a0 prev 0x7fffd828b740 </usr/include/math.h:283:3, line:280:66> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:302:14 trunc 'double (double)' extern
| |-ParmVarDecl 0x7fffd828b6b0 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:302:33> col:33 __x 'double'
| |-ConstAttr 0x7fffd828b948 <col:40>
| `-NoThrowAttr 0x7fffd828b990 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd828ba48 </usr/include/math.h:283:3, line:281:79> <scratch space>:88:1 __trunc 'double (double)' extern
| |-ParmVarDecl 0x7fffd828b9b8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:302:33> col:33 __x 'double'
| |-ConstAttr 0x7fffd828baf0 <col:40>
| `-NoThrowAttr 0x7fffd828bb38 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82aa190 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:307:13> col:13 implicit remquo 'double (double, double, int *)' extern
| |-ParmVarDecl 0x7fffd82aa230 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x7fffd82aa290 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x7fffd82aa2f0 <<invalid sloc>> <invalid sloc> 'int *'
| `-NoThrowAttr 0x7fffd82aa368 <col:13> Implicit
|-FunctionDecl 0x7fffd82aa3b0 prev 0x7fffd82aa190 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:307:13 remquo 'double (double, double, int *)' extern
| |-ParmVarDecl 0x7fffd828bb60 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:307:33> col:33 __x 'double'
| |-ParmVarDecl 0x7fffd828bbd8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:307:48> col:48 __y 'double'
| |-ParmVarDecl 0x7fffd828bc50 <col:53, col:58> col:58 __quo 'int *'
| `-NoThrowAttr 0x7fffd82aa468 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82aa658 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:89:1 __remquo 'double (double, double, int *)' extern
| |-ParmVarDecl 0x7fffd82aa4c8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:307:33> col:33 __x 'double'
| |-ParmVarDecl 0x7fffd82aa540 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:307:48> col:48 __y 'double'
| |-ParmVarDecl 0x7fffd82aa5b8 <col:53, col:58> col:58 __quo 'int *'
| `-NoThrowAttr 0x7fffd82aa710 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82aa838 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:314:22> col:22 implicit lrint 'long (double)' extern
| |-ParmVarDecl 0x7fffd82aa8d8 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd82aa940 <col:22> Implicit
|-FunctionDecl 0x7fffd82aa988 prev 0x7fffd82aa838 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:314:22 lrint 'long (double)' extern
| |-ParmVarDecl 0x7fffd82aa770 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:314:41> col:41 __x 'double'
| `-NoThrowAttr 0x7fffd82aaa30 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82aab20 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:90:1 __lrint 'long (double)' extern
| |-ParmVarDecl 0x7fffd82aaa90 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:314:41> col:41 __x 'double'
| `-NoThrowAttr 0x7fffd82aabc8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82aacf8 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:316:27> col:27 implicit llrint 'long long (double)' extern
| |-ParmVarDecl 0x7fffd82aad98 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd82aae00 <col:27> Implicit
|-FunctionDecl 0x7fffd82aae48 prev 0x7fffd82aacf8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:316:27 llrint 'long long (double)' extern
| |-ParmVarDecl 0x7fffd82aac28 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:316:47> col:47 __x 'double'
| `-NoThrowAttr 0x7fffd82aaef0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82aafe0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:91:1 __llrint 'long long (double)' extern
| |-ParmVarDecl 0x7fffd82aaf50 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:316:47> col:47 __x 'double'
| `-NoThrowAttr 0x7fffd82ab088 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82ab190 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:320:22> col:22 implicit lround 'long (double)' extern
| |-ParmVarDecl 0x7fffd82ab230 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd82ab298 <col:22> Implicit
|-FunctionDecl 0x7fffd82ab2e0 prev 0x7fffd82ab190 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:320:22 lround 'long (double)' extern
| |-ParmVarDecl 0x7fffd82ab0e8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:320:42> col:42 __x 'double'
| `-NoThrowAttr 0x7fffd82ab388 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82ab478 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:92:1 __lround 'long (double)' extern
| |-ParmVarDecl 0x7fffd82ab3e8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:320:42> col:42 __x 'double'
| `-NoThrowAttr 0x7fffd82ab520 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82ab610 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:322:27> col:27 implicit llround 'long long (double)' extern
| |-ParmVarDecl 0x7fffd82ab6b0 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd82ab718 <col:27> Implicit
|-FunctionDecl 0x7fffd82ab760 prev 0x7fffd82ab610 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:322:27 llround 'long long (double)' extern
| |-ParmVarDecl 0x7fffd82ab580 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:322:48> col:48 __x 'double'
| `-NoThrowAttr 0x7fffd82ab808 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82ab8f8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:93:1 __llround 'long long (double)' extern
| |-ParmVarDecl 0x7fffd82ab868 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:322:48> col:48 __x 'double'
| `-NoThrowAttr 0x7fffd82ab9a0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82abb10 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:326:13> col:13 implicit fdim 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd82abbb0 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x7fffd82abc10 <<invalid sloc>> <invalid sloc> 'double'
| `-NoThrowAttr 0x7fffd82abc80 <col:13> Implicit
|-FunctionDecl 0x7fffd82abcc8 prev 0x7fffd82abb10 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:326:13 fdim 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd82aba00 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:326:31> col:31 __x 'double'
| |-ParmVarDecl 0x7fffd82aba78 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:326:46> col:46 __y 'double'
| `-NoThrowAttr 0x7fffd82abd78 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82abee8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:94:1 __fdim 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd82abdd8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:326:31> col:31 __x 'double'
| |-ParmVarDecl 0x7fffd82abe50 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:326:46> col:46 __y 'double'
| `-NoThrowAttr 0x7fffd82abf98 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8290140 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:329:14> col:14 implicit fmax 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd82901e0 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x7fffd8290240 <<invalid sloc>> <invalid sloc> 'double'
| |-NoThrowAttr 0x7fffd82902b0 <col:14> Implicit
| `-ConstAttr 0x7fffd82902f8 <col:14> Implicit
|-FunctionDecl 0x7fffd8290308 prev 0x7fffd8290140 </usr/include/math.h:283:3, line:280:66> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:329:14 fmax 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd82abff8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:329:32> col:32 __x 'double'
| |-ParmVarDecl 0x7fffd82ac070 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:329:47> col:47 __y 'double'
| |-ConstAttr 0x7fffd82903b8 <col:54>
| `-NoThrowAttr 0x7fffd8290400 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8290538 </usr/include/math.h:283:3, line:281:79> <scratch space>:95:1 __fmax 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd8290428 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:329:32> col:32 __x 'double'
| |-ParmVarDecl 0x7fffd82904a0 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:329:47> col:47 __y 'double'
| |-ConstAttr 0x7fffd82905e8 <col:54>
| `-NoThrowAttr 0x7fffd8290630 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8290768 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:332:14> col:14 implicit fmin 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd8290808 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x7fffd8290868 <<invalid sloc>> <invalid sloc> 'double'
| |-NoThrowAttr 0x7fffd82908d8 <col:14> Implicit
| `-ConstAttr 0x7fffd8290920 <col:14> Implicit
|-FunctionDecl 0x7fffd8290930 prev 0x7fffd8290768 </usr/include/math.h:283:3, line:280:66> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:332:14 fmin 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd8290658 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:332:32> col:32 __x 'double'
| |-ParmVarDecl 0x7fffd82906d0 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:332:47> col:47 __y 'double'
| |-ConstAttr 0x7fffd82909e0 <col:54>
| `-NoThrowAttr 0x7fffd8290a28 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8290b60 </usr/include/math.h:283:3, line:281:79> <scratch space>:96:1 __fmin 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd8290a50 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:332:32> col:32 __x 'double'
| |-ParmVarDecl 0x7fffd8290ac8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:332:47> col:47 __y 'double'
| |-ConstAttr 0x7fffd8290c10 <col:54>
| `-NoThrowAttr 0x7fffd8290c58 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8290e58 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:335:13> col:13 implicit fma 'double (double, double, double)' extern
| |-ParmVarDecl 0x7fffd8290ef8 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x7fffd8290f58 <<invalid sloc>> <invalid sloc> 'double'
| |-ParmVarDecl 0x7fffd8290fb8 <<invalid sloc>> <invalid sloc> 'double'
| |-ConstAttr 0x7fffd8291030 <col:13> Implicit
| `-NoThrowAttr 0x7fffd8291078 <col:13> Implicit
|-FunctionDecl 0x7fffd8291088 prev 0x7fffd8290e58 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:335:13 fma 'double (double, double, double)' extern
| |-ParmVarDecl 0x7fffd8290c80 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:335:30> col:30 __x 'double'
| |-ParmVarDecl 0x7fffd8290cf8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:335:45> col:45 __y 'double'
| |-ParmVarDecl 0x7fffd8290d70 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:335:60> col:60 __z 'double'
| |-NoThrowAttr 0x7fffd82ae180 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
| `-ConstAttr 0x7fffd82ae1c8 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:335:13> Inherited Implicit
|-FunctionDecl 0x7fffd82ae380 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:97:1 __fma 'double (double, double, double)' extern
| |-ParmVarDecl 0x7fffd82ae1f0 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:335:30> col:30 __x 'double'
| |-ParmVarDecl 0x7fffd82ae268 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:335:45> col:45 __y 'double'
| |-ParmVarDecl 0x7fffd82ae2e0 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:335:60> col:60 __z 'double'
| `-NoThrowAttr 0x7fffd82ae438 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82ae5a8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:396:13 scalb 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd82ae498 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:396:32> col:32 __x 'double'
| |-ParmVarDecl 0x7fffd82ae510 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:396:47> col:47 __n 'double'
| `-NoThrowAttr 0x7fffd82ae658 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82ae7c8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:99:1 __scalb 'double (double, double)' extern
| |-ParmVarDecl 0x7fffd82ae6b8 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:396:32> col:32 __x 'double'
| |-ParmVarDecl 0x7fffd82ae730 </usr/include/math.h:285:20, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:396:47> col:47 __n 'double'
| `-NoThrowAttr 0x7fffd82ae878 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82ae9a8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:22:32> <scratch space>:100:1 __fpclassifyf 'int (float)' extern
| |-ParmVarDecl 0x7fffd82ae8d8 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:21:46> col:46 __value 'float'
| |-ConstAttr 0x7fffd82aea50 <line:22:22>
| `-NoThrowAttr 0x7fffd82aea98 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82aeb50 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:26:32> <scratch space>:101:1 __signbitf 'int (float)' extern
| |-ParmVarDecl 0x7fffd82aeac0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:25:43> col:43 __value 'float'
| |-ConstAttr 0x7fffd82aebf8 <line:26:22>
| `-NoThrowAttr 0x7fffd82aec40 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82aecf8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:30:77> <scratch space>:102:1 __isinff 'int (float)' extern
| |-ParmVarDecl 0x7fffd82aec68 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:30:41> col:41 __value 'float'
| |-ConstAttr 0x7fffd82aeda0 <col:67>
| `-NoThrowAttr 0x7fffd82aede8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82aeea0 <<scratch space>:103:1> col:1 implicit __finitef 'int (float)' extern
| |-ParmVarDecl 0x7fffd82aef40 <<invalid sloc>> <invalid sloc> 'float'
| |-NoThrowAttr 0x7fffd82aefa8 <col:1> Implicit
| `-ConstAttr 0x7fffd82aeff0 <col:1> Implicit
|-FunctionDecl 0x7fffd82af000 prev 0x7fffd82aeea0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:33:78> <scratch space>:103:1 __finitef 'int (float)' extern
| |-ParmVarDecl 0x7fffd82aee10 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:33:42> col:42 __value 'float'
| |-ConstAttr 0x7fffd82af0a8 <col:68>
| `-NoThrowAttr 0x7fffd82af0f0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82af1c0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:36:77> <scratch space>:104:1 __isnanf 'int (float)' extern
| |-ParmVarDecl 0x7fffd82af118 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:36:41> col:41 __value 'float'
| |-ConstAttr 0x7fffd82af268 <col:67>
| `-NoThrowAttr 0x7fffd82af2b0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82af428 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:105:1 __iseqsigf 'int (float, float)' extern
| |-ParmVarDecl 0x7fffd82af2d8 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:39:43> col:43 __x 'float'
| |-ParmVarDecl 0x7fffd82af350 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:39:58> col:58 __y 'float'
| `-NoThrowAttr 0x7fffd82af4d8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82af5c8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:43:32> <scratch space>:106:1 __issignalingf 'int (float)' extern
| |-ParmVarDecl 0x7fffd82af538 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:42:47> col:47 __value 'float'
| |-ConstAttr 0x7fffd82af670 <line:43:22>
| `-NoThrowAttr 0x7fffd82af6b8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82af7a8 <<scratch space>:107:1> col:1 implicit acosf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82af848 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd82af8b0 <col:1> Implicit
|-FunctionDecl 0x7fffd82af8f8 prev 0x7fffd82af7a8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:107:1 acosf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82af6e0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:53:31> col:31 __x 'float'
| `-NoThrowAttr 0x7fffd82af9a0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82afa90 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:109:1 __acosf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82afa00 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:53:31> col:31 __x 'float'
| `-NoThrowAttr 0x7fffd82afb38 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82afc28 <<scratch space>:110:1> col:1 implicit asinf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82afcc8 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd82afd30 <col:1> Implicit
|-FunctionDecl 0x7fffd82afd78 prev 0x7fffd82afc28 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:110:1 asinf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82afb98 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:55:31> col:31 __x 'float'
| `-NoThrowAttr 0x7fffd82afe20 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82aff10 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:112:1 __asinf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82afe80 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:55:31> col:31 __x 'float'
| `-NoThrowAttr 0x7fffd82affb8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b00a8 <<scratch space>:113:1> col:1 implicit atanf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8292160 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd82921c8 <col:1> Implicit
|-FunctionDecl 0x7fffd8292210 prev 0x7fffd82b00a8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:113:1 atanf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82b0018 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:57:31> col:31 __x 'float'
| `-NoThrowAttr 0x7fffd82922b8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82923a8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:115:1 __atanf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8292318 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:57:31> col:31 __x 'float'
| `-NoThrowAttr 0x7fffd8292450 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8292608 <<scratch space>:116:1> col:1 implicit atan2f 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd82926a8 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x7fffd8292708 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd8292778 <col:1> Implicit
|-FunctionDecl 0x7fffd82927c0 prev 0x7fffd8292608 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:116:1 atan2f 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd82924b0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:59:32> col:32 __y 'float'
| |-ParmVarDecl 0x7fffd8292528 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:59:47> col:47 __x 'float'
| `-NoThrowAttr 0x7fffd8292870 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82929e0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:118:1 __atan2f 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd82928d0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:59:32> col:32 __y 'float'
| |-ParmVarDecl 0x7fffd8292948 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:59:47> col:47 __x 'float'
| `-NoThrowAttr 0x7fffd8292a90 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8292b80 <<scratch space>:121:1> col:1 implicit cosf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8292c20 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd8292c88 <col:1> Implicit
|-FunctionDecl 0x7fffd8292cd0 prev 0x7fffd8292b80 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:121:1 cosf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8292af0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:62:34> col:34 __x 'float'
| `-NoThrowAttr 0x7fffd8292d78 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8292e68 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:123:1 __cosf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8292dd8 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:62:34> col:34 __x 'float'
| `-NoThrowAttr 0x7fffd8292f10 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8293000 <<scratch space>:126:1> col:1 implicit sinf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82930a0 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd8293108 <col:1> Implicit
|-FunctionDecl 0x7fffd8293170 prev 0x7fffd8293000 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:126:1 sinf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8292f70 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:64:34> col:34 __x 'float'
| `-NoThrowAttr 0x7fffd8293218 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8293308 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:128:1 __sinf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8293278 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:64:34> col:34 __x 'float'
| `-NoThrowAttr 0x7fffd82933b0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82934a0 <<scratch space>:129:1> col:1 implicit tanf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8293540 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd82935a8 <col:1> Implicit
|-FunctionDecl 0x7fffd82935f0 prev 0x7fffd82934a0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:129:1 tanf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8293410 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:66:30> col:30 __x 'float'
| `-NoThrowAttr 0x7fffd8293698 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8293788 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:131:1 __tanf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82936f8 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:66:30> col:30 __x 'float'
| `-NoThrowAttr 0x7fffd8293830 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8293920 <<scratch space>:132:1> col:1 implicit coshf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82939c0 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd8293a28 <col:1> Implicit
|-FunctionDecl 0x7fffd8293a70 prev 0x7fffd8293920 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:132:1 coshf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8293890 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:71:31> col:31 __x 'float'
| `-NoThrowAttr 0x7fffd8293b18 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8293c08 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:134:1 __coshf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8293b78 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:71:31> col:31 __x 'float'
| `-NoThrowAttr 0x7fffd8293cb0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8293da0 <<scratch space>:135:1> col:1 implicit sinhf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8293e40 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd8293ea8 <col:1> Implicit
|-FunctionDecl 0x7fffd8293ef0 prev 0x7fffd8293da0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:135:1 sinhf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8293d10 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:73:31> col:31 __x 'float'
| `-NoThrowAttr 0x7fffd8293f98 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8294088 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:137:1 __sinhf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8293ff8 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:73:31> col:31 __x 'float'
| `-NoThrowAttr 0x7fffd8294130 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8294260 <<scratch space>:138:1> col:1 implicit tanhf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8294300 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd8294368 <col:1> Implicit
|-FunctionDecl 0x7fffd82943b0 prev 0x7fffd8294260 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:138:1 tanhf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82941d0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:75:31> col:31 __x 'float'
| `-NoThrowAttr 0x7fffd8294458 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8294548 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:140:1 __tanhf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82944b8 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:75:31> col:31 __x 'float'
| `-NoThrowAttr 0x7fffd82945f0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82946e0 <<scratch space>:141:1> col:1 implicit acoshf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8294780 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd82947e8 <col:1> Implicit
|-FunctionDecl 0x7fffd8294830 prev 0x7fffd82946e0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:141:1 acoshf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8294650 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:85:32> col:32 __x 'float'
| `-NoThrowAttr 0x7fffd82948d8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82949c8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:143:1 __acoshf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8294938 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:85:32> col:32 __x 'float'
| `-NoThrowAttr 0x7fffd8294a70 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8294b60 <<scratch space>:144:1> col:1 implicit asinhf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8294c00 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd8294c68 <col:1> Implicit
|-FunctionDecl 0x7fffd8294cb0 prev 0x7fffd8294b60 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:144:1 asinhf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8294ad0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:87:32> col:32 __x 'float'
| `-NoThrowAttr 0x7fffd8294d58 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8294e48 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:146:1 __asinhf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8294db8 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:87:32> col:32 __x 'float'
| `-NoThrowAttr 0x7fffd8294ef0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8294fe0 <<scratch space>:147:1> col:1 implicit atanhf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8295080 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd82950e8 <col:1> Implicit
|-FunctionDecl 0x7fffd8295190 prev 0x7fffd8294fe0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:147:1 atanhf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8294f50 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:89:32> col:32 __x 'float'
| `-NoThrowAttr 0x7fffd8295238 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8295328 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:149:1 __atanhf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8295298 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:89:32> col:32 __x 'float'
| `-NoThrowAttr 0x7fffd82953d0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82954c0 <<scratch space>:152:1> col:1 implicit expf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8295560 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd82955c8 <col:1> Implicit
|-FunctionDecl 0x7fffd8295610 prev 0x7fffd82954c0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:152:1 expf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8295430 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:95:34> col:34 __x 'float'
| `-NoThrowAttr 0x7fffd82956b8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82957a8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:154:1 __expf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8295718 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:95:34> col:34 __x 'float'
| `-NoThrowAttr 0x7fffd8295850 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8295a08 <<scratch space>:155:1> col:1 implicit frexpf 'float (float, int *)' extern
| |-ParmVarDecl 0x7fffd8295aa8 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x7fffd8295b08 <<invalid sloc>> <invalid sloc> 'int *'
| `-NoThrowAttr 0x7fffd8295b78 <col:1> Implicit
|-FunctionDecl 0x7fffd8295bc0 prev 0x7fffd8295a08 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:155:1 frexpf 'float (float, int *)' extern
| |-ParmVarDecl 0x7fffd82958b0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:98:32> col:32 __x 'float'
| |-ParmVarDecl 0x7fffd8295928 <col:37, col:42> col:42 __exponent 'int *'
| `-NoThrowAttr 0x7fffd8295c70 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8295de0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:157:1 __frexpf 'float (float, int *)' extern
| |-ParmVarDecl 0x7fffd8295cd0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:98:32> col:32 __x 'float'
| |-ParmVarDecl 0x7fffd8295d48 <col:37, col:42> col:42 __exponent 'int *'
| `-NoThrowAttr 0x7fffd8295e90 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8296048 <<scratch space>:158:1> col:1 implicit ldexpf 'float (float, int)' extern
| |-ParmVarDecl 0x7fffd82960e8 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x7fffd82961a0 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x7fffd8296210 <col:1> Implicit
|-FunctionDecl 0x7fffd8296258 prev 0x7fffd8296048 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:158:1 ldexpf 'float (float, int)' extern
| |-ParmVarDecl 0x7fffd8295ef0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:101:32> col:32 __x 'float'
| |-ParmVarDecl 0x7fffd8295f68 <col:37, col:41> col:41 __exponent 'int'
| `-NoThrowAttr 0x7fffd8296308 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8296478 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:160:1 __ldexpf 'float (float, int)' extern
| |-ParmVarDecl 0x7fffd8296368 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:101:32> col:32 __x 'float'
| |-ParmVarDecl 0x7fffd82963e0 <col:37, col:41> col:41 __exponent 'int'
| `-NoThrowAttr 0x7fffd8296528 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8296618 <<scratch space>:163:1> col:1 implicit logf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82966b8 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd8296720 <col:1> Implicit
|-FunctionDecl 0x7fffd8296768 prev 0x7fffd8296618 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:163:1 logf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8296588 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:104:34> col:34 __x 'float'
| `-NoThrowAttr 0x7fffd8296810 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8296900 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:165:1 __logf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8296870 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:104:34> col:34 __x 'float'
| `-NoThrowAttr 0x7fffd82969a8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8296a98 <<scratch space>:166:1> col:1 implicit log10f 'float (float)' extern
| |-ParmVarDecl 0x7fffd8296b38 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd8296ba0 <col:1> Implicit
|-FunctionDecl 0x7fffd8296be8 prev 0x7fffd8296a98 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:166:1 log10f 'float (float)' extern
| |-ParmVarDecl 0x7fffd8296a08 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:107:32> col:32 __x 'float'
| `-NoThrowAttr 0x7fffd8296c90 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8296d80 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:168:1 __log10f 'float (float)' extern
| |-ParmVarDecl 0x7fffd8296cf0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:107:32> col:32 __x 'float'
| `-NoThrowAttr 0x7fffd8296e28 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8297008 <<scratch space>:169:1> col:1 implicit modff 'float (float, float *)' extern
| |-ParmVarDecl 0x7fffd82970a8 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x7fffd8297108 <<invalid sloc>> <invalid sloc> 'float *'
| `-NoThrowAttr 0x7fffd8297178 <col:1> Implicit
|-FunctionDecl 0x7fffd82971e8 prev 0x7fffd8297008 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:169:1 modff 'float (float, float *)' extern
| |-ParmVarDecl 0x7fffd8296e88 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:110:31> col:31 __x 'float'
| |-ParmVarDecl 0x7fffd8296f30 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:110:47> col:47 __iptr 'float *'
| `-NoThrowAttr 0x7fffd8297298 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8297428 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> <scratch space>:171:1 __modff 'float (float, float *)' extern
| |-ParmVarDecl 0x7fffd82972f8 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:110:31> col:31 __x 'float'
| |-ParmVarDecl 0x7fffd8297370 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:110:47> col:47 __iptr 'float *'
| |-NonNullAttr 0x7fffd82974d8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:110:69> 1
| `-NoThrowAttr 0x7fffd8297530 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82975e8 <<scratch space>:173:1> col:1 implicit expm1f 'float (float)' extern
| |-ParmVarDecl 0x7fffd8297688 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd82976f0 <col:1> Implicit
|-FunctionDecl 0x7fffd8297738 prev 0x7fffd82975e8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:173:1 expm1f 'float (float)' extern
| |-ParmVarDecl 0x7fffd8297558 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:119:32> col:32 __x 'float'
| `-NoThrowAttr 0x7fffd82977e0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82978d0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:175:1 __expm1f 'float (float)' extern
| |-ParmVarDecl 0x7fffd8297840 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:119:32> col:32 __x 'float'
| `-NoThrowAttr 0x7fffd8297978 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8297a68 <<scratch space>:176:1> col:1 implicit log1pf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8297b08 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd8297b70 <col:1> Implicit
|-FunctionDecl 0x7fffd8297bb8 prev 0x7fffd8297a68 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:176:1 log1pf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82979d8 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:122:32> col:32 __x 'float'
| `-NoThrowAttr 0x7fffd8297c60 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8297d50 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:178:1 __log1pf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8297cc0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:122:32> col:32 __x 'float'
| `-NoThrowAttr 0x7fffd8297df8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8297ee8 <<scratch space>:179:1> col:1 implicit logbf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8297f88 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd8297ff0 <col:1> Implicit
|-FunctionDecl 0x7fffd8298038 prev 0x7fffd8297ee8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:179:1 logbf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8297e58 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:125:31> col:31 __x 'float'
| `-NoThrowAttr 0x7fffd82980e0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82981f0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:181:1 __logbf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8298140 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:125:31> col:31 __x 'float'
| `-NoThrowAttr 0x7fffd8298298 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8298388 <<scratch space>:182:1> col:1 implicit exp2f 'float (float)' extern
| |-ParmVarDecl 0x7fffd8298428 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd8298490 <col:1> Implicit
|-FunctionDecl 0x7fffd82984d8 prev 0x7fffd8298388 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:182:1 exp2f 'float (float)' extern
| |-ParmVarDecl 0x7fffd82982f8 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:130:31> col:31 __x 'float'
| `-NoThrowAttr 0x7fffd8298580 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8298670 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:184:1 __exp2f 'float (float)' extern
| |-ParmVarDecl 0x7fffd82985e0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:130:31> col:31 __x 'float'
| `-NoThrowAttr 0x7fffd8298718 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8298808 <<scratch space>:185:1> col:1 implicit log2f 'float (float)' extern
| |-ParmVarDecl 0x7fffd82988a8 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd8298910 <col:1> Implicit
|-FunctionDecl 0x7fffd8298958 prev 0x7fffd8298808 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:185:1 log2f 'float (float)' extern
| |-ParmVarDecl 0x7fffd8298778 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:133:31> col:31 __x 'float'
| `-NoThrowAttr 0x7fffd8298a00 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8298af0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:187:1 __log2f 'float (float)' extern
| |-ParmVarDecl 0x7fffd8298a60 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:133:31> col:31 __x 'float'
| `-NoThrowAttr 0x7fffd8298b98 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8298d08 <<scratch space>:190:1> col:1 implicit powf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd8298da8 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x7fffd8298e08 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd8298e78 <col:1> Implicit
|-FunctionDecl 0x7fffd8298ec0 prev 0x7fffd8298d08 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:190:1 powf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd8298bf8 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:140:34> col:34 __x 'float'
| |-ParmVarDecl 0x7fffd8298c70 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:140:49> col:49 __y 'float'
| `-NoThrowAttr 0x7fffd8298f70 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82990e0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:192:1 __powf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd8298fd0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:140:34> col:34 __x 'float'
| |-ParmVarDecl 0x7fffd8299048 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:140:49> col:49 __y 'float'
| `-NoThrowAttr 0x7fffd8299190 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82992b0 <<scratch space>:193:1> col:1 implicit sqrtf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8299350 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd82993b8 <col:1> Implicit
|-FunctionDecl 0x7fffd8299400 prev 0x7fffd82992b0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:193:1 sqrtf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8299220 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:143:31> col:31 __x 'float'
| `-NoThrowAttr 0x7fffd82994a8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8299598 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:195:1 __sqrtf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8299508 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:143:31> col:31 __x 'float'
| `-NoThrowAttr 0x7fffd8299640 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82997b0 <<scratch space>:196:1> col:1 implicit hypotf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd8299850 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x7fffd82998b0 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd8299920 <col:1> Implicit
|-FunctionDecl 0x7fffd8299968 prev 0x7fffd82997b0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:196:1 hypotf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd82996a0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:147:32> col:32 __x 'float'
| |-ParmVarDecl 0x7fffd8299718 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:147:47> col:47 __y 'float'
| `-NoThrowAttr 0x7fffd8299a18 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8299b88 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:198:1 __hypotf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd8299a78 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:147:32> col:32 __x 'float'
| |-ParmVarDecl 0x7fffd8299af0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:147:47> col:47 __y 'float'
| `-NoThrowAttr 0x7fffd8299c38 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8299d28 <<scratch space>:199:1> col:1 implicit cbrtf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8299dc8 <<invalid sloc>> <invalid sloc> 'float'
| |-NoThrowAttr 0x7fffd8299e30 <col:1> Implicit
| `-ConstAttr 0x7fffd8299e78 <col:1> Implicit
|-FunctionDecl 0x7fffd8299e88 prev 0x7fffd8299d28 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:199:1 cbrtf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8299c98 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:152:31> col:31 __x 'float'
| |-NoThrowAttr 0x7fffd8299f30 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
| `-ConstAttr 0x7fffd8299f78 <<scratch space>:199:1> Inherited Implicit
|-FunctionDecl 0x7fffd829a030 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:201:1 __cbrtf 'float (float)' extern
| |-ParmVarDecl 0x7fffd8299fa0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:152:31> col:31 __x 'float'
| `-NoThrowAttr 0x7fffd829a0d8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829a1e0 <<scratch space>:202:1> col:1 implicit ceilf 'float (float)' extern
| |-ParmVarDecl 0x7fffd829a280 <<invalid sloc>> <invalid sloc> 'float'
| |-NoThrowAttr 0x7fffd829a2e8 <col:1> Implicit
| `-ConstAttr 0x7fffd829a330 <col:1> Implicit
|-FunctionDecl 0x7fffd829a340 prev 0x7fffd829a1e0 </usr/include/math.h:283:3, line:280:66> <scratch space>:202:1 ceilf 'float (float)' extern
| |-ParmVarDecl 0x7fffd829a138 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:159:32> col:32 __x 'float'
| |-ConstAttr 0x7fffd829a3e8 <col:39>
| `-NoThrowAttr 0x7fffd829a430 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829a4e8 </usr/include/math.h:283:3, line:281:79> <scratch space>:204:1 __ceilf 'float (float)' extern
| |-ParmVarDecl 0x7fffd829a458 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:159:32> col:32 __x 'float'
| |-ConstAttr 0x7fffd829a590 <col:39>
| `-NoThrowAttr 0x7fffd829a5d8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829a690 <<scratch space>:205:1> col:1 implicit fabsf 'float (float)' extern
| |-ParmVarDecl 0x7fffd829a730 <<invalid sloc>> <invalid sloc> 'float'
| |-NoThrowAttr 0x7fffd829a798 <col:1> Implicit
| `-ConstAttr 0x7fffd829a7e0 <col:1> Implicit
|-FunctionDecl 0x7fffd829a7f0 prev 0x7fffd829a690 </usr/include/math.h:283:3, line:280:66> <scratch space>:205:1 fabsf 'float (float)' extern
| |-ParmVarDecl 0x7fffd829a600 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:162:32> col:32 __x 'float'
| |-ConstAttr 0x7fffd829a898 <col:39>
| `-NoThrowAttr 0x7fffd829a8e0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829a998 </usr/include/math.h:283:3, line:281:79> <scratch space>:207:1 __fabsf 'float (float)' extern
| |-ParmVarDecl 0x7fffd829a908 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:162:32> col:32 __x 'float'
| |-ConstAttr 0x7fffd829aa40 <col:39>
| `-NoThrowAttr 0x7fffd829aa88 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829ab40 <<scratch space>:208:1> col:1 implicit floorf 'float (float)' extern
| |-ParmVarDecl 0x7fffd829abe0 <<invalid sloc>> <invalid sloc> 'float'
| |-NoThrowAttr 0x7fffd829ac48 <col:1> Implicit
| `-ConstAttr 0x7fffd829ac90 <col:1> Implicit
|-FunctionDecl 0x7fffd829aca0 prev 0x7fffd829ab40 </usr/include/math.h:283:3, line:280:66> <scratch space>:208:1 floorf 'float (float)' extern
| |-ParmVarDecl 0x7fffd829aab0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:165:33> col:33 __x 'float'
| |-ConstAttr 0x7fffd829ad48 <col:40>
| `-NoThrowAttr 0x7fffd829ad90 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829ae48 </usr/include/math.h:283:3, line:281:79> <scratch space>:210:1 __floorf 'float (float)' extern
| |-ParmVarDecl 0x7fffd829adb8 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:165:33> col:33 __x 'float'
| |-ConstAttr 0x7fffd829aef0 <col:40>
| `-NoThrowAttr 0x7fffd829af38 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829b070 <<scratch space>:211:1> col:1 implicit fmodf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd829b110 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x7fffd829b170 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd829b1f0 <col:1> Implicit
|-FunctionDecl 0x7fffd829b238 prev 0x7fffd829b070 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:211:1 fmodf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd829af60 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:168:31> col:31 __x 'float'
| |-ParmVarDecl 0x7fffd829afd8 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:168:46> col:46 __y 'float'
| `-NoThrowAttr 0x7fffd829b2e8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829b458 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:213:1 __fmodf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd829b348 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:168:31> col:31 __x 'float'
| |-ParmVarDecl 0x7fffd829b3c0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:168:46> col:46 __y 'float'
| `-NoThrowAttr 0x7fffd829b508 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829b5f8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:177:74> <scratch space>:214:1 isinff 'int (float)' extern
| |-ParmVarDecl 0x7fffd829b568 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:177:38> col:38 __value 'float'
| |-ConstAttr 0x7fffd829b6a0 <col:64>
| `-NoThrowAttr 0x7fffd829b6e8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829b7a0 <<scratch space>:215:1> col:1 implicit finitef 'int (float)' extern
| |-ParmVarDecl 0x7fffd829b840 <<invalid sloc>> <invalid sloc> 'float'
| |-NoThrowAttr 0x7fffd829b8a8 <col:1> Implicit
| `-ConstAttr 0x7fffd829b8f0 <col:1> Implicit
|-FunctionDecl 0x7fffd829b900 prev 0x7fffd829b7a0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:182:75> <scratch space>:215:1 finitef 'int (float)' extern
| |-ParmVarDecl 0x7fffd829b710 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:182:39> col:39 __value 'float'
| |-ConstAttr 0x7fffd829b9a8 <col:65>
| `-NoThrowAttr 0x7fffd829b9f0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829bb28 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:216:1 dremf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd829ba18 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:185:31> col:31 __x 'float'
| |-ParmVarDecl 0x7fffd829ba90 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:185:46> col:46 __y 'float'
| `-NoThrowAttr 0x7fffd829bbd8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829bd48 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:218:1 __dremf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd829bc38 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:185:31> col:31 __x 'float'
| |-ParmVarDecl 0x7fffd829bcb0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:185:46> col:46 __y 'float'
| `-NoThrowAttr 0x7fffd829bdf8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829bee8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:219:1 significandf 'float (float)' extern
| |-ParmVarDecl 0x7fffd829be58 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:189:38> col:38 __x 'float'
| `-NoThrowAttr 0x7fffd829bf90 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829c080 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:221:1 __significandf 'float (float)' extern
| |-ParmVarDecl 0x7fffd829bff0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:189:38> col:38 __x 'float'
| `-NoThrowAttr 0x7fffd829c128 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829c2b0 <<scratch space>:222:1> col:1 implicit copysignf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd829c350 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x7fffd829c3b0 <<invalid sloc>> <invalid sloc> 'float'
| |-NoThrowAttr 0x7fffd829c420 <col:1> Implicit
| `-ConstAttr 0x7fffd829c468 <col:1> Implicit
|-FunctionDecl 0x7fffd829c478 prev 0x7fffd829c2b0 </usr/include/math.h:283:3, line:280:66> <scratch space>:222:1 copysignf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd829c188 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:196:36> col:36 __x 'float'
| |-ParmVarDecl 0x7fffd829c218 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:196:51> col:51 __y 'float'
| |-ConstAttr 0x7fffd829c528 <col:58>
| `-NoThrowAttr 0x7fffd829c570 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829c6a8 </usr/include/math.h:283:3, line:281:79> <scratch space>:224:1 __copysignf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd829c598 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:196:36> col:36 __x 'float'
| |-ParmVarDecl 0x7fffd829c610 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:196:51> col:51 __y 'float'
| |-ConstAttr 0x7fffd829c758 <col:58>
| `-NoThrowAttr 0x7fffd829c7a0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829c898 <<scratch space>:225:1> col:1 implicit nanf 'float (const char *)' extern
| |-ParmVarDecl 0x7fffd829c938 <<invalid sloc>> <invalid sloc> 'const char *'
| |-NoThrowAttr 0x7fffd829c9a0 <col:1> Implicit
| `-PureAttr 0x7fffd829c9e8 <col:1> Implicit
|-FunctionDecl 0x7fffd829c9f8 prev 0x7fffd829c898 </usr/include/math.h:283:3, line:280:66> <scratch space>:225:1 nanf 'float (const char *)' extern
| |-ParmVarDecl 0x7fffd829c7c8 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:201:21, col:33> col:33 __tagb 'const char *'
| |-ConstAttr 0x7fffd829caa0 <col:43>
| |-NoThrowAttr 0x7fffd829cae8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
| `-PureAttr 0x7fffd829caf8 <<scratch space>:225:1> Inherited Implicit
|-FunctionDecl 0x7fffd829cbb0 </usr/include/math.h:283:3, line:281:79> <scratch space>:227:1 __nanf 'float (const char *)' extern
| |-ParmVarDecl 0x7fffd829cb20 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:201:21, col:33> col:33 __tagb 'const char *'
| |-ConstAttr 0x7fffd829cc58 <col:43>
| `-NoThrowAttr 0x7fffd829cca0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829cd58 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:211:74> <scratch space>:228:1 isnanf 'int (float)' extern
| |-ParmVarDecl 0x7fffd829ccc8 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:211:38> col:38 __value 'float'
| |-ConstAttr 0x7fffd829ce00 <col:64>
| `-NoThrowAttr 0x7fffd829ce48 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829cf00 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:229:1 j0f 'float (float)' extern
| |-ParmVarDecl 0x7fffd829ce70 </usr/include/math.h:302:21> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:217:28 'float'
| `-NoThrowAttr 0x7fffd829cfa8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829d098 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:231:1 __j0f 'float (float)' extern
| |-ParmVarDecl 0x7fffd829d008 </usr/include/math.h:302:21> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:217:28 'float'
| `-NoThrowAttr 0x7fffd829d140 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829d240 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:232:1 j1f 'float (float)' extern
| |-ParmVarDecl 0x7fffd829d1a0 </usr/include/math.h:302:21> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:218:28 'float'
| `-NoThrowAttr 0x7fffd829d2e8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829d3d8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:234:1 __j1f 'float (float)' extern
| |-ParmVarDecl 0x7fffd829d348 </usr/include/math.h:302:21> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:218:28 'float'
| `-NoThrowAttr 0x7fffd829d480 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829d638 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:235:1 jnf 'float (int, float)' extern
| |-ParmVarDecl 0x7fffd829d4e0 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:219:19> col:22 'int'
| |-ParmVarDecl 0x7fffd829d558 </usr/include/math.h:302:21> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:219:33 'float'
| `-NoThrowAttr 0x7fffd829d6e8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829d858 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:237:1 __jnf 'float (int, float)' extern
| |-ParmVarDecl 0x7fffd829d748 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:219:19> col:22 'int'
| |-ParmVarDecl 0x7fffd829d7c0 </usr/include/math.h:302:21> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:219:33 'float'
| `-NoThrowAttr 0x7fffd829d908 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829d9f8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:238:1 y0f 'float (float)' extern
| |-ParmVarDecl 0x7fffd829d968 </usr/include/math.h:302:21> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:220:28 'float'
| `-NoThrowAttr 0x7fffd829daa0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829db90 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:240:1 __y0f 'float (float)' extern
| |-ParmVarDecl 0x7fffd829db00 </usr/include/math.h:302:21> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:220:28 'float'
| `-NoThrowAttr 0x7fffd829dc38 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829dd28 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:241:1 y1f 'float (float)' extern
| |-ParmVarDecl 0x7fffd829dc98 </usr/include/math.h:302:21> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:221:28 'float'
| `-NoThrowAttr 0x7fffd829ddd0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829dec0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:243:1 __y1f 'float (float)' extern
| |-ParmVarDecl 0x7fffd829de30 </usr/include/math.h:302:21> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:221:28 'float'
| `-NoThrowAttr 0x7fffd829df68 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829e0d8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:244:1 ynf 'float (int, float)' extern
| |-ParmVarDecl 0x7fffd829dfc8 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:222:19> col:22 'int'
| |-ParmVarDecl 0x7fffd829e040 </usr/include/math.h:302:21> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:222:33 'float'
| `-NoThrowAttr 0x7fffd829e188 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829f340 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:246:1 __ynf 'float (int, float)' extern
| |-ParmVarDecl 0x7fffd829f230 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:222:19> col:22 'int'
| |-ParmVarDecl 0x7fffd829f2a8 </usr/include/math.h:302:21> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:222:33 'float'
| `-NoThrowAttr 0x7fffd829f3f0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829f4e0 <<scratch space>:247:1> col:1 implicit erff 'float (float)' extern
| |-ParmVarDecl 0x7fffd829f580 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd829f5e8 <col:1> Implicit
|-FunctionDecl 0x7fffd829f630 prev 0x7fffd829f4e0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:247:1 erff 'float (float)' extern
| |-ParmVarDecl 0x7fffd829f450 </usr/include/math.h:302:21> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:228:29 'float'
| `-NoThrowAttr 0x7fffd829f6d8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829f7c8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:249:1 __erff 'float (float)' extern
| |-ParmVarDecl 0x7fffd829f738 </usr/include/math.h:302:21> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:228:29 'float'
| `-NoThrowAttr 0x7fffd829f870 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829f960 <<scratch space>:250:1> col:1 implicit erfcf 'float (float)' extern
| |-ParmVarDecl 0x7fffd829fa00 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd829fa68 <col:1> Implicit
|-FunctionDecl 0x7fffd829fab0 prev 0x7fffd829f960 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:250:1 erfcf 'float (float)' extern
| |-ParmVarDecl 0x7fffd829f8d0 </usr/include/math.h:302:21> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:229:30 'float'
| `-NoThrowAttr 0x7fffd829fb58 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829fc48 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:252:1 __erfcf 'float (float)' extern
| |-ParmVarDecl 0x7fffd829fbb8 </usr/include/math.h:302:21> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:229:30 'float'
| `-NoThrowAttr 0x7fffd829fcf0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd829fde0 <<scratch space>:253:1> col:1 implicit lgammaf 'float (float)' extern
| |-ParmVarDecl 0x7fffd829fe80 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd829fee8 <col:1> Implicit
|-FunctionDecl 0x7fffd829ff30 prev 0x7fffd829fde0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:253:1 lgammaf 'float (float)' extern
| |-ParmVarDecl 0x7fffd829fd50 </usr/include/math.h:302:21> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:230:32 'float'
| `-NoThrowAttr 0x7fffd829ffd8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a00c8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:255:1 __lgammaf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82a0038 </usr/include/math.h:302:21> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:230:32 'float'
| `-NoThrowAttr 0x7fffd82a0170 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a0270 <<scratch space>:256:1> col:1 implicit tgammaf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82a0310 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd82a0378 <col:1> Implicit
|-FunctionDecl 0x7fffd82a03c0 prev 0x7fffd82a0270 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:256:1 tgammaf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82a01d0 </usr/include/math.h:302:21> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:235:32 'float'
| `-NoThrowAttr 0x7fffd82a0468 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a0558 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:258:1 __tgammaf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82a04c8 </usr/include/math.h:302:21> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:235:32 'float'
| `-NoThrowAttr 0x7fffd82a0600 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a06f0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:259:1 gammaf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82a0660 </usr/include/math.h:302:21> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:241:31 'float'
| `-NoThrowAttr 0x7fffd82a0798 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a0888 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:261:1 __gammaf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82a07f8 </usr/include/math.h:302:21> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:241:31 'float'
| `-NoThrowAttr 0x7fffd82a0930 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a0aa0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:263:1 lgammaf_r 'float (float, int *)' extern
| |-ParmVarDecl 0x7fffd82a0990 </usr/include/math.h:302:21> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:249:34 'float'
| |-ParmVarDecl 0x7fffd82a0a08 <col:36, col:41> col:41 __signgamp 'int *'
| `-NoThrowAttr 0x7fffd82a0b50 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a0cc0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:266:1 __lgammaf_r 'float (float, int *)' extern
| |-ParmVarDecl 0x7fffd82a0bb0 </usr/include/math.h:302:21> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:249:34 'float'
| |-ParmVarDecl 0x7fffd82a0c28 <col:36, col:41> col:41 __signgamp 'int *'
| `-NoThrowAttr 0x7fffd82a0d70 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a0e60 <<scratch space>:267:1> col:1 implicit rintf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82a0f00 <<invalid sloc>> <invalid sloc> 'float'
| |-NoThrowAttr 0x7fffd82a0f68 <col:1> Implicit
| `-ConstAttr 0x7fffd82a0fb0 <col:1> Implicit
|-FunctionDecl 0x7fffd82a0fc0 prev 0x7fffd82a0e60 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:267:1 rintf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82a0dd0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:256:31> col:31 __x 'float'
| |-NoThrowAttr 0x7fffd82a1068 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
| `-ConstAttr 0x7fffd82a10b0 <<scratch space>:267:1> Inherited Implicit
|-FunctionDecl 0x7fffd82a1168 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:269:1 __rintf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82a10d8 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:256:31> col:31 __x 'float'
| `-NoThrowAttr 0x7fffd82a1210 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a13b0 <<scratch space>:270:1> col:1 implicit nextafterf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd82a1450 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x7fffd82a14b0 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd82a1520 <col:1> Implicit
|-FunctionDecl 0x7fffd82a1568 prev 0x7fffd82a13b0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:270:1 nextafterf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd82a12a0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:259:36> col:36 __x 'float'
| |-ParmVarDecl 0x7fffd82a1318 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:259:51> col:51 __y 'float'
| `-NoThrowAttr 0x7fffd82a1618 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a1788 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:272:1 __nextafterf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd82a1678 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:259:36> col:36 __x 'float'
| |-ParmVarDecl 0x7fffd82a16f0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:259:51> col:51 __y 'float'
| `-NoThrowAttr 0x7fffd82a1838 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a19e8 <<scratch space>:273:1> col:1 implicit nexttowardf 'float (float, long double)' extern
| |-ParmVarDecl 0x7fffd82a1a88 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x7fffd82a1ae8 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82a1b58 <col:1> Implicit
|-FunctionDecl 0x7fffd82a1ba0 prev 0x7fffd82a19e8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:273:1 nexttowardf 'float (float, long double)' extern
| |-ParmVarDecl 0x7fffd82a1898 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:261:37> col:37 __x 'float'
| |-ParmVarDecl 0x7fffd82a1910 <col:42, col:54> col:54 __y 'long double'
| `-NoThrowAttr 0x7fffd82a1c50 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a1dc0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:275:1 __nexttowardf 'float (float, long double)' extern
| |-ParmVarDecl 0x7fffd82a1cb0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:261:37> col:37 __x 'float'
| |-ParmVarDecl 0x7fffd82a1d28 <col:42, col:54> col:54 __y 'long double'
| `-NoThrowAttr 0x7fffd82a1e70 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a1fe0 <<scratch space>:277:1> col:1 implicit remainderf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd82a2080 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x7fffd82a20e0 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd82a2150 <col:1> Implicit
|-FunctionDecl 0x7fffd82a2198 prev 0x7fffd82a1fe0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:277:1 remainderf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd82a1ed0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:272:36> col:36 __x 'float'
| |-ParmVarDecl 0x7fffd82a1f48 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:272:51> col:51 __y 'float'
| `-NoThrowAttr 0x7fffd82a2260 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a23d0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:279:1 __remainderf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd82a22c0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:272:36> col:36 __x 'float'
| |-ParmVarDecl 0x7fffd82a2338 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:272:51> col:51 __y 'float'
| `-NoThrowAttr 0x7fffd82a2480 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a25f0 <<scratch space>:280:1> col:1 implicit scalbnf 'float (float, int)' extern
| |-ParmVarDecl 0x7fffd82a2690 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x7fffd82a26f0 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x7fffd82a2760 <col:1> Implicit
|-FunctionDecl 0x7fffd82a27a8 prev 0x7fffd82a25f0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:280:1 scalbnf 'float (float, int)' extern
| |-ParmVarDecl 0x7fffd82a24e0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:276:33> col:33 __x 'float'
| |-ParmVarDecl 0x7fffd82a2558 <col:38, col:42> col:42 __n 'int'
| `-NoThrowAttr 0x7fffd82a2858 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a29c8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:282:1 __scalbnf 'float (float, int)' extern
| |-ParmVarDecl 0x7fffd82a28b8 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:276:33> col:33 __x 'float'
| |-ParmVarDecl 0x7fffd82a2930 <col:38, col:42> col:42 __n 'int'
| `-NoThrowAttr 0x7fffd82a2a78 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a2b68 <<scratch space>:283:1> col:1 implicit ilogbf 'int (float)' extern
| |-ParmVarDecl 0x7fffd82a2c08 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd82a2c70 <col:1> Implicit
|-FunctionDecl 0x7fffd82a2cb8 prev 0x7fffd82a2b68 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:283:1 ilogbf 'int (float)' extern
| |-ParmVarDecl 0x7fffd82a2ad8 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:280:36> col:36 __x 'float'
| `-NoThrowAttr 0x7fffd82a2d60 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a2e50 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:285:1 __ilogbf 'int (float)' extern
| |-ParmVarDecl 0x7fffd82a2dc0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:280:36> col:36 __x 'float'
| `-NoThrowAttr 0x7fffd82a2ef8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a30a8 <<scratch space>:287:1> col:1 implicit scalblnf 'float (float, long)' extern
| |-ParmVarDecl 0x7fffd82a3148 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x7fffd82a31a8 <<invalid sloc>> <invalid sloc> 'long'
| `-NoThrowAttr 0x7fffd82a3218 <col:1> Implicit
|-FunctionDecl 0x7fffd82a3440 prev 0x7fffd82a30a8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:287:1 scalblnf 'float (float, long)' extern
| |-ParmVarDecl 0x7fffd82a2f58 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:290:34> col:34 __x 'float'
| |-ParmVarDecl 0x7fffd82a2fd0 <col:39, col:48> col:48 __n 'long'
| `-NoThrowAttr 0x7fffd82a34f0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a3660 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:289:1 __scalblnf 'float (float, long)' extern
| |-ParmVarDecl 0x7fffd82a3550 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:290:34> col:34 __x 'float'
| |-ParmVarDecl 0x7fffd82a35c8 <col:39, col:48> col:48 __n 'long'
| `-NoThrowAttr 0x7fffd82a3710 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a3800 <<scratch space>:290:1> col:1 implicit nearbyintf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82a38a0 <<invalid sloc>> <invalid sloc> 'float'
| |-NoThrowAttr 0x7fffd82a3908 <col:1> Implicit
| `-ConstAttr 0x7fffd82a3950 <col:1> Implicit
|-FunctionDecl 0x7fffd82a3960 prev 0x7fffd82a3800 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:290:1 nearbyintf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82a3770 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:294:36> col:36 __x 'float'
| |-NoThrowAttr 0x7fffd82a3a08 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
| `-ConstAttr 0x7fffd82a3a50 <<scratch space>:290:1> Inherited Implicit
|-FunctionDecl 0x7fffd82a3b08 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:292:1 __nearbyintf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82a3a78 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:294:36> col:36 __x 'float'
| `-NoThrowAttr 0x7fffd82a3bb0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a3ca0 <<scratch space>:293:1> col:1 implicit roundf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82a3d40 <<invalid sloc>> <invalid sloc> 'float'
| |-NoThrowAttr 0x7fffd82a3da8 <col:1> Implicit
| `-ConstAttr 0x7fffd82a3df0 <col:1> Implicit
|-FunctionDecl 0x7fffd82a3e00 prev 0x7fffd82a3ca0 </usr/include/math.h:283:3, line:280:66> <scratch space>:293:1 roundf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82a3c10 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:298:33> col:33 __x 'float'
| |-ConstAttr 0x7fffd82a3ea8 <col:40>
| `-NoThrowAttr 0x7fffd82a3ef0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a3fa8 </usr/include/math.h:283:3, line:281:79> <scratch space>:295:1 __roundf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82a3f18 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:298:33> col:33 __x 'float'
| |-ConstAttr 0x7fffd82a4050 <col:40>
| `-NoThrowAttr 0x7fffd82a4098 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a4150 <<scratch space>:296:1> col:1 implicit truncf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82a41f0 <<invalid sloc>> <invalid sloc> 'float'
| |-NoThrowAttr 0x7fffd82a4258 <col:1> Implicit
| `-ConstAttr 0x7fffd82a42a0 <col:1> Implicit
|-FunctionDecl 0x7fffd82a42b0 prev 0x7fffd82a4150 </usr/include/math.h:283:3, line:280:66> <scratch space>:296:1 truncf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82a40c0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:302:33> col:33 __x 'float'
| |-ConstAttr 0x7fffd82a4358 <col:40>
| `-NoThrowAttr 0x7fffd82a43a0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a4480 </usr/include/math.h:283:3, line:281:79> <scratch space>:298:1 __truncf 'float (float)' extern
| |-ParmVarDecl 0x7fffd82a43c8 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:302:33> col:33 __x 'float'
| |-ConstAttr 0x7fffd82a4528 <col:40>
| `-NoThrowAttr 0x7fffd82a4570 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a4778 <<scratch space>:299:1> col:1 implicit remquof 'float (float, float, int *)' extern
| |-ParmVarDecl 0x7fffd82a4818 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x7fffd82a4878 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x7fffd82a48d8 <<invalid sloc>> <invalid sloc> 'int *'
| `-NoThrowAttr 0x7fffd82a4950 <col:1> Implicit
|-FunctionDecl 0x7fffd82a4998 prev 0x7fffd82a4778 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:299:1 remquof 'float (float, float, int *)' extern
| |-ParmVarDecl 0x7fffd82a4598 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:307:33> col:33 __x 'float'
| |-ParmVarDecl 0x7fffd82a4610 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:307:48> col:48 __y 'float'
| |-ParmVarDecl 0x7fffd82a4688 <col:53, col:58> col:58 __quo 'int *'
| `-NoThrowAttr 0x7fffd82a4a50 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a4c40 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:301:1 __remquof 'float (float, float, int *)' extern
| |-ParmVarDecl 0x7fffd82a4ab0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:307:33> col:33 __x 'float'
| |-ParmVarDecl 0x7fffd82a4b28 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:307:48> col:48 __y 'float'
| |-ParmVarDecl 0x7fffd82a4ba0 <col:53, col:58> col:58 __quo 'int *'
| `-NoThrowAttr 0x7fffd82a4cf8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a4e28 <<scratch space>:302:1> col:1 implicit lrintf 'long (float)' extern
| |-ParmVarDecl 0x7fffd82a4ec8 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd82a4f30 <col:1> Implicit
|-FunctionDecl 0x7fffd82a4f78 prev 0x7fffd82a4e28 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:302:1 lrintf 'long (float)' extern
| |-ParmVarDecl 0x7fffd82a4d58 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:314:41> col:41 __x 'float'
| `-NoThrowAttr 0x7fffd82a5020 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a5110 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:304:1 __lrintf 'long (float)' extern
| |-ParmVarDecl 0x7fffd82a5080 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:314:41> col:41 __x 'float'
| `-NoThrowAttr 0x7fffd82a51b8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a52e8 <<scratch space>:305:1> col:1 implicit llrintf 'long long (float)' extern
| |-ParmVarDecl 0x7fffd82a5388 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd82a53f0 <col:1> Implicit
|-FunctionDecl 0x7fffd82ac170 prev 0x7fffd82a52e8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:305:1 llrintf 'long long (float)' extern
| |-ParmVarDecl 0x7fffd82a5218 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:316:47> col:47 __x 'float'
| `-NoThrowAttr 0x7fffd82ac218 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82ac308 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:307:1 __llrintf 'long long (float)' extern
| |-ParmVarDecl 0x7fffd82ac278 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:316:47> col:47 __x 'float'
| `-NoThrowAttr 0x7fffd82ac3b0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82ac4a0 <<scratch space>:308:1> col:1 implicit lroundf 'long (float)' extern
| |-ParmVarDecl 0x7fffd82ac540 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd82ac5a8 <col:1> Implicit
|-FunctionDecl 0x7fffd82ac5f0 prev 0x7fffd82ac4a0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:308:1 lroundf 'long (float)' extern
| |-ParmVarDecl 0x7fffd82ac410 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:320:42> col:42 __x 'float'
| `-NoThrowAttr 0x7fffd82ac698 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82ac788 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:310:1 __lroundf 'long (float)' extern
| |-ParmVarDecl 0x7fffd82ac6f8 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:320:42> col:42 __x 'float'
| `-NoThrowAttr 0x7fffd82ac830 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82ac920 <<scratch space>:311:1> col:1 implicit llroundf 'long long (float)' extern
| |-ParmVarDecl 0x7fffd82ac9c0 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd82aca28 <col:1> Implicit
|-FunctionDecl 0x7fffd82aca70 prev 0x7fffd82ac920 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:311:1 llroundf 'long long (float)' extern
| |-ParmVarDecl 0x7fffd82ac890 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:322:48> col:48 __x 'float'
| `-NoThrowAttr 0x7fffd82acb18 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82acc08 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:313:1 __llroundf 'long long (float)' extern
| |-ParmVarDecl 0x7fffd82acb78 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:322:48> col:48 __x 'float'
| `-NoThrowAttr 0x7fffd82accb0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82ace20 <<scratch space>:314:1> col:1 implicit fdimf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd82acec0 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x7fffd82acf20 <<invalid sloc>> <invalid sloc> 'float'
| `-NoThrowAttr 0x7fffd82acf90 <col:1> Implicit
|-FunctionDecl 0x7fffd82acfd8 prev 0x7fffd82ace20 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:314:1 fdimf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd82acd10 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:326:31> col:31 __x 'float'
| |-ParmVarDecl 0x7fffd82acd88 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:326:46> col:46 __y 'float'
| `-NoThrowAttr 0x7fffd82ad088 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b0238 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:316:1 __fdimf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd82ad0e8 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:326:31> col:31 __x 'float'
| |-ParmVarDecl 0x7fffd82b01a0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:326:46> col:46 __y 'float'
| `-NoThrowAttr 0x7fffd82b02e8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b0458 <<scratch space>:317:1> col:1 implicit fmaxf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd82b04f8 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x7fffd82b0558 <<invalid sloc>> <invalid sloc> 'float'
| |-NoThrowAttr 0x7fffd82b05c8 <col:1> Implicit
| `-ConstAttr 0x7fffd82b0610 <col:1> Implicit
|-FunctionDecl 0x7fffd82b0620 prev 0x7fffd82b0458 </usr/include/math.h:283:3, line:280:66> <scratch space>:317:1 fmaxf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd82b0348 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:329:32> col:32 __x 'float'
| |-ParmVarDecl 0x7fffd82b03c0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:329:47> col:47 __y 'float'
| |-ConstAttr 0x7fffd82b06d0 <col:54>
| `-NoThrowAttr 0x7fffd82b0718 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b0850 </usr/include/math.h:283:3, line:281:79> <scratch space>:319:1 __fmaxf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd82b0740 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:329:32> col:32 __x 'float'
| |-ParmVarDecl 0x7fffd82b07b8 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:329:47> col:47 __y 'float'
| |-ConstAttr 0x7fffd82b0900 <col:54>
| `-NoThrowAttr 0x7fffd82b0948 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b0a80 <<scratch space>:320:1> col:1 implicit fminf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd82b0b20 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x7fffd82b0b80 <<invalid sloc>> <invalid sloc> 'float'
| |-NoThrowAttr 0x7fffd82b0bf0 <col:1> Implicit
| `-ConstAttr 0x7fffd82b0c38 <col:1> Implicit
|-FunctionDecl 0x7fffd82b0c48 prev 0x7fffd82b0a80 </usr/include/math.h:283:3, line:280:66> <scratch space>:320:1 fminf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd82b0970 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:332:32> col:32 __x 'float'
| |-ParmVarDecl 0x7fffd82b09e8 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:332:47> col:47 __y 'float'
| |-ConstAttr 0x7fffd82b0cf8 <col:54>
| `-NoThrowAttr 0x7fffd82b0d40 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b0e78 </usr/include/math.h:283:3, line:281:79> <scratch space>:322:1 __fminf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd82b0d68 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:332:32> col:32 __x 'float'
| |-ParmVarDecl 0x7fffd82b0de0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:332:47> col:47 __y 'float'
| |-ConstAttr 0x7fffd82b0f28 <col:54>
| `-NoThrowAttr 0x7fffd82b0f70 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b11b0 <<scratch space>:323:1> col:1 implicit fmaf 'float (float, float, float)' extern
| |-ParmVarDecl 0x7fffd82b1250 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x7fffd82b12b0 <<invalid sloc>> <invalid sloc> 'float'
| |-ParmVarDecl 0x7fffd82b1310 <<invalid sloc>> <invalid sloc> 'float'
| |-ConstAttr 0x7fffd82b1388 <col:1> Implicit
| `-NoThrowAttr 0x7fffd82b13d0 <col:1> Implicit
|-FunctionDecl 0x7fffd82b13e0 prev 0x7fffd82b11b0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:323:1 fmaf 'float (float, float, float)' extern
| |-ParmVarDecl 0x7fffd82b0f98 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:335:30> col:30 __x 'float'
| |-ParmVarDecl 0x7fffd82b1010 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:335:45> col:45 __y 'float'
| |-ParmVarDecl 0x7fffd82b1088 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:335:60> col:60 __z 'float'
| |-NoThrowAttr 0x7fffd82b1498 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
| `-ConstAttr 0x7fffd82b14e0 <<scratch space>:323:1> Inherited Implicit
|-FunctionDecl 0x7fffd82b1698 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:325:1 __fmaf 'float (float, float, float)' extern
| |-ParmVarDecl 0x7fffd82b1508 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:335:30> col:30 __x 'float'
| |-ParmVarDecl 0x7fffd82b1580 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:335:45> col:45 __y 'float'
| |-ParmVarDecl 0x7fffd82b15f8 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:335:60> col:60 __z 'float'
| `-NoThrowAttr 0x7fffd82b1750 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b18c0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:327:1 scalbf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd82b17b0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:396:32> col:32 __x 'float'
| |-ParmVarDecl 0x7fffd82b1828 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:396:47> col:47 __n 'float'
| `-NoThrowAttr 0x7fffd82b1970 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b1ae0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:329:1 __scalbf 'float (float, float)' extern
| |-ParmVarDecl 0x7fffd82b19d0 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:396:32> col:32 __x 'float'
| |-ParmVarDecl 0x7fffd82b1a48 </usr/include/math.h:302:21, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:396:47> col:47 __n 'float'
| `-NoThrowAttr 0x7fffd82b1b90 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b1cb8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:22:32> <scratch space>:330:1 __fpclassifyl 'int (long double)' extern
| |-ParmVarDecl 0x7fffd82b1bf0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:21:46> col:46 __value 'long double'
| |-ConstAttr 0x7fffd82b1d60 <line:22:22>
| `-NoThrowAttr 0x7fffd82b1da8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b1e60 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:26:32> <scratch space>:331:1 __signbitl 'int (long double)' extern
| |-ParmVarDecl 0x7fffd82b1dd0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:25:43> col:43 __value 'long double'
| |-ConstAttr 0x7fffd82b1f08 <line:26:22>
| `-NoThrowAttr 0x7fffd82b1f50 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b2008 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:30:77> <scratch space>:332:1 __isinfl 'int (long double)' extern
| |-ParmVarDecl 0x7fffd82b1f78 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:30:41> col:41 __value 'long double'
| |-ConstAttr 0x7fffd82b20b0 <col:67>
| `-NoThrowAttr 0x7fffd82b20f8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b31d0 <<scratch space>:333:1> col:1 implicit __finitel 'int (long double)' extern
| |-ParmVarDecl 0x7fffd82b3270 <<invalid sloc>> <invalid sloc> 'long double'
| |-NoThrowAttr 0x7fffd82b32d8 <col:1> Implicit
| `-ConstAttr 0x7fffd82b3320 <col:1> Implicit
|-FunctionDecl 0x7fffd82b3330 prev 0x7fffd82b31d0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:33:78> <scratch space>:333:1 __finitel 'int (long double)' extern
| |-ParmVarDecl 0x7fffd82b2120 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:33:42> col:42 __value 'long double'
| |-ConstAttr 0x7fffd82b33d8 <col:68>
| `-NoThrowAttr 0x7fffd82b3420 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b34d8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:36:77> <scratch space>:334:1 __isnanl 'int (long double)' extern
| |-ParmVarDecl 0x7fffd82b3448 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:36:41> col:41 __value 'long double'
| |-ConstAttr 0x7fffd82b3580 <col:67>
| `-NoThrowAttr 0x7fffd82b35c8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b3748 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:335:1 __iseqsigl 'int (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82b35f0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:39:43> col:43 __x 'long double'
| |-ParmVarDecl 0x7fffd82b3668 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:39:58> col:58 __y 'long double'
| `-NoThrowAttr 0x7fffd82b37f8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b38e8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:43:32> <scratch space>:336:1 __issignalingl 'int (long double)' extern
| |-ParmVarDecl 0x7fffd82b3858 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h:42:47> col:47 __value 'long double'
| |-ConstAttr 0x7fffd82b3990 <line:43:22>
| `-NoThrowAttr 0x7fffd82b39d8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b3ac8 <<scratch space>:337:1> col:1 implicit acosl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b3b68 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82b3bd0 <col:1> Implicit
|-FunctionDecl 0x7fffd82b3c18 prev 0x7fffd82b3ac8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:337:1 acosl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b3a00 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:53:31> col:31 __x 'long double'
| `-NoThrowAttr 0x7fffd82b3cc0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b3db0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:339:1 __acosl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b3d20 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:53:31> col:31 __x 'long double'
| `-NoThrowAttr 0x7fffd82b3e58 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b3f48 <<scratch space>:340:1> col:1 implicit asinl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b3fe8 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82b4050 <col:1> Implicit
|-FunctionDecl 0x7fffd82b4098 prev 0x7fffd82b3f48 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:340:1 asinl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b3eb8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:55:31> col:31 __x 'long double'
| `-NoThrowAttr 0x7fffd82b4140 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b4270 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:342:1 __asinl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b41e0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:55:31> col:31 __x 'long double'
| `-NoThrowAttr 0x7fffd82b4318 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b4408 <<scratch space>:343:1> col:1 implicit atanl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b44a8 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82b4510 <col:1> Implicit
|-FunctionDecl 0x7fffd82b4558 prev 0x7fffd82b4408 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:343:1 atanl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b4378 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:57:31> col:31 __x 'long double'
| `-NoThrowAttr 0x7fffd82b4600 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b46f0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:345:1 __atanl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b4660 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:57:31> col:31 __x 'long double'
| `-NoThrowAttr 0x7fffd82b4798 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b4948 <<scratch space>:346:1> col:1 implicit atan2l 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82b49e8 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x7fffd82b4a48 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82b4ab8 <col:1> Implicit
|-FunctionDecl 0x7fffd82b4b00 prev 0x7fffd82b4948 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:346:1 atan2l 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82b47f8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:59:32> col:32 __y 'long double'
| |-ParmVarDecl 0x7fffd82b4870 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:59:47> col:47 __x 'long double'
| `-NoThrowAttr 0x7fffd82b4bb0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b4d20 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:348:1 __atan2l 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82b4c10 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:59:32> col:32 __y 'long double'
| |-ParmVarDecl 0x7fffd82b4c88 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:59:47> col:47 __x 'long double'
| `-NoThrowAttr 0x7fffd82b4dd0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b4ec0 <<scratch space>:351:1> col:1 implicit cosl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b4f60 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82b4fc8 <col:1> Implicit
|-FunctionDecl 0x7fffd82b5010 prev 0x7fffd82b4ec0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:351:1 cosl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b4e30 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:62:34> col:34 __x 'long double'
| `-NoThrowAttr 0x7fffd82b50b8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b51f0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:353:1 __cosl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b5118 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:62:34> col:34 __x 'long double'
| `-NoThrowAttr 0x7fffd82b5298 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b5388 <<scratch space>:356:1> col:1 implicit sinl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b5428 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82b5490 <col:1> Implicit
|-FunctionDecl 0x7fffd82b54d8 prev 0x7fffd82b5388 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:356:1 sinl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b52f8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:64:34> col:34 __x 'long double'
| `-NoThrowAttr 0x7fffd82b5580 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b5670 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:358:1 __sinl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b55e0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:64:34> col:34 __x 'long double'
| `-NoThrowAttr 0x7fffd82b5718 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b5808 <<scratch space>:359:1> col:1 implicit tanl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b58a8 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82b5910 <col:1> Implicit
|-FunctionDecl 0x7fffd82b5958 prev 0x7fffd82b5808 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:359:1 tanl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b5778 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:66:30> col:30 __x 'long double'
| `-NoThrowAttr 0x7fffd82b5a00 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b5af0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:361:1 __tanl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b5a60 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:66:30> col:30 __x 'long double'
| `-NoThrowAttr 0x7fffd82b5b98 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b5c88 <<scratch space>:362:1> col:1 implicit coshl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b5d28 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82b5d90 <col:1> Implicit
|-FunctionDecl 0x7fffd82b5dd8 prev 0x7fffd82b5c88 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:362:1 coshl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b5bf8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:71:31> col:31 __x 'long double'
| `-NoThrowAttr 0x7fffd82b5e80 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b5f70 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:364:1 __coshl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b5ee0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:71:31> col:31 __x 'long double'
| `-NoThrowAttr 0x7fffd82b6018 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b6108 <<scratch space>:365:1> col:1 implicit sinhl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd828bd20 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd828bd88 <col:1> Implicit
|-FunctionDecl 0x7fffd828bdd0 prev 0x7fffd82b6108 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:365:1 sinhl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b6078 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:73:31> col:31 __x 'long double'
| `-NoThrowAttr 0x7fffd828be78 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd828bf68 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:367:1 __sinhl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd828bed8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:73:31> col:31 __x 'long double'
| `-NoThrowAttr 0x7fffd828c010 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd828c100 <<scratch space>:368:1> col:1 implicit tanhl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd828c1a0 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd828c208 <col:1> Implicit
|-FunctionDecl 0x7fffd828c250 prev 0x7fffd828c100 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:368:1 tanhl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd828c070 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:75:31> col:31 __x 'long double'
| `-NoThrowAttr 0x7fffd828c2f8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd828c3e8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:370:1 __tanhl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd828c358 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:75:31> col:31 __x 'long double'
| `-NoThrowAttr 0x7fffd828c490 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd828c580 <<scratch space>:371:1> col:1 implicit acoshl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd828c620 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd828c688 <col:1> Implicit
|-FunctionDecl 0x7fffd828c6d0 prev 0x7fffd828c580 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:371:1 acoshl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd828c4f0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:85:32> col:32 __x 'long double'
| `-NoThrowAttr 0x7fffd828c778 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd828c868 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:373:1 __acoshl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd828c7d8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:85:32> col:32 __x 'long double'
| `-NoThrowAttr 0x7fffd828c910 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd828ca00 <<scratch space>:374:1> col:1 implicit asinhl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd828caa0 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd828cb08 <col:1> Implicit
|-FunctionDecl 0x7fffd828cb50 prev 0x7fffd828ca00 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:374:1 asinhl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd828c970 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:87:32> col:32 __x 'long double'
| `-NoThrowAttr 0x7fffd828cbf8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b8210 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:376:1 __asinhl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd828cc58 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:87:32> col:32 __x 'long double'
| `-NoThrowAttr 0x7fffd82b82b8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b83a8 <<scratch space>:377:1> col:1 implicit atanhl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b8448 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82b84b0 <col:1> Implicit
|-FunctionDecl 0x7fffd82b84f8 prev 0x7fffd82b83a8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:377:1 atanhl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b8318 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:89:32> col:32 __x 'long double'
| `-NoThrowAttr 0x7fffd82b85a0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b8690 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:379:1 __atanhl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b8600 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:89:32> col:32 __x 'long double'
| `-NoThrowAttr 0x7fffd82b8738 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b8828 <<scratch space>:382:1> col:1 implicit expl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b88c8 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82b8930 <col:1> Implicit
|-FunctionDecl 0x7fffd82b8978 prev 0x7fffd82b8828 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:382:1 expl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b8798 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:95:34> col:34 __x 'long double'
| `-NoThrowAttr 0x7fffd82b8a20 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b8b10 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:384:1 __expl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82b8a80 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:95:34> col:34 __x 'long double'
| `-NoThrowAttr 0x7fffd82b8bb8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b8d68 <<scratch space>:385:1> col:1 implicit frexpl 'long double (long double, int *)' extern
| |-ParmVarDecl 0x7fffd82b8e08 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x7fffd82b8e68 <<invalid sloc>> <invalid sloc> 'int *'
| `-NoThrowAttr 0x7fffd82b8ed8 <col:1> Implicit
|-FunctionDecl 0x7fffd82b8f20 prev 0x7fffd82b8d68 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:385:1 frexpl 'long double (long double, int *)' extern
| |-ParmVarDecl 0x7fffd82b8c18 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:98:32> col:32 __x 'long double'
| |-ParmVarDecl 0x7fffd82b8c90 <col:37, col:42> col:42 __exponent 'int *'
| `-NoThrowAttr 0x7fffd82b8fd0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82b9140 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:2:1 __frexpl 'long double (long double, int *)' extern
| |-ParmVarDecl 0x7fffd82b9030 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:98:32> col:32 __x 'long double'
| |-ParmVarDecl 0x7fffd82b90a8 <col:37, col:42> col:42 __exponent 'int *'
| `-NoThrowAttr 0x7fffd82b91f0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82ba3e8 <<scratch space>:3:1> col:1 implicit ldexpl 'long double (long double, int)' extern
| |-ParmVarDecl 0x7fffd82ba488 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x7fffd82ba4e8 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x7fffd82ba558 <col:1> Implicit
|-FunctionDecl 0x7fffd82ba5a0 prev 0x7fffd82ba3e8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:3:1 ldexpl 'long double (long double, int)' extern
| |-ParmVarDecl 0x7fffd82ba290 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:101:32> col:32 __x 'long double'
| |-ParmVarDecl 0x7fffd82ba308 <col:37, col:41> col:41 __exponent 'int'
| `-NoThrowAttr 0x7fffd82ba650 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82ba7c0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:5:1 __ldexpl 'long double (long double, int)' extern
| |-ParmVarDecl 0x7fffd82ba6b0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:101:32> col:32 __x 'long double'
| |-ParmVarDecl 0x7fffd82ba728 <col:37, col:41> col:41 __exponent 'int'
| `-NoThrowAttr 0x7fffd82ba870 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82ba960 <<scratch space>:8:1> col:1 implicit logl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82baa00 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82baa68 <col:1> Implicit
|-FunctionDecl 0x7fffd82baab0 prev 0x7fffd82ba960 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:8:1 logl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82ba8d0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:104:34> col:34 __x 'long double'
| `-NoThrowAttr 0x7fffd82bab58 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bac48 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:10:1 __logl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82babb8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:104:34> col:34 __x 'long double'
| `-NoThrowAttr 0x7fffd82bacf0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bade0 <<scratch space>:11:1> col:1 implicit log10l 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82bae80 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82baee8 <col:1> Implicit
|-FunctionDecl 0x7fffd82baf30 prev 0x7fffd82bade0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:11:1 log10l 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82bad50 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:107:32> col:32 __x 'long double'
| `-NoThrowAttr 0x7fffd82bafd8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bb0c8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:13:1 __log10l 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82bb038 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:107:32> col:32 __x 'long double'
| `-NoThrowAttr 0x7fffd82bb170 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bb368 <<scratch space>:14:1> col:1 implicit modfl 'long double (long double, long double *)' extern
| |-ParmVarDecl 0x7fffd82bb408 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x7fffd82bb468 <<invalid sloc>> <invalid sloc> 'long double *'
| `-NoThrowAttr 0x7fffd82bb4d8 <col:1> Implicit
|-FunctionDecl 0x7fffd82bb520 prev 0x7fffd82bb368 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:14:1 modfl 'long double (long double, long double *)' extern
| |-ParmVarDecl 0x7fffd82bb1d0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:110:31> col:31 __x 'long double'
| |-ParmVarDecl 0x7fffd82bb290 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:110:47> col:47 __iptr 'long double *'
| `-NoThrowAttr 0x7fffd82bb5d0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bb760 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> <scratch space>:16:1 __modfl 'long double (long double, long double *)' extern
| |-ParmVarDecl 0x7fffd82bb630 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:110:31> col:31 __x 'long double'
| |-ParmVarDecl 0x7fffd82bb6a8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:110:47> col:47 __iptr 'long double *'
| |-NonNullAttr 0x7fffd82bb810 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:110:69> 1
| `-NoThrowAttr 0x7fffd82bb870 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bb928 <<scratch space>:18:1> col:1 implicit expm1l 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82bb9c8 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82bba30 <col:1> Implicit
|-FunctionDecl 0x7fffd82bba78 prev 0x7fffd82bb928 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:18:1 expm1l 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82bb898 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:119:32> col:32 __x 'long double'
| `-NoThrowAttr 0x7fffd82bbb20 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bbc10 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:20:1 __expm1l 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82bbb80 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:119:32> col:32 __x 'long double'
| `-NoThrowAttr 0x7fffd82bbcb8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bbda8 <<scratch space>:21:1> col:1 implicit log1pl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82bbe48 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82bbeb0 <col:1> Implicit
|-FunctionDecl 0x7fffd82bbef8 prev 0x7fffd82bbda8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:21:1 log1pl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82bbd18 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:122:32> col:32 __x 'long double'
| `-NoThrowAttr 0x7fffd82bbfa0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bc090 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:23:1 __log1pl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82bc000 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:122:32> col:32 __x 'long double'
| `-NoThrowAttr 0x7fffd82bc138 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bc260 <<scratch space>:24:1> col:1 implicit logbl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82bc300 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82bc368 <col:1> Implicit
|-FunctionDecl 0x7fffd82bc3b0 prev 0x7fffd82bc260 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:24:1 logbl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82bc198 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:125:31> col:31 __x 'long double'
| `-NoThrowAttr 0x7fffd82bc458 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bc548 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:26:1 __logbl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82bc4b8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:125:31> col:31 __x 'long double'
| `-NoThrowAttr 0x7fffd82bc5f0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bc6e0 <<scratch space>:27:1> col:1 implicit exp2l 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82bc780 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82bc7e8 <col:1> Implicit
|-FunctionDecl 0x7fffd82bc830 prev 0x7fffd82bc6e0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:27:1 exp2l 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82bc650 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:130:31> col:31 __x 'long double'
| `-NoThrowAttr 0x7fffd82bc8d8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bc9c8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:29:1 __exp2l 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82bc938 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:130:31> col:31 __x 'long double'
| `-NoThrowAttr 0x7fffd82bca70 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bcb60 <<scratch space>:30:1> col:1 implicit log2l 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82bcc00 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82bcc68 <col:1> Implicit
|-FunctionDecl 0x7fffd82bccb0 prev 0x7fffd82bcb60 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:30:1 log2l 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82bcad0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:133:31> col:31 __x 'long double'
| `-NoThrowAttr 0x7fffd82bcd58 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bce48 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:32:1 __log2l 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82bcdb8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:133:31> col:31 __x 'long double'
| `-NoThrowAttr 0x7fffd82bcef0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bd060 <<scratch space>:35:1> col:1 implicit powl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82bd100 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x7fffd82bd160 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82bd1d0 <col:1> Implicit
|-FunctionDecl 0x7fffd82bd270 prev 0x7fffd82bd060 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:35:1 powl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82bcf50 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:140:34> col:34 __x 'long double'
| |-ParmVarDecl 0x7fffd82bcfc8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:140:49> col:49 __y 'long double'
| `-NoThrowAttr 0x7fffd82bd320 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bd490 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:37:1 __powl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82bd380 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:140:34> col:34 __x 'long double'
| |-ParmVarDecl 0x7fffd82bd3f8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:140:49> col:49 __y 'long double'
| `-NoThrowAttr 0x7fffd82bd540 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bd630 <<scratch space>:38:1> col:1 implicit sqrtl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82bd6d0 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82bd738 <col:1> Implicit
|-FunctionDecl 0x7fffd82bd780 prev 0x7fffd82bd630 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:38:1 sqrtl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82bd5a0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:143:31> col:31 __x 'long double'
| `-NoThrowAttr 0x7fffd82bd828 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bd918 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:40:1 __sqrtl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82bd888 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:143:31> col:31 __x 'long double'
| `-NoThrowAttr 0x7fffd82bd9c0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bdb30 <<scratch space>:41:1> col:1 implicit hypotl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82bdbd0 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x7fffd82bdc30 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82bdca0 <col:1> Implicit
|-FunctionDecl 0x7fffd82bdce8 prev 0x7fffd82bdb30 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:41:1 hypotl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82bda20 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:147:32> col:32 __x 'long double'
| |-ParmVarDecl 0x7fffd82bda98 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:147:47> col:47 __y 'long double'
| `-NoThrowAttr 0x7fffd82bdd98 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bdf08 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:43:1 __hypotl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82bddf8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:147:32> col:32 __x 'long double'
| |-ParmVarDecl 0x7fffd82bde70 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:147:47> col:47 __y 'long double'
| `-NoThrowAttr 0x7fffd82bdfb8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82be0a8 <<scratch space>:44:1> col:1 implicit cbrtl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82be148 <<invalid sloc>> <invalid sloc> 'long double'
| |-NoThrowAttr 0x7fffd82be1b0 <col:1> Implicit
| `-ConstAttr 0x7fffd82be1f8 <col:1> Implicit
|-FunctionDecl 0x7fffd82be280 prev 0x7fffd82be0a8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:44:1 cbrtl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82be018 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:152:31> col:31 __x 'long double'
| |-NoThrowAttr 0x7fffd82be328 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
| `-ConstAttr 0x7fffd82be370 <<scratch space>:44:1> Inherited Implicit
|-FunctionDecl 0x7fffd82be428 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:46:1 __cbrtl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82be398 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:152:31> col:31 __x 'long double'
| `-NoThrowAttr 0x7fffd82be4d0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82be5c0 <<scratch space>:47:1> col:1 implicit ceill 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82be660 <<invalid sloc>> <invalid sloc> 'long double'
| |-NoThrowAttr 0x7fffd82be6c8 <col:1> Implicit
| `-ConstAttr 0x7fffd82be710 <col:1> Implicit
|-FunctionDecl 0x7fffd82be720 prev 0x7fffd82be5c0 </usr/include/math.h:283:3, line:280:66> <scratch space>:47:1 ceill 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82be530 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:159:32> col:32 __x 'long double'
| |-ConstAttr 0x7fffd82be7c8 <col:39>
| `-NoThrowAttr 0x7fffd82be810 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82be8c8 </usr/include/math.h:283:3, line:281:79> <scratch space>:49:1 __ceill 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82be838 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:159:32> col:32 __x 'long double'
| |-ConstAttr 0x7fffd82be970 <col:39>
| `-NoThrowAttr 0x7fffd82be9b8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bea70 <<scratch space>:50:1> col:1 implicit fabsl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82beb10 <<invalid sloc>> <invalid sloc> 'long double'
| |-NoThrowAttr 0x7fffd82beb78 <col:1> Implicit
| `-ConstAttr 0x7fffd82bebc0 <col:1> Implicit
|-FunctionDecl 0x7fffd82bebd0 prev 0x7fffd82bea70 </usr/include/math.h:283:3, line:280:66> <scratch space>:50:1 fabsl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82be9e0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:162:32> col:32 __x 'long double'
| |-ConstAttr 0x7fffd82bec78 <col:39>
| `-NoThrowAttr 0x7fffd82becc0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bed78 </usr/include/math.h:283:3, line:281:79> <scratch space>:52:1 __fabsl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82bece8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:162:32> col:32 __x 'long double'
| |-ConstAttr 0x7fffd82bee20 <col:39>
| `-NoThrowAttr 0x7fffd82bee68 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bef20 <<scratch space>:53:1> col:1 implicit floorl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82befc0 <<invalid sloc>> <invalid sloc> 'long double'
| |-NoThrowAttr 0x7fffd82bf028 <col:1> Implicit
| `-ConstAttr 0x7fffd82bf070 <col:1> Implicit
|-FunctionDecl 0x7fffd82bf080 prev 0x7fffd82bef20 </usr/include/math.h:283:3, line:280:66> <scratch space>:53:1 floorl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82bee90 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:165:33> col:33 __x 'long double'
| |-ConstAttr 0x7fffd82bf128 <col:40>
| `-NoThrowAttr 0x7fffd82bf170 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bf290 </usr/include/math.h:283:3, line:281:79> <scratch space>:55:1 __floorl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82bf198 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:165:33> col:33 __x 'long double'
| |-ConstAttr 0x7fffd82bf338 <col:40>
| `-NoThrowAttr 0x7fffd82bf380 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bf4b8 <<scratch space>:56:1> col:1 implicit fmodl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82bf558 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x7fffd82bf5b8 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82bf628 <col:1> Implicit
|-FunctionDecl 0x7fffd82bf670 prev 0x7fffd82bf4b8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:56:1 fmodl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82bf3a8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:168:31> col:31 __x 'long double'
| |-ParmVarDecl 0x7fffd82bf420 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:168:46> col:46 __y 'long double'
| `-NoThrowAttr 0x7fffd82bf720 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bf890 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:58:1 __fmodl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82bf780 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:168:31> col:31 __x 'long double'
| |-ParmVarDecl 0x7fffd82bf7f8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:168:46> col:46 __y 'long double'
| `-NoThrowAttr 0x7fffd82bf940 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bfa30 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:177:74> <scratch space>:59:1 isinfl 'int (long double)' extern
| |-ParmVarDecl 0x7fffd82bf9a0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:177:38> col:38 __value 'long double'
| |-ConstAttr 0x7fffd82bfad8 <col:64>
| `-NoThrowAttr 0x7fffd82bfb20 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bfbd8 <<scratch space>:60:1> col:1 implicit finitel 'int (long double)' extern
| |-ParmVarDecl 0x7fffd82bfc78 <<invalid sloc>> <invalid sloc> 'long double'
| |-NoThrowAttr 0x7fffd82bfce0 <col:1> Implicit
| `-ConstAttr 0x7fffd82bfd28 <col:1> Implicit
|-FunctionDecl 0x7fffd82bfd38 prev 0x7fffd82bfbd8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:182:75> <scratch space>:60:1 finitel 'int (long double)' extern
| |-ParmVarDecl 0x7fffd82bfb48 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:182:39> col:39 __value 'long double'
| |-ConstAttr 0x7fffd82bfde0 <col:65>
| `-NoThrowAttr 0x7fffd82bfe28 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82bff60 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:61:1 dreml 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82bfe50 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:185:31> col:31 __x 'long double'
| |-ParmVarDecl 0x7fffd82bfec8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:185:46> col:46 __y 'long double'
| `-NoThrowAttr 0x7fffd82c0010 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c0180 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:63:1 __dreml 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82c0070 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:185:31> col:31 __x 'long double'
| |-ParmVarDecl 0x7fffd82c00e8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:185:46> col:46 __y 'long double'
| `-NoThrowAttr 0x7fffd82c0230 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c1340 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:64:1 significandl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c12b0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:189:38> col:38 __x 'long double'
| `-NoThrowAttr 0x7fffd82c13e8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c14d8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:66:1 __significandl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c1448 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:189:38> col:38 __x 'long double'
| `-NoThrowAttr 0x7fffd82c1580 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c16f0 <<scratch space>:67:1> col:1 implicit copysignl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82c1790 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x7fffd82c17f0 <<invalid sloc>> <invalid sloc> 'long double'
| |-NoThrowAttr 0x7fffd82c1860 <col:1> Implicit
| `-ConstAttr 0x7fffd82c18a8 <col:1> Implicit
|-FunctionDecl 0x7fffd82c18b8 prev 0x7fffd82c16f0 </usr/include/math.h:283:3, line:280:66> <scratch space>:67:1 copysignl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82c15e0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:196:36> col:36 __x 'long double'
| |-ParmVarDecl 0x7fffd82c1658 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:196:51> col:51 __y 'long double'
| |-ConstAttr 0x7fffd82c1968 <col:58>
| `-NoThrowAttr 0x7fffd82c19b0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c1ae8 </usr/include/math.h:283:3, line:281:79> <scratch space>:69:1 __copysignl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82c19d8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:196:36> col:36 __x 'long double'
| |-ParmVarDecl 0x7fffd82c1a50 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:196:51> col:51 __y 'long double'
| |-ConstAttr 0x7fffd82c1b98 <col:58>
| `-NoThrowAttr 0x7fffd82c1be0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c1cd8 <<scratch space>:70:1> col:1 implicit nanl 'long double (const char *)' extern
| |-ParmVarDecl 0x7fffd82c1d78 <<invalid sloc>> <invalid sloc> 'const char *'
| |-NoThrowAttr 0x7fffd82c1de0 <col:1> Implicit
| `-PureAttr 0x7fffd82c1e28 <col:1> Implicit
|-FunctionDecl 0x7fffd82c1e38 prev 0x7fffd82c1cd8 </usr/include/math.h:283:3, line:280:66> <scratch space>:70:1 nanl 'long double (const char *)' extern
| |-ParmVarDecl 0x7fffd82c1c08 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:201:21, col:33> col:33 __tagb 'const char *'
| |-ConstAttr 0x7fffd82c1ee0 <col:43>
| |-NoThrowAttr 0x7fffd82c1f28 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
| `-PureAttr 0x7fffd82c1f38 <<scratch space>:70:1> Inherited Implicit
|-FunctionDecl 0x7fffd82c1ff0 </usr/include/math.h:283:3, line:281:79> <scratch space>:72:1 __nanl 'long double (const char *)' extern
| |-ParmVarDecl 0x7fffd82c1f60 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:201:21, col:33> col:33 __tagb 'const char *'
| |-ConstAttr 0x7fffd82c2098 <col:43>
| `-NoThrowAttr 0x7fffd82c20e0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c2198 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:211:74> <scratch space>:73:1 isnanl 'int (long double)' extern
| |-ParmVarDecl 0x7fffd82c2108 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:211:38> col:38 __value 'long double'
| |-ConstAttr 0x7fffd82c2240 <col:64>
| `-NoThrowAttr 0x7fffd82c2288 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c2350 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:74:1 j0l 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c22c0 </usr/include/math.h:344:22, col:27> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:217:28 'long double'
| `-NoThrowAttr 0x7fffd82c23f8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c24e8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:76:1 __j0l 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c2458 </usr/include/math.h:344:22, col:27> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:217:28 'long double'
| `-NoThrowAttr 0x7fffd82c2590 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c2680 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:77:1 j1l 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c25f0 </usr/include/math.h:344:22, col:27> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:218:28 'long double'
| `-NoThrowAttr 0x7fffd82c2728 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c2818 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:79:1 __j1l 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c2788 </usr/include/math.h:344:22, col:27> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:218:28 'long double'
| `-NoThrowAttr 0x7fffd82c28c0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c2a78 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:80:1 jnl 'long double (int, long double)' extern
| |-ParmVarDecl 0x7fffd82c2920 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:219:19> col:22 'int'
| |-ParmVarDecl 0x7fffd82c2998 </usr/include/math.h:344:22, col:27> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:219:33 'long double'
| `-NoThrowAttr 0x7fffd82c2b28 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c2c98 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:82:1 __jnl 'long double (int, long double)' extern
| |-ParmVarDecl 0x7fffd82c2b88 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:219:19> col:22 'int'
| |-ParmVarDecl 0x7fffd82c2c00 </usr/include/math.h:344:22, col:27> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:219:33 'long double'
| `-NoThrowAttr 0x7fffd82c2d48 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c2e38 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:83:1 y0l 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c2da8 </usr/include/math.h:344:22, col:27> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:220:28 'long double'
| `-NoThrowAttr 0x7fffd82c2ee0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c2fd0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:85:1 __y0l 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c2f40 </usr/include/math.h:344:22, col:27> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:220:28 'long double'
| `-NoThrowAttr 0x7fffd82c3078 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c3168 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:86:1 y1l 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c30d8 </usr/include/math.h:344:22, col:27> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:221:28 'long double'
| `-NoThrowAttr 0x7fffd82c3210 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c3360 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:88:1 __y1l 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c32d0 </usr/include/math.h:344:22, col:27> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:221:28 'long double'
| `-NoThrowAttr 0x7fffd82c3408 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c3578 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:89:1 ynl 'long double (int, long double)' extern
| |-ParmVarDecl 0x7fffd82c3468 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:222:19> col:22 'int'
| |-ParmVarDecl 0x7fffd82c34e0 </usr/include/math.h:344:22, col:27> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:222:33 'long double'
| `-NoThrowAttr 0x7fffd82c3628 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c3798 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:91:1 __ynl 'long double (int, long double)' extern
| |-ParmVarDecl 0x7fffd82c3688 </usr/include/x86_64-linux-gnu/bits/mathcalls.h:222:19> col:22 'int'
| |-ParmVarDecl 0x7fffd82c3700 </usr/include/math.h:344:22, col:27> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:222:33 'long double'
| `-NoThrowAttr 0x7fffd82c3848 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c3938 <<scratch space>:92:1> col:1 implicit erfl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c39d8 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82c3a40 <col:1> Implicit
|-FunctionDecl 0x7fffd82c3a88 prev 0x7fffd82c3938 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:92:1 erfl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c38a8 </usr/include/math.h:344:22, col:27> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:228:29 'long double'
| `-NoThrowAttr 0x7fffd82c3b30 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c3c20 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:94:1 __erfl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c3b90 </usr/include/math.h:344:22, col:27> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:228:29 'long double'
| `-NoThrowAttr 0x7fffd82c3cc8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c3db8 <<scratch space>:95:1> col:1 implicit erfcl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c3e58 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82c3ec0 <col:1> Implicit
|-FunctionDecl 0x7fffd82c3f08 prev 0x7fffd82c3db8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:95:1 erfcl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c3d28 </usr/include/math.h:344:22, col:27> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:229:30 'long double'
| `-NoThrowAttr 0x7fffd82c3fb0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c40a0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:97:1 __erfcl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c4010 </usr/include/math.h:344:22, col:27> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:229:30 'long double'
| `-NoThrowAttr 0x7fffd82c4148 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c42e0 <<scratch space>:98:1> col:1 implicit lgammal 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c4380 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82c43e8 <col:1> Implicit
|-FunctionDecl 0x7fffd82c4430 prev 0x7fffd82c42e0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:98:1 lgammal 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c41a8 </usr/include/math.h:344:22, col:27> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:230:32 'long double'
| `-NoThrowAttr 0x7fffd82c44d8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c45c8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:100:1 __lgammal 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c4538 </usr/include/math.h:344:22, col:27> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:230:32 'long double'
| `-NoThrowAttr 0x7fffd82c4670 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c4760 <<scratch space>:101:1> col:1 implicit tgammal 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c4800 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82c4868 <col:1> Implicit
|-FunctionDecl 0x7fffd82c48b0 prev 0x7fffd82c4760 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:101:1 tgammal 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c46d0 </usr/include/math.h:344:22, col:27> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:235:32 'long double'
| `-NoThrowAttr 0x7fffd82c4958 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c4a48 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:103:1 __tgammal 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c49b8 </usr/include/math.h:344:22, col:27> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:235:32 'long double'
| `-NoThrowAttr 0x7fffd82c4af0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c4be0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:104:1 gammal 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c4b50 </usr/include/math.h:344:22, col:27> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:241:31 'long double'
| `-NoThrowAttr 0x7fffd82c4c88 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c4d78 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:106:1 __gammal 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c4ce8 </usr/include/math.h:344:22, col:27> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:241:31 'long double'
| `-NoThrowAttr 0x7fffd82c4e20 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c4f90 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:108:1 lgammal_r 'long double (long double, int *)' extern
| |-ParmVarDecl 0x7fffd82c4e80 </usr/include/math.h:344:22, col:27> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:249:34 'long double'
| |-ParmVarDecl 0x7fffd82c4ef8 <col:36, col:41> col:41 __signgamp 'int *'
| `-NoThrowAttr 0x7fffd82c5040 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c51b0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:111:1 __lgammal_r 'long double (long double, int *)' extern
| |-ParmVarDecl 0x7fffd82c50a0 </usr/include/math.h:344:22, col:27> /usr/include/x86_64-linux-gnu/bits/mathcalls.h:249:34 'long double'
| |-ParmVarDecl 0x7fffd82c5118 <col:36, col:41> col:41 __signgamp 'int *'
| `-NoThrowAttr 0x7fffd82c5260 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c5380 <<scratch space>:112:1> col:1 implicit rintl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c5420 <<invalid sloc>> <invalid sloc> 'long double'
| |-NoThrowAttr 0x7fffd82c5488 <col:1> Implicit
| `-ConstAttr 0x7fffd82c54d0 <col:1> Implicit
|-FunctionDecl 0x7fffd82c54e0 prev 0x7fffd82c5380 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:112:1 rintl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c52f0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:256:31> col:31 __x 'long double'
| |-NoThrowAttr 0x7fffd82c5588 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
| `-ConstAttr 0x7fffd82c55d0 <<scratch space>:112:1> Inherited Implicit
|-FunctionDecl 0x7fffd82c5688 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:114:1 __rintl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c55f8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:256:31> col:31 __x 'long double'
| `-NoThrowAttr 0x7fffd82c5730 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c58a0 <<scratch space>:115:1> col:1 implicit nextafterl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82c5940 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x7fffd82c59a0 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82c5a10 <col:1> Implicit
|-FunctionDecl 0x7fffd82c5a58 prev 0x7fffd82c58a0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:115:1 nextafterl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82c5790 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:259:36> col:36 __x 'long double'
| |-ParmVarDecl 0x7fffd82c5808 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:259:51> col:51 __y 'long double'
| `-NoThrowAttr 0x7fffd82c5b08 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c5c78 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:117:1 __nextafterl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82c5b68 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:259:36> col:36 __x 'long double'
| |-ParmVarDecl 0x7fffd82c5be0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:259:51> col:51 __y 'long double'
| `-NoThrowAttr 0x7fffd82c5d28 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c5e98 <<scratch space>:118:1> col:1 implicit nexttowardl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82c5f38 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x7fffd82c5f98 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82c6008 <col:1> Implicit
|-FunctionDecl 0x7fffd82c6050 prev 0x7fffd82c5e98 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:118:1 nexttowardl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82c5d88 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:261:37> col:37 __x 'long double'
| |-ParmVarDecl 0x7fffd82c5e00 <col:42, col:54> col:54 __y 'long double'
| `-NoThrowAttr 0x7fffd82c6100 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c6300 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:120:1 __nexttowardl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82c6160 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:261:37> col:37 __x 'long double'
| |-ParmVarDecl 0x7fffd82c61d8 <col:42, col:54> col:54 __y 'long double'
| `-NoThrowAttr 0x7fffd82c63b0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c6520 <<scratch space>:122:1> col:1 implicit remainderl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82c65c0 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x7fffd82c6620 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82c6690 <col:1> Implicit
|-FunctionDecl 0x7fffd82c66d8 prev 0x7fffd82c6520 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:122:1 remainderl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82c6410 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:272:36> col:36 __x 'long double'
| |-ParmVarDecl 0x7fffd82c6488 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:272:51> col:51 __y 'long double'
| `-NoThrowAttr 0x7fffd82c6788 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c68f8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:124:1 __remainderl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82c67e8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:272:36> col:36 __x 'long double'
| |-ParmVarDecl 0x7fffd82c6860 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:272:51> col:51 __y 'long double'
| `-NoThrowAttr 0x7fffd82c69a8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c6b18 <<scratch space>:125:1> col:1 implicit scalbnl 'long double (long double, int)' extern
| |-ParmVarDecl 0x7fffd82c6bb8 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x7fffd82c6c18 <<invalid sloc>> <invalid sloc> 'int'
| `-NoThrowAttr 0x7fffd82c6c88 <col:1> Implicit
|-FunctionDecl 0x7fffd82c6cd0 prev 0x7fffd82c6b18 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:125:1 scalbnl 'long double (long double, int)' extern
| |-ParmVarDecl 0x7fffd82c6a08 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:276:33> col:33 __x 'long double'
| |-ParmVarDecl 0x7fffd82c6a80 <col:38, col:42> col:42 __n 'int'
| `-NoThrowAttr 0x7fffd82c6d80 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c6ef0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:127:1 __scalbnl 'long double (long double, int)' extern
| |-ParmVarDecl 0x7fffd82c6de0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:276:33> col:33 __x 'long double'
| |-ParmVarDecl 0x7fffd82c6e58 <col:38, col:42> col:42 __n 'int'
| `-NoThrowAttr 0x7fffd82c6fa0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c7090 <<scratch space>:128:1> col:1 implicit ilogbl 'int (long double)' extern
| |-ParmVarDecl 0x7fffd82c7130 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82c7198 <col:1> Implicit
|-FunctionDecl 0x7fffd82c71e0 prev 0x7fffd82c7090 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:128:1 ilogbl 'int (long double)' extern
| |-ParmVarDecl 0x7fffd82c7000 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:280:36> col:36 __x 'long double'
| `-NoThrowAttr 0x7fffd82c7288 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c73a0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:130:1 __ilogbl 'int (long double)' extern
| |-ParmVarDecl 0x7fffd82c7310 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:280:36> col:36 __x 'long double'
| `-NoThrowAttr 0x7fffd82c7448 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c75f8 <<scratch space>:132:1> col:1 implicit scalblnl 'long double (long double, long)' extern
| |-ParmVarDecl 0x7fffd82c7698 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x7fffd82c76f8 <<invalid sloc>> <invalid sloc> 'long'
| `-NoThrowAttr 0x7fffd82c7768 <col:1> Implicit
|-FunctionDecl 0x7fffd82c77b0 prev 0x7fffd82c75f8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:132:1 scalblnl 'long double (long double, long)' extern
| |-ParmVarDecl 0x7fffd82c74a8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:290:34> col:34 __x 'long double'
| |-ParmVarDecl 0x7fffd82c7520 <col:39, col:48> col:48 __n 'long'
| `-NoThrowAttr 0x7fffd82c7860 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c79d0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:134:1 __scalblnl 'long double (long double, long)' extern
| |-ParmVarDecl 0x7fffd82c78c0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:290:34> col:34 __x 'long double'
| |-ParmVarDecl 0x7fffd82c7938 <col:39, col:48> col:48 __n 'long'
| `-NoThrowAttr 0x7fffd82c7a80 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c7b70 <<scratch space>:135:1> col:1 implicit nearbyintl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c7c10 <<invalid sloc>> <invalid sloc> 'long double'
| |-NoThrowAttr 0x7fffd82c7c78 <col:1> Implicit
| `-ConstAttr 0x7fffd82c7cc0 <col:1> Implicit
|-FunctionDecl 0x7fffd82c7cd0 prev 0x7fffd82c7b70 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:135:1 nearbyintl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c7ae0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:294:36> col:36 __x 'long double'
| |-NoThrowAttr 0x7fffd82c7d78 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
| `-ConstAttr 0x7fffd82c7dc0 <<scratch space>:135:1> Inherited Implicit
|-FunctionDecl 0x7fffd82c7e78 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:137:1 __nearbyintl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c7de8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:294:36> col:36 __x 'long double'
| `-NoThrowAttr 0x7fffd82c7f20 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c8010 <<scratch space>:138:1> col:1 implicit roundl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c80b0 <<invalid sloc>> <invalid sloc> 'long double'
| |-NoThrowAttr 0x7fffd82c8118 <col:1> Implicit
| `-ConstAttr 0x7fffd82c8160 <col:1> Implicit
|-FunctionDecl 0x7fffd82c8170 prev 0x7fffd82c8010 </usr/include/math.h:283:3, line:280:66> <scratch space>:138:1 roundl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c7f80 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:298:33> col:33 __x 'long double'
| |-ConstAttr 0x7fffd82c8218 <col:40>
| `-NoThrowAttr 0x7fffd82c8260 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c8350 </usr/include/math.h:283:3, line:281:79> <scratch space>:140:1 __roundl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c8288 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:298:33> col:33 __x 'long double'
| |-ConstAttr 0x7fffd82c83f8 <col:40>
| `-NoThrowAttr 0x7fffd82c8440 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c84f8 <<scratch space>:141:1> col:1 implicit truncl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c8598 <<invalid sloc>> <invalid sloc> 'long double'
| |-NoThrowAttr 0x7fffd82c8600 <col:1> Implicit
| `-ConstAttr 0x7fffd82c8648 <col:1> Implicit
|-FunctionDecl 0x7fffd82c8658 prev 0x7fffd82c84f8 </usr/include/math.h:283:3, line:280:66> <scratch space>:141:1 truncl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c8468 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:302:33> col:33 __x 'long double'
| |-ConstAttr 0x7fffd82c8700 <col:40>
| `-NoThrowAttr 0x7fffd82c8748 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c8800 </usr/include/math.h:283:3, line:281:79> <scratch space>:143:1 __truncl 'long double (long double)' extern
| |-ParmVarDecl 0x7fffd82c8770 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:302:33> col:33 __x 'long double'
| |-ConstAttr 0x7fffd82c88a8 <col:40>
| `-NoThrowAttr 0x7fffd82c88f0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c8af8 <<scratch space>:144:1> col:1 implicit remquol 'long double (long double, long double, int *)' extern
| |-ParmVarDecl 0x7fffd82c8b98 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x7fffd82c8bf8 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x7fffd82c8c58 <<invalid sloc>> <invalid sloc> 'int *'
| `-NoThrowAttr 0x7fffd82c8cd0 <col:1> Implicit
|-FunctionDecl 0x7fffd82c8d18 prev 0x7fffd82c8af8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:144:1 remquol 'long double (long double, long double, int *)' extern
| |-ParmVarDecl 0x7fffd82c8918 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:307:33> col:33 __x 'long double'
| |-ParmVarDecl 0x7fffd82c8990 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:307:48> col:48 __y 'long double'
| |-ParmVarDecl 0x7fffd82c8a08 <col:53, col:58> col:58 __quo 'int *'
| `-NoThrowAttr 0x7fffd82c8dd0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c8fc0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:146:1 __remquol 'long double (long double, long double, int *)' extern
| |-ParmVarDecl 0x7fffd82c8e30 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:307:33> col:33 __x 'long double'
| |-ParmVarDecl 0x7fffd82c8ea8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:307:48> col:48 __y 'long double'
| |-ParmVarDecl 0x7fffd82c8f20 <col:53, col:58> col:58 __quo 'int *'
| `-NoThrowAttr 0x7fffd82c9078 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c91a8 <<scratch space>:147:1> col:1 implicit lrintl 'long (long double)' extern
| |-ParmVarDecl 0x7fffd82c9248 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82c92b0 <col:1> Implicit
|-FunctionDecl 0x7fffd82c9330 prev 0x7fffd82c91a8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:147:1 lrintl 'long (long double)' extern
| |-ParmVarDecl 0x7fffd82c90d8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:314:41> col:41 __x 'long double'
| `-NoThrowAttr 0x7fffd82c93d8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c94c8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:149:1 __lrintl 'long (long double)' extern
| |-ParmVarDecl 0x7fffd82c9438 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:314:41> col:41 __x 'long double'
| `-NoThrowAttr 0x7fffd82c9570 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c9698 <<scratch space>:150:1> col:1 implicit llrintl 'long long (long double)' extern
| |-ParmVarDecl 0x7fffd82c9738 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82c97a0 <col:1> Implicit
|-FunctionDecl 0x7fffd82c97e8 prev 0x7fffd82c9698 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:150:1 llrintl 'long long (long double)' extern
| |-ParmVarDecl 0x7fffd82c95d0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:316:47> col:47 __x 'long double'
| `-NoThrowAttr 0x7fffd82c9890 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c9980 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:152:1 __llrintl 'long long (long double)' extern
| |-ParmVarDecl 0x7fffd82c98f0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:316:47> col:47 __x 'long double'
| `-NoThrowAttr 0x7fffd82c9a28 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c9b18 <<scratch space>:153:1> col:1 implicit lroundl 'long (long double)' extern
| |-ParmVarDecl 0x7fffd82c9bb8 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82c9c20 <col:1> Implicit
|-FunctionDecl 0x7fffd82c9c68 prev 0x7fffd82c9b18 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:153:1 lroundl 'long (long double)' extern
| |-ParmVarDecl 0x7fffd82c9a88 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:320:42> col:42 __x 'long double'
| `-NoThrowAttr 0x7fffd82c9d10 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c9e00 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:155:1 __lroundl 'long (long double)' extern
| |-ParmVarDecl 0x7fffd82c9d70 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:320:42> col:42 __x 'long double'
| `-NoThrowAttr 0x7fffd82c9ea8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82c9f98 <<scratch space>:156:1> col:1 implicit llroundl 'long long (long double)' extern
| |-ParmVarDecl 0x7fffd82ca038 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82ca0a0 <col:1> Implicit
|-FunctionDecl 0x7fffd82ca0e8 prev 0x7fffd82c9f98 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:156:1 llroundl 'long long (long double)' extern
| |-ParmVarDecl 0x7fffd82c9f08 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:322:48> col:48 __x 'long double'
| `-NoThrowAttr 0x7fffd82ca190 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82ca280 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:158:1 __llroundl 'long long (long double)' extern
| |-ParmVarDecl 0x7fffd82ca1f0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:322:48> col:48 __x 'long double'
| `-NoThrowAttr 0x7fffd82ca340 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82ca4b0 <<scratch space>:159:1> col:1 implicit fdiml 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82ca550 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x7fffd82ca5b0 <<invalid sloc>> <invalid sloc> 'long double'
| `-NoThrowAttr 0x7fffd82ca620 <col:1> Implicit
|-FunctionDecl 0x7fffd82ca668 prev 0x7fffd82ca4b0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:159:1 fdiml 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82ca3a0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:326:31> col:31 __x 'long double'
| |-ParmVarDecl 0x7fffd82ca418 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:326:46> col:46 __y 'long double'
| `-NoThrowAttr 0x7fffd82ca718 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82ca888 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:161:1 __fdiml 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82ca778 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:326:31> col:31 __x 'long double'
| |-ParmVarDecl 0x7fffd82ca7f0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:326:46> col:46 __y 'long double'
| `-NoThrowAttr 0x7fffd82ca938 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82caaa8 <<scratch space>:162:1> col:1 implicit fmaxl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82cab48 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x7fffd82caba8 <<invalid sloc>> <invalid sloc> 'long double'
| |-NoThrowAttr 0x7fffd82cac18 <col:1> Implicit
| `-ConstAttr 0x7fffd82cac60 <col:1> Implicit
|-FunctionDecl 0x7fffd82cac70 prev 0x7fffd82caaa8 </usr/include/math.h:283:3, line:280:66> <scratch space>:162:1 fmaxl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82ca998 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:329:32> col:32 __x 'long double'
| |-ParmVarDecl 0x7fffd82caa10 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:329:47> col:47 __y 'long double'
| |-ConstAttr 0x7fffd82cad20 <col:54>
| `-NoThrowAttr 0x7fffd82cad68 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82caea0 </usr/include/math.h:283:3, line:281:79> <scratch space>:164:1 __fmaxl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82cad90 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:329:32> col:32 __x 'long double'
| |-ParmVarDecl 0x7fffd82cae08 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:329:47> col:47 __y 'long double'
| |-ConstAttr 0x7fffd82caf50 <col:54>
| `-NoThrowAttr 0x7fffd82caf98 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82cb0d0 <<scratch space>:165:1> col:1 implicit fminl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82cb170 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x7fffd82cb1d0 <<invalid sloc>> <invalid sloc> 'long double'
| |-NoThrowAttr 0x7fffd82cb240 <col:1> Implicit
| `-ConstAttr 0x7fffd82cb288 <col:1> Implicit
|-FunctionDecl 0x7fffd82cb298 prev 0x7fffd82cb0d0 </usr/include/math.h:283:3, line:280:66> <scratch space>:165:1 fminl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82cafc0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:332:32> col:32 __x 'long double'
| |-ParmVarDecl 0x7fffd82cb038 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:332:47> col:47 __y 'long double'
| |-ConstAttr 0x7fffd82cb360 <col:54>
| `-NoThrowAttr 0x7fffd82cb3a8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82cb4e0 </usr/include/math.h:283:3, line:281:79> <scratch space>:167:1 __fminl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82cb3d0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:332:32> col:32 __x 'long double'
| |-ParmVarDecl 0x7fffd82cb448 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:332:47> col:47 __y 'long double'
| |-ConstAttr 0x7fffd82cb590 <col:54>
| `-NoThrowAttr 0x7fffd82cb5d8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82cb7d8 <<scratch space>:168:1> col:1 implicit fmal 'long double (long double, long double, long double)' extern
| |-ParmVarDecl 0x7fffd82cb878 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x7fffd82cb8d8 <<invalid sloc>> <invalid sloc> 'long double'
| |-ParmVarDecl 0x7fffd82cb938 <<invalid sloc>> <invalid sloc> 'long double'
| |-ConstAttr 0x7fffd82cb9b0 <col:1> Implicit
| `-NoThrowAttr 0x7fffd82cb9f8 <col:1> Implicit
|-FunctionDecl 0x7fffd82cba08 prev 0x7fffd82cb7d8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:168:1 fmal 'long double (long double, long double, long double)' extern
| |-ParmVarDecl 0x7fffd82cb600 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:335:30> col:30 __x 'long double'
| |-ParmVarDecl 0x7fffd82cb678 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:335:45> col:45 __y 'long double'
| |-ParmVarDecl 0x7fffd82cb6f0 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:335:60> col:60 __z 'long double'
| |-NoThrowAttr 0x7fffd82cbac0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
| `-ConstAttr 0x7fffd82cbb08 <<scratch space>:168:1> Inherited Implicit
|-FunctionDecl 0x7fffd82cbcc0 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:170:1 __fmal 'long double (long double, long double, long double)' extern
| |-ParmVarDecl 0x7fffd82cbb30 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:335:30> col:30 __x 'long double'
| |-ParmVarDecl 0x7fffd82cbba8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:335:45> col:45 __y 'long double'
| |-ParmVarDecl 0x7fffd82cbc20 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:335:60> col:60 __z 'long double'
| `-NoThrowAttr 0x7fffd82cbd78 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82cbee8 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:172:1 scalbl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82cbdd8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:396:32> col:32 __x 'long double'
| |-ParmVarDecl 0x7fffd82cbe50 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:396:47> col:47 __n 'long double'
| `-NoThrowAttr 0x7fffd82cbf98 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82cc108 </usr/include/math.h:283:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> <scratch space>:174:1 __scalbl 'long double (long double, long double)' extern
| |-ParmVarDecl 0x7fffd82cbff8 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:396:32> col:32 __x 'long double'
| |-ParmVarDecl 0x7fffd82cc070 </usr/include/math.h:344:22, /usr/include/x86_64-linux-gnu/bits/mathcalls.h:396:47> col:47 __n 'long double'
| `-NoThrowAttr 0x7fffd82cc1b8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-VarDecl 0x7fffd82cc218 </usr/include/math.h:489:1, col:12> col:12 signgam 'int' extern
|-EnumDecl 0x7fffd82cc278 <line:569:1, line:586:3> line:569:1
| |-EnumConstantDecl 0x7fffd82cd370 <line:571:5, line:572:17> line:571:5 FP_NAN 'int'
| | `-IntegerLiteral 0x7fffd82cc330 <line:572:17> 'int' 0
| |-EnumConstantDecl 0x7fffd82cd3d8 <line:574:5, line:575:22> line:574:5 FP_INFINITE 'int'
| | `-IntegerLiteral 0x7fffd82cd3b8 <line:575:22> 'int' 1
| |-EnumConstantDecl 0x7fffd82cd440 <line:577:5, line:578:18> line:577:5 FP_ZERO 'int'
| | `-IntegerLiteral 0x7fffd82cd420 <line:578:18> 'int' 2
| |-EnumConstantDecl 0x7fffd82cd4a8 <line:580:5, line:581:23> line:580:5 FP_SUBNORMAL 'int'
| | `-IntegerLiteral 0x7fffd82cd488 <line:581:23> 'int' 3
| `-EnumConstantDecl 0x7fffd82cd510 <line:583:5, line:584:20> line:583:5 FP_NORMAL 'int'
|   `-IntegerLiteral 0x7fffd82cd4f0 <line:584:20> 'int' 4
|-TypedefDecl 0x7fffd82cd570 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:62:1, col:23> col:23 referenced size_t 'unsigned long'
| `-BuiltinType 0x7fffd81de3d0 'unsigned long'
|-TypedefDecl 0x7fffd82cd5e0 <line:90:1, col:24> col:24 referenced wchar_t 'int'
| `-BuiltinType 0x7fffd81de310 'int'
|-EnumDecl 0x7fffd82cd638 </usr/include/x86_64-linux-gnu/bits/waitflags.h:52:9, line:57:1> line:52:9
| |-EnumConstantDecl 0x7fffd82cd6f0 <line:54:3> col:3 P_ALL 'int'
| |-EnumConstantDecl 0x7fffd82cd738 <line:55:3> col:3 P_PID 'int'
| `-EnumConstantDecl 0x7fffd82cd780 <line:56:3> col:3 P_PGID 'int'
|-TypedefDecl 0x7fffd82cd820 <line:52:1, line:57:3> col:3 idtype_t 'enum idtype_t':'idtype_t'
| `-ElaboratedType 0x7fffd82cd7d0 'enum idtype_t' sugar
|   `-EnumType 0x7fffd82cd6d0 'idtype_t'
|     `-Enum 0x7fffd82cd638 ''
|-RecordDecl 0x7fffd82cd890 </usr/include/stdlib.h:58:9, line:62:3> line:58:9 struct definition
| |-FieldDecl 0x7fffd82cd958 <line:60:5, col:9> col:9 quot 'int'
| `-FieldDecl 0x7fffd82cd9b8 <line:61:5, col:9> col:9 rem 'int'
|-TypedefDecl 0x7fffd82cda50 <line:58:1, line:62:5> col:5 referenced div_t 'struct div_t':'div_t'
| `-ElaboratedType 0x7fffd82cda00 'struct div_t' sugar
|   `-RecordType 0x7fffd82cd920 'div_t'
|     `-Record 0x7fffd82cd890 ''
|-RecordDecl 0x7fffd82cdac0 <line:66:9, line:70:3> line:66:9 struct definition
| |-FieldDecl 0x7fffd82cdb88 <line:68:5, col:14> col:14 quot 'long'
| `-FieldDecl 0x7fffd82cdbe8 <line:69:5, col:14> col:14 rem 'long'
|-TypedefDecl 0x7fffd82cdc80 <line:66:1, line:70:5> col:5 referenced ldiv_t 'struct ldiv_t':'ldiv_t'
| `-ElaboratedType 0x7fffd82cdc30 'struct ldiv_t' sugar
|   `-RecordType 0x7fffd82cdb50 'ldiv_t'
|     `-Record 0x7fffd82cdac0 ''
|-RecordDecl 0x7fffd82cdcf0 <line:76:23, line:80:3> line:76:23 struct definition
| |-FieldDecl 0x7fffd82cddb8 <line:78:5, col:19> col:19 quot 'long long'
| `-FieldDecl 0x7fffd82cde18 <line:79:5, col:19> col:19 rem 'long long'
|-TypedefDecl 0x7fffd82cdeb0 <line:76:15, line:80:5> col:5 referenced lldiv_t 'struct lldiv_t':'lldiv_t'
| `-ElaboratedType 0x7fffd82cde60 'struct lldiv_t' sugar
|   `-RecordType 0x7fffd82cdd80 'lldiv_t'
|     `-Record 0x7fffd82cdcf0 ''
|-FunctionDecl 0x7fffd82ce030 <line:97:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/stdlib.h:97:15 __ctype_get_mb_cur_max 'size_t (void)' extern
| `-NoThrowAttr 0x7fffd82ce0d0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82ce1e0 </usr/include/stdlib.h:101:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:101:15 atof 'double (const char *)' extern
| |-ParmVarDecl 0x7fffd82ce130 <col:21, col:33> col:33 __nptr 'const char *'
| |-NonNullAttr 0x7fffd82ce288 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:102:46> 0
| |-PureAttr 0x7fffd82ce2e0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:221:45>
| `-NoThrowAttr 0x7fffd82ce2f0 <line:55:35>
|-FunctionDecl 0x7fffd82da228 </usr/include/stdlib.h:104:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:104:12 atoi 'int (const char *)' extern
| |-ParmVarDecl 0x7fffd82da140 <col:18, col:30> col:30 __nptr 'const char *'
| |-NonNullAttr 0x7fffd82da2d0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:105:46> 0
| |-PureAttr 0x7fffd82da330 </usr/include/x86_64-linux-gnu/sys/cdefs.h:221:45>
| `-NoThrowAttr 0x7fffd82da340 <line:55:35>
|-FunctionDecl 0x7fffd82da458 </usr/include/stdlib.h:107:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:107:17 atol 'long (const char *)' extern
| |-ParmVarDecl 0x7fffd82da368 <col:23, col:35> col:35 __nptr 'const char *'
| |-NonNullAttr 0x7fffd82da500 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:108:46> 0
| |-PureAttr 0x7fffd82da560 </usr/include/x86_64-linux-gnu/sys/cdefs.h:221:45>
| `-NoThrowAttr 0x7fffd82da570 <line:55:35>
|-FunctionDecl 0x7fffd82da688 </usr/include/stdlib.h:112:15, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:112:36 atoll 'long long (const char *)' extern
| |-ParmVarDecl 0x7fffd82da598 <col:43, col:55> col:55 __nptr 'const char *'
| |-NonNullAttr 0x7fffd82da730 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:113:46> 0
| |-PureAttr 0x7fffd82da790 </usr/include/x86_64-linux-gnu/sys/cdefs.h:221:45>
| `-NoThrowAttr 0x7fffd82da7a0 <line:55:35>
|-FunctionDecl 0x7fffd82da9a8 </usr/include/stdlib.h:117:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:117:15 strtod 'double (const char *restrict, char **restrict)' extern
| |-ParmVarDecl 0x7fffd82da7c8 <col:23, col:46> col:46 __nptr 'const char *restrict'
| |-ParmVarDecl 0x7fffd82da870 <line:118:9, col:27> col:27 __endptr 'char **restrict'
| |-NonNullAttr 0x7fffd82daa58 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:119:27> 0
| `-NoThrowAttr 0x7fffd82daab0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82dac88 </usr/include/stdlib.h:123:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:123:14 strtof 'float (const char *restrict, char **restrict)' extern
| |-ParmVarDecl 0x7fffd82daad8 <col:22, col:45> col:45 __nptr 'const char *restrict'
| |-ParmVarDecl 0x7fffd82dab50 <line:124:8, col:26> col:26 __endptr 'char **restrict'
| |-NonNullAttr 0x7fffd82dad38 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:124:57> 0
| `-NoThrowAttr 0x7fffd82dad90 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82daf68 </usr/include/stdlib.h:126:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:126:20 strtold 'long double (const char *restrict, char **restrict)' extern
| |-ParmVarDecl 0x7fffd82dadb8 <col:29, col:52> col:52 __nptr 'const char *restrict'
| |-ParmVarDecl 0x7fffd82dae30 <line:127:8, col:26> col:26 __endptr 'char **restrict'
| |-NonNullAttr 0x7fffd82db018 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:128:27> 0
| `-NoThrowAttr 0x7fffd82db070 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82db328 </usr/include/stdlib.h:176:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:176:17 strtol 'long (const char *restrict, char **restrict, int)' extern
| |-ParmVarDecl 0x7fffd82db098 <col:25, col:48> col:48 __nptr 'const char *restrict'
| |-ParmVarDecl 0x7fffd82db150 <line:177:4, col:22> col:22 __endptr 'char **restrict'
| |-ParmVarDecl 0x7fffd82db1c8 <col:32, col:36> col:36 __base 'int'
| |-NonNullAttr 0x7fffd82db3e0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:178:27> 0
| `-NoThrowAttr 0x7fffd82db440 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82db6b8 </usr/include/stdlib.h:180:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:180:26 strtoul 'unsigned long (const char *restrict, char **restrict, int)' extern
| |-ParmVarDecl 0x7fffd82db468 <col:35, col:58> col:58 __nptr 'const char *restrict'
| |-ParmVarDecl 0x7fffd82db4e0 <line:181:7, col:25> col:25 __endptr 'char **restrict'
| |-ParmVarDecl 0x7fffd82db558 <col:35, col:39> col:39 __base 'int'
| |-NonNullAttr 0x7fffd82db770 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:182:27> 0
| `-NoThrowAttr 0x7fffd82db7d0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82dba48 </usr/include/stdlib.h:187:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:187:22 strtoq 'long long (const char *restrict, char **restrict, int)' extern
| |-ParmVarDecl 0x7fffd82db7f8 <col:30, col:53> col:53 __nptr 'const char *restrict'
| |-ParmVarDecl 0x7fffd82db870 <line:188:9, col:27> col:27 __endptr 'char **restrict'
| |-ParmVarDecl 0x7fffd82db8e8 <col:37, col:41> col:41 __base 'int'
| |-NonNullAttr 0x7fffd82dbb00 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:189:27> 0
| `-NoThrowAttr 0x7fffd82dbb60 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82dbdd8 </usr/include/stdlib.h:192:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:192:31 strtouq 'unsigned long long (const char *restrict, char **restrict, int)' extern
| |-ParmVarDecl 0x7fffd82dbb88 <col:40, col:63> col:63 __nptr 'const char *restrict'
| |-ParmVarDecl 0x7fffd82dbc00 <line:193:12, col:30> col:30 __endptr 'char **restrict'
| |-ParmVarDecl 0x7fffd82dbc78 <col:40, col:44> col:44 __base 'int'
| |-NonNullAttr 0x7fffd82dbe90 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:194:27> 0
| `-NoThrowAttr 0x7fffd82dbef0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82dc960 </usr/include/stdlib.h:200:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:200:22 strtoll 'long long (const char *restrict, char **restrict, int)' extern
| |-ParmVarDecl 0x7fffd82dbf18 <col:31, col:54> col:54 __nptr 'const char *restrict'
| |-ParmVarDecl 0x7fffd82dbf90 <line:201:10, col:28> col:28 __endptr 'char **restrict'
| |-ParmVarDecl 0x7fffd82dc008 <col:38, col:42> col:42 __base 'int'
| |-NonNullAttr 0x7fffd82dca18 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:202:27> 0
| `-NoThrowAttr 0x7fffd82dca70 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82dcc48 </usr/include/stdlib.h:205:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:205:31 strtoull 'unsigned long long (const char *restrict, char **restrict, int)' extern
| |-ParmVarDecl 0x7fffd82dca98 <col:41, col:64> col:64 __nptr 'const char *restrict'
| |-ParmVarDecl 0x7fffd82dcb10 <line:206:6, col:24> col:24 __endptr 'char **restrict'
| |-ParmVarDecl 0x7fffd82dcb88 <col:34, col:38> col:38 __base 'int'
| |-NonNullAttr 0x7fffd82dcd00 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:207:27> 0
| `-NoThrowAttr 0x7fffd82dcd60 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82dce58 </usr/include/stdlib.h:385:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/stdlib.h:385:14 l64a 'char *(long)' extern
| |-ParmVarDecl 0x7fffd82dcd88 <col:20, col:29> col:29 __n 'long'
| `-NoThrowAttr 0x7fffd82dcf00 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82dd010 </usr/include/stdlib.h:388:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:388:17 a64l 'long (const char *)' extern
| |-ParmVarDecl 0x7fffd82dcf60 <col:23, col:35> col:35 __s 'const char *'
| |-NonNullAttr 0x7fffd82dd0b8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:389:46> 0
| |-PureAttr 0x7fffd82dd110 </usr/include/x86_64-linux-gnu/sys/cdefs.h:221:45>
| `-NoThrowAttr 0x7fffd82dd120 <line:55:35>
|-TypedefDecl 0x7fffd82dd160 </usr/include/x86_64-linux-gnu/sys/types.h:33:1, col:18> col:18 u_char '__u_char':'unsigned char'
| `-TypedefType 0x7fffd82dd130 '__u_char' sugar
|   |-Typedef 0x7fffd8238490 '__u_char'
|   `-BuiltinType 0x7fffd81de370 'unsigned char'
|-TypedefDecl 0x7fffd82dd1f0 <line:34:1, col:19> col:19 u_short '__u_short':'unsigned short'
| `-TypedefType 0x7fffd82dd1c0 '__u_short' sugar
|   |-Typedef 0x7fffd8238500 '__u_short'
|   `-BuiltinType 0x7fffd81de390 'unsigned short'
|-TypedefDecl 0x7fffd82dd280 <line:35:1, col:17> col:17 u_int '__u_int':'unsigned int'
| `-TypedefType 0x7fffd82dd250 '__u_int' sugar
|   |-Typedef 0x7fffd8238570 '__u_int'
|   `-BuiltinType 0x7fffd81de3b0 'unsigned int'
|-TypedefDecl 0x7fffd82dd310 <line:36:1, col:18> col:18 u_long '__u_long':'unsigned long'
| `-TypedefType 0x7fffd82dd2e0 '__u_long' sugar
|   |-Typedef 0x7fffd82385e0 '__u_long'
|   `-BuiltinType 0x7fffd81de3d0 'unsigned long'
|-TypedefDecl 0x7fffd82dd3a0 <line:37:1, col:18> col:18 quad_t '__quad_t':'long'
| `-TypedefType 0x7fffd82dd370 '__quad_t' sugar
|   |-Typedef 0x7fffd82389d0 '__quad_t'
|   `-BuiltinType 0x7fffd81de330 'long'
|-TypedefDecl 0x7fffd82dd430 <line:38:1, col:20> col:20 u_quad_t '__u_quad_t':'unsigned long'
| `-TypedefType 0x7fffd82dd400 '__u_quad_t' sugar
|   |-Typedef 0x7fffd8238a40 '__u_quad_t'
|   `-BuiltinType 0x7fffd81de3d0 'unsigned long'
|-TypedefDecl 0x7fffd82dd4c0 <line:39:1, col:18> col:18 fsid_t '__fsid_t':'__fsid_t'
| `-TypedefType 0x7fffd82dd490 '__fsid_t' sugar
|   |-Typedef 0x7fffd825c9c0 '__fsid_t'
|   `-ElaboratedType 0x7fffd825c970 'struct __fsid_t' sugar
|     `-RecordType 0x7fffd825c880 '__fsid_t'
|       `-Record 0x7fffd825c7f8 ''
|-TypedefDecl 0x7fffd82dd550 <line:44:1, col:18> col:18 loff_t '__loff_t':'long'
| `-TypedefType 0x7fffd82dd520 '__loff_t' sugar
|   |-Typedef 0x7fffd825d400 '__loff_t'
|   `-TypedefType 0x7fffd825d3d0 '__off64_t' sugar
|     |-Typedef 0x7fffd825c730 '__off64_t'
|     `-BuiltinType 0x7fffd81de330 'long'
|-TypedefDecl 0x7fffd82dd5e0 <line:48:1, col:17> col:17 ino_t '__ino_t':'unsigned long'
| `-TypedefType 0x7fffd82dd5b0 '__ino_t' sugar
|   |-Typedef 0x7fffd8238ce0 '__ino_t'
|   `-BuiltinType 0x7fffd81de3d0 'unsigned long'
|-TypedefDecl 0x7fffd82dd670 <line:60:1, col:17> col:17 dev_t '__dev_t':'unsigned long'
| `-TypedefType 0x7fffd82dd640 '__dev_t' sugar
|   |-Typedef 0x7fffd8238b90 '__dev_t'
|   `-BuiltinType 0x7fffd81de3d0 'unsigned long'
|-TypedefDecl 0x7fffd82dd700 <line:65:1, col:17> col:17 gid_t '__gid_t':'unsigned int'
| `-TypedefType 0x7fffd82dd6d0 '__gid_t' sugar
|   |-Typedef 0x7fffd8238c70 '__gid_t'
|   `-BuiltinType 0x7fffd81de3b0 'unsigned int'
|-TypedefDecl 0x7fffd82dd790 <line:70:1, col:18> col:18 mode_t '__mode_t':'unsigned int'
| `-TypedefType 0x7fffd82dd760 '__mode_t' sugar
|   |-Typedef 0x7fffd825c5e0 '__mode_t'
|   `-BuiltinType 0x7fffd81de3b0 'unsigned int'
|-TypedefDecl 0x7fffd82dd820 <line:75:1, col:19> col:19 nlink_t '__nlink_t':'unsigned long'
| `-TypedefType 0x7fffd82dd7f0 '__nlink_t' sugar
|   |-Typedef 0x7fffd825c650 '__nlink_t'
|   `-BuiltinType 0x7fffd81de3d0 'unsigned long'
|-TypedefDecl 0x7fffd82dd8b0 <line:80:1, col:17> col:17 uid_t '__uid_t':'unsigned int'
| `-TypedefType 0x7fffd82dd880 '__uid_t' sugar
|   |-Typedef 0x7fffd8238c00 '__uid_t'
|   `-BuiltinType 0x7fffd81de3b0 'unsigned int'
|-TypedefDecl 0x7fffd82e07b0 <line:86:1, col:17> col:17 off_t '__off_t':'long'
| `-TypedefType 0x7fffd82dd910 '__off_t' sugar
|   |-Typedef 0x7fffd825c6c0 '__off_t'
|   `-BuiltinType 0x7fffd81de330 'long'
|-TypedefDecl 0x7fffd82e0840 <line:98:1, col:17> col:17 pid_t '__pid_t':'int'
| `-TypedefType 0x7fffd82e0810 '__pid_t' sugar
|   |-Typedef 0x7fffd825c7a0 '__pid_t'
|   `-BuiltinType 0x7fffd81de310 'int'
|-TypedefDecl 0x7fffd82e08d0 <line:104:1, col:16> col:16 id_t '__id_t':'unsigned int'
| `-TypedefType 0x7fffd82e08a0 '__id_t' sugar
|   |-Typedef 0x7fffd825cb98 '__id_t'
|   `-BuiltinType 0x7fffd81de3b0 'unsigned int'
|-TypedefDecl 0x7fffd82e0960 <line:109:1, col:19> col:19 ssize_t '__ssize_t':'long'
| `-TypedefType 0x7fffd82e0930 '__ssize_t' sugar
|   |-Typedef 0x7fffd825d298 '__ssize_t'
|   `-BuiltinType 0x7fffd81de330 'long'
|-TypedefDecl 0x7fffd82e09f0 <line:115:1, col:19> col:19 daddr_t '__daddr_t':'int'
| `-TypedefType 0x7fffd82e09c0 '__daddr_t' sugar
|   |-Typedef 0x7fffd825cd58 '__daddr_t'
|   `-BuiltinType 0x7fffd81de310 'int'
|-TypedefDecl 0x7fffd82e0a80 <line:116:1, col:19> col:19 caddr_t '__caddr_t':'char *'
| `-TypedefType 0x7fffd82e0a50 '__caddr_t' sugar
|   |-Typedef 0x7fffd825d470 '__caddr_t'
|   `-PointerType 0x7fffd81deb30 'char *'
|     `-BuiltinType 0x7fffd81de2b0 'char'
|-TypedefDecl 0x7fffd82e0b10 <line:122:1, col:17> col:17 key_t '__key_t':'int'
| `-TypedefType 0x7fffd82e0ae0 '__key_t' sugar
|   |-Typedef 0x7fffd825cdc8 '__key_t'
|   `-BuiltinType 0x7fffd81de310 'int'
|-TypedefDecl 0x7fffd82e0ba0 </usr/include/x86_64-linux-gnu/bits/types/clock_t.h:7:1, col:19> col:19 clock_t '__clock_t':'long'
| `-TypedefType 0x7fffd82e0b70 '__clock_t' sugar
|   |-Typedef 0x7fffd825ca48 '__clock_t'
|   `-BuiltinType 0x7fffd81de330 'long'
|-TypedefDecl 0x7fffd82e0c30 </usr/include/x86_64-linux-gnu/bits/types/clockid_t.h:7:1, col:21> col:21 clockid_t '__clockid_t':'int'
| `-TypedefType 0x7fffd82e0c00 '__clockid_t' sugar
|   |-Typedef 0x7fffd825ce38 '__clockid_t'
|   `-BuiltinType 0x7fffd81de310 'int'
|-TypedefDecl 0x7fffd82e0cc0 </usr/include/x86_64-linux-gnu/bits/types/time_t.h:7:1, col:18> col:18 time_t '__time_t':'long'
| `-TypedefType 0x7fffd82e0c90 '__time_t' sugar
|   |-Typedef 0x7fffd825cc08 '__time_t'
|   `-BuiltinType 0x7fffd81de330 'long'
|-TypedefDecl 0x7fffd82e0d50 </usr/include/x86_64-linux-gnu/bits/types/timer_t.h:7:1, col:19> col:19 timer_t '__timer_t':'void *'
| `-TypedefType 0x7fffd82e0d20 '__timer_t' sugar
|   |-Typedef 0x7fffd825cea8 '__timer_t'
|   `-PointerType 0x7fffd81de710 'void *'
|     `-BuiltinType 0x7fffd81de270 'void'
|-TypedefDecl 0x7fffd82e0dc0 </usr/include/x86_64-linux-gnu/sys/types.h:149:1, col:27> col:27 ulong 'unsigned long'
| `-BuiltinType 0x7fffd81de3d0 'unsigned long'
|-TypedefDecl 0x7fffd82e0e30 <line:150:1, col:28> col:28 ushort 'unsigned short'
| `-BuiltinType 0x7fffd81de390 'unsigned short'
|-TypedefDecl 0x7fffd82e0ea0 <line:151:1, col:22> col:22 uint 'unsigned int'
| `-BuiltinType 0x7fffd81de3b0 'unsigned int'
|-TypedefDecl 0x7fffd82e0f30 </usr/include/x86_64-linux-gnu/bits/stdint-intn.h:24:1, col:18> col:18 int8_t '__int8_t':'signed char'
| `-TypedefType 0x7fffd82e0f00 '__int8_t' sugar
|   |-Typedef 0x7fffd8238650 '__int8_t'
|   `-BuiltinType 0x7fffd81de2d0 'signed char'
|-TypedefDecl 0x7fffd82e0fc0 <line:25:1, col:19> col:19 int16_t '__int16_t':'short'
| `-TypedefType 0x7fffd82e0f90 '__int16_t' sugar
|   |-Typedef 0x7fffd8238730 '__int16_t'
|   `-BuiltinType 0x7fffd81de2f0 'short'
|-TypedefDecl 0x7fffd82e1050 <line:26:1, col:19> col:19 referenced int32_t '__int32_t':'int'
| `-TypedefType 0x7fffd82e1020 '__int32_t' sugar
|   |-Typedef 0x7fffd8238810 '__int32_t'
|   `-BuiltinType 0x7fffd81de310 'int'
|-TypedefDecl 0x7fffd82e10e0 <line:27:1, col:19> col:19 int64_t '__int64_t':'long'
| `-TypedefType 0x7fffd82e10b0 '__int64_t' sugar
|   |-Typedef 0x7fffd82388f0 '__int64_t'
|   `-BuiltinType 0x7fffd81de330 'long'
|-TypedefDecl 0x7fffd82e1160 </usr/include/x86_64-linux-gnu/sys/types.h:176:3, <scratch space>:202:1> col:1 u_int8_t 'unsigned char'
| |-BuiltinType 0x7fffd81de370 'unsigned char'
| `-ModeAttr 0x7fffd82e11c8 </usr/include/x86_64-linux-gnu/sys/types.h:176:53, col:67> __QI__
|-TypedefDecl 0x7fffd82e1240 <col:3, <scratch space>:204:1> col:1 u_int16_t 'unsigned short'
| |-BuiltinType 0x7fffd81de390 'unsigned short'
| `-ModeAttr 0x7fffd82e12a8 </usr/include/x86_64-linux-gnu/sys/types.h:176:53, col:67> __HI__
|-TypedefDecl 0x7fffd82e1320 <col:3, <scratch space>:206:1> col:1 u_int32_t 'unsigned int'
| |-BuiltinType 0x7fffd81de3b0 'unsigned int'
| `-ModeAttr 0x7fffd82e1388 </usr/include/x86_64-linux-gnu/sys/types.h:176:53, col:67> __SI__
|-TypedefDecl 0x7fffd82e1400 <col:3, <scratch space>:208:1> col:1 u_int64_t 'unsigned long'
| |-BuiltinType 0x7fffd81de3d0 'unsigned long'
| `-ModeAttr 0x7fffd82e1468 </usr/include/x86_64-linux-gnu/sys/types.h:176:53, col:67> __DI__
|-TypedefDecl 0x7fffd82e14e0 <line:183:1, col:13> col:13 register_t 'long'
| |-BuiltinType 0x7fffd81de330 'long'
| `-ModeAttr 0x7fffd82e1548 <col:40, col:58> __word__
|-FunctionDecl 0x7fffd82e16d0 </usr/include/x86_64-linux-gnu/bits/uintn-identity.h:32:1, line:36:1> line:33:1 __uint16_identity '__uint16_t (__uint16_t)' static inline
| |-ParmVarDecl 0x7fffd82e15d0 <col:20, col:31> col:31 used __x '__uint16_t':'unsigned short'
| `-CompoundStmt 0x7fffd82f1d40 <line:34:1, line:36:1>
|   `-ReturnStmt 0x7fffd82f1d28 <line:35:3, col:10>
|     `-ImplicitCastExpr 0x7fffd82f1d10 <col:10> '__uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd82e1778 <col:10> '__uint16_t':'unsigned short' lvalue ParmVar 0x7fffd82e15d0 '__x' '__uint16_t':'unsigned short'
|-FunctionDecl 0x7fffd82f1e90 <line:38:1, line:42:1> line:39:1 __uint32_identity '__uint32_t (__uint32_t)' static inline
| |-ParmVarDecl 0x7fffd82f1d90 <col:20, col:31> col:31 used __x '__uint32_t':'unsigned int'
| `-CompoundStmt 0x7fffd82f1f90 <line:40:1, line:42:1>
|   `-ReturnStmt 0x7fffd82f1f78 <line:41:3, col:10>
|     `-ImplicitCastExpr 0x7fffd82f1f60 <col:10> '__uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd82f1f38 <col:10> '__uint32_t':'unsigned int' lvalue ParmVar 0x7fffd82f1d90 '__x' '__uint32_t':'unsigned int'
|-FunctionDecl 0x7fffd82f20e0 <line:44:1, line:48:1> line:45:1 __uint64_identity '__uint64_t (__uint64_t)' static inline
| |-ParmVarDecl 0x7fffd82f1fe0 <col:20, col:31> col:31 used __x '__uint64_t':'unsigned long'
| `-CompoundStmt 0x7fffd82f21e0 <line:46:1, line:48:1>
|   `-ReturnStmt 0x7fffd82f21c8 <line:47:3, col:10>
|     `-ImplicitCastExpr 0x7fffd82f21b0 <col:10> '__uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd82f2188 <col:10> '__uint64_t':'unsigned long' lvalue ParmVar 0x7fffd82f1fe0 '__x' '__uint64_t':'unsigned long'
|-RecordDecl 0x7fffd82f21f8 </usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h:5:9, line:8:1> line:5:9 struct definition
| `-FieldDecl 0x7fffd82f2440 <line:7:3, col:41> col:21 __val 'unsigned long [16]'
|-TypedefDecl 0x7fffd82f24e0 <line:5:1, line:8:3> col:3 referenced __sigset_t 'struct __sigset_t':'__sigset_t'
| `-ElaboratedType 0x7fffd82f2490 'struct __sigset_t' sugar
|   `-RecordType 0x7fffd82f2280 '__sigset_t'
|     `-Record 0x7fffd82f21f8 ''
|-TypedefDecl 0x7fffd82f2580 </usr/include/x86_64-linux-gnu/bits/types/sigset_t.h:7:1, col:20> col:20 sigset_t '__sigset_t':'__sigset_t'
| `-TypedefType 0x7fffd82f2550 '__sigset_t' sugar
|   |-Typedef 0x7fffd82f24e0 '__sigset_t'
|   `-ElaboratedType 0x7fffd82f2490 'struct __sigset_t' sugar
|     `-RecordType 0x7fffd82f2280 '__sigset_t'
|       `-Record 0x7fffd82f21f8 ''
|-RecordDecl 0x7fffd82f25d8 </usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h:8:1, line:12:1> line:8:8 struct timeval definition
| |-FieldDecl 0x7fffd82f2690 <line:10:3, col:12> col:12 tv_sec '__time_t':'long'
| `-FieldDecl 0x7fffd82f2710 <line:11:3, col:17> col:17 tv_usec '__suseconds_t':'long'
|-RecordDecl 0x7fffd82f2758 </usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h:8:1, line:12:1> line:8:8 struct timespec definition
| |-FieldDecl 0x7fffd82f2810 <line:10:3, col:12> col:12 tv_sec '__time_t':'long'
| `-FieldDecl 0x7fffd82f2890 <line:11:3, col:21> col:21 tv_nsec '__syscall_slong_t':'long'
|-TypedefDecl 0x7fffd82f28e8 </usr/include/x86_64-linux-gnu/sys/select.h:43:1, col:23> col:23 suseconds_t '__suseconds_t':'long'
| `-TypedefType 0x7fffd82f26e0 '__suseconds_t' sugar
|   |-Typedef 0x7fffd825cce8 '__suseconds_t'
|   `-BuiltinType 0x7fffd81de330 'long'
|-TypedefDecl 0x7fffd82f2958 <line:49:1, col:18> col:18 referenced __fd_mask 'long'
| `-BuiltinType 0x7fffd81de330 'long'
|-RecordDecl 0x7fffd82f29b0 <line:59:9, line:70:3> line:59:9 struct definition
| `-FieldDecl 0x7fffd82f2c38 <line:67:5, col:50> col:15 __fds_bits '__fd_mask [16]'
|-TypedefDecl 0x7fffd82fa6b0 <line:59:1, line:70:5> col:5 referenced fd_set 'struct fd_set':'fd_set'
| `-ElaboratedType 0x7fffd82f2c80 'struct fd_set' sugar
|   `-RecordType 0x7fffd82f2a40 'fd_set'
|     `-Record 0x7fffd82f29b0 ''
|-TypedefDecl 0x7fffd82fa730 <line:77:1, col:19> col:19 fd_mask '__fd_mask':'long'
| `-TypedefType 0x7fffd82f2a60 '__fd_mask' sugar
|   |-Typedef 0x7fffd82f2958 '__fd_mask'
|   `-BuiltinType 0x7fffd81de330 'long'
|-FunctionDecl 0x7fffd82fabe8 <line:101:1, line:104:42> line:101:12 select 'int (int, fd_set *restrict, fd_set *restrict, fd_set *restrict, struct timeval *restrict)' extern
| |-ParmVarDecl 0x7fffd82fa7a0 <col:20, col:24> col:24 __nfds 'int'
| |-ParmVarDecl 0x7fffd82fa888 <col:32, col:51> col:51 __readfds 'fd_set *restrict'
| |-ParmVarDecl 0x7fffd82fa8f8 <line:102:6, col:25> col:25 __writefds 'fd_set *restrict'
| |-ParmVarDecl 0x7fffd82fa968 <line:103:6, col:25> col:25 __exceptfds 'fd_set *restrict'
| `-ParmVarDecl 0x7fffd82faa80 <line:104:6, col:33> col:33 __timeout 'struct timeval *restrict'
|-FunctionDecl 0x7fffd82fb178 <line:113:1, line:117:45> line:113:12 pselect 'int (int, fd_set *restrict, fd_set *restrict, fd_set *restrict, const struct timespec *restrict, const __sigset_t *restrict)' extern
| |-ParmVarDecl 0x7fffd82facc8 <col:21, col:25> col:25 __nfds 'int'
| |-ParmVarDecl 0x7fffd82fad38 <col:33, col:52> col:52 __readfds 'fd_set *restrict'
| |-ParmVarDecl 0x7fffd82fada8 <line:114:7, col:26> col:26 __writefds 'fd_set *restrict'
| |-ParmVarDecl 0x7fffd82fae18 <line:115:7, col:26> col:26 __exceptfds 'fd_set *restrict'
| |-ParmVarDecl 0x7fffd82faf30 <line:116:7, col:41> col:41 __timeout 'const struct timespec *restrict'
| `-ParmVarDecl 0x7fffd82faff8 <line:117:7, col:36> col:36 __sigmask 'const __sigset_t *restrict'
|-FunctionDecl 0x7fffd82fb368 </usr/include/x86_64-linux-gnu/sys/sysmacros.h:65:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:228:56> <scratch space>:209:1 gnu_dev_major 'unsigned int (__dev_t)' extern
| |-ParmVarDecl 0x7fffd82fb258 </usr/include/x86_64-linux-gnu/bits/sysmacros.h:37:36, col:44> col:44 __dev '__dev_t':'unsigned long'
| |-ConstAttr 0x7fffd82fb410 </usr/include/x86_64-linux-gnu/sys/cdefs.h:228:46>
| `-NoThrowAttr 0x7fffd82fb458 <line:55:35>
|-FunctionDecl 0x7fffd82fb508 </usr/include/x86_64-linux-gnu/sys/sysmacros.h:65:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:228:56> <scratch space>:210:1 gnu_dev_minor 'unsigned int (__dev_t)' extern
| |-ParmVarDecl 0x7fffd82fb478 </usr/include/x86_64-linux-gnu/bits/sysmacros.h:49:36, col:44> col:44 __dev '__dev_t':'unsigned long'
| |-ConstAttr 0x7fffd82fb5b0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:228:46>
| `-NoThrowAttr 0x7fffd82fb5f8 <line:55:35>
|-FunctionDecl 0x7fffd8302990 </usr/include/x86_64-linux-gnu/sys/sysmacros.h:65:3, /usr/include/x86_64-linux-gnu/sys/cdefs.h:228:56> <scratch space>:211:1 gnu_dev_makedev '__dev_t (unsigned int, unsigned int)' extern
| |-ParmVarDecl 0x7fffd82fb620 </usr/include/x86_64-linux-gnu/bits/sysmacros.h:61:33, col:46> col:46 __major 'unsigned int'
| |-ParmVarDecl 0x7fffd8302880 <col:55, col:68> col:68 __minor 'unsigned int'
| |-ConstAttr 0x7fffd8302a40 </usr/include/x86_64-linux-gnu/sys/cdefs.h:228:46>
| `-NoThrowAttr 0x7fffd8302a88 <line:55:35>
|-TypedefDecl 0x7fffd8302ad0 </usr/include/x86_64-linux-gnu/sys/types.h:212:1, col:21> col:21 blksize_t '__blksize_t':'long'
| `-TypedefType 0x7fffd8302aa0 '__blksize_t' sugar
|   |-Typedef 0x7fffd825cf18 '__blksize_t'
|   `-BuiltinType 0x7fffd81de330 'long'
|-TypedefDecl 0x7fffd8302b60 <line:219:1, col:20> col:20 blkcnt_t '__blkcnt_t':'long'
| `-TypedefType 0x7fffd8302b30 '__blkcnt_t' sugar
|   |-Typedef 0x7fffd825cf88 '__blkcnt_t'
|   `-BuiltinType 0x7fffd81de330 'long'
|-TypedefDecl 0x7fffd8302bf0 <line:223:1, col:22> col:22 fsblkcnt_t '__fsblkcnt_t':'unsigned long'
| `-TypedefType 0x7fffd8302bc0 '__fsblkcnt_t' sugar
|   |-Typedef 0x7fffd825d068 '__fsblkcnt_t'
|   `-BuiltinType 0x7fffd81de3d0 'unsigned long'
|-TypedefDecl 0x7fffd8302c80 <line:227:1, col:22> col:22 fsfilcnt_t '__fsfilcnt_t':'unsigned long'
| `-TypedefType 0x7fffd8302c50 '__fsfilcnt_t' sugar
|   |-Typedef 0x7fffd825d148 '__fsfilcnt_t'
|   `-BuiltinType 0x7fffd81de3d0 'unsigned long'
|-RecordDecl 0x7fffd8302cd8 </usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h:65:1, line:99:1> line:65:8 struct __pthread_rwlock_arch_t definition
| |-FieldDecl 0x7fffd8302d98 <line:67:3, col:16> col:16 __readers 'unsigned int'
| |-FieldDecl 0x7fffd8302df8 <line:68:3, col:16> col:16 __writers 'unsigned int'
| |-FieldDecl 0x7fffd8302e58 <line:69:3, col:16> col:16 __wrphase_futex 'unsigned int'
| |-FieldDecl 0x7fffd8302eb8 <line:70:3, col:16> col:16 __writers_futex 'unsigned int'
| |-FieldDecl 0x7fffd8302f18 <line:71:3, col:16> col:16 __pad3 'unsigned int'
| |-FieldDecl 0x7fffd8302f78 <line:72:3, col:16> col:16 __pad4 'unsigned int'
| |-FieldDecl 0x7fffd8302fd8 <line:74:3, col:7> col:7 __cur_writer 'int'
| |-FieldDecl 0x7fffd8303038 <line:75:3, col:7> col:7 __shared 'int'
| |-FieldDecl 0x7fffd8303098 <line:76:3, col:15> col:15 __rwelision 'signed char'
| |-FieldDecl 0x7fffd8303160 <line:81:3, col:25> col:17 __pad1 'unsigned char [7]'
| |-FieldDecl 0x7fffd83031c0 <line:84:3, col:21> col:21 __pad2 'unsigned long'
| `-FieldDecl 0x7fffd8303220 <line:87:3, col:16> col:16 __flags 'unsigned int'
|-RecordDecl 0x7fffd8303268 </usr/include/x86_64-linux-gnu/bits/thread-shared-types.h:82:9, line:86:1> line:82:16 struct __pthread_internal_list definition
| |-FieldDecl 0x7fffd83033c0 <line:84:3, col:35> col:35 __prev 'struct __pthread_internal_list *'
| `-FieldDecl 0x7fffd8303430 <line:85:3, col:35> col:35 __next 'struct __pthread_internal_list *'
|-TypedefDecl 0x7fffd8303498 <line:82:1, line:86:3> col:3 referenced __pthread_list_t 'struct __pthread_internal_list':'struct __pthread_internal_list'
| `-ElaboratedType 0x7fffd8303310 'struct __pthread_internal_list' sugar
|   `-RecordType 0x7fffd83032f0 'struct __pthread_internal_list'
|     `-Record 0x7fffd8303268 '__pthread_internal_list'
|-RecordDecl 0x7fffd8303508 <line:118:1, line:146:1> line:118:8 struct __pthread_mutex_s definition
| |-FieldDecl 0x7fffd83035c8 <line:120:3, col:7> col:7 __lock 'int'
| |-FieldDecl 0x7fffd8303628 <line:121:3, col:16> col:16 __count 'unsigned int'
| |-FieldDecl 0x7fffd8303688 <line:122:3, col:7> col:7 __owner 'int'
| |-FieldDecl 0x7fffd83036e8 <line:124:3, col:16> col:16 __nusers 'unsigned int'
| |-FieldDecl 0x7fffd8303748 <line:128:3, col:7> col:7 __kind 'int'
| |-FieldDecl 0x7fffd83037a8 <line:98:3, col:9> col:9 __spins 'short'
| |-FieldDecl 0x7fffd8303808 <line:99:3, col:9> col:9 __elision 'short'
| `-FieldDecl 0x7fffd830b9e0 <line:135:3, col:20> col:20 __list '__pthread_list_t':'struct __pthread_internal_list'
|-RecordDecl 0x7fffd830ba28 <line:151:1, line:176:1> line:151:8 struct __pthread_cond_s definition
| |-RecordDecl 0x7fffd830bad0 <line:153:17, line:161:3> line:153:17 union definition
| | |-FieldDecl 0x7fffd830bb98 <line:155:19, col:42> col:42 __wseq 'unsigned long long'
| | |-RecordDecl 0x7fffd830bbe0 <line:156:5, line:160:5> line:156:5 struct definition
| | | |-FieldDecl 0x7fffd830bca8 <line:158:7, col:20> col:20 __low 'unsigned int'
| | | `-FieldDecl 0x7fffd830bd08 <line:159:7, col:20> col:20 __high 'unsigned int'
| | `-FieldDecl 0x7fffd830bda0 <line:156:5, line:160:7> col:7 __wseq32 'struct (anonymous struct at /usr/include/x86_64-linux-gnu/bits/thread-shared-types.h:156:5)':'struct __pthread_cond_s::(anonymous at /usr/include/x86_64-linux-gnu/bits/thread-shared-types.h:156:5)'
| |-FieldDecl 0x7fffd830be40 <line:153:17> col:17 implicit 'union __pthread_cond_s::(anonymous at /usr/include/x86_64-linux-gnu/bits/thread-shared-types.h:153:17)'
| |-IndirectFieldDecl 0x7fffd830be98 <line:155:42> col:42 implicit __wseq 'unsigned long long'
| | |-Field 0x7fffd830be40 '' 'union __pthread_cond_s::(anonymous at /usr/include/x86_64-linux-gnu/bits/thread-shared-types.h:153:17)'
| | `-Field 0x7fffd830bb98 '__wseq' 'unsigned long long'
| |-IndirectFieldDecl 0x7fffd830bee8 <line:160:7> col:7 implicit __wseq32 'struct (anonymous struct at /usr/include/x86_64-linux-gnu/bits/thread-shared-types.h:156:5)':'struct __pthread_cond_s::(anonymous at /usr/include/x86_64-linux-gnu/bits/thread-shared-types.h:156:5)'
| | |-Field 0x7fffd830be40 '' 'union __pthread_cond_s::(anonymous at /usr/include/x86_64-linux-gnu/bits/thread-shared-types.h:153:17)'
| | `-Field 0x7fffd830bda0 '__wseq32' 'struct (anonymous struct at /usr/include/x86_64-linux-gnu/bits/thread-shared-types.h:156:5)':'struct __pthread_cond_s::(anonymous at /usr/include/x86_64-linux-gnu/bits/thread-shared-types.h:156:5)'
| |-RecordDecl 0x7fffd830bf28 <line:162:17, line:170:3> line:162:17 union definition
| | |-FieldDecl 0x7fffd830bfe8 <line:164:19, col:42> col:42 __g1_start 'unsigned long long'
| | |-RecordDecl 0x7fffd830c030 <line:165:5, line:169:5> line:165:5 struct definition
| | | |-FieldDecl 0x7fffd830c0f8 <line:167:7, col:20> col:20 __low 'unsigned int'
| | | `-FieldDecl 0x7fffd830c158 <line:168:7, col:20> col:20 __high 'unsigned int'
| | `-FieldDecl 0x7fffd830c1f0 <line:165:5, line:169:7> col:7 __g1_start32 'struct (anonymous struct at /usr/include/x86_64-linux-gnu/bits/thread-shared-types.h:165:5)':'struct __pthread_cond_s::(anonymous at /usr/include/x86_64-linux-gnu/bits/thread-shared-types.h:165:5)'
| |-FieldDecl 0x7fffd830c290 <line:162:17> col:17 implicit 'union __pthread_cond_s::(anonymous at /usr/include/x86_64-linux-gnu/bits/thread-shared-types.h:162:17)'
| |-IndirectFieldDecl 0x7fffd830c2e8 <line:164:42> col:42 implicit __g1_start 'unsigned long long'
| | |-Field 0x7fffd830c290 '' 'union __pthread_cond_s::(anonymous at /usr/include/x86_64-linux-gnu/bits/thread-shared-types.h:162:17)'
| | `-Field 0x7fffd830bfe8 '__g1_start' 'unsigned long long'
| |-IndirectFieldDecl 0x7fffd830c338 <line:169:7> col:7 implicit __g1_start32 'struct (anonymous struct at /usr/include/x86_64-linux-gnu/bits/thread-shared-types.h:165:5)':'struct __pthread_cond_s::(anonymous at /usr/include/x86_64-linux-gnu/bits/thread-shared-types.h:165:5)'
| | |-Field 0x7fffd830c290 '' 'union __pthread_cond_s::(anonymous at /usr/include/x86_64-linux-gnu/bits/thread-shared-types.h:162:17)'
| | `-Field 0x7fffd830c1f0 '__g1_start32' 'struct (anonymous struct at /usr/include/x86_64-linux-gnu/bits/thread-shared-types.h:165:5)':'struct __pthread_cond_s::(anonymous at /usr/include/x86_64-linux-gnu/bits/thread-shared-types.h:165:5)'
| |-FieldDecl 0x7fffd830c400 <line:171:3, col:26> col:16 __g_refs 'unsigned int [2]'
| |-FieldDecl 0x7fffd830c490 <line:172:3, col:26> col:16 __g_size 'unsigned int [2]'
| |-FieldDecl 0x7fffd830c4f0 <line:173:3, col:16> col:16 __g1_orig_size 'unsigned int'
| |-FieldDecl 0x7fffd830c550 <line:174:3, col:16> col:16 __wrefs 'unsigned int'
| `-FieldDecl 0x7fffd830c5e0 <line:175:3, col:29> col:16 __g_signals 'unsigned int [2]'
|-TypedefDecl 0x7fffd830c6e0 </usr/include/x86_64-linux-gnu/bits/pthreadtypes.h:27:1, col:27> col:27 pthread_t 'unsigned long'
| `-BuiltinType 0x7fffd81de3d0 'unsigned long'
|-RecordDecl 0x7fffd830c738 <line:32:9, line:36:1> line:32:9 union definition
| |-FieldDecl 0x7fffd830c858 <line:34:3, col:43> col:8 __size 'char [4]'
| `-FieldDecl 0x7fffd830c8b8 <line:35:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x7fffd830c950 <line:32:1, line:36:3> col:3 pthread_mutexattr_t 'union pthread_mutexattr_t':'pthread_mutexattr_t'
| `-ElaboratedType 0x7fffd830c900 'union pthread_mutexattr_t' sugar
|   `-RecordType 0x7fffd830c7c0 'pthread_mutexattr_t'
|     `-Record 0x7fffd830c738 ''
|-RecordDecl 0x7fffd830cd70 <line:41:9, line:45:1> line:41:9 union definition
| |-FieldDecl 0x7fffd830ce60 <line:43:3, col:42> col:8 __size 'char [4]'
| `-FieldDecl 0x7fffd830cec0 <line:44:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x7fffd830cf60 <line:41:1, line:45:3> col:3 pthread_condattr_t 'union pthread_condattr_t':'pthread_condattr_t'
| `-ElaboratedType 0x7fffd830cf10 'union pthread_condattr_t' sugar
|   `-RecordType 0x7fffd830ce00 'pthread_condattr_t'
|     `-Record 0x7fffd830cd70 ''
|-TypedefDecl 0x7fffd830cfe8 <line:49:1, col:22> col:22 pthread_key_t 'unsigned int'
| `-BuiltinType 0x7fffd81de3b0 'unsigned int'
|-TypedefDecl 0x7fffd830d058 <line:53:1, col:30> col:30 pthread_once_t 'int'
| `-BuiltinType 0x7fffd81de310 'int'
|-RecordDecl 0x7fffd830d0b0 <line:56:1, line:60:1> line:56:7 union pthread_attr_t definition
| |-FieldDecl 0x7fffd830d1d8 <line:58:3, col:38> col:8 __size 'char [56]'
| `-FieldDecl 0x7fffd830d238 <line:59:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x7fffd830d2d0 <line:62:1, col:30> col:30 pthread_attr_t 'union pthread_attr_t':'union pthread_attr_t'
| `-ElaboratedType 0x7fffd830d280 'union pthread_attr_t' sugar
|   `-RecordType 0x7fffd830d140 'union pthread_attr_t'
|     `-Record 0x7fffd830d0b0 'pthread_attr_t'
|-RecordDecl 0x7fffd830d328 <line:67:9, line:72:1> line:67:9 union definition
| |-FieldDecl 0x7fffd830d420 <line:69:3, col:28> col:28 __data 'struct __pthread_mutex_s':'struct __pthread_mutex_s'
| |-FieldDecl 0x7fffd830d4e8 <line:70:3, col:39> col:8 __size 'char [40]'
| `-FieldDecl 0x7fffd830d548 <line:71:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x7fffd830d6b0 <line:67:1, line:72:3> col:3 pthread_mutex_t 'union pthread_mutex_t':'pthread_mutex_t'
| `-ElaboratedType 0x7fffd830d660 'union pthread_mutex_t' sugar
|   `-RecordType 0x7fffd830d3b0 'pthread_mutex_t'
|     `-Record 0x7fffd830d328 ''
|-RecordDecl 0x7fffd830d720 <line:75:9, line:80:1> line:75:9 union definition
| |-FieldDecl 0x7fffd830d820 <line:77:3, col:27> col:27 __data 'struct __pthread_cond_s':'struct __pthread_cond_s'
| |-FieldDecl 0x7fffd830d8e8 <line:78:3, col:38> col:8 __size 'char [48]'
| `-FieldDecl 0x7fffd830d948 <line:79:17, col:31> col:31 __align 'long long'
|-TypedefDecl 0x7fffd830db00 <line:75:1, line:80:3> col:3 pthread_cond_t 'union pthread_cond_t':'pthread_cond_t'
| `-ElaboratedType 0x7fffd830dab0 'union pthread_cond_t' sugar
|   `-RecordType 0x7fffd830d7b0 'pthread_cond_t'
|     `-Record 0x7fffd830d720 ''
|-RecordDecl 0x7fffd830db70 <line:86:9, line:91:1> line:86:9 union definition
| |-FieldDecl 0x7fffd830dc70 <line:88:3, col:34> col:34 __data 'struct __pthread_rwlock_arch_t':'struct __pthread_rwlock_arch_t'
| |-FieldDecl 0x7fffd830dcf8 <line:89:3, col:40> col:8 __size 'char [56]'
| `-FieldDecl 0x7fffd8313290 <line:90:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x7fffd83133d0 <line:86:1, line:91:3> col:3 pthread_rwlock_t 'union pthread_rwlock_t':'pthread_rwlock_t'
| `-ElaboratedType 0x7fffd8313380 'union pthread_rwlock_t' sugar
|   `-RecordType 0x7fffd830dc00 'pthread_rwlock_t'
|     `-Record 0x7fffd830db70 ''
|-RecordDecl 0x7fffd8313440 <line:93:9, line:97:1> line:93:9 union definition
| |-FieldDecl 0x7fffd8313568 <line:95:3, col:44> col:8 __size 'char [8]'
| `-FieldDecl 0x7fffd83135c8 <line:96:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x7fffd8313660 <line:93:1, line:97:3> col:3 pthread_rwlockattr_t 'union pthread_rwlockattr_t':'pthread_rwlockattr_t'
| `-ElaboratedType 0x7fffd8313610 'union pthread_rwlockattr_t' sugar
|   `-RecordType 0x7fffd83134d0 'pthread_rwlockattr_t'
|     `-Record 0x7fffd8313440 ''
|-TypedefDecl 0x7fffd83136e8 <line:103:1, col:22> col:22 pthread_spinlock_t 'volatile int'
| `-QualType 0x7fffd81de314 'volatile int' volatile
|   `-BuiltinType 0x7fffd81de310 'int'
|-RecordDecl 0x7fffd8313740 <line:108:9, line:112:1> line:108:9 union definition
| |-FieldDecl 0x7fffd8313868 <line:110:3, col:41> col:8 __size 'char [32]'
| `-FieldDecl 0x7fffd83138c8 <line:111:3, col:12> col:12 __align 'long'
|-TypedefDecl 0x7fffd8313960 <line:108:1, line:112:3> col:3 pthread_barrier_t 'union pthread_barrier_t':'pthread_barrier_t'
| `-ElaboratedType 0x7fffd8313910 'union pthread_barrier_t' sugar
|   `-RecordType 0x7fffd83137d0 'pthread_barrier_t'
|     `-Record 0x7fffd8313740 ''
|-RecordDecl 0x7fffd83139d0 <line:114:9, line:118:1> line:114:9 union definition
| |-FieldDecl 0x7fffd8313ac0 <line:116:3, col:45> col:8 __size 'char [4]'
| `-FieldDecl 0x7fffd8313b20 <line:117:3, col:7> col:7 __align 'int'
|-TypedefDecl 0x7fffd8313bc0 <line:114:1, line:118:3> col:3 pthread_barrierattr_t 'union pthread_barrierattr_t':'pthread_barrierattr_t'
| `-ElaboratedType 0x7fffd8313b70 'union pthread_barrierattr_t' sugar
|   `-RecordType 0x7fffd8313a60 'pthread_barrierattr_t'
|     `-Record 0x7fffd83139d0 ''
|-FunctionDecl 0x7fffd8313cf8 </usr/include/stdlib.h:401:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/stdlib.h:401:17 random 'long (void)' extern
| `-NoThrowAttr 0x7fffd8313d98 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8313ec0 </usr/include/stdlib.h:404:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/stdlib.h:404:13 srandom 'void (unsigned int)' extern
| |-ParmVarDecl 0x7fffd8313df8 <col:22, col:35> col:35 __seed 'unsigned int'
| `-NoThrowAttr 0x7fffd8313f68 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd83142a0 </usr/include/stdlib.h:410:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:410:14 initstate 'char *(unsigned int, char *, size_t)' extern
| |-ParmVarDecl 0x7fffd8313fc8 <col:25, col:38> col:38 __seed 'unsigned int'
| |-ParmVarDecl 0x7fffd8314040 <col:46, col:52> col:52 __statebuf 'char *'
| |-ParmVarDecl 0x7fffd83140b0 <line:411:4, col:11> col:11 __statelen 'size_t':'unsigned long'
| |-NonNullAttr 0x7fffd8314358 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:411:44> 1
| `-NoThrowAttr 0x7fffd83143b0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd83144c8 </usr/include/stdlib.h:415:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:415:14 setstate 'char *(char *)' extern
| |-ParmVarDecl 0x7fffd83143d8 <col:24, col:30> col:30 __statebuf 'char *'
| |-NonNullAttr 0x7fffd8314570 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:415:63> 0
| `-NoThrowAttr 0x7fffd83145d0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-RecordDecl 0x7fffd83145e0 </usr/include/stdlib.h:423:1, line:432:3> line:423:8 struct random_data definition
| |-FieldDecl 0x7fffd83146e8 <line:425:5, col:14> col:14 fptr 'int32_t *'
| |-FieldDecl 0x7fffd8314740 <line:426:5, col:14> col:14 rptr 'int32_t *'
| |-FieldDecl 0x7fffd8314798 <line:427:5, col:14> col:14 state 'int32_t *'
| |-FieldDecl 0x7fffd83147f8 <line:428:5, col:9> col:9 rand_type 'int'
| |-FieldDecl 0x7fffd8314858 <line:429:5, col:9> col:9 rand_deg 'int'
| |-FieldDecl 0x7fffd83148b8 <line:430:5, col:9> col:9 rand_sep 'int'
| `-FieldDecl 0x7fffd8314910 <line:431:5, col:14> col:14 end_ptr 'int32_t *'
|-FunctionDecl 0x7fffd8314bd8 <line:434:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:434:12 random_r 'int (struct random_data *restrict, int32_t *restrict)' extern
| |-ParmVarDecl 0x7fffd8314a10 <col:22, col:53> col:53 __buf 'struct random_data *restrict'
| |-ParmVarDecl 0x7fffd8314a80 <line:435:8, col:28> col:28 __result 'int32_t *restrict'
| |-NonNullAttr 0x7fffd8314c88 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:435:62> 0 1
| `-NoThrowAttr 0x7fffd8314ce0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8314ec8 </usr/include/stdlib.h:437:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:437:12 srandom_r 'int (unsigned int, struct random_data *)' extern
| |-ParmVarDecl 0x7fffd8314d08 <col:23, col:36> col:36 __seed 'unsigned int'
| |-ParmVarDecl 0x7fffd8314d90 <col:44, col:64> col:64 __buf 'struct random_data *'
| |-NonNullAttr 0x7fffd8314f78 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:438:27> 1
| `-NoThrowAttr 0x7fffd8314fd0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8316348 </usr/include/stdlib.h:440:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:440:12 initstate_r 'int (unsigned int, char *restrict, size_t, struct random_data *restrict)' extern
| |-ParmVarDecl 0x7fffd8314ff8 <col:25, col:38> col:38 __seed 'unsigned int'
| |-ParmVarDecl 0x7fffd8315070 <col:46, col:63> col:63 __statebuf 'char *restrict'
| |-ParmVarDecl 0x7fffd83150e0 <line:441:4, col:11> col:11 __statelen 'size_t':'unsigned long'
| |-ParmVarDecl 0x7fffd8315168 <line:442:4, col:35> col:35 __buf 'struct random_data *restrict'
| |-NonNullAttr 0x7fffd8316408 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:443:30> 1 3
| `-NoThrowAttr 0x7fffd8316460 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8316668 </usr/include/stdlib.h:445:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:445:12 setstate_r 'int (char *restrict, struct random_data *restrict)' extern
| |-ParmVarDecl 0x7fffd8316488 <col:24, col:41> col:41 __statebuf 'char *restrict'
| |-ParmVarDecl 0x7fffd8316510 <line:446:10, col:41> col:41 __buf 'struct random_data *restrict'
| |-NonNullAttr 0x7fffd8316718 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:447:30> 0 1
| `-NoThrowAttr 0x7fffd8316770 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8316848 </usr/include/stdlib.h:453:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/stdlib.h:453:12 rand 'int (void)' extern
| `-NoThrowAttr 0x7fffd83168e8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd83169d0 </usr/include/stdlib.h:455:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/stdlib.h:455:13 srand 'void (unsigned int)' extern
| |-ParmVarDecl 0x7fffd8316948 <col:20, col:33> col:33 __seed 'unsigned int'
| `-NoThrowAttr 0x7fffd8316a78 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8316bc8 </usr/include/stdlib.h:459:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/stdlib.h:459:12 rand_r 'int (unsigned int *)' extern
| |-ParmVarDecl 0x7fffd8316b00 <col:20, col:34> col:34 __seed 'unsigned int *'
| `-NoThrowAttr 0x7fffd8316c70 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8316d88 </usr/include/stdlib.h:467:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/stdlib.h:467:15 drand48 'double (void)' extern
| `-NoThrowAttr 0x7fffd8316e28 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8317078 </usr/include/stdlib.h:468:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:468:15 erand48 'double (unsigned short *)' extern
| |-ParmVarDecl 0x7fffd8316f50 <col:24, col:52> col:43 __xsubi 'unsigned short *':'unsigned short *'
| |-NonNullAttr 0x7fffd8317120 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:468:76> 0
| `-NoThrowAttr 0x7fffd8317180 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd83182d0 </usr/include/stdlib.h:471:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/stdlib.h:471:17 lrand48 'long (void)' extern
| `-NoThrowAttr 0x7fffd8318370 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8318528 </usr/include/stdlib.h:472:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:472:17 nrand48 'long (unsigned short *)' extern
| |-ParmVarDecl 0x7fffd8318400 <col:26, col:54> col:45 __xsubi 'unsigned short *':'unsigned short *'
| |-NonNullAttr 0x7fffd83185d0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:473:27> 0
| `-NoThrowAttr 0x7fffd8318630 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd83186d8 </usr/include/stdlib.h:476:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/stdlib.h:476:17 mrand48 'long (void)' extern
| `-NoThrowAttr 0x7fffd8318778 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd83188b8 </usr/include/stdlib.h:477:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:477:17 jrand48 'long (unsigned short *)' extern
| |-ParmVarDecl 0x7fffd8318808 <col:26, col:54> col:45 __xsubi 'unsigned short *':'unsigned short *'
| |-NonNullAttr 0x7fffd8318960 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:478:27> 0
| `-NoThrowAttr 0x7fffd83189c0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8318ab0 </usr/include/stdlib.h:481:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/stdlib.h:481:13 srand48 'void (long)' extern
| |-ParmVarDecl 0x7fffd83189e8 <col:22, col:31> col:31 __seedval 'long'
| `-NoThrowAttr 0x7fffd8318b58 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8318d18 </usr/include/stdlib.h:482:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:482:28 seed48 'unsigned short *(unsigned short *)' extern
| |-ParmVarDecl 0x7fffd8318be8 <col:36, col:66> col:55 __seed16v 'unsigned short *':'unsigned short *'
| |-NonNullAttr 0x7fffd8318dc0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:483:27> 0
| `-NoThrowAttr 0x7fffd8318e20 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8319000 </usr/include/stdlib.h:484:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:484:13 lcong48 'void (unsigned short *)' extern
| |-ParmVarDecl 0x7fffd8318ee0 <col:22, col:50> col:41 __param 'unsigned short *':'unsigned short *'
| |-NonNullAttr 0x7fffd83190a8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:484:74> 0
| `-NoThrowAttr 0x7fffd8319100 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-RecordDecl 0x7fffd8319110 </usr/include/stdlib.h:490:1, line:498:3> line:490:8 struct drand48_data definition
| |-FieldDecl 0x7fffd8319208 <line:492:5, col:29> col:24 __x 'unsigned short [3]'
| |-FieldDecl 0x7fffd83192e0 <line:493:5, col:33> col:24 __old_x 'unsigned short [3]'
| |-FieldDecl 0x7fffd8319340 <line:494:5, col:24> col:24 __c 'unsigned short'
| |-FieldDecl 0x7fffd83193a0 <line:495:5, col:24> col:24 __init 'unsigned short'
| `-FieldDecl 0x7fffd8319400 <line:496:19, col:42> col:42 __a 'unsigned long long'
|-FunctionDecl 0x7fffd83196d8 <line:501:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:501:12 drand48_r 'int (struct drand48_data *restrict, double *restrict)' extern
| |-ParmVarDecl 0x7fffd8319500 <col:23, col:55> col:55 __buffer 'struct drand48_data *restrict'
| |-ParmVarDecl 0x7fffd8319578 <line:502:9, col:28> col:28 __result 'double *restrict'
| |-NonNullAttr 0x7fffd8319788 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:502:62> 0 1
| `-NoThrowAttr 0x7fffd83197e0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8319ab8 </usr/include/stdlib.h:503:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:503:12 erand48_r 'int (unsigned short *, struct drand48_data *restrict, double *restrict)' extern
| |-ParmVarDecl 0x7fffd8319838 <col:23, col:51> col:42 __xsubi 'unsigned short *':'unsigned short *'
| |-ParmVarDecl 0x7fffd83198c0 <line:504:9, col:41> col:41 __buffer 'struct drand48_data *restrict'
| |-ParmVarDecl 0x7fffd8319938 <line:505:9, col:28> col:28 __result 'double *restrict'
| |-NonNullAttr 0x7fffd8319b70 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:505:62> 0 1
| `-NoThrowAttr 0x7fffd8319bd0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8319e08 </usr/include/stdlib.h:508:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:508:12 lrand48_r 'int (struct drand48_data *restrict, long *restrict)' extern
| |-ParmVarDecl 0x7fffd8319c08 <col:23, col:55> col:55 __buffer 'struct drand48_data *restrict'
| |-ParmVarDecl 0x7fffd8319cb0 <line:509:9, col:30> col:30 __result 'long *restrict'
| |-NonNullAttr 0x7fffd8319eb8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:510:30> 0 1
| `-NoThrowAttr 0x7fffd8319f10 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd831a1e8 </usr/include/stdlib.h:511:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:511:12 nrand48_r 'int (unsigned short *, struct drand48_data *restrict, long *restrict)' extern
| |-ParmVarDecl 0x7fffd8319f68 <col:23, col:51> col:42 __xsubi 'unsigned short *':'unsigned short *'
| |-ParmVarDecl 0x7fffd8319ff0 <line:512:9, col:41> col:41 __buffer 'struct drand48_data *restrict'
| |-ParmVarDecl 0x7fffd831a068 <line:513:9, col:30> col:30 __result 'long *restrict'
| |-NonNullAttr 0x7fffd831a2a0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:514:30> 0 1
| `-NoThrowAttr 0x7fffd831a328 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd831a4b0 </usr/include/stdlib.h:517:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:517:12 mrand48_r 'int (struct drand48_data *restrict, long *restrict)' extern
| |-ParmVarDecl 0x7fffd831a360 <col:23, col:55> col:55 __buffer 'struct drand48_data *restrict'
| |-ParmVarDecl 0x7fffd831a3d8 <line:518:9, col:30> col:30 __result 'long *restrict'
| |-NonNullAttr 0x7fffd831a560 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:519:30> 0 1
| `-NoThrowAttr 0x7fffd831a5c0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd831a7f8 </usr/include/stdlib.h:520:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:520:12 jrand48_r 'int (unsigned short *, struct drand48_data *restrict, long *restrict)' extern
| |-ParmVarDecl 0x7fffd831a618 <col:23, col:51> col:42 __xsubi 'unsigned short *':'unsigned short *'
| |-ParmVarDecl 0x7fffd831a6a0 <line:521:9, col:41> col:41 __buffer 'struct drand48_data *restrict'
| |-ParmVarDecl 0x7fffd831a718 <line:522:9, col:30> col:30 __result 'long *restrict'
| |-NonNullAttr 0x7fffd831a8b0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:523:30> 0 1
| `-NoThrowAttr 0x7fffd831a910 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd831aaf8 </usr/include/stdlib.h:526:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:526:12 srand48_r 'int (long, struct drand48_data *)' extern
| |-ParmVarDecl 0x7fffd831a938 <col:23, col:32> col:32 __seedval 'long'
| |-ParmVarDecl 0x7fffd831a9c0 <col:43, col:64> col:64 __buffer 'struct drand48_data *'
| |-NonNullAttr 0x7fffd831aba8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:527:27> 1
| `-NoThrowAttr 0x7fffd831ac00 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd831ae38 </usr/include/stdlib.h:529:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:529:12 seed48_r 'int (unsigned short *, struct drand48_data *)' extern
| |-ParmVarDecl 0x7fffd831ac58 <col:22, col:52> col:41 __seed16v 'unsigned short *':'unsigned short *'
| |-ParmVarDecl 0x7fffd831ace0 <line:530:8, col:29> col:29 __buffer 'struct drand48_data *'
| |-NonNullAttr 0x7fffd831aee8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:530:63> 0 1
| `-NoThrowAttr 0x7fffd831af40 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd831b138 </usr/include/stdlib.h:532:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:532:12 lcong48_r 'int (unsigned short *, struct drand48_data *)' extern
| |-ParmVarDecl 0x7fffd831af98 <col:23, col:51> col:42 __param 'unsigned short *':'unsigned short *'
| |-ParmVarDecl 0x7fffd831b020 <line:533:9, col:30> col:30 __buffer 'struct drand48_data *'
| |-NonNullAttr 0x7fffd831b1e8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:534:30> 0 1
| `-NoThrowAttr 0x7fffd831b240 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd831b3a8 </usr/include/stdlib.h:539:14> col:14 implicit used malloc 'void *(unsigned long)' extern
| `-ParmVarDecl 0x7fffd831b448 <<invalid sloc>> <invalid sloc> 'unsigned long'
|-FunctionDecl 0x7fffd831b4b0 prev 0x7fffd831b3a8 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:203:58> /usr/include/stdlib.h:539:14 used malloc 'void *(unsigned long)' extern
| |-ParmVarDecl 0x7fffd831b260 <col:22, col:29> col:29 __size 'size_t':'unsigned long'
| |-RestrictAttr 0x7fffd831b558 </usr/include/x86_64-linux-gnu/sys/cdefs.h:203:47> malloc
| `-NoThrowAttr 0x7fffd831b5a0 <line:55:35>
|-FunctionDecl 0x7fffd831b748 </usr/include/stdlib.h:541:14> col:14 implicit calloc 'void *(unsigned long, unsigned long)' extern
| |-ParmVarDecl 0x7fffd831b7e8 <<invalid sloc>> <invalid sloc> 'unsigned long'
| `-ParmVarDecl 0x7fffd831b848 <<invalid sloc>> <invalid sloc> 'unsigned long'
|-FunctionDecl 0x7fffd831b8b8 prev 0x7fffd831b748 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:203:58> /usr/include/stdlib.h:541:14 calloc 'void *(unsigned long, unsigned long)' extern
| |-ParmVarDecl 0x7fffd831b5c0 <col:22, col:29> col:29 __nmemb 'size_t':'unsigned long'
| |-ParmVarDecl 0x7fffd831b630 <col:38, col:45> col:45 __size 'size_t':'unsigned long'
| |-RestrictAttr 0x7fffd831b968 </usr/include/x86_64-linux-gnu/sys/cdefs.h:203:47> malloc
| `-NoThrowAttr 0x7fffd831b9b0 <line:55:35>
|-FunctionDecl 0x7fffd831bb68 </usr/include/stdlib.h:549:14> col:14 implicit realloc 'void *(void *, unsigned long)' extern
| |-ParmVarDecl 0x7fffd831bc08 <<invalid sloc>> <invalid sloc> 'void *'
| `-ParmVarDecl 0x7fffd831bc68 <<invalid sloc>> <invalid sloc> 'unsigned long'
|-FunctionDecl 0x7fffd831bcd8 prev 0x7fffd831bb68 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:297:43> /usr/include/stdlib.h:549:14 realloc 'void *(void *, unsigned long)' extern
| |-ParmVarDecl 0x7fffd831b9d8 <col:23, col:29> col:29 __ptr 'void *'
| |-ParmVarDecl 0x7fffd831ba48 <col:36, col:43> col:43 __size 'size_t':'unsigned long'
| |-WarnUnusedResultAttr 0x7fffd831bd88 </usr/include/x86_64-linux-gnu/sys/cdefs.h:297:20> warn_unused_result
| `-NoThrowAttr 0x7fffd831bdd0 <line:55:35>
|-FunctionDecl 0x7fffd831bec0 </usr/include/stdlib.h:563:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/stdlib.h:563:13 used free 'void (void *)' extern
| |-ParmVarDecl 0x7fffd831bdf8 <col:19, col:25> col:25 __ptr 'void *'
| `-NoThrowAttr 0x7fffd831bf68 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd831c050 </usr/include/alloca.h:32:14> col:14 implicit alloca 'void *(unsigned long)' extern
| `-ParmVarDecl 0x7fffd831c0f0 <<invalid sloc>> <invalid sloc> 'unsigned long'
|-FunctionDecl 0x7fffd831c158 prev 0x7fffd831c050 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/alloca.h:32:14 alloca 'void *(unsigned long)' extern
| |-ParmVarDecl 0x7fffd831bfc0 <col:22, col:29> col:29 __size 'size_t':'unsigned long'
| `-NoThrowAttr 0x7fffd831c200 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd831c310 </usr/include/stdlib.h:572:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:203:58> /usr/include/stdlib.h:572:14 valloc 'void *(size_t)' extern
| |-ParmVarDecl 0x7fffd831c258 <col:22, col:29> col:29 __size 'size_t':'unsigned long'
| |-RestrictAttr 0x7fffd831c3b8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:203:47> malloc
| `-NoThrowAttr 0x7fffd831c400 <line:55:35>
|-FunctionDecl 0x7fffd831c688 </usr/include/stdlib.h:577:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:577:12 posix_memalign 'int (void **, size_t, size_t)' extern
| |-ParmVarDecl 0x7fffd831c450 <col:28, col:35> col:35 __memptr 'void **'
| |-ParmVarDecl 0x7fffd831c4c0 <col:45, col:52> col:52 __alignment 'size_t':'unsigned long'
| |-ParmVarDecl 0x7fffd831c530 <col:65, col:72> col:72 __size 'size_t':'unsigned long'
| |-NonNullAttr 0x7fffd831c740 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:578:27> 0
| `-NoThrowAttr 0x7fffd831c7a0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd831c8c8 </usr/include/stdlib.h:583:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:203:58> /usr/include/stdlib.h:583:14 aligned_alloc 'void *(size_t, size_t)' extern
| |-ParmVarDecl 0x7fffd831c7c0 <col:29, col:36> col:36 __alignment 'size_t':'unsigned long'
| |-ParmVarDecl 0x7fffd831c830 <col:49, col:56> col:56 __size 'size_t':'unsigned long'
| |-RestrictAttr 0x7fffd831c978 </usr/include/x86_64-linux-gnu/sys/cdefs.h:203:47> malloc
| `-NoThrowAttr 0x7fffd831c9c0 <line:55:35>
|-FunctionDecl 0x7fffd831cac0 </usr/include/stdlib.h:588:13> col:13 implicit abort 'void (void) __attribute__((noreturn))' extern
|-FunctionDecl 0x7fffd831cb60 prev 0x7fffd831cac0 <col:1, col:63> col:13 abort 'void (void) __attribute__((noreturn))' extern
| `-NoThrowAttr 0x7fffd831cc00 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd831cea8 </usr/include/stdlib.h:592:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:592:12 atexit 'int (void (*)(void))' extern
| |-ParmVarDecl 0x7fffd831cd78 <col:20, col:40> col:27 __func 'void (*)(void)'
| |-NonNullAttr 0x7fffd831cf50 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:592:64> 0
| `-NoThrowAttr 0x7fffd831cfb0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd831d110 </usr/include/stdlib.h:600:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:600:12 at_quick_exit 'int (void (*)(void))' extern
| |-ParmVarDecl 0x7fffd831d060 <col:27, col:47> col:34 __func 'void (*)(void)'
| |-NonNullAttr 0x7fffd831d1b8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:600:71> 0
| `-NoThrowAttr 0x7fffd831d210 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd831d9e8 </usr/include/stdlib.h:607:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:607:12 on_exit 'int (void (*)(int, void *), void *)' extern
| |-ParmVarDecl 0x7fffd831d838 <col:21, col:62> col:28 __func 'void (*)(int, void *)'
| |-ParmVarDecl 0x7fffd831d8b0 <col:65, col:71> col:71 __arg 'void *'
| |-NonNullAttr 0x7fffd831da98 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:608:27> 0
| `-NoThrowAttr 0x7fffd831daf0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd831dc20 </usr/include/stdlib.h:614:13> col:13 implicit exit 'void (int) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x7fffd831dcc0 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x7fffd831dd28 prev 0x7fffd831dc20 <col:1, col:70> col:13 exit 'void (int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x7fffd831db18 <col:19, col:23> col:23 __status 'int'
| `-NoThrowAttr 0x7fffd831ddd0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd831deb8 </usr/include/stdlib.h:620:1, col:76> col:13 quick_exit 'void (int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x7fffd831de30 <col:25, col:29> col:29 __status 'int'
| `-NoThrowAttr 0x7fffd831df60 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd831e048 </usr/include/stdlib.h:626:13> col:13 implicit _Exit 'void (int) __attribute__((noreturn))' extern
| `-ParmVarDecl 0x7fffd831e0e8 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x7fffd831e150 prev 0x7fffd831e048 <col:1, col:71> col:13 _Exit 'void (int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x7fffd831dfc0 <col:20, col:24> col:24 __status 'int'
| `-NoThrowAttr 0x7fffd831e1f8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd831e348 </usr/include/stdlib.h:631:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:631:14 getenv 'char *(const char *)' extern
| |-ParmVarDecl 0x7fffd831e258 <col:22, col:34> col:34 __name 'const char *'
| |-NonNullAttr 0x7fffd831e3f0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:631:63> 0
| `-NoThrowAttr 0x7fffd831e450 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd831e568 </usr/include/stdlib.h:644:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:644:12 putenv 'int (char *)' extern
| |-ParmVarDecl 0x7fffd831e478 <col:20, col:26> col:26 __string 'char *'
| |-NonNullAttr 0x7fffd831e610 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:644:57> 0
| `-NoThrowAttr 0x7fffd831e670 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd831e8c8 </usr/include/stdlib.h:650:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:650:12 setenv 'int (const char *, const char *, int)' extern
| |-ParmVarDecl 0x7fffd831e698 <col:20, col:32> col:32 __name 'const char *'
| |-ParmVarDecl 0x7fffd831e740 <col:40, col:52> col:52 __value 'const char *'
| |-ParmVarDecl 0x7fffd831e7b8 <col:61, col:65> col:65 __replace 'int'
| |-NonNullAttr 0x7fffd831e980 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:651:27> 1
| `-NoThrowAttr 0x7fffd831e9e0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd831eab8 </usr/include/stdlib.h:654:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:654:12 unsetenv 'int (const char *)' extern
| |-ParmVarDecl 0x7fffd831ea08 <col:22, col:34> col:34 __name 'const char *'
| |-NonNullAttr 0x7fffd831eb60 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:654:63> 0
| `-NoThrowAttr 0x7fffd831ebc0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd831ec68 </usr/include/stdlib.h:661:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/stdlib.h:661:12 clearenv 'int (void)' extern
| `-NoThrowAttr 0x7fffd831ed08 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd831ee18 </usr/include/stdlib.h:672:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:672:14 mktemp 'char *(char *)' extern
| |-ParmVarDecl 0x7fffd831ed68 <col:22, col:28> col:28 __template 'char *'
| |-NonNullAttr 0x7fffd831eec0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:672:61> 0
| `-NoThrowAttr 0x7fffd831ef20 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd831eff8 </usr/include/stdlib.h:685:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:685:12 mkstemp 'int (char *)' extern
| |-ParmVarDecl 0x7fffd831ef48 <col:21, col:27> col:27 __template 'char *'
| `-NonNullAttr 0x7fffd831f0a0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:685:52> 0
|-FunctionDecl 0x7fffd831f288 <line:707:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:707:12 mkstemps 'int (char *, int)' extern
| |-ParmVarDecl 0x7fffd831f118 <col:22, col:28> col:28 __template 'char *'
| |-ParmVarDecl 0x7fffd831f190 <col:40, col:44> col:44 __suffixlen 'int'
| `-NonNullAttr 0x7fffd831f338 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:707:70> 0
|-FunctionDecl 0x7fffd831f458 <line:728:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:728:14 mkdtemp 'char *(char *)' extern
| |-ParmVarDecl 0x7fffd831f3a8 <col:23, col:29> col:29 __template 'char *'
| |-NonNullAttr 0x7fffd831f500 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:728:62> 0
| `-NoThrowAttr 0x7fffd831f560 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd831f618 </usr/include/stdlib.h:781:1, col:41> col:12 system 'int (const char *)' extern
| `-ParmVarDecl 0x7fffd831f588 <col:20, col:32> col:32 __command 'const char *'
|-FunctionDecl 0x7fffd831f888 <line:797:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/stdlib.h:797:14 realpath 'char *(const char *restrict, char *restrict)' extern
| |-ParmVarDecl 0x7fffd831f6d8 <col:24, col:47> col:47 __name 'const char *restrict'
| |-ParmVarDecl 0x7fffd831f768 <line:798:10, col:27> col:27 __resolved 'char *restrict'
| `-NoThrowAttr 0x7fffd831f938 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-TypedefDecl 0x7fffd831fbb0 </usr/include/stdlib.h:805:1, col:57> col:15 referenced __compar_fn_t 'int (*)(const void *, const void *)'
| `-PointerType 0x7fffd831fb40 'int (*)(const void *, const void *)'
|   `-ParenType 0x7fffd831fae0 'int (const void *, const void *)' sugar
|     `-FunctionProtoType 0x7fffd831faa0 'int (const void *, const void *)' cdecl
|       |-BuiltinType 0x7fffd81de310 'int'
|       |-PointerType 0x7fffd831f980 'const void *'
|       | `-QualType 0x7fffd81de271 'const void' const
|       |   `-BuiltinType 0x7fffd81de270 'void'
|       `-PointerType 0x7fffd831f980 'const void *'
|         `-QualType 0x7fffd81de271 'const void' const
|           `-BuiltinType 0x7fffd81de270 'void'
|-FunctionDecl 0x7fffd831ffd8 <line:817:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:817:14 bsearch 'void *(const void *, const void *, size_t, size_t, __compar_fn_t)' extern
| |-ParmVarDecl 0x7fffd831fc20 <col:23, col:35> col:35 __key 'const void *'
| |-ParmVarDecl 0x7fffd831fc98 <col:42, col:54> col:54 __base 'const void *'
| |-ParmVarDecl 0x7fffd831fd08 <line:818:9, col:16> col:16 __nmemb 'size_t':'unsigned long'
| |-ParmVarDecl 0x7fffd831fd78 <col:25, col:32> col:32 __size 'size_t':'unsigned long'
| |-ParmVarDecl 0x7fffd831fe10 <col:40, col:54> col:54 __compar '__compar_fn_t':'int (*)(const void *, const void *)'
| `-NonNullAttr 0x7fffd83200a0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:819:25> 0 1 4
|-FunctionDecl 0x7fffd83203f0 <line:827:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:827:13 qsort 'void (void *, size_t, size_t, __compar_fn_t)' extern
| |-ParmVarDecl 0x7fffd8320120 <col:20, col:26> col:26 __base 'void *'
| |-ParmVarDecl 0x7fffd8320190 <col:34, col:41> col:41 __nmemb 'size_t':'unsigned long'
| |-ParmVarDecl 0x7fffd8320200 <col:50, col:57> col:57 __size 'size_t':'unsigned long'
| |-ParmVarDecl 0x7fffd8320270 <line:828:6, col:20> col:20 __compar '__compar_fn_t':'int (*)(const void *, const void *)'
| `-NonNullAttr 0x7fffd83204b0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:828:46> 0 3
|-FunctionDecl 0x7fffd83205f8 <line:837:12> col:12 implicit abs 'int (int)' extern
| |-ParmVarDecl 0x7fffd8320698 <<invalid sloc>> <invalid sloc> 'int'
| |-NoThrowAttr 0x7fffd8320700 <col:12> Implicit
| `-ConstAttr 0x7fffd8320760 <col:12> Implicit
|-FunctionDecl 0x7fffd8320770 prev 0x7fffd83205f8 <col:1, col:60> col:12 abs 'int (int)' extern
| |-ParmVarDecl 0x7fffd8320528 <col:17, col:21> col:21 __x 'int'
| |-ConstAttr 0x7fffd8320818 <col:50>
| `-NoThrowAttr 0x7fffd8320860 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8320958 </usr/include/stdlib.h:838:17> col:17 implicit labs 'long (long)' extern
| |-ParmVarDecl 0x7fffd83209f8 <<invalid sloc>> <invalid sloc> 'long'
| |-NoThrowAttr 0x7fffd8320a60 <col:17> Implicit
| `-ConstAttr 0x7fffd8320aa8 <col:17> Implicit
|-FunctionDecl 0x7fffd8320ab8 prev 0x7fffd8320958 <col:1, col:71> col:17 labs 'long (long)' extern
| |-ParmVarDecl 0x7fffd8320888 <col:23, col:32> col:32 __x 'long'
| |-ConstAttr 0x7fffd8320b60 <col:61>
| `-NoThrowAttr 0x7fffd8320ba8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8320c98 </usr/include/stdlib.h:841:36> col:36 implicit llabs 'long long (long long)' extern
| |-ParmVarDecl 0x7fffd8320d38 <<invalid sloc>> <invalid sloc> 'long long'
| |-NoThrowAttr 0x7fffd8320da0 <col:36> Implicit
| `-ConstAttr 0x7fffd8320de8 <col:36> Implicit
|-FunctionDecl 0x7fffd8320df8 prev 0x7fffd8320c98 <col:15, line:842:40> line:841:36 llabs 'long long (long long)' extern
| |-ParmVarDecl 0x7fffd8320bd0 <col:43, col:57> col:57 __x 'long long'
| |-ConstAttr 0x7fffd8320ea0 <line:842:30>
| `-NoThrowAttr 0x7fffd8320ee8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd83210c0 </usr/include/stdlib.h:849:1, line:850:40> line:849:14 div 'div_t (int, int)' extern
| |-ParmVarDecl 0x7fffd8320f38 <col:19, col:23> col:23 __numer 'int'
| |-ParmVarDecl 0x7fffd8320fb0 <col:32, col:36> col:36 __denom 'int'
| |-ConstAttr 0x7fffd8321170 <line:850:30>
| `-NoThrowAttr 0x7fffd83211b8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8321390 </usr/include/stdlib.h:851:1, line:852:40> line:851:15 ldiv 'ldiv_t (long, long)' extern
| |-ParmVarDecl 0x7fffd8321208 <col:21, col:30> col:30 __numer 'long'
| |-ParmVarDecl 0x7fffd8321280 <col:39, col:48> col:48 __denom 'long'
| |-ConstAttr 0x7fffd8321440 <line:852:30>
| `-NoThrowAttr 0x7fffd8321488 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8321660 </usr/include/stdlib.h:855:15, line:857:40> line:855:30 lldiv 'lldiv_t (long long, long long)' extern
| |-ParmVarDecl 0x7fffd83214d8 <col:37, col:51> col:51 __numer 'long long'
| |-ParmVarDecl 0x7fffd8321550 <line:856:9, col:23> col:23 __denom 'long long'
| |-ConstAttr 0x7fffd8321710 <line:857:30>
| `-NoThrowAttr 0x7fffd8321770 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8321a88 </usr/include/stdlib.h:869:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:869:14 ecvt 'char *(double, int, int *restrict, int *restrict)' extern
| |-ParmVarDecl 0x7fffd8321798 <col:20, col:27> col:27 __value 'double'
| |-ParmVarDecl 0x7fffd8321810 <col:36, col:40> col:40 __ndigit 'int'
| |-ParmVarDecl 0x7fffd8321888 <col:50, col:66> col:66 __decpt 'int *restrict'
| |-ParmVarDecl 0x7fffd8321900 <line:870:6, col:22> col:22 __sign 'int *restrict'
| |-NonNullAttr 0x7fffd8321b48 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:870:54> 2 3
| `-NoThrowAttr 0x7fffd8321ba0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8321e18 </usr/include/stdlib.h:875:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:875:14 fcvt 'char *(double, int, int *restrict, int *restrict)' extern
| |-ParmVarDecl 0x7fffd8321bc8 <col:20, col:27> col:27 __value 'double'
| |-ParmVarDecl 0x7fffd8321c40 <col:36, col:40> col:40 __ndigit 'int'
| |-ParmVarDecl 0x7fffd8321cb8 <col:50, col:66> col:66 __decpt 'int *restrict'
| |-ParmVarDecl 0x7fffd8321d30 <line:876:6, col:22> col:22 __sign 'int *restrict'
| |-NonNullAttr 0x7fffd8321ed8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:876:54> 2 3
| `-NoThrowAttr 0x7fffd8321f30 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8322158 </usr/include/stdlib.h:881:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:881:14 gcvt 'char *(double, int, char *)' extern
| |-ParmVarDecl 0x7fffd8321f58 <col:20, col:27> col:27 __value 'double'
| |-ParmVarDecl 0x7fffd8321fd0 <col:36, col:40> col:40 __ndigit 'int'
| |-ParmVarDecl 0x7fffd8322048 <col:50, col:56> col:56 __buf 'char *'
| |-NonNullAttr 0x7fffd8322210 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:882:27> 2
| `-NoThrowAttr 0x7fffd8322270 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8322588 </usr/include/stdlib.h:887:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:887:14 qecvt 'char *(long double, int, int *restrict, int *restrict)' extern
| |-ParmVarDecl 0x7fffd8322298 <col:21, col:33> col:33 __value 'long double'
| |-ParmVarDecl 0x7fffd8322310 <col:42, col:46> col:46 __ndigit 'int'
| |-ParmVarDecl 0x7fffd8322388 <line:888:7, col:23> col:23 __decpt 'int *restrict'
| |-ParmVarDecl 0x7fffd8322400 <col:32, col:48> col:48 __sign 'int *restrict'
| |-NonNullAttr 0x7fffd8322648 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:889:30> 2 3
| `-NoThrowAttr 0x7fffd83226a0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8323968 </usr/include/stdlib.h:890:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:890:14 qfcvt 'char *(long double, int, int *restrict, int *restrict)' extern
| |-ParmVarDecl 0x7fffd83226c8 <col:21, col:33> col:33 __value 'long double'
| |-ParmVarDecl 0x7fffd8323790 <col:42, col:46> col:46 __ndigit 'int'
| |-ParmVarDecl 0x7fffd8323808 <line:891:7, col:23> col:23 __decpt 'int *restrict'
| |-ParmVarDecl 0x7fffd8323880 <col:32, col:48> col:48 __sign 'int *restrict'
| |-NonNullAttr 0x7fffd8323a28 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:892:30> 2 3
| `-NoThrowAttr 0x7fffd8323a80 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8323ca8 </usr/include/stdlib.h:893:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:893:14 qgcvt 'char *(long double, int, char *)' extern
| |-ParmVarDecl 0x7fffd8323aa8 <col:21, col:33> col:33 __value 'long double'
| |-ParmVarDecl 0x7fffd8323b20 <col:42, col:46> col:46 __ndigit 'int'
| |-ParmVarDecl 0x7fffd8323b98 <col:56, col:62> col:62 __buf 'char *'
| |-NonNullAttr 0x7fffd8323d60 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:894:27> 2
| `-NoThrowAttr 0x7fffd8323dc0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8324218 </usr/include/stdlib.h:899:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:899:12 ecvt_r 'int (double, int, int *restrict, int *restrict, char *restrict, size_t)' extern
| |-ParmVarDecl 0x7fffd8323de8 <col:20, col:27> col:27 __value 'double'
| |-ParmVarDecl 0x7fffd8323e60 <col:36, col:40> col:40 __ndigit 'int'
| |-ParmVarDecl 0x7fffd8323ed8 <col:50, col:66> col:66 __decpt 'int *restrict'
| |-ParmVarDecl 0x7fffd8323f50 <line:900:6, col:22> col:22 __sign 'int *restrict'
| |-ParmVarDecl 0x7fffd8323fc8 <col:30, col:47> col:47 __buf 'char *restrict'
| |-ParmVarDecl 0x7fffd8324038 <line:901:6, col:13> col:13 __len 'size_t':'unsigned long'
| |-NonNullAttr 0x7fffd83242e8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:901:47> 2 3 4
| `-NoThrowAttr 0x7fffd8324348 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd83246d8 </usr/include/stdlib.h:902:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:902:12 fcvt_r 'int (double, int, int *restrict, int *restrict, char *restrict, size_t)' extern
| |-ParmVarDecl 0x7fffd8324370 <col:20, col:27> col:27 __value 'double'
| |-ParmVarDecl 0x7fffd83243e8 <col:36, col:40> col:40 __ndigit 'int'
| |-ParmVarDecl 0x7fffd8324460 <col:50, col:66> col:66 __decpt 'int *restrict'
| |-ParmVarDecl 0x7fffd83244d8 <line:903:6, col:22> col:22 __sign 'int *restrict'
| |-ParmVarDecl 0x7fffd8324550 <col:30, col:47> col:47 __buf 'char *restrict'
| |-ParmVarDecl 0x7fffd83245c0 <line:904:6, col:13> col:13 __len 'size_t':'unsigned long'
| |-NonNullAttr 0x7fffd83247d0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:904:47> 2 3 4
| `-NoThrowAttr 0x7fffd8324838 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8324c88 </usr/include/stdlib.h:906:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:906:12 qecvt_r 'int (long double, int, int *restrict, int *restrict, char *restrict, size_t)' extern
| |-ParmVarDecl 0x7fffd8324860 <col:21, col:33> col:33 __value 'long double'
| |-ParmVarDecl 0x7fffd83248d8 <col:42, col:46> col:46 __ndigit 'int'
| |-ParmVarDecl 0x7fffd8324950 <line:907:7, col:23> col:23 __decpt 'int *restrict'
| |-ParmVarDecl 0x7fffd83249c8 <col:32, col:48> col:48 __sign 'int *restrict'
| |-ParmVarDecl 0x7fffd8324a40 <line:908:7, col:24> col:24 __buf 'char *restrict'
| |-ParmVarDecl 0x7fffd8324ab0 <col:31, col:38> col:38 __len 'size_t':'unsigned long'
| |-NonNullAttr 0x7fffd8324d58 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:909:33> 2 3 4
| `-NoThrowAttr 0x7fffd8324db8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8325148 </usr/include/stdlib.h:910:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:910:12 qfcvt_r 'int (long double, int, int *restrict, int *restrict, char *restrict, size_t)' extern
| |-ParmVarDecl 0x7fffd8324de0 <col:21, col:33> col:33 __value 'long double'
| |-ParmVarDecl 0x7fffd8324e58 <col:42, col:46> col:46 __ndigit 'int'
| |-ParmVarDecl 0x7fffd8324ed0 <line:911:7, col:23> col:23 __decpt 'int *restrict'
| |-ParmVarDecl 0x7fffd8324f48 <col:32, col:48> col:48 __sign 'int *restrict'
| |-ParmVarDecl 0x7fffd8324fc0 <line:912:7, col:24> col:24 __buf 'char *restrict'
| |-ParmVarDecl 0x7fffd8325030 <col:31, col:38> col:38 __len 'size_t':'unsigned long'
| |-NonNullAttr 0x7fffd8325218 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:913:33> 2 3 4
| `-NoThrowAttr 0x7fffd8325278 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8325428 </usr/include/stdlib.h:919:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/stdlib.h:919:12 mblen 'int (const char *, size_t)' extern
| |-ParmVarDecl 0x7fffd83252a0 <col:19, col:31> col:31 __s 'const char *'
| |-ParmVarDecl 0x7fffd8325310 <col:36, col:43> col:43 __n 'size_t':'unsigned long'
| `-NoThrowAttr 0x7fffd83254d8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd83257b0 </usr/include/stdlib.h:922:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/stdlib.h:922:12 mbtowc 'int (wchar_t *restrict, const char *restrict, size_t)' extern
| |-ParmVarDecl 0x7fffd8325578 <col:20, col:40> col:40 __pwc 'wchar_t *restrict'
| |-ParmVarDecl 0x7fffd83255f0 <line:923:6, col:29> col:29 __s 'const char *restrict'
| |-ParmVarDecl 0x7fffd8325660 <col:34, col:41> col:41 __n 'size_t':'unsigned long'
| `-NoThrowAttr 0x7fffd8325868 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8325a18 </usr/include/stdlib.h:926:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/stdlib.h:926:12 wctomb 'int (char *, wchar_t)' extern
| |-ParmVarDecl 0x7fffd83258c8 <col:20, col:26> col:26 __s 'char *'
| |-ParmVarDecl 0x7fffd8325938 <col:31, col:39> col:39 __wchar 'wchar_t':'int'
| `-NoThrowAttr 0x7fffd8325ac8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8325d40 </usr/include/stdlib.h:930:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/stdlib.h:930:15 mbstowcs 'size_t (wchar_t *restrict, const char *restrict, size_t)' extern
| |-ParmVarDecl 0x7fffd8325b20 <col:25, col:46> col:46 __pwcs 'wchar_t *restrict'
| |-ParmVarDecl 0x7fffd8325b98 <line:931:4, col:27> col:27 __s 'const char *restrict'
| |-ParmVarDecl 0x7fffd8325c08 <col:32, col:39> col:39 __n 'size_t':'unsigned long'
| `-NoThrowAttr 0x7fffd8325df8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd83260a0 </usr/include/stdlib.h:933:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/stdlib.h:933:15 wcstombs 'size_t (char *restrict, const wchar_t *restrict, size_t)' extern
| |-ParmVarDecl 0x7fffd8325e58 <col:25, col:42> col:42 __s 'char *restrict'
| |-ParmVarDecl 0x7fffd8325ef8 <line:934:4, col:30> col:30 __pwcs 'const wchar_t *restrict'
| |-ParmVarDecl 0x7fffd8325f68 <col:38, col:45> col:45 __n 'size_t':'unsigned long'
| `-NoThrowAttr 0x7fffd8326158 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8326268 </usr/include/stdlib.h:943:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:943:12 rpmatch 'int (const char *)' extern
| |-ParmVarDecl 0x7fffd83261b8 <col:21, col:33> col:33 __response 'const char *'
| |-NonNullAttr 0x7fffd8326310 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:943:66> 0
| `-NoThrowAttr 0x7fffd8326370 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8326658 </usr/include/stdlib.h:954:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:954:12 getsubopt 'int (char **restrict, char *const *restrict, char **restrict)' extern
| |-ParmVarDecl 0x7fffd8326398 <col:23, col:41> col:41 __optionp 'char **restrict'
| |-ParmVarDecl 0x7fffd8326440 <line:955:9, col:33> col:33 __tokens 'char *const *restrict'
| |-ParmVarDecl 0x7fffd83264b8 <line:956:9, col:27> col:27 __valuep 'char **restrict'
| |-NonNullAttr 0x7fffd8326710 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:957:33> 0 1 2
| `-NoThrowAttr 0x7fffd8326778 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd83269f8 </usr/include/stdlib.h:1006:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/stdlib.h:1006:12 getloadavg 'int (double *, int)' extern
| |-ParmVarDecl 0x7fffd8326840 <col:24, col:41> col:31 __loadavg 'double *':'double *'
| |-ParmVarDecl 0x7fffd83268b8 <col:44, col:48> col:48 __nelem 'int'
| |-NonNullAttr 0x7fffd8326aa8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/stdlib.h:1007:27> 0
| `-NoThrowAttr 0x7fffd8326b00 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8326dd0 </usr/include/assert.h:69:1, line:71:43> line:69:13 used __assert_fail 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x7fffd8326b28 <col:28, col:40> col:40 __assertion 'const char *'
| |-ParmVarDecl 0x7fffd8326ba0 <col:53, col:65> col:65 __file 'const char *'
| |-ParmVarDecl 0x7fffd8326c18 <line:70:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x7fffd8326c90 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x7fffd8326e90 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd83271a0 </usr/include/assert.h:74:1, line:76:43> line:74:13 __assert_perror_fail 'void (int, const char *, unsigned int, const char *) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x7fffd8326ef0 <col:35, col:39> col:39 __errnum 'int'
| |-ParmVarDecl 0x7fffd8326f68 <col:49, col:61> col:61 __file 'const char *'
| |-ParmVarDecl 0x7fffd8326fe0 <line:75:7, col:20> col:20 __line 'unsigned int'
| |-ParmVarDecl 0x7fffd8327058 <col:28, col:40> col:40 __function 'const char *'
| `-NoThrowAttr 0x7fffd8327260 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd83274e0 </usr/include/assert.h:81:1, line:82:43> line:81:13 __assert 'void (const char *, const char *, int) __attribute__((noreturn))' extern
| |-ParmVarDecl 0x7fffd83272c0 <col:23, col:35> col:35 __assertion 'const char *'
| |-ParmVarDecl 0x7fffd8327338 <col:48, col:60> col:60 __file 'const char *'
| |-ParmVarDecl 0x7fffd83273b0 <col:68, col:72> col:72 __line 'int'
| `-NoThrowAttr 0x7fffd8327598 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd832c028 </usr/include/string.h:42:14> col:14 implicit used memcpy 'void *(void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x7fffd832c0c8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x7fffd832c128 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x7fffd832c188 <<invalid sloc>> <invalid sloc> 'unsigned long'
|-FunctionDecl 0x7fffd832c200 prev 0x7fffd832c028 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:42:14 used memcpy 'void *(void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x7fffd83275f8 <col:22, col:39> col:39 __dest 'void *restrict'
| |-ParmVarDecl 0x7fffd8327670 <col:47, col:70> col:70 __src 'const void *restrict'
| |-ParmVarDecl 0x7fffd83276e0 <line:43:8, col:15> col:15 __n 'size_t':'unsigned long'
| |-NonNullAttr 0x7fffd832c2b8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:43:44> 0 1
| `-NoThrowAttr 0x7fffd832c310 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd832c548 </usr/include/string.h:46:14> col:14 implicit memmove 'void *(void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x7fffd832c5e8 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x7fffd832c648 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x7fffd832c6a8 <<invalid sloc>> <invalid sloc> 'unsigned long'
|-FunctionDecl 0x7fffd832c720 prev 0x7fffd832c548 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:46:14 memmove 'void *(void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x7fffd832c338 <col:23, col:29> col:29 __dest 'void *'
| |-ParmVarDecl 0x7fffd832c3b0 <col:37, col:49> col:49 __src 'const void *'
| |-ParmVarDecl 0x7fffd832c420 <col:56, col:63> col:63 __n 'size_t':'unsigned long'
| |-NonNullAttr 0x7fffd832c7d8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:47:30> 0 1
| `-NoThrowAttr 0x7fffd832c830 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd832cb48 </usr/include/string.h:53:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:53:14 memccpy 'void *(void *restrict, const void *restrict, int, size_t)' extern
| |-ParmVarDecl 0x7fffd832c858 <col:23, col:40> col:40 __dest 'void *restrict'
| |-ParmVarDecl 0x7fffd832c8d0 <col:48, col:71> col:71 __src 'const void *restrict'
| |-ParmVarDecl 0x7fffd832c948 <line:54:9, col:13> col:13 __c 'int'
| |-ParmVarDecl 0x7fffd832c9b8 <col:18, col:25> col:25 __n 'size_t':'unsigned long'
| |-NonNullAttr 0x7fffd832cc08 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:55:30> 0 1
| `-NoThrowAttr 0x7fffd832cc60 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd832cf60 </usr/include/string.h:60:14> col:14 implicit used memset 'void *(void *, int, unsigned long)' extern
| |-ParmVarDecl 0x7fffd832d000 <<invalid sloc>> <invalid sloc> 'void *'
| |-ParmVarDecl 0x7fffd832d060 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x7fffd832d0c0 <<invalid sloc>> <invalid sloc> 'unsigned long'
|-FunctionDecl 0x7fffd832d138 prev 0x7fffd832cf60 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:60:14 used memset 'void *(void *, int, unsigned long)' extern
| |-ParmVarDecl 0x7fffd832cc88 <col:22, col:28> col:28 __s 'void *'
| |-ParmVarDecl 0x7fffd832cd00 <col:33, col:37> col:37 __c 'int'
| |-ParmVarDecl 0x7fffd832cd70 <col:42, col:49> col:49 __n 'size_t':'unsigned long'
| |-NonNullAttr 0x7fffd832d1f0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:60:75> 0
| `-NoThrowAttr 0x7fffd832d250 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd832d4d8 </usr/include/string.h:63:12> col:12 implicit memcmp 'int (const void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x7fffd832d578 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x7fffd832d5d8 <<invalid sloc>> <invalid sloc> 'const void *'
| `-ParmVarDecl 0x7fffd832d638 <<invalid sloc>> <invalid sloc> 'unsigned long'
|-FunctionDecl 0x7fffd832d6b0 prev 0x7fffd832d4d8 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:63:12 memcmp 'int (const void *, const void *, unsigned long)' extern
| |-ParmVarDecl 0x7fffd832d278 <col:20, col:32> col:32 __s1 'const void *'
| |-ParmVarDecl 0x7fffd832d2f0 <col:38, col:50> col:50 __s2 'const void *'
| |-ParmVarDecl 0x7fffd832d360 <col:56, col:63> col:63 __n 'size_t':'unsigned long'
| |-NonNullAttr 0x7fffd832d768 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:64:49> 0 1
| |-PureAttr 0x7fffd832d7c0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:221:45>
| `-NoThrowAttr 0x7fffd832d7d0 <line:55:35>
|-FunctionDecl 0x7fffd832da38 </usr/include/string.h:90:14> col:14 implicit memchr 'void *(const void *, int, unsigned long)' extern
| |-ParmVarDecl 0x7fffd832dad8 <<invalid sloc>> <invalid sloc> 'const void *'
| |-ParmVarDecl 0x7fffd832db38 <<invalid sloc>> <invalid sloc> 'int'
| `-ParmVarDecl 0x7fffd832db98 <<invalid sloc>> <invalid sloc> 'unsigned long'
|-FunctionDecl 0x7fffd832dc10 prev 0x7fffd832da38 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:90:14 memchr 'void *(const void *, int, unsigned long)' extern
| |-ParmVarDecl 0x7fffd832d7f8 <col:22, col:34> col:34 __s 'const void *'
| |-ParmVarDecl 0x7fffd832d870 <col:39, col:43> col:43 __c 'int'
| |-ParmVarDecl 0x7fffd832d8e0 <col:48, col:55> col:55 __n 'size_t':'unsigned long'
| |-NonNullAttr 0x7fffd832dcc8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:91:47> 0
| |-PureAttr 0x7fffd832dd20 </usr/include/x86_64-linux-gnu/sys/cdefs.h:221:45>
| `-NoThrowAttr 0x7fffd832dd30 <line:55:35>
|-FunctionDecl 0x7fffd832df70 </usr/include/string.h:121:14> col:14 implicit strcpy 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x7fffd832e010 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x7fffd832e070 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x7fffd832e0e0 prev 0x7fffd832df70 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:121:14 strcpy 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x7fffd832dd58 <col:22, col:39> col:39 __dest 'char *restrict'
| |-ParmVarDecl 0x7fffd832ddd0 <col:47, col:70> col:70 __src 'const char *restrict'
| |-NonNullAttr 0x7fffd832e190 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:122:30> 0 1
| `-NoThrowAttr 0x7fffd832e1f0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd832e478 </usr/include/string.h:124:14> col:14 implicit strncpy 'char *(char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x7fffd832e518 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x7fffd832e578 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x7fffd832e5d8 <<invalid sloc>> <invalid sloc> 'unsigned long'
|-FunctionDecl 0x7fffd832e650 prev 0x7fffd832e478 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:124:14 strncpy 'char *(char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x7fffd832e218 <col:23, col:40> col:40 __dest 'char *restrict'
| |-ParmVarDecl 0x7fffd832e290 <line:125:9, col:32> col:32 __src 'const char *restrict'
| |-ParmVarDecl 0x7fffd832e300 <col:39, col:46> col:46 __n 'size_t':'unsigned long'
| |-NonNullAttr 0x7fffd832e708 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:126:30> 0 1
| `-NoThrowAttr 0x7fffd832e760 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd832e8d8 </usr/include/string.h:129:14> col:14 implicit strcat 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x7fffd832e978 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x7fffd832e9d8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x7fffd832ea48 prev 0x7fffd832e8d8 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:129:14 strcat 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x7fffd832e788 <col:22, col:39> col:39 __dest 'char *restrict'
| |-ParmVarDecl 0x7fffd832e800 <col:47, col:70> col:70 __src 'const char *restrict'
| |-NonNullAttr 0x7fffd832eaf8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:130:30> 0 1
| `-NoThrowAttr 0x7fffd832eb50 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd832ed40 </usr/include/string.h:132:14> col:14 implicit strncat 'char *(char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x7fffd832ede0 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x7fffd832ee40 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x7fffd832eea0 <<invalid sloc>> <invalid sloc> 'unsigned long'
|-FunctionDecl 0x7fffd832ef80 prev 0x7fffd832ed40 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:132:14 strncat 'char *(char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x7fffd832eb78 <col:23, col:40> col:40 __dest 'char *restrict'
| |-ParmVarDecl 0x7fffd832ebf0 <col:48, col:71> col:71 __src 'const char *restrict'
| |-ParmVarDecl 0x7fffd832ec60 <line:133:9, col:16> col:16 __n 'size_t':'unsigned long'
| |-NonNullAttr 0x7fffd832f038 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:133:45> 0 1
| `-NoThrowAttr 0x7fffd832f090 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd832f248 </usr/include/string.h:136:12> col:12 implicit strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x7fffd832f2e8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x7fffd832f348 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x7fffd832f3b8 prev 0x7fffd832f248 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:136:12 strcmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x7fffd832f0b8 <col:20, col:32> col:32 __s1 'const char *'
| |-ParmVarDecl 0x7fffd832f130 <col:38, col:50> col:50 __s2 'const char *'
| |-NonNullAttr 0x7fffd832f468 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:137:49> 0 1
| |-PureAttr 0x7fffd832f4c0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:221:45>
| `-NoThrowAttr 0x7fffd832f4d0 <line:55:35>
|-FunctionDecl 0x7fffd832f758 </usr/include/string.h:139:12> col:12 implicit strncmp 'int (const char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x7fffd832f7f8 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x7fffd832f858 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x7fffd832f8b8 <<invalid sloc>> <invalid sloc> 'unsigned long'
|-FunctionDecl 0x7fffd832f930 prev 0x7fffd832f758 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:139:12 strncmp 'int (const char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x7fffd832f4f8 <col:21, col:33> col:33 __s1 'const char *'
| |-ParmVarDecl 0x7fffd832f570 <col:39, col:51> col:51 __s2 'const char *'
| |-ParmVarDecl 0x7fffd832f5e0 <col:57, col:64> col:64 __n 'size_t':'unsigned long'
| |-NonNullAttr 0x7fffd832f9e8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:140:49> 0 1
| |-PureAttr 0x7fffd832fa40 </usr/include/x86_64-linux-gnu/sys/cdefs.h:221:45>
| `-NoThrowAttr 0x7fffd832fa50 <line:55:35>
|-FunctionDecl 0x7fffd832fbc8 </usr/include/string.h:143:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:143:12 strcoll 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x7fffd832fa78 <col:21, col:33> col:33 __s1 'const char *'
| |-ParmVarDecl 0x7fffd832faf0 <col:39, col:51> col:51 __s2 'const char *'
| |-NonNullAttr 0x7fffd832fc78 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:144:49> 0 1
| |-PureAttr 0x7fffd832fcd0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:221:45>
| `-NoThrowAttr 0x7fffd832fce0 <line:55:35>
|-FunctionDecl 0x7fffd832ff90 </usr/include/string.h:146:15> col:15 implicit strxfrm 'unsigned long (char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x7fffd8330030 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x7fffd8330090 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x7fffd83300f0 <<invalid sloc>> <invalid sloc> 'unsigned long'
|-FunctionDecl 0x7fffd8330168 prev 0x7fffd832ff90 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:146:15 strxfrm 'unsigned long (char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x7fffd832fd08 <col:24, col:41> col:41 __dest 'char *restrict'
| |-ParmVarDecl 0x7fffd832fd80 <line:147:10, col:33> col:33 __src 'const char *restrict'
| |-ParmVarDecl 0x7fffd832fdf0 <col:40, col:47> col:47 __n 'size_t':'unsigned long'
| |-NonNullAttr 0x7fffd8330220 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:148:27> 1
| `-NoThrowAttr 0x7fffd8330280 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-RecordDecl 0x7fffd8330290 </usr/include/x86_64-linux-gnu/bits/types/__locale_t.h:28:1, line:40:1> line:28:8 struct __locale_struct definition
| |-RecordDecl 0x7fffd8330340 parent 0x7fffd81de218 <line:31:3, col:10> col:10 struct __locale_data
| |-FieldDecl 0x7fffd8330560 <col:3, col:37> col:25 __locales 'struct __locale_data *[13]'
| |-FieldDecl 0x7fffd83305f0 <line:34:3, col:29> col:29 __ctype_b 'const unsigned short *'
| |-FieldDecl 0x7fffd8330650 <line:35:3, col:14> col:14 __ctype_tolower 'const int *'
| |-FieldDecl 0x7fffd83306b0 <line:36:3, col:14> col:14 __ctype_toupper 'const int *'
| `-FieldDecl 0x7fffd8330780 <line:39:3, col:25> col:15 __names 'const char *[13]'
|-TypedefDecl 0x7fffd8330880 <line:42:1, col:33> col:33 referenced __locale_t 'struct __locale_struct *'
| `-PointerType 0x7fffd8330830 'struct __locale_struct *'
|   `-ElaboratedType 0x7fffd83307d0 'struct __locale_struct' sugar
|     `-RecordType 0x7fffd8330320 'struct __locale_struct'
|       `-Record 0x7fffd8330290 '__locale_struct'
|-TypedefDecl 0x7fffd8330910 </usr/include/x86_64-linux-gnu/bits/types/locale_t.h:24:1, col:20> col:20 referenced locale_t '__locale_t':'struct __locale_struct *'
| `-TypedefType 0x7fffd83308e0 '__locale_t' sugar
|   |-Typedef 0x7fffd8330880 '__locale_t'
|   `-PointerType 0x7fffd8330830 'struct __locale_struct *'
|     `-ElaboratedType 0x7fffd83307d0 'struct __locale_struct' sugar
|       `-RecordType 0x7fffd8330320 'struct __locale_struct'
|         `-Record 0x7fffd8330290 '__locale_struct'
|-FunctionDecl 0x7fffd8330c28 </usr/include/string.h:155:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:155:12 strcoll_l 'int (const char *, const char *, locale_t)' extern
| |-ParmVarDecl 0x7fffd8330980 <col:23, col:35> col:35 __s1 'const char *'
| |-ParmVarDecl 0x7fffd83309f8 <col:41, col:53> col:53 __s2 'const char *'
| |-ParmVarDecl 0x7fffd8330a90 <col:59, col:68> col:68 __l 'locale_t':'struct __locale_struct *'
| |-NonNullAttr 0x7fffd8330ce0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:156:52> 0 1 2
| |-PureAttr 0x7fffd8330d48 </usr/include/x86_64-linux-gnu/sys/cdefs.h:221:45>
| `-NoThrowAttr 0x7fffd8330d58 <line:55:35>
|-FunctionDecl 0x7fffd8331db0 </usr/include/string.h:159:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:159:15 strxfrm_l 'size_t (char *, const char *, size_t, locale_t)' extern
| |-ParmVarDecl 0x7fffd8330d80 <col:26, col:32> col:32 __dest 'char *'
| |-ParmVarDecl 0x7fffd8330df8 <col:40, col:52> col:52 __src 'const char *'
| |-ParmVarDecl 0x7fffd8330e68 <col:59, col:66> col:66 __n 'size_t':'unsigned long'
| |-ParmVarDecl 0x7fffd8330ed8 <line:160:5, col:14> col:14 __l 'locale_t':'struct __locale_struct *'
| |-NonNullAttr 0x7fffd8331e70 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:160:43> 1 3
| `-NoThrowAttr 0x7fffd8331ed0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8331fa8 </usr/include/string.h:166:14> col:14 implicit strdup 'char *(const char *)' extern
| `-ParmVarDecl 0x7fffd8332048 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x7fffd83320b0 prev 0x7fffd8331fa8 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:166:14 strdup 'char *(const char *)' extern
| |-ParmVarDecl 0x7fffd8331ef8 <col:22, col:34> col:34 __s 'const char *'
| |-NonNullAttr 0x7fffd8332158 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:167:48> 0
| |-RestrictAttr 0x7fffd83321b0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:203:47> malloc
| `-NoThrowAttr 0x7fffd83321c0 <line:55:35>
|-FunctionDecl 0x7fffd8332398 </usr/include/string.h:174:14> col:14 implicit strndup 'char *(const char *, unsigned long)' extern
| |-ParmVarDecl 0x7fffd8332438 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x7fffd8332498 <<invalid sloc>> <invalid sloc> 'unsigned long'
|-FunctionDecl 0x7fffd8332508 prev 0x7fffd8332398 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:174:14 strndup 'char *(const char *, unsigned long)' extern
| |-ParmVarDecl 0x7fffd83321e8 <col:23, col:35> col:35 __string 'const char *'
| |-ParmVarDecl 0x7fffd8332258 <col:45, col:52> col:52 __n 'size_t':'unsigned long'
| |-NonNullAttr 0x7fffd83325b8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:175:48> 0
| |-RestrictAttr 0x7fffd8332610 </usr/include/x86_64-linux-gnu/sys/cdefs.h:203:47> malloc
| `-NoThrowAttr 0x7fffd8332620 <line:55:35>
|-FunctionDecl 0x7fffd83327b8 </usr/include/string.h:225:14> col:14 implicit strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x7fffd8332858 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x7fffd83328b8 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x7fffd8332928 prev 0x7fffd83327b8 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:225:14 strchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x7fffd8332648 <col:22, col:34> col:34 __s 'const char *'
| |-ParmVarDecl 0x7fffd83326c0 <col:39, col:43> col:43 __c 'int'
| |-NonNullAttr 0x7fffd83329d8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:226:46> 0
| |-PureAttr 0x7fffd8332a30 </usr/include/x86_64-linux-gnu/sys/cdefs.h:221:45>
| `-NoThrowAttr 0x7fffd8332a40 <line:55:35>
|-FunctionDecl 0x7fffd8332b98 </usr/include/string.h:252:14> col:14 implicit strrchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x7fffd8332c38 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x7fffd8332ce0 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x7fffd8332d50 prev 0x7fffd8332b98 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:252:14 strrchr 'char *(const char *, int)' extern
| |-ParmVarDecl 0x7fffd8332a68 <col:23, col:35> col:35 __s 'const char *'
| |-ParmVarDecl 0x7fffd8332ae0 <col:40, col:44> col:44 __c 'int'
| |-NonNullAttr 0x7fffd8332e00 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:253:46> 0
| |-PureAttr 0x7fffd8332e60 </usr/include/x86_64-linux-gnu/sys/cdefs.h:221:45>
| `-NoThrowAttr 0x7fffd8332e70 <line:55:35>
|-FunctionDecl 0x7fffd8333060 </usr/include/string.h:272:15> col:15 implicit strcspn 'unsigned long (const char *, const char *)' extern
| |-ParmVarDecl 0x7fffd8333100 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x7fffd8333160 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x7fffd83331d0 prev 0x7fffd8333060 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:272:15 strcspn 'unsigned long (const char *, const char *)' extern
| |-ParmVarDecl 0x7fffd8332e98 <col:24, col:36> col:36 __s 'const char *'
| |-ParmVarDecl 0x7fffd8332f10 <col:41, col:53> col:53 __reject 'const char *'
| |-NonNullAttr 0x7fffd8333280 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:273:49> 0 1
| |-PureAttr 0x7fffd83332e0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:221:45>
| `-NoThrowAttr 0x7fffd83332f0 <line:55:35>
|-FunctionDecl 0x7fffd8333460 </usr/include/string.h:276:15> col:15 implicit strspn 'unsigned long (const char *, const char *)' extern
| |-ParmVarDecl 0x7fffd8333500 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x7fffd8333560 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x7fffd83335d0 prev 0x7fffd8333460 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:276:15 strspn 'unsigned long (const char *, const char *)' extern
| |-ParmVarDecl 0x7fffd8333318 <col:23, col:35> col:35 __s 'const char *'
| |-ParmVarDecl 0x7fffd8333390 <col:40, col:52> col:52 __accept 'const char *'
| |-NonNullAttr 0x7fffd8333680 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:277:49> 0 1
| |-PureAttr 0x7fffd83336e0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:221:45>
| `-NoThrowAttr 0x7fffd83336f0 <line:55:35>
|-FunctionDecl 0x7fffd83338a8 </usr/include/string.h:302:14> col:14 implicit strpbrk 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x7fffd8333948 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x7fffd83339a8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x7fffd8333a18 prev 0x7fffd83338a8 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:302:14 strpbrk 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x7fffd8333718 <col:23, col:35> col:35 __s 'const char *'
| |-ParmVarDecl 0x7fffd8333790 <col:40, col:52> col:52 __accept 'const char *'
| |-NonNullAttr 0x7fffd8333ac8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:303:49> 0 1
| |-PureAttr 0x7fffd8333b20 </usr/include/x86_64-linux-gnu/sys/cdefs.h:221:45>
| `-NoThrowAttr 0x7fffd8333b30 <line:55:35>
|-FunctionDecl 0x7fffd8334d00 </usr/include/string.h:329:14> col:14 implicit strstr 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x7fffd8334da0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x7fffd8334e00 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x7fffd8334e70 prev 0x7fffd8334d00 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:329:14 strstr 'char *(const char *, const char *)' extern
| |-ParmVarDecl 0x7fffd8333b58 <col:22, col:34> col:34 __haystack 'const char *'
| |-ParmVarDecl 0x7fffd8333bd0 <col:46, col:58> col:58 __needle 'const char *'
| |-NonNullAttr 0x7fffd8334f20 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:330:49> 0 1
| |-PureAttr 0x7fffd8334f80 </usr/include/x86_64-linux-gnu/sys/cdefs.h:221:45>
| `-NoThrowAttr 0x7fffd8334f90 <line:55:35>
|-FunctionDecl 0x7fffd83350e8 </usr/include/string.h:335:14> col:14 implicit strtok 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x7fffd8335188 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x7fffd83351e8 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x7fffd8335258 prev 0x7fffd83350e8 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:335:14 strtok 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x7fffd8334fb8 <col:22, col:39> col:39 __s 'char *restrict'
| |-ParmVarDecl 0x7fffd8335030 <col:44, col:67> col:67 __delim 'const char *restrict'
| |-NonNullAttr 0x7fffd8335308 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:336:27> 1
| `-NoThrowAttr 0x7fffd8335360 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd83355f8 </usr/include/string.h:340:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:340:14 __strtok_r 'char *(char *restrict, const char *restrict, char **restrict)' extern
| |-ParmVarDecl 0x7fffd8335388 <col:26, col:43> col:43 __s 'char *restrict'
| |-ParmVarDecl 0x7fffd8335400 <line:341:5, col:28> col:28 __delim 'const char *restrict'
| |-ParmVarDecl 0x7fffd8335478 <line:342:5, col:23> col:23 __save_ptr 'char **restrict'
| |-NonNullAttr 0x7fffd83356b0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:343:30> 1 2
| `-NoThrowAttr 0x7fffd8335710 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8335908 </usr/include/string.h:345:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:345:14 strtok_r 'char *(char *restrict, const char *restrict, char **restrict)' extern
| |-ParmVarDecl 0x7fffd8335738 <col:24, col:41> col:41 __s 'char *restrict'
| |-ParmVarDecl 0x7fffd83357b0 <col:46, col:69> col:69 __delim 'const char *restrict'
| |-ParmVarDecl 0x7fffd8335828 <line:346:10, col:28> col:28 __save_ptr 'char **restrict'
| |-NonNullAttr 0x7fffd83359c0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:347:30> 1 2
| `-NoThrowAttr 0x7fffd8335a20 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8335b70 </usr/include/string.h:384:15> col:15 implicit used strlen 'unsigned long (const char *)' extern
| `-ParmVarDecl 0x7fffd8335c10 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x7fffd8335d10 prev 0x7fffd8335b70 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:384:15 used strlen 'unsigned long (const char *)' extern
| |-ParmVarDecl 0x7fffd8335a48 <col:23, col:35> col:35 __s 'const char *'
| |-NonNullAttr 0x7fffd8335db8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:385:46> 0
| |-PureAttr 0x7fffd8335e10 </usr/include/x86_64-linux-gnu/sys/cdefs.h:221:45>
| `-NoThrowAttr 0x7fffd8335e20 <line:55:35>
|-FunctionDecl 0x7fffd8335ff0 </usr/include/string.h:390:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:390:15 strnlen 'size_t (const char *, size_t)' extern
| |-ParmVarDecl 0x7fffd8335e48 <col:24, col:36> col:36 __string 'const char *'
| |-ParmVarDecl 0x7fffd8335eb8 <col:46, col:53> col:53 __maxlen 'size_t':'unsigned long'
| |-NonNullAttr 0x7fffd83360a0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:391:46> 0
| |-PureAttr 0x7fffd8336100 </usr/include/x86_64-linux-gnu/sys/cdefs.h:221:45>
| `-NoThrowAttr 0x7fffd8336110 <line:55:35>
|-FunctionDecl 0x7fffd8336208 </usr/include/string.h:396:14> col:14 implicit strerror 'char *(int)' extern
| `-ParmVarDecl 0x7fffd83362a8 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x7fffd8336310 prev 0x7fffd8336208 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/string.h:396:14 strerror 'char *(int)' extern
| |-ParmVarDecl 0x7fffd8336138 <col:24, col:28> col:28 __errnum 'int'
| `-NoThrowAttr 0x7fffd83363b8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd83366d8 </usr/include/string.h:409:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:409:28 strerror_r 'int (int, char *, size_t)' extern
| |-ParmVarDecl 0x7fffd8336418 <line:410:8, col:12> col:12 __errnum 'int'
| |-ParmVarDecl 0x7fffd8336490 <col:22, col:28> col:28 __buf 'char *'
| |-ParmVarDecl 0x7fffd8336500 <col:35, col:42> col:42 __buflen 'size_t':'unsigned long'
| |-AsmLabelAttr 0x7fffd8336778 <<scratch space>:217:1> "__xpg_strerror_r"
| |-NonNullAttr 0x7fffd83367f0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:411:38> 1
| `-NoThrowAttr 0x7fffd8336818 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd83369c8 </usr/include/string.h:427:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/string.h:427:14 strerror_l 'char *(int, locale_t)' extern
| |-ParmVarDecl 0x7fffd8336840 <col:26, col:30> col:30 __errnum 'int'
| |-ParmVarDecl 0x7fffd83368b0 <col:40, col:49> col:49 __l 'locale_t':'struct __locale_struct *'
| `-NoThrowAttr 0x7fffd8336a78 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd83380d0 </usr/include/strings.h:34:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/strings.h:34:12 bcmp 'int (const void *, const void *, size_t)' extern
| |-ParmVarDecl 0x7fffd8336ad8 <col:18, col:30> col:30 __s1 'const void *'
| |-ParmVarDecl 0x7fffd8336b50 <col:36, col:48> col:48 __s2 'const void *'
| |-ParmVarDecl 0x7fffd8336bc0 <col:54, col:61> col:61 __n 'size_t':'unsigned long'
| |-NonNullAttr 0x7fffd8338188 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/strings.h:35:49> 0 1
| |-PureAttr 0x7fffd83381e0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:221:45>
| `-NoThrowAttr 0x7fffd83381f0 <line:55:35>
|-FunctionDecl 0x7fffd8338470 </usr/include/strings.h:38:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/strings.h:38:13 bcopy 'void (const void *, void *, size_t)' extern
| |-ParmVarDecl 0x7fffd8338218 <col:20, col:32> col:32 __src 'const void *'
| |-ParmVarDecl 0x7fffd8338290 <col:39, col:45> col:45 __dest 'void *'
| |-ParmVarDecl 0x7fffd8338300 <col:53, col:60> col:60 __n 'size_t':'unsigned long'
| |-NonNullAttr 0x7fffd8338528 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/strings.h:39:27> 0 1
| `-NoThrowAttr 0x7fffd8338580 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8338750 </usr/include/strings.h:42:13> col:13 implicit bzero 'void (void *, unsigned long)' extern
| |-ParmVarDecl 0x7fffd83387f0 <<invalid sloc>> <invalid sloc> 'void *'
| `-ParmVarDecl 0x7fffd8338850 <<invalid sloc>> <invalid sloc> 'unsigned long'
|-FunctionDecl 0x7fffd83388c0 prev 0x7fffd8338750 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/strings.h:42:13 bzero 'void (void *, unsigned long)' extern
| |-ParmVarDecl 0x7fffd83385a8 <col:20, col:26> col:26 __s 'void *'
| |-ParmVarDecl 0x7fffd8338618 <col:31, col:38> col:38 __n 'size_t':'unsigned long'
| |-NonNullAttr 0x7fffd8338970 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/strings.h:42:64> 0
| `-NoThrowAttr 0x7fffd83389d0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd8338b28 </usr/include/strings.h:68:14> col:14 implicit index 'char *(const char *, int)' extern
| |-ParmVarDecl 0x7fffd8338bc8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x7fffd8338c28 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x7fffd8338c98 prev 0x7fffd8338b28 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/strings.h:68:14 index 'char *(const char *, int)' extern
| |-ParmVarDecl 0x7fffd83389f8 <col:21, col:33> col:33 __s 'const char *'
| |-ParmVarDecl 0x7fffd8338a70 <col:38, col:42> col:42 __c 'int'
| |-NonNullAttr 0x7fffd8338d48 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/strings.h:69:46> 0
| |-PureAttr 0x7fffd8338da0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:221:45>
| `-NoThrowAttr 0x7fffd8338db0 <line:55:35>
|-FunctionDecl 0x7fffd8338f08 </usr/include/strings.h:96:14> col:14 implicit rindex 'char *(const char *, int)' extern
| |-ParmVarDecl 0x7fffd8338fa8 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x7fffd8339008 <<invalid sloc>> <invalid sloc> 'int'
|-FunctionDecl 0x7fffd83390e0 prev 0x7fffd8338f08 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/strings.h:96:14 rindex 'char *(const char *, int)' extern
| |-ParmVarDecl 0x7fffd8338dd8 <col:22, col:34> col:34 __s 'const char *'
| |-ParmVarDecl 0x7fffd8338e50 <col:39, col:43> col:43 __c 'int'
| |-NonNullAttr 0x7fffd8339190 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/strings.h:97:46> 0
| |-PureAttr 0x7fffd83391f0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:221:45>
| `-NoThrowAttr 0x7fffd8339200 <line:55:35>
|-FunctionDecl 0x7fffd83392b8 </usr/include/strings.h:104:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:228:56> /usr/include/strings.h:104:12 ffs 'int (int)' extern
| |-ParmVarDecl 0x7fffd8339228 <col:17, col:21> col:21 __i 'int'
| |-ConstAttr 0x7fffd8339360 </usr/include/x86_64-linux-gnu/sys/cdefs.h:228:46>
| `-NoThrowAttr 0x7fffd83393a8 <line:55:35>
|-FunctionDecl 0x7fffd8339498 </usr/include/strings.h:110:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:228:56> /usr/include/strings.h:110:12 ffsl 'int (long)' extern
| |-ParmVarDecl 0x7fffd83393d0 <col:18, col:27> col:27 __l 'long'
| |-ConstAttr 0x7fffd8339540 </usr/include/x86_64-linux-gnu/sys/cdefs.h:228:46>
| `-NoThrowAttr 0x7fffd8339588 <line:55:35>
|-FunctionDecl 0x7fffd8339678 </usr/include/strings.h:111:15, /usr/include/x86_64-linux-gnu/sys/cdefs.h:228:56> /usr/include/strings.h:111:26 ffsll 'int (long long)' extern
| |-ParmVarDecl 0x7fffd83395b0 <col:33, col:47> col:47 __ll 'long long'
| |-ConstAttr 0x7fffd8339720 </usr/include/x86_64-linux-gnu/sys/cdefs.h:228:46>
| `-NoThrowAttr 0x7fffd8339768 <line:55:35>
|-FunctionDecl 0x7fffd83398e0 </usr/include/strings.h:116:12> col:12 implicit strcasecmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x7fffd8339980 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x7fffd83399e0 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x7fffd8339a50 prev 0x7fffd83398e0 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/strings.h:116:12 strcasecmp 'int (const char *, const char *)' extern
| |-ParmVarDecl 0x7fffd8339790 <col:24, col:36> col:36 __s1 'const char *'
| |-ParmVarDecl 0x7fffd8339808 <col:42, col:54> col:54 __s2 'const char *'
| |-NonNullAttr 0x7fffd8339b00 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/strings.h:117:49> 0 1
| |-PureAttr 0x7fffd8339b60 </usr/include/x86_64-linux-gnu/sys/cdefs.h:221:45>
| `-NoThrowAttr 0x7fffd8339b70 <line:55:35>
|-FunctionDecl 0x7fffd8339d60 </usr/include/strings.h:120:12> col:12 implicit strncasecmp 'int (const char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x7fffd8339e00 <<invalid sloc>> <invalid sloc> 'const char *'
| |-ParmVarDecl 0x7fffd8339e60 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x7fffd8339ec0 <<invalid sloc>> <invalid sloc> 'unsigned long'
|-FunctionDecl 0x7fffd8339f38 prev 0x7fffd8339d60 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/strings.h:120:12 strncasecmp 'int (const char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x7fffd8339b98 <col:25, col:37> col:37 __s1 'const char *'
| |-ParmVarDecl 0x7fffd8339c10 <col:43, col:55> col:55 __s2 'const char *'
| |-ParmVarDecl 0x7fffd8339c80 <col:61, col:68> col:68 __n 'size_t':'unsigned long'
| |-NonNullAttr 0x7fffd8339ff0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/strings.h:121:49> 0 1
| |-PureAttr 0x7fffd833a050 </usr/include/x86_64-linux-gnu/sys/cdefs.h:221:45>
| `-NoThrowAttr 0x7fffd833a060 <line:55:35>
|-FunctionDecl 0x7fffd82a57d8 </usr/include/strings.h:128:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/strings.h:128:12 strcasecmp_l 'int (const char *, const char *, locale_t)' extern
| |-ParmVarDecl 0x7fffd82a55f0 <col:26, col:38> col:38 __s1 'const char *'
| |-ParmVarDecl 0x7fffd82a5668 <col:44, col:56> col:56 __s2 'const char *'
| |-ParmVarDecl 0x7fffd82a56d8 <col:62, col:71> col:71 __loc 'locale_t':'struct __locale_struct *'
| |-NonNullAttr 0x7fffd82a5890 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/strings.h:129:52> 0 1 2
| |-PureAttr 0x7fffd82a58f8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:221:45>
| `-NoThrowAttr 0x7fffd82a5908 <line:55:35>
|-FunctionDecl 0x7fffd82a5c38 </usr/include/strings.h:133:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/strings.h:133:12 strncasecmp_l 'int (const char *, const char *, size_t, locale_t)' extern
| |-ParmVarDecl 0x7fffd82a5930 <col:27, col:39> col:39 __s1 'const char *'
| |-ParmVarDecl 0x7fffd82a59a8 <col:45, col:57> col:57 __s2 'const char *'
| |-ParmVarDecl 0x7fffd82a5a18 <line:134:6, col:13> col:13 __n 'size_t':'unsigned long'
| |-ParmVarDecl 0x7fffd82a5a88 <col:18, col:27> col:27 __loc 'locale_t':'struct __locale_struct *'
| |-NonNullAttr 0x7fffd82a5cf8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/strings.h:135:52> 0 1 3
| |-PureAttr 0x7fffd82a5d58 </usr/include/x86_64-linux-gnu/sys/cdefs.h:221:45>
| `-NoThrowAttr 0x7fffd82a5d68 <line:55:35>
|-FunctionDecl 0x7fffd82a5eb0 </usr/include/string.h:435:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:435:13 explicit_bzero 'void (void *, size_t)' extern
| |-ParmVarDecl 0x7fffd82a5d90 <col:29, col:35> col:35 __s 'void *'
| |-ParmVarDecl 0x7fffd82a5e00 <col:40, col:47> col:47 __n 'size_t':'unsigned long'
| |-NonNullAttr 0x7fffd82a5f60 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:435:73> 0
| `-NoThrowAttr 0x7fffd82a5fc0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a61b8 </usr/include/string.h:439:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:439:14 strsep 'char *(char **restrict, const char *restrict)' extern
| |-ParmVarDecl 0x7fffd82a5fe8 <col:22, col:40> col:40 __stringp 'char **restrict'
| |-ParmVarDecl 0x7fffd82a6060 <line:440:8, col:31> col:31 __delim 'const char *restrict'
| |-NonNullAttr 0x7fffd82a6268 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:441:30> 0 1
| `-NoThrowAttr 0x7fffd82a62c0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a6378 </usr/include/string.h:446:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:55:54> /usr/include/string.h:446:14 strsignal 'char *(int)' extern
| |-ParmVarDecl 0x7fffd82a62e8 <col:25, col:29> col:29 __sig 'int'
| `-NoThrowAttr 0x7fffd82a6420 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a6600 </usr/include/string.h:449:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:449:14 __stpcpy 'char *(char *restrict, const char *restrict)' extern
| |-ParmVarDecl 0x7fffd82a6480 <col:24, col:41> col:41 __dest 'char *restrict'
| |-ParmVarDecl 0x7fffd82a64f8 <col:49, col:72> col:72 __src 'const char *restrict'
| |-NonNullAttr 0x7fffd82a66b0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:450:30> 0 1
| `-NoThrowAttr 0x7fffd82a6710 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a6888 </usr/include/string.h:451:14> col:14 implicit stpcpy 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x7fffd82a6928 <<invalid sloc>> <invalid sloc> 'char *'
| `-ParmVarDecl 0x7fffd82a6988 <<invalid sloc>> <invalid sloc> 'const char *'
|-FunctionDecl 0x7fffd82a69f8 prev 0x7fffd82a6888 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:451:14 stpcpy 'char *(char *, const char *)' extern
| |-ParmVarDecl 0x7fffd82a6738 <col:22, col:39> col:39 __dest 'char *restrict'
| |-ParmVarDecl 0x7fffd82a67b0 <col:47, col:70> col:70 __src 'const char *restrict'
| |-NonNullAttr 0x7fffd82a6aa8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:452:30> 0 1
| `-NoThrowAttr 0x7fffd82a6b00 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a6cf0 </usr/include/string.h:456:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:456:14 __stpncpy 'char *(char *restrict, const char *restrict, size_t)' extern
| |-ParmVarDecl 0x7fffd82a6b28 <col:25, col:42> col:42 __dest 'char *restrict'
| |-ParmVarDecl 0x7fffd82a6ba0 <line:457:4, col:27> col:27 __src 'const char *restrict'
| |-ParmVarDecl 0x7fffd82a6c10 <col:34, col:41> col:41 __n 'size_t':'unsigned long'
| |-NonNullAttr 0x7fffd82a6da8 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:458:30> 0 1
| `-NoThrowAttr 0x7fffd82a6e00 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-FunctionDecl 0x7fffd82a6ff0 </usr/include/string.h:459:14> col:14 implicit stpncpy 'char *(char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x7fffd82a7090 <<invalid sloc>> <invalid sloc> 'char *'
| |-ParmVarDecl 0x7fffd82a70f0 <<invalid sloc>> <invalid sloc> 'const char *'
| `-ParmVarDecl 0x7fffd82a7150 <<invalid sloc>> <invalid sloc> 'unsigned long'
|-FunctionDecl 0x7fffd82a71c8 prev 0x7fffd82a6ff0 <col:1, /usr/include/x86_64-linux-gnu/sys/cdefs.h:288:63> /usr/include/string.h:459:14 stpncpy 'char *(char *, const char *, unsigned long)' extern
| |-ParmVarDecl 0x7fffd82a6e28 <col:23, col:40> col:40 __dest 'char *restrict'
| |-ParmVarDecl 0x7fffd82a6ea0 <line:460:9, col:32> col:32 __src 'const char *restrict'
| |-ParmVarDecl 0x7fffd82a6f10 <col:39, col:46> col:46 __n 'size_t':'unsigned long'
| |-NonNullAttr 0x7fffd82a7280 </usr/include/x86_64-linux-gnu/sys/cdefs.h:288:44, /usr/include/string.h:461:30> 0 1
| `-NoThrowAttr 0x7fffd82a72e0 </usr/include/x86_64-linux-gnu/sys/cdefs.h:55:35>
|-RecordDecl 0x7fffd82a7318 <././stb/stb_truetype.h:509:9, line:514:1> line:509:9 struct definition
| |-FieldDecl 0x7fffd82a7400 <line:511:5, col:20> col:20 referenced data 'unsigned char *'
| |-FieldDecl 0x7fffd82a7460 <line:512:5, col:9> col:9 referenced cursor 'int'
| `-FieldDecl 0x7fffd82a74c0 <line:513:5, col:9> col:9 referenced size 'int'
|-TypedefDecl 0x7fffd82a7560 <line:509:1, line:514:3> col:3 referenced stbtt__buf 'struct stbtt__buf':'stbtt__buf'
| `-ElaboratedType 0x7fffd82a7510 'struct stbtt__buf' sugar
|   `-RecordType 0x7fffd82a73a0 'stbtt__buf'
|     `-Record 0x7fffd82a7318 ''
|-RecordDecl 0x7fffd82a7610 <line:523:9, line:527:1> line:523:9 struct definition
| |-FullComment 0x7fffd8482ea0 <line:516:4, col:78>
| | `-ParagraphComment 0x7fffd8482e70 <col:4, col:78>
| |   `-TextComment 0x7fffd8482e40 <col:4, col:78> Text="///////////////////////////////////////////////////////////////////////////"
| |-FieldDecl 0x7fffd82a76d8 <line:525:5, col:20> col:20 referenced x0 'unsigned short'
| |-FieldDecl 0x7fffd82a7738 <col:5, col:23> col:23 referenced y0 'unsigned short'
| |-FieldDecl 0x7fffd82a7798 <col:5, col:26> col:26 referenced x1 'unsigned short'
| |-FieldDecl 0x7fffd82a77f8 <col:5, col:29> col:29 referenced y1 'unsigned short'
| |-FieldDecl 0x7fffd82a7858 <line:526:5, col:11> col:11 referenced xoff 'float'
| |-FieldDecl 0x7fffd82a78b8 <col:5, col:16> col:16 referenced yoff 'float'
| `-FieldDecl 0x7fffd82a7918 <col:5, col:21> col:21 referenced xadvance 'float'
|-TypedefDecl 0x7fffd82a79b0 <line:523:1, line:527:3> col:3 referenced stbtt_bakedchar 'struct stbtt_bakedchar':'stbtt_bakedchar'
| `-ElaboratedType 0x7fffd82a7960 'struct stbtt_bakedchar' sugar
|   `-RecordType 0x7fffd82a76a0 'stbtt_bakedchar'
|     `-Record 0x7fffd82a7610 ''
|-FunctionDecl 0x7fffd82a8068 <line:501:19, line:533:61> line:529:15 stbtt_BakeFontBitmap 'int (const unsigned char *, int, float, unsigned char *, int, int, int, int, stbtt_bakedchar *)' extern
| |-ParmVarDecl 0x7fffd82a7a60 <col:36, col:57> col:57 data 'const unsigned char *'
| |-ParmVarDecl 0x7fffd82a7ad8 <col:63, col:67> col:67 offset 'int'
| |-ParmVarDecl 0x7fffd82a7b50 <line:530:36, col:42> col:42 pixel_height 'float'
| |-ParmVarDecl 0x7fffd82a7bc8 <line:531:36, col:51> col:51 pixels 'unsigned char *'
| |-ParmVarDecl 0x7fffd82a7c40 <col:59, col:63> col:63 pw 'int'
| |-ParmVarDecl 0x7fffd82a7cb8 <col:67, col:71> col:71 ph 'int'
| |-ParmVarDecl 0x7fffd82a7d30 <line:532:36, col:40> col:40 first_char 'int'
| |-ParmVarDecl 0x7fffd82a7da8 <col:52, col:56> col:56 num_chars 'int'
| `-ParmVarDecl 0x7fffd82a7e98 <line:533:36, col:53> col:53 chardata 'stbtt_bakedchar *'
|-RecordDecl 0x7fffd82a8150 <line:539:9, line:543:1> line:539:9 struct definition
| |-FieldDecl 0x7fffd82a8218 <line:541:5, col:11> col:11 referenced x0 'float'
| |-FieldDecl 0x7fffd82a8278 <col:5, col:14> col:14 referenced y0 'float'
| |-FieldDecl 0x7fffd82a82d8 <col:5, col:17> col:17 referenced s0 'float'
| |-FieldDecl 0x7fffd82a8338 <col:5, col:20> col:20 referenced t0 'float'
| |-FieldDecl 0x7fffd82a8398 <line:542:5, col:11> col:11 referenced x1 'float'
| |-FieldDecl 0x7fffd82a83f8 <col:5, col:14> col:14 referenced y1 'float'
| |-FieldDecl 0x7fffd82a8458 <col:5, col:17> col:17 referenced s1 'float'
| `-FieldDecl 0x7fffd82a84b8 <col:5, col:20> col:20 referenced t1 'float'
|-TypedefDecl 0x7fffd82a8550 <line:539:1, line:543:3> col:3 referenced stbtt_aligned_quad 'struct stbtt_aligned_quad':'stbtt_aligned_quad'
| `-ElaboratedType 0x7fffd82a8500 'struct stbtt_aligned_quad' sugar
|   `-RecordType 0x7fffd82a81e0 'stbtt_aligned_quad'
|     `-Record 0x7fffd82a8150 ''
|-FunctionDecl 0x7fffd8342690 <line:501:19, line:549:54> line:545:16 stbtt_GetBakedQuad 'void (const stbtt_bakedchar *, int, int, int, float *, float *, stbtt_aligned_quad *, int)' extern
| |-ParmVarDecl 0x7fffd8342138 <col:35, col:58> col:58 chardata 'const stbtt_bakedchar *'
| |-ParmVarDecl 0x7fffd83421b0 <col:68, col:72> col:72 pw 'int'
| |-ParmVarDecl 0x7fffd8342228 <col:76, col:80> col:80 ph 'int'
| |-ParmVarDecl 0x7fffd83422a0 <line:546:35, col:39> col:39 char_index 'int'
| |-ParmVarDecl 0x7fffd8342318 <line:547:35, col:42> col:42 xpos 'float *'
| |-ParmVarDecl 0x7fffd8342390 <col:48, col:55> col:55 ypos 'float *'
| |-ParmVarDecl 0x7fffd8342478 <line:548:35, col:55> col:55 q 'stbtt_aligned_quad *'
| `-ParmVarDecl 0x7fffd83424f0 <line:549:35, col:39> col:39 opengl_fillrule 'int'
|-FunctionDecl 0x7fffd8342af0 <line:501:19, line:560:143> col:16 stbtt_GetScaledFontVMetrics 'void (const unsigned char *, int, float, float *, float *, float *)' extern
| |-ParmVarDecl 0x7fffd8342788 <col:44, col:65> col:65 fontdata 'const unsigned char *'
| |-ParmVarDecl 0x7fffd8342800 <col:75, col:79> col:79 index 'int'
| |-ParmVarDecl 0x7fffd8342878 <col:86, col:92> col:92 size 'float'
| |-ParmVarDecl 0x7fffd83428f0 <col:98, col:105> col:105 ascent 'float *'
| |-ParmVarDecl 0x7fffd8342968 <col:113, col:120> col:120 descent 'float *'
| `-ParmVarDecl 0x7fffd83429e0 <col:129, col:136> col:136 lineGap 'float *'
|-RecordDecl 0x7fffd8342be8 <line:571:9, line:576:1> line:571:9 struct definition
| |-FullComment 0x7fffd8482f70 <line:564:4, col:78>
| | `-ParagraphComment 0x7fffd8482f40 <col:4, col:78>
| |   `-TextComment 0x7fffd8482f10 <col:4, col:78> Text="///////////////////////////////////////////////////////////////////////////"
| |-FieldDecl 0x7fffd8342ca8 <line:573:5, col:20> col:20 referenced x0 'unsigned short'
| |-FieldDecl 0x7fffd8342d08 <col:5, col:23> col:23 referenced y0 'unsigned short'
| |-FieldDecl 0x7fffd8342d68 <col:5, col:26> col:26 referenced x1 'unsigned short'
| |-FieldDecl 0x7fffd8342dc8 <col:5, col:29> col:29 referenced y1 'unsigned short'
| |-FieldDecl 0x7fffd8342e28 <line:574:5, col:11> col:11 referenced xoff 'float'
| |-FieldDecl 0x7fffd8342e88 <col:5, col:16> col:16 referenced yoff 'float'
| |-FieldDecl 0x7fffd8342ee8 <col:5, col:21> col:21 referenced xadvance 'float'
| |-FieldDecl 0x7fffd8342f48 <line:575:5, col:11> col:11 referenced xoff2 'float'
| `-FieldDecl 0x7fffd8342fa8 <col:5, col:17> col:17 referenced yoff2 'float'
|-TypedefDecl 0x7fffd8343040 <line:571:1, line:576:3> col:3 referenced stbtt_packedchar 'struct stbtt_packedchar':'stbtt_packedchar'
| `-ElaboratedType 0x7fffd8342ff0 'struct stbtt_packedchar' sugar
|   `-RecordType 0x7fffd8342c70 'stbtt_packedchar'
|     `-Record 0x7fffd8342be8 ''
|-RecordDecl 0x7fffd8343110 <line:578:9, col:16> col:16 struct stbtt_pack_context
|-TypedefDecl 0x7fffd8343210 <col:1, col:35> col:35 referenced stbtt_pack_context 'struct stbtt_pack_context':'struct stbtt_pack_context'
| `-ElaboratedType 0x7fffd83431c0 'struct stbtt_pack_context' sugar
|   `-RecordType 0x7fffd83431a0 'struct stbtt_pack_context'
|     `-Record 0x7fffd834c268 'stbtt_pack_context'
|-RecordDecl 0x7fffd8343280 <line:579:9, col:16> col:16 struct stbtt_fontinfo
|-TypedefDecl 0x7fffd8343380 <col:1, col:31> col:31 referenced stbtt_fontinfo 'struct stbtt_fontinfo':'struct stbtt_fontinfo'
| `-ElaboratedType 0x7fffd8343330 'struct stbtt_fontinfo' sugar
|   `-RecordType 0x7fffd8343310 'struct stbtt_fontinfo'
|     `-Record 0x7fffd834cad8 'stbtt_fontinfo'
|-RecordDecl 0x7fffd83433f0 <line:581:9, col:16> col:16 struct stbrp_rect
|-TypedefDecl 0x7fffd83434f0 <col:1, col:27> col:27 referenced stbrp_rect 'struct stbrp_rect':'struct stbrp_rect'
| `-ElaboratedType 0x7fffd83434a0 'struct stbrp_rect' sugar
|   `-RecordType 0x7fffd8343480 'struct stbrp_rect'
|     `-Record 0x7fffd84263f0 'stbrp_rect'
|-FunctionDecl 0x7fffd8343a58 <line:501:19, line:584:156> col:16 stbtt_PackBegin 'int (stbtt_pack_context *, unsigned char *, int, int, int, int, void *)' extern
| |-ParmVarDecl 0x7fffd83435e8 <col:32, col:52> col:52 spc 'stbtt_pack_context *'
| |-ParmVarDecl 0x7fffd8343660 <col:57, col:72> col:72 pixels 'unsigned char *'
| |-ParmVarDecl 0x7fffd83436d8 <col:80, col:84> col:84 width 'int'
| |-ParmVarDecl 0x7fffd8343750 <col:91, col:95> col:95 height 'int'
| |-ParmVarDecl 0x7fffd83437c8 <col:103, col:107> col:107 stride_in_bytes 'int'
| |-ParmVarDecl 0x7fffd8343840 <col:124, col:128> col:128 padding 'int'
| `-ParmVarDecl 0x7fffd83438b8 <col:137, col:143> col:143 alloc_context 'void *'
|-FunctionDecl 0x7fffd8343c40 <line:501:19, line:595:55> col:16 stbtt_PackEnd 'void (stbtt_pack_context *)' extern
| `-ParmVarDecl 0x7fffd8343b40 <col:32, col:52> col:52 spc 'stbtt_pack_context *'
|-FunctionDecl 0x7fffd83481f8 <line:501:19, line:601:129> line:600:16 stbtt_PackFontRange 'int (stbtt_pack_context *, const unsigned char *, int, float, int, int, stbtt_packedchar *)' extern
| |-ParmVarDecl 0x7fffd8343cf8 <col:36, col:56> col:56 spc 'stbtt_pack_context *'
| |-ParmVarDecl 0x7fffd8343d70 <col:61, col:82> col:82 fontdata 'const unsigned char *'
| |-ParmVarDecl 0x7fffd8343de8 <col:92, col:96> col:96 font_index 'int'
| |-ParmVarDecl 0x7fffd8343e60 <col:108, col:114> col:114 font_size 'float'
| |-ParmVarDecl 0x7fffd8343ed8 <line:601:36, col:40> col:40 first_unicode_char_in_range 'int'
| |-ParmVarDecl 0x7fffd8343f50 <col:69, col:73> col:73 num_chars_in_range 'int'
| `-ParmVarDecl 0x7fffd8344038 <col:93, col:111> col:111 chardata_for_range 'stbtt_packedchar *'
|-RecordDecl 0x7fffd83482d0 <line:615:9, line:623:1> line:615:9 struct definition
| |-FieldDecl 0x7fffd8348398 <line:617:5, col:11> col:11 referenced font_size 'float'
| |-FieldDecl 0x7fffd83483f8 <line:618:5, col:9> col:9 referenced first_unicode_codepoint_in_range 'int'
| |-FieldDecl 0x7fffd8348458 <line:619:5, col:10> col:10 referenced array_of_unicode_codepoints 'int *'
| |-FieldDecl 0x7fffd83484b8 <line:620:5, col:9> col:9 referenced num_chars 'int'
| |-FieldDecl 0x7fffd8348510 <line:621:5, col:23> col:23 referenced chardata_for_range 'stbtt_packedchar *'
| |-FieldDecl 0x7fffd8348570 <line:622:5, col:19> col:19 referenced h_oversample 'unsigned char'
| `-FieldDecl 0x7fffd83485d0 <col:5, col:33> col:33 referenced v_oversample 'unsigned char'
|-TypedefDecl 0x7fffd8348670 <line:615:1, line:623:3> col:3 referenced stbtt_pack_range 'struct stbtt_pack_range':'stbtt_pack_range'
| `-ElaboratedType 0x7fffd8348620 'struct stbtt_pack_range' sugar
|   `-RecordType 0x7fffd8348360 'stbtt_pack_range'
|     `-Record 0x7fffd83482d0 ''
|-FunctionDecl 0x7fffd8348aa8 <line:501:19, line:625:149> col:16 used stbtt_PackFontRanges 'int (stbtt_pack_context *, const unsigned char *, int, stbtt_pack_range *, int)' extern
| |-ParmVarDecl 0x7fffd83486f0 <col:37, col:57> col:57 spc 'stbtt_pack_context *'
| |-ParmVarDecl 0x7fffd8348768 <col:62, col:83> col:83 fontdata 'const unsigned char *'
| |-ParmVarDecl 0x7fffd83487e0 <col:93, col:97> col:97 font_index 'int'
| |-ParmVarDecl 0x7fffd83488c8 <col:109, col:127> col:127 ranges 'stbtt_pack_range *'
| `-ParmVarDecl 0x7fffd8348940 <col:135, col:139> col:139 num_ranges 'int'
|-FunctionDecl 0x7fffd8348da0 <line:501:19, line:631:119> col:16 stbtt_PackSetOversampling 'void (stbtt_pack_context *, unsigned int, unsigned int)' extern
| |-ParmVarDecl 0x7fffd8348b80 <col:42, col:62> col:62 spc 'stbtt_pack_context *'
| |-ParmVarDecl 0x7fffd8348bf8 <col:67, col:80> col:80 h_oversample 'unsigned int'
| `-ParmVarDecl 0x7fffd8348c70 <col:94, col:107> col:107 v_oversample 'unsigned int'
|-FunctionDecl 0x7fffd8348ff0 <line:501:19, line:647:84> col:16 stbtt_PackSetSkipMissingCodepoints 'void (stbtt_pack_context *, int)' extern
| |-ParmVarDecl 0x7fffd8348e68 <col:51, col:71> col:71 spc 'stbtt_pack_context *'
| `-ParmVarDecl 0x7fffd8348ee0 <col:76, col:80> col:80 skip 'int'
|-FunctionDecl 0x7fffd834b620 <line:501:19, line:657:56> line:653:16 stbtt_GetPackedQuad 'void (const stbtt_packedchar *, int, int, int, float *, float *, stbtt_aligned_quad *, int)' extern
| |-ParmVarDecl 0x7fffd834b140 <col:36, col:60> col:60 chardata 'const stbtt_packedchar *'
| |-ParmVarDecl 0x7fffd834b1b8 <col:70, col:74> col:74 pw 'int'
| |-ParmVarDecl 0x7fffd834b230 <col:78, col:82> col:82 ph 'int'
| |-ParmVarDecl 0x7fffd834b2a8 <line:654:36, col:40> col:40 char_index 'int'
| |-ParmVarDecl 0x7fffd834b320 <line:655:36, col:43> col:43 xpos 'float *'
| |-ParmVarDecl 0x7fffd834b398 <col:49, col:56> col:56 ypos 'float *'
| |-ParmVarDecl 0x7fffd834b408 <line:656:36, col:56> col:56 q 'stbtt_aligned_quad *'
| `-ParmVarDecl 0x7fffd834b480 <line:657:36, col:40> col:40 align_to_integer 'int'
|-FunctionDecl 0x7fffd834bb38 <line:501:19, line:659:160> col:16 used stbtt_PackFontRangesGatherRects 'int (stbtt_pack_context *, const stbtt_fontinfo *, stbtt_pack_range *, int, stbrp_rect *)' extern
| |-ParmVarDecl 0x7fffd834b710 <col:48, col:68> col:68 spc 'stbtt_pack_context *'
| |-ParmVarDecl 0x7fffd834b7f8 <col:73, col:95> col:95 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd834b868 <col:101, col:119> col:119 ranges 'stbtt_pack_range *'
| |-ParmVarDecl 0x7fffd834b8e0 <col:127, col:131> col:131 num_ranges 'int'
| `-ParmVarDecl 0x7fffd834b9c8 <col:143, col:155> col:155 rects 'stbrp_rect *'
|-FunctionDecl 0x7fffd834be30 <line:501:19, line:660:103> col:16 used stbtt_PackFontRangesPackRects 'void (stbtt_pack_context *, stbrp_rect *, int)' extern
| |-ParmVarDecl 0x7fffd834bc10 <col:46, col:66> col:66 spc 'stbtt_pack_context *'
| |-ParmVarDecl 0x7fffd834bc80 <col:71, col:83> col:83 rects 'stbrp_rect *'
| `-ParmVarDecl 0x7fffd834bcf8 <col:90, col:94> col:94 num_rects 'int'
|-FunctionDecl 0x7fffd834c1a0 <line:501:19, line:661:164> col:16 used stbtt_PackFontRangesRenderIntoRects 'int (stbtt_pack_context *, const stbtt_fontinfo *, stbtt_pack_range *, int, stbrp_rect *)' extern
| |-ParmVarDecl 0x7fffd834bef8 <col:52, col:72> col:72 spc 'stbtt_pack_context *'
| |-ParmVarDecl 0x7fffd834bf68 <col:77, col:99> col:99 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd834bfd8 <col:105, col:123> col:123 ranges 'stbtt_pack_range *'
| |-ParmVarDecl 0x7fffd834c050 <col:131, col:135> col:135 num_ranges 'int'
| `-ParmVarDecl 0x7fffd834c0c0 <col:147, col:159> col:159 rects 'stbrp_rect *'
|-RecordDecl 0x7fffd834c268 prev 0x7fffd8343110 <line:674:1, line:685:1> line:674:8 struct stbtt_pack_context definition
| |-FieldDecl 0x7fffd834c308 <line:675:5, col:11> col:11 referenced user_allocator_context 'void *'
| |-FieldDecl 0x7fffd834c368 <line:676:5, col:11> col:11 referenced pack_info 'void *'
| |-FieldDecl 0x7fffd834c3c8 <line:677:5, col:11> col:11 referenced width 'int'
| |-FieldDecl 0x7fffd834c428 <line:678:5, col:11> col:11 referenced height 'int'
| |-FieldDecl 0x7fffd834c488 <line:679:5, col:11> col:11 referenced stride_in_bytes 'int'
| |-FieldDecl 0x7fffd834c4e8 <line:680:5, col:11> col:11 referenced padding 'int'
| |-FieldDecl 0x7fffd834c548 <line:681:5, col:11> col:11 referenced skip_missing 'int'
| |-FieldDecl 0x7fffd834c5a8 <line:682:5, col:20> col:20 referenced h_oversample 'unsigned int'
| |-FieldDecl 0x7fffd834c608 <col:5, col:34> col:34 referenced v_oversample 'unsigned int'
| |-FieldDecl 0x7fffd834c668 <line:683:5, col:20> col:20 referenced pixels 'unsigned char *'
| `-FieldDecl 0x7fffd834c6c8 <line:684:5, col:12> col:12 referenced nodes 'void *'
|-FunctionDecl 0x7fffd834c818 <line:501:19, line:693:63> col:15 stbtt_GetNumberOfFonts 'int (const unsigned char *)' extern
| |-ParmVarDecl 0x7fffd834c750 <col:38, col:59> col:59 data 'const unsigned char *'
| `-FullComment 0x7fffd8483040 <line:687:4, col:78>
|   `-ParagraphComment 0x7fffd8483010 <col:4, col:78>
|     `-TextComment 0x7fffd8482fe0 <col:4, col:78> Text="///////////////////////////////////////////////////////////////////////////"
|-FunctionDecl 0x7fffd834ca28 <line:501:19, line:700:79> col:15 used stbtt_GetFontOffsetForIndex 'int (const unsigned char *, int)' extern
| |-ParmVarDecl 0x7fffd834c8d8 <col:43, col:64> col:64 data 'const unsigned char *'
| `-ParmVarDecl 0x7fffd834c950 <col:70, col:74> col:74 index 'int'
|-RecordDecl 0x7fffd834cad8 prev 0x7fffd8343280 <line:709:1, line:727:1> line:709:8 struct stbtt_fontinfo definition
| |-FieldDecl 0x7fffd834cb78 <line:711:5, col:22> col:22 referenced userdata 'void *'
| |-FieldDecl 0x7fffd834cbd8 <line:712:5, col:22> col:22 referenced data 'unsigned char *'
| |-FieldDecl 0x7fffd834cc38 <line:713:5, col:22> col:22 referenced fontstart 'int'
| |-FieldDecl 0x7fffd834cc98 <line:715:5, col:9> col:9 referenced numGlyphs 'int'
| |-FieldDecl 0x7fffd834ccf8 <line:717:5, col:9> col:9 referenced loca 'int'
| |-FieldDecl 0x7fffd834cd58 <col:5, col:14> col:14 referenced head 'int'
| |-FieldDecl 0x7fffd834cdb8 <col:5, col:19> col:19 referenced glyf 'int'
| |-FieldDecl 0x7fffd834ce18 <col:5, col:24> col:24 referenced hhea 'int'
| |-FieldDecl 0x7fffd834ce78 <col:5, col:29> col:29 referenced hmtx 'int'
| |-FieldDecl 0x7fffd834ced8 <col:5, col:34> col:34 referenced kern 'int'
| |-FieldDecl 0x7fffd834cf38 <col:5, col:39> col:39 referenced gpos 'int'
| |-FieldDecl 0x7fffd834cf98 <col:5, col:44> col:44 referenced svg 'int'
| |-FieldDecl 0x7fffd834cff8 <line:718:5, col:9> col:9 referenced index_map 'int'
| |-FieldDecl 0x7fffd834d058 <line:719:5, col:9> col:9 referenced indexToLocFormat 'int'
| |-FieldDecl 0x7fffd834d0d0 <line:721:5, col:16> col:16 referenced cff 'stbtt__buf':'stbtt__buf'
| |-FieldDecl 0x7fffd834d160 <line:722:5, col:16> col:16 referenced charstrings 'stbtt__buf':'stbtt__buf'
| |-FieldDecl 0x7fffd834d1b8 <line:723:5, col:16> col:16 referenced gsubrs 'stbtt__buf':'stbtt__buf'
| |-FieldDecl 0x7fffd834d210 <line:724:5, col:16> col:16 referenced subrs 'stbtt__buf':'stbtt__buf'
| |-FieldDecl 0x7fffd834d268 <line:725:5, col:16> col:16 referenced fontdicts 'stbtt__buf':'stbtt__buf'
| `-FieldDecl 0x7fffd834d2c0 <line:726:5, col:16> col:16 referenced fdselect 'stbtt__buf':'stbtt__buf'
|-FunctionDecl 0x7fffd834d5a8 <line:501:19, line:729:89> col:15 used stbtt_InitFont 'int (stbtt_fontinfo *, const unsigned char *, int)' extern
| |-ParmVarDecl 0x7fffd834d378 <col:30, col:46> col:46 info 'stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd834d3f0 <col:52, col:73> col:73 data 'const unsigned char *'
| `-ParmVarDecl 0x7fffd834d468 <col:79, col:83> col:83 offset 'int'
|-FunctionDecl 0x7fffd834d828 <line:501:19, line:741:85> col:15 used stbtt_FindGlyphIndex 'int (const stbtt_fontinfo *, int)' extern
| |-ParmVarDecl 0x7fffd834d698 <col:36, col:58> col:58 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd834d710 <col:64, col:68> col:68 unicode_codepoint 'int'
| `-FullComment 0x7fffd8483110 <line:737:4, col:78>
|   `-ParagraphComment 0x7fffd84830e0 <col:4, col:78>
|     `-TextComment 0x7fffd84830b0 <col:4, col:78> Text="///////////////////////////////////////////////////////////////////////////"
|-FunctionDecl 0x7fffd834daa8 <line:501:19, line:754:83> col:17 used stbtt_ScaleForPixelHeight 'float (const stbtt_fontinfo *, float)' extern
| |-ParmVarDecl 0x7fffd834d918 <col:43, col:65> col:65 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd834d990 <col:71, col:77> col:77 pixels 'float'
| `-FullComment 0x7fffd84831e0 <line:749:4, col:78>
|   `-ParagraphComment 0x7fffd84831b0 <col:4, col:78>
|     `-TextComment 0x7fffd8483180 <col:4, col:78> Text="///////////////////////////////////////////////////////////////////////////"
|-FunctionDecl 0x7fffd834dc78 <line:501:19, line:762:89> col:17 used stbtt_ScaleForMappingEmToPixels 'float (const stbtt_fontinfo *, float)' extern
| |-ParmVarDecl 0x7fffd834db68 <col:49, col:71> col:71 info 'const stbtt_fontinfo *'
| `-ParmVarDecl 0x7fffd834dbe0 <col:77, col:83> col:83 pixels 'float'
|-FunctionDecl 0x7fffd834dfe0 <line:501:19, line:767:105> col:16 used stbtt_GetFontVMetrics 'void (const stbtt_fontinfo *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd834dd38 <col:38, col:60> col:60 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd834ddb0 <col:66, col:71> col:71 ascent 'int *'
| |-ParmVarDecl 0x7fffd834de28 <col:79, col:84> col:84 descent 'int *'
| `-ParmVarDecl 0x7fffd834dea0 <col:93, col:98> col:98 lineGap 'int *'
|-FunctionDecl 0x7fffd834e3a8 <line:501:19, line:775:120> col:16 stbtt_GetFontVMetricsOS2 'int (const stbtt_fontinfo *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd834e0b0 <col:41, col:63> col:63 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd834e170 <col:69, col:74> col:74 typoAscent 'int *'
| |-ParmVarDecl 0x7fffd834e1e8 <col:86, col:91> col:91 typoDescent 'int *'
| `-ParmVarDecl 0x7fffd834e260 <col:104, col:109> col:109 typoLineGap 'int *'
|-FunctionDecl 0x7fffd834e7c0 <line:501:19, line:781:103> col:16 stbtt_GetFontBoundingBox 'void (const stbtt_fontinfo *, int *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd834e478 <col:41, col:63> col:63 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd834e4f0 <col:69, col:74> col:74 x0 'int *'
| |-ParmVarDecl 0x7fffd834e568 <col:78, col:83> col:83 y0 'int *'
| |-ParmVarDecl 0x7fffd834e5e0 <col:87, col:92> col:92 x1 'int *'
| `-ParmVarDecl 0x7fffd834e658 <col:96, col:101> col:101 y1 'int *'
|-FunctionDecl 0x7fffd834eb40 <line:501:19, line:784:125> col:16 stbtt_GetCodepointHMetrics 'void (const stbtt_fontinfo *, int, int *, int *)' extern
| |-ParmVarDecl 0x7fffd834e898 <col:43, col:65> col:65 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd834e910 <col:71, col:75> col:75 codepoint 'int'
| |-ParmVarDecl 0x7fffd834e988 <col:86, col:91> col:91 advanceWidth 'int *'
| `-ParmVarDecl 0x7fffd834ea00 <col:105, col:110> col:110 leftSideBearing 'int *'
|-FunctionDecl 0x7fffd834ee38 <line:501:19, line:789:90> col:16 stbtt_GetCodepointKernAdvance 'int (const stbtt_fontinfo *, int, int)' extern
| |-ParmVarDecl 0x7fffd834ec10 <col:46, col:68> col:68 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd834ec88 <col:74, col:78> col:78 ch1 'int'
| `-ParmVarDecl 0x7fffd834ed00 <col:83, col:87> col:87 ch2 'int'
|-FunctionDecl 0x7fffd8350308 <line:501:19, line:792:114> col:15 stbtt_GetCodepointBox 'int (const stbtt_fontinfo *, int, int *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd834ef00 <col:37, col:59> col:59 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd834ef78 <col:65, col:69> col:69 codepoint 'int'
| |-ParmVarDecl 0x7fffd834eff0 <col:80, col:85> col:85 x0 'int *'
| |-ParmVarDecl 0x7fffd834f068 <col:89, col:94> col:94 y0 'int *'
| |-ParmVarDecl 0x7fffd834f0e0 <col:98, col:103> col:103 x1 'int *'
| `-ParmVarDecl 0x7fffd8350190 <col:107, col:112> col:112 y1 'int *'
|-FunctionDecl 0x7fffd83505f0 <line:501:19, line:795:123> col:16 used stbtt_GetGlyphHMetrics 'void (const stbtt_fontinfo *, int, int *, int *)' extern
| |-ParmVarDecl 0x7fffd83503e8 <col:39, col:61> col:61 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8350460 <col:67, col:71> col:71 glyph_index 'int'
| |-ParmVarDecl 0x7fffd83504d8 <col:84, col:89> col:89 advanceWidth 'int *'
| `-ParmVarDecl 0x7fffd8350550 <col:103, col:108> col:108 leftSideBearing 'int *'
|-FunctionDecl 0x7fffd8350850 <line:501:19, line:796:92> col:16 used stbtt_GetGlyphKernAdvance 'int (const stbtt_fontinfo *, int, int)' extern
| |-ParmVarDecl 0x7fffd83506c0 <col:42, col:64> col:64 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8350738 <col:70, col:74> col:74 glyph1 'int'
| `-ParmVarDecl 0x7fffd83507b0 <col:82, col:86> col:86 glyph2 'int'
|-FunctionDecl 0x7fffd8350c28 <line:501:19, line:797:113> col:16 used stbtt_GetGlyphBox 'int (const stbtt_fontinfo *, int, int *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd8350918 <col:34, col:56> col:56 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8350990 <col:62, col:66> col:66 glyph_index 'int'
| |-ParmVarDecl 0x7fffd8350a08 <col:79, col:84> col:84 x0 'int *'
| |-ParmVarDecl 0x7fffd8350a80 <col:88, col:93> col:93 y0 'int *'
| |-ParmVarDecl 0x7fffd8350af8 <col:97, col:102> col:102 x1 'int *'
| `-ParmVarDecl 0x7fffd8350b70 <col:106, col:111> col:111 y1 'int *'
|-RecordDecl 0x7fffd8350cf8 <line:800:9, line:805:1> line:800:16 struct stbtt_kerningentry definition
| |-FieldDecl 0x7fffd8350db8 <line:802:5, col:9> col:9 referenced glyph1 'int'
| |-FieldDecl 0x7fffd8350e18 <line:803:5, col:9> col:9 referenced glyph2 'int'
| `-FieldDecl 0x7fffd8350e78 <line:804:5, col:9> col:9 referenced advance 'int'
|-TypedefDecl 0x7fffd8350f10 <line:800:1, line:805:3> col:3 referenced stbtt_kerningentry 'struct stbtt_kerningentry':'struct stbtt_kerningentry'
| `-ElaboratedType 0x7fffd8350ec0 'struct stbtt_kerningentry' sugar
|   `-RecordType 0x7fffd8350d80 'struct stbtt_kerningentry'
|     `-Record 0x7fffd8350cf8 'stbtt_kerningentry'
|-FunctionDecl 0x7fffd8351098 <line:501:19, line:807:70> col:16 stbtt_GetKerningTableLength 'int (const stbtt_fontinfo *)' extern
| `-ParmVarDecl 0x7fffd8350f90 <col:44, col:66> col:66 info 'const stbtt_fontinfo *'
|-FunctionDecl 0x7fffd8351438 <line:501:19, line:808:109> col:16 stbtt_GetKerningTable 'int (const stbtt_fontinfo *, stbtt_kerningentry *, int)' extern
| |-ParmVarDecl 0x7fffd83511a0 <col:38, col:60> col:60 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8351288 <col:66, col:86> col:86 table 'stbtt_kerningentry *'
| `-ParmVarDecl 0x7fffd8351300 <col:93, col:97> col:97 table_length 'int'
|-EnumDecl 0x7fffd8351518 <line:820:1, line:825:1> line:820:1
| |-EnumConstantDecl 0x7fffd83515f0 <line:821:5, col:17> col:5 referenced STBTT_vmove 'int'
| | `-IntegerLiteral 0x7fffd83515d0 <col:17> 'int' 1
| |-EnumConstantDecl 0x7fffd8351638 <line:822:5> col:5 referenced STBTT_vline 'int'
| |-EnumConstantDecl 0x7fffd8351680 <line:823:5> col:5 referenced STBTT_vcurve 'int'
| `-EnumConstantDecl 0x7fffd83516c8 <line:824:5> col:5 referenced STBTT_vcubic 'int'
|-RecordDecl 0x7fffd8351710 <line:831:9, line:835:1> line:831:9 struct definition
| |-FieldDecl 0x7fffd83517d8 <line:830:27, line:833:23> col:23 referenced x 'short'
| |-FieldDecl 0x7fffd8351838 <line:830:27, line:833:25> col:25 referenced y 'short'
| |-FieldDecl 0x7fffd8351898 <line:830:27, line:833:27> col:27 referenced cx 'short'
| |-FieldDecl 0x7fffd83518f8 <line:830:27, line:833:30> col:30 referenced cy 'short'
| |-FieldDecl 0x7fffd8351958 <line:830:27, line:833:33> col:33 referenced cx1 'short'
| |-FieldDecl 0x7fffd83519b8 <line:830:27, line:833:37> col:37 referenced cy1 'short'
| |-FieldDecl 0x7fffd8351a18 <line:834:5, col:19> col:19 referenced type 'unsigned char'
| `-FieldDecl 0x7fffd8351a78 <col:5, col:24> col:24 padding 'unsigned char'
|-TypedefDecl 0x7fffd8351b10 <line:831:1, line:835:3> col:3 referenced stbtt_vertex 'struct stbtt_vertex':'stbtt_vertex'
| `-ElaboratedType 0x7fffd8351ac0 'struct stbtt_vertex' sugar
|   `-RecordType 0x7fffd83517a0 'stbtt_vertex'
|     `-Record 0x7fffd8351710 ''
|-FunctionDecl 0x7fffd8351ca0 <line:501:19, line:838:77> col:15 stbtt_IsGlyphEmpty 'int (const stbtt_fontinfo *, int)' extern
| |-ParmVarDecl 0x7fffd8351b90 <col:34, col:56> col:56 info 'const stbtt_fontinfo *'
| `-ParmVarDecl 0x7fffd8351c08 <col:62, col:66> col:66 glyph_index 'int'
|-FunctionDecl 0x7fffd8352068 <line:501:19, line:841:113> col:15 stbtt_GetCodepointShape 'int (const stbtt_fontinfo *, int, stbtt_vertex **)' extern
| |-ParmVarDecl 0x7fffd8351d60 <col:39, col:61> col:61 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8351dd8 <col:67, col:71> col:71 unicode_codepoint 'int'
| `-ParmVarDecl 0x7fffd8351f30 <col:90, col:105> col:105 vertices 'stbtt_vertex **'
|-FunctionDecl 0x7fffd83522e0 <line:501:19, line:842:103> col:15 used stbtt_GetGlyphShape 'int (const stbtt_fontinfo *, int, stbtt_vertex **)' extern
| |-ParmVarDecl 0x7fffd8352130 <col:35, col:57> col:57 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83521c8 <col:63, col:67> col:67 glyph_index 'int'
| `-ParmVarDecl 0x7fffd8352240 <col:80, col:95> col:95 vertices 'stbtt_vertex **'
|-FunctionDecl 0x7fffd8352530 <line:501:19, line:853:82> col:16 stbtt_FreeShape 'void (const stbtt_fontinfo *, stbtt_vertex *)' extern
| |-ParmVarDecl 0x7fffd83523a8 <col:32, col:54> col:54 info 'const stbtt_fontinfo *'
| `-ParmVarDecl 0x7fffd8352418 <col:60, col:74> col:74 vertices 'stbtt_vertex *'
|-FunctionDecl 0x7fffd8352848 <line:501:19, line:856:104> col:15 stbtt_GetCodepointSVG 'int (const stbtt_fontinfo *, int, const char **)' extern
| |-ParmVarDecl 0x7fffd83525f0 <col:37, col:59> col:59 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8352668 <col:65, col:69> col:69 unicode_codepoint 'int'
| `-ParmVarDecl 0x7fffd8352710 <col:88, col:101> col:101 svg 'const char **'
|-FunctionDecl 0x7fffd8352aa0 <line:501:19, line:857:85> col:15 used stbtt_GetGlyphSVG 'int (const stbtt_fontinfo *, int, const char **)' extern
| |-ParmVarDecl 0x7fffd8352910 <col:33, col:55> col:55 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8352988 <col:61, col:65> col:65 gl 'int'
| `-ParmVarDecl 0x7fffd8352a00 <col:69, col:82> col:82 svg 'const char **'
|-FunctionDecl 0x7fffd8352cf0 <line:501:19, line:866:70> col:16 stbtt_FreeBitmap 'void (unsigned char *, void *)' extern
| |-ParmVarDecl 0x7fffd8352ba0 <col:33, col:48> col:48 bitmap 'unsigned char *'
| |-ParmVarDecl 0x7fffd8352c18 <col:56, col:62> col:62 userdata 'void *'
| `-FullComment 0x7fffd84832b0 <line:861:4, col:78>
|   `-ParagraphComment 0x7fffd8483280 <col:4, col:78>
|     `-TextComment 0x7fffd8483250 <col:4, col:78> Text="///////////////////////////////////////////////////////////////////////////"
|-FunctionDecl 0x7fffd8353308 <line:501:19, line:869:169> col:26 stbtt_GetCodepointBitmap 'unsigned char *(const stbtt_fontinfo *, float, float, int, int *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd8352db0 <col:51, col:73> col:73 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8352e28 <col:79, col:85> col:85 scale_x 'float'
| |-ParmVarDecl 0x7fffd8352ea0 <col:94, col:100> col:100 scale_y 'float'
| |-ParmVarDecl 0x7fffd8352f18 <col:109, col:113> col:113 codepoint 'int'
| |-ParmVarDecl 0x7fffd8352f90 <col:124, col:129> col:129 width 'int *'
| |-ParmVarDecl 0x7fffd8353008 <col:136, col:141> col:141 height 'int *'
| |-ParmVarDecl 0x7fffd8353080 <col:149, col:154> col:154 xoff 'int *'
| `-ParmVarDecl 0x7fffd83530f8 <col:160, col:165> col:165 yoff 'int *'
|-FunctionDecl 0x7fffd8353a08 <line:501:19, line:878:207> col:26 used stbtt_GetCodepointBitmapSubpixel 'unsigned char *(const stbtt_fontinfo *, float, float, float, float, int, int *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd83533f8 <col:59, col:81> col:81 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8353470 <col:87, col:93> col:93 scale_x 'float'
| |-ParmVarDecl 0x7fffd83534e8 <col:102, col:108> col:108 scale_y 'float'
| |-ParmVarDecl 0x7fffd8353560 <col:117, col:123> col:123 shift_x 'float'
| |-ParmVarDecl 0x7fffd83535d8 <col:132, col:138> col:138 shift_y 'float'
| |-ParmVarDecl 0x7fffd8353650 <col:147, col:151> col:151 codepoint 'int'
| |-ParmVarDecl 0x7fffd83536c8 <col:162, col:167> col:167 width 'int *'
| |-ParmVarDecl 0x7fffd8353740 <col:174, col:179> col:179 height 'int *'
| |-ParmVarDecl 0x7fffd83537b8 <col:187, col:192> col:192 xoff 'int *'
| `-ParmVarDecl 0x7fffd8353830 <col:198, col:203> col:203 yoff 'int *'
|-FunctionDecl 0x7fffd8353ff0 <line:501:19, line:882:174> col:16 stbtt_MakeCodepointBitmap 'void (const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, int)' extern
| |-ParmVarDecl 0x7fffd8353b08 <col:42, col:64> col:64 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8353b80 <col:70, col:85> col:85 output 'unsigned char *'
| |-ParmVarDecl 0x7fffd8353bf8 <col:93, col:97> col:97 out_w 'int'
| |-ParmVarDecl 0x7fffd8353c70 <col:104, col:108> col:108 out_h 'int'
| |-ParmVarDecl 0x7fffd8353ce8 <col:115, col:119> col:119 out_stride 'int'
| |-ParmVarDecl 0x7fffd8353d60 <col:131, col:137> col:137 scale_x 'float'
| |-ParmVarDecl 0x7fffd8353dd8 <col:146, col:152> col:152 scale_y 'float'
| `-ParmVarDecl 0x7fffd8353e50 <col:161, col:165> col:165 codepoint 'int'
|-FunctionDecl 0x7fffd8354700 <line:501:19, line:888:212> col:16 used stbtt_MakeCodepointBitmapSubpixel 'void (const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, float, float, int)' extern
| |-ParmVarDecl 0x7fffd83540e0 <col:50, col:72> col:72 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8354158 <col:78, col:93> col:93 output 'unsigned char *'
| |-ParmVarDecl 0x7fffd83541e8 <col:101, col:105> col:105 out_w 'int'
| |-ParmVarDecl 0x7fffd8354260 <col:112, col:116> col:116 out_h 'int'
| |-ParmVarDecl 0x7fffd83542d8 <col:123, col:127> col:127 out_stride 'int'
| |-ParmVarDecl 0x7fffd8354350 <col:139, col:145> col:145 scale_x 'float'
| |-ParmVarDecl 0x7fffd83543c8 <col:154, col:160> col:160 scale_y 'float'
| |-ParmVarDecl 0x7fffd8354440 <col:169, col:175> col:175 shift_x 'float'
| |-ParmVarDecl 0x7fffd83544b8 <col:184, col:190> col:190 shift_y 'float'
| `-ParmVarDecl 0x7fffd8354530 <col:199, col:203> col:203 codepoint 'int'
|-FunctionDecl 0x7fffd8355050 <line:501:19, line:892:285> col:16 stbtt_MakeCodepointBitmapSubpixelPrefilter 'void (const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, float, float, int, int, float *, float *, int)' extern
| |-ParmVarDecl 0x7fffd8354800 <col:59, col:81> col:81 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8354878 <col:87, col:102> col:102 output 'unsigned char *'
| |-ParmVarDecl 0x7fffd83548f0 <col:110, col:114> col:114 out_w 'int'
| |-ParmVarDecl 0x7fffd8354968 <col:121, col:125> col:125 out_h 'int'
| |-ParmVarDecl 0x7fffd83549e0 <col:132, col:136> col:136 out_stride 'int'
| |-ParmVarDecl 0x7fffd8354a58 <col:148, col:154> col:154 scale_x 'float'
| |-ParmVarDecl 0x7fffd8354ad0 <col:163, col:169> col:169 scale_y 'float'
| |-ParmVarDecl 0x7fffd8354b48 <col:178, col:184> col:184 shift_x 'float'
| |-ParmVarDecl 0x7fffd8354bc0 <col:193, col:199> col:199 shift_y 'float'
| |-ParmVarDecl 0x7fffd8354c38 <col:208, col:212> col:212 oversample_x 'int'
| |-ParmVarDecl 0x7fffd8354cb0 <col:226, col:230> col:230 oversample_y 'int'
| |-ParmVarDecl 0x7fffd8354d28 <col:244, col:251> col:251 sub_x 'float *'
| |-ParmVarDecl 0x7fffd8354da0 <col:258, col:265> col:265 sub_y 'float *'
| `-ParmVarDecl 0x7fffd8354e18 <col:272, col:276> col:276 codepoint 'int'
|-FunctionDecl 0x7fffd8355670 <line:501:19, line:896:155> col:16 stbtt_GetCodepointBitmapBox 'void (const stbtt_fontinfo *, int, float, float, int *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd8355170 <col:44, col:66> col:66 font 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83551f8 <col:72, col:76> col:76 codepoint 'int'
| |-ParmVarDecl 0x7fffd8355270 <col:87, col:93> col:93 scale_x 'float'
| |-ParmVarDecl 0x7fffd83552e8 <col:102, col:108> col:108 scale_y 'float'
| |-ParmVarDecl 0x7fffd8355360 <col:117, col:122> col:122 ix0 'int *'
| |-ParmVarDecl 0x7fffd83553d8 <col:127, col:132> col:132 iy0 'int *'
| |-ParmVarDecl 0x7fffd8355450 <col:137, col:142> col:142 ix1 'int *'
| `-ParmVarDecl 0x7fffd83554c8 <col:147, col:152> col:152 iy1 'int *'
|-FunctionDecl 0x7fffd8355d70 <line:501:19, line:903:193> col:16 used stbtt_GetCodepointBitmapBoxSubpixel 'void (const stbtt_fontinfo *, int, float, float, float, float, int *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd8355760 <col:52, col:74> col:74 font 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83557d8 <col:80, col:84> col:84 codepoint 'int'
| |-ParmVarDecl 0x7fffd8355850 <col:95, col:101> col:101 scale_x 'float'
| |-ParmVarDecl 0x7fffd83558c8 <col:110, col:116> col:116 scale_y 'float'
| |-ParmVarDecl 0x7fffd8355940 <col:125, col:131> col:131 shift_x 'float'
| |-ParmVarDecl 0x7fffd83559b8 <col:140, col:146> col:146 shift_y 'float'
| |-ParmVarDecl 0x7fffd8355a30 <col:155, col:160> col:160 ix0 'int *'
| |-ParmVarDecl 0x7fffd8355aa8 <col:165, col:170> col:170 iy0 'int *'
| |-ParmVarDecl 0x7fffd8355b20 <col:175, col:180> col:180 ix1 'int *'
| `-ParmVarDecl 0x7fffd8355b98 <col:185, col:190> col:190 iy1 'int *'
|-FunctionDecl 0x7fffd83562b8 <line:501:19, line:909:161> col:26 stbtt_GetGlyphBitmap 'unsigned char *(const stbtt_fontinfo *, float, float, int, int *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd8355e70 <col:47, col:69> col:69 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8355ee8 <col:75, col:81> col:81 scale_x 'float'
| |-ParmVarDecl 0x7fffd8355f60 <col:90, col:96> col:96 scale_y 'float'
| |-ParmVarDecl 0x7fffd8355fd8 <col:105, col:109> col:109 glyph 'int'
| |-ParmVarDecl 0x7fffd8356050 <col:116, col:121> col:121 width 'int *'
| |-ParmVarDecl 0x7fffd83560c8 <col:128, col:133> col:133 height 'int *'
| |-ParmVarDecl 0x7fffd8356140 <col:141, col:146> col:146 xoff 'int *'
| `-ParmVarDecl 0x7fffd83561f0 <col:152, col:157> col:157 yoff 'int *'
|-FunctionDecl 0x7fffd83568b8 <line:501:19, line:910:199> col:26 used stbtt_GetGlyphBitmapSubpixel 'unsigned char *(const stbtt_fontinfo *, float, float, float, float, int, int *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd83563a8 <col:55, col:77> col:77 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8356420 <col:83, col:89> col:89 scale_x 'float'
| |-ParmVarDecl 0x7fffd8356498 <col:98, col:104> col:104 scale_y 'float'
| |-ParmVarDecl 0x7fffd8356510 <col:113, col:119> col:119 shift_x 'float'
| |-ParmVarDecl 0x7fffd8356588 <col:128, col:134> col:134 shift_y 'float'
| |-ParmVarDecl 0x7fffd8356600 <col:143, col:147> col:147 glyph 'int'
| |-ParmVarDecl 0x7fffd8356678 <col:154, col:159> col:159 width 'int *'
| |-ParmVarDecl 0x7fffd83566f0 <col:166, col:171> col:171 height 'int *'
| |-ParmVarDecl 0x7fffd8356768 <col:179, col:184> col:184 xoff 'int *'
| `-ParmVarDecl 0x7fffd83567e0 <col:190, col:195> col:195 yoff 'int *'
|-FunctionDecl 0x7fffd8356dc0 <line:501:19, line:911:166> col:16 used stbtt_MakeGlyphBitmap 'void (const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, int)' extern
| |-ParmVarDecl 0x7fffd83569b8 <col:38, col:60> col:60 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8356a30 <col:66, col:81> col:81 output 'unsigned char *'
| |-ParmVarDecl 0x7fffd8356aa8 <col:89, col:93> col:93 out_w 'int'
| |-ParmVarDecl 0x7fffd8356b20 <col:100, col:104> col:104 out_h 'int'
| |-ParmVarDecl 0x7fffd8356b98 <col:111, col:115> col:115 out_stride 'int'
| |-ParmVarDecl 0x7fffd8356c10 <col:127, col:133> col:133 scale_x 'float'
| |-ParmVarDecl 0x7fffd8356c88 <col:142, col:148> col:148 scale_y 'float'
| `-ParmVarDecl 0x7fffd8356d00 <col:157, col:161> col:161 glyph 'int'
|-FunctionDecl 0x7fffd83573d8 <line:501:19, line:912:204> col:16 used stbtt_MakeGlyphBitmapSubpixel 'void (const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, float, float, int)' extern
| |-ParmVarDecl 0x7fffd8356eb0 <col:46, col:68> col:68 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8356f28 <col:74, col:89> col:89 output 'unsigned char *'
| |-ParmVarDecl 0x7fffd8356fa0 <col:97, col:101> col:101 out_w 'int'
| |-ParmVarDecl 0x7fffd8357018 <col:108, col:112> col:112 out_h 'int'
| |-ParmVarDecl 0x7fffd8357090 <col:119, col:123> col:123 out_stride 'int'
| |-ParmVarDecl 0x7fffd8357108 <col:135, col:141> col:141 scale_x 'float'
| |-ParmVarDecl 0x7fffd8357180 <col:150, col:156> col:156 scale_y 'float'
| |-ParmVarDecl 0x7fffd8357218 <col:165, col:171> col:171 shift_x 'float'
| |-ParmVarDecl 0x7fffd8357290 <col:180, col:186> col:186 shift_y 'float'
| `-ParmVarDecl 0x7fffd8357308 <col:195, col:199> col:199 glyph 'int'
|-FunctionDecl 0x7fffd8357be0 <line:501:19, line:913:277> col:16 used stbtt_MakeGlyphBitmapSubpixelPrefilter 'void (const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, float, float, int, int, float *, float *, int)' extern
| |-ParmVarDecl 0x7fffd83574d8 <col:55, col:77> col:77 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8357550 <col:83, col:98> col:98 output 'unsigned char *'
| |-ParmVarDecl 0x7fffd83575c8 <col:106, col:110> col:110 out_w 'int'
| |-ParmVarDecl 0x7fffd8357640 <col:117, col:121> col:121 out_h 'int'
| |-ParmVarDecl 0x7fffd83576b8 <col:128, col:132> col:132 out_stride 'int'
| |-ParmVarDecl 0x7fffd8357730 <col:144, col:150> col:150 scale_x 'float'
| |-ParmVarDecl 0x7fffd83577a8 <col:159, col:165> col:165 scale_y 'float'
| |-ParmVarDecl 0x7fffd8357820 <col:174, col:180> col:180 shift_x 'float'
| |-ParmVarDecl 0x7fffd8357898 <col:189, col:195> col:195 shift_y 'float'
| |-ParmVarDecl 0x7fffd8357910 <col:204, col:208> col:208 oversample_x 'int'
| |-ParmVarDecl 0x7fffd8357988 <col:222, col:226> col:226 oversample_y 'int'
| |-ParmVarDecl 0x7fffd8357a00 <col:240, col:247> col:247 sub_x 'float *'
| |-ParmVarDecl 0x7fffd8357a78 <col:254, col:261> col:261 sub_y 'float *'
| `-ParmVarDecl 0x7fffd8357af0 <col:268, col:272> col:272 glyph 'int'
|-FunctionDecl 0x7fffd8358108 <line:501:19, line:914:147> col:16 used stbtt_GetGlyphBitmapBox 'void (const stbtt_fontinfo *, int, float, float, int *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd8357d00 <col:40, col:62> col:62 font 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8357d78 <col:68, col:72> col:72 glyph 'int'
| |-ParmVarDecl 0x7fffd8357df0 <col:79, col:85> col:85 scale_x 'float'
| |-ParmVarDecl 0x7fffd8357e68 <col:94, col:100> col:100 scale_y 'float'
| |-ParmVarDecl 0x7fffd8357ee0 <col:109, col:114> col:114 ix0 'int *'
| |-ParmVarDecl 0x7fffd8357f58 <col:119, col:124> col:124 iy0 'int *'
| |-ParmVarDecl 0x7fffd8357fd0 <col:129, col:134> col:134 ix1 'int *'
| `-ParmVarDecl 0x7fffd8358048 <col:139, col:144> col:144 iy1 'int *'
|-FunctionDecl 0x7fffd8359728 <line:501:19, line:915:184> col:16 used stbtt_GetGlyphBitmapBoxSubpixel 'void (const stbtt_fontinfo *, int, float, float, float, float, int *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd8359220 <col:48, col:70> col:70 font 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8359298 <col:76, col:80> col:80 glyph 'int'
| |-ParmVarDecl 0x7fffd8359310 <col:87, col:93> col:93 scale_x 'float'
| |-ParmVarDecl 0x7fffd8359388 <col:102, col:108> col:108 scale_y 'float'
| |-ParmVarDecl 0x7fffd8359400 <col:116, col:122> col:122 shift_x 'float'
| |-ParmVarDecl 0x7fffd8359478 <col:131, col:137> col:137 shift_y 'float'
| |-ParmVarDecl 0x7fffd83594f0 <col:146, col:151> col:151 ix0 'int *'
| |-ParmVarDecl 0x7fffd8359568 <col:156, col:161> col:161 iy0 'int *'
| |-ParmVarDecl 0x7fffd83595e0 <col:166, col:171> col:171 ix1 'int *'
| `-ParmVarDecl 0x7fffd8359658 <col:176, col:181> col:181 iy1 'int *'
|-RecordDecl 0x7fffd8359818 <line:919:9, line:923:1> line:919:9 struct definition
| |-FieldDecl 0x7fffd83598d8 <line:921:5, col:9> col:9 referenced w 'int'
| |-FieldDecl 0x7fffd8359938 <col:5, col:11> col:11 referenced h 'int'
| |-FieldDecl 0x7fffd8359998 <col:5, col:13> col:13 referenced stride 'int'
| `-FieldDecl 0x7fffd83599f8 <line:922:5, col:20> col:20 referenced pixels 'unsigned char *'
|-TypedefDecl 0x7fffd8359a90 <line:919:1, line:923:3> col:3 referenced stbtt__bitmap 'struct stbtt__bitmap':'stbtt__bitmap'
| `-ElaboratedType 0x7fffd8359a40 'struct stbtt__bitmap' sugar
|   `-RecordType 0x7fffd83598a0 'stbtt__bitmap'
|     `-Record 0x7fffd8359818 ''
|-FunctionDecl 0x7fffd835a340 <line:501:19, line:934:46> line:926:16 used stbtt_Rasterize 'void (stbtt__bitmap *, float, stbtt_vertex *, int, float, float, float, float, int, int, int, void *)' extern
| |-ParmVarDecl 0x7fffd8359b88 <col:32, col:47> col:47 result 'stbtt__bitmap *'
| |-ParmVarDecl 0x7fffd8359c00 <line:927:32, col:38> col:38 flatness_in_pixels 'float'
| |-ParmVarDecl 0x7fffd8359c70 <line:928:32, col:46> col:46 vertices 'stbtt_vertex *'
| |-ParmVarDecl 0x7fffd8359ce8 <line:929:32, col:36> col:36 num_verts 'int'
| |-ParmVarDecl 0x7fffd8359d60 <line:930:32, col:38> col:38 scale_x 'float'
| |-ParmVarDecl 0x7fffd8359dd8 <col:47, col:53> col:53 scale_y 'float'
| |-ParmVarDecl 0x7fffd8359e50 <line:931:32, col:38> col:38 shift_x 'float'
| |-ParmVarDecl 0x7fffd8359ec8 <col:47, col:53> col:53 shift_y 'float'
| |-ParmVarDecl 0x7fffd8359f40 <line:932:32, col:36> col:36 x_off 'int'
| |-ParmVarDecl 0x7fffd8359fb8 <col:43, col:47> col:47 y_off 'int'
| |-ParmVarDecl 0x7fffd835a030 <line:933:32, col:36> col:36 invert 'int'
| `-ParmVarDecl 0x7fffd835a0a8 <line:934:32, col:38> col:38 userdata 'void *'
|-FunctionDecl 0x7fffd835a588 <line:501:19, line:940:67> col:16 stbtt_FreeSDF 'void (unsigned char *, void *)' extern
| |-ParmVarDecl 0x7fffd835a480 <col:30, col:45> col:45 bitmap 'unsigned char *'
| |-ParmVarDecl 0x7fffd835a4f8 <col:53, col:59> col:59 userdata 'void *'
| `-FullComment 0x7fffd8483380 <line:936:4, col:78>
|   `-ParagraphComment 0x7fffd8483350 <col:4, col:78>
|     `-TextComment 0x7fffd8483320 <col:4, col:78> Text="///////////////////////////////////////////////////////////////////////////"
|-FunctionDecl 0x7fffd835ac58 <line:501:19, line:943:207> col:27 used stbtt_GetGlyphSDF 'unsigned char *(const stbtt_fontinfo *, float, int, int, unsigned char, float, int *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd835a648 <col:45, col:67> col:67 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd835a6c0 <col:73, col:79> col:79 scale 'float'
| |-ParmVarDecl 0x7fffd835a738 <col:86, col:90> col:90 glyph 'int'
| |-ParmVarDecl 0x7fffd835a7b0 <col:97, col:101> col:101 padding 'int'
| |-ParmVarDecl 0x7fffd835a828 <col:110, col:124> col:124 onedge_value 'unsigned char'
| |-ParmVarDecl 0x7fffd835a8a0 <col:138, col:144> col:144 pixel_dist_scale 'float'
| |-ParmVarDecl 0x7fffd835a918 <col:162, col:167> col:167 width 'int *'
| |-ParmVarDecl 0x7fffd835a990 <col:174, col:179> col:179 height 'int *'
| |-ParmVarDecl 0x7fffd835aa08 <col:187, col:192> col:192 xoff 'int *'
| `-ParmVarDecl 0x7fffd835aa80 <col:198, col:203> col:203 yoff 'int *'
|-FunctionDecl 0x7fffd835b2b8 <line:501:19, line:944:215> col:27 stbtt_GetCodepointSDF 'unsigned char *(const stbtt_fontinfo *, float, int, int, unsigned char, float, int *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd835ad58 <col:49, col:71> col:71 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd835add0 <col:77, col:83> col:83 scale 'float'
| |-ParmVarDecl 0x7fffd835ae48 <col:90, col:94> col:94 codepoint 'int'
| |-ParmVarDecl 0x7fffd835aec0 <col:105, col:109> col:109 padding 'int'
| |-ParmVarDecl 0x7fffd835af38 <col:118, col:132> col:132 onedge_value 'unsigned char'
| |-ParmVarDecl 0x7fffd835afb0 <col:146, col:152> col:152 pixel_dist_scale 'float'
| |-ParmVarDecl 0x7fffd835b028 <col:170, col:175> col:175 width 'int *'
| |-ParmVarDecl 0x7fffd835b0a0 <col:182, col:187> col:187 height 'int *'
| |-ParmVarDecl 0x7fffd835b118 <col:195, col:200> col:200 xoff 'int *'
| `-ParmVarDecl 0x7fffd835b190 <col:206, col:211> col:211 yoff 'int *'
|-FunctionDecl 0x7fffd835b5c8 <line:501:19, line:1016:96> col:15 stbtt_FindMatchingFont 'int (const unsigned char *, const char *, int)' extern
| |-ParmVarDecl 0x7fffd835b3f0 <col:38, col:59> col:59 fontdata 'const unsigned char *'
| |-ParmVarDecl 0x7fffd835b468 <col:69, col:81> col:81 name 'const char *'
| `-ParmVarDecl 0x7fffd835b4e0 <col:87, col:91> col:91 flags 'int'
|-FunctionDecl 0x7fffd835b8f8 <line:501:19, line:1027:100> col:15 stbtt_CompareUTF8toUTF16_bigendian 'int (const char *, int, const char *, int)' extern
| |-ParmVarDecl 0x7fffd835b698 <col:50, col:62> col:62 s1 'const char *'
| |-ParmVarDecl 0x7fffd835b710 <col:66, col:70> col:70 len1 'int'
| |-ParmVarDecl 0x7fffd835b788 <col:76, col:88> col:88 s2 'const char *'
| `-ParmVarDecl 0x7fffd835b800 <col:92, col:96> col:96 len2 'int'
|-FunctionDecl 0x7fffd835bd98 <line:501:19, line:1031:146> col:23 stbtt_GetFontNameString 'const char *(const stbtt_fontinfo *, int *, int, int, int, int)' extern
| |-ParmVarDecl 0x7fffd835b9c8 <col:47, col:69> col:69 font 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd835ba40 <col:75, col:80> col:80 length 'int *'
| |-ParmVarDecl 0x7fffd835bab8 <col:88, col:92> col:92 platformID 'int'
| |-ParmVarDecl 0x7fffd835bb30 <col:104, col:108> col:108 encodingID 'int'
| |-ParmVarDecl 0x7fffd835bba8 <col:120, col:124> col:124 languageID 'int'
| `-ParmVarDecl 0x7fffd835bc20 <col:136, col:140> col:140 nameID 'int'
|-EnumDecl 0x7fffd835be68 <line:1039:1, line:1044:1> line:1039:1
| |-EnumConstantDecl 0x7fffd835bf40 <line:1040:5, col:34> col:5 referenced STBTT_PLATFORM_ID_UNICODE 'int'
| | `-IntegerLiteral 0x7fffd835bf20 <col:34> 'int' 0
| |-EnumConstantDecl 0x7fffd835bfa8 <line:1041:5, col:34> col:5 STBTT_PLATFORM_ID_MAC 'int'
| | `-IntegerLiteral 0x7fffd835bf88 <col:34> 'int' 1
| |-EnumConstantDecl 0x7fffd835c010 <line:1042:5, col:34> col:5 STBTT_PLATFORM_ID_ISO 'int'
| | `-IntegerLiteral 0x7fffd835bff0 <col:34> 'int' 2
| `-EnumConstantDecl 0x7fffd835c078 <line:1043:5, col:34> col:5 referenced STBTT_PLATFORM_ID_MICROSOFT 'int'
|   `-IntegerLiteral 0x7fffd835c058 <col:34> 'int' 3
|-EnumDecl 0x7fffd835c0c0 <line:1046:1, line:1052:1> line:1046:1
| |-EnumConstantDecl 0x7fffd835c1a0 <line:1047:5, col:39> col:5 STBTT_UNICODE_EID_UNICODE_1_0 'int'
| | `-IntegerLiteral 0x7fffd835c180 <col:39> 'int' 0
| |-EnumConstantDecl 0x7fffd835c208 <line:1048:5, col:39> col:5 STBTT_UNICODE_EID_UNICODE_1_1 'int'
| | `-IntegerLiteral 0x7fffd835c1e8 <col:39> 'int' 1
| |-EnumConstantDecl 0x7fffd835c270 <line:1049:5, col:39> col:5 STBTT_UNICODE_EID_ISO_10646 'int'
| | `-IntegerLiteral 0x7fffd835c250 <col:39> 'int' 2
| |-EnumConstantDecl 0x7fffd835c2d8 <line:1050:5, col:39> col:5 STBTT_UNICODE_EID_UNICODE_2_0_BMP 'int'
| | `-IntegerLiteral 0x7fffd835c2b8 <col:39> 'int' 3
| `-EnumConstantDecl 0x7fffd835c340 <line:1051:5, col:40> col:5 STBTT_UNICODE_EID_UNICODE_2_0_FULL 'int'
|   `-IntegerLiteral 0x7fffd835c320 <col:40> 'int' 4
|-EnumDecl 0x7fffd835c388 <line:1054:1, line:1059:1> line:1054:1
| |-EnumConstantDecl 0x7fffd835c460 <line:1055:5, col:33> col:5 STBTT_MS_EID_SYMBOL 'int'
| | `-IntegerLiteral 0x7fffd835c440 <col:33> 'int' 0
| |-EnumConstantDecl 0x7fffd835c4c8 <line:1056:5, col:33> col:5 referenced STBTT_MS_EID_UNICODE_BMP 'int'
| | `-IntegerLiteral 0x7fffd835c4a8 <col:33> 'int' 1
| |-EnumConstantDecl 0x7fffd835c530 <line:1057:5, col:33> col:5 STBTT_MS_EID_SHIFTJIS 'int'
| | `-IntegerLiteral 0x7fffd835c510 <col:33> 'int' 2
| `-EnumConstantDecl 0x7fffd835c598 <line:1058:5, col:33> col:5 referenced STBTT_MS_EID_UNICODE_FULL 'int'
|   `-IntegerLiteral 0x7fffd835c578 <col:33> 'int' 10
|-EnumDecl 0x7fffd835c5e0 <line:1061:1, line:1066:1> line:1061:1
| |-EnumConstantDecl 0x7fffd835c6c0 <line:1062:5, col:33> col:5 STBTT_MAC_EID_ROMAN 'int'
| | `-IntegerLiteral 0x7fffd835c6a0 <col:33> 'int' 0
| |-EnumConstantDecl 0x7fffd835c728 <col:38, col:66> col:38 STBTT_MAC_EID_ARABIC 'int'
| | `-IntegerLiteral 0x7fffd835c708 <col:66> 'int' 4
| |-EnumConstantDecl 0x7fffd835c790 <line:1063:5, col:33> col:5 STBTT_MAC_EID_JAPANESE 'int'
| | `-IntegerLiteral 0x7fffd835c770 <col:33> 'int' 1
| |-EnumConstantDecl 0x7fffd835c7f8 <col:38, col:66> col:38 STBTT_MAC_EID_HEBREW 'int'
| | `-IntegerLiteral 0x7fffd835c7d8 <col:66> 'int' 5
| |-EnumConstantDecl 0x7fffd835c860 <line:1064:5, col:33> col:5 STBTT_MAC_EID_CHINESE_TRAD 'int'
| | `-IntegerLiteral 0x7fffd835c840 <col:33> 'int' 2
| |-EnumConstantDecl 0x7fffd835c8c8 <col:38, col:66> col:38 STBTT_MAC_EID_GREEK 'int'
| | `-IntegerLiteral 0x7fffd835c8a8 <col:66> 'int' 6
| |-EnumConstantDecl 0x7fffd835c930 <line:1065:5, col:33> col:5 STBTT_MAC_EID_KOREAN 'int'
| | `-IntegerLiteral 0x7fffd835c910 <col:33> 'int' 3
| `-EnumConstantDecl 0x7fffd835c998 <col:38, col:66> col:38 STBTT_MAC_EID_RUSSIAN 'int'
|   `-IntegerLiteral 0x7fffd835c978 <col:66> 'int' 7
|-EnumDecl 0x7fffd835c9e0 <line:1068:1, line:1076:1> line:1068:1
| |-EnumConstantDecl 0x7fffd835cac0 <line:1070:5, col:32> col:5 STBTT_MS_LANG_ENGLISH 'int'
| | `-IntegerLiteral 0x7fffd835caa0 <col:32> 'int' 1033
| |-EnumConstantDecl 0x7fffd835cb28 <col:42, col:69> col:42 STBTT_MS_LANG_ITALIAN 'int'
| | `-IntegerLiteral 0x7fffd835cb08 <col:69> 'int' 1040
| |-EnumConstantDecl 0x7fffd835cb90 <line:1071:5, col:32> col:5 STBTT_MS_LANG_CHINESE 'int'
| | `-IntegerLiteral 0x7fffd835cb70 <col:32> 'int' 2052
| |-EnumConstantDecl 0x7fffd835cbf8 <col:42, col:69> col:42 STBTT_MS_LANG_JAPANESE 'int'
| | `-IntegerLiteral 0x7fffd835cbd8 <col:69> 'int' 1041
| |-EnumConstantDecl 0x7fffd835cc60 <line:1072:5, col:32> col:5 STBTT_MS_LANG_DUTCH 'int'
| | `-IntegerLiteral 0x7fffd835cc40 <col:32> 'int' 1043
| |-EnumConstantDecl 0x7fffd835ccc8 <col:42, col:69> col:42 STBTT_MS_LANG_KOREAN 'int'
| | `-IntegerLiteral 0x7fffd835cca8 <col:69> 'int' 1042
| |-EnumConstantDecl 0x7fffd835cd30 <line:1073:5, col:32> col:5 STBTT_MS_LANG_FRENCH 'int'
| | `-IntegerLiteral 0x7fffd835cd10 <col:32> 'int' 1036
| |-EnumConstantDecl 0x7fffd835cd98 <col:42, col:69> col:42 STBTT_MS_LANG_RUSSIAN 'int'
| | `-IntegerLiteral 0x7fffd835cd78 <col:69> 'int' 1049
| |-EnumConstantDecl 0x7fffd835ce00 <line:1074:5, col:32> col:5 STBTT_MS_LANG_GERMAN 'int'
| | `-IntegerLiteral 0x7fffd835cde0 <col:32> 'int' 1031
| |-EnumConstantDecl 0x7fffd835ce68 <col:42, col:69> col:42 STBTT_MS_LANG_SPANISH 'int'
| | `-IntegerLiteral 0x7fffd835ce48 <col:69> 'int' 1033
| |-EnumConstantDecl 0x7fffd835ced0 <line:1075:5, col:32> col:5 STBTT_MS_LANG_HEBREW 'int'
| | `-IntegerLiteral 0x7fffd835ceb0 <col:32> 'int' 1037
| `-EnumConstantDecl 0x7fffd835cf38 <col:42, col:69> col:42 STBTT_MS_LANG_SWEDISH 'int'
|   `-IntegerLiteral 0x7fffd835cf18 <col:69> 'int' 1053
|-EnumDecl 0x7fffd835cf80 <line:1078:1, line:1086:1> line:1078:1
| |-EnumConstantDecl 0x7fffd835d060 <line:1079:5, col:34> col:5 STBTT_MAC_LANG_ENGLISH 'int'
| | `-IntegerLiteral 0x7fffd835d040 <col:34> 'int' 0
| |-EnumConstantDecl 0x7fffd835d0c8 <col:40, col:69> col:40 STBTT_MAC_LANG_JAPANESE 'int'
| | `-IntegerLiteral 0x7fffd835d0a8 <col:69> 'int' 11
| |-EnumConstantDecl 0x7fffd835d130 <line:1080:5, col:34> col:5 STBTT_MAC_LANG_ARABIC 'int'
| | `-IntegerLiteral 0x7fffd835d110 <col:34> 'int' 12
| |-EnumConstantDecl 0x7fffd835d198 <col:40, col:69> col:40 STBTT_MAC_LANG_KOREAN 'int'
| | `-IntegerLiteral 0x7fffd835d178 <col:69> 'int' 23
| |-EnumConstantDecl 0x7fffd835f270 <line:1081:5, col:34> col:5 STBTT_MAC_LANG_DUTCH 'int'
| | `-IntegerLiteral 0x7fffd835d1e0 <col:34> 'int' 4
| |-EnumConstantDecl 0x7fffd835f2d8 <col:40, col:69> col:40 STBTT_MAC_LANG_RUSSIAN 'int'
| | `-IntegerLiteral 0x7fffd835f2b8 <col:69> 'int' 32
| |-EnumConstantDecl 0x7fffd835f340 <line:1082:5, col:34> col:5 STBTT_MAC_LANG_FRENCH 'int'
| | `-IntegerLiteral 0x7fffd835f320 <col:34> 'int' 1
| |-EnumConstantDecl 0x7fffd835f3a8 <col:40, col:69> col:40 STBTT_MAC_LANG_SPANISH 'int'
| | `-IntegerLiteral 0x7fffd835f388 <col:69> 'int' 6
| |-EnumConstantDecl 0x7fffd835f410 <line:1083:5, col:34> col:5 STBTT_MAC_LANG_GERMAN 'int'
| | `-IntegerLiteral 0x7fffd835f3f0 <col:34> 'int' 2
| |-EnumConstantDecl 0x7fffd835f478 <col:40, col:69> col:40 STBTT_MAC_LANG_SWEDISH 'int'
| | `-IntegerLiteral 0x7fffd835f458 <col:69> 'int' 5
| |-EnumConstantDecl 0x7fffd835f4e0 <line:1084:5, col:34> col:5 STBTT_MAC_LANG_HEBREW 'int'
| | `-IntegerLiteral 0x7fffd835f4c0 <col:34> 'int' 10
| |-EnumConstantDecl 0x7fffd835f548 <col:40, col:75> col:40 STBTT_MAC_LANG_CHINESE_SIMPLIFIED 'int'
| | `-IntegerLiteral 0x7fffd835f528 <col:75> 'int' 33
| |-EnumConstantDecl 0x7fffd835f5b0 <line:1085:5, col:34> col:5 STBTT_MAC_LANG_ITALIAN 'int'
| | `-IntegerLiteral 0x7fffd835f590 <col:34> 'int' 3
| `-EnumConstantDecl 0x7fffd835f618 <col:40, col:69> col:40 STBTT_MAC_LANG_CHINESE_TRAD 'int'
|   `-IntegerLiteral 0x7fffd835f5f8 <col:69> 'int' 19
|-TypedefDecl 0x7fffd835f8b0 <line:1111:1, col:104> col:13 stbtt__test_oversample_pow2 'int [1]'
| `-ConstantArrayType 0x7fffd835f850 'int [1]' 1 
|   `-BuiltinType 0x7fffd81de310 'int'
|-FunctionDecl 0x7fffd835fad0 <line:1128:1, line:1133:1> line:1128:20 used stbtt__buf_get8 'stbtt_uint8 (stbtt__buf *)' static
| |-ParmVarDecl 0x7fffd835f9c8 <col:36, col:48> col:48 used b 'stbtt__buf *'
| |-CompoundStmt 0x7fffd835fec8 <line:1129:1, line:1133:1>
| | |-IfStmt 0x7fffd835fd10 <line:1130:4, line:1131:14>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x7fffd835fc98 <line:1130:8, col:24> 'int' '>='
| | | | |-ImplicitCastExpr 0x7fffd835fc68 <col:8, col:11> 'int' <LValueToRValue>
| | | | | `-MemberExpr 0x7fffd835fbb8 <col:8, col:11> 'int' lvalue ->cursor 0x7fffd82a7460
| | | | |   `-ImplicitCastExpr 0x7fffd835fba0 <col:8> 'stbtt__buf *' <LValueToRValue>
| | | | |     `-DeclRefExpr 0x7fffd835fb78 <col:8> 'stbtt__buf *' lvalue ParmVar 0x7fffd835f9c8 'b' 'stbtt__buf *'
| | | | `-ImplicitCastExpr 0x7fffd835fc80 <col:21, col:24> 'int' <LValueToRValue>
| | | |   `-MemberExpr 0x7fffd835fc30 <col:21, col:24> 'int' lvalue ->size 0x7fffd82a74c0
| | | |     `-ImplicitCastExpr 0x7fffd835fc18 <col:21> 'stbtt__buf *' <LValueToRValue>
| | | |       `-DeclRefExpr 0x7fffd835fbf0 <col:21> 'stbtt__buf *' lvalue ParmVar 0x7fffd835f9c8 'b' 'stbtt__buf *'
| | | |-ReturnStmt 0x7fffd835fcf8 <line:1131:7, col:14>
| | | | `-ImplicitCastExpr 0x7fffd835fce0 <col:14> 'stbtt_uint8':'unsigned char' <IntegralCast>
| | | |   `-IntegerLiteral 0x7fffd835fcc0 <col:14> 'int' 0
| | | `-<<<NULL>>>
| | `-ReturnStmt 0x7fffd835feb0 <line:1132:4, col:30>
| |   `-ImplicitCastExpr 0x7fffd835fe98 <col:11, col:30> 'unsigned char' <LValueToRValue>
| |     `-ArraySubscriptExpr 0x7fffd835fe70 <col:11, col:30> 'unsigned char' lvalue
| |       |-ImplicitCastExpr 0x7fffd835fe58 <col:11, col:14> 'unsigned char *' <LValueToRValue>
| |       | `-MemberExpr 0x7fffd835fd88 <col:11, col:14> 'unsigned char *' lvalue ->data 0x7fffd82a7400
| |       |   `-ImplicitCastExpr 0x7fffd835fd70 <col:11> 'stbtt__buf *' <LValueToRValue>
| |       |     `-DeclRefExpr 0x7fffd835fd48 <col:11> 'stbtt__buf *' lvalue ParmVar 0x7fffd835f9c8 'b' 'stbtt__buf *'
| |       `-UnaryOperator 0x7fffd835fe38 <col:19, col:28> 'int' postfix '++'
| |         `-MemberExpr 0x7fffd835fe00 <col:19, col:22> 'int' lvalue ->cursor 0x7fffd82a7460
| |           `-ImplicitCastExpr 0x7fffd835fde8 <col:19> 'stbtt__buf *' <LValueToRValue>
| |             `-DeclRefExpr 0x7fffd835fdc0 <col:19> 'stbtt__buf *' lvalue ParmVar 0x7fffd835f9c8 'b' 'stbtt__buf *'
| `-FullComment 0x7fffd8483450 <line:1123:4, col:74>
|   `-ParagraphComment 0x7fffd8483420 <col:4, col:74>
|     `-TextComment 0x7fffd84833f0 <col:4, col:74> Text="///////////////////////////////////////////////////////////////////////"
|-FunctionDecl 0x7fffd835ff80 <line:1135:1, line:1140:1> line:1135:20 used stbtt__buf_peek8 'stbtt_uint8 (stbtt__buf *)' static
| |-ParmVarDecl 0x7fffd835fef8 <col:37, col:49> col:49 used b 'stbtt__buf *'
| `-CompoundStmt 0x7fffd8360370 <line:1136:1, line:1140:1>
|   |-IfStmt 0x7fffd83601c0 <line:1137:4, line:1138:14>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd8360148 <line:1137:8, col:24> 'int' '>='
|   | | |-ImplicitCastExpr 0x7fffd8360118 <col:8, col:11> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x7fffd8360068 <col:8, col:11> 'int' lvalue ->cursor 0x7fffd82a7460
|   | | |   `-ImplicitCastExpr 0x7fffd8360050 <col:8> 'stbtt__buf *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x7fffd8360028 <col:8> 'stbtt__buf *' lvalue ParmVar 0x7fffd835fef8 'b' 'stbtt__buf *'
|   | | `-ImplicitCastExpr 0x7fffd8360130 <col:21, col:24> 'int' <LValueToRValue>
|   | |   `-MemberExpr 0x7fffd83600e0 <col:21, col:24> 'int' lvalue ->size 0x7fffd82a74c0
|   | |     `-ImplicitCastExpr 0x7fffd83600c8 <col:21> 'stbtt__buf *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x7fffd83600a0 <col:21> 'stbtt__buf *' lvalue ParmVar 0x7fffd835fef8 'b' 'stbtt__buf *'
|   | |-ReturnStmt 0x7fffd83601a8 <line:1138:7, col:14>
|   | | `-ImplicitCastExpr 0x7fffd8360190 <col:14> 'stbtt_uint8':'unsigned char' <IntegralCast>
|   | |   `-IntegerLiteral 0x7fffd8360170 <col:14> 'int' 0
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x7fffd8360358 <line:1139:4, col:28>
|     `-ImplicitCastExpr 0x7fffd8360340 <col:11, col:28> 'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x7fffd8360318 <col:11, col:28> 'unsigned char' lvalue
|         |-ImplicitCastExpr 0x7fffd83602e8 <col:11, col:14> 'unsigned char *' <LValueToRValue>
|         | `-MemberExpr 0x7fffd8360238 <col:11, col:14> 'unsigned char *' lvalue ->data 0x7fffd82a7400
|         |   `-ImplicitCastExpr 0x7fffd8360220 <col:11> 'stbtt__buf *' <LValueToRValue>
|         |     `-DeclRefExpr 0x7fffd83601f8 <col:11> 'stbtt__buf *' lvalue ParmVar 0x7fffd835fef8 'b' 'stbtt__buf *'
|         `-ImplicitCastExpr 0x7fffd8360300 <col:19, col:22> 'int' <LValueToRValue>
|           `-MemberExpr 0x7fffd83602b0 <col:19, col:22> 'int' lvalue ->cursor 0x7fffd82a7460
|             `-ImplicitCastExpr 0x7fffd8360298 <col:19> 'stbtt__buf *' <LValueToRValue>
|               `-DeclRefExpr 0x7fffd8360270 <col:19> 'stbtt__buf *' lvalue ParmVar 0x7fffd835fef8 'b' 'stbtt__buf *'
|-FunctionDecl 0x7fffd8360530 <line:1142:1, line:1146:1> line:1142:13 used stbtt__buf_seek 'void (stbtt__buf *, int)' static
| |-ParmVarDecl 0x7fffd83603a0 <col:29, col:41> col:41 used b 'stbtt__buf *'
| |-ParmVarDecl 0x7fffd8360418 <col:44, col:48> col:48 used o 'int'
| `-CompoundStmt 0x7fffd8361238 <line:1143:1, line:1146:1>
|   |-ParenExpr 0x7fffd8360eb0 </usr/include/assert.h:108:3, line:113:7> 'void'
|   | `-BinaryOperator 0x7fffd8360e88 <line:108:4, line:113:6> 'void' ','
|   |   |-CStyleCastExpr 0x7fffd83608a8 <line:108:4, col:33> 'void' <ToVoid>
|   |   | `-UnaryExprOrTypeTraitExpr 0x7fffd8360878 <col:11, col:33> 'unsigned long' sizeof
|   |   |   `-ParenExpr 0x7fffd8360858 <col:18, col:33> 'int'
|   |   |     `-ConditionalOperator 0x7fffd8360828 <col:19, col:32> 'int'
|   |   |       |-ParenExpr 0x7fffd83607c8 <col:19, col:24> 'int'
|   |   |       | `-UnaryOperator 0x7fffd83607a8 <././stb/stb_truetype.h:1144:17, col:39> 'int' prefix '!'
|   |   |       |   `-ParenExpr 0x7fffd8360788 <col:18, col:39> 'int'
|   |   |       |     `-BinaryOperator 0x7fffd8360760 <col:19, col:38> 'int' '||'
|   |   |       |       |-BinaryOperator 0x7fffd83606b0 <col:19, col:26> 'int' '>'
|   |   |       |       | |-ImplicitCastExpr 0x7fffd8360680 <col:19> 'int' <LValueToRValue>
|   |   |       |       | | `-DeclRefExpr 0x7fffd83605e0 <col:19> 'int' lvalue ParmVar 0x7fffd8360418 'o' 'int'
|   |   |       |       | `-ImplicitCastExpr 0x7fffd8360698 <col:23, col:26> 'int' <LValueToRValue>
|   |   |       |       |   `-MemberExpr 0x7fffd8360648 <col:23, col:26> 'int' lvalue ->size 0x7fffd82a74c0
|   |   |       |       |     `-ImplicitCastExpr 0x7fffd8360630 <col:23> 'stbtt__buf *' <LValueToRValue>
|   |   |       |       |       `-DeclRefExpr 0x7fffd8360608 <col:23> 'stbtt__buf *' lvalue ParmVar 0x7fffd83603a0 'b' 'stbtt__buf *'
|   |   |       |       `-BinaryOperator 0x7fffd8360738 <col:34, col:38> 'int' '<'
|   |   |       |         |-ImplicitCastExpr 0x7fffd8360720 <col:34> 'int' <LValueToRValue>
|   |   |       |         | `-DeclRefExpr 0x7fffd83606d8 <col:34> 'int' lvalue ParmVar 0x7fffd8360418 'o' 'int'
|   |   |       |         `-IntegerLiteral 0x7fffd8360700 <col:38> 'int' 0
|   |   |       |-IntegerLiteral 0x7fffd83607e8 </usr/include/assert.h:108:28> 'int' 1
|   |   |       `-IntegerLiteral 0x7fffd8360808 <col:32> 'int' 0
|   |   `-UnaryOperator 0x7fffd8360e68 <col:36, line:113:6> 'void' prefix '__extension__'
|   |     `-StmtExpr 0x7fffd8360e48 <line:108:50, line:113:6> 'void'
|   |       `-CompoundStmt 0x7fffd8360e30 <line:108:51, line:113:5>
|   |         `-IfStmt 0x7fffd8360df8 <line:109:7, line:112:68>
|   |           |-<<<NULL>>>
|   |           |-<<<NULL>>>
|   |           |-UnaryOperator 0x7fffd8360a98 <././stb/stb_truetype.h:1144:17, col:39> 'int' prefix '!'
|   |           | `-ParenExpr 0x7fffd8360a78 <col:18, col:39> 'int'
|   |           |   `-BinaryOperator 0x7fffd8360a50 <col:19, col:38> 'int' '||'
|   |           |     |-BinaryOperator 0x7fffd83609a0 <col:19, col:26> 'int' '>'
|   |           |     | |-ImplicitCastExpr 0x7fffd8360970 <col:19> 'int' <LValueToRValue>
|   |           |     | | `-DeclRefExpr 0x7fffd83608d0 <col:19> 'int' lvalue ParmVar 0x7fffd8360418 'o' 'int'
|   |           |     | `-ImplicitCastExpr 0x7fffd8360988 <col:23, col:26> 'int' <LValueToRValue>
|   |           |     |   `-MemberExpr 0x7fffd8360938 <col:23, col:26> 'int' lvalue ->size 0x7fffd82a74c0
|   |           |     |     `-ImplicitCastExpr 0x7fffd8360920 <col:23> 'stbtt__buf *' <LValueToRValue>
|   |           |     |       `-DeclRefExpr 0x7fffd83608f8 <col:23> 'stbtt__buf *' lvalue ParmVar 0x7fffd83603a0 'b' 'stbtt__buf *'
|   |           |     `-BinaryOperator 0x7fffd8360a28 <col:34, col:38> 'int' '<'
|   |           |       |-ImplicitCastExpr 0x7fffd8360a10 <col:34> 'int' <LValueToRValue>
|   |           |       | `-DeclRefExpr 0x7fffd83609c8 <col:34> 'int' lvalue ParmVar 0x7fffd8360418 'o' 'int'
|   |           |       `-IntegerLiteral 0x7fffd83609f0 <col:38> 'int' 0
|   |           |-NullStmt 0x7fffd8360ab8 </usr/include/assert.h:110:9>
|   |           `-CallExpr 0x7fffd8360d20 <line:112:9, col:68> 'void'
|   |             |-ImplicitCastExpr 0x7fffd8360d08 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |             | `-DeclRefExpr 0x7fffd8360ac8 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |             |-ImplicitCastExpr 0x7fffd8360d80 <<scratch space>:219:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd8360d68 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd8360b28 <col:1> 'char [24]' lvalue "!(o > b->size || o < 0)"
|   |             |-ImplicitCastExpr 0x7fffd8360db0 <line:220:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd8360d98 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd8360ba8 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |             |-ImplicitCastExpr 0x7fffd8360dc8 <line:221:1> 'unsigned int' <IntegralCast>
|   |             | `-IntegerLiteral 0x7fffd8360be8 <col:1> 'int' 1144
|   |             `-ImplicitCastExpr 0x7fffd8360de0 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |               `-UnaryOperator 0x7fffd8360cb8 <col:30, col:44> 'const char [40]' lvalue prefix '__extension__'
|   |                 `-PredefinedExpr 0x7fffd8360c98 <col:44> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |                   `-StringLiteral 0x7fffd8360c48 <col:44> 'const char [40]' lvalue "void stbtt__buf_seek(stbtt__buf *, int)"
|   `-BinaryOperator 0x7fffd8361210 <././stb/stb_truetype.h:1145:4, col:51> 'int' '='
|     |-MemberExpr 0x7fffd8360f10 <col:4, col:7> 'int' lvalue ->cursor 0x7fffd82a7460
|     | `-ImplicitCastExpr 0x7fffd8360ef8 <col:4> 'stbtt__buf *' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fffd8360ed0 <col:4> 'stbtt__buf *' lvalue ParmVar 0x7fffd83603a0 'b' 'stbtt__buf *'
|     `-ConditionalOperator 0x7fffd83611e0 <col:16, col:51> 'int'
|       |-ParenExpr 0x7fffd83610f0 <col:16, col:37> 'int'
|       | `-BinaryOperator 0x7fffd83610c8 <col:17, col:36> 'int' '||'
|       |   |-BinaryOperator 0x7fffd8361018 <col:17, col:24> 'int' '>'
|       |   | |-ImplicitCastExpr 0x7fffd8360fe8 <col:17> 'int' <LValueToRValue>
|       |   | | `-DeclRefExpr 0x7fffd8360f48 <col:17> 'int' lvalue ParmVar 0x7fffd8360418 'o' 'int'
|       |   | `-ImplicitCastExpr 0x7fffd8361000 <col:21, col:24> 'int' <LValueToRValue>
|       |   |   `-MemberExpr 0x7fffd8360fb0 <col:21, col:24> 'int' lvalue ->size 0x7fffd82a74c0
|       |   |     `-ImplicitCastExpr 0x7fffd8360f98 <col:21> 'stbtt__buf *' <LValueToRValue>
|       |   |       `-DeclRefExpr 0x7fffd8360f70 <col:21> 'stbtt__buf *' lvalue ParmVar 0x7fffd83603a0 'b' 'stbtt__buf *'
|       |   `-BinaryOperator 0x7fffd83610a0 <col:32, col:36> 'int' '<'
|       |     |-ImplicitCastExpr 0x7fffd8361088 <col:32> 'int' <LValueToRValue>
|       |     | `-DeclRefExpr 0x7fffd8361040 <col:32> 'int' lvalue ParmVar 0x7fffd8360418 'o' 'int'
|       |     `-IntegerLiteral 0x7fffd8361068 <col:36> 'int' 0
|       |-ImplicitCastExpr 0x7fffd83611b0 <col:41, col:44> 'int' <LValueToRValue>
|       | `-MemberExpr 0x7fffd8361150 <col:41, col:44> 'int' lvalue ->size 0x7fffd82a74c0
|       |   `-ImplicitCastExpr 0x7fffd8361138 <col:41> 'stbtt__buf *' <LValueToRValue>
|       |     `-DeclRefExpr 0x7fffd8361110 <col:41> 'stbtt__buf *' lvalue ParmVar 0x7fffd83603a0 'b' 'stbtt__buf *'
|       `-ImplicitCastExpr 0x7fffd83611c8 <col:51> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x7fffd8361188 <col:51> 'int' lvalue ParmVar 0x7fffd8360418 'o' 'int'
|-FunctionDecl 0x7fffd8361388 <line:1148:1, line:1151:1> line:1148:13 used stbtt__buf_skip 'void (stbtt__buf *, int)' static
| |-ParmVarDecl 0x7fffd8361280 <col:29, col:41> col:41 used b 'stbtt__buf *'
| |-ParmVarDecl 0x7fffd83612f8 <col:44, col:48> col:48 used o 'int'
| `-CompoundStmt 0x7fffd8361640 <line:1149:1, line:1151:1>
|   `-CallExpr 0x7fffd83615f0 <line:1150:4, col:36> 'void'
|     |-ImplicitCastExpr 0x7fffd83615d8 <col:4> 'void (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x7fffd8361438 <col:4> 'void (stbtt__buf *, int)' Function 0x7fffd8360530 'stbtt__buf_seek' 'void (stbtt__buf *, int)'
|     |-ImplicitCastExpr 0x7fffd8361628 <col:20> 'stbtt__buf *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd8361460 <col:20> 'stbtt__buf *' lvalue ParmVar 0x7fffd8361280 'b' 'stbtt__buf *'
|     `-BinaryOperator 0x7fffd8361558 <col:23, col:35> 'int' '+'
|       |-ImplicitCastExpr 0x7fffd8361528 <col:23, col:26> 'int' <LValueToRValue>
|       | `-MemberExpr 0x7fffd83614c8 <col:23, col:26> 'int' lvalue ->cursor 0x7fffd82a7460
|       |   `-ImplicitCastExpr 0x7fffd83614b0 <col:23> 'stbtt__buf *' <LValueToRValue>
|       |     `-DeclRefExpr 0x7fffd8361488 <col:23> 'stbtt__buf *' lvalue ParmVar 0x7fffd8361280 'b' 'stbtt__buf *'
|       `-ImplicitCastExpr 0x7fffd8361540 <col:35> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x7fffd8361500 <col:35> 'int' lvalue ParmVar 0x7fffd83612f8 'o' 'int'
|-FunctionDecl 0x7fffd8361820 <line:1153:1, line:1161:1> line:1153:21 used stbtt__buf_get 'stbtt_uint32 (stbtt__buf *, int)' static
| |-ParmVarDecl 0x7fffd8361690 <col:36, col:48> col:48 used b 'stbtt__buf *'
| |-ParmVarDecl 0x7fffd8361708 <col:51, col:55> col:55 used n 'int'
| `-CompoundStmt 0x7fffd8362580 <line:1154:1, line:1161:1>
|   |-DeclStmt 0x7fffd8361978 <line:1155:4, col:22>
|   | `-VarDecl 0x7fffd83618e0 <col:4, col:21> col:17 used v 'stbtt_uint32':'unsigned int' cinit
|   |   `-ImplicitCastExpr 0x7fffd8361960 <col:21> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |     `-IntegerLiteral 0x7fffd8361940 <col:21> 'int' 0
|   |-DeclStmt 0x7fffd8361a08 <line:1156:4, col:9>
|   | `-VarDecl 0x7fffd83619a8 <col:4, col:8> col:8 used i 'int'
|   |-ParenExpr 0x7fffd8362128 </usr/include/assert.h:108:3, line:113:7> 'void'
|   | `-BinaryOperator 0x7fffd8362100 <line:108:4, line:113:6> 'void' ','
|   |   |-CStyleCastExpr 0x7fffd8361c38 <line:108:4, col:33> 'void' <ToVoid>
|   |   | `-UnaryExprOrTypeTraitExpr 0x7fffd8361c08 <col:11, col:33> 'unsigned long' sizeof
|   |   |   `-ParenExpr 0x7fffd8361be8 <col:18, col:33> 'int'
|   |   |     `-ConditionalOperator 0x7fffd8361bb8 <col:19, col:32> 'int'
|   |   |       |-ParenExpr 0x7fffd8361b58 <col:19, col:24> 'int'
|   |   |       | `-BinaryOperator 0x7fffd8361b30 <././stb/stb_truetype.h:1157:17, col:32> 'int' '&&'
|   |   |       |   |-BinaryOperator 0x7fffd8361a80 <col:17, col:22> 'int' '>='
|   |   |       |   | |-ImplicitCastExpr 0x7fffd8361a68 <col:17> 'int' <LValueToRValue>
|   |   |       |   | | `-DeclRefExpr 0x7fffd8361a20 <col:17> 'int' lvalue ParmVar 0x7fffd8361708 'n' 'int'
|   |   |       |   | `-IntegerLiteral 0x7fffd8361a48 <col:22> 'int' 1
|   |   |       |   `-BinaryOperator 0x7fffd8361b08 <col:27, col:32> 'int' '<='
|   |   |       |     |-ImplicitCastExpr 0x7fffd8361af0 <col:27> 'int' <LValueToRValue>
|   |   |       |     | `-DeclRefExpr 0x7fffd8361aa8 <col:27> 'int' lvalue ParmVar 0x7fffd8361708 'n' 'int'
|   |   |       |     `-IntegerLiteral 0x7fffd8361ad0 <col:32> 'int' 4
|   |   |       |-IntegerLiteral 0x7fffd8361b78 </usr/include/assert.h:108:28> 'int' 1
|   |   |       `-IntegerLiteral 0x7fffd8361b98 <col:32> 'int' 0
|   |   `-UnaryOperator 0x7fffd83620e0 <col:36, line:113:6> 'void' prefix '__extension__'
|   |     `-StmtExpr 0x7fffd83620c0 <line:108:50, line:113:6> 'void'
|   |       `-CompoundStmt 0x7fffd83620a8 <line:108:51, line:113:5>
|   |         `-IfStmt 0x7fffd8362070 <line:109:7, line:112:68>
|   |           |-<<<NULL>>>
|   |           |-<<<NULL>>>
|   |           |-BinaryOperator 0x7fffd8361d70 <././stb/stb_truetype.h:1157:17, col:32> 'int' '&&'
|   |           | |-BinaryOperator 0x7fffd8361cc0 <col:17, col:22> 'int' '>='
|   |           | | |-ImplicitCastExpr 0x7fffd8361ca8 <col:17> 'int' <LValueToRValue>
|   |           | | | `-DeclRefExpr 0x7fffd8361c60 <col:17> 'int' lvalue ParmVar 0x7fffd8361708 'n' 'int'
|   |           | | `-IntegerLiteral 0x7fffd8361c88 <col:22> 'int' 1
|   |           | `-BinaryOperator 0x7fffd8361d48 <col:27, col:32> 'int' '<='
|   |           |   |-ImplicitCastExpr 0x7fffd8361d30 <col:27> 'int' <LValueToRValue>
|   |           |   | `-DeclRefExpr 0x7fffd8361ce8 <col:27> 'int' lvalue ParmVar 0x7fffd8361708 'n' 'int'
|   |           |   `-IntegerLiteral 0x7fffd8361d10 <col:32> 'int' 4
|   |           |-NullStmt 0x7fffd8361d98 </usr/include/assert.h:110:9>
|   |           `-CallExpr 0x7fffd8361f98 <line:112:9, col:68> 'void'
|   |             |-ImplicitCastExpr 0x7fffd8361f80 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |             | `-DeclRefExpr 0x7fffd8361da8 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |             |-ImplicitCastExpr 0x7fffd8361ff8 <<scratch space>:222:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd8361fe0 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd8361dd0 <col:1> 'char [17]' lvalue "n >= 1 && n <= 4"
|   |             |-ImplicitCastExpr 0x7fffd8362028 <line:223:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd8362010 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd8361e08 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |             |-ImplicitCastExpr 0x7fffd8362040 <line:224:1> 'unsigned int' <IntegralCast>
|   |             | `-IntegerLiteral 0x7fffd8361e48 <col:1> 'int' 1157
|   |             `-ImplicitCastExpr 0x7fffd8362058 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |               `-UnaryOperator 0x7fffd8361f60 <col:30, col:44> 'const char [47]' lvalue prefix '__extension__'
|   |                 `-PredefinedExpr 0x7fffd8361f40 <col:44> 'const char [47]' lvalue __PRETTY_FUNCTION__
|   |                   `-StringLiteral 0x7fffd8361ee8 <col:44> 'const char [47]' lvalue "stbtt_uint32 stbtt__buf_get(stbtt__buf *, int)"
|   |-ForStmt 0x7fffd83624f0 <././stb/stb_truetype.h:1158:4, line:1159:39>
|   | |-BinaryOperator 0x7fffd8362190 <line:1158:9, col:13> 'int' '='
|   | | |-DeclRefExpr 0x7fffd8362148 <col:9> 'int' lvalue Var 0x7fffd83619a8 'i' 'int'
|   | | `-IntegerLiteral 0x7fffd8362170 <col:13> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd8362238 <col:16, col:20> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd8362208 <col:16> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd83621b8 <col:16> 'int' lvalue Var 0x7fffd83619a8 'i' 'int'
|   | | `-ImplicitCastExpr 0x7fffd8362220 <col:20> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83621e0 <col:20> 'int' lvalue ParmVar 0x7fffd8361708 'n' 'int'
|   | |-UnaryOperator 0x7fffd8362288 <col:23, col:24> 'int' postfix '++'
|   | | `-DeclRefExpr 0x7fffd8362260 <col:23> 'int' lvalue Var 0x7fffd83619a8 'i' 'int'
|   | `-BinaryOperator 0x7fffd83624c8 <line:1159:7, col:39> 'stbtt_uint32':'unsigned int' '='
|   |   |-DeclRefExpr 0x7fffd83622a8 <col:7> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd83618e0 'v' 'stbtt_uint32':'unsigned int'
|   |   `-BinaryOperator 0x7fffd83624a0 <col:11, col:39> 'unsigned int' '|'
|   |     |-ParenExpr 0x7fffd8362358 <col:11, col:18> 'stbtt_uint32':'unsigned int'
|   |     | `-BinaryOperator 0x7fffd8362330 <col:12, col:17> 'stbtt_uint32':'unsigned int' '<<'
|   |     |   |-ImplicitCastExpr 0x7fffd8362318 <col:12> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x7fffd83622d0 <col:12> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd83618e0 'v' 'stbtt_uint32':'unsigned int'
|   |     |   `-IntegerLiteral 0x7fffd83622f8 <col:17> 'int' 8
|   |     `-ImplicitCastExpr 0x7fffd8362488 <col:22, col:39> 'unsigned int' <IntegralCast>
|   |       `-CallExpr 0x7fffd8362440 <col:22, col:39> 'stbtt_uint8':'unsigned char'
|   |         |-ImplicitCastExpr 0x7fffd8362428 <col:22> 'stbtt_uint8 (*)(stbtt__buf *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x7fffd8362378 <col:22> 'stbtt_uint8 (stbtt__buf *)' Function 0x7fffd835fad0 'stbtt__buf_get8' 'stbtt_uint8 (stbtt__buf *)'
|   |         `-ImplicitCastExpr 0x7fffd8362470 <col:38> 'stbtt__buf *' <LValueToRValue>
|   |           `-DeclRefExpr 0x7fffd83623a0 <col:38> 'stbtt__buf *' lvalue ParmVar 0x7fffd8361690 'b' 'stbtt__buf *'
|   `-ReturnStmt 0x7fffd8362568 <line:1160:4, col:11>
|     `-ImplicitCastExpr 0x7fffd8362550 <col:11> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd8362528 <col:11> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd83618e0 'v' 'stbtt_uint32':'unsigned int'
|-FunctionDecl 0x7fffd8362750 <line:1163:1, line:1171:1> line:1163:19 used stbtt__new_buf 'stbtt__buf (const void *, size_t)' static
| |-ParmVarDecl 0x7fffd83625d0 <col:34, col:46> col:46 used p 'const void *'
| |-ParmVarDecl 0x7fffd8362640 <col:49, col:56> col:56 used size 'size_t':'unsigned long'
| `-CompoundStmt 0x7fffd8363210 <line:1164:1, line:1171:1>
|   |-DeclStmt 0x7fffd8362870 <line:1165:4, col:16>
|   | `-VarDecl 0x7fffd8362810 <col:4, col:15> col:15 used r 'stbtt__buf':'stbtt__buf'
|   |-ParenExpr 0x7fffd8362e68 </usr/include/assert.h:108:3, line:113:7> 'void'
|   | `-BinaryOperator 0x7fffd8362e40 <line:108:4, line:113:6> 'void' ','
|   |   |-CStyleCastExpr 0x7fffd8362a08 <line:108:4, col:33> 'void' <ToVoid>
|   |   | `-UnaryExprOrTypeTraitExpr 0x7fffd83629d8 <col:11, col:33> 'unsigned long' sizeof
|   |   |   `-ParenExpr 0x7fffd83629b8 <col:18, col:33> 'int'
|   |   |     `-ConditionalOperator 0x7fffd8362988 <col:19, col:32> 'int'
|   |   |       |-ParenExpr 0x7fffd8362928 <col:19, col:24> 'int'
|   |   |       | `-BinaryOperator 0x7fffd8362900 <././stb/stb_truetype.h:1166:17, col:24> 'int' '<'
|   |   |       |   |-ImplicitCastExpr 0x7fffd83628d0 <col:17> 'size_t':'unsigned long' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x7fffd8362888 <col:17> 'size_t':'unsigned long' lvalue ParmVar 0x7fffd8362640 'size' 'size_t':'unsigned long'
|   |   |       |   `-ImplicitCastExpr 0x7fffd83628e8 <col:24> 'unsigned long' <IntegralCast>
|   |   |       |     `-IntegerLiteral 0x7fffd83628b0 <col:24> 'int' 1073741824
|   |   |       |-IntegerLiteral 0x7fffd8362948 </usr/include/assert.h:108:28> 'int' 1
|   |   |       `-IntegerLiteral 0x7fffd8362968 <col:32> 'int' 0
|   |   `-UnaryOperator 0x7fffd8362e20 <col:36, line:113:6> 'void' prefix '__extension__'
|   |     `-StmtExpr 0x7fffd8362e00 <line:108:50, line:113:6> 'void'
|   |       `-CompoundStmt 0x7fffd8362de8 <line:108:51, line:113:5>
|   |         `-IfStmt 0x7fffd8362db0 <line:109:7, line:112:68>
|   |           |-<<<NULL>>>
|   |           |-<<<NULL>>>
|   |           |-BinaryOperator 0x7fffd8362aa8 <././stb/stb_truetype.h:1166:17, col:24> 'int' '<'
|   |           | |-ImplicitCastExpr 0x7fffd8362a78 <col:17> 'size_t':'unsigned long' <LValueToRValue>
|   |           | | `-DeclRefExpr 0x7fffd8362a30 <col:17> 'size_t':'unsigned long' lvalue ParmVar 0x7fffd8362640 'size' 'size_t':'unsigned long'
|   |           | `-ImplicitCastExpr 0x7fffd8362a90 <col:24> 'unsigned long' <IntegralCast>
|   |           |   `-IntegerLiteral 0x7fffd8362a58 <col:24> 'int' 1073741824
|   |           |-NullStmt 0x7fffd8362ad0 </usr/include/assert.h:110:9>
|   |           `-CallExpr 0x7fffd8362cd8 <line:112:9, col:68> 'void'
|   |             |-ImplicitCastExpr 0x7fffd8362cc0 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |             | `-DeclRefExpr 0x7fffd8362ae0 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |             |-ImplicitCastExpr 0x7fffd8362d38 <<scratch space>:225:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd8362d20 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd8362b48 <col:1> 'char [18]' lvalue "size < 0x40000000"
|   |             |-ImplicitCastExpr 0x7fffd8362d68 <line:226:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd8362d50 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd8362b88 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |             |-ImplicitCastExpr 0x7fffd8362d80 <line:227:1> 'unsigned int' <IntegralCast>
|   |             | `-IntegerLiteral 0x7fffd8362bc8 <col:1> 'int' 1166
|   |             `-ImplicitCastExpr 0x7fffd8362d98 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |               `-UnaryOperator 0x7fffd8362ca0 <col:30, col:44> 'const char [48]' lvalue prefix '__extension__'
|   |                 `-PredefinedExpr 0x7fffd8362c80 <col:44> 'const char [48]' lvalue __PRETTY_FUNCTION__
|   |                   `-StringLiteral 0x7fffd8362c28 <col:44> 'const char [48]' lvalue "stbtt__buf stbtt__new_buf(const void *, size_t)"
|   |-BinaryOperator 0x7fffd8362f88 <././stb/stb_truetype.h:1167:4, col:28> 'unsigned char *' '='
|   | |-MemberExpr 0x7fffd8362eb0 <col:4, col:6> 'unsigned char *' lvalue .data 0x7fffd82a7400
|   | | `-DeclRefExpr 0x7fffd8362e88 <col:4> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd8362810 'r' 'stbtt__buf':'stbtt__buf'
|   | `-CStyleCastExpr 0x7fffd8362f60 <col:13, col:28> 'stbtt_uint8 *' <BitCast>
|   |   `-ImplicitCastExpr 0x7fffd8362f48 <col:28> 'const void *' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd8362ee8 <col:28> 'const void *' lvalue ParmVar 0x7fffd83625d0 'p' 'const void *'
|   |-BinaryOperator 0x7fffd8363090 <line:1168:4, col:19> 'int' '='
|   | |-MemberExpr 0x7fffd8362fd8 <col:4, col:6> 'int' lvalue .size 0x7fffd82a74c0
|   | | `-DeclRefExpr 0x7fffd8362fb0 <col:4> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd8362810 'r' 'stbtt__buf':'stbtt__buf'
|   | `-CStyleCastExpr 0x7fffd8363068 <col:13, col:19> 'int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x7fffd8363050 <col:19> 'size_t':'unsigned long' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd8363010 <col:19> 'size_t':'unsigned long' lvalue ParmVar 0x7fffd8362640 'size' 'size_t':'unsigned long'
|   |-BinaryOperator 0x7fffd8363190 <line:1169:4, col:15> 'int' '='
|   | |-MemberExpr 0x7fffd8363138 <col:4, col:6> 'int' lvalue .cursor 0x7fffd82a7460
|   | | `-DeclRefExpr 0x7fffd8363110 <col:4> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd8362810 'r' 'stbtt__buf':'stbtt__buf'
|   | `-IntegerLiteral 0x7fffd8363170 <col:15> 'int' 0
|   `-ReturnStmt 0x7fffd83631f8 <line:1170:4, col:11>
|     `-ImplicitCastExpr 0x7fffd83631e0 <col:11> 'stbtt__buf':'stbtt__buf' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd83631b8 <col:11> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd8362810 'r' 'stbtt__buf':'stbtt__buf'
|-FunctionDecl 0x7fffd83634f0 <line:1176:1, line:1183:1> line:1176:19 used stbtt__buf_range 'stbtt__buf (const stbtt__buf *, int, int)' static
| |-ParmVarDecl 0x7fffd83632c8 <col:36, col:54> col:54 used b 'const stbtt__buf *'
| |-ParmVarDecl 0x7fffd8363340 <col:57, col:61> col:61 used o 'int'
| |-ParmVarDecl 0x7fffd83633b8 <col:64, col:68> col:68 used s 'int'
| `-CompoundStmt 0x7fffd8363ee0 <line:1177:1, line:1183:1>
|   |-DeclStmt 0x7fffd83637b8 <line:1178:4, col:42>
|   | `-VarDecl 0x7fffd83635b8 <col:4, col:41> col:15 used r 'stbtt__buf':'stbtt__buf' cinit
|   |   `-CallExpr 0x7fffd8363750 <col:19, col:41> 'stbtt__buf':'stbtt__buf'
|   |     |-ImplicitCastExpr 0x7fffd8363738 <col:19> 'stbtt__buf (*)(const void *, size_t)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd8363618 <col:19> 'stbtt__buf (const void *, size_t)' Function 0x7fffd8362750 'stbtt__new_buf' 'stbtt__buf (const void *, size_t)'
|   |     |-ImplicitCastExpr 0x7fffd8363788 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'const void *' <NullToPointer>
|   |     | `-ParenExpr 0x7fffd83636a0 <col:16, col:25> 'void *'
|   |     |   `-CStyleCastExpr 0x7fffd8363678 <col:17, col:24> 'void *' <NullToPointer>
|   |     |     `-IntegerLiteral 0x7fffd8363640 <col:24> 'int' 0
|   |     `-ImplicitCastExpr 0x7fffd83637a0 <././stb/stb_truetype.h:1178:40> 'size_t':'unsigned long' <IntegralCast>
|   |       `-IntegerLiteral 0x7fffd83636c0 <col:40> 'int' 0
|   |-IfStmt 0x7fffd8363c08 <line:1179:4, col:65>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd8363b88 <col:8, col:55> 'int' '||'
|   | | |-BinaryOperator 0x7fffd8363a00 <col:8, col:33> 'int' '||'
|   | | | |-BinaryOperator 0x7fffd83638e0 <col:8, col:21> 'int' '||'
|   | | | | |-BinaryOperator 0x7fffd8363830 <col:8, col:12> 'int' '<'
|   | | | | | |-ImplicitCastExpr 0x7fffd8363818 <col:8> 'int' <LValueToRValue>
|   | | | | | | `-DeclRefExpr 0x7fffd83637d0 <col:8> 'int' lvalue ParmVar 0x7fffd8363340 'o' 'int'
|   | | | | | `-IntegerLiteral 0x7fffd83637f8 <col:12> 'int' 0
|   | | | | `-BinaryOperator 0x7fffd83638b8 <col:17, col:21> 'int' '<'
|   | | | |   |-ImplicitCastExpr 0x7fffd83638a0 <col:17> 'int' <LValueToRValue>
|   | | | |   | `-DeclRefExpr 0x7fffd8363858 <col:17> 'int' lvalue ParmVar 0x7fffd83633b8 's' 'int'
|   | | | |   `-IntegerLiteral 0x7fffd8363880 <col:21> 'int' 0
|   | | | `-BinaryOperator 0x7fffd83639d8 <col:26, col:33> 'int' '>'
|   | | |   |-ImplicitCastExpr 0x7fffd83639a8 <col:26> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x7fffd8363908 <col:26> 'int' lvalue ParmVar 0x7fffd8363340 'o' 'int'
|   | | |   `-ImplicitCastExpr 0x7fffd83639c0 <col:30, col:33> 'int' <LValueToRValue>
|   | | |     `-MemberExpr 0x7fffd8363970 <col:30, col:33> 'const int' lvalue ->size 0x7fffd82a74c0
|   | | |       `-ImplicitCastExpr 0x7fffd8363958 <col:30> 'const stbtt__buf *' <LValueToRValue>
|   | | |         `-DeclRefExpr 0x7fffd8363930 <col:30> 'const stbtt__buf *' lvalue ParmVar 0x7fffd83632c8 'b' 'const stbtt__buf *'
|   | | `-BinaryOperator 0x7fffd8363b60 <col:41, col:55> 'int' '>'
|   | |   |-ImplicitCastExpr 0x7fffd8363b48 <col:41> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd8363a28 <col:41> 'int' lvalue ParmVar 0x7fffd83633b8 's' 'int'
|   | |   `-BinaryOperator 0x7fffd8363b20 <col:45, col:55> 'int' '-'
|   | |     |-ImplicitCastExpr 0x7fffd8363af0 <col:45, col:48> 'int' <LValueToRValue>
|   | |     | `-MemberExpr 0x7fffd8363a90 <col:45, col:48> 'const int' lvalue ->size 0x7fffd82a74c0
|   | |     |   `-ImplicitCastExpr 0x7fffd8363a78 <col:45> 'const stbtt__buf *' <LValueToRValue>
|   | |     |     `-DeclRefExpr 0x7fffd8363a50 <col:45> 'const stbtt__buf *' lvalue ParmVar 0x7fffd83632c8 'b' 'const stbtt__buf *'
|   | |     `-ImplicitCastExpr 0x7fffd8363b08 <col:55> 'int' <LValueToRValue>
|   | |       `-DeclRefExpr 0x7fffd8363ac8 <col:55> 'int' lvalue ParmVar 0x7fffd8363340 'o' 'int'
|   | |-ReturnStmt 0x7fffd8363bf0 <col:58, col:65>
|   | | `-ImplicitCastExpr 0x7fffd8363bd8 <col:65> 'stbtt__buf':'stbtt__buf' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8363bb0 <col:65> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83635b8 'r' 'stbtt__buf':'stbtt__buf'
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x7fffd8363d98 <line:1180:4, col:23> 'unsigned char *' '='
|   | |-MemberExpr 0x7fffd8363c68 <col:4, col:6> 'unsigned char *' lvalue .data 0x7fffd82a7400
|   | | `-DeclRefExpr 0x7fffd8363c40 <col:4> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83635b8 'r' 'stbtt__buf':'stbtt__buf'
|   | `-BinaryOperator 0x7fffd8363d70 <col:13, col:23> 'unsigned char *' '+'
|   |   |-ImplicitCastExpr 0x7fffd8363d40 <col:13, col:16> 'unsigned char *' <LValueToRValue>
|   |   | `-MemberExpr 0x7fffd8363ce0 <col:13, col:16> 'unsigned char *const' lvalue ->data 0x7fffd82a7400
|   |   |   `-ImplicitCastExpr 0x7fffd8363cc8 <col:13> 'const stbtt__buf *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x7fffd8363ca0 <col:13> 'const stbtt__buf *' lvalue ParmVar 0x7fffd83632c8 'b' 'const stbtt__buf *'
|   |   `-ImplicitCastExpr 0x7fffd8363d58 <col:23> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd8363d18 <col:23> 'int' lvalue ParmVar 0x7fffd8363340 'o' 'int'
|   |-BinaryOperator 0x7fffd8363e60 <line:1181:4, col:13> 'int' '='
|   | |-MemberExpr 0x7fffd8363de8 <col:4, col:6> 'int' lvalue .size 0x7fffd82a74c0
|   | | `-DeclRefExpr 0x7fffd8363dc0 <col:4> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83635b8 'r' 'stbtt__buf':'stbtt__buf'
|   | `-ImplicitCastExpr 0x7fffd8363e48 <col:13> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd8363e20 <col:13> 'int' lvalue ParmVar 0x7fffd83633b8 's' 'int'
|   `-ReturnStmt 0x7fffd8363ec8 <line:1182:4, col:11>
|     `-ImplicitCastExpr 0x7fffd8363eb0 <col:11> 'stbtt__buf':'stbtt__buf' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd8363e88 <col:11> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83635b8 'r' 'stbtt__buf':'stbtt__buf'
|-FunctionDecl 0x7fffd8364030 <line:1185:1, line:1197:1> line:1185:19 used stbtt__cff_get_index 'stbtt__buf (stbtt__buf *)' static
| |-ParmVarDecl 0x7fffd8363f28 <col:40, col:52> col:52 used b 'stbtt__buf *'
| `-CompoundStmt 0x7fffd8365470 <line:1186:1, line:1197:1>
|   |-DeclStmt 0x7fffd8364260 <line:1187:4, col:29>
|   | |-VarDecl 0x7fffd83640f0 <col:4, col:8> col:8 used count 'int'
|   | |-VarDecl 0x7fffd8364168 <col:4, col:15> col:15 used start 'int'
|   | `-VarDecl 0x7fffd83641e0 <col:4, col:22> col:22 used offsize 'int'
|   |-BinaryOperator 0x7fffd8364330 <line:1188:4, col:15> 'int' '='
|   | |-DeclRefExpr 0x7fffd8364278 <col:4> 'int' lvalue Var 0x7fffd8364168 'start' 'int'
|   | `-ImplicitCastExpr 0x7fffd8364318 <col:12, col:15> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x7fffd83642e0 <col:12, col:15> 'int' lvalue ->cursor 0x7fffd82a7460
|   |     `-ImplicitCastExpr 0x7fffd83642c8 <col:12> 'stbtt__buf *' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd83642a0 <col:12> 'stbtt__buf *' lvalue ParmVar 0x7fffd8363f28 'b' 'stbtt__buf *'
|   |-BinaryOperator 0x7fffd83644e8 <line:1189:4, line:1173:51> 'int' '='
|   | |-DeclRefExpr 0x7fffd8364358 <line:1189:4> 'int' lvalue Var 0x7fffd83640f0 'count' 'int'
|   | `-ImplicitCastExpr 0x7fffd83644d0 <line:1173:30, col:51> 'int' <IntegralCast>
|   |   `-CallExpr 0x7fffd8364480 <col:30, col:51> 'stbtt_uint32':'unsigned int'
|   |     |-ImplicitCastExpr 0x7fffd8364468 <col:30> 'stbtt_uint32 (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd8364380 <col:30> 'stbtt_uint32 (stbtt__buf *, int)' Function 0x7fffd8361820 'stbtt__buf_get' 'stbtt_uint32 (stbtt__buf *, int)'
|   |     |-ImplicitCastExpr 0x7fffd83644b8 <col:45, col:47> 'stbtt__buf *' <LValueToRValue>
|   |     | `-ParenExpr 0x7fffd83643d0 <col:45, col:47> 'stbtt__buf *' lvalue
|   |     |   `-DeclRefExpr 0x7fffd83643a8 <line:1189:29> 'stbtt__buf *' lvalue ParmVar 0x7fffd8363f28 'b' 'stbtt__buf *'
|   |     `-IntegerLiteral 0x7fffd83643f0 <line:1173:50> 'int' 2
|   |-IfStmt 0x7fffd8365190 <line:1190:4, line:1195:4>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd8364538 <line:1190:8> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd8364510 <col:8> 'int' lvalue Var 0x7fffd83640f0 'count' 'int'
|   | |-CompoundStmt 0x7fffd8365160 <col:15, line:1195:4>
|   | | |-BinaryOperator 0x7fffd8364640 <line:1191:7, col:34> 'int' '='
|   | | | |-DeclRefExpr 0x7fffd8364550 <col:7> 'int' lvalue Var 0x7fffd83641e0 'offsize' 'int'
|   | | | `-ImplicitCastExpr 0x7fffd8364628 <col:17, col:34> 'int' <IntegralCast>
|   | | |   `-CallExpr 0x7fffd83645e0 <col:17, col:34> 'stbtt_uint8':'unsigned char'
|   | | |     |-ImplicitCastExpr 0x7fffd83645c8 <col:17> 'stbtt_uint8 (*)(stbtt__buf *)' <FunctionToPointerDecay>
|   | | |     | `-DeclRefExpr 0x7fffd8364578 <col:17> 'stbtt_uint8 (stbtt__buf *)' Function 0x7fffd835fad0 'stbtt__buf_get8' 'stbtt_uint8 (stbtt__buf *)'
|   | | |     `-ImplicitCastExpr 0x7fffd8364610 <col:33> 'stbtt__buf *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x7fffd83645a0 <col:33> 'stbtt__buf *' lvalue ParmVar 0x7fffd8363f28 'b' 'stbtt__buf *'
|   | | |-ParenExpr 0x7fffd8364db8 </usr/include/assert.h:108:3, line:113:7> 'void'
|   | | | `-BinaryOperator 0x7fffd8364d90 <line:108:4, line:113:6> 'void' ','
|   | | |   |-CStyleCastExpr 0x7fffd8364880 <line:108:4, col:33> 'void' <ToVoid>
|   | | |   | `-UnaryExprOrTypeTraitExpr 0x7fffd8364850 <col:11, col:33> 'unsigned long' sizeof
|   | | |   |   `-ParenExpr 0x7fffd8364830 <col:18, col:33> 'int'
|   | | |   |     `-ConditionalOperator 0x7fffd8364800 <col:19, col:32> 'int'
|   | | |   |       |-ParenExpr 0x7fffd83647a0 <col:19, col:24> 'int'
|   | | |   |       | `-BinaryOperator 0x7fffd8364778 <././stb/stb_truetype.h:1192:20, col:47> 'int' '&&'
|   | | |   |       |   |-BinaryOperator 0x7fffd83646c8 <col:20, col:31> 'int' '>='
|   | | |   |       |   | |-ImplicitCastExpr 0x7fffd83646b0 <col:20> 'int' <LValueToRValue>
|   | | |   |       |   | | `-DeclRefExpr 0x7fffd8364668 <col:20> 'int' lvalue Var 0x7fffd83641e0 'offsize' 'int'
|   | | |   |       |   | `-IntegerLiteral 0x7fffd8364690 <col:31> 'int' 1
|   | | |   |       |   `-BinaryOperator 0x7fffd8364750 <col:36, col:47> 'int' '<='
|   | | |   |       |     |-ImplicitCastExpr 0x7fffd8364738 <col:36> 'int' <LValueToRValue>
|   | | |   |       |     | `-DeclRefExpr 0x7fffd83646f0 <col:36> 'int' lvalue Var 0x7fffd83641e0 'offsize' 'int'
|   | | |   |       |     `-IntegerLiteral 0x7fffd8364718 <col:47> 'int' 4
|   | | |   |       |-IntegerLiteral 0x7fffd83647c0 </usr/include/assert.h:108:28> 'int' 1
|   | | |   |       `-IntegerLiteral 0x7fffd83647e0 <col:32> 'int' 0
|   | | |   `-UnaryOperator 0x7fffd8364d70 <col:36, line:113:6> 'void' prefix '__extension__'
|   | | |     `-StmtExpr 0x7fffd8364d50 <line:108:50, line:113:6> 'void'
|   | | |       `-CompoundStmt 0x7fffd8364d38 <line:108:51, line:113:5>
|   | | |         `-IfStmt 0x7fffd8364d00 <line:109:7, line:112:68>
|   | | |           |-<<<NULL>>>
|   | | |           |-<<<NULL>>>
|   | | |           |-BinaryOperator 0x7fffd83649b8 <././stb/stb_truetype.h:1192:20, col:47> 'int' '&&'
|   | | |           | |-BinaryOperator 0x7fffd8364908 <col:20, col:31> 'int' '>='
|   | | |           | | |-ImplicitCastExpr 0x7fffd83648f0 <col:20> 'int' <LValueToRValue>
|   | | |           | | | `-DeclRefExpr 0x7fffd83648a8 <col:20> 'int' lvalue Var 0x7fffd83641e0 'offsize' 'int'
|   | | |           | | `-IntegerLiteral 0x7fffd83648d0 <col:31> 'int' 1
|   | | |           | `-BinaryOperator 0x7fffd8364990 <col:36, col:47> 'int' '<='
|   | | |           |   |-ImplicitCastExpr 0x7fffd8364978 <col:36> 'int' <LValueToRValue>
|   | | |           |   | `-DeclRefExpr 0x7fffd8364930 <col:36> 'int' lvalue Var 0x7fffd83641e0 'offsize' 'int'
|   | | |           |   `-IntegerLiteral 0x7fffd8364958 <col:47> 'int' 4
|   | | |           |-NullStmt 0x7fffd83649e0 </usr/include/assert.h:110:9>
|   | | |           `-CallExpr 0x7fffd8364c28 <line:112:9, col:68> 'void'
|   | | |             |-ImplicitCastExpr 0x7fffd8364c10 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   | | |             | `-DeclRefExpr 0x7fffd83649f0 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   | | |             |-ImplicitCastExpr 0x7fffd8364c88 <<scratch space>:228:1> 'const char *' <BitCast>
|   | | |             | `-ImplicitCastExpr 0x7fffd8364c70 <col:1> 'char *' <ArrayToPointerDecay>
|   | | |             |   `-StringLiteral 0x7fffd8364a58 <col:1> 'char [29]' lvalue "offsize >= 1 && offsize <= 4"
|   | | |             |-ImplicitCastExpr 0x7fffd8364cb8 <line:229:1> 'const char *' <BitCast>
|   | | |             | `-ImplicitCastExpr 0x7fffd8364ca0 <col:1> 'char *' <ArrayToPointerDecay>
|   | | |             |   `-StringLiteral 0x7fffd8364aa0 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   | | |             |-ImplicitCastExpr 0x7fffd8364cd0 <line:230:1> 'unsigned int' <IntegralCast>
|   | | |             | `-IntegerLiteral 0x7fffd8364ae0 <col:1> 'int' 1192
|   | | |             `-ImplicitCastExpr 0x7fffd8364ce8 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   | | |               `-UnaryOperator 0x7fffd8364bf0 <col:30, col:44> 'const char [46]' lvalue prefix '__extension__'
|   | | |                 `-PredefinedExpr 0x7fffd8364bd0 <col:44> 'const char [46]' lvalue __PRETTY_FUNCTION__
|   | | |                   `-StringLiteral 0x7fffd8364b78 <col:44> 'const char [46]' lvalue "stbtt__buf stbtt__cff_get_index(stbtt__buf *)"
|   | | |-CallExpr 0x7fffd8364ee8 <././stb/stb_truetype.h:1193:7, col:41> 'void'
|   | | | |-ImplicitCastExpr 0x7fffd8364ed0 <col:7> 'void (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x7fffd8364dd8 <col:7> 'void (stbtt__buf *, int)' Function 0x7fffd8361388 'stbtt__buf_skip' 'void (stbtt__buf *, int)'
|   | | | |-ImplicitCastExpr 0x7fffd8364f20 <col:23> 'stbtt__buf *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x7fffd8364e00 <col:23> 'stbtt__buf *' lvalue ParmVar 0x7fffd8363f28 'b' 'stbtt__buf *'
|   | | | `-BinaryOperator 0x7fffd8364ea8 <col:26, col:36> 'int' '*'
|   | | |   |-ImplicitCastExpr 0x7fffd8364e78 <col:26> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x7fffd8364e28 <col:26> 'int' lvalue Var 0x7fffd83641e0 'offsize' 'int'
|   | | |   `-ImplicitCastExpr 0x7fffd8364e90 <col:36> 'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x7fffd8364e50 <col:36> 'int' lvalue Var 0x7fffd83640f0 'count' 'int'
|   | | `-CallExpr 0x7fffd83650f8 <line:1194:7, col:56> 'void'
|   | |   |-ImplicitCastExpr 0x7fffd83650e0 <col:7> 'void (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x7fffd8364f38 <col:7> 'void (stbtt__buf *, int)' Function 0x7fffd8361388 'stbtt__buf_skip' 'void (stbtt__buf *, int)'
|   | |   |-ImplicitCastExpr 0x7fffd8365130 <col:23> 'stbtt__buf *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd8364f60 <col:23> 'stbtt__buf *' lvalue ParmVar 0x7fffd8363f28 'b' 'stbtt__buf *'
|   | |   `-ImplicitCastExpr 0x7fffd8365148 <col:26, col:55> 'int' <IntegralCast>
|   | |     `-BinaryOperator 0x7fffd83650b8 <col:26, col:55> 'unsigned int' '-'
|   | |       |-CallExpr 0x7fffd8365018 <col:26, col:51> 'stbtt_uint32':'unsigned int'
|   | |       | |-ImplicitCastExpr 0x7fffd8365000 <col:26> 'stbtt_uint32 (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   | |       | | `-DeclRefExpr 0x7fffd8364f88 <col:26> 'stbtt_uint32 (stbtt__buf *, int)' Function 0x7fffd8361820 'stbtt__buf_get' 'stbtt_uint32 (stbtt__buf *, int)'
|   | |       | |-ImplicitCastExpr 0x7fffd8365050 <col:41> 'stbtt__buf *' <LValueToRValue>
|   | |       | | `-DeclRefExpr 0x7fffd8364fb0 <col:41> 'stbtt__buf *' lvalue ParmVar 0x7fffd8363f28 'b' 'stbtt__buf *'
|   | |       | `-ImplicitCastExpr 0x7fffd8365068 <col:44> 'int' <LValueToRValue>
|   | |       |   `-DeclRefExpr 0x7fffd8364fd8 <col:44> 'int' lvalue Var 0x7fffd83641e0 'offsize' 'int'
|   | |       `-ImplicitCastExpr 0x7fffd83650a0 <col:55> 'unsigned int' <IntegralCast>
|   | |         `-IntegerLiteral 0x7fffd8365080 <col:55> 'int' 1
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x7fffd8365458 <line:1196:4, col:55>
|     `-CallExpr 0x7fffd83653d0 <col:11, col:55> 'stbtt__buf':'stbtt__buf'
|       |-ImplicitCastExpr 0x7fffd83653b8 <col:11> 'stbtt__buf (*)(const stbtt__buf *, int, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x7fffd83651c8 <col:11> 'stbtt__buf (const stbtt__buf *, int, int)' Function 0x7fffd83634f0 'stbtt__buf_range' 'stbtt__buf (const stbtt__buf *, int, int)'
|       |-ImplicitCastExpr 0x7fffd8365428 <col:28> 'const stbtt__buf *' <BitCast>
|       | `-ImplicitCastExpr 0x7fffd8365410 <col:28> 'stbtt__buf *' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fffd83651f0 <col:28> 'stbtt__buf *' lvalue ParmVar 0x7fffd8363f28 'b' 'stbtt__buf *'
|       |-ImplicitCastExpr 0x7fffd8365440 <col:31> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd8365218 <col:31> 'int' lvalue Var 0x7fffd8364168 'start' 'int'
|       `-BinaryOperator 0x7fffd8365330 <col:38, col:50> 'int' '-'
|         |-ImplicitCastExpr 0x7fffd8365300 <col:38, col:41> 'int' <LValueToRValue>
|         | `-MemberExpr 0x7fffd83652a0 <col:38, col:41> 'int' lvalue ->cursor 0x7fffd82a7460
|         |   `-ImplicitCastExpr 0x7fffd8365268 <col:38> 'stbtt__buf *' <LValueToRValue>
|         |     `-DeclRefExpr 0x7fffd8365240 <col:38> 'stbtt__buf *' lvalue ParmVar 0x7fffd8363f28 'b' 'stbtt__buf *'
|         `-ImplicitCastExpr 0x7fffd8365318 <col:50> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x7fffd83652d8 <col:50> 'int' lvalue Var 0x7fffd8364168 'start' 'int'
|-FunctionDecl 0x7fffd83655c0 <line:1199:1, line:1209:1> line:1199:21 used stbtt__cff_int 'stbtt_uint32 (stbtt__buf *)' static
| |-ParmVarDecl 0x7fffd83654b8 <col:36, col:48> col:48 used b 'stbtt__buf *'
| `-CompoundStmt 0x7fffd8366ab8 <line:1200:1, line:1209:1>
|   |-DeclStmt 0x7fffd83657a8 <line:1201:4, col:31>
|   | `-VarDecl 0x7fffd8365680 <col:4, col:30> col:8 used b0 'int' cinit
|   |   `-ImplicitCastExpr 0x7fffd8365790 <col:13, col:30> 'int' <IntegralCast>
|   |     `-CallExpr 0x7fffd8365748 <col:13, col:30> 'stbtt_uint8':'unsigned char'
|   |       |-ImplicitCastExpr 0x7fffd8365730 <col:13> 'stbtt_uint8 (*)(stbtt__buf *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x7fffd83656e0 <col:13> 'stbtt_uint8 (stbtt__buf *)' Function 0x7fffd835fad0 'stbtt__buf_get8' 'stbtt_uint8 (stbtt__buf *)'
|   |       `-ImplicitCastExpr 0x7fffd8365778 <col:29> 'stbtt__buf *' <LValueToRValue>
|   |         `-DeclRefExpr 0x7fffd8365708 <col:29> 'stbtt__buf *' lvalue ParmVar 0x7fffd83654b8 'b' 'stbtt__buf *'
|   |-IfStmt 0x7fffd8366500 <line:1202:4, line:1174:51>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83658d0 <line:1202:8, col:26> 'int' '&&'
|   | | |-BinaryOperator 0x7fffd8365820 <col:8, col:14> 'int' '>='
|   | | | |-ImplicitCastExpr 0x7fffd8365808 <col:8> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x7fffd83657c0 <col:8> 'int' lvalue Var 0x7fffd8365680 'b0' 'int'
|   | | | `-IntegerLiteral 0x7fffd83657e8 <col:14> 'int' 32
|   | | `-BinaryOperator 0x7fffd83658a8 <col:20, col:26> 'int' '<='
|   | |   |-ImplicitCastExpr 0x7fffd8365890 <col:20> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd8365848 <col:20> 'int' lvalue Var 0x7fffd8365680 'b0' 'int'
|   | |   `-IntegerLiteral 0x7fffd8365870 <col:26> 'int' 246
|   | |-ReturnStmt 0x7fffd8365998 <col:37, col:49>
|   | | `-ImplicitCastExpr 0x7fffd8365980 <col:44, col:49> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   | |   `-BinaryOperator 0x7fffd8365958 <col:44, col:49> 'int' '-'
|   | |     |-ImplicitCastExpr 0x7fffd8365940 <col:44> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x7fffd83658f8 <col:44> 'int' lvalue Var 0x7fffd8365680 'b0' 'int'
|   | |     `-IntegerLiteral 0x7fffd8365920 <col:49> 'int' 139
|   | `-IfStmt 0x7fffd83664c8 <line:1203:9, line:1174:51>
|   |   |-<<<NULL>>>
|   |   |-<<<NULL>>>
|   |   |-BinaryOperator 0x7fffd8365ac0 <line:1203:13, col:32> 'int' '&&'
|   |   | |-BinaryOperator 0x7fffd8365a10 <col:13, col:19> 'int' '>='
|   |   | | |-ImplicitCastExpr 0x7fffd83659f8 <col:13> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x7fffd83659b0 <col:13> 'int' lvalue Var 0x7fffd8365680 'b0' 'int'
|   |   | | `-IntegerLiteral 0x7fffd83659d8 <col:19> 'int' 247
|   |   | `-BinaryOperator 0x7fffd8365a98 <col:26, col:32> 'int' '<='
|   |   |   |-ImplicitCastExpr 0x7fffd8365a80 <col:26> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x7fffd8365a38 <col:26> 'int' lvalue Var 0x7fffd8365680 'b0' 'int'
|   |   |   `-IntegerLiteral 0x7fffd8365a60 <col:32> 'int' 250
|   |   |-ReturnStmt 0x7fffd8365d28 <col:37, col:82>
|   |   | `-ImplicitCastExpr 0x7fffd8365d10 <col:44, col:82> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |   |   `-BinaryOperator 0x7fffd8365ce8 <col:44, col:82> 'int' '+'
|   |   |     |-BinaryOperator 0x7fffd8365ca0 <col:44, col:78> 'int' '+'
|   |   |     | |-BinaryOperator 0x7fffd8365bb0 <col:44, col:55> 'int' '*'
|   |   |     | | |-ParenExpr 0x7fffd8365b70 <col:44, col:53> 'int'
|   |   |     | | | `-BinaryOperator 0x7fffd8365b48 <col:45, col:50> 'int' '-'
|   |   |     | | |   |-ImplicitCastExpr 0x7fffd8365b30 <col:45> 'int' <LValueToRValue>
|   |   |     | | |   | `-DeclRefExpr 0x7fffd8365ae8 <col:45> 'int' lvalue Var 0x7fffd8365680 'b0' 'int'
|   |   |     | | |   `-IntegerLiteral 0x7fffd8365b10 <col:50> 'int' 247
|   |   |     | | `-IntegerLiteral 0x7fffd8365b90 <col:55> 'int' 256
|   |   |     | `-ImplicitCastExpr 0x7fffd8365c88 <col:61, col:78> 'int' <IntegralCast>
|   |   |     |   `-CallExpr 0x7fffd8365c40 <col:61, col:78> 'stbtt_uint8':'unsigned char'
|   |   |     |     |-ImplicitCastExpr 0x7fffd8365c28 <col:61> 'stbtt_uint8 (*)(stbtt__buf *)' <FunctionToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x7fffd8365bd8 <col:61> 'stbtt_uint8 (stbtt__buf *)' Function 0x7fffd835fad0 'stbtt__buf_get8' 'stbtt_uint8 (stbtt__buf *)'
|   |   |     |     `-ImplicitCastExpr 0x7fffd8365c70 <col:77> 'stbtt__buf *' <LValueToRValue>
|   |   |     |       `-DeclRefExpr 0x7fffd8365c00 <col:77> 'stbtt__buf *' lvalue ParmVar 0x7fffd83654b8 'b' 'stbtt__buf *'
|   |   |     `-IntegerLiteral 0x7fffd8365cc8 <col:82> 'int' 108
|   |   `-IfStmt 0x7fffd8366490 <line:1204:9, line:1174:51>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x7fffd8365e50 <line:1204:13, col:32> 'int' '&&'
|   |     | |-BinaryOperator 0x7fffd8365da0 <col:13, col:19> 'int' '>='
|   |     | | |-ImplicitCastExpr 0x7fffd8365d88 <col:13> 'int' <LValueToRValue>
|   |     | | | `-DeclRefExpr 0x7fffd8365d40 <col:13> 'int' lvalue Var 0x7fffd8365680 'b0' 'int'
|   |     | | `-IntegerLiteral 0x7fffd8365d68 <col:19> 'int' 251
|   |     | `-BinaryOperator 0x7fffd8365e28 <col:26, col:32> 'int' '<='
|   |     |   |-ImplicitCastExpr 0x7fffd8365e10 <col:26> 'int' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x7fffd8365dc8 <col:26> 'int' lvalue Var 0x7fffd8365680 'b0' 'int'
|   |     |   `-IntegerLiteral 0x7fffd8365df0 <col:32> 'int' 254
|   |     |-ReturnStmt 0x7fffd83660d8 <col:37, col:83>
|   |     | `-ImplicitCastExpr 0x7fffd83660c0 <col:44, col:83> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |     |   `-BinaryOperator 0x7fffd8366098 <col:44, col:83> 'int' '-'
|   |     |     |-BinaryOperator 0x7fffd8366050 <col:44, col:79> 'int' '-'
|   |     |     | |-BinaryOperator 0x7fffd8365f60 <col:44, col:56> 'int' '*'
|   |     |     | | |-UnaryOperator 0x7fffd8365f20 <col:44, col:54> 'int' prefix '-'
|   |     |     | | | `-ParenExpr 0x7fffd8365f00 <col:45, col:54> 'int'
|   |     |     | | |   `-BinaryOperator 0x7fffd8365ed8 <col:46, col:51> 'int' '-'
|   |     |     | | |     |-ImplicitCastExpr 0x7fffd8365ec0 <col:46> 'int' <LValueToRValue>
|   |     |     | | |     | `-DeclRefExpr 0x7fffd8365e78 <col:46> 'int' lvalue Var 0x7fffd8365680 'b0' 'int'
|   |     |     | | |     `-IntegerLiteral 0x7fffd8365ea0 <col:51> 'int' 251
|   |     |     | | `-IntegerLiteral 0x7fffd8365f40 <col:56> 'int' 256
|   |     |     | `-ImplicitCastExpr 0x7fffd8366038 <col:62, col:79> 'int' <IntegralCast>
|   |     |     |   `-CallExpr 0x7fffd8365ff0 <col:62, col:79> 'stbtt_uint8':'unsigned char'
|   |     |     |     |-ImplicitCastExpr 0x7fffd8365fd8 <col:62> 'stbtt_uint8 (*)(stbtt__buf *)' <FunctionToPointerDecay>
|   |     |     |     | `-DeclRefExpr 0x7fffd8365f88 <col:62> 'stbtt_uint8 (stbtt__buf *)' Function 0x7fffd835fad0 'stbtt__buf_get8' 'stbtt_uint8 (stbtt__buf *)'
|   |     |     |     `-ImplicitCastExpr 0x7fffd8366020 <col:78> 'stbtt__buf *' <LValueToRValue>
|   |     |     |       `-DeclRefExpr 0x7fffd8365fb0 <col:78> 'stbtt__buf *' lvalue ParmVar 0x7fffd83654b8 'b' 'stbtt__buf *'
|   |     |     `-IntegerLiteral 0x7fffd8366078 <col:83> 'int' 108
|   |     `-IfStmt 0x7fffd8366458 <line:1205:9, line:1174:51>
|   |       |-<<<NULL>>>
|   |       |-<<<NULL>>>
|   |       |-BinaryOperator 0x7fffd8366150 <line:1205:13, col:19> 'int' '=='
|   |       | |-ImplicitCastExpr 0x7fffd8366138 <col:13> 'int' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x7fffd83660f0 <col:13> 'int' lvalue Var 0x7fffd8365680 'b0' 'int'
|   |       | `-IntegerLiteral 0x7fffd8366118 <col:19> 'int' 28
|   |       |-ReturnStmt 0x7fffd8366270 <col:37, line:1173:51>
|   |       | `-CallExpr 0x7fffd8366220 <col:30, col:51> 'stbtt_uint32':'unsigned int'
|   |       |   |-ImplicitCastExpr 0x7fffd8366208 <col:30> 'stbtt_uint32 (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   |       |   | `-DeclRefExpr 0x7fffd8366178 <col:30> 'stbtt_uint32 (stbtt__buf *, int)' Function 0x7fffd8361820 'stbtt__buf_get' 'stbtt_uint32 (stbtt__buf *, int)'
|   |       |   |-ImplicitCastExpr 0x7fffd8366258 <col:45, col:47> 'stbtt__buf *' <LValueToRValue>
|   |       |   | `-ParenExpr 0x7fffd83661c8 <col:45, col:47> 'stbtt__buf *' lvalue
|   |       |   |   `-DeclRefExpr 0x7fffd83661a0 <line:1205:61> 'stbtt__buf *' lvalue ParmVar 0x7fffd83654b8 'b' 'stbtt__buf *'
|   |       |   `-IntegerLiteral 0x7fffd83661e8 <line:1173:50> 'int' 2
|   |       `-IfStmt 0x7fffd8366420 <line:1206:9, line:1174:51>
|   |         |-<<<NULL>>>
|   |         |-<<<NULL>>>
|   |         |-BinaryOperator 0x7fffd83662e8 <line:1206:13, col:19> 'int' '=='
|   |         | |-ImplicitCastExpr 0x7fffd83662d0 <col:13> 'int' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x7fffd8366288 <col:13> 'int' lvalue Var 0x7fffd8365680 'b0' 'int'
|   |         | `-IntegerLiteral 0x7fffd83662b0 <col:19> 'int' 29
|   |         |-ReturnStmt 0x7fffd8366408 <col:37, line:1174:51>
|   |         | `-CallExpr 0x7fffd83663b8 <col:30, col:51> 'stbtt_uint32':'unsigned int'
|   |         |   |-ImplicitCastExpr 0x7fffd83663a0 <col:30> 'stbtt_uint32 (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   |         |   | `-DeclRefExpr 0x7fffd8366310 <col:30> 'stbtt_uint32 (stbtt__buf *, int)' Function 0x7fffd8361820 'stbtt__buf_get' 'stbtt_uint32 (stbtt__buf *, int)'
|   |         |   |-ImplicitCastExpr 0x7fffd83663f0 <col:45, col:47> 'stbtt__buf *' <LValueToRValue>
|   |         |   | `-ParenExpr 0x7fffd8366360 <col:45, col:47> 'stbtt__buf *' lvalue
|   |         |   |   `-DeclRefExpr 0x7fffd8366338 <line:1206:61> 'stbtt__buf *' lvalue ParmVar 0x7fffd83654b8 'b' 'stbtt__buf *'
|   |         |   `-IntegerLiteral 0x7fffd8366380 <line:1174:50> 'int' 4
|   |         `-<<<NULL>>>
|   |-ParenExpr 0x7fffd8366a48 </usr/include/assert.h:108:3, line:113:7> 'void'
|   | `-BinaryOperator 0x7fffd8366a20 <line:108:4, line:113:6> 'void' ','
|   |   |-CStyleCastExpr 0x7fffd8366638 <line:108:4, col:33> 'void' <ToVoid>
|   |   | `-UnaryExprOrTypeTraitExpr 0x7fffd8366608 <col:11, col:33> 'unsigned long' sizeof
|   |   |   `-ParenExpr 0x7fffd83665e8 <col:18, col:33> 'int'
|   |   |     `-ConditionalOperator 0x7fffd83665b8 <col:19, col:32> 'int'
|   |   |       |-ParenExpr 0x7fffd8366558 <col:19, col:24> 'int'
|   |   |       | `-IntegerLiteral 0x7fffd8366538 <././stb/stb_truetype.h:1207:17> 'int' 0
|   |   |       |-IntegerLiteral 0x7fffd8366578 </usr/include/assert.h:108:28> 'int' 1
|   |   |       `-IntegerLiteral 0x7fffd8366598 <col:32> 'int' 0
|   |   `-UnaryOperator 0x7fffd8366a00 <col:36, line:113:6> 'void' prefix '__extension__'
|   |     `-StmtExpr 0x7fffd83669e0 <line:108:50, line:113:6> 'void'
|   |       `-CompoundStmt 0x7fffd83669c8 <line:108:51, line:113:5>
|   |         `-IfStmt 0x7fffd8366990 <line:109:7, line:112:68>
|   |           |-<<<NULL>>>
|   |           |-<<<NULL>>>
|   |           |-IntegerLiteral 0x7fffd8366660 <././stb/stb_truetype.h:1207:17> 'int' 0
|   |           |-NullStmt 0x7fffd8366680 </usr/include/assert.h:110:9>
|   |           `-CallExpr 0x7fffd83668b8 <line:112:9, col:68> 'void'
|   |             |-ImplicitCastExpr 0x7fffd83668a0 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |             | `-DeclRefExpr 0x7fffd8366690 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |             |-ImplicitCastExpr 0x7fffd8366918 <<scratch space>:231:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd8366900 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd83666f8 <col:1> 'char [2]' lvalue "0"
|   |             |-ImplicitCastExpr 0x7fffd8366948 <line:232:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd8366930 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd8366728 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |             |-ImplicitCastExpr 0x7fffd8366960 <line:233:1> 'unsigned int' <IntegralCast>
|   |             | `-IntegerLiteral 0x7fffd8366768 <col:1> 'int' 1207
|   |             `-ImplicitCastExpr 0x7fffd8366978 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |               `-UnaryOperator 0x7fffd8366880 <col:30, col:44> 'const char [42]' lvalue prefix '__extension__'
|   |                 `-PredefinedExpr 0x7fffd8366860 <col:44> 'const char [42]' lvalue __PRETTY_FUNCTION__
|   |                   `-StringLiteral 0x7fffd8366808 <col:44> 'const char [42]' lvalue "stbtt_uint32 stbtt__cff_int(stbtt__buf *)"
|   `-ReturnStmt 0x7fffd8366aa0 <././stb/stb_truetype.h:1208:4, col:11>
|     `-ImplicitCastExpr 0x7fffd8366a88 <col:11> 'stbtt_uint32':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x7fffd8366a68 <col:11> 'int' 0
|-FunctionDecl 0x7fffd8366c00 <line:1211:1, line:1224:1> line:1211:13 used stbtt__cff_skip_operand 'void (stbtt__buf *)' static
| |-ParmVarDecl 0x7fffd8366af8 <col:37, col:49> col:49 used b 'stbtt__buf *'
| `-CompoundStmt 0x7fffd8367c58 <col:52, line:1224:1>
|   |-DeclStmt 0x7fffd8366e78 <line:1212:4, col:35>
|   | |-VarDecl 0x7fffd8366cc0 <col:4, col:8> col:8 used v 'int'
|   | `-VarDecl 0x7fffd8366d38 <col:4, col:34> col:11 used b0 'int' cinit
|   |   `-ImplicitCastExpr 0x7fffd8366e48 <col:16, col:34> 'int' <IntegralCast>
|   |     `-CallExpr 0x7fffd8366e00 <col:16, col:34> 'stbtt_uint8':'unsigned char'
|   |       |-ImplicitCastExpr 0x7fffd8366de8 <col:16> 'stbtt_uint8 (*)(stbtt__buf *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x7fffd8366d98 <col:16> 'stbtt_uint8 (stbtt__buf *)' Function 0x7fffd835ff80 'stbtt__buf_peek8' 'stbtt_uint8 (stbtt__buf *)'
|   |       `-ImplicitCastExpr 0x7fffd8366e30 <col:33> 'stbtt__buf *' <LValueToRValue>
|   |         `-DeclRefExpr 0x7fffd8366dc0 <col:33> 'stbtt__buf *' lvalue ParmVar 0x7fffd8366af8 'b' 'stbtt__buf *'
|   |-ParenExpr 0x7fffd8367478 </usr/include/assert.h:108:3, line:113:7> 'void'
|   | `-BinaryOperator 0x7fffd8367450 <line:108:4, line:113:6> 'void' ','
|   |   |-CStyleCastExpr 0x7fffd8366ff8 <line:108:4, col:33> 'void' <ToVoid>
|   |   | `-UnaryExprOrTypeTraitExpr 0x7fffd8366fc8 <col:11, col:33> 'unsigned long' sizeof
|   |   |   `-ParenExpr 0x7fffd8366fa8 <col:18, col:33> 'int'
|   |   |     `-ConditionalOperator 0x7fffd8366f78 <col:19, col:32> 'int'
|   |   |       |-ParenExpr 0x7fffd8366f18 <col:19, col:24> 'int'
|   |   |       | `-BinaryOperator 0x7fffd8366ef0 <././stb/stb_truetype.h:1213:17, col:23> 'int' '>='
|   |   |       |   |-ImplicitCastExpr 0x7fffd8366ed8 <col:17> 'int' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x7fffd8366e90 <col:17> 'int' lvalue Var 0x7fffd8366d38 'b0' 'int'
|   |   |       |   `-IntegerLiteral 0x7fffd8366eb8 <col:23> 'int' 28
|   |   |       |-IntegerLiteral 0x7fffd8366f38 </usr/include/assert.h:108:28> 'int' 1
|   |   |       `-IntegerLiteral 0x7fffd8366f58 <col:32> 'int' 0
|   |   `-UnaryOperator 0x7fffd8367430 <col:36, line:113:6> 'void' prefix '__extension__'
|   |     `-StmtExpr 0x7fffd8367410 <line:108:50, line:113:6> 'void'
|   |       `-CompoundStmt 0x7fffd83673f8 <line:108:51, line:113:5>
|   |         `-IfStmt 0x7fffd83673c0 <line:109:7, line:112:68>
|   |           |-<<<NULL>>>
|   |           |-<<<NULL>>>
|   |           |-BinaryOperator 0x7fffd8367080 <././stb/stb_truetype.h:1213:17, col:23> 'int' '>='
|   |           | |-ImplicitCastExpr 0x7fffd8367068 <col:17> 'int' <LValueToRValue>
|   |           | | `-DeclRefExpr 0x7fffd8367020 <col:17> 'int' lvalue Var 0x7fffd8366d38 'b0' 'int'
|   |           | `-IntegerLiteral 0x7fffd8367048 <col:23> 'int' 28
|   |           |-NullStmt 0x7fffd83670a8 </usr/include/assert.h:110:9>
|   |           `-CallExpr 0x7fffd83672e8 <line:112:9, col:68> 'void'
|   |             |-ImplicitCastExpr 0x7fffd83672d0 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |             | `-DeclRefExpr 0x7fffd83670b8 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |             |-ImplicitCastExpr 0x7fffd8367348 <<scratch space>:234:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd8367330 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd8367118 <col:1> 'char [9]' lvalue "b0 >= 28"
|   |             |-ImplicitCastExpr 0x7fffd8367378 <line:235:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd8367360 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd8367148 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |             |-ImplicitCastExpr 0x7fffd8367390 <line:236:1> 'unsigned int' <IntegralCast>
|   |             | `-IntegerLiteral 0x7fffd8367188 <col:1> 'int' 1213
|   |             `-ImplicitCastExpr 0x7fffd83673a8 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |               `-UnaryOperator 0x7fffd83672b0 <col:30, col:44> 'const char [43]' lvalue prefix '__extension__'
|   |                 `-PredefinedExpr 0x7fffd8367280 <col:44> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |                   `-StringLiteral 0x7fffd8367228 <col:44> 'const char [43]' lvalue "void stbtt__cff_skip_operand(stbtt__buf *)"
|   `-IfStmt 0x7fffd8367c20 <././stb/stb_truetype.h:1214:4, line:1223:4>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fffd83674f8 <line:1214:8, col:14> 'int' '=='
|     | |-ImplicitCastExpr 0x7fffd83674e0 <col:8> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fffd8367498 <col:8> 'int' lvalue Var 0x7fffd8366d38 'b0' 'int'
|     | `-IntegerLiteral 0x7fffd83674c0 <col:14> 'int' 30
|     |-CompoundStmt 0x7fffd8367ae0 <col:18, line:1221:4>
|     | |-CallExpr 0x7fffd83675a8 <line:1215:7, col:27> 'void'
|     | | |-ImplicitCastExpr 0x7fffd8367590 <col:7> 'void (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x7fffd8367520 <col:7> 'void (stbtt__buf *, int)' Function 0x7fffd8361388 'stbtt__buf_skip' 'void (stbtt__buf *, int)'
|     | | |-ImplicitCastExpr 0x7fffd83675e0 <col:23> 'stbtt__buf *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd8367548 <col:23> 'stbtt__buf *' lvalue ParmVar 0x7fffd8366af8 'b' 'stbtt__buf *'
|     | | `-IntegerLiteral 0x7fffd8367570 <col:26> 'int' 1
|     | `-WhileStmt 0x7fffd8367ac0 <line:1216:7, line:1220:7>
|     |   |-<<<NULL>>>
|     |   |-BinaryOperator 0x7fffd8367718 <line:1216:14, col:29> 'int' '<'
|     |   | |-ImplicitCastExpr 0x7fffd83676e8 <col:14, col:17> 'int' <LValueToRValue>
|     |   | | `-MemberExpr 0x7fffd8367638 <col:14, col:17> 'int' lvalue ->cursor 0x7fffd82a7460
|     |   | |   `-ImplicitCastExpr 0x7fffd8367620 <col:14> 'stbtt__buf *' <LValueToRValue>
|     |   | |     `-DeclRefExpr 0x7fffd83675f8 <col:14> 'stbtt__buf *' lvalue ParmVar 0x7fffd8366af8 'b' 'stbtt__buf *'
|     |   | `-ImplicitCastExpr 0x7fffd8367700 <col:26, col:29> 'int' <LValueToRValue>
|     |   |   `-MemberExpr 0x7fffd83676b0 <col:26, col:29> 'int' lvalue ->size 0x7fffd82a74c0
|     |   |     `-ImplicitCastExpr 0x7fffd8367698 <col:26> 'stbtt__buf *' <LValueToRValue>
|     |   |       `-DeclRefExpr 0x7fffd8367670 <col:26> 'stbtt__buf *' lvalue ParmVar 0x7fffd8366af8 'b' 'stbtt__buf *'
|     |   `-CompoundStmt 0x7fffd8367aa0 <col:35, line:1220:7>
|     |     |-BinaryOperator 0x7fffd8367830 <line:1217:10, col:31> 'int' '='
|     |     | |-DeclRefExpr 0x7fffd8367740 <col:10> 'int' lvalue Var 0x7fffd8366cc0 'v' 'int'
|     |     | `-ImplicitCastExpr 0x7fffd8367818 <col:14, col:31> 'int' <IntegralCast>
|     |     |   `-CallExpr 0x7fffd83677d0 <col:14, col:31> 'stbtt_uint8':'unsigned char'
|     |     |     |-ImplicitCastExpr 0x7fffd83677b8 <col:14> 'stbtt_uint8 (*)(stbtt__buf *)' <FunctionToPointerDecay>
|     |     |     | `-DeclRefExpr 0x7fffd8367768 <col:14> 'stbtt_uint8 (stbtt__buf *)' Function 0x7fffd835fad0 'stbtt__buf_get8' 'stbtt_uint8 (stbtt__buf *)'
|     |     |     `-ImplicitCastExpr 0x7fffd8367800 <col:30> 'stbtt__buf *' <LValueToRValue>
|     |     |       `-DeclRefExpr 0x7fffd8367790 <col:30> 'stbtt__buf *' lvalue ParmVar 0x7fffd8366af8 'b' 'stbtt__buf *'
|     |     `-IfStmt 0x7fffd8367a68 <line:1218:10, line:1219:13>
|     |       |-<<<NULL>>>
|     |       |-<<<NULL>>>
|     |       |-BinaryOperator 0x7fffd8367a38 <line:1218:14, col:46> 'int' '||'
|     |       | |-BinaryOperator 0x7fffd8367920 <col:14, col:27> 'int' '=='
|     |       | | |-ParenExpr 0x7fffd83678e0 <col:14, col:22> 'int'
|     |       | | | `-BinaryOperator 0x7fffd83678b8 <col:15, col:19> 'int' '&'
|     |       | | |   |-ImplicitCastExpr 0x7fffd83678a0 <col:15> 'int' <LValueToRValue>
|     |       | | |   | `-DeclRefExpr 0x7fffd8367858 <col:15> 'int' lvalue Var 0x7fffd8366cc0 'v' 'int'
|     |       | | |   `-IntegerLiteral 0x7fffd8367880 <col:19> 'int' 15
|     |       | | `-IntegerLiteral 0x7fffd8367900 <col:27> 'int' 15
|     |       | `-BinaryOperator 0x7fffd8367a10 <col:34, col:46> 'int' '=='
|     |       |   |-ParenExpr 0x7fffd83679d0 <col:34, col:41> 'int'
|     |       |   | `-BinaryOperator 0x7fffd83679a8 <col:35, col:40> 'int' '>>'
|     |       |   |   |-ImplicitCastExpr 0x7fffd8367990 <col:35> 'int' <LValueToRValue>
|     |       |   |   | `-DeclRefExpr 0x7fffd8367948 <col:35> 'int' lvalue Var 0x7fffd8366cc0 'v' 'int'
|     |       |   |   `-IntegerLiteral 0x7fffd8367970 <col:40> 'int' 4
|     |       |   `-IntegerLiteral 0x7fffd83679f0 <col:46> 'int' 15
|     |       |-BreakStmt 0x7fffd8367a60 <line:1219:13>
|     |       `-<<<NULL>>>
|     `-CompoundStmt 0x7fffd8367c08 <line:1221:11, line:1223:4>
|       `-CallExpr 0x7fffd8367bc0 <line:1222:7, col:23> 'stbtt_uint32':'unsigned int'
|         |-ImplicitCastExpr 0x7fffd8367ba8 <col:7> 'stbtt_uint32 (*)(stbtt__buf *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x7fffd8367b00 <col:7> 'stbtt_uint32 (stbtt__buf *)' Function 0x7fffd83655c0 'stbtt__cff_int' 'stbtt_uint32 (stbtt__buf *)'
|         `-ImplicitCastExpr 0x7fffd8367bf0 <col:22> 'stbtt__buf *' <LValueToRValue>
|           `-DeclRefExpr 0x7fffd8367b28 <col:22> 'stbtt__buf *' lvalue ParmVar 0x7fffd8366af8 'b' 'stbtt__buf *'
|-FunctionDecl 0x7fffd8367e20 <line:1226:1, line:1239:1> line:1226:19 used stbtt__dict_get 'stbtt__buf (stbtt__buf *, int)' static
| |-ParmVarDecl 0x7fffd8367c90 <col:35, col:47> col:47 used b 'stbtt__buf *'
| |-ParmVarDecl 0x7fffd8367d08 <col:50, col:54> col:54 used key 'int'
| `-CompoundStmt 0x7fffd8368db8 <line:1227:1, line:1239:1>
|   |-CallExpr 0x7fffd8367f58 <line:1228:4, col:24> 'void'
|   | |-ImplicitCastExpr 0x7fffd8367f40 <col:4> 'void (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fffd8367ed0 <col:4> 'void (stbtt__buf *, int)' Function 0x7fffd8360530 'stbtt__buf_seek' 'void (stbtt__buf *, int)'
|   | |-ImplicitCastExpr 0x7fffd8367f90 <col:20> 'stbtt__buf *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd8367ef8 <col:20> 'stbtt__buf *' lvalue ParmVar 0x7fffd8367c90 'b' 'stbtt__buf *'
|   | `-IntegerLiteral 0x7fffd8367f20 <col:23> 'int' 0
|   |-WhileStmt 0x7fffd8368c68 <line:1229:4, line:1237:4>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83680c8 <line:1229:11, col:26> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd8368098 <col:11, col:14> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x7fffd8367fe8 <col:11, col:14> 'int' lvalue ->cursor 0x7fffd82a7460
|   | | |   `-ImplicitCastExpr 0x7fffd8367fd0 <col:11> 'stbtt__buf *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x7fffd8367fa8 <col:11> 'stbtt__buf *' lvalue ParmVar 0x7fffd8367c90 'b' 'stbtt__buf *'
|   | | `-ImplicitCastExpr 0x7fffd83680b0 <col:23, col:26> 'int' <LValueToRValue>
|   | |   `-MemberExpr 0x7fffd8368060 <col:23, col:26> 'int' lvalue ->size 0x7fffd82a74c0
|   | |     `-ImplicitCastExpr 0x7fffd8368048 <col:23> 'stbtt__buf *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x7fffd8368020 <col:23> 'stbtt__buf *' lvalue ParmVar 0x7fffd8367c90 'b' 'stbtt__buf *'
|   | `-CompoundStmt 0x7fffd8368c28 <col:32, line:1237:4>
|   |   |-DeclStmt 0x7fffd8368308 <line:1230:7, col:37>
|   |   | |-VarDecl 0x7fffd8368108 <col:7, col:22> col:11 used start 'int' cinit
|   |   | | `-ImplicitCastExpr 0x7fffd83681e0 <col:19, col:22> 'int' <LValueToRValue>
|   |   | |   `-MemberExpr 0x7fffd83681a8 <col:19, col:22> 'int' lvalue ->cursor 0x7fffd82a7460
|   |   | |     `-ImplicitCastExpr 0x7fffd8368190 <col:19> 'stbtt__buf *' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x7fffd8368168 <col:19> 'stbtt__buf *' lvalue ParmVar 0x7fffd8367c90 'b' 'stbtt__buf *'
|   |   | |-VarDecl 0x7fffd8368210 <col:7, col:30> col:30 used end 'int'
|   |   | `-VarDecl 0x7fffd8368288 <col:7, col:35> col:35 used op 'int'
|   |   |-WhileStmt 0x7fffd8368538 <line:1231:7, line:1232:35>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x7fffd8368408 <line:1231:14, col:37> 'int' '>='
|   |   | | |-ImplicitCastExpr 0x7fffd83683f0 <col:14, col:32> 'int' <IntegralCast>
|   |   | | | `-CallExpr 0x7fffd8368388 <col:14, col:32> 'stbtt_uint8':'unsigned char'
|   |   | | |   |-ImplicitCastExpr 0x7fffd8368370 <col:14> 'stbtt_uint8 (*)(stbtt__buf *)' <FunctionToPointerDecay>
|   |   | | |   | `-DeclRefExpr 0x7fffd8368320 <col:14> 'stbtt_uint8 (stbtt__buf *)' Function 0x7fffd835ff80 'stbtt__buf_peek8' 'stbtt_uint8 (stbtt__buf *)'
|   |   | | |   `-ImplicitCastExpr 0x7fffd83683b8 <col:31> 'stbtt__buf *' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x7fffd8368348 <col:31> 'stbtt__buf *' lvalue ParmVar 0x7fffd8367c90 'b' 'stbtt__buf *'
|   |   | | `-IntegerLiteral 0x7fffd83683d0 <col:37> 'int' 28
|   |   | `-CallExpr 0x7fffd83684f0 <line:1232:10, col:35> 'void'
|   |   |   |-ImplicitCastExpr 0x7fffd83684d8 <col:10> 'void (*)(stbtt__buf *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x7fffd8368430 <col:10> 'void (stbtt__buf *)' Function 0x7fffd8366c00 'stbtt__cff_skip_operand' 'void (stbtt__buf *)'
|   |   |   `-ImplicitCastExpr 0x7fffd8368520 <col:34> 'stbtt__buf *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x7fffd8368458 <col:34> 'stbtt__buf *' lvalue ParmVar 0x7fffd8367c90 'b' 'stbtt__buf *'
|   |   |-BinaryOperator 0x7fffd8368610 <line:1233:7, col:16> 'int' '='
|   |   | |-DeclRefExpr 0x7fffd8368558 <col:7> 'int' lvalue Var 0x7fffd8368210 'end' 'int'
|   |   | `-ImplicitCastExpr 0x7fffd83685f8 <col:13, col:16> 'int' <LValueToRValue>
|   |   |   `-MemberExpr 0x7fffd83685c0 <col:13, col:16> 'int' lvalue ->cursor 0x7fffd82a7460
|   |   |     `-ImplicitCastExpr 0x7fffd83685a8 <col:13> 'stbtt__buf *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x7fffd8368580 <col:13> 'stbtt__buf *' lvalue ParmVar 0x7fffd8367c90 'b' 'stbtt__buf *'
|   |   |-BinaryOperator 0x7fffd8368728 <line:1234:7, col:29> 'int' '='
|   |   | |-DeclRefExpr 0x7fffd8368638 <col:7> 'int' lvalue Var 0x7fffd8368288 'op' 'int'
|   |   | `-ImplicitCastExpr 0x7fffd8368710 <col:12, col:29> 'int' <IntegralCast>
|   |   |   `-CallExpr 0x7fffd83686c8 <col:12, col:29> 'stbtt_uint8':'unsigned char'
|   |   |     |-ImplicitCastExpr 0x7fffd83686b0 <col:12> 'stbtt_uint8 (*)(stbtt__buf *)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x7fffd8368660 <col:12> 'stbtt_uint8 (stbtt__buf *)' Function 0x7fffd835fad0 'stbtt__buf_get8' 'stbtt_uint8 (stbtt__buf *)'
|   |   |     `-ImplicitCastExpr 0x7fffd83686f8 <col:28> 'stbtt__buf *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x7fffd8368688 <col:28> 'stbtt__buf *' lvalue ParmVar 0x7fffd8367c90 'b' 'stbtt__buf *'
|   |   |-IfStmt 0x7fffd8368938 <line:1235:7, col:48>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x7fffd83687b0 <col:11, col:17> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x7fffd8368798 <col:11> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x7fffd8368750 <col:11> 'int' lvalue Var 0x7fffd8368288 'op' 'int'
|   |   | | `-IntegerLiteral 0x7fffd8368778 <col:17> 'int' 12
|   |   | |-BinaryOperator 0x7fffd8368910 <col:22, col:48> 'int' '='
|   |   | | |-DeclRefExpr 0x7fffd83687d8 <col:22> 'int' lvalue Var 0x7fffd8368288 'op' 'int'
|   |   | | `-BinaryOperator 0x7fffd83688e8 <col:27, col:48> 'int' '|'
|   |   | |   |-ImplicitCastExpr 0x7fffd83688d0 <col:27, col:44> 'int' <IntegralCast>
|   |   | |   | `-CallExpr 0x7fffd8368868 <col:27, col:44> 'stbtt_uint8':'unsigned char'
|   |   | |   |   |-ImplicitCastExpr 0x7fffd8368850 <col:27> 'stbtt_uint8 (*)(stbtt__buf *)' <FunctionToPointerDecay>
|   |   | |   |   | `-DeclRefExpr 0x7fffd8368800 <col:27> 'stbtt_uint8 (stbtt__buf *)' Function 0x7fffd835fad0 'stbtt__buf_get8' 'stbtt_uint8 (stbtt__buf *)'
|   |   | |   |   `-ImplicitCastExpr 0x7fffd8368898 <col:43> 'stbtt__buf *' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x7fffd8368828 <col:43> 'stbtt__buf *' lvalue ParmVar 0x7fffd8367c90 'b' 'stbtt__buf *'
|   |   | |   `-IntegerLiteral 0x7fffd83688b0 <col:48> 'int' 256
|   |   | `-<<<NULL>>>
|   |   `-IfStmt 0x7fffd8368bf0 <line:1236:7, col:65>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x7fffd83689f0 <col:11, col:17> 'int' '=='
|   |     | |-ImplicitCastExpr 0x7fffd83689c0 <col:11> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x7fffd8368970 <col:11> 'int' lvalue Var 0x7fffd8368288 'op' 'int'
|   |     | `-ImplicitCastExpr 0x7fffd83689d8 <col:17> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fffd8368998 <col:17> 'int' lvalue ParmVar 0x7fffd8367d08 'key' 'int'
|   |     |-ReturnStmt 0x7fffd8368bd8 <col:22, col:65>
|   |     | `-CallExpr 0x7fffd8368b50 <col:29, col:65> 'stbtt__buf':'stbtt__buf'
|   |     |   |-ImplicitCastExpr 0x7fffd8368b38 <col:29> 'stbtt__buf (*)(const stbtt__buf *, int, int)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x7fffd8368a18 <col:29> 'stbtt__buf (const stbtt__buf *, int, int)' Function 0x7fffd83634f0 'stbtt__buf_range' 'stbtt__buf (const stbtt__buf *, int, int)'
|   |     |   |-ImplicitCastExpr 0x7fffd8368ba8 <col:46> 'const stbtt__buf *' <BitCast>
|   |     |   | `-ImplicitCastExpr 0x7fffd8368b90 <col:46> 'stbtt__buf *' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x7fffd8368a40 <col:46> 'stbtt__buf *' lvalue ParmVar 0x7fffd8367c90 'b' 'stbtt__buf *'
|   |     |   |-ImplicitCastExpr 0x7fffd8368bc0 <col:49> 'int' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x7fffd8368a68 <col:49> 'int' lvalue Var 0x7fffd8368108 'start' 'int'
|   |     |   `-BinaryOperator 0x7fffd8368b10 <col:56, col:60> 'int' '-'
|   |     |     |-ImplicitCastExpr 0x7fffd8368ae0 <col:56> 'int' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x7fffd8368a90 <col:56> 'int' lvalue Var 0x7fffd8368210 'end' 'int'
|   |     |     `-ImplicitCastExpr 0x7fffd8368af8 <col:60> 'int' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x7fffd8368ab8 <col:60> 'int' lvalue Var 0x7fffd8368108 'start' 'int'
|   |     `-<<<NULL>>>
|   `-ReturnStmt 0x7fffd8368da0 <line:1238:4, col:35>
|     `-CallExpr 0x7fffd8368d30 <col:11, col:35> 'stbtt__buf':'stbtt__buf'
|       |-ImplicitCastExpr 0x7fffd8368d18 <col:11> 'stbtt__buf (*)(const stbtt__buf *, int, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x7fffd8368c88 <col:11> 'stbtt__buf (const stbtt__buf *, int, int)' Function 0x7fffd83634f0 'stbtt__buf_range' 'stbtt__buf (const stbtt__buf *, int, int)'
|       |-ImplicitCastExpr 0x7fffd8368d88 <col:28> 'const stbtt__buf *' <BitCast>
|       | `-ImplicitCastExpr 0x7fffd8368d70 <col:28> 'stbtt__buf *' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fffd8368cb0 <col:28> 'stbtt__buf *' lvalue ParmVar 0x7fffd8367c90 'b' 'stbtt__buf *'
|       |-IntegerLiteral 0x7fffd8368cd8 <col:31> 'int' 0
|       `-IntegerLiteral 0x7fffd8368cf8 <col:34> 'int' 0
|-FunctionDecl 0x7fffd83690c0 <line:1241:1, line:1247:1> line:1241:13 used stbtt__dict_get_ints 'void (stbtt__buf *, int, int, stbtt_uint32 *)' static
| |-ParmVarDecl 0x7fffd8368df0 <col:34, col:46> col:46 used b 'stbtt__buf *'
| |-ParmVarDecl 0x7fffd8368e68 <col:49, col:53> col:53 used key 'int'
| |-ParmVarDecl 0x7fffd8368ee0 <col:58, col:62> col:62 used outcount 'int'
| |-ParmVarDecl 0x7fffd8368f78 <col:72, col:86> col:86 used out 'stbtt_uint32 *'
| `-CompoundStmt 0x7fffd836e710 <line:1242:1, line:1247:1>
|   |-DeclStmt 0x7fffd83691f8 <line:1243:4, col:9>
|   | `-VarDecl 0x7fffd8369198 <col:4, col:8> col:8 used i 'int'
|   |-DeclStmt 0x7fffd836e298 <line:1244:4, col:49>
|   | `-VarDecl 0x7fffd8369220 <col:4, col:48> col:15 used operands 'stbtt__buf':'stbtt__buf' cinit
|   |   `-CallExpr 0x7fffd836e230 <col:26, col:48> 'stbtt__buf':'stbtt__buf'
|   |     |-ImplicitCastExpr 0x7fffd836e218 <col:26> 'stbtt__buf (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd8369280 <col:26> 'stbtt__buf (stbtt__buf *, int)' Function 0x7fffd8367e20 'stbtt__dict_get' 'stbtt__buf (stbtt__buf *, int)'
|   |     |-ImplicitCastExpr 0x7fffd836e268 <col:42> 'stbtt__buf *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd836e170 <col:42> 'stbtt__buf *' lvalue ParmVar 0x7fffd8368df0 'b' 'stbtt__buf *'
|   |     `-ImplicitCastExpr 0x7fffd836e280 <col:45> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd836e198 <col:45> 'int' lvalue ParmVar 0x7fffd8368e68 'key' 'int'
|   `-ForStmt 0x7fffd836e6d8 <line:1245:4, line:1246:40>
|     |-BinaryOperator 0x7fffd836e2f8 <line:1245:9, col:13> 'int' '='
|     | |-DeclRefExpr 0x7fffd836e2b0 <col:9> 'int' lvalue Var 0x7fffd8369198 'i' 'int'
|     | `-IntegerLiteral 0x7fffd836e2d8 <col:13> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fffd836e4e0 <col:16, col:59> 'int' '&&'
|     | |-BinaryOperator 0x7fffd836e3a0 <col:16, col:20> 'int' '<'
|     | | |-ImplicitCastExpr 0x7fffd836e370 <col:16> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd836e320 <col:16> 'int' lvalue Var 0x7fffd8369198 'i' 'int'
|     | | `-ImplicitCastExpr 0x7fffd836e388 <col:20> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x7fffd836e348 <col:20> 'int' lvalue ParmVar 0x7fffd8368ee0 'outcount' 'int'
|     | `-BinaryOperator 0x7fffd836e4b8 <col:32, col:59> 'int' '<'
|     |   |-ImplicitCastExpr 0x7fffd836e488 <col:32, col:41> 'int' <LValueToRValue>
|     |   | `-MemberExpr 0x7fffd836e3f0 <col:32, col:41> 'int' lvalue .cursor 0x7fffd82a7460
|     |   |   `-DeclRefExpr 0x7fffd836e3c8 <col:32> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd8369220 'operands' 'stbtt__buf':'stbtt__buf'
|     |   `-ImplicitCastExpr 0x7fffd836e4a0 <col:50, col:59> 'int' <LValueToRValue>
|     |     `-MemberExpr 0x7fffd836e450 <col:50, col:59> 'int' lvalue .size 0x7fffd82a74c0
|     |       `-DeclRefExpr 0x7fffd836e428 <col:50> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd8369220 'operands' 'stbtt__buf':'stbtt__buf'
|     |-UnaryOperator 0x7fffd836e530 <col:65, col:66> 'int' postfix '++'
|     | `-DeclRefExpr 0x7fffd836e508 <col:65> 'int' lvalue Var 0x7fffd8369198 'i' 'int'
|     `-BinaryOperator 0x7fffd836e6b0 <line:1246:7, col:40> 'stbtt_uint32':'unsigned int' '='
|       |-ArraySubscriptExpr 0x7fffd836e5d0 <col:7, col:12> 'stbtt_uint32':'unsigned int' lvalue
|       | |-ImplicitCastExpr 0x7fffd836e5a0 <col:7> 'stbtt_uint32 *' <LValueToRValue>
|       | | `-DeclRefExpr 0x7fffd836e550 <col:7> 'stbtt_uint32 *' lvalue ParmVar 0x7fffd8368f78 'out' 'stbtt_uint32 *'
|       | `-ImplicitCastExpr 0x7fffd836e5b8 <col:11> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fffd836e578 <col:11> 'int' lvalue Var 0x7fffd8369198 'i' 'int'
|       `-CallExpr 0x7fffd836e680 <col:16, col:40> 'stbtt_uint32':'unsigned int'
|         |-ImplicitCastExpr 0x7fffd836e668 <col:16> 'stbtt_uint32 (*)(stbtt__buf *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x7fffd836e5f8 <col:16> 'stbtt_uint32 (stbtt__buf *)' Function 0x7fffd83655c0 'stbtt__cff_int' 'stbtt_uint32 (stbtt__buf *)'
|         `-UnaryOperator 0x7fffd836e648 <col:31, col:32> 'stbtt__buf *' prefix '&'
|           `-DeclRefExpr 0x7fffd836e620 <col:32> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd8369220 'operands' 'stbtt__buf':'stbtt__buf'
|-FunctionDecl 0x7fffd836e858 <line:1249:1, line:1253:1> line:1249:12 used stbtt__cff_index_count 'int (stbtt__buf *)' static
| |-ParmVarDecl 0x7fffd836e748 <col:35, col:47> col:47 used b 'stbtt__buf *'
| `-CompoundStmt 0x7fffd836eb00 <line:1250:1, line:1253:1>
|   |-CallExpr 0x7fffd836e988 <line:1251:4, col:24> 'void'
|   | |-ImplicitCastExpr 0x7fffd836e970 <col:4> 'void (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fffd836e900 <col:4> 'void (stbtt__buf *, int)' Function 0x7fffd8360530 'stbtt__buf_seek' 'void (stbtt__buf *, int)'
|   | |-ImplicitCastExpr 0x7fffd836e9c0 <col:20> 'stbtt__buf *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd836e928 <col:20> 'stbtt__buf *' lvalue ParmVar 0x7fffd836e748 'b' 'stbtt__buf *'
|   | `-IntegerLiteral 0x7fffd836e950 <col:23> 'int' 0
|   `-ReturnStmt 0x7fffd836eae8 <line:1252:4, line:1173:51>
|     `-ImplicitCastExpr 0x7fffd836ead0 <col:30, col:51> 'int' <IntegralCast>
|       `-CallExpr 0x7fffd836ea80 <col:30, col:51> 'stbtt_uint32':'unsigned int'
|         |-ImplicitCastExpr 0x7fffd836ea68 <col:30> 'stbtt_uint32 (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x7fffd836e9d8 <col:30> 'stbtt_uint32 (stbtt__buf *, int)' Function 0x7fffd8361820 'stbtt__buf_get' 'stbtt_uint32 (stbtt__buf *, int)'
|         |-ImplicitCastExpr 0x7fffd836eab8 <col:45, col:47> 'stbtt__buf *' <LValueToRValue>
|         | `-ParenExpr 0x7fffd836ea28 <col:45, col:47> 'stbtt__buf *' lvalue
|         |   `-DeclRefExpr 0x7fffd836ea00 <line:1252:28> 'stbtt__buf *' lvalue ParmVar 0x7fffd836e748 'b' 'stbtt__buf *'
|         `-IntegerLiteral 0x7fffd836ea48 <line:1173:50> 'int' 2
|-FunctionDecl 0x7fffd836ecc0 <line:1255:1, line:1267:1> line:1255:19 used stbtt__cff_index_get 'stbtt__buf (stbtt__buf, int)' static
| |-ParmVarDecl 0x7fffd836eb30 <col:40, col:51> col:51 used b 'stbtt__buf':'stbtt__buf'
| |-ParmVarDecl 0x7fffd836eba8 <col:54, col:58> col:58 used i 'int'
| `-CompoundStmt 0x7fffd8370948 <line:1256:1, line:1267:1>
|   |-DeclStmt 0x7fffd836ef78 <line:1257:4, col:34>
|   | |-VarDecl 0x7fffd836ed88 <col:4, col:8> col:8 used count 'int'
|   | |-VarDecl 0x7fffd836ee00 <col:4, col:15> col:15 used offsize 'int'
|   | |-VarDecl 0x7fffd836ee78 <col:4, col:24> col:24 used start 'int'
|   | `-VarDecl 0x7fffd836eef0 <col:4, col:31> col:31 used end 'int'
|   |-CallExpr 0x7fffd836f038 <line:1258:4, col:25> 'void'
|   | |-ImplicitCastExpr 0x7fffd836f020 <col:4> 'void (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fffd836ef90 <col:4> 'void (stbtt__buf *, int)' Function 0x7fffd8360530 'stbtt__buf_seek' 'void (stbtt__buf *, int)'
|   | |-UnaryOperator 0x7fffd836efe0 <col:20, col:21> 'stbtt__buf *' prefix '&'
|   | | `-DeclRefExpr 0x7fffd836efb8 <col:21> 'stbtt__buf':'stbtt__buf' lvalue ParmVar 0x7fffd836eb30 'b' 'stbtt__buf':'stbtt__buf'
|   | `-IntegerLiteral 0x7fffd836f000 <col:24> 'int' 0
|   |-BinaryOperator 0x7fffd836f1b0 <line:1259:4, line:1173:51> 'int' '='
|   | |-DeclRefExpr 0x7fffd836f070 <line:1259:4> 'int' lvalue Var 0x7fffd836ed88 'count' 'int'
|   | `-ImplicitCastExpr 0x7fffd836f198 <line:1173:30, col:51> 'int' <IntegralCast>
|   |   `-CallExpr 0x7fffd836f160 <col:30, col:51> 'stbtt_uint32':'unsigned int'
|   |     |-ImplicitCastExpr 0x7fffd836f148 <col:30> 'stbtt_uint32 (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd836f098 <col:30> 'stbtt_uint32 (stbtt__buf *, int)' Function 0x7fffd8361820 'stbtt__buf_get' 'stbtt_uint32 (stbtt__buf *, int)'
|   |     |-ParenExpr 0x7fffd836f108 <col:45, col:47> 'stbtt__buf *'
|   |     | `-UnaryOperator 0x7fffd836f0e8 <line:1259:29, col:30> 'stbtt__buf *' prefix '&'
|   |     |   `-DeclRefExpr 0x7fffd836f0c0 <col:30> 'stbtt__buf':'stbtt__buf' lvalue ParmVar 0x7fffd836eb30 'b' 'stbtt__buf':'stbtt__buf'
|   |     `-IntegerLiteral 0x7fffd836f128 <line:1173:50> 'int' 2
|   |-BinaryOperator 0x7fffd836f2d0 <line:1260:4, col:32> 'int' '='
|   | |-DeclRefExpr 0x7fffd836f1d8 <col:4> 'int' lvalue Var 0x7fffd836ee00 'offsize' 'int'
|   | `-ImplicitCastExpr 0x7fffd836f2b8 <col:14, col:32> 'int' <IntegralCast>
|   |   `-CallExpr 0x7fffd836f288 <col:14, col:32> 'stbtt_uint8':'unsigned char'
|   |     |-ImplicitCastExpr 0x7fffd836f270 <col:14> 'stbtt_uint8 (*)(stbtt__buf *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd836f200 <col:14> 'stbtt_uint8 (stbtt__buf *)' Function 0x7fffd835fad0 'stbtt__buf_get8' 'stbtt_uint8 (stbtt__buf *)'
|   |     `-UnaryOperator 0x7fffd836f250 <col:30, col:31> 'stbtt__buf *' prefix '&'
|   |       `-DeclRefExpr 0x7fffd836f228 <col:31> 'stbtt__buf':'stbtt__buf' lvalue ParmVar 0x7fffd836eb30 'b' 'stbtt__buf':'stbtt__buf'
|   |-ParenExpr 0x7fffd836fa88 </usr/include/assert.h:108:3, line:113:7> 'void'
|   | `-BinaryOperator 0x7fffd836fa60 <line:108:4, line:113:6> 'void' ','
|   |   |-CStyleCastExpr 0x7fffd836f530 <line:108:4, col:33> 'void' <ToVoid>
|   |   | `-UnaryExprOrTypeTraitExpr 0x7fffd836f500 <col:11, col:33> 'unsigned long' sizeof
|   |   |   `-ParenExpr 0x7fffd836f4e0 <col:18, col:33> 'int'
|   |   |     `-ConditionalOperator 0x7fffd836f4b0 <col:19, col:32> 'int'
|   |   |       |-ParenExpr 0x7fffd836f450 <col:19, col:24> 'int'
|   |   |       | `-BinaryOperator 0x7fffd836f428 <././stb/stb_truetype.h:1261:17, col:31> 'int' '&&'
|   |   |       |   |-BinaryOperator 0x7fffd836f358 <col:17, col:22> 'int' '>='
|   |   |       |   | |-ImplicitCastExpr 0x7fffd836f340 <col:17> 'int' <LValueToRValue>
|   |   |       |   | | `-DeclRefExpr 0x7fffd836f2f8 <col:17> 'int' lvalue ParmVar 0x7fffd836eba8 'i' 'int'
|   |   |       |   | `-IntegerLiteral 0x7fffd836f320 <col:22> 'int' 0
|   |   |       |   `-BinaryOperator 0x7fffd836f400 <col:27, col:31> 'int' '<'
|   |   |       |     |-ImplicitCastExpr 0x7fffd836f3d0 <col:27> 'int' <LValueToRValue>
|   |   |       |     | `-DeclRefExpr 0x7fffd836f380 <col:27> 'int' lvalue ParmVar 0x7fffd836eba8 'i' 'int'
|   |   |       |     `-ImplicitCastExpr 0x7fffd836f3e8 <col:31> 'int' <LValueToRValue>
|   |   |       |       `-DeclRefExpr 0x7fffd836f3a8 <col:31> 'int' lvalue Var 0x7fffd836ed88 'count' 'int'
|   |   |       |-IntegerLiteral 0x7fffd836f470 </usr/include/assert.h:108:28> 'int' 1
|   |   |       `-IntegerLiteral 0x7fffd836f490 <col:32> 'int' 0
|   |   `-UnaryOperator 0x7fffd836fa40 <col:36, line:113:6> 'void' prefix '__extension__'
|   |     `-StmtExpr 0x7fffd836fa20 <line:108:50, line:113:6> 'void'
|   |       `-CompoundStmt 0x7fffd836fa08 <line:108:51, line:113:5>
|   |         `-IfStmt 0x7fffd836f9d0 <line:109:7, line:112:68>
|   |           |-<<<NULL>>>
|   |           |-<<<NULL>>>
|   |           |-BinaryOperator 0x7fffd836f688 <././stb/stb_truetype.h:1261:17, col:31> 'int' '&&'
|   |           | |-BinaryOperator 0x7fffd836f5b8 <col:17, col:22> 'int' '>='
|   |           | | |-ImplicitCastExpr 0x7fffd836f5a0 <col:17> 'int' <LValueToRValue>
|   |           | | | `-DeclRefExpr 0x7fffd836f558 <col:17> 'int' lvalue ParmVar 0x7fffd836eba8 'i' 'int'
|   |           | | `-IntegerLiteral 0x7fffd836f580 <col:22> 'int' 0
|   |           | `-BinaryOperator 0x7fffd836f660 <col:27, col:31> 'int' '<'
|   |           |   |-ImplicitCastExpr 0x7fffd836f630 <col:27> 'int' <LValueToRValue>
|   |           |   | `-DeclRefExpr 0x7fffd836f5e0 <col:27> 'int' lvalue ParmVar 0x7fffd836eba8 'i' 'int'
|   |           |   `-ImplicitCastExpr 0x7fffd836f648 <col:31> 'int' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x7fffd836f608 <col:31> 'int' lvalue Var 0x7fffd836ed88 'count' 'int'
|   |           |-NullStmt 0x7fffd836f6b0 </usr/include/assert.h:110:9>
|   |           `-CallExpr 0x7fffd836f8f8 <line:112:9, col:68> 'void'
|   |             |-ImplicitCastExpr 0x7fffd836f8e0 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |             | `-DeclRefExpr 0x7fffd836f6c0 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |             |-ImplicitCastExpr 0x7fffd836f958 <<scratch space>:237:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd836f940 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd836f728 <col:1> 'char [20]' lvalue "i >= 0 && i < count"
|   |             |-ImplicitCastExpr 0x7fffd836f988 <line:238:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd836f970 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd836f768 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |             |-ImplicitCastExpr 0x7fffd836f9a0 <line:239:1> 'unsigned int' <IntegralCast>
|   |             | `-IntegerLiteral 0x7fffd836f7a8 <col:1> 'int' 1261
|   |             `-ImplicitCastExpr 0x7fffd836f9b8 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |               `-UnaryOperator 0x7fffd836f8c0 <col:30, col:44> 'const char [49]' lvalue prefix '__extension__'
|   |                 `-PredefinedExpr 0x7fffd836f8a0 <col:44> 'const char [49]' lvalue __PRETTY_FUNCTION__
|   |                   `-StringLiteral 0x7fffd836f848 <col:44> 'const char [49]' lvalue "stbtt__buf stbtt__cff_index_get(stbtt__buf, int)"
|   |-ParenExpr 0x7fffd8370140 <line:108:3, line:113:7> 'void'
|   | `-BinaryOperator 0x7fffd8370118 <line:108:4, line:113:6> 'void' ','
|   |   |-CStyleCastExpr 0x7fffd836fcc0 <line:108:4, col:33> 'void' <ToVoid>
|   |   | `-UnaryExprOrTypeTraitExpr 0x7fffd836fc90 <col:11, col:33> 'unsigned long' sizeof
|   |   |   `-ParenExpr 0x7fffd836fc70 <col:18, col:33> 'int'
|   |   |     `-ConditionalOperator 0x7fffd836fc40 <col:19, col:32> 'int'
|   |   |       |-ParenExpr 0x7fffd836fbe0 <col:19, col:24> 'int'
|   |   |       | `-BinaryOperator 0x7fffd836fbb8 <././stb/stb_truetype.h:1262:17, col:44> 'int' '&&'
|   |   |       |   |-BinaryOperator 0x7fffd836fb08 <col:17, col:28> 'int' '>='
|   |   |       |   | |-ImplicitCastExpr 0x7fffd836faf0 <col:17> 'int' <LValueToRValue>
|   |   |       |   | | `-DeclRefExpr 0x7fffd836faa8 <col:17> 'int' lvalue Var 0x7fffd836ee00 'offsize' 'int'
|   |   |       |   | `-IntegerLiteral 0x7fffd836fad0 <col:28> 'int' 1
|   |   |       |   `-BinaryOperator 0x7fffd836fb90 <col:33, col:44> 'int' '<='
|   |   |       |     |-ImplicitCastExpr 0x7fffd836fb78 <col:33> 'int' <LValueToRValue>
|   |   |       |     | `-DeclRefExpr 0x7fffd836fb30 <col:33> 'int' lvalue Var 0x7fffd836ee00 'offsize' 'int'
|   |   |       |     `-IntegerLiteral 0x7fffd836fb58 <col:44> 'int' 4
|   |   |       |-IntegerLiteral 0x7fffd836fc00 </usr/include/assert.h:108:28> 'int' 1
|   |   |       `-IntegerLiteral 0x7fffd836fc20 <col:32> 'int' 0
|   |   `-UnaryOperator 0x7fffd83700f8 <col:36, line:113:6> 'void' prefix '__extension__'
|   |     `-StmtExpr 0x7fffd83700d8 <line:108:50, line:113:6> 'void'
|   |       `-CompoundStmt 0x7fffd83700c0 <line:108:51, line:113:5>
|   |         `-IfStmt 0x7fffd8370088 <line:109:7, line:112:68>
|   |           |-<<<NULL>>>
|   |           |-<<<NULL>>>
|   |           |-BinaryOperator 0x7fffd836fdf8 <././stb/stb_truetype.h:1262:17, col:44> 'int' '&&'
|   |           | |-BinaryOperator 0x7fffd836fd48 <col:17, col:28> 'int' '>='
|   |           | | |-ImplicitCastExpr 0x7fffd836fd30 <col:17> 'int' <LValueToRValue>
|   |           | | | `-DeclRefExpr 0x7fffd836fce8 <col:17> 'int' lvalue Var 0x7fffd836ee00 'offsize' 'int'
|   |           | | `-IntegerLiteral 0x7fffd836fd10 <col:28> 'int' 1
|   |           | `-BinaryOperator 0x7fffd836fdd0 <col:33, col:44> 'int' '<='
|   |           |   |-ImplicitCastExpr 0x7fffd836fdb8 <col:33> 'int' <LValueToRValue>
|   |           |   | `-DeclRefExpr 0x7fffd836fd70 <col:33> 'int' lvalue Var 0x7fffd836ee00 'offsize' 'int'
|   |           |   `-IntegerLiteral 0x7fffd836fd98 <col:44> 'int' 4
|   |           |-NullStmt 0x7fffd836fe20 </usr/include/assert.h:110:9>
|   |           `-CallExpr 0x7fffd836ffb0 <line:112:9, col:68> 'void'
|   |             |-ImplicitCastExpr 0x7fffd836ff98 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |             | `-DeclRefExpr 0x7fffd836fe30 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |             |-ImplicitCastExpr 0x7fffd8370010 <<scratch space>:240:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd836fff8 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd836fe58 <col:1> 'char [29]' lvalue "offsize >= 1 && offsize <= 4"
|   |             |-ImplicitCastExpr 0x7fffd8370040 <line:241:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd8370028 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd836fea0 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |             |-ImplicitCastExpr 0x7fffd8370058 <line:242:1> 'unsigned int' <IntegralCast>
|   |             | `-IntegerLiteral 0x7fffd836fee0 <col:1> 'int' 1262
|   |             `-ImplicitCastExpr 0x7fffd8370070 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |               `-UnaryOperator 0x7fffd836ff78 <col:30, col:44> 'const char [49]' lvalue prefix '__extension__'
|   |                 `-PredefinedExpr 0x7fffd836ff58 <col:44> 'const char [49]' lvalue __PRETTY_FUNCTION__
|   |                   `-StringLiteral 0x7fffd836ff00 <col:44> 'const char [49]' lvalue "stbtt__buf stbtt__cff_index_get(stbtt__buf, int)"
|   |-CallExpr 0x7fffd83702b0 <././stb/stb_truetype.h:1263:4, col:33> 'void'
|   | |-ImplicitCastExpr 0x7fffd8370298 <col:4> 'void (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fffd8370180 <col:4> 'void (stbtt__buf *, int)' Function 0x7fffd8361388 'stbtt__buf_skip' 'void (stbtt__buf *, int)'
|   | |-UnaryOperator 0x7fffd83701d0 <col:20, col:21> 'stbtt__buf *' prefix '&'
|   | | `-DeclRefExpr 0x7fffd83701a8 <col:21> 'stbtt__buf':'stbtt__buf' lvalue ParmVar 0x7fffd836eb30 'b' 'stbtt__buf':'stbtt__buf'
|   | `-BinaryOperator 0x7fffd8370270 <col:24, col:26> 'int' '*'
|   |   |-ImplicitCastExpr 0x7fffd8370240 <col:24> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x7fffd83701f0 <col:24> 'int' lvalue ParmVar 0x7fffd836eba8 'i' 'int'
|   |   `-ImplicitCastExpr 0x7fffd8370258 <col:26> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd8370218 <col:26> 'int' lvalue Var 0x7fffd836ee00 'offsize' 'int'
|   |-BinaryOperator 0x7fffd8370428 <line:1264:4, col:38> 'int' '='
|   | |-DeclRefExpr 0x7fffd83702e8 <col:4> 'int' lvalue Var 0x7fffd836ee78 'start' 'int'
|   | `-ImplicitCastExpr 0x7fffd8370410 <col:12, col:38> 'int' <IntegralCast>
|   |   `-CallExpr 0x7fffd83703c0 <col:12, col:38> 'stbtt_uint32':'unsigned int'
|   |     |-ImplicitCastExpr 0x7fffd83703a8 <col:12> 'stbtt_uint32 (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd8370310 <col:12> 'stbtt_uint32 (stbtt__buf *, int)' Function 0x7fffd8361820 'stbtt__buf_get' 'stbtt_uint32 (stbtt__buf *, int)'
|   |     |-UnaryOperator 0x7fffd8370360 <col:27, col:28> 'stbtt__buf *' prefix '&'
|   |     | `-DeclRefExpr 0x7fffd8370338 <col:28> 'stbtt__buf':'stbtt__buf' lvalue ParmVar 0x7fffd836eb30 'b' 'stbtt__buf':'stbtt__buf'
|   |     `-ImplicitCastExpr 0x7fffd83703f8 <col:31> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd8370380 <col:31> 'int' lvalue Var 0x7fffd836ee00 'offsize' 'int'
|   |-BinaryOperator 0x7fffd8370590 <line:1265:4, col:36> 'int' '='
|   | |-DeclRefExpr 0x7fffd8370450 <col:4> 'int' lvalue Var 0x7fffd836eef0 'end' 'int'
|   | `-ImplicitCastExpr 0x7fffd8370578 <col:10, col:36> 'int' <IntegralCast>
|   |   `-CallExpr 0x7fffd8370528 <col:10, col:36> 'stbtt_uint32':'unsigned int'
|   |     |-ImplicitCastExpr 0x7fffd8370510 <col:10> 'stbtt_uint32 (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd8370478 <col:10> 'stbtt_uint32 (stbtt__buf *, int)' Function 0x7fffd8361820 'stbtt__buf_get' 'stbtt_uint32 (stbtt__buf *, int)'
|   |     |-UnaryOperator 0x7fffd83704c8 <col:25, col:26> 'stbtt__buf *' prefix '&'
|   |     | `-DeclRefExpr 0x7fffd83704a0 <col:26> 'stbtt__buf':'stbtt__buf' lvalue ParmVar 0x7fffd836eb30 'b' 'stbtt__buf':'stbtt__buf'
|   |     `-ImplicitCastExpr 0x7fffd8370560 <col:29> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd83704e8 <col:29> 'int' lvalue Var 0x7fffd836ee00 'offsize' 'int'
|   `-ReturnStmt 0x7fffd8370900 <line:1266:4, col:70>
|     `-CallExpr 0x7fffd83708a8 <col:11, col:70> 'stbtt__buf':'stbtt__buf'
|       |-ImplicitCastExpr 0x7fffd8370890 <col:11> 'stbtt__buf (*)(const stbtt__buf *, int, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x7fffd83705b8 <col:11> 'stbtt__buf (const stbtt__buf *, int, int)' Function 0x7fffd83634f0 'stbtt__buf_range' 'stbtt__buf (const stbtt__buf *, int, int)'
|       |-ImplicitCastExpr 0x7fffd83708e8 <col:28, col:29> 'const stbtt__buf *' <BitCast>
|       | `-UnaryOperator 0x7fffd8370608 <col:28, col:29> 'stbtt__buf *' prefix '&'
|       |   `-DeclRefExpr 0x7fffd83705e0 <col:29> 'stbtt__buf':'stbtt__buf' lvalue ParmVar 0x7fffd836eb30 'b' 'stbtt__buf':'stbtt__buf'
|       |-BinaryOperator 0x7fffd83707c0 <col:32, col:52> 'int' '+'
|       | |-BinaryOperator 0x7fffd8370758 <col:32, col:44> 'int' '+'
|       | | |-IntegerLiteral 0x7fffd8370628 <col:32> 'int' 2
|       | | `-BinaryOperator 0x7fffd8370730 <col:34, col:44> 'int' '*'
|       | |   |-ParenExpr 0x7fffd83706d0 <col:34, col:42> 'int'
|       | |   | `-BinaryOperator 0x7fffd83706a8 <col:35, col:41> 'int' '+'
|       | |   |   |-ImplicitCastExpr 0x7fffd8370690 <col:35> 'int' <LValueToRValue>
|       | |   |   | `-DeclRefExpr 0x7fffd8370648 <col:35> 'int' lvalue Var 0x7fffd836ed88 'count' 'int'
|       | |   |   `-IntegerLiteral 0x7fffd8370670 <col:41> 'int' 1
|       | |   `-ImplicitCastExpr 0x7fffd8370718 <col:44> 'int' <LValueToRValue>
|       | |     `-DeclRefExpr 0x7fffd83706f0 <col:44> 'int' lvalue Var 0x7fffd836ee00 'offsize' 'int'
|       | `-ImplicitCastExpr 0x7fffd83707a8 <col:52> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fffd8370780 <col:52> 'int' lvalue Var 0x7fffd836ee78 'start' 'int'
|       `-BinaryOperator 0x7fffd8370868 <col:59, col:65> 'int' '-'
|         |-ImplicitCastExpr 0x7fffd8370838 <col:59> 'int' <LValueToRValue>
|         | `-DeclRefExpr 0x7fffd83707e8 <col:59> 'int' lvalue Var 0x7fffd836eef0 'end' 'int'
|         `-ImplicitCastExpr 0x7fffd8370850 <col:65> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x7fffd8370810 <col:65> 'int' lvalue Var 0x7fffd836ee78 'start' 'int'
|-FunctionDecl 0x7fffd8370ae0 <line:1281:1, col:72> col:21 used ttUSHORT 'stbtt_uint16 (stbtt_uint8 *)' static
| |-ParmVarDecl 0x7fffd83709e0 <col:30, col:43> col:43 used p 'stbtt_uint8 *'
| `-CompoundStmt 0x7fffd8370d98 <col:46, col:72>
|   `-ReturnStmt 0x7fffd8370d80 <col:48, col:69>
|     `-ImplicitCastExpr 0x7fffd8370d68 <col:55, col:69> 'stbtt_uint16':'unsigned short' <IntegralCast>
|       `-BinaryOperator 0x7fffd8370d40 <col:55, col:69> 'int' '+'
|         |-BinaryOperator 0x7fffd8370c60 <col:55, col:60> 'int' '*'
|         | |-ImplicitCastExpr 0x7fffd8370c48 <col:55, col:58> 'int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x7fffd8370c30 <col:55, col:58> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|         | |   `-ArraySubscriptExpr 0x7fffd8370be8 <col:55, col:58> 'stbtt_uint8':'unsigned char' lvalue
|         | |     |-ImplicitCastExpr 0x7fffd8370bd0 <col:55> 'stbtt_uint8 *' <LValueToRValue>
|         | |     | `-DeclRefExpr 0x7fffd8370b88 <col:55> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd83709e0 'p' 'stbtt_uint8 *'
|         | |     `-IntegerLiteral 0x7fffd8370bb0 <col:57> 'int' 0
|         | `-IntegerLiteral 0x7fffd8370c10 <col:60> 'int' 256
|         `-ImplicitCastExpr 0x7fffd8370d28 <col:66, col:69> 'int' <IntegralCast>
|           `-ImplicitCastExpr 0x7fffd8370d10 <col:66, col:69> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|             `-ArraySubscriptExpr 0x7fffd8370ce8 <col:66, col:69> 'stbtt_uint8':'unsigned char' lvalue
|               |-ImplicitCastExpr 0x7fffd8370cd0 <col:66> 'stbtt_uint8 *' <LValueToRValue>
|               | `-DeclRefExpr 0x7fffd8370c88 <col:66> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd83709e0 'p' 'stbtt_uint8 *'
|               `-IntegerLiteral 0x7fffd8370cb0 <col:68> 'int' 1
|-FunctionDecl 0x7fffd8370ec0 <line:1282:1, col:72> col:20 used ttSHORT 'stbtt_int16 (stbtt_uint8 *)' static
| |-ParmVarDecl 0x7fffd8370dc0 <col:28, col:41> col:41 used p 'stbtt_uint8 *'
| `-CompoundStmt 0x7fffd8371178 <col:46, col:72>
|   `-ReturnStmt 0x7fffd8371160 <col:48, col:69>
|     `-ImplicitCastExpr 0x7fffd8371148 <col:55, col:69> 'stbtt_int16':'short' <IntegralCast>
|       `-BinaryOperator 0x7fffd8371120 <col:55, col:69> 'int' '+'
|         |-BinaryOperator 0x7fffd8371040 <col:55, col:60> 'int' '*'
|         | |-ImplicitCastExpr 0x7fffd8371028 <col:55, col:58> 'int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x7fffd8371010 <col:55, col:58> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|         | |   `-ArraySubscriptExpr 0x7fffd8370fc8 <col:55, col:58> 'stbtt_uint8':'unsigned char' lvalue
|         | |     |-ImplicitCastExpr 0x7fffd8370fb0 <col:55> 'stbtt_uint8 *' <LValueToRValue>
|         | |     | `-DeclRefExpr 0x7fffd8370f68 <col:55> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8370dc0 'p' 'stbtt_uint8 *'
|         | |     `-IntegerLiteral 0x7fffd8370f90 <col:57> 'int' 0
|         | `-IntegerLiteral 0x7fffd8370ff0 <col:60> 'int' 256
|         `-ImplicitCastExpr 0x7fffd8371108 <col:66, col:69> 'int' <IntegralCast>
|           `-ImplicitCastExpr 0x7fffd83710f0 <col:66, col:69> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|             `-ArraySubscriptExpr 0x7fffd83710c8 <col:66, col:69> 'stbtt_uint8':'unsigned char' lvalue
|               |-ImplicitCastExpr 0x7fffd83710b0 <col:66> 'stbtt_uint8 *' <LValueToRValue>
|               | `-DeclRefExpr 0x7fffd8371068 <col:66> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8370dc0 'p' 'stbtt_uint8 *'
|               `-IntegerLiteral 0x7fffd8371090 <col:68> 'int' 1
|-FunctionDecl 0x7fffd83712a0 <line:1283:1, col:99> col:21 used ttULONG 'stbtt_uint32 (stbtt_uint8 *)' static
| |-ParmVarDecl 0x7fffd83711a0 <col:29, col:42> col:42 used p 'stbtt_uint8 *'
| `-CompoundStmt 0x7fffd8371808 <col:46, col:99>
|   `-ReturnStmt 0x7fffd83717f0 <col:48, col:96>
|     `-ImplicitCastExpr 0x7fffd83717d8 <col:55, col:96> 'stbtt_uint32':'unsigned int' <IntegralCast>
|       `-BinaryOperator 0x7fffd83717b0 <col:55, col:96> 'int' '+'
|         |-BinaryOperator 0x7fffd83716d0 <col:55, col:89> 'int' '+'
|         | |-BinaryOperator 0x7fffd8371588 <col:55, col:77> 'int' '+'
|         | | |-ParenExpr 0x7fffd8371448 <col:55, col:64> 'int'
|         | | | `-BinaryOperator 0x7fffd8371420 <col:56, col:62> 'int' '<<'
|         | | |   |-ImplicitCastExpr 0x7fffd8371408 <col:56, col:59> 'int' <IntegralCast>
|         | | |   | `-ImplicitCastExpr 0x7fffd83713f0 <col:56, col:59> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|         | | |   |   `-ArraySubscriptExpr 0x7fffd83713a8 <col:56, col:59> 'stbtt_uint8':'unsigned char' lvalue
|         | | |   |     |-ImplicitCastExpr 0x7fffd8371390 <col:56> 'stbtt_uint8 *' <LValueToRValue>
|         | | |   |     | `-DeclRefExpr 0x7fffd8371348 <col:56> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd83711a0 'p' 'stbtt_uint8 *'
|         | | |   |     `-IntegerLiteral 0x7fffd8371370 <col:58> 'int' 0
|         | | |   `-IntegerLiteral 0x7fffd83713d0 <col:62> 'int' 24
|         | | `-ParenExpr 0x7fffd8371568 <col:68, col:77> 'int'
|         | |   `-BinaryOperator 0x7fffd8371540 <col:69, col:75> 'int' '<<'
|         | |     |-ImplicitCastExpr 0x7fffd8371528 <col:69, col:72> 'int' <IntegralCast>
|         | |     | `-ImplicitCastExpr 0x7fffd8371510 <col:69, col:72> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|         | |     |   `-ArraySubscriptExpr 0x7fffd83714c8 <col:69, col:72> 'stbtt_uint8':'unsigned char' lvalue
|         | |     |     |-ImplicitCastExpr 0x7fffd83714b0 <col:69> 'stbtt_uint8 *' <LValueToRValue>
|         | |     |     | `-DeclRefExpr 0x7fffd8371468 <col:69> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd83711a0 'p' 'stbtt_uint8 *'
|         | |     |     `-IntegerLiteral 0x7fffd8371490 <col:71> 'int' 1
|         | |     `-IntegerLiteral 0x7fffd83714f0 <col:75> 'int' 16
|         | `-ParenExpr 0x7fffd83716b0 <col:81, col:89> 'int'
|         |   `-BinaryOperator 0x7fffd8371688 <col:82, col:88> 'int' '<<'
|         |     |-ImplicitCastExpr 0x7fffd8371670 <col:82, col:85> 'int' <IntegralCast>
|         |     | `-ImplicitCastExpr 0x7fffd8371658 <col:82, col:85> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|         |     |   `-ArraySubscriptExpr 0x7fffd8371610 <col:82, col:85> 'stbtt_uint8':'unsigned char' lvalue
|         |     |     |-ImplicitCastExpr 0x7fffd83715f8 <col:82> 'stbtt_uint8 *' <LValueToRValue>
|         |     |     | `-DeclRefExpr 0x7fffd83715b0 <col:82> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd83711a0 'p' 'stbtt_uint8 *'
|         |     |     `-IntegerLiteral 0x7fffd83715d8 <col:84> 'int' 2
|         |     `-IntegerLiteral 0x7fffd8371638 <col:88> 'int' 8
|         `-ImplicitCastExpr 0x7fffd8371798 <col:93, col:96> 'int' <IntegralCast>
|           `-ImplicitCastExpr 0x7fffd8371780 <col:93, col:96> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|             `-ArraySubscriptExpr 0x7fffd8371758 <col:93, col:96> 'stbtt_uint8':'unsigned char' lvalue
|               |-ImplicitCastExpr 0x7fffd8371740 <col:93> 'stbtt_uint8 *' <LValueToRValue>
|               | `-DeclRefExpr 0x7fffd83716f8 <col:93> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd83711a0 'p' 'stbtt_uint8 *'
|               `-IntegerLiteral 0x7fffd8371720 <col:95> 'int' 3
|-FunctionDecl 0x7fffd8371930 <line:1284:1, col:99> col:20 used ttLONG 'stbtt_int32 (stbtt_uint8 *)' static
| |-ParmVarDecl 0x7fffd8371830 <col:27, col:40> col:40 used p 'stbtt_uint8 *'
| `-CompoundStmt 0x7fffd8371e80 <col:46, col:99>
|   `-ReturnStmt 0x7fffd8371e68 <col:48, col:96>
|     `-BinaryOperator 0x7fffd8371e40 <col:55, col:96> 'int' '+'
|       |-BinaryOperator 0x7fffd8371d60 <col:55, col:89> 'int' '+'
|       | |-BinaryOperator 0x7fffd8371c18 <col:55, col:77> 'int' '+'
|       | | |-ParenExpr 0x7fffd8371ad8 <col:55, col:64> 'int'
|       | | | `-BinaryOperator 0x7fffd8371ab0 <col:56, col:62> 'int' '<<'
|       | | |   |-ImplicitCastExpr 0x7fffd8371a98 <col:56, col:59> 'int' <IntegralCast>
|       | | |   | `-ImplicitCastExpr 0x7fffd8371a80 <col:56, col:59> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|       | | |   |   `-ArraySubscriptExpr 0x7fffd8371a38 <col:56, col:59> 'stbtt_uint8':'unsigned char' lvalue
|       | | |   |     |-ImplicitCastExpr 0x7fffd8371a20 <col:56> 'stbtt_uint8 *' <LValueToRValue>
|       | | |   |     | `-DeclRefExpr 0x7fffd83719d8 <col:56> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8371830 'p' 'stbtt_uint8 *'
|       | | |   |     `-IntegerLiteral 0x7fffd8371a00 <col:58> 'int' 0
|       | | |   `-IntegerLiteral 0x7fffd8371a60 <col:62> 'int' 24
|       | | `-ParenExpr 0x7fffd8371bf8 <col:68, col:77> 'int'
|       | |   `-BinaryOperator 0x7fffd8371bd0 <col:69, col:75> 'int' '<<'
|       | |     |-ImplicitCastExpr 0x7fffd8371bb8 <col:69, col:72> 'int' <IntegralCast>
|       | |     | `-ImplicitCastExpr 0x7fffd8371ba0 <col:69, col:72> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|       | |     |   `-ArraySubscriptExpr 0x7fffd8371b58 <col:69, col:72> 'stbtt_uint8':'unsigned char' lvalue
|       | |     |     |-ImplicitCastExpr 0x7fffd8371b40 <col:69> 'stbtt_uint8 *' <LValueToRValue>
|       | |     |     | `-DeclRefExpr 0x7fffd8371af8 <col:69> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8371830 'p' 'stbtt_uint8 *'
|       | |     |     `-IntegerLiteral 0x7fffd8371b20 <col:71> 'int' 1
|       | |     `-IntegerLiteral 0x7fffd8371b80 <col:75> 'int' 16
|       | `-ParenExpr 0x7fffd8371d40 <col:81, col:89> 'int'
|       |   `-BinaryOperator 0x7fffd8371d18 <col:82, col:88> 'int' '<<'
|       |     |-ImplicitCastExpr 0x7fffd8371d00 <col:82, col:85> 'int' <IntegralCast>
|       |     | `-ImplicitCastExpr 0x7fffd8371ce8 <col:82, col:85> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|       |     |   `-ArraySubscriptExpr 0x7fffd8371ca0 <col:82, col:85> 'stbtt_uint8':'unsigned char' lvalue
|       |     |     |-ImplicitCastExpr 0x7fffd8371c88 <col:82> 'stbtt_uint8 *' <LValueToRValue>
|       |     |     | `-DeclRefExpr 0x7fffd8371c40 <col:82> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8371830 'p' 'stbtt_uint8 *'
|       |     |     `-IntegerLiteral 0x7fffd8371c68 <col:84> 'int' 2
|       |     `-IntegerLiteral 0x7fffd8371cc8 <col:88> 'int' 8
|       `-ImplicitCastExpr 0x7fffd8371e28 <col:93, col:96> 'int' <IntegralCast>
|         `-ImplicitCastExpr 0x7fffd8371e10 <col:93, col:96> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|           `-ArraySubscriptExpr 0x7fffd8371de8 <col:93, col:96> 'stbtt_uint8':'unsigned char' lvalue
|             |-ImplicitCastExpr 0x7fffd8371dd0 <col:93> 'stbtt_uint8 *' <LValueToRValue>
|             | `-DeclRefExpr 0x7fffd8371d88 <col:93> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8371830 'p' 'stbtt_uint8 *'
|             `-IntegerLiteral 0x7fffd8371db0 <col:95> 'int' 3
|-FunctionDecl 0x7fffd8371f78 <line:1289:1, line:1298:1> line:1289:12 used stbtt__isfont 'int (stbtt_uint8 *)' static
| |-ParmVarDecl 0x7fffd8371ea8 <col:26, col:39> col:39 used font 'stbtt_uint8 *'
| `-CompoundStmt 0x7fffd8375688 <line:1290:1, line:1298:1>
|   |-IfStmt 0x7fffd8373608 <line:1292:4, col:45>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ParenExpr 0x7fffd83735b0 <line:1286:35, col:104> 'int'
|   | | `-BinaryOperator 0x7fffd8373588 <col:36, col:103> 'int' '&&'
|   | |   |-BinaryOperator 0x7fffd8373420 <col:36, col:85> 'int' '&&'
|   | |   | |-BinaryOperator 0x7fffd83732b8 <col:36, col:67> 'int' '&&'
|   | |   | | |-BinaryOperator 0x7fffd8372130 <col:36, col:49> 'int' '=='
|   | |   | | | |-ImplicitCastExpr 0x7fffd8372118 <col:36, col:41> 'int' <IntegralCast>
|   | |   | | | | `-ImplicitCastExpr 0x7fffd8372100 <col:36, col:41> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | |   | | | |   `-ArraySubscriptExpr 0x7fffd83720a0 <col:36, col:41> 'stbtt_uint8':'unsigned char' lvalue
|   | |   | | | |     |-ImplicitCastExpr 0x7fffd8372088 <col:36, col:38> 'stbtt_uint8 *' <LValueToRValue>
|   | |   | | | |     | `-ParenExpr 0x7fffd8372048 <col:36, col:38> 'stbtt_uint8 *' lvalue
|   | |   | | | |     |   `-DeclRefExpr 0x7fffd8372020 <line:1292:19> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8371ea8 'font' 'stbtt_uint8 *'
|   | |   | | | |     `-IntegerLiteral 0x7fffd8372068 <line:1286:40> 'int' 0
|   | |   | | | `-ParenExpr 0x7fffd83720e0 <col:46, col:49> 'int'
|   | |   | | |   `-CharacterLiteral 0x7fffd83720c8 <line:1292:25> 'int' 49
|   | |   | | `-BinaryOperator 0x7fffd8373290 <line:1286:54, col:67> 'int' '=='
|   | |   | |   |-ImplicitCastExpr 0x7fffd8373278 <col:54, col:59> 'int' <IntegralCast>
|   | |   | |   | `-ImplicitCastExpr 0x7fffd8373260 <col:54, col:59> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | |   | |   |   `-ArraySubscriptExpr 0x7fffd83731f8 <col:54, col:59> 'stbtt_uint8':'unsigned char' lvalue
|   | |   | |   |     |-ImplicitCastExpr 0x7fffd83731e0 <col:54, col:56> 'stbtt_uint8 *' <LValueToRValue>
|   | |   | |   |     | `-ParenExpr 0x7fffd83731a0 <col:54, col:56> 'stbtt_uint8 *' lvalue
|   | |   | |   |     |   `-DeclRefExpr 0x7fffd8372158 <line:1292:19> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8371ea8 'font' 'stbtt_uint8 *'
|   | |   | |   |     `-IntegerLiteral 0x7fffd83731c0 <line:1286:58> 'int' 1
|   | |   | |   `-ParenExpr 0x7fffd8373240 <col:64, col:67> 'int'
|   | |   | |     `-IntegerLiteral 0x7fffd8373220 <line:1292:29> 'int' 0
|   | |   | `-BinaryOperator 0x7fffd83733f8 <line:1286:72, col:85> 'int' '=='
|   | |   |   |-ImplicitCastExpr 0x7fffd83733e0 <col:72, col:77> 'int' <IntegralCast>
|   | |   |   | `-ImplicitCastExpr 0x7fffd83733c8 <col:72, col:77> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | |   |   |   `-ArraySubscriptExpr 0x7fffd8373360 <col:72, col:77> 'stbtt_uint8':'unsigned char' lvalue
|   | |   |   |     |-ImplicitCastExpr 0x7fffd8373348 <col:72, col:74> 'stbtt_uint8 *' <LValueToRValue>
|   | |   |   |     | `-ParenExpr 0x7fffd8373308 <col:72, col:74> 'stbtt_uint8 *' lvalue
|   | |   |   |     |   `-DeclRefExpr 0x7fffd83732e0 <line:1292:19> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8371ea8 'font' 'stbtt_uint8 *'
|   | |   |   |     `-IntegerLiteral 0x7fffd8373328 <line:1286:76> 'int' 2
|   | |   |   `-ParenExpr 0x7fffd83733a8 <col:82, col:85> 'int'
|   | |   |     `-IntegerLiteral 0x7fffd8373388 <line:1292:31> 'int' 0
|   | |   `-BinaryOperator 0x7fffd8373560 <line:1286:90, col:103> 'int' '=='
|   | |     |-ImplicitCastExpr 0x7fffd8373548 <col:90, col:95> 'int' <IntegralCast>
|   | |     | `-ImplicitCastExpr 0x7fffd8373530 <col:90, col:95> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | |     |   `-ArraySubscriptExpr 0x7fffd83734c8 <col:90, col:95> 'stbtt_uint8':'unsigned char' lvalue
|   | |     |     |-ImplicitCastExpr 0x7fffd83734b0 <col:90, col:92> 'stbtt_uint8 *' <LValueToRValue>
|   | |     |     | `-ParenExpr 0x7fffd8373470 <col:90, col:92> 'stbtt_uint8 *' lvalue
|   | |     |     |   `-DeclRefExpr 0x7fffd8373448 <line:1292:19> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8371ea8 'font' 'stbtt_uint8 *'
|   | |     |     `-IntegerLiteral 0x7fffd8373490 <line:1286:94> 'int' 3
|   | |     `-ParenExpr 0x7fffd8373510 <col:100, col:103> 'int'
|   | |       `-IntegerLiteral 0x7fffd83734f0 <line:1292:33> 'int' 0
|   | |-ReturnStmt 0x7fffd83735f0 <col:38, col:45>
|   | | `-IntegerLiteral 0x7fffd83735d0 <col:45> 'int' 1
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd8373ed0 <line:1293:4, col:42>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ParenExpr 0x7fffd8373e78 <line:1286:35, col:104> 'int'
|   | | `-BinaryOperator 0x7fffd8373e50 <col:36, col:103> 'int' '&&'
|   | |   |-BinaryOperator 0x7fffd8373c48 <col:36, col:85> 'int' '&&'
|   | |   | |-BinaryOperator 0x7fffd8373a40 <col:36, col:67> 'int' '&&'
|   | |   | | |-BinaryOperator 0x7fffd8373838 <col:36, col:49> 'int' '=='
|   | |   | | | |-ImplicitCastExpr 0x7fffd83737f0 <col:36, col:41> 'int' <IntegralCast>
|   | |   | | | | `-ImplicitCastExpr 0x7fffd83737d8 <col:36, col:41> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | |   | | | |   `-ArraySubscriptExpr 0x7fffd83736c0 <col:36, col:41> 'stbtt_uint8':'unsigned char' lvalue
|   | |   | | | |     |-ImplicitCastExpr 0x7fffd83736a8 <col:36, col:38> 'stbtt_uint8 *' <LValueToRValue>
|   | |   | | | |     | `-ParenExpr 0x7fffd8373668 <col:36, col:38> 'stbtt_uint8 *' lvalue
|   | |   | | | |     |   `-DeclRefExpr 0x7fffd8373640 <line:1293:18> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8371ea8 'font' 'stbtt_uint8 *'
|   | |   | | | |     `-IntegerLiteral 0x7fffd8373688 <line:1286:40> 'int' 0
|   | |   | | | `-ImplicitCastExpr 0x7fffd8373820 <col:46, col:49> 'int' <IntegralCast>
|   | |   | | |   `-ImplicitCastExpr 0x7fffd8373808 <col:46, col:49> 'char' <LValueToRValue>
|   | |   | | |     `-ParenExpr 0x7fffd83737b8 <col:46, col:49> 'char' lvalue
|   | |   | | |       `-ArraySubscriptExpr 0x7fffd8373790 <line:1293:24, line:1287:54> 'char' lvalue
|   | |   | | |         |-ImplicitCastExpr 0x7fffd8373778 <line:1293:24> 'char *' <ArrayToPointerDecay>
|   | |   | | |         | `-StringLiteral 0x7fffd8373728 <col:24> 'char [5]' lvalue "typ1"
|   | |   | | |         `-IntegerLiteral 0x7fffd8373758 <line:1287:53> 'int' 0
|   | |   | | `-BinaryOperator 0x7fffd8373a18 <line:1286:54, col:67> 'int' '=='
|   | |   | |   |-ImplicitCastExpr 0x7fffd83739d0 <col:54, col:59> 'int' <IntegralCast>
|   | |   | |   | `-ImplicitCastExpr 0x7fffd83739b8 <col:54, col:59> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | |   | |   |   `-ArraySubscriptExpr 0x7fffd83738e0 <col:54, col:59> 'stbtt_uint8':'unsigned char' lvalue
|   | |   | |   |     |-ImplicitCastExpr 0x7fffd83738c8 <col:54, col:56> 'stbtt_uint8 *' <LValueToRValue>
|   | |   | |   |     | `-ParenExpr 0x7fffd8373888 <col:54, col:56> 'stbtt_uint8 *' lvalue
|   | |   | |   |     |   `-DeclRefExpr 0x7fffd8373860 <line:1293:18> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8371ea8 'font' 'stbtt_uint8 *'
|   | |   | |   |     `-IntegerLiteral 0x7fffd83738a8 <line:1286:58> 'int' 1
|   | |   | |   `-ImplicitCastExpr 0x7fffd8373a00 <col:64, col:67> 'int' <IntegralCast>
|   | |   | |     `-ImplicitCastExpr 0x7fffd83739e8 <col:64, col:67> 'char' <LValueToRValue>
|   | |   | |       `-ParenExpr 0x7fffd8373998 <col:64, col:67> 'char' lvalue
|   | |   | |         `-ArraySubscriptExpr 0x7fffd8373970 <line:1293:24, line:1287:61> 'char' lvalue
|   | |   | |           |-ImplicitCastExpr 0x7fffd8373958 <line:1293:24> 'char *' <ArrayToPointerDecay>
|   | |   | |           | `-StringLiteral 0x7fffd8373908 <col:24> 'char [5]' lvalue "typ1"
|   | |   | |           `-IntegerLiteral 0x7fffd8373938 <line:1287:60> 'int' 1
|   | |   | `-BinaryOperator 0x7fffd8373c20 <line:1286:72, col:85> 'int' '=='
|   | |   |   |-ImplicitCastExpr 0x7fffd8373bd8 <col:72, col:77> 'int' <IntegralCast>
|   | |   |   | `-ImplicitCastExpr 0x7fffd8373bc0 <col:72, col:77> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | |   |   |   `-ArraySubscriptExpr 0x7fffd8373ae8 <col:72, col:77> 'stbtt_uint8':'unsigned char' lvalue
|   | |   |   |     |-ImplicitCastExpr 0x7fffd8373ad0 <col:72, col:74> 'stbtt_uint8 *' <LValueToRValue>
|   | |   |   |     | `-ParenExpr 0x7fffd8373a90 <col:72, col:74> 'stbtt_uint8 *' lvalue
|   | |   |   |     |   `-DeclRefExpr 0x7fffd8373a68 <line:1293:18> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8371ea8 'font' 'stbtt_uint8 *'
|   | |   |   |     `-IntegerLiteral 0x7fffd8373ab0 <line:1286:76> 'int' 2
|   | |   |   `-ImplicitCastExpr 0x7fffd8373c08 <col:82, col:85> 'int' <IntegralCast>
|   | |   |     `-ImplicitCastExpr 0x7fffd8373bf0 <col:82, col:85> 'char' <LValueToRValue>
|   | |   |       `-ParenExpr 0x7fffd8373ba0 <col:82, col:85> 'char' lvalue
|   | |   |         `-ArraySubscriptExpr 0x7fffd8373b78 <line:1293:24, line:1287:68> 'char' lvalue
|   | |   |           |-ImplicitCastExpr 0x7fffd8373b60 <line:1293:24> 'char *' <ArrayToPointerDecay>
|   | |   |           | `-StringLiteral 0x7fffd8373b10 <col:24> 'char [5]' lvalue "typ1"
|   | |   |           `-IntegerLiteral 0x7fffd8373b40 <line:1287:67> 'int' 2
|   | |   `-BinaryOperator 0x7fffd8373e28 <line:1286:90, col:103> 'int' '=='
|   | |     |-ImplicitCastExpr 0x7fffd8373de0 <col:90, col:95> 'int' <IntegralCast>
|   | |     | `-ImplicitCastExpr 0x7fffd8373dc8 <col:90, col:95> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | |     |   `-ArraySubscriptExpr 0x7fffd8373cf0 <col:90, col:95> 'stbtt_uint8':'unsigned char' lvalue
|   | |     |     |-ImplicitCastExpr 0x7fffd8373cd8 <col:90, col:92> 'stbtt_uint8 *' <LValueToRValue>
|   | |     |     | `-ParenExpr 0x7fffd8373c98 <col:90, col:92> 'stbtt_uint8 *' lvalue
|   | |     |     |   `-DeclRefExpr 0x7fffd8373c70 <line:1293:18> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8371ea8 'font' 'stbtt_uint8 *'
|   | |     |     `-IntegerLiteral 0x7fffd8373cb8 <line:1286:94> 'int' 3
|   | |     `-ImplicitCastExpr 0x7fffd8373e10 <col:100, col:103> 'int' <IntegralCast>
|   | |       `-ImplicitCastExpr 0x7fffd8373df8 <col:100, col:103> 'char' <LValueToRValue>
|   | |         `-ParenExpr 0x7fffd8373da8 <col:100, col:103> 'char' lvalue
|   | |           `-ArraySubscriptExpr 0x7fffd8373d80 <line:1293:24, line:1287:75> 'char' lvalue
|   | |             |-ImplicitCastExpr 0x7fffd8373d68 <line:1293:24> 'char *' <ArrayToPointerDecay>
|   | |             | `-StringLiteral 0x7fffd8373d18 <col:24> 'char [5]' lvalue "typ1"
|   | |             `-IntegerLiteral 0x7fffd8373d48 <line:1287:74> 'int' 3
|   | |-ReturnStmt 0x7fffd8373eb8 <line:1293:35, col:42>
|   | | `-IntegerLiteral 0x7fffd8373e98 <col:42> 'int' 1
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd8374758 <line:1294:4, col:42>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ParenExpr 0x7fffd8374700 <line:1286:35, col:104> 'int'
|   | | `-BinaryOperator 0x7fffd83746d8 <col:36, col:103> 'int' '&&'
|   | |   |-BinaryOperator 0x7fffd83744d0 <col:36, col:85> 'int' '&&'
|   | |   | |-BinaryOperator 0x7fffd83742c8 <col:36, col:67> 'int' '&&'
|   | |   | | |-BinaryOperator 0x7fffd83740c0 <col:36, col:49> 'int' '=='
|   | |   | | | |-ImplicitCastExpr 0x7fffd8374078 <col:36, col:41> 'int' <IntegralCast>
|   | |   | | | | `-ImplicitCastExpr 0x7fffd8374060 <col:36, col:41> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | |   | | | |   `-ArraySubscriptExpr 0x7fffd8373f88 <col:36, col:41> 'stbtt_uint8':'unsigned char' lvalue
|   | |   | | | |     |-ImplicitCastExpr 0x7fffd8373f70 <col:36, col:38> 'stbtt_uint8 *' <LValueToRValue>
|   | |   | | | |     | `-ParenExpr 0x7fffd8373f30 <col:36, col:38> 'stbtt_uint8 *' lvalue
|   | |   | | | |     |   `-DeclRefExpr 0x7fffd8373f08 <line:1294:18> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8371ea8 'font' 'stbtt_uint8 *'
|   | |   | | | |     `-IntegerLiteral 0x7fffd8373f50 <line:1286:40> 'int' 0
|   | |   | | | `-ImplicitCastExpr 0x7fffd83740a8 <col:46, col:49> 'int' <IntegralCast>
|   | |   | | |   `-ImplicitCastExpr 0x7fffd8374090 <col:46, col:49> 'char' <LValueToRValue>
|   | |   | | |     `-ParenExpr 0x7fffd8374040 <col:46, col:49> 'char' lvalue
|   | |   | | |       `-ArraySubscriptExpr 0x7fffd8374018 <line:1294:24, line:1287:54> 'char' lvalue
|   | |   | | |         |-ImplicitCastExpr 0x7fffd8374000 <line:1294:24> 'char *' <ArrayToPointerDecay>
|   | |   | | |         | `-StringLiteral 0x7fffd8373fb0 <col:24> 'char [5]' lvalue "OTTO"
|   | |   | | |         `-IntegerLiteral 0x7fffd8373fe0 <line:1287:53> 'int' 0
|   | |   | | `-BinaryOperator 0x7fffd83742a0 <line:1286:54, col:67> 'int' '=='
|   | |   | |   |-ImplicitCastExpr 0x7fffd8374258 <col:54, col:59> 'int' <IntegralCast>
|   | |   | |   | `-ImplicitCastExpr 0x7fffd8374240 <col:54, col:59> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | |   | |   |   `-ArraySubscriptExpr 0x7fffd8374168 <col:54, col:59> 'stbtt_uint8':'unsigned char' lvalue
|   | |   | |   |     |-ImplicitCastExpr 0x7fffd8374150 <col:54, col:56> 'stbtt_uint8 *' <LValueToRValue>
|   | |   | |   |     | `-ParenExpr 0x7fffd8374110 <col:54, col:56> 'stbtt_uint8 *' lvalue
|   | |   | |   |     |   `-DeclRefExpr 0x7fffd83740e8 <line:1294:18> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8371ea8 'font' 'stbtt_uint8 *'
|   | |   | |   |     `-IntegerLiteral 0x7fffd8374130 <line:1286:58> 'int' 1
|   | |   | |   `-ImplicitCastExpr 0x7fffd8374288 <col:64, col:67> 'int' <IntegralCast>
|   | |   | |     `-ImplicitCastExpr 0x7fffd8374270 <col:64, col:67> 'char' <LValueToRValue>
|   | |   | |       `-ParenExpr 0x7fffd8374220 <col:64, col:67> 'char' lvalue
|   | |   | |         `-ArraySubscriptExpr 0x7fffd83741f8 <line:1294:24, line:1287:61> 'char' lvalue
|   | |   | |           |-ImplicitCastExpr 0x7fffd83741e0 <line:1294:24> 'char *' <ArrayToPointerDecay>
|   | |   | |           | `-StringLiteral 0x7fffd8374190 <col:24> 'char [5]' lvalue "OTTO"
|   | |   | |           `-IntegerLiteral 0x7fffd83741c0 <line:1287:60> 'int' 1
|   | |   | `-BinaryOperator 0x7fffd83744a8 <line:1286:72, col:85> 'int' '=='
|   | |   |   |-ImplicitCastExpr 0x7fffd8374460 <col:72, col:77> 'int' <IntegralCast>
|   | |   |   | `-ImplicitCastExpr 0x7fffd8374448 <col:72, col:77> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | |   |   |   `-ArraySubscriptExpr 0x7fffd8374370 <col:72, col:77> 'stbtt_uint8':'unsigned char' lvalue
|   | |   |   |     |-ImplicitCastExpr 0x7fffd8374358 <col:72, col:74> 'stbtt_uint8 *' <LValueToRValue>
|   | |   |   |     | `-ParenExpr 0x7fffd8374318 <col:72, col:74> 'stbtt_uint8 *' lvalue
|   | |   |   |     |   `-DeclRefExpr 0x7fffd83742f0 <line:1294:18> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8371ea8 'font' 'stbtt_uint8 *'
|   | |   |   |     `-IntegerLiteral 0x7fffd8374338 <line:1286:76> 'int' 2
|   | |   |   `-ImplicitCastExpr 0x7fffd8374490 <col:82, col:85> 'int' <IntegralCast>
|   | |   |     `-ImplicitCastExpr 0x7fffd8374478 <col:82, col:85> 'char' <LValueToRValue>
|   | |   |       `-ParenExpr 0x7fffd8374428 <col:82, col:85> 'char' lvalue
|   | |   |         `-ArraySubscriptExpr 0x7fffd8374400 <line:1294:24, line:1287:68> 'char' lvalue
|   | |   |           |-ImplicitCastExpr 0x7fffd83743e8 <line:1294:24> 'char *' <ArrayToPointerDecay>
|   | |   |           | `-StringLiteral 0x7fffd8374398 <col:24> 'char [5]' lvalue "OTTO"
|   | |   |           `-IntegerLiteral 0x7fffd83743c8 <line:1287:67> 'int' 2
|   | |   `-BinaryOperator 0x7fffd83746b0 <line:1286:90, col:103> 'int' '=='
|   | |     |-ImplicitCastExpr 0x7fffd8374668 <col:90, col:95> 'int' <IntegralCast>
|   | |     | `-ImplicitCastExpr 0x7fffd8374650 <col:90, col:95> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | |     |   `-ArraySubscriptExpr 0x7fffd8374578 <col:90, col:95> 'stbtt_uint8':'unsigned char' lvalue
|   | |     |     |-ImplicitCastExpr 0x7fffd8374560 <col:90, col:92> 'stbtt_uint8 *' <LValueToRValue>
|   | |     |     | `-ParenExpr 0x7fffd8374520 <col:90, col:92> 'stbtt_uint8 *' lvalue
|   | |     |     |   `-DeclRefExpr 0x7fffd83744f8 <line:1294:18> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8371ea8 'font' 'stbtt_uint8 *'
|   | |     |     `-IntegerLiteral 0x7fffd8374540 <line:1286:94> 'int' 3
|   | |     `-ImplicitCastExpr 0x7fffd8374698 <col:100, col:103> 'int' <IntegralCast>
|   | |       `-ImplicitCastExpr 0x7fffd8374680 <col:100, col:103> 'char' <LValueToRValue>
|   | |         `-ParenExpr 0x7fffd8374630 <col:100, col:103> 'char' lvalue
|   | |           `-ArraySubscriptExpr 0x7fffd8374608 <line:1294:24, line:1287:75> 'char' lvalue
|   | |             |-ImplicitCastExpr 0x7fffd83745f0 <line:1294:24> 'char *' <ArrayToPointerDecay>
|   | |             | `-StringLiteral 0x7fffd83745a0 <col:24> 'char [5]' lvalue "OTTO"
|   | |             `-IntegerLiteral 0x7fffd83745d0 <line:1287:74> 'int' 3
|   | |-ReturnStmt 0x7fffd8374740 <line:1294:35, col:42>
|   | | `-IntegerLiteral 0x7fffd8374720 <col:42> 'int' 1
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd8374d60 <line:1295:4, col:42>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ParenExpr 0x7fffd8374d08 <line:1286:35, col:104> 'int'
|   | | `-BinaryOperator 0x7fffd8374ce0 <col:36, col:103> 'int' '&&'
|   | |   |-BinaryOperator 0x7fffd8374b78 <col:36, col:85> 'int' '&&'
|   | |   | |-BinaryOperator 0x7fffd8374a10 <col:36, col:67> 'int' '&&'
|   | |   | | |-BinaryOperator 0x7fffd83748a8 <col:36, col:49> 'int' '=='
|   | |   | | | |-ImplicitCastExpr 0x7fffd8374890 <col:36, col:41> 'int' <IntegralCast>
|   | |   | | | | `-ImplicitCastExpr 0x7fffd8374878 <col:36, col:41> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | |   | | | |   `-ArraySubscriptExpr 0x7fffd8374810 <col:36, col:41> 'stbtt_uint8':'unsigned char' lvalue
|   | |   | | | |     |-ImplicitCastExpr 0x7fffd83747f8 <col:36, col:38> 'stbtt_uint8 *' <LValueToRValue>
|   | |   | | | |     | `-ParenExpr 0x7fffd83747b8 <col:36, col:38> 'stbtt_uint8 *' lvalue
|   | |   | | | |     |   `-DeclRefExpr 0x7fffd8374790 <line:1295:19> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8371ea8 'font' 'stbtt_uint8 *'
|   | |   | | | |     `-IntegerLiteral 0x7fffd83747d8 <line:1286:40> 'int' 0
|   | |   | | | `-ParenExpr 0x7fffd8374858 <col:46, col:49> 'int'
|   | |   | | |   `-IntegerLiteral 0x7fffd8374838 <line:1295:25> 'int' 0
|   | |   | | `-BinaryOperator 0x7fffd83749e8 <line:1286:54, col:67> 'int' '=='
|   | |   | |   |-ImplicitCastExpr 0x7fffd83749d0 <col:54, col:59> 'int' <IntegralCast>
|   | |   | |   | `-ImplicitCastExpr 0x7fffd83749b8 <col:54, col:59> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | |   | |   |   `-ArraySubscriptExpr 0x7fffd8374950 <col:54, col:59> 'stbtt_uint8':'unsigned char' lvalue
|   | |   | |   |     |-ImplicitCastExpr 0x7fffd8374938 <col:54, col:56> 'stbtt_uint8 *' <LValueToRValue>
|   | |   | |   |     | `-ParenExpr 0x7fffd83748f8 <col:54, col:56> 'stbtt_uint8 *' lvalue
|   | |   | |   |     |   `-DeclRefExpr 0x7fffd83748d0 <line:1295:19> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8371ea8 'font' 'stbtt_uint8 *'
|   | |   | |   |     `-IntegerLiteral 0x7fffd8374918 <line:1286:58> 'int' 1
|   | |   | |   `-ParenExpr 0x7fffd8374998 <col:64, col:67> 'int'
|   | |   | |     `-IntegerLiteral 0x7fffd8374978 <line:1295:27> 'int' 1
|   | |   | `-BinaryOperator 0x7fffd8374b50 <line:1286:72, col:85> 'int' '=='
|   | |   |   |-ImplicitCastExpr 0x7fffd8374b38 <col:72, col:77> 'int' <IntegralCast>
|   | |   |   | `-ImplicitCastExpr 0x7fffd8374b20 <col:72, col:77> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | |   |   |   `-ArraySubscriptExpr 0x7fffd8374ab8 <col:72, col:77> 'stbtt_uint8':'unsigned char' lvalue
|   | |   |   |     |-ImplicitCastExpr 0x7fffd8374aa0 <col:72, col:74> 'stbtt_uint8 *' <LValueToRValue>
|   | |   |   |     | `-ParenExpr 0x7fffd8374a60 <col:72, col:74> 'stbtt_uint8 *' lvalue
|   | |   |   |     |   `-DeclRefExpr 0x7fffd8374a38 <line:1295:19> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8371ea8 'font' 'stbtt_uint8 *'
|   | |   |   |     `-IntegerLiteral 0x7fffd8374a80 <line:1286:76> 'int' 2
|   | |   |   `-ParenExpr 0x7fffd8374b00 <col:82, col:85> 'int'
|   | |   |     `-IntegerLiteral 0x7fffd8374ae0 <line:1295:29> 'int' 0
|   | |   `-BinaryOperator 0x7fffd8374cb8 <line:1286:90, col:103> 'int' '=='
|   | |     |-ImplicitCastExpr 0x7fffd8374ca0 <col:90, col:95> 'int' <IntegralCast>
|   | |     | `-ImplicitCastExpr 0x7fffd8374c88 <col:90, col:95> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | |     |   `-ArraySubscriptExpr 0x7fffd8374c20 <col:90, col:95> 'stbtt_uint8':'unsigned char' lvalue
|   | |     |     |-ImplicitCastExpr 0x7fffd8374c08 <col:90, col:92> 'stbtt_uint8 *' <LValueToRValue>
|   | |     |     | `-ParenExpr 0x7fffd8374bc8 <col:90, col:92> 'stbtt_uint8 *' lvalue
|   | |     |     |   `-DeclRefExpr 0x7fffd8374ba0 <line:1295:19> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8371ea8 'font' 'stbtt_uint8 *'
|   | |     |     `-IntegerLiteral 0x7fffd8374be8 <line:1286:94> 'int' 3
|   | |     `-ParenExpr 0x7fffd8374c68 <col:100, col:103> 'int'
|   | |       `-IntegerLiteral 0x7fffd8374c48 <line:1295:31> 'int' 0
|   | |-ReturnStmt 0x7fffd8374d48 <col:35, col:42>
|   | | `-IntegerLiteral 0x7fffd8374d28 <col:42> 'int' 1
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd8375618 <line:1296:4, col:42>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ParenExpr 0x7fffd83755c0 <line:1286:35, col:104> 'int'
|   | | `-BinaryOperator 0x7fffd8375598 <col:36, col:103> 'int' '&&'
|   | |   |-BinaryOperator 0x7fffd8375390 <col:36, col:85> 'int' '&&'
|   | |   | |-BinaryOperator 0x7fffd8375158 <col:36, col:67> 'int' '&&'
|   | |   | | |-BinaryOperator 0x7fffd8374f50 <col:36, col:49> 'int' '=='
|   | |   | | | |-ImplicitCastExpr 0x7fffd8374f08 <col:36, col:41> 'int' <IntegralCast>
|   | |   | | | | `-ImplicitCastExpr 0x7fffd8374ef0 <col:36, col:41> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | |   | | | |   `-ArraySubscriptExpr 0x7fffd8374e18 <col:36, col:41> 'stbtt_uint8':'unsigned char' lvalue
|   | |   | | | |     |-ImplicitCastExpr 0x7fffd8374e00 <col:36, col:38> 'stbtt_uint8 *' <LValueToRValue>
|   | |   | | | |     | `-ParenExpr 0x7fffd8374dc0 <col:36, col:38> 'stbtt_uint8 *' lvalue
|   | |   | | | |     |   `-DeclRefExpr 0x7fffd8374d98 <line:1296:18> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8371ea8 'font' 'stbtt_uint8 *'
|   | |   | | | |     `-IntegerLiteral 0x7fffd8374de0 <line:1286:40> 'int' 0
|   | |   | | | `-ImplicitCastExpr 0x7fffd8374f38 <col:46, col:49> 'int' <IntegralCast>
|   | |   | | |   `-ImplicitCastExpr 0x7fffd8374f20 <col:46, col:49> 'char' <LValueToRValue>
|   | |   | | |     `-ParenExpr 0x7fffd8374ed0 <col:46, col:49> 'char' lvalue
|   | |   | | |       `-ArraySubscriptExpr 0x7fffd8374ea8 <line:1296:24, line:1287:54> 'char' lvalue
|   | |   | | |         |-ImplicitCastExpr 0x7fffd8374e90 <line:1296:24> 'char *' <ArrayToPointerDecay>
|   | |   | | |         | `-StringLiteral 0x7fffd8374e40 <col:24> 'char [5]' lvalue "true"
|   | |   | | |         `-IntegerLiteral 0x7fffd8374e70 <line:1287:53> 'int' 0
|   | |   | | `-BinaryOperator 0x7fffd8375130 <line:1286:54, col:67> 'int' '=='
|   | |   | |   |-ImplicitCastExpr 0x7fffd83750e8 <col:54, col:59> 'int' <IntegralCast>
|   | |   | |   | `-ImplicitCastExpr 0x7fffd83750d0 <col:54, col:59> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | |   | |   |   `-ArraySubscriptExpr 0x7fffd8374ff8 <col:54, col:59> 'stbtt_uint8':'unsigned char' lvalue
|   | |   | |   |     |-ImplicitCastExpr 0x7fffd8374fe0 <col:54, col:56> 'stbtt_uint8 *' <LValueToRValue>
|   | |   | |   |     | `-ParenExpr 0x7fffd8374fa0 <col:54, col:56> 'stbtt_uint8 *' lvalue
|   | |   | |   |     |   `-DeclRefExpr 0x7fffd8374f78 <line:1296:18> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8371ea8 'font' 'stbtt_uint8 *'
|   | |   | |   |     `-IntegerLiteral 0x7fffd8374fc0 <line:1286:58> 'int' 1
|   | |   | |   `-ImplicitCastExpr 0x7fffd8375118 <col:64, col:67> 'int' <IntegralCast>
|   | |   | |     `-ImplicitCastExpr 0x7fffd8375100 <col:64, col:67> 'char' <LValueToRValue>
|   | |   | |       `-ParenExpr 0x7fffd83750b0 <col:64, col:67> 'char' lvalue
|   | |   | |         `-ArraySubscriptExpr 0x7fffd8375088 <line:1296:24, line:1287:61> 'char' lvalue
|   | |   | |           |-ImplicitCastExpr 0x7fffd8375070 <line:1296:24> 'char *' <ArrayToPointerDecay>
|   | |   | |           | `-StringLiteral 0x7fffd8375020 <col:24> 'char [5]' lvalue "true"
|   | |   | |           `-IntegerLiteral 0x7fffd8375050 <line:1287:60> 'int' 1
|   | |   | `-BinaryOperator 0x7fffd8375368 <line:1286:72, col:85> 'int' '=='
|   | |   |   |-ImplicitCastExpr 0x7fffd8375320 <col:72, col:77> 'int' <IntegralCast>
|   | |   |   | `-ImplicitCastExpr 0x7fffd8375308 <col:72, col:77> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | |   |   |   `-ArraySubscriptExpr 0x7fffd8375230 <col:72, col:77> 'stbtt_uint8':'unsigned char' lvalue
|   | |   |   |     |-ImplicitCastExpr 0x7fffd8375218 <col:72, col:74> 'stbtt_uint8 *' <LValueToRValue>
|   | |   |   |     | `-ParenExpr 0x7fffd83751d8 <col:72, col:74> 'stbtt_uint8 *' lvalue
|   | |   |   |     |   `-DeclRefExpr 0x7fffd83751b0 <line:1296:18> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8371ea8 'font' 'stbtt_uint8 *'
|   | |   |   |     `-IntegerLiteral 0x7fffd83751f8 <line:1286:76> 'int' 2
|   | |   |   `-ImplicitCastExpr 0x7fffd8375350 <col:82, col:85> 'int' <IntegralCast>
|   | |   |     `-ImplicitCastExpr 0x7fffd8375338 <col:82, col:85> 'char' <LValueToRValue>
|   | |   |       `-ParenExpr 0x7fffd83752e8 <col:82, col:85> 'char' lvalue
|   | |   |         `-ArraySubscriptExpr 0x7fffd83752c0 <line:1296:24, line:1287:68> 'char' lvalue
|   | |   |           |-ImplicitCastExpr 0x7fffd83752a8 <line:1296:24> 'char *' <ArrayToPointerDecay>
|   | |   |           | `-StringLiteral 0x7fffd8375258 <col:24> 'char [5]' lvalue "true"
|   | |   |           `-IntegerLiteral 0x7fffd8375288 <line:1287:67> 'int' 2
|   | |   `-BinaryOperator 0x7fffd8375570 <line:1286:90, col:103> 'int' '=='
|   | |     |-ImplicitCastExpr 0x7fffd8375528 <col:90, col:95> 'int' <IntegralCast>
|   | |     | `-ImplicitCastExpr 0x7fffd8375510 <col:90, col:95> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | |     |   `-ArraySubscriptExpr 0x7fffd8375438 <col:90, col:95> 'stbtt_uint8':'unsigned char' lvalue
|   | |     |     |-ImplicitCastExpr 0x7fffd8375420 <col:90, col:92> 'stbtt_uint8 *' <LValueToRValue>
|   | |     |     | `-ParenExpr 0x7fffd83753e0 <col:90, col:92> 'stbtt_uint8 *' lvalue
|   | |     |     |   `-DeclRefExpr 0x7fffd83753b8 <line:1296:18> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8371ea8 'font' 'stbtt_uint8 *'
|   | |     |     `-IntegerLiteral 0x7fffd8375400 <line:1286:94> 'int' 3
|   | |     `-ImplicitCastExpr 0x7fffd8375558 <col:100, col:103> 'int' <IntegralCast>
|   | |       `-ImplicitCastExpr 0x7fffd8375540 <col:100, col:103> 'char' <LValueToRValue>
|   | |         `-ParenExpr 0x7fffd83754f0 <col:100, col:103> 'char' lvalue
|   | |           `-ArraySubscriptExpr 0x7fffd83754c8 <line:1296:24, line:1287:75> 'char' lvalue
|   | |             |-ImplicitCastExpr 0x7fffd83754b0 <line:1296:24> 'char *' <ArrayToPointerDecay>
|   | |             | `-StringLiteral 0x7fffd8375460 <col:24> 'char [5]' lvalue "true"
|   | |             `-IntegerLiteral 0x7fffd8375490 <line:1287:74> 'int' 3
|   | |-ReturnStmt 0x7fffd8375600 <line:1296:35, col:42>
|   | | `-IntegerLiteral 0x7fffd83755e0 <col:42> 'int' 1
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x7fffd8375670 <line:1297:4, col:11>
|     `-IntegerLiteral 0x7fffd8375650 <col:11> 'int' 0
|-FunctionDecl 0x7fffd83758f0 <line:1301:1, line:1312:1> line:1301:21 used stbtt__find_table 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)' static
| |-ParmVarDecl 0x7fffd83756d8 <col:39, col:52> col:52 used data 'stbtt_uint8 *'
| |-ParmVarDecl 0x7fffd8375748 <col:58, col:71> col:71 used fontstart 'stbtt_uint32':'unsigned int'
| |-ParmVarDecl 0x7fffd83757c0 <col:82, col:94> col:94 used tag 'const char *'
| `-CompoundStmt 0x7fffd8376e08 <line:1302:1, line:1312:1>
|   |-DeclStmt 0x7fffd8375be8 <line:1303:4, col:55>
|   | `-VarDecl 0x7fffd83759b8 <col:4, col:54> col:16 used num_tables 'stbtt_int32':'int' cinit
|   |   `-ImplicitCastExpr 0x7fffd8375bd0 <col:29, col:54> 'stbtt_int32':'int' <IntegralCast>
|   |     `-CallExpr 0x7fffd8375ba0 <col:29, col:54> 'stbtt_uint16':'unsigned short'
|   |       |-ImplicitCastExpr 0x7fffd8375b88 <col:29> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x7fffd8375a18 <col:29> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       `-BinaryOperator 0x7fffd8375b08 <col:38, col:53> 'stbtt_uint8 *' '+'
|   |         |-BinaryOperator 0x7fffd8375ac0 <col:38, col:43> 'stbtt_uint8 *' '+'
|   |         | |-ImplicitCastExpr 0x7fffd8375a90 <col:38> 'stbtt_uint8 *' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x7fffd8375a40 <col:38> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd83756d8 'data' 'stbtt_uint8 *'
|   |         | `-ImplicitCastExpr 0x7fffd8375aa8 <col:43> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x7fffd8375a68 <col:43> 'stbtt_uint32':'unsigned int' lvalue ParmVar 0x7fffd8375748 'fontstart' 'stbtt_uint32':'unsigned int'
|   |         `-IntegerLiteral 0x7fffd8375ae8 <col:53> 'int' 4
|   |-DeclStmt 0x7fffd8375d10 <line:1304:4, col:42>
|   | `-VarDecl 0x7fffd8375c10 <col:4, col:40> col:17 used tabledir 'stbtt_uint32':'unsigned int' cinit
|   |   `-BinaryOperator 0x7fffd8375ce8 <col:28, col:40> 'unsigned int' '+'
|   |     |-ImplicitCastExpr 0x7fffd8375cb8 <col:28> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd8375c70 <col:28> 'stbtt_uint32':'unsigned int' lvalue ParmVar 0x7fffd8375748 'fontstart' 'stbtt_uint32':'unsigned int'
|   |     `-ImplicitCastExpr 0x7fffd8375cd0 <col:40> 'unsigned int' <IntegralCast>
|   |       `-IntegerLiteral 0x7fffd8375c98 <col:40> 'int' 12
|   |-DeclStmt 0x7fffd8375d98 <line:1305:4, col:17>
|   | `-VarDecl 0x7fffd8375d38 <col:4, col:16> col:16 used i 'stbtt_int32':'int'
|   |-ForStmt 0x7fffd8376d80 <line:1306:4, line:1310:4>
|   | |-BinaryOperator 0x7fffd8375df8 <line:1306:9, col:11> 'stbtt_int32':'int' '='
|   | | |-DeclRefExpr 0x7fffd8375db0 <col:9> 'stbtt_int32':'int' lvalue Var 0x7fffd8375d38 'i' 'stbtt_int32':'int'
|   | | `-IntegerLiteral 0x7fffd8375dd8 <col:11> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd8375ea0 <col:14, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd8375e70 <col:14> 'stbtt_int32':'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd8375e20 <col:14> 'stbtt_int32':'int' lvalue Var 0x7fffd8375d38 'i' 'stbtt_int32':'int'
|   | | `-ImplicitCastExpr 0x7fffd8375e88 <col:18> 'stbtt_int32':'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8375e48 <col:18> 'stbtt_int32':'int' lvalue Var 0x7fffd83759b8 'num_tables' 'stbtt_int32':'int'
|   | |-UnaryOperator 0x7fffd8375ef0 <col:30, col:32> 'stbtt_int32':'int' prefix '++'
|   | | `-DeclRefExpr 0x7fffd8375ec8 <col:32> 'stbtt_int32':'int' lvalue Var 0x7fffd8375d38 'i' 'stbtt_int32':'int'
|   | `-CompoundStmt 0x7fffd8376d60 <col:35, line:1310:4>
|   |   |-DeclStmt 0x7fffd8376088 <line:1307:7, col:41>
|   |   | `-VarDecl 0x7fffd8375f20 <col:7, col:40> col:20 used loc 'stbtt_uint32':'unsigned int' cinit
|   |   |   `-BinaryOperator 0x7fffd8376060 <col:26, col:40> 'unsigned int' '+'
|   |   |     |-ImplicitCastExpr 0x7fffd8376030 <col:26> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x7fffd8375f80 <col:26> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8375c10 'tabledir' 'stbtt_uint32':'unsigned int'
|   |   |     `-ImplicitCastExpr 0x7fffd8376048 <col:37, col:40> 'unsigned int' <IntegralCast>
|   |   |       `-BinaryOperator 0x7fffd8376008 <col:37, col:40> 'int' '*'
|   |   |         |-IntegerLiteral 0x7fffd8375fa8 <col:37> 'int' 16
|   |   |         `-ImplicitCastExpr 0x7fffd8375ff0 <col:40> 'stbtt_int32':'int' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x7fffd8375fc8 <col:40> 'stbtt_int32':'int' lvalue Var 0x7fffd8375d38 'i' 'stbtt_int32':'int'
|   |   `-IfStmt 0x7fffd8376d28 <line:1308:7, line:1309:35>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-ParenExpr 0x7fffd8376b38 <line:1286:35, col:104> 'int'
|   |     | `-BinaryOperator 0x7fffd8376b10 <col:36, col:103> 'int' '&&'
|   |     |   |-BinaryOperator 0x7fffd8376860 <col:36, col:85> 'int' '&&'
|   |     |   | |-BinaryOperator 0x7fffd83765b0 <col:36, col:67> 'int' '&&'
|   |     |   | | |-BinaryOperator 0x7fffd8376300 <col:36, col:49> 'int' '=='
|   |     |   | | | |-ImplicitCastExpr 0x7fffd83762b8 <col:36, col:41> 'int' <IntegralCast>
|   |     |   | | | | `-ImplicitCastExpr 0x7fffd83762a0 <col:36, col:41> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   |     |   | | | |   `-ArraySubscriptExpr 0x7fffd83761d0 <col:36, col:41> 'stbtt_uint8':'unsigned char' lvalue
|   |     |   | | | |     |-ParenExpr 0x7fffd8376190 <col:36, col:38> 'stbtt_uint8 *'
|   |     |   | | | |     | `-BinaryOperator 0x7fffd8376168 <line:1308:21, col:30> 'stbtt_uint8 *' '+'
|   |     |   | | | |     |   |-BinaryOperator 0x7fffd8376120 <col:21, col:26> 'stbtt_uint8 *' '+'
|   |     |   | | | |     |   | |-ImplicitCastExpr 0x7fffd83760f0 <col:21> 'stbtt_uint8 *' <LValueToRValue>
|   |     |   | | | |     |   | | `-DeclRefExpr 0x7fffd83760a0 <col:21> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd83756d8 'data' 'stbtt_uint8 *'
|   |     |   | | | |     |   | `-ImplicitCastExpr 0x7fffd8376108 <col:26> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     |   | | | |     |   |   `-DeclRefExpr 0x7fffd83760c8 <col:26> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8375f20 'loc' 'stbtt_uint32':'unsigned int'
|   |     |   | | | |     |   `-IntegerLiteral 0x7fffd8376148 <col:30> 'int' 0
|   |     |   | | | |     `-IntegerLiteral 0x7fffd83761b0 <line:1286:40> 'int' 0
|   |     |   | | | `-ImplicitCastExpr 0x7fffd83762e8 <col:46, col:49> 'int' <IntegralCast>
|   |     |   | | |   `-ImplicitCastExpr 0x7fffd83762d0 <col:46, col:49> 'char' <LValueToRValue>
|   |     |   | | |     `-ParenExpr 0x7fffd8376280 <col:46, col:49> 'const char' lvalue
|   |     |   | | |       `-ArraySubscriptExpr 0x7fffd8376258 <line:1308:33, line:1287:54> 'const char' lvalue
|   |     |   | | |         |-ImplicitCastExpr 0x7fffd8376240 <line:1308:33> 'const char *' <LValueToRValue>
|   |     |   | | |         | `-DeclRefExpr 0x7fffd83761f8 <col:33> 'const char *' lvalue ParmVar 0x7fffd83757c0 'tag' 'const char *'
|   |     |   | | |         `-IntegerLiteral 0x7fffd8376220 <line:1287:53> 'int' 0
|   |     |   | | `-BinaryOperator 0x7fffd8376588 <line:1286:54, col:67> 'int' '=='
|   |     |   | |   |-ImplicitCastExpr 0x7fffd8376540 <col:54, col:59> 'int' <IntegralCast>
|   |     |   | |   | `-ImplicitCastExpr 0x7fffd8376528 <col:54, col:59> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   |     |   | |   |   `-ArraySubscriptExpr 0x7fffd8376458 <col:54, col:59> 'stbtt_uint8':'unsigned char' lvalue
|   |     |   | |   |     |-ParenExpr 0x7fffd8376418 <col:54, col:56> 'stbtt_uint8 *'
|   |     |   | |   |     | `-BinaryOperator 0x7fffd83763f0 <line:1308:21, col:30> 'stbtt_uint8 *' '+'
|   |     |   | |   |     |   |-BinaryOperator 0x7fffd83763a8 <col:21, col:26> 'stbtt_uint8 *' '+'
|   |     |   | |   |     |   | |-ImplicitCastExpr 0x7fffd8376378 <col:21> 'stbtt_uint8 *' <LValueToRValue>
|   |     |   | |   |     |   | | `-DeclRefExpr 0x7fffd8376328 <col:21> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd83756d8 'data' 'stbtt_uint8 *'
|   |     |   | |   |     |   | `-ImplicitCastExpr 0x7fffd8376390 <col:26> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     |   | |   |     |   |   `-DeclRefExpr 0x7fffd8376350 <col:26> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8375f20 'loc' 'stbtt_uint32':'unsigned int'
|   |     |   | |   |     |   `-IntegerLiteral 0x7fffd83763d0 <col:30> 'int' 0
|   |     |   | |   |     `-IntegerLiteral 0x7fffd8376438 <line:1286:58> 'int' 1
|   |     |   | |   `-ImplicitCastExpr 0x7fffd8376570 <col:64, col:67> 'int' <IntegralCast>
|   |     |   | |     `-ImplicitCastExpr 0x7fffd8376558 <col:64, col:67> 'char' <LValueToRValue>
|   |     |   | |       `-ParenExpr 0x7fffd8376508 <col:64, col:67> 'const char' lvalue
|   |     |   | |         `-ArraySubscriptExpr 0x7fffd83764e0 <line:1308:33, line:1287:61> 'const char' lvalue
|   |     |   | |           |-ImplicitCastExpr 0x7fffd83764c8 <line:1308:33> 'const char *' <LValueToRValue>
|   |     |   | |           | `-DeclRefExpr 0x7fffd8376480 <col:33> 'const char *' lvalue ParmVar 0x7fffd83757c0 'tag' 'const char *'
|   |     |   | |           `-IntegerLiteral 0x7fffd83764a8 <line:1287:60> 'int' 1
|   |     |   | `-BinaryOperator 0x7fffd8376838 <line:1286:72, col:85> 'int' '=='
|   |     |   |   |-ImplicitCastExpr 0x7fffd83767f0 <col:72, col:77> 'int' <IntegralCast>
|   |     |   |   | `-ImplicitCastExpr 0x7fffd83767d8 <col:72, col:77> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   |     |   |   |   `-ArraySubscriptExpr 0x7fffd8376708 <col:72, col:77> 'stbtt_uint8':'unsigned char' lvalue
|   |     |   |   |     |-ParenExpr 0x7fffd83766c8 <col:72, col:74> 'stbtt_uint8 *'
|   |     |   |   |     | `-BinaryOperator 0x7fffd83766a0 <line:1308:21, col:30> 'stbtt_uint8 *' '+'
|   |     |   |   |     |   |-BinaryOperator 0x7fffd8376658 <col:21, col:26> 'stbtt_uint8 *' '+'
|   |     |   |   |     |   | |-ImplicitCastExpr 0x7fffd8376628 <col:21> 'stbtt_uint8 *' <LValueToRValue>
|   |     |   |   |     |   | | `-DeclRefExpr 0x7fffd83765d8 <col:21> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd83756d8 'data' 'stbtt_uint8 *'
|   |     |   |   |     |   | `-ImplicitCastExpr 0x7fffd8376640 <col:26> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     |   |   |     |   |   `-DeclRefExpr 0x7fffd8376600 <col:26> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8375f20 'loc' 'stbtt_uint32':'unsigned int'
|   |     |   |   |     |   `-IntegerLiteral 0x7fffd8376680 <col:30> 'int' 0
|   |     |   |   |     `-IntegerLiteral 0x7fffd83766e8 <line:1286:76> 'int' 2
|   |     |   |   `-ImplicitCastExpr 0x7fffd8376820 <col:82, col:85> 'int' <IntegralCast>
|   |     |   |     `-ImplicitCastExpr 0x7fffd8376808 <col:82, col:85> 'char' <LValueToRValue>
|   |     |   |       `-ParenExpr 0x7fffd83767b8 <col:82, col:85> 'const char' lvalue
|   |     |   |         `-ArraySubscriptExpr 0x7fffd8376790 <line:1308:33, line:1287:68> 'const char' lvalue
|   |     |   |           |-ImplicitCastExpr 0x7fffd8376778 <line:1308:33> 'const char *' <LValueToRValue>
|   |     |   |           | `-DeclRefExpr 0x7fffd8376730 <col:33> 'const char *' lvalue ParmVar 0x7fffd83757c0 'tag' 'const char *'
|   |     |   |           `-IntegerLiteral 0x7fffd8376758 <line:1287:67> 'int' 2
|   |     |   `-BinaryOperator 0x7fffd8376ae8 <line:1286:90, col:103> 'int' '=='
|   |     |     |-ImplicitCastExpr 0x7fffd8376aa0 <col:90, col:95> 'int' <IntegralCast>
|   |     |     | `-ImplicitCastExpr 0x7fffd8376a88 <col:90, col:95> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   |     |     |   `-ArraySubscriptExpr 0x7fffd83769b8 <col:90, col:95> 'stbtt_uint8':'unsigned char' lvalue
|   |     |     |     |-ParenExpr 0x7fffd8376978 <col:90, col:92> 'stbtt_uint8 *'
|   |     |     |     | `-BinaryOperator 0x7fffd8376950 <line:1308:21, col:30> 'stbtt_uint8 *' '+'
|   |     |     |     |   |-BinaryOperator 0x7fffd8376908 <col:21, col:26> 'stbtt_uint8 *' '+'
|   |     |     |     |   | |-ImplicitCastExpr 0x7fffd83768d8 <col:21> 'stbtt_uint8 *' <LValueToRValue>
|   |     |     |     |   | | `-DeclRefExpr 0x7fffd8376888 <col:21> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd83756d8 'data' 'stbtt_uint8 *'
|   |     |     |     |   | `-ImplicitCastExpr 0x7fffd83768f0 <col:26> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     |     |     |   |   `-DeclRefExpr 0x7fffd83768b0 <col:26> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8375f20 'loc' 'stbtt_uint32':'unsigned int'
|   |     |     |     |   `-IntegerLiteral 0x7fffd8376930 <col:30> 'int' 0
|   |     |     |     `-IntegerLiteral 0x7fffd8376998 <line:1286:94> 'int' 3
|   |     |     `-ImplicitCastExpr 0x7fffd8376ad0 <col:100, col:103> 'int' <IntegralCast>
|   |     |       `-ImplicitCastExpr 0x7fffd8376ab8 <col:100, col:103> 'char' <LValueToRValue>
|   |     |         `-ParenExpr 0x7fffd8376a68 <col:100, col:103> 'const char' lvalue
|   |     |           `-ArraySubscriptExpr 0x7fffd8376a40 <line:1308:33, line:1287:75> 'const char' lvalue
|   |     |             |-ImplicitCastExpr 0x7fffd8376a28 <line:1308:33> 'const char *' <LValueToRValue>
|   |     |             | `-DeclRefExpr 0x7fffd83769e0 <col:33> 'const char *' lvalue ParmVar 0x7fffd83757c0 'tag' 'const char *'
|   |     |             `-IntegerLiteral 0x7fffd8376a08 <line:1287:74> 'int' 3
|   |     |-ReturnStmt 0x7fffd8376d10 <line:1309:10, col:35>
|   |     | `-CallExpr 0x7fffd8376ce0 <col:17, col:35> 'stbtt_uint32':'unsigned int'
|   |     |   |-ImplicitCastExpr 0x7fffd8376cc8 <col:17> 'stbtt_uint32 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x7fffd8376b58 <col:17> 'stbtt_uint32 (stbtt_uint8 *)' Function 0x7fffd83712a0 'ttULONG' 'stbtt_uint32 (stbtt_uint8 *)'
|   |     |   `-BinaryOperator 0x7fffd8376c48 <col:25, col:34> 'stbtt_uint8 *' '+'
|   |     |     |-BinaryOperator 0x7fffd8376c00 <col:25, col:30> 'stbtt_uint8 *' '+'
|   |     |     | |-ImplicitCastExpr 0x7fffd8376bd0 <col:25> 'stbtt_uint8 *' <LValueToRValue>
|   |     |     | | `-DeclRefExpr 0x7fffd8376b80 <col:25> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd83756d8 'data' 'stbtt_uint8 *'
|   |     |     | `-ImplicitCastExpr 0x7fffd8376be8 <col:30> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     |     |   `-DeclRefExpr 0x7fffd8376ba8 <col:30> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8375f20 'loc' 'stbtt_uint32':'unsigned int'
|   |     |     `-IntegerLiteral 0x7fffd8376c28 <col:34> 'int' 8
|   |     `-<<<NULL>>>
|   `-ReturnStmt 0x7fffd8376df0 <line:1311:4, col:11>
|     `-ImplicitCastExpr 0x7fffd8376dd8 <col:11> 'stbtt_uint32':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x7fffd8376db8 <col:11> 'int' 0
|-FunctionDecl 0x7fffd8376fa8 <line:1314:1, line:1331:1> line:1314:12 used stbtt_GetFontOffsetForIndex_internal 'int (unsigned char *, int)' static
| |-ParmVarDecl 0x7fffd8376e58 <col:49, col:64> col:64 used font_collection 'unsigned char *'
| |-ParmVarDecl 0x7fffd8376ed0 <col:81, col:85> col:85 used index 'int'
| `-CompoundStmt 0x7fffd8378390 <line:1315:1, line:1331:1>
|   |-IfStmt 0x7fffd83772a8 <line:1317:4, line:1318:32>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-CallExpr 0x7fffd8377120 <line:1317:8, col:37> 'int'
|   | | |-ImplicitCastExpr 0x7fffd8377108 <col:8> 'int (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x7fffd8377058 <col:8> 'int (stbtt_uint8 *)' Function 0x7fffd8371f78 'stbtt__isfont' 'int (stbtt_uint8 *)'
|   | | `-ImplicitCastExpr 0x7fffd8377150 <col:22> 'unsigned char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8377080 <col:22> 'unsigned char *' lvalue ParmVar 0x7fffd8376e58 'font_collection' 'unsigned char *'
|   | |-ReturnStmt 0x7fffd8377290 <line:1318:7, col:32>
|   | | `-ConditionalOperator 0x7fffd8377260 <col:14, col:32> 'int'
|   | |   |-BinaryOperator 0x7fffd83771d8 <col:14, col:23> 'int' '=='
|   | |   | |-ImplicitCastExpr 0x7fffd83771c0 <col:14> 'int' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x7fffd8377168 <col:14> 'int' lvalue ParmVar 0x7fffd8376ed0 'index' 'int'
|   | |   | `-IntegerLiteral 0x7fffd8377190 <col:23> 'int' 0
|   | |   |-IntegerLiteral 0x7fffd8377200 <col:27> 'int' 0
|   | |   `-UnaryOperator 0x7fffd8377240 <col:31, col:32> 'int' prefix '-'
|   | |     `-IntegerLiteral 0x7fffd8377220 <col:32> 'int' 1
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd8378300 <line:1321:4, line:1329:4>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ParenExpr 0x7fffd8377ad8 <line:1286:35, col:104> 'int'
|   | | `-BinaryOperator 0x7fffd8377ab0 <col:36, col:103> 'int' '&&'
|   | |   |-BinaryOperator 0x7fffd83778a8 <col:36, col:85> 'int' '&&'
|   | |   | |-BinaryOperator 0x7fffd83776a0 <col:36, col:67> 'int' '&&'
|   | |   | | |-BinaryOperator 0x7fffd8377498 <col:36, col:49> 'int' '=='
|   | |   | | | |-ImplicitCastExpr 0x7fffd8377450 <col:36, col:41> 'int' <IntegralCast>
|   | |   | | | | `-ImplicitCastExpr 0x7fffd8377438 <col:36, col:41> 'unsigned char' <LValueToRValue>
|   | |   | | | |   `-ArraySubscriptExpr 0x7fffd8377360 <col:36, col:41> 'unsigned char' lvalue
|   | |   | | | |     |-ImplicitCastExpr 0x7fffd8377348 <col:36, col:38> 'unsigned char *' <LValueToRValue>
|   | |   | | | |     | `-ParenExpr 0x7fffd8377308 <col:36, col:38> 'unsigned char *' lvalue
|   | |   | | | |     |   `-DeclRefExpr 0x7fffd83772e0 <line:1321:18> 'unsigned char *' lvalue ParmVar 0x7fffd8376e58 'font_collection' 'unsigned char *'
|   | |   | | | |     `-IntegerLiteral 0x7fffd8377328 <line:1286:40> 'int' 0
|   | |   | | | `-ImplicitCastExpr 0x7fffd8377480 <col:46, col:49> 'int' <IntegralCast>
|   | |   | | |   `-ImplicitCastExpr 0x7fffd8377468 <col:46, col:49> 'char' <LValueToRValue>
|   | |   | | |     `-ParenExpr 0x7fffd8377418 <col:46, col:49> 'char' lvalue
|   | |   | | |       `-ArraySubscriptExpr 0x7fffd83773f0 <line:1321:35, line:1287:54> 'char' lvalue
|   | |   | | |         |-ImplicitCastExpr 0x7fffd83773d8 <line:1321:35> 'char *' <ArrayToPointerDecay>
|   | |   | | |         | `-StringLiteral 0x7fffd8377388 <col:35> 'char [5]' lvalue "ttcf"
|   | |   | | |         `-IntegerLiteral 0x7fffd83773b8 <line:1287:53> 'int' 0
|   | |   | | `-BinaryOperator 0x7fffd8377678 <line:1286:54, col:67> 'int' '=='
|   | |   | |   |-ImplicitCastExpr 0x7fffd8377630 <col:54, col:59> 'int' <IntegralCast>
|   | |   | |   | `-ImplicitCastExpr 0x7fffd8377618 <col:54, col:59> 'unsigned char' <LValueToRValue>
|   | |   | |   |   `-ArraySubscriptExpr 0x7fffd8377540 <col:54, col:59> 'unsigned char' lvalue
|   | |   | |   |     |-ImplicitCastExpr 0x7fffd8377528 <col:54, col:56> 'unsigned char *' <LValueToRValue>
|   | |   | |   |     | `-ParenExpr 0x7fffd83774e8 <col:54, col:56> 'unsigned char *' lvalue
|   | |   | |   |     |   `-DeclRefExpr 0x7fffd83774c0 <line:1321:18> 'unsigned char *' lvalue ParmVar 0x7fffd8376e58 'font_collection' 'unsigned char *'
|   | |   | |   |     `-IntegerLiteral 0x7fffd8377508 <line:1286:58> 'int' 1
|   | |   | |   `-ImplicitCastExpr 0x7fffd8377660 <col:64, col:67> 'int' <IntegralCast>
|   | |   | |     `-ImplicitCastExpr 0x7fffd8377648 <col:64, col:67> 'char' <LValueToRValue>
|   | |   | |       `-ParenExpr 0x7fffd83775f8 <col:64, col:67> 'char' lvalue
|   | |   | |         `-ArraySubscriptExpr 0x7fffd83775d0 <line:1321:35, line:1287:61> 'char' lvalue
|   | |   | |           |-ImplicitCastExpr 0x7fffd83775b8 <line:1321:35> 'char *' <ArrayToPointerDecay>
|   | |   | |           | `-StringLiteral 0x7fffd8377568 <col:35> 'char [5]' lvalue "ttcf"
|   | |   | |           `-IntegerLiteral 0x7fffd8377598 <line:1287:60> 'int' 1
|   | |   | `-BinaryOperator 0x7fffd8377880 <line:1286:72, col:85> 'int' '=='
|   | |   |   |-ImplicitCastExpr 0x7fffd8377838 <col:72, col:77> 'int' <IntegralCast>
|   | |   |   | `-ImplicitCastExpr 0x7fffd8377820 <col:72, col:77> 'unsigned char' <LValueToRValue>
|   | |   |   |   `-ArraySubscriptExpr 0x7fffd8377748 <col:72, col:77> 'unsigned char' lvalue
|   | |   |   |     |-ImplicitCastExpr 0x7fffd8377730 <col:72, col:74> 'unsigned char *' <LValueToRValue>
|   | |   |   |     | `-ParenExpr 0x7fffd83776f0 <col:72, col:74> 'unsigned char *' lvalue
|   | |   |   |     |   `-DeclRefExpr 0x7fffd83776c8 <line:1321:18> 'unsigned char *' lvalue ParmVar 0x7fffd8376e58 'font_collection' 'unsigned char *'
|   | |   |   |     `-IntegerLiteral 0x7fffd8377710 <line:1286:76> 'int' 2
|   | |   |   `-ImplicitCastExpr 0x7fffd8377868 <col:82, col:85> 'int' <IntegralCast>
|   | |   |     `-ImplicitCastExpr 0x7fffd8377850 <col:82, col:85> 'char' <LValueToRValue>
|   | |   |       `-ParenExpr 0x7fffd8377800 <col:82, col:85> 'char' lvalue
|   | |   |         `-ArraySubscriptExpr 0x7fffd83777d8 <line:1321:35, line:1287:68> 'char' lvalue
|   | |   |           |-ImplicitCastExpr 0x7fffd83777c0 <line:1321:35> 'char *' <ArrayToPointerDecay>
|   | |   |           | `-StringLiteral 0x7fffd8377770 <col:35> 'char [5]' lvalue "ttcf"
|   | |   |           `-IntegerLiteral 0x7fffd83777a0 <line:1287:67> 'int' 2
|   | |   `-BinaryOperator 0x7fffd8377a88 <line:1286:90, col:103> 'int' '=='
|   | |     |-ImplicitCastExpr 0x7fffd8377a40 <col:90, col:95> 'int' <IntegralCast>
|   | |     | `-ImplicitCastExpr 0x7fffd8377a28 <col:90, col:95> 'unsigned char' <LValueToRValue>
|   | |     |   `-ArraySubscriptExpr 0x7fffd8377950 <col:90, col:95> 'unsigned char' lvalue
|   | |     |     |-ImplicitCastExpr 0x7fffd8377938 <col:90, col:92> 'unsigned char *' <LValueToRValue>
|   | |     |     | `-ParenExpr 0x7fffd83778f8 <col:90, col:92> 'unsigned char *' lvalue
|   | |     |     |   `-DeclRefExpr 0x7fffd83778d0 <line:1321:18> 'unsigned char *' lvalue ParmVar 0x7fffd8376e58 'font_collection' 'unsigned char *'
|   | |     |     `-IntegerLiteral 0x7fffd8377918 <line:1286:94> 'int' 3
|   | |     `-ImplicitCastExpr 0x7fffd8377a70 <col:100, col:103> 'int' <IntegralCast>
|   | |       `-ImplicitCastExpr 0x7fffd8377a58 <col:100, col:103> 'char' <LValueToRValue>
|   | |         `-ParenExpr 0x7fffd8377a08 <col:100, col:103> 'char' lvalue
|   | |           `-ArraySubscriptExpr 0x7fffd83779e0 <line:1321:35, line:1287:75> 'char' lvalue
|   | |             |-ImplicitCastExpr 0x7fffd83779c8 <line:1321:35> 'char *' <ArrayToPointerDecay>
|   | |             | `-StringLiteral 0x7fffd8377978 <col:35> 'char [5]' lvalue "ttcf"
|   | |             `-IntegerLiteral 0x7fffd83779a8 <line:1287:74> 'int' 3
|   | |-CompoundStmt 0x7fffd83782e8 <line:1321:44, line:1329:4>
|   | | `-IfStmt 0x7fffd83782b0 <line:1323:7, line:1328:7>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-BinaryOperator 0x7fffd8377da8 <line:1323:11, col:85> 'int' '||'
|   | |   | |-BinaryOperator 0x7fffd8377c28 <col:11, col:41> 'int' '=='
|   | |   | | |-CallExpr 0x7fffd8377bc0 <col:11, col:36> 'stbtt_uint32':'unsigned int'
|   | |   | | | |-ImplicitCastExpr 0x7fffd8377ba8 <col:11> 'stbtt_uint32 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | |   | | | | `-DeclRefExpr 0x7fffd8377af8 <col:11> 'stbtt_uint32 (stbtt_uint8 *)' Function 0x7fffd83712a0 'ttULONG' 'stbtt_uint32 (stbtt_uint8 *)'
|   | |   | | | `-BinaryOperator 0x7fffd8377b80 <col:19, col:35> 'unsigned char *' '+'
|   | |   | | |   |-ImplicitCastExpr 0x7fffd8377b68 <col:19> 'unsigned char *' <LValueToRValue>
|   | |   | | |   | `-DeclRefExpr 0x7fffd8377b20 <col:19> 'unsigned char *' lvalue ParmVar 0x7fffd8376e58 'font_collection' 'unsigned char *'
|   | |   | | |   `-IntegerLiteral 0x7fffd8377b48 <col:35> 'int' 4
|   | |   | | `-ImplicitCastExpr 0x7fffd8377c10 <col:41> 'unsigned int' <IntegralCast>
|   | |   | |   `-IntegerLiteral 0x7fffd8377bf0 <col:41> 'int' 65536
|   | |   | `-BinaryOperator 0x7fffd8377d80 <col:55, col:85> 'int' '=='
|   | |   |   |-CallExpr 0x7fffd8377d18 <col:55, col:80> 'stbtt_uint32':'unsigned int'
|   | |   |   | |-ImplicitCastExpr 0x7fffd8377d00 <col:55> 'stbtt_uint32 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | |   |   | | `-DeclRefExpr 0x7fffd8377c50 <col:55> 'stbtt_uint32 (stbtt_uint8 *)' Function 0x7fffd83712a0 'ttULONG' 'stbtt_uint32 (stbtt_uint8 *)'
|   | |   |   | `-BinaryOperator 0x7fffd8377cd8 <col:63, col:79> 'unsigned char *' '+'
|   | |   |   |   |-ImplicitCastExpr 0x7fffd8377cc0 <col:63> 'unsigned char *' <LValueToRValue>
|   | |   |   |   | `-DeclRefExpr 0x7fffd8377c78 <col:63> 'unsigned char *' lvalue ParmVar 0x7fffd8376e58 'font_collection' 'unsigned char *'
|   | |   |   |   `-IntegerLiteral 0x7fffd8377ca0 <col:79> 'int' 4
|   | |   |   `-ImplicitCastExpr 0x7fffd8377d68 <col:85> 'unsigned int' <IntegralCast>
|   | |   |     `-IntegerLiteral 0x7fffd8377d48 <col:85> 'int' 131072
|   | |   |-CompoundStmt 0x7fffd8378288 <col:97, line:1328:7>
|   | |   | |-DeclStmt 0x7fffd8377f60 <line:1324:10, col:51>
|   | |   | | `-VarDecl 0x7fffd8377de0 <col:10, col:50> col:22 used n 'stbtt_int32':'int' cinit
|   | |   | |   `-CallExpr 0x7fffd8377f30 <col:26, col:50> 'stbtt_int32':'int'
|   | |   | |     |-ImplicitCastExpr 0x7fffd8377f18 <col:26> 'stbtt_int32 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | |   | |     | `-DeclRefExpr 0x7fffd8377e40 <col:26> 'stbtt_int32 (stbtt_uint8 *)' Function 0x7fffd8371930 'ttLONG' 'stbtt_int32 (stbtt_uint8 *)'
|   | |   | |     `-BinaryOperator 0x7fffd8377ec8 <col:33, col:49> 'unsigned char *' '+'
|   | |   | |       |-ImplicitCastExpr 0x7fffd8377eb0 <col:33> 'unsigned char *' <LValueToRValue>
|   | |   | |       | `-DeclRefExpr 0x7fffd8377e68 <col:33> 'unsigned char *' lvalue ParmVar 0x7fffd8376e58 'font_collection' 'unsigned char *'
|   | |   | |       `-IntegerLiteral 0x7fffd8377e90 <col:49> 'int' 8
|   | |   | |-IfStmt 0x7fffd8378078 <line:1325:10, line:1326:21>
|   | |   | | |-<<<NULL>>>
|   | |   | | |-<<<NULL>>>
|   | |   | | |-BinaryOperator 0x7fffd8377ff8 <line:1325:14, col:23> 'int' '>='
|   | |   | | | |-ImplicitCastExpr 0x7fffd8377fc8 <col:14> 'int' <LValueToRValue>
|   | |   | | | | `-DeclRefExpr 0x7fffd8377f78 <col:14> 'int' lvalue ParmVar 0x7fffd8376ed0 'index' 'int'
|   | |   | | | `-ImplicitCastExpr 0x7fffd8377fe0 <col:23> 'stbtt_int32':'int' <LValueToRValue>
|   | |   | | |   `-DeclRefExpr 0x7fffd8377fa0 <col:23> 'stbtt_int32':'int' lvalue Var 0x7fffd8377de0 'n' 'stbtt_int32':'int'
|   | |   | | |-ReturnStmt 0x7fffd8378060 <line:1326:13, col:21>
|   | |   | | | `-UnaryOperator 0x7fffd8378040 <col:20, col:21> 'int' prefix '-'
|   | |   | | |   `-IntegerLiteral 0x7fffd8378020 <col:21> 'int' 1
|   | |   | | `-<<<NULL>>>
|   | |   | `-ReturnStmt 0x7fffd8378270 <line:1327:10, col:51>
|   | |   |   `-ImplicitCastExpr 0x7fffd8378258 <col:17, col:51> 'int' <IntegralCast>
|   | |   |     `-CallExpr 0x7fffd8378228 <col:17, col:51> 'stbtt_uint32':'unsigned int'
|   | |   |       |-ImplicitCastExpr 0x7fffd8378210 <col:17> 'stbtt_uint32 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | |   |       | `-DeclRefExpr 0x7fffd83780b0 <col:17> 'stbtt_uint32 (stbtt_uint8 *)' Function 0x7fffd83712a0 'ttULONG' 'stbtt_uint32 (stbtt_uint8 *)'
|   | |   |       `-BinaryOperator 0x7fffd83781e8 <col:25, col:50> 'unsigned char *' '+'
|   | |   |         |-BinaryOperator 0x7fffd8378138 <col:25, col:41> 'unsigned char *' '+'
|   | |   |         | |-ImplicitCastExpr 0x7fffd8378120 <col:25> 'unsigned char *' <LValueToRValue>
|   | |   |         | | `-DeclRefExpr 0x7fffd83780d8 <col:25> 'unsigned char *' lvalue ParmVar 0x7fffd8376e58 'font_collection' 'unsigned char *'
|   | |   |         | `-IntegerLiteral 0x7fffd8378100 <col:41> 'int' 12
|   | |   |         `-BinaryOperator 0x7fffd83781c0 <col:44, col:50> 'int' '*'
|   | |   |           |-ImplicitCastExpr 0x7fffd83781a8 <col:44> 'int' <LValueToRValue>
|   | |   |           | `-DeclRefExpr 0x7fffd8378160 <col:44> 'int' lvalue ParmVar 0x7fffd8376ed0 'index' 'int'
|   | |   |           `-IntegerLiteral 0x7fffd8378188 <col:50> 'int' 4
|   | |   `-<<<NULL>>>
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x7fffd8378378 <line:1330:4, col:12>
|     `-UnaryOperator 0x7fffd8378358 <col:11, col:12> 'int' prefix '-'
|       `-IntegerLiteral 0x7fffd8378338 <col:12> 'int' 1
|-FunctionDecl 0x7fffd8378460 <line:1333:1, line:1347:1> line:1333:12 used stbtt_GetNumberOfFonts_internal 'int (unsigned char *)' static
| |-ParmVarDecl 0x7fffd83783d0 <col:44, col:59> col:59 used font_collection 'unsigned char *'
| `-CompoundStmt 0x7fffd837a340 <line:1334:1, line:1347:1>
|   |-IfStmt 0x7fffd83785f0 <line:1336:4, line:1337:14>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-CallExpr 0x7fffd8378570 <line:1336:8, col:37> 'int'
|   | | |-ImplicitCastExpr 0x7fffd8378558 <col:8> 'int (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x7fffd8378508 <col:8> 'int (stbtt_uint8 *)' Function 0x7fffd8371f78 'stbtt__isfont' 'int (stbtt_uint8 *)'
|   | | `-ImplicitCastExpr 0x7fffd83785a0 <col:22> 'unsigned char *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8378530 <col:22> 'unsigned char *' lvalue ParmVar 0x7fffd83783d0 'font_collection' 'unsigned char *'
|   | |-ReturnStmt 0x7fffd83785d8 <line:1337:7, col:14>
|   | | `-IntegerLiteral 0x7fffd83785b8 <col:14> 'int' 1
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd837a2d0 <line:1340:4, line:1345:4>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ParenExpr 0x7fffd8378e20 <line:1286:35, col:104> 'int'
|   | | `-BinaryOperator 0x7fffd8378df8 <col:36, col:103> 'int' '&&'
|   | |   |-BinaryOperator 0x7fffd8378bf0 <col:36, col:85> 'int' '&&'
|   | |   | |-BinaryOperator 0x7fffd83789e8 <col:36, col:67> 'int' '&&'
|   | |   | | |-BinaryOperator 0x7fffd83787e0 <col:36, col:49> 'int' '=='
|   | |   | | | |-ImplicitCastExpr 0x7fffd8378798 <col:36, col:41> 'int' <IntegralCast>
|   | |   | | | | `-ImplicitCastExpr 0x7fffd8378780 <col:36, col:41> 'unsigned char' <LValueToRValue>
|   | |   | | | |   `-ArraySubscriptExpr 0x7fffd83786a8 <col:36, col:41> 'unsigned char' lvalue
|   | |   | | | |     |-ImplicitCastExpr 0x7fffd8378690 <col:36, col:38> 'unsigned char *' <LValueToRValue>
|   | |   | | | |     | `-ParenExpr 0x7fffd8378650 <col:36, col:38> 'unsigned char *' lvalue
|   | |   | | | |     |   `-DeclRefExpr 0x7fffd8378628 <line:1340:18> 'unsigned char *' lvalue ParmVar 0x7fffd83783d0 'font_collection' 'unsigned char *'
|   | |   | | | |     `-IntegerLiteral 0x7fffd8378670 <line:1286:40> 'int' 0
|   | |   | | | `-ImplicitCastExpr 0x7fffd83787c8 <col:46, col:49> 'int' <IntegralCast>
|   | |   | | |   `-ImplicitCastExpr 0x7fffd83787b0 <col:46, col:49> 'char' <LValueToRValue>
|   | |   | | |     `-ParenExpr 0x7fffd8378760 <col:46, col:49> 'char' lvalue
|   | |   | | |       `-ArraySubscriptExpr 0x7fffd8378738 <line:1340:35, line:1287:54> 'char' lvalue
|   | |   | | |         |-ImplicitCastExpr 0x7fffd8378720 <line:1340:35> 'char *' <ArrayToPointerDecay>
|   | |   | | |         | `-StringLiteral 0x7fffd83786d0 <col:35> 'char [5]' lvalue "ttcf"
|   | |   | | |         `-IntegerLiteral 0x7fffd8378700 <line:1287:53> 'int' 0
|   | |   | | `-BinaryOperator 0x7fffd83789c0 <line:1286:54, col:67> 'int' '=='
|   | |   | |   |-ImplicitCastExpr 0x7fffd8378978 <col:54, col:59> 'int' <IntegralCast>
|   | |   | |   | `-ImplicitCastExpr 0x7fffd8378960 <col:54, col:59> 'unsigned char' <LValueToRValue>
|   | |   | |   |   `-ArraySubscriptExpr 0x7fffd8378888 <col:54, col:59> 'unsigned char' lvalue
|   | |   | |   |     |-ImplicitCastExpr 0x7fffd8378870 <col:54, col:56> 'unsigned char *' <LValueToRValue>
|   | |   | |   |     | `-ParenExpr 0x7fffd8378830 <col:54, col:56> 'unsigned char *' lvalue
|   | |   | |   |     |   `-DeclRefExpr 0x7fffd8378808 <line:1340:18> 'unsigned char *' lvalue ParmVar 0x7fffd83783d0 'font_collection' 'unsigned char *'
|   | |   | |   |     `-IntegerLiteral 0x7fffd8378850 <line:1286:58> 'int' 1
|   | |   | |   `-ImplicitCastExpr 0x7fffd83789a8 <col:64, col:67> 'int' <IntegralCast>
|   | |   | |     `-ImplicitCastExpr 0x7fffd8378990 <col:64, col:67> 'char' <LValueToRValue>
|   | |   | |       `-ParenExpr 0x7fffd8378940 <col:64, col:67> 'char' lvalue
|   | |   | |         `-ArraySubscriptExpr 0x7fffd8378918 <line:1340:35, line:1287:61> 'char' lvalue
|   | |   | |           |-ImplicitCastExpr 0x7fffd8378900 <line:1340:35> 'char *' <ArrayToPointerDecay>
|   | |   | |           | `-StringLiteral 0x7fffd83788b0 <col:35> 'char [5]' lvalue "ttcf"
|   | |   | |           `-IntegerLiteral 0x7fffd83788e0 <line:1287:60> 'int' 1
|   | |   | `-BinaryOperator 0x7fffd8378bc8 <line:1286:72, col:85> 'int' '=='
|   | |   |   |-ImplicitCastExpr 0x7fffd8378b80 <col:72, col:77> 'int' <IntegralCast>
|   | |   |   | `-ImplicitCastExpr 0x7fffd8378b68 <col:72, col:77> 'unsigned char' <LValueToRValue>
|   | |   |   |   `-ArraySubscriptExpr 0x7fffd8378a90 <col:72, col:77> 'unsigned char' lvalue
|   | |   |   |     |-ImplicitCastExpr 0x7fffd8378a78 <col:72, col:74> 'unsigned char *' <LValueToRValue>
|   | |   |   |     | `-ParenExpr 0x7fffd8378a38 <col:72, col:74> 'unsigned char *' lvalue
|   | |   |   |     |   `-DeclRefExpr 0x7fffd8378a10 <line:1340:18> 'unsigned char *' lvalue ParmVar 0x7fffd83783d0 'font_collection' 'unsigned char *'
|   | |   |   |     `-IntegerLiteral 0x7fffd8378a58 <line:1286:76> 'int' 2
|   | |   |   `-ImplicitCastExpr 0x7fffd8378bb0 <col:82, col:85> 'int' <IntegralCast>
|   | |   |     `-ImplicitCastExpr 0x7fffd8378b98 <col:82, col:85> 'char' <LValueToRValue>
|   | |   |       `-ParenExpr 0x7fffd8378b48 <col:82, col:85> 'char' lvalue
|   | |   |         `-ArraySubscriptExpr 0x7fffd8378b20 <line:1340:35, line:1287:68> 'char' lvalue
|   | |   |           |-ImplicitCastExpr 0x7fffd8378b08 <line:1340:35> 'char *' <ArrayToPointerDecay>
|   | |   |           | `-StringLiteral 0x7fffd8378ab8 <col:35> 'char [5]' lvalue "ttcf"
|   | |   |           `-IntegerLiteral 0x7fffd8378ae8 <line:1287:67> 'int' 2
|   | |   `-BinaryOperator 0x7fffd8378dd0 <line:1286:90, col:103> 'int' '=='
|   | |     |-ImplicitCastExpr 0x7fffd8378d88 <col:90, col:95> 'int' <IntegralCast>
|   | |     | `-ImplicitCastExpr 0x7fffd8378d70 <col:90, col:95> 'unsigned char' <LValueToRValue>
|   | |     |   `-ArraySubscriptExpr 0x7fffd8378c98 <col:90, col:95> 'unsigned char' lvalue
|   | |     |     |-ImplicitCastExpr 0x7fffd8378c80 <col:90, col:92> 'unsigned char *' <LValueToRValue>
|   | |     |     | `-ParenExpr 0x7fffd8378c40 <col:90, col:92> 'unsigned char *' lvalue
|   | |     |     |   `-DeclRefExpr 0x7fffd8378c18 <line:1340:18> 'unsigned char *' lvalue ParmVar 0x7fffd83783d0 'font_collection' 'unsigned char *'
|   | |     |     `-IntegerLiteral 0x7fffd8378c60 <line:1286:94> 'int' 3
|   | |     `-ImplicitCastExpr 0x7fffd8378db8 <col:100, col:103> 'int' <IntegralCast>
|   | |       `-ImplicitCastExpr 0x7fffd8378da0 <col:100, col:103> 'char' <LValueToRValue>
|   | |         `-ParenExpr 0x7fffd8378d50 <col:100, col:103> 'char' lvalue
|   | |           `-ArraySubscriptExpr 0x7fffd8378d28 <line:1340:35, line:1287:75> 'char' lvalue
|   | |             |-ImplicitCastExpr 0x7fffd8378d10 <line:1340:35> 'char *' <ArrayToPointerDecay>
|   | |             | `-StringLiteral 0x7fffd8378cc0 <col:35> 'char [5]' lvalue "ttcf"
|   | |             `-IntegerLiteral 0x7fffd8378cf0 <line:1287:74> 'int' 3
|   | |-CompoundStmt 0x7fffd837a2b8 <line:1340:44, line:1345:4>
|   | | `-IfStmt 0x7fffd837a280 <line:1342:7, line:1344:7>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-BinaryOperator 0x7fffd83790f0 <line:1342:11, col:85> 'int' '||'
|   | |   | |-BinaryOperator 0x7fffd8378f70 <col:11, col:41> 'int' '=='
|   | |   | | |-CallExpr 0x7fffd8378f08 <col:11, col:36> 'stbtt_uint32':'unsigned int'
|   | |   | | | |-ImplicitCastExpr 0x7fffd8378ef0 <col:11> 'stbtt_uint32 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | |   | | | | `-DeclRefExpr 0x7fffd8378e40 <col:11> 'stbtt_uint32 (stbtt_uint8 *)' Function 0x7fffd83712a0 'ttULONG' 'stbtt_uint32 (stbtt_uint8 *)'
|   | |   | | | `-BinaryOperator 0x7fffd8378ec8 <col:19, col:35> 'unsigned char *' '+'
|   | |   | | |   |-ImplicitCastExpr 0x7fffd8378eb0 <col:19> 'unsigned char *' <LValueToRValue>
|   | |   | | |   | `-DeclRefExpr 0x7fffd8378e68 <col:19> 'unsigned char *' lvalue ParmVar 0x7fffd83783d0 'font_collection' 'unsigned char *'
|   | |   | | |   `-IntegerLiteral 0x7fffd8378e90 <col:35> 'int' 4
|   | |   | | `-ImplicitCastExpr 0x7fffd8378f58 <col:41> 'unsigned int' <IntegralCast>
|   | |   | |   `-IntegerLiteral 0x7fffd8378f38 <col:41> 'int' 65536
|   | |   | `-BinaryOperator 0x7fffd83790c8 <col:55, col:85> 'int' '=='
|   | |   |   |-CallExpr 0x7fffd8379060 <col:55, col:80> 'stbtt_uint32':'unsigned int'
|   | |   |   | |-ImplicitCastExpr 0x7fffd8379048 <col:55> 'stbtt_uint32 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | |   |   | | `-DeclRefExpr 0x7fffd8378f98 <col:55> 'stbtt_uint32 (stbtt_uint8 *)' Function 0x7fffd83712a0 'ttULONG' 'stbtt_uint32 (stbtt_uint8 *)'
|   | |   |   | `-BinaryOperator 0x7fffd8379020 <col:63, col:79> 'unsigned char *' '+'
|   | |   |   |   |-ImplicitCastExpr 0x7fffd8379008 <col:63> 'unsigned char *' <LValueToRValue>
|   | |   |   |   | `-DeclRefExpr 0x7fffd8378fc0 <col:63> 'unsigned char *' lvalue ParmVar 0x7fffd83783d0 'font_collection' 'unsigned char *'
|   | |   |   |   `-IntegerLiteral 0x7fffd8378fe8 <col:79> 'int' 4
|   | |   |   `-ImplicitCastExpr 0x7fffd83790b0 <col:85> 'unsigned int' <IntegralCast>
|   | |   |     `-IntegerLiteral 0x7fffd8379090 <col:85> 'int' 131072
|   | |   |-CompoundStmt 0x7fffd837a268 <col:97, line:1344:7>
|   | |   | `-ReturnStmt 0x7fffd837a250 <line:1343:10, col:41>
|   | |   |   `-CallExpr 0x7fffd837a220 <col:17, col:41> 'stbtt_int32':'int'
|   | |   |     |-ImplicitCastExpr 0x7fffd837a208 <col:17> 'stbtt_int32 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | |   |     | `-DeclRefExpr 0x7fffd8379118 <col:17> 'stbtt_int32 (stbtt_uint8 *)' Function 0x7fffd8371930 'ttLONG' 'stbtt_int32 (stbtt_uint8 *)'
|   | |   |     `-BinaryOperator 0x7fffd837a1e0 <col:24, col:40> 'unsigned char *' '+'
|   | |   |       |-ImplicitCastExpr 0x7fffd8379188 <col:24> 'unsigned char *' <LValueToRValue>
|   | |   |       | `-DeclRefExpr 0x7fffd8379140 <col:24> 'unsigned char *' lvalue ParmVar 0x7fffd83783d0 'font_collection' 'unsigned char *'
|   | |   |       `-IntegerLiteral 0x7fffd8379168 <col:40> 'int' 8
|   | |   `-<<<NULL>>>
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x7fffd837a328 <line:1346:4, col:11>
|     `-IntegerLiteral 0x7fffd837a308 <col:11> 'int' 0
|-FunctionDecl 0x7fffd837a500 <line:1349:1, line:1360:1> line:1349:19 used stbtt__get_subrs 'stbtt__buf (stbtt__buf, stbtt__buf)' static
| |-ParmVarDecl 0x7fffd837a378 <col:36, col:47> col:47 used cff 'stbtt__buf':'stbtt__buf'
| |-ParmVarDecl 0x7fffd837a3e8 <col:52, col:63> col:63 used fontdict 'stbtt__buf':'stbtt__buf'
| `-CompoundStmt 0x7fffd837b6e8 <line:1350:1, line:1360:1>
|   |-DeclStmt 0x7fffd837a860 <line:1351:4, col:56>
|   | |-VarDecl 0x7fffd837a5c0 <col:4, col:28> col:17 used subrsoff 'stbtt_uint32':'unsigned int' cinit
|   | | `-ImplicitCastExpr 0x7fffd837a640 <col:28> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x7fffd837a620 <col:28> 'int' 0
|   | `-VarDecl 0x7fffd837a6d8 <col:4, col:55> col:31 used private_loc 'stbtt_uint32 [2]' cinit
|   |   `-InitListExpr 0x7fffd837a7c8 <col:48, col:55> 'stbtt_uint32 [2]'
|   |     |-ImplicitCastExpr 0x7fffd837a818 <col:50> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x7fffd837a738 <col:50> 'int' 0
|   |     `-ImplicitCastExpr 0x7fffd837a830 <col:53> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |       `-IntegerLiteral 0x7fffd837a758 <col:53> 'int' 0
|   |-DeclStmt 0x7fffd837a8e8 <line:1352:4, col:20>
|   | `-VarDecl 0x7fffd837a888 <col:4, col:15> col:15 used pdict 'stbtt__buf':'stbtt__buf'
|   |-CallExpr 0x7fffd837aa50 <line:1353:4, col:54> 'void'
|   | |-ImplicitCastExpr 0x7fffd837aa38 <col:4> 'void (*)(stbtt__buf *, int, int, stbtt_uint32 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fffd837a900 <col:4> 'void (stbtt__buf *, int, int, stbtt_uint32 *)' Function 0x7fffd83690c0 'stbtt__dict_get_ints' 'void (stbtt__buf *, int, int, stbtt_uint32 *)'
|   | |-UnaryOperator 0x7fffd837a950 <col:25, col:26> 'stbtt__buf *' prefix '&'
|   | | `-DeclRefExpr 0x7fffd837a928 <col:26> 'stbtt__buf':'stbtt__buf' lvalue ParmVar 0x7fffd837a3e8 'fontdict' 'stbtt__buf':'stbtt__buf'
|   | |-IntegerLiteral 0x7fffd837a970 <col:36> 'int' 18
|   | |-IntegerLiteral 0x7fffd837a990 <col:40> 'int' 2
|   | `-ImplicitCastExpr 0x7fffd837aa98 <col:43> 'stbtt_uint32 *' <ArrayToPointerDecay>
|   |   `-DeclRefExpr 0x7fffd837a9b0 <col:43> 'stbtt_uint32 [2]' lvalue Var 0x7fffd837a6d8 'private_loc' 'stbtt_uint32 [2]'
|   |-IfStmt 0x7fffd837adb8 <line:1354:4, col:73>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd837ac30 <col:8, col:41> 'int' '||'
|   | | |-UnaryOperator 0x7fffd837ab50 <col:8, col:22> 'int' prefix '!'
|   | | | `-ImplicitCastExpr 0x7fffd837ab38 <col:9, col:22> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   | | |   `-ArraySubscriptExpr 0x7fffd837ab10 <col:9, col:22> 'stbtt_uint32':'unsigned int' lvalue
|   | | |     |-ImplicitCastExpr 0x7fffd837aaf8 <col:9> 'stbtt_uint32 *' <ArrayToPointerDecay>
|   | | |     | `-DeclRefExpr 0x7fffd837aab0 <col:9> 'stbtt_uint32 [2]' lvalue Var 0x7fffd837a6d8 'private_loc' 'stbtt_uint32 [2]'
|   | | |     `-IntegerLiteral 0x7fffd837aad8 <col:21> 'int' 1
|   | | `-UnaryOperator 0x7fffd837ac10 <col:27, col:41> 'int' prefix '!'
|   | |   `-ImplicitCastExpr 0x7fffd837abf8 <col:28, col:41> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   | |     `-ArraySubscriptExpr 0x7fffd837abd0 <col:28, col:41> 'stbtt_uint32':'unsigned int' lvalue
|   | |       |-ImplicitCastExpr 0x7fffd837abb8 <col:28> 'stbtt_uint32 *' <ArrayToPointerDecay>
|   | |       | `-DeclRefExpr 0x7fffd837ab70 <col:28> 'stbtt_uint32 [2]' lvalue Var 0x7fffd837a6d8 'private_loc' 'stbtt_uint32 [2]'
|   | |       `-IntegerLiteral 0x7fffd837ab98 <col:40> 'int' 0
|   | |-ReturnStmt 0x7fffd837ada0 <col:44, col:73>
|   | | `-CallExpr 0x7fffd837ad38 <col:51, col:73> 'stbtt__buf':'stbtt__buf'
|   | |   |-ImplicitCastExpr 0x7fffd837ad20 <col:51> 'stbtt__buf (*)(const void *, size_t)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x7fffd837ac58 <col:51> 'stbtt__buf (const void *, size_t)' Function 0x7fffd8362750 'stbtt__new_buf' 'stbtt__buf (const void *, size_t)'
|   | |   |-ImplicitCastExpr 0x7fffd837ad70 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'const void *' <NullToPointer>
|   | |   | `-ParenExpr 0x7fffd837ace0 <col:16, col:25> 'void *'
|   | |   |   `-CStyleCastExpr 0x7fffd837acb8 <col:17, col:24> 'void *' <NullToPointer>
|   | |   |     `-IntegerLiteral 0x7fffd837ac80 <col:24> 'int' 0
|   | |   `-ImplicitCastExpr 0x7fffd837ad88 <././stb/stb_truetype.h:1354:72> 'size_t':'unsigned long' <IntegralCast>
|   | |     `-IntegerLiteral 0x7fffd837ad00 <col:72> 'int' 0
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x7fffd837b068 <line:1355:4, col:65> 'stbtt__buf':'stbtt__buf' '='
|   | |-DeclRefExpr 0x7fffd837adf0 <col:4> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd837a888 'pdict' 'stbtt__buf':'stbtt__buf'
|   | `-CallExpr 0x7fffd837afb0 <col:12, col:65> 'stbtt__buf':'stbtt__buf'
|   |   |-ImplicitCastExpr 0x7fffd837af98 <col:12> 'stbtt__buf (*)(const stbtt__buf *, int, int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x7fffd837ae18 <col:12> 'stbtt__buf (const stbtt__buf *, int, int)' Function 0x7fffd83634f0 'stbtt__buf_range' 'stbtt__buf (const stbtt__buf *, int, int)'
|   |   |-ImplicitCastExpr 0x7fffd837aff0 <col:29, col:30> 'const stbtt__buf *' <BitCast>
|   |   | `-UnaryOperator 0x7fffd837ae68 <col:29, col:30> 'stbtt__buf *' prefix '&'
|   |   |   `-DeclRefExpr 0x7fffd837ae40 <col:30> 'stbtt__buf':'stbtt__buf' lvalue ParmVar 0x7fffd837a378 'cff' 'stbtt__buf':'stbtt__buf'
|   |   |-ImplicitCastExpr 0x7fffd837b020 <col:35, col:48> 'int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x7fffd837b008 <col:35, col:48> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x7fffd837aee8 <col:35, col:48> 'stbtt_uint32':'unsigned int' lvalue
|   |   |     |-ImplicitCastExpr 0x7fffd837aed0 <col:35> 'stbtt_uint32 *' <ArrayToPointerDecay>
|   |   |     | `-DeclRefExpr 0x7fffd837ae88 <col:35> 'stbtt_uint32 [2]' lvalue Var 0x7fffd837a6d8 'private_loc' 'stbtt_uint32 [2]'
|   |   |     `-IntegerLiteral 0x7fffd837aeb0 <col:47> 'int' 1
|   |   `-ImplicitCastExpr 0x7fffd837b050 <col:51, col:64> 'int' <IntegralCast>
|   |     `-ImplicitCastExpr 0x7fffd837b038 <col:51, col:64> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       `-ArraySubscriptExpr 0x7fffd837af70 <col:51, col:64> 'stbtt_uint32':'unsigned int' lvalue
|   |         |-ImplicitCastExpr 0x7fffd837af58 <col:51> 'stbtt_uint32 *' <ArrayToPointerDecay>
|   |         | `-DeclRefExpr 0x7fffd837af10 <col:51> 'stbtt_uint32 [2]' lvalue Var 0x7fffd837a6d8 'private_loc' 'stbtt_uint32 [2]'
|   |         `-IntegerLiteral 0x7fffd837af38 <col:63> 'int' 0
|   |-CallExpr 0x7fffd837b1a0 <line:1356:4, col:49> 'void'
|   | |-ImplicitCastExpr 0x7fffd837b188 <col:4> 'void (*)(stbtt__buf *, int, int, stbtt_uint32 *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fffd837b090 <col:4> 'void (stbtt__buf *, int, int, stbtt_uint32 *)' Function 0x7fffd83690c0 'stbtt__dict_get_ints' 'void (stbtt__buf *, int, int, stbtt_uint32 *)'
|   | |-UnaryOperator 0x7fffd837b0e0 <col:25, col:26> 'stbtt__buf *' prefix '&'
|   | | `-DeclRefExpr 0x7fffd837b0b8 <col:26> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd837a888 'pdict' 'stbtt__buf':'stbtt__buf'
|   | |-IntegerLiteral 0x7fffd837b100 <col:33> 'int' 19
|   | |-IntegerLiteral 0x7fffd837b120 <col:37> 'int' 1
|   | `-UnaryOperator 0x7fffd837b168 <col:40, col:41> 'stbtt_uint32 *' prefix '&'
|   |   `-DeclRefExpr 0x7fffd837b140 <col:41> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837a5c0 'subrsoff' 'stbtt_uint32':'unsigned int'
|   |-IfStmt 0x7fffd837b3a8 <line:1357:4, col:48>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-UnaryOperator 0x7fffd837b228 <col:8, col:9> 'int' prefix '!'
|   | | `-ImplicitCastExpr 0x7fffd837b210 <col:9> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd837b1e8 <col:9> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837a5c0 'subrsoff' 'stbtt_uint32':'unsigned int'
|   | |-ReturnStmt 0x7fffd837b390 <col:19, col:48>
|   | | `-CallExpr 0x7fffd837b328 <col:26, col:48> 'stbtt__buf':'stbtt__buf'
|   | |   |-ImplicitCastExpr 0x7fffd837b310 <col:26> 'stbtt__buf (*)(const void *, size_t)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x7fffd837b248 <col:26> 'stbtt__buf (const void *, size_t)' Function 0x7fffd8362750 'stbtt__new_buf' 'stbtt__buf (const void *, size_t)'
|   | |   |-ImplicitCastExpr 0x7fffd837b360 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'const void *' <NullToPointer>
|   | |   | `-ParenExpr 0x7fffd837b2d0 <col:16, col:25> 'void *'
|   | |   |   `-CStyleCastExpr 0x7fffd837b2a8 <col:17, col:24> 'void *' <NullToPointer>
|   | |   |     `-IntegerLiteral 0x7fffd837b270 <col:24> 'int' 0
|   | |   `-ImplicitCastExpr 0x7fffd837b378 <././stb/stb_truetype.h:1357:47> 'size_t':'unsigned long' <IntegralCast>
|   | |     `-IntegerLiteral 0x7fffd837b2f0 <col:47> 'int' 0
|   | `-<<<NULL>>>
|   |-CallExpr 0x7fffd837b570 <line:1358:4, col:49> 'void'
|   | |-ImplicitCastExpr 0x7fffd837b558 <col:4> 'void (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fffd837b3e0 <col:4> 'void (stbtt__buf *, int)' Function 0x7fffd8360530 'stbtt__buf_seek' 'void (stbtt__buf *, int)'
|   | |-UnaryOperator 0x7fffd837b430 <col:20, col:21> 'stbtt__buf *' prefix '&'
|   | | `-DeclRefExpr 0x7fffd837b408 <col:21> 'stbtt__buf':'stbtt__buf' lvalue ParmVar 0x7fffd837a378 'cff' 'stbtt__buf':'stbtt__buf'
|   | `-ImplicitCastExpr 0x7fffd837b5a8 <col:26, col:41> 'int' <IntegralCast>
|   |   `-BinaryOperator 0x7fffd837b530 <col:26, col:41> 'unsigned int' '+'
|   |     |-ImplicitCastExpr 0x7fffd837b500 <col:26, col:39> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     | `-ArraySubscriptExpr 0x7fffd837b4b0 <col:26, col:39> 'stbtt_uint32':'unsigned int' lvalue
|   |     |   |-ImplicitCastExpr 0x7fffd837b498 <col:26> 'stbtt_uint32 *' <ArrayToPointerDecay>
|   |     |   | `-DeclRefExpr 0x7fffd837b450 <col:26> 'stbtt_uint32 [2]' lvalue Var 0x7fffd837a6d8 'private_loc' 'stbtt_uint32 [2]'
|   |     |   `-IntegerLiteral 0x7fffd837b478 <col:38> 'int' 1
|   |     `-ImplicitCastExpr 0x7fffd837b518 <col:41> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd837b4d8 <col:41> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837a5c0 'subrsoff' 'stbtt_uint32':'unsigned int'
|   `-ReturnStmt 0x7fffd837b6d0 <line:1359:4, col:36>
|     `-CallExpr 0x7fffd837b6a0 <col:11, col:36> 'stbtt__buf':'stbtt__buf'
|       |-ImplicitCastExpr 0x7fffd837b688 <col:11> 'stbtt__buf (*)(stbtt__buf *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x7fffd837b5c0 <col:11> 'stbtt__buf (stbtt__buf *)' Function 0x7fffd8364030 'stbtt__cff_get_index' 'stbtt__buf (stbtt__buf *)'
|       `-UnaryOperator 0x7fffd837b610 <col:32, col:33> 'stbtt__buf *' prefix '&'
|         `-DeclRefExpr 0x7fffd837b5e8 <col:33> 'stbtt__buf':'stbtt__buf' lvalue ParmVar 0x7fffd837a378 'cff' 'stbtt__buf':'stbtt__buf'
|-FunctionDecl 0x7fffd837b858 <line:1363:1, line:1376:1> line:1363:12 used stbtt__get_svg 'int (stbtt_fontinfo *)' static
| |-ParmVarDecl 0x7fffd837b750 <col:27, col:43> col:43 used info 'stbtt_fontinfo *'
| `-CompoundStmt 0x7fffd837c340 <line:1364:1, line:1376:1>
|   |-DeclStmt 0x7fffd837b970 <line:1365:4, col:18>
|   | `-VarDecl 0x7fffd837b910 <col:4, col:17> col:17 used t 'stbtt_uint32':'unsigned int'
|   |-IfStmt 0x7fffd837c260 <line:1366:4, line:1374:4>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd837ba38 <line:1366:8, col:20> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd837ba20 <col:8, col:14> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x7fffd837b9c8 <col:8, col:14> 'int' lvalue ->svg 0x7fffd834cf98
|   | | |   `-ImplicitCastExpr 0x7fffd837b9b0 <col:8> 'stbtt_fontinfo *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x7fffd837b988 <col:8> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837b750 'info' 'stbtt_fontinfo *'
|   | | `-IntegerLiteral 0x7fffd837ba00 <col:20> 'int' 0
|   | |-CompoundStmt 0x7fffd837c240 <col:23, line:1374:4>
|   | | |-BinaryOperator 0x7fffd837bcf8 <line:1367:7, col:64> 'stbtt_uint32':'unsigned int' '='
|   | | | |-DeclRefExpr 0x7fffd837ba60 <col:7> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837b910 't' 'stbtt_uint32':'unsigned int'
|   | | | `-CallExpr 0x7fffd837bc40 <col:11, col:64> 'stbtt_uint32':'unsigned int'
|   | | |   |-ImplicitCastExpr 0x7fffd837bc28 <col:11> 'stbtt_uint32 (*)(stbtt_uint8 *, stbtt_uint32, const char *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x7fffd837ba88 <col:11> 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)' Function 0x7fffd83758f0 'stbtt__find_table' 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)'
|   | | |   |-ImplicitCastExpr 0x7fffd837bc80 <col:29, col:35> 'unsigned char *' <LValueToRValue>
|   | | |   | `-MemberExpr 0x7fffd837baf0 <col:29, col:35> 'unsigned char *' lvalue ->data 0x7fffd834cbd8
|   | | |   |   `-ImplicitCastExpr 0x7fffd837bad8 <col:29> 'stbtt_fontinfo *' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x7fffd837bab0 <col:29> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837b750 'info' 'stbtt_fontinfo *'
|   | | |   |-ImplicitCastExpr 0x7fffd837bcb0 <col:41, col:47> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   | | |   | `-ImplicitCastExpr 0x7fffd837bc98 <col:41, col:47> 'int' <LValueToRValue>
|   | | |   |   `-MemberExpr 0x7fffd837bb68 <col:41, col:47> 'int' lvalue ->fontstart 0x7fffd834cc38
|   | | |   |     `-ImplicitCastExpr 0x7fffd837bb50 <col:41> 'stbtt_fontinfo *' <LValueToRValue>
|   | | |   |       `-DeclRefExpr 0x7fffd837bb28 <col:41> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837b750 'info' 'stbtt_fontinfo *'
|   | | |   `-ImplicitCastExpr 0x7fffd837bce0 <col:58> 'const char *' <BitCast>
|   | | |     `-ImplicitCastExpr 0x7fffd837bcc8 <col:58> 'char *' <ArrayToPointerDecay>
|   | | |       `-StringLiteral 0x7fffd837bba0 <col:58> 'char [5]' lvalue "SVG "
|   | | `-IfStmt 0x7fffd837c208 <line:1368:7, line:1373:7>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-ImplicitCastExpr 0x7fffd837bd48 <line:1368:11> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd837bd20 <col:11> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837b910 't' 'stbtt_uint32':'unsigned int'
|   | |   |-CompoundStmt 0x7fffd837c0f8 <col:14, line:1371:7>
|   | |   | |-DeclStmt 0x7fffd837bf80 <line:1369:10, col:59>
|   | |   | | `-VarDecl 0x7fffd837bd70 <col:10, col:58> col:23 used offset 'stbtt_uint32':'unsigned int' cinit
|   | |   | |   `-CallExpr 0x7fffd837bf50 <col:32, col:58> 'stbtt_uint32':'unsigned int'
|   | |   | |     |-ImplicitCastExpr 0x7fffd837bf38 <col:32> 'stbtt_uint32 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | |   | |     | `-DeclRefExpr 0x7fffd837bdd0 <col:32> 'stbtt_uint32 (stbtt_uint8 *)' Function 0x7fffd83712a0 'ttULONG' 'stbtt_uint32 (stbtt_uint8 *)'
|   | |   | |     `-BinaryOperator 0x7fffd837bf10 <col:40, col:57> 'unsigned char *' '+'
|   | |   | |       |-BinaryOperator 0x7fffd837bec8 <col:40, col:53> 'unsigned char *' '+'
|   | |   | |       | |-ImplicitCastExpr 0x7fffd837be98 <col:40, col:46> 'unsigned char *' <LValueToRValue>
|   | |   | |       | | `-MemberExpr 0x7fffd837be38 <col:40, col:46> 'unsigned char *' lvalue ->data 0x7fffd834cbd8
|   | |   | |       | |   `-ImplicitCastExpr 0x7fffd837be20 <col:40> 'stbtt_fontinfo *' <LValueToRValue>
|   | |   | |       | |     `-DeclRefExpr 0x7fffd837bdf8 <col:40> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837b750 'info' 'stbtt_fontinfo *'
|   | |   | |       | `-ImplicitCastExpr 0x7fffd837beb0 <col:53> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   | |   | |       |   `-DeclRefExpr 0x7fffd837be70 <col:53> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837b910 't' 'stbtt_uint32':'unsigned int'
|   | |   | |       `-IntegerLiteral 0x7fffd837bef0 <col:57> 'int' 2
|   | |   | `-BinaryOperator 0x7fffd837c0d0 <line:1370:10, col:26> 'int' '='
|   | |   |   |-MemberExpr 0x7fffd837bfd8 <col:10, col:16> 'int' lvalue ->svg 0x7fffd834cf98
|   | |   |   | `-ImplicitCastExpr 0x7fffd837bfc0 <col:10> 'stbtt_fontinfo *' <LValueToRValue>
|   | |   |   |   `-DeclRefExpr 0x7fffd837bf98 <col:10> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837b750 'info' 'stbtt_fontinfo *'
|   | |   |   `-ImplicitCastExpr 0x7fffd837c0b8 <col:22, col:26> 'int' <IntegralCast>
|   | |   |     `-BinaryOperator 0x7fffd837c090 <col:22, col:26> 'unsigned int' '+'
|   | |   |       |-ImplicitCastExpr 0x7fffd837c060 <col:22> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   | |   |       | `-DeclRefExpr 0x7fffd837c010 <col:22> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837b910 't' 'stbtt_uint32':'unsigned int'
|   | |   |       `-ImplicitCastExpr 0x7fffd837c078 <col:26> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   | |   |         `-DeclRefExpr 0x7fffd837c038 <col:26> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837bd70 'offset' 'stbtt_uint32':'unsigned int'
|   | |   `-CompoundStmt 0x7fffd837c1f0 <line:1371:14, line:1373:7>
|   | |     `-BinaryOperator 0x7fffd837c1b0 <line:1372:10, col:22> 'int' '='
|   | |       |-MemberExpr 0x7fffd837c158 <col:10, col:16> 'int' lvalue ->svg 0x7fffd834cf98
|   | |       | `-ImplicitCastExpr 0x7fffd837c140 <col:10> 'stbtt_fontinfo *' <LValueToRValue>
|   | |       |   `-DeclRefExpr 0x7fffd837c118 <col:10> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837b750 'info' 'stbtt_fontinfo *'
|   | |       `-IntegerLiteral 0x7fffd837c190 <col:22> 'int' 0
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x7fffd837c328 <line:1375:4, col:17>
|     `-ImplicitCastExpr 0x7fffd837c310 <col:11, col:17> 'int' <LValueToRValue>
|       `-MemberExpr 0x7fffd837c2d8 <col:11, col:17> 'int' lvalue ->svg 0x7fffd834cf98
|         `-ImplicitCastExpr 0x7fffd837c2c0 <col:11> 'stbtt_fontinfo *' <LValueToRValue>
|           `-DeclRefExpr 0x7fffd837c298 <col:11> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837b750 'info' 'stbtt_fontinfo *'
|-FunctionDecl 0x7fffd837c5a8 <line:1378:1, line:1489:1> line:1378:12 used stbtt_InitFont_internal 'int (stbtt_fontinfo *, unsigned char *, int)' static
| |-ParmVarDecl 0x7fffd837c378 <col:36, col:52> col:52 used info 'stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd837c3f0 <col:58, col:73> col:73 used data 'unsigned char *'
| |-ParmVarDecl 0x7fffd837c468 <col:79, col:83> col:83 used fontstart 'int'
| `-CompoundStmt 0x7fffd8382800 <line:1379:1, line:1489:1>
|   |-DeclStmt 0x7fffd837c758 <line:1380:4, col:24>
|   | |-VarDecl 0x7fffd837c670 <col:4, col:17> col:17 used cmap 'stbtt_uint32':'unsigned int'
|   | `-VarDecl 0x7fffd837c6e0 <col:4, col:23> col:23 used t 'stbtt_uint32':'unsigned int'
|   |-DeclStmt 0x7fffd837c868 <line:1381:4, col:27>
|   | |-VarDecl 0x7fffd837c780 <col:4, col:16> col:16 used i 'stbtt_int32':'int'
|   | `-VarDecl 0x7fffd837c7f0 <col:4, col:18> col:18 used numTables 'stbtt_int32':'int'
|   |-BinaryOperator 0x7fffd837c938 <line:1383:4, col:17> 'unsigned char *' '='
|   | |-MemberExpr 0x7fffd837c8c0 <col:4, col:10> 'unsigned char *' lvalue ->data 0x7fffd834cbd8
|   | | `-ImplicitCastExpr 0x7fffd837c8a8 <col:4> 'stbtt_fontinfo *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd837c880 <col:4> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   | `-ImplicitCastExpr 0x7fffd837c920 <col:17> 'unsigned char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd837c8f8 <col:17> 'unsigned char *' lvalue ParmVar 0x7fffd837c3f0 'data' 'unsigned char *'
|   |-BinaryOperator 0x7fffd837ca18 <line:1384:4, col:22> 'int' '='
|   | |-MemberExpr 0x7fffd837c9a0 <col:4, col:10> 'int' lvalue ->fontstart 0x7fffd834cc38
|   | | `-ImplicitCastExpr 0x7fffd837c988 <col:4> 'stbtt_fontinfo *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd837c960 <col:4> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   | `-ImplicitCastExpr 0x7fffd837ca00 <col:22> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd837c9d8 <col:22> 'int' lvalue ParmVar 0x7fffd837c468 'fontstart' 'int'
|   |-BinaryOperator 0x7fffd837cc00 <line:1385:4, col:38> 'stbtt__buf':'stbtt__buf' '='
|   | |-MemberExpr 0x7fffd837ca80 <col:4, col:10> 'stbtt__buf':'stbtt__buf' lvalue ->cff 0x7fffd834d0d0
|   | | `-ImplicitCastExpr 0x7fffd837ca68 <col:4> 'stbtt_fontinfo *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd837ca40 <col:4> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   | `-CallExpr 0x7fffd837cb98 <col:16, col:38> 'stbtt__buf':'stbtt__buf'
|   |   |-ImplicitCastExpr 0x7fffd837cb80 <col:16> 'stbtt__buf (*)(const void *, size_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x7fffd837cab8 <col:16> 'stbtt__buf (const void *, size_t)' Function 0x7fffd8362750 'stbtt__new_buf' 'stbtt__buf (const void *, size_t)'
|   |   |-ImplicitCastExpr 0x7fffd837cbd0 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'const void *' <NullToPointer>
|   |   | `-ParenExpr 0x7fffd837cb40 <col:16, col:25> 'void *'
|   |   |   `-CStyleCastExpr 0x7fffd837cb18 <col:17, col:24> 'void *' <NullToPointer>
|   |   |     `-IntegerLiteral 0x7fffd837cae0 <col:24> 'int' 0
|   |   `-ImplicitCastExpr 0x7fffd837cbe8 <././stb/stb_truetype.h:1385:37> 'size_t':'unsigned long' <IntegralCast>
|   |     `-IntegerLiteral 0x7fffd837cb60 <col:37> 'int' 0
|   |-BinaryOperator 0x7fffd837cdc8 <line:1387:4, col:52> 'stbtt_uint32':'unsigned int' '='
|   | |-DeclRefExpr 0x7fffd837cc28 <col:4> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837c670 'cmap' 'stbtt_uint32':'unsigned int'
|   | `-CallExpr 0x7fffd837cd10 <col:11, col:52> 'stbtt_uint32':'unsigned int'
|   |   |-ImplicitCastExpr 0x7fffd837ccf8 <col:11> 'stbtt_uint32 (*)(stbtt_uint8 *, stbtt_uint32, const char *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x7fffd837cc50 <col:11> 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)' Function 0x7fffd83758f0 'stbtt__find_table' 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)'
|   |   |-ImplicitCastExpr 0x7fffd837cd50 <col:29> 'unsigned char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x7fffd837cc78 <col:29> 'unsigned char *' lvalue ParmVar 0x7fffd837c3f0 'data' 'unsigned char *'
|   |   |-ImplicitCastExpr 0x7fffd837cd80 <col:35> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x7fffd837cd68 <col:35> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x7fffd837cca0 <col:35> 'int' lvalue ParmVar 0x7fffd837c468 'fontstart' 'int'
|   |   `-ImplicitCastExpr 0x7fffd837cdb0 <col:46> 'const char *' <BitCast>
|   |     `-ImplicitCastExpr 0x7fffd837cd98 <col:46> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x7fffd837ccc8 <col:46> 'char [5]' lvalue "cmap"
|   |-BinaryOperator 0x7fffd837cff8 <line:1388:4, col:58> 'int' '='
|   | |-MemberExpr 0x7fffd837ce30 <col:4, col:10> 'int' lvalue ->loca 0x7fffd834ccf8
|   | | `-ImplicitCastExpr 0x7fffd837ce18 <col:4> 'stbtt_fontinfo *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd837cdf0 <col:4> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   | `-ImplicitCastExpr 0x7fffd837cfe0 <col:17, col:58> 'int' <IntegralCast>
|   |   `-CallExpr 0x7fffd837cf28 <col:17, col:58> 'stbtt_uint32':'unsigned int'
|   |     |-ImplicitCastExpr 0x7fffd837cf10 <col:17> 'stbtt_uint32 (*)(stbtt_uint8 *, stbtt_uint32, const char *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd837ce68 <col:17> 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)' Function 0x7fffd83758f0 'stbtt__find_table' 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)'
|   |     |-ImplicitCastExpr 0x7fffd837cf68 <col:35> 'unsigned char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd837ce90 <col:35> 'unsigned char *' lvalue ParmVar 0x7fffd837c3f0 'data' 'unsigned char *'
|   |     |-ImplicitCastExpr 0x7fffd837cf98 <col:41> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x7fffd837cf80 <col:41> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fffd837ceb8 <col:41> 'int' lvalue ParmVar 0x7fffd837c468 'fontstart' 'int'
|   |     `-ImplicitCastExpr 0x7fffd837cfc8 <col:52> 'const char *' <BitCast>
|   |       `-ImplicitCastExpr 0x7fffd837cfb0 <col:52> 'char *' <ArrayToPointerDecay>
|   |         `-StringLiteral 0x7fffd837cee0 <col:52> 'char [5]' lvalue "loca"
|   |-BinaryOperator 0x7fffd837d228 <line:1389:4, col:58> 'int' '='
|   | |-MemberExpr 0x7fffd837d060 <col:4, col:10> 'int' lvalue ->head 0x7fffd834cd58
|   | | `-ImplicitCastExpr 0x7fffd837d048 <col:4> 'stbtt_fontinfo *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd837d020 <col:4> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   | `-ImplicitCastExpr 0x7fffd837d210 <col:17, col:58> 'int' <IntegralCast>
|   |   `-CallExpr 0x7fffd837d158 <col:17, col:58> 'stbtt_uint32':'unsigned int'
|   |     |-ImplicitCastExpr 0x7fffd837d140 <col:17> 'stbtt_uint32 (*)(stbtt_uint8 *, stbtt_uint32, const char *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd837d098 <col:17> 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)' Function 0x7fffd83758f0 'stbtt__find_table' 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)'
|   |     |-ImplicitCastExpr 0x7fffd837d198 <col:35> 'unsigned char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd837d0c0 <col:35> 'unsigned char *' lvalue ParmVar 0x7fffd837c3f0 'data' 'unsigned char *'
|   |     |-ImplicitCastExpr 0x7fffd837d1c8 <col:41> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x7fffd837d1b0 <col:41> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fffd837d0e8 <col:41> 'int' lvalue ParmVar 0x7fffd837c468 'fontstart' 'int'
|   |     `-ImplicitCastExpr 0x7fffd837d1f8 <col:52> 'const char *' <BitCast>
|   |       `-ImplicitCastExpr 0x7fffd837d1e0 <col:52> 'char *' <ArrayToPointerDecay>
|   |         `-StringLiteral 0x7fffd837d110 <col:52> 'char [5]' lvalue "head"
|   |-BinaryOperator 0x7fffd837d458 <line:1390:4, col:58> 'int' '='
|   | |-MemberExpr 0x7fffd837d290 <col:4, col:10> 'int' lvalue ->glyf 0x7fffd834cdb8
|   | | `-ImplicitCastExpr 0x7fffd837d278 <col:4> 'stbtt_fontinfo *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd837d250 <col:4> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   | `-ImplicitCastExpr 0x7fffd837d440 <col:17, col:58> 'int' <IntegralCast>
|   |   `-CallExpr 0x7fffd837d388 <col:17, col:58> 'stbtt_uint32':'unsigned int'
|   |     |-ImplicitCastExpr 0x7fffd837d370 <col:17> 'stbtt_uint32 (*)(stbtt_uint8 *, stbtt_uint32, const char *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd837d2c8 <col:17> 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)' Function 0x7fffd83758f0 'stbtt__find_table' 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)'
|   |     |-ImplicitCastExpr 0x7fffd837d3c8 <col:35> 'unsigned char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd837d2f0 <col:35> 'unsigned char *' lvalue ParmVar 0x7fffd837c3f0 'data' 'unsigned char *'
|   |     |-ImplicitCastExpr 0x7fffd837d3f8 <col:41> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x7fffd837d3e0 <col:41> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fffd837d318 <col:41> 'int' lvalue ParmVar 0x7fffd837c468 'fontstart' 'int'
|   |     `-ImplicitCastExpr 0x7fffd837d428 <col:52> 'const char *' <BitCast>
|   |       `-ImplicitCastExpr 0x7fffd837d410 <col:52> 'char *' <ArrayToPointerDecay>
|   |         `-StringLiteral 0x7fffd837d340 <col:52> 'char [5]' lvalue "glyf"
|   |-BinaryOperator 0x7fffd837d688 <line:1391:4, col:58> 'int' '='
|   | |-MemberExpr 0x7fffd837d4c0 <col:4, col:10> 'int' lvalue ->hhea 0x7fffd834ce18
|   | | `-ImplicitCastExpr 0x7fffd837d4a8 <col:4> 'stbtt_fontinfo *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd837d480 <col:4> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   | `-ImplicitCastExpr 0x7fffd837d670 <col:17, col:58> 'int' <IntegralCast>
|   |   `-CallExpr 0x7fffd837d5b8 <col:17, col:58> 'stbtt_uint32':'unsigned int'
|   |     |-ImplicitCastExpr 0x7fffd837d5a0 <col:17> 'stbtt_uint32 (*)(stbtt_uint8 *, stbtt_uint32, const char *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd837d4f8 <col:17> 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)' Function 0x7fffd83758f0 'stbtt__find_table' 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)'
|   |     |-ImplicitCastExpr 0x7fffd837d5f8 <col:35> 'unsigned char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd837d520 <col:35> 'unsigned char *' lvalue ParmVar 0x7fffd837c3f0 'data' 'unsigned char *'
|   |     |-ImplicitCastExpr 0x7fffd837d628 <col:41> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x7fffd837d610 <col:41> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fffd837d548 <col:41> 'int' lvalue ParmVar 0x7fffd837c468 'fontstart' 'int'
|   |     `-ImplicitCastExpr 0x7fffd837d658 <col:52> 'const char *' <BitCast>
|   |       `-ImplicitCastExpr 0x7fffd837d640 <col:52> 'char *' <ArrayToPointerDecay>
|   |         `-StringLiteral 0x7fffd837d570 <col:52> 'char [5]' lvalue "hhea"
|   |-BinaryOperator 0x7fffd837d8b8 <line:1392:4, col:58> 'int' '='
|   | |-MemberExpr 0x7fffd837d6f0 <col:4, col:10> 'int' lvalue ->hmtx 0x7fffd834ce78
|   | | `-ImplicitCastExpr 0x7fffd837d6d8 <col:4> 'stbtt_fontinfo *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd837d6b0 <col:4> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   | `-ImplicitCastExpr 0x7fffd837d8a0 <col:17, col:58> 'int' <IntegralCast>
|   |   `-CallExpr 0x7fffd837d7e8 <col:17, col:58> 'stbtt_uint32':'unsigned int'
|   |     |-ImplicitCastExpr 0x7fffd837d7d0 <col:17> 'stbtt_uint32 (*)(stbtt_uint8 *, stbtt_uint32, const char *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd837d728 <col:17> 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)' Function 0x7fffd83758f0 'stbtt__find_table' 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)'
|   |     |-ImplicitCastExpr 0x7fffd837d828 <col:35> 'unsigned char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd837d750 <col:35> 'unsigned char *' lvalue ParmVar 0x7fffd837c3f0 'data' 'unsigned char *'
|   |     |-ImplicitCastExpr 0x7fffd837d858 <col:41> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x7fffd837d840 <col:41> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fffd837d778 <col:41> 'int' lvalue ParmVar 0x7fffd837c468 'fontstart' 'int'
|   |     `-ImplicitCastExpr 0x7fffd837d888 <col:52> 'const char *' <BitCast>
|   |       `-ImplicitCastExpr 0x7fffd837d870 <col:52> 'char *' <ArrayToPointerDecay>
|   |         `-StringLiteral 0x7fffd837d7a0 <col:52> 'char [5]' lvalue "hmtx"
|   |-BinaryOperator 0x7fffd837dae8 <line:1393:4, col:58> 'int' '='
|   | |-MemberExpr 0x7fffd837d920 <col:4, col:10> 'int' lvalue ->kern 0x7fffd834ced8
|   | | `-ImplicitCastExpr 0x7fffd837d908 <col:4> 'stbtt_fontinfo *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd837d8e0 <col:4> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   | `-ImplicitCastExpr 0x7fffd837dad0 <col:17, col:58> 'int' <IntegralCast>
|   |   `-CallExpr 0x7fffd837da18 <col:17, col:58> 'stbtt_uint32':'unsigned int'
|   |     |-ImplicitCastExpr 0x7fffd837da00 <col:17> 'stbtt_uint32 (*)(stbtt_uint8 *, stbtt_uint32, const char *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd837d958 <col:17> 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)' Function 0x7fffd83758f0 'stbtt__find_table' 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)'
|   |     |-ImplicitCastExpr 0x7fffd837da58 <col:35> 'unsigned char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd837d980 <col:35> 'unsigned char *' lvalue ParmVar 0x7fffd837c3f0 'data' 'unsigned char *'
|   |     |-ImplicitCastExpr 0x7fffd837da88 <col:41> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x7fffd837da70 <col:41> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fffd837d9a8 <col:41> 'int' lvalue ParmVar 0x7fffd837c468 'fontstart' 'int'
|   |     `-ImplicitCastExpr 0x7fffd837dab8 <col:52> 'const char *' <BitCast>
|   |       `-ImplicitCastExpr 0x7fffd837daa0 <col:52> 'char *' <ArrayToPointerDecay>
|   |         `-StringLiteral 0x7fffd837d9d0 <col:52> 'char [5]' lvalue "kern"
|   |-BinaryOperator 0x7fffd837dd18 <line:1394:4, col:58> 'int' '='
|   | |-MemberExpr 0x7fffd837db50 <col:4, col:10> 'int' lvalue ->gpos 0x7fffd834cf38
|   | | `-ImplicitCastExpr 0x7fffd837db38 <col:4> 'stbtt_fontinfo *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd837db10 <col:4> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   | `-ImplicitCastExpr 0x7fffd837dd00 <col:17, col:58> 'int' <IntegralCast>
|   |   `-CallExpr 0x7fffd837dc48 <col:17, col:58> 'stbtt_uint32':'unsigned int'
|   |     |-ImplicitCastExpr 0x7fffd837dc30 <col:17> 'stbtt_uint32 (*)(stbtt_uint8 *, stbtt_uint32, const char *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd837db88 <col:17> 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)' Function 0x7fffd83758f0 'stbtt__find_table' 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)'
|   |     |-ImplicitCastExpr 0x7fffd837dc88 <col:35> 'unsigned char *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd837dbb0 <col:35> 'unsigned char *' lvalue ParmVar 0x7fffd837c3f0 'data' 'unsigned char *'
|   |     |-ImplicitCastExpr 0x7fffd837dcb8 <col:41> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x7fffd837dca0 <col:41> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fffd837dbd8 <col:41> 'int' lvalue ParmVar 0x7fffd837c468 'fontstart' 'int'
|   |     `-ImplicitCastExpr 0x7fffd837dce8 <col:52> 'const char *' <BitCast>
|   |       `-ImplicitCastExpr 0x7fffd837dcd0 <col:52> 'char *' <ArrayToPointerDecay>
|   |         `-StringLiteral 0x7fffd837dc00 <col:52> 'char [5]' lvalue "GPOS"
|   |-IfStmt 0x7fffd837e060 <line:1396:4, line:1397:14>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd837e000 <line:1396:8, col:54> 'int' '||'
|   | | |-BinaryOperator 0x7fffd837df28 <col:8, col:39> 'int' '||'
|   | | | |-BinaryOperator 0x7fffd837de50 <col:8, col:24> 'int' '||'
|   | | | | |-UnaryOperator 0x7fffd837dd80 <col:8, col:9> 'int' prefix '!'
|   | | | | | `-ImplicitCastExpr 0x7fffd837dd68 <col:9> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   | | | | |   `-DeclRefExpr 0x7fffd837dd40 <col:9> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837c670 'cmap' 'stbtt_uint32':'unsigned int'
|   | | | | `-UnaryOperator 0x7fffd837de30 <col:17, col:24> 'int' prefix '!'
|   | | | |   `-ImplicitCastExpr 0x7fffd837de18 <col:18, col:24> 'int' <LValueToRValue>
|   | | | |     `-MemberExpr 0x7fffd837dde0 <col:18, col:24> 'int' lvalue ->head 0x7fffd834cd58
|   | | | |       `-ImplicitCastExpr 0x7fffd837ddc8 <col:18> 'stbtt_fontinfo *' <LValueToRValue>
|   | | | |         `-DeclRefExpr 0x7fffd837dda0 <col:18> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   | | | `-UnaryOperator 0x7fffd837df08 <col:32, col:39> 'int' prefix '!'
|   | | |   `-ImplicitCastExpr 0x7fffd837def0 <col:33, col:39> 'int' <LValueToRValue>
|   | | |     `-MemberExpr 0x7fffd837deb8 <col:33, col:39> 'int' lvalue ->hhea 0x7fffd834ce18
|   | | |       `-ImplicitCastExpr 0x7fffd837dea0 <col:33> 'stbtt_fontinfo *' <LValueToRValue>
|   | | |         `-DeclRefExpr 0x7fffd837de78 <col:33> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   | | `-UnaryOperator 0x7fffd837dfe0 <col:47, col:54> 'int' prefix '!'
|   | |   `-ImplicitCastExpr 0x7fffd837dfc8 <col:48, col:54> 'int' <LValueToRValue>
|   | |     `-MemberExpr 0x7fffd837df90 <col:48, col:54> 'int' lvalue ->hmtx 0x7fffd834ce78
|   | |       `-ImplicitCastExpr 0x7fffd837df78 <col:48> 'stbtt_fontinfo *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x7fffd837df50 <col:48> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   | |-ReturnStmt 0x7fffd837e048 <line:1397:7, col:14>
|   | | `-IntegerLiteral 0x7fffd837e028 <col:14> 'int' 0
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd8380db0 <line:1398:4, line:1449:4>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd837e110 <line:1398:8, col:14> 'int' <LValueToRValue>
|   | | `-MemberExpr 0x7fffd837e0d8 <col:8, col:14> 'int' lvalue ->glyf 0x7fffd834cdb8
|   | |   `-ImplicitCastExpr 0x7fffd837e0c0 <col:8> 'stbtt_fontinfo *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x7fffd837e098 <col:8> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   | |-CompoundStmt 0x7fffd837e270 <col:20, line:1401:4>
|   | | `-IfStmt 0x7fffd837e238 <line:1400:7, col:31>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-UnaryOperator 0x7fffd837e1b8 <col:11, col:18> 'int' prefix '!'
|   | |   | `-ImplicitCastExpr 0x7fffd837e1a0 <col:12, col:18> 'int' <LValueToRValue>
|   | |   |   `-MemberExpr 0x7fffd837e168 <col:12, col:18> 'int' lvalue ->loca 0x7fffd834ccf8
|   | |   |     `-ImplicitCastExpr 0x7fffd837e150 <col:12> 'stbtt_fontinfo *' <LValueToRValue>
|   | |   |       `-DeclRefExpr 0x7fffd837e128 <col:12> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   | |   |-ReturnStmt 0x7fffd837e220 <col:24, col:31>
|   | |   | `-IntegerLiteral 0x7fffd837e200 <col:31> 'int' 0
|   | |   `-<<<NULL>>>
|   | `-CompoundStmt 0x7fffd8380cd0 <line:1401:11, line:1449:4>
|   |   |-DeclStmt 0x7fffd837e3f8 <line:1403:7, col:40>
|   |   | |-VarDecl 0x7fffd837e298 <col:7, col:18> col:18 used b 'stbtt__buf':'stbtt__buf'
|   |   | |-VarDecl 0x7fffd837e308 <col:7, col:21> col:21 used topdict 'stbtt__buf':'stbtt__buf'
|   |   | `-VarDecl 0x7fffd837e378 <col:7, col:30> col:30 used topdictidx 'stbtt__buf':'stbtt__buf'
|   |   |-DeclStmt 0x7fffd837e6d8 <line:1404:7, col:80>
|   |   | |-VarDecl 0x7fffd837e420 <col:7, col:29> col:20 used cstype 'stbtt_uint32':'unsigned int' cinit
|   |   | | `-ImplicitCastExpr 0x7fffd837e4a0 <col:29> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x7fffd837e480 <col:29> 'int' 2
|   |   | |-VarDecl 0x7fffd837e4c8 <col:7, col:46> col:32 used charstrings 'stbtt_uint32':'unsigned int' cinit
|   |   | | `-ImplicitCastExpr 0x7fffd837e548 <col:46> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x7fffd837e528 <col:46> 'int' 0
|   |   | |-VarDecl 0x7fffd837e570 <col:7, col:62> col:49 used fdarrayoff 'stbtt_uint32':'unsigned int' cinit
|   |   | | `-ImplicitCastExpr 0x7fffd837e5f0 <col:62> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x7fffd837e5d0 <col:62> 'int' 0
|   |   | `-VarDecl 0x7fffd837e618 <col:7, col:79> col:65 used fdselectoff 'stbtt_uint32':'unsigned int' cinit
|   |   |   `-ImplicitCastExpr 0x7fffd837e698 <col:79> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |   |     `-IntegerLiteral 0x7fffd837e678 <col:79> 'int' 0
|   |   |-DeclStmt 0x7fffd837e760 <line:1405:7, col:23>
|   |   | `-VarDecl 0x7fffd837e700 <col:7, col:20> col:20 used cff 'stbtt_uint32':'unsigned int'
|   |   |-BinaryOperator 0x7fffd837e918 <line:1407:7, col:54> 'stbtt_uint32':'unsigned int' '='
|   |   | |-DeclRefExpr 0x7fffd837e778 <col:7> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837e700 'cff' 'stbtt_uint32':'unsigned int'
|   |   | `-CallExpr 0x7fffd837e860 <col:13, col:54> 'stbtt_uint32':'unsigned int'
|   |   |   |-ImplicitCastExpr 0x7fffd837e848 <col:13> 'stbtt_uint32 (*)(stbtt_uint8 *, stbtt_uint32, const char *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x7fffd837e7a0 <col:13> 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)' Function 0x7fffd83758f0 'stbtt__find_table' 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)'
|   |   |   |-ImplicitCastExpr 0x7fffd837e8a0 <col:31> 'unsigned char *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x7fffd837e7c8 <col:31> 'unsigned char *' lvalue ParmVar 0x7fffd837c3f0 'data' 'unsigned char *'
|   |   |   |-ImplicitCastExpr 0x7fffd837e8d0 <col:37> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |   |   | `-ImplicitCastExpr 0x7fffd837e8b8 <col:37> 'int' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x7fffd837e7f0 <col:37> 'int' lvalue ParmVar 0x7fffd837c468 'fontstart' 'int'
|   |   |   `-ImplicitCastExpr 0x7fffd837e900 <col:48> 'const char *' <BitCast>
|   |   |     `-ImplicitCastExpr 0x7fffd837e8e8 <col:48> 'char *' <ArrayToPointerDecay>
|   |   |       `-StringLiteral 0x7fffd837e818 <col:48> 'char [5]' lvalue "CFF "
|   |   |-IfStmt 0x7fffd837e9d8 <line:1408:7, col:24>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-UnaryOperator 0x7fffd837e980 <col:11, col:12> 'int' prefix '!'
|   |   | | `-ImplicitCastExpr 0x7fffd837e968 <col:12> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x7fffd837e940 <col:12> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837e700 'cff' 'stbtt_uint32':'unsigned int'
|   |   | |-ReturnStmt 0x7fffd837e9c0 <col:17, col:24>
|   |   | | `-IntegerLiteral 0x7fffd837e9a0 <col:24> 'int' 0
|   |   | `-<<<NULL>>>
|   |   |-BinaryOperator 0x7fffd837ebd0 <line:1410:7, col:47> 'stbtt__buf':'stbtt__buf' '='
|   |   | |-MemberExpr 0x7fffd837ea50 <col:7, col:13> 'stbtt__buf':'stbtt__buf' lvalue ->fontdicts 0x7fffd834d268
|   |   | | `-ImplicitCastExpr 0x7fffd837ea38 <col:7> 'stbtt_fontinfo *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x7fffd837ea10 <col:7> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   |   | `-CallExpr 0x7fffd837eb68 <col:25, col:47> 'stbtt__buf':'stbtt__buf'
|   |   |   |-ImplicitCastExpr 0x7fffd837eb50 <col:25> 'stbtt__buf (*)(const void *, size_t)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x7fffd837ea88 <col:25> 'stbtt__buf (const void *, size_t)' Function 0x7fffd8362750 'stbtt__new_buf' 'stbtt__buf (const void *, size_t)'
|   |   |   |-ImplicitCastExpr 0x7fffd837eba0 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'const void *' <NullToPointer>
|   |   |   | `-ParenExpr 0x7fffd837eb10 <col:16, col:25> 'void *'
|   |   |   |   `-CStyleCastExpr 0x7fffd837eae8 <col:17, col:24> 'void *' <NullToPointer>
|   |   |   |     `-IntegerLiteral 0x7fffd837eab0 <col:24> 'int' 0
|   |   |   `-ImplicitCastExpr 0x7fffd837ebb8 <././stb/stb_truetype.h:1410:46> 'size_t':'unsigned long' <IntegralCast>
|   |   |     `-IntegerLiteral 0x7fffd837eb30 <col:46> 'int' 0
|   |   |-BinaryOperator 0x7fffd837edb8 <line:1411:7, col:46> 'stbtt__buf':'stbtt__buf' '='
|   |   | |-MemberExpr 0x7fffd837ec38 <col:7, col:13> 'stbtt__buf':'stbtt__buf' lvalue ->fdselect 0x7fffd834d2c0
|   |   | | `-ImplicitCastExpr 0x7fffd837ec20 <col:7> 'stbtt_fontinfo *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x7fffd837ebf8 <col:7> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   |   | `-CallExpr 0x7fffd837ed50 <col:24, col:46> 'stbtt__buf':'stbtt__buf'
|   |   |   |-ImplicitCastExpr 0x7fffd837ed38 <col:24> 'stbtt__buf (*)(const void *, size_t)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x7fffd837ec70 <col:24> 'stbtt__buf (const void *, size_t)' Function 0x7fffd8362750 'stbtt__new_buf' 'stbtt__buf (const void *, size_t)'
|   |   |   |-ImplicitCastExpr 0x7fffd837ed88 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'const void *' <NullToPointer>
|   |   |   | `-ParenExpr 0x7fffd837ecf8 <col:16, col:25> 'void *'
|   |   |   |   `-CStyleCastExpr 0x7fffd837ecd0 <col:17, col:24> 'void *' <NullToPointer>
|   |   |   |     `-IntegerLiteral 0x7fffd837ec98 <col:24> 'int' 0
|   |   |   `-ImplicitCastExpr 0x7fffd837eda0 <././stb/stb_truetype.h:1411:45> 'size_t':'unsigned long' <IntegralCast>
|   |   |     `-IntegerLiteral 0x7fffd837ed18 <col:45> 'int' 0
|   |   |-BinaryOperator 0x7fffd837f058 <line:1414:7, col:57> 'stbtt__buf':'stbtt__buf' '='
|   |   | |-MemberExpr 0x7fffd837ee20 <col:7, col:13> 'stbtt__buf':'stbtt__buf' lvalue ->cff 0x7fffd834d0d0
|   |   | | `-ImplicitCastExpr 0x7fffd837ee08 <col:7> 'stbtt_fontinfo *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x7fffd837ede0 <col:7> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   |   | `-CallExpr 0x7fffd837eff0 <col:19, col:57> 'stbtt__buf':'stbtt__buf'
|   |   |   |-ImplicitCastExpr 0x7fffd837efd8 <col:19> 'stbtt__buf (*)(const void *, size_t)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x7fffd837ee58 <col:19> 'stbtt__buf (const void *, size_t)' Function 0x7fffd8362750 'stbtt__new_buf' 'stbtt__buf (const void *, size_t)'
|   |   |   |-ImplicitCastExpr 0x7fffd837f028 <col:34, col:39> 'const void *' <BitCast>
|   |   |   | `-BinaryOperator 0x7fffd837ef00 <col:34, col:39> 'unsigned char *' '+'
|   |   |   |   |-ImplicitCastExpr 0x7fffd837eed0 <col:34> 'unsigned char *' <LValueToRValue>
|   |   |   |   | `-DeclRefExpr 0x7fffd837ee80 <col:34> 'unsigned char *' lvalue ParmVar 0x7fffd837c3f0 'data' 'unsigned char *'
|   |   |   |   `-ImplicitCastExpr 0x7fffd837eee8 <col:39> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   |   |     `-DeclRefExpr 0x7fffd837eea8 <col:39> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837e700 'cff' 'stbtt_uint32':'unsigned int'
|   |   |   `-ImplicitCastExpr 0x7fffd837f040 <col:44, col:53> 'size_t':'unsigned long' <IntegralCast>
|   |   |     `-BinaryOperator 0x7fffd837efb0 <col:44, col:53> 'int' '*'
|   |   |       |-BinaryOperator 0x7fffd837ef68 <col:44, col:48> 'int' '*'
|   |   |       | |-IntegerLiteral 0x7fffd837ef28 <col:44> 'int' 512
|   |   |       | `-IntegerLiteral 0x7fffd837ef48 <col:48> 'int' 1024
|   |   |       `-IntegerLiteral 0x7fffd837ef90 <col:53> 'int' 1024
|   |   |-BinaryOperator 0x7fffd837f138 <line:1415:7, col:17> 'stbtt__buf':'stbtt__buf' '='
|   |   | |-DeclRefExpr 0x7fffd837f080 <col:7> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd837e298 'b' 'stbtt__buf':'stbtt__buf'
|   |   | `-ImplicitCastExpr 0x7fffd837f120 <col:11, col:17> 'stbtt__buf':'stbtt__buf' <LValueToRValue>
|   |   |   `-MemberExpr 0x7fffd837f0e8 <col:11, col:17> 'stbtt__buf':'stbtt__buf' lvalue ->cff 0x7fffd834d0d0
|   |   |     `-ImplicitCastExpr 0x7fffd837f0d0 <col:11> 'stbtt_fontinfo *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x7fffd837f0a8 <col:11> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   |   |-CallExpr 0x7fffd837f208 <line:1418:7, col:28> 'void'
|   |   | |-ImplicitCastExpr 0x7fffd837f1f0 <col:7> 'void (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x7fffd837f160 <col:7> 'void (stbtt__buf *, int)' Function 0x7fffd8361388 'stbtt__buf_skip' 'void (stbtt__buf *, int)'
|   |   | |-UnaryOperator 0x7fffd837f1b0 <col:23, col:24> 'stbtt__buf *' prefix '&'
|   |   | | `-DeclRefExpr 0x7fffd837f188 <col:24> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd837e298 'b' 'stbtt__buf':'stbtt__buf'
|   |   | `-IntegerLiteral 0x7fffd837f1d0 <col:27> 'int' 2
|   |   |-CallExpr 0x7fffd837f380 <line:1419:7, col:46> 'void'
|   |   | |-ImplicitCastExpr 0x7fffd837f368 <col:7> 'void (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x7fffd837f240 <col:7> 'void (stbtt__buf *, int)' Function 0x7fffd8360530 'stbtt__buf_seek' 'void (stbtt__buf *, int)'
|   |   | |-UnaryOperator 0x7fffd837f290 <col:23, col:24> 'stbtt__buf *' prefix '&'
|   |   | | `-DeclRefExpr 0x7fffd837f268 <col:24> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd837e298 'b' 'stbtt__buf':'stbtt__buf'
|   |   | `-ImplicitCastExpr 0x7fffd837f3b8 <col:27, col:45> 'int' <IntegralCast>
|   |   |   `-CallExpr 0x7fffd837f338 <col:27, col:45> 'stbtt_uint8':'unsigned char'
|   |   |     |-ImplicitCastExpr 0x7fffd837f320 <col:27> 'stbtt_uint8 (*)(stbtt__buf *)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x7fffd837f2b0 <col:27> 'stbtt_uint8 (stbtt__buf *)' Function 0x7fffd835fad0 'stbtt__buf_get8' 'stbtt_uint8 (stbtt__buf *)'
|   |   |     `-UnaryOperator 0x7fffd837f300 <col:43, col:44> 'stbtt__buf *' prefix '&'
|   |   |       `-DeclRefExpr 0x7fffd837f2d8 <col:44> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd837e298 'b' 'stbtt__buf':'stbtt__buf'
|   |   |-CallExpr 0x7fffd837f458 <line:1423:7, col:30> 'stbtt__buf':'stbtt__buf'
|   |   | |-ImplicitCastExpr 0x7fffd837f440 <col:7> 'stbtt__buf (*)(stbtt__buf *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x7fffd837f3d0 <col:7> 'stbtt__buf (stbtt__buf *)' Function 0x7fffd8364030 'stbtt__cff_get_index' 'stbtt__buf (stbtt__buf *)'
|   |   | `-UnaryOperator 0x7fffd837f420 <col:28, col:29> 'stbtt__buf *' prefix '&'
|   |   |   `-DeclRefExpr 0x7fffd837f3f8 <col:29> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd837e298 'b' 'stbtt__buf':'stbtt__buf'
|   |   |-BinaryOperator 0x7fffd837f568 <line:1424:7, col:43> 'stbtt__buf':'stbtt__buf' '='
|   |   | |-DeclRefExpr 0x7fffd837f488 <col:7> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd837e378 'topdictidx' 'stbtt__buf':'stbtt__buf'
|   |   | `-CallExpr 0x7fffd837f538 <col:20, col:43> 'stbtt__buf':'stbtt__buf'
|   |   |   |-ImplicitCastExpr 0x7fffd837f520 <col:20> 'stbtt__buf (*)(stbtt__buf *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x7fffd837f4b0 <col:20> 'stbtt__buf (stbtt__buf *)' Function 0x7fffd8364030 'stbtt__cff_get_index' 'stbtt__buf (stbtt__buf *)'
|   |   |   `-UnaryOperator 0x7fffd837f500 <col:41, col:42> 'stbtt__buf *' prefix '&'
|   |   |     `-DeclRefExpr 0x7fffd837f4d8 <col:42> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd837e298 'b' 'stbtt__buf':'stbtt__buf'
|   |   |-BinaryOperator 0x7fffd837f6f0 <line:1425:7, col:51> 'stbtt__buf':'stbtt__buf' '='
|   |   | |-DeclRefExpr 0x7fffd837f590 <col:7> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd837e308 'topdict' 'stbtt__buf':'stbtt__buf'
|   |   | `-CallExpr 0x7fffd837f6a0 <col:17, col:51> 'stbtt__buf':'stbtt__buf'
|   |   |   |-ImplicitCastExpr 0x7fffd837f688 <col:17> 'stbtt__buf (*)(stbtt__buf, int)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x7fffd837f5b8 <col:17> 'stbtt__buf (stbtt__buf, int)' Function 0x7fffd836ecc0 'stbtt__cff_index_get' 'stbtt__buf (stbtt__buf, int)'
|   |   |   |-ImplicitCastExpr 0x7fffd837f6d8 <col:38> 'stbtt__buf':'stbtt__buf' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x7fffd837f5e0 <col:38> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd837e378 'topdictidx' 'stbtt__buf':'stbtt__buf'
|   |   |   `-IntegerLiteral 0x7fffd837f608 <col:50> 'int' 0
|   |   |-CallExpr 0x7fffd837f7a0 <line:1426:7, col:30> 'stbtt__buf':'stbtt__buf'
|   |   | |-ImplicitCastExpr 0x7fffd837f788 <col:7> 'stbtt__buf (*)(stbtt__buf *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x7fffd837f718 <col:7> 'stbtt__buf (stbtt__buf *)' Function 0x7fffd8364030 'stbtt__cff_get_index' 'stbtt__buf (stbtt__buf *)'
|   |   | `-UnaryOperator 0x7fffd837f768 <col:28, col:29> 'stbtt__buf *' prefix '&'
|   |   |   `-DeclRefExpr 0x7fffd837f740 <col:29> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd837e298 'b' 'stbtt__buf':'stbtt__buf'
|   |   |-BinaryOperator 0x7fffd837f900 <line:1427:7, col:45> 'stbtt__buf':'stbtt__buf' '='
|   |   | |-MemberExpr 0x7fffd837f810 <col:7, col:13> 'stbtt__buf':'stbtt__buf' lvalue ->gsubrs 0x7fffd834d1b8
|   |   | | `-ImplicitCastExpr 0x7fffd837f7f8 <col:7> 'stbtt_fontinfo *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x7fffd837f7d0 <col:7> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   |   | `-CallExpr 0x7fffd837f8d0 <col:22, col:45> 'stbtt__buf':'stbtt__buf'
|   |   |   |-ImplicitCastExpr 0x7fffd837f8b8 <col:22> 'stbtt__buf (*)(stbtt__buf *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x7fffd837f848 <col:22> 'stbtt__buf (stbtt__buf *)' Function 0x7fffd8364030 'stbtt__cff_get_index' 'stbtt__buf (stbtt__buf *)'
|   |   |   `-UnaryOperator 0x7fffd837f898 <col:43, col:44> 'stbtt__buf *' prefix '&'
|   |   |     `-DeclRefExpr 0x7fffd837f870 <col:44> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd837e298 'b' 'stbtt__buf':'stbtt__buf'
|   |   |-CallExpr 0x7fffd837fa38 <line:1429:7, col:57> 'void'
|   |   | |-ImplicitCastExpr 0x7fffd837fa20 <col:7> 'void (*)(stbtt__buf *, int, int, stbtt_uint32 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x7fffd837f928 <col:7> 'void (stbtt__buf *, int, int, stbtt_uint32 *)' Function 0x7fffd83690c0 'stbtt__dict_get_ints' 'void (stbtt__buf *, int, int, stbtt_uint32 *)'
|   |   | |-UnaryOperator 0x7fffd837f978 <col:28, col:29> 'stbtt__buf *' prefix '&'
|   |   | | `-DeclRefExpr 0x7fffd837f950 <col:29> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd837e308 'topdict' 'stbtt__buf':'stbtt__buf'
|   |   | |-IntegerLiteral 0x7fffd837f998 <col:38> 'int' 17
|   |   | |-IntegerLiteral 0x7fffd837f9b8 <col:42> 'int' 1
|   |   | `-UnaryOperator 0x7fffd837fa00 <col:45, col:46> 'stbtt_uint32 *' prefix '&'
|   |   |   `-DeclRefExpr 0x7fffd837f9d8 <col:46> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837e4c8 'charstrings' 'stbtt_uint32':'unsigned int'
|   |   |-CallExpr 0x7fffd837fbd8 <line:1430:7, col:59> 'void'
|   |   | |-ImplicitCastExpr 0x7fffd837fbc0 <col:7> 'void (*)(stbtt__buf *, int, int, stbtt_uint32 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x7fffd837fa80 <col:7> 'void (stbtt__buf *, int, int, stbtt_uint32 *)' Function 0x7fffd83690c0 'stbtt__dict_get_ints' 'void (stbtt__buf *, int, int, stbtt_uint32 *)'
|   |   | |-UnaryOperator 0x7fffd837fad0 <col:28, col:29> 'stbtt__buf *' prefix '&'
|   |   | | `-DeclRefExpr 0x7fffd837faa8 <col:29> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd837e308 'topdict' 'stbtt__buf':'stbtt__buf'
|   |   | |-BinaryOperator 0x7fffd837fb30 <col:38, col:46> 'int' '|'
|   |   | | |-IntegerLiteral 0x7fffd837faf0 <col:38> 'int' 256
|   |   | | `-IntegerLiteral 0x7fffd837fb10 <col:46> 'int' 6
|   |   | |-IntegerLiteral 0x7fffd837fb58 <col:49> 'int' 1
|   |   | `-UnaryOperator 0x7fffd837fba0 <col:52, col:53> 'stbtt_uint32 *' prefix '&'
|   |   |   `-DeclRefExpr 0x7fffd837fb78 <col:53> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837e420 'cstype' 'stbtt_uint32':'unsigned int'
|   |   |-CallExpr 0x7fffd837fd78 <line:1431:7, col:64> 'void'
|   |   | |-ImplicitCastExpr 0x7fffd837fd60 <col:7> 'void (*)(stbtt__buf *, int, int, stbtt_uint32 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x7fffd837fc20 <col:7> 'void (stbtt__buf *, int, int, stbtt_uint32 *)' Function 0x7fffd83690c0 'stbtt__dict_get_ints' 'void (stbtt__buf *, int, int, stbtt_uint32 *)'
|   |   | |-UnaryOperator 0x7fffd837fc70 <col:28, col:29> 'stbtt__buf *' prefix '&'
|   |   | | `-DeclRefExpr 0x7fffd837fc48 <col:29> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd837e308 'topdict' 'stbtt__buf':'stbtt__buf'
|   |   | |-BinaryOperator 0x7fffd837fcd0 <col:38, col:46> 'int' '|'
|   |   | | |-IntegerLiteral 0x7fffd837fc90 <col:38> 'int' 256
|   |   | | `-IntegerLiteral 0x7fffd837fcb0 <col:46> 'int' 36
|   |   | |-IntegerLiteral 0x7fffd837fcf8 <col:50> 'int' 1
|   |   | `-UnaryOperator 0x7fffd837fd40 <col:53, col:54> 'stbtt_uint32 *' prefix '&'
|   |   |   `-DeclRefExpr 0x7fffd837fd18 <col:54> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837e570 'fdarrayoff' 'stbtt_uint32':'unsigned int'
|   |   |-CallExpr 0x7fffd837ff18 <line:1432:7, col:65> 'void'
|   |   | |-ImplicitCastExpr 0x7fffd837ff00 <col:7> 'void (*)(stbtt__buf *, int, int, stbtt_uint32 *)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x7fffd837fdc0 <col:7> 'void (stbtt__buf *, int, int, stbtt_uint32 *)' Function 0x7fffd83690c0 'stbtt__dict_get_ints' 'void (stbtt__buf *, int, int, stbtt_uint32 *)'
|   |   | |-UnaryOperator 0x7fffd837fe10 <col:28, col:29> 'stbtt__buf *' prefix '&'
|   |   | | `-DeclRefExpr 0x7fffd837fde8 <col:29> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd837e308 'topdict' 'stbtt__buf':'stbtt__buf'
|   |   | |-BinaryOperator 0x7fffd837fe70 <col:38, col:46> 'int' '|'
|   |   | | |-IntegerLiteral 0x7fffd837fe30 <col:38> 'int' 256
|   |   | | `-IntegerLiteral 0x7fffd837fe50 <col:46> 'int' 37
|   |   | |-IntegerLiteral 0x7fffd837fe98 <col:50> 'int' 1
|   |   | `-UnaryOperator 0x7fffd837fee0 <col:53, col:54> 'stbtt_uint32 *' prefix '&'
|   |   |   `-DeclRefExpr 0x7fffd837feb8 <col:54> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837e618 'fdselectoff' 'stbtt_uint32':'unsigned int'
|   |   |-BinaryOperator 0x7fffd8380128 <line:1433:7, col:48> 'stbtt__buf':'stbtt__buf' '='
|   |   | |-MemberExpr 0x7fffd837ffa0 <col:7, col:13> 'stbtt__buf':'stbtt__buf' lvalue ->subrs 0x7fffd834d210
|   |   | | `-ImplicitCastExpr 0x7fffd837ff88 <col:7> 'stbtt_fontinfo *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x7fffd837ff60 <col:7> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   |   | `-CallExpr 0x7fffd83800c0 <col:21, col:48> 'stbtt__buf':'stbtt__buf'
|   |   |   |-ImplicitCastExpr 0x7fffd83800a8 <col:21> 'stbtt__buf (*)(stbtt__buf, stbtt__buf)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x7fffd837ffd8 <col:21> 'stbtt__buf (stbtt__buf, stbtt__buf)' Function 0x7fffd837a500 'stbtt__get_subrs' 'stbtt__buf (stbtt__buf, stbtt__buf)'
|   |   |   |-ImplicitCastExpr 0x7fffd83800f8 <col:38> 'stbtt__buf':'stbtt__buf' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x7fffd8380000 <col:38> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd837e298 'b' 'stbtt__buf':'stbtt__buf'
|   |   |   `-ImplicitCastExpr 0x7fffd8380110 <col:41> 'stbtt__buf':'stbtt__buf' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x7fffd8380028 <col:41> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd837e308 'topdict' 'stbtt__buf':'stbtt__buf'
|   |   |-IfStmt 0x7fffd8380248 <line:1436:7, col:31>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x7fffd83801c8 <col:11, col:21> 'int' '!='
|   |   | | |-ImplicitCastExpr 0x7fffd8380198 <col:11> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x7fffd8380150 <col:11> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837e420 'cstype' 'stbtt_uint32':'unsigned int'
|   |   | | `-ImplicitCastExpr 0x7fffd83801b0 <col:21> 'unsigned int' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x7fffd8380178 <col:21> 'int' 2
|   |   | |-ReturnStmt 0x7fffd8380230 <col:24, col:31>
|   |   | | `-IntegerLiteral 0x7fffd8380210 <col:31> 'int' 0
|   |   | `-<<<NULL>>>
|   |   |-IfStmt 0x7fffd8380358 <line:1437:7, col:36>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x7fffd83802f8 <col:11, col:26> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x7fffd83802c8 <col:11> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x7fffd8380280 <col:11> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837e4c8 'charstrings' 'stbtt_uint32':'unsigned int'
|   |   | | `-ImplicitCastExpr 0x7fffd83802e0 <col:26> 'unsigned int' <IntegralCast>
|   |   | |   `-IntegerLiteral 0x7fffd83802a8 <col:26> 'int' 0
|   |   | |-ReturnStmt 0x7fffd8380340 <col:29, col:36>
|   |   | | `-IntegerLiteral 0x7fffd8380320 <col:36> 'int' 0
|   |   | `-<<<NULL>>>
|   |   |-IfStmt 0x7fffd8380a28 <line:1439:7, line:1445:7>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-ImplicitCastExpr 0x7fffd83803b8 <line:1439:11> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x7fffd8380390 <col:11> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837e570 'fdarrayoff' 'stbtt_uint32':'unsigned int'
|   |   | |-CompoundStmt 0x7fffd83809f8 <col:23, line:1445:7>
|   |   | | |-IfStmt 0x7fffd8380468 <line:1441:10, col:35>
|   |   | | | |-<<<NULL>>>
|   |   | | | |-<<<NULL>>>
|   |   | | | |-UnaryOperator 0x7fffd8380410 <col:14, col:15> 'int' prefix '!'
|   |   | | | | `-ImplicitCastExpr 0x7fffd83803f8 <col:15> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x7fffd83803d0 <col:15> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837e618 'fdselectoff' 'stbtt_uint32':'unsigned int'
|   |   | | | |-ReturnStmt 0x7fffd8380450 <col:28, col:35>
|   |   | | | | `-IntegerLiteral 0x7fffd8380430 <col:35> 'int' 0
|   |   | | | `-<<<NULL>>>
|   |   | | |-CallExpr 0x7fffd8380550 <line:1442:10, col:40> 'void'
|   |   | | | |-ImplicitCastExpr 0x7fffd8380538 <col:10> 'void (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x7fffd83804a0 <col:10> 'void (stbtt__buf *, int)' Function 0x7fffd8360530 'stbtt__buf_seek' 'void (stbtt__buf *, int)'
|   |   | | | |-UnaryOperator 0x7fffd83804f0 <col:26, col:27> 'stbtt__buf *' prefix '&'
|   |   | | | | `-DeclRefExpr 0x7fffd83804c8 <col:27> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd837e298 'b' 'stbtt__buf':'stbtt__buf'
|   |   | | | `-ImplicitCastExpr 0x7fffd83805a0 <col:30> 'int' <IntegralCast>
|   |   | | |   `-ImplicitCastExpr 0x7fffd8380588 <col:30> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x7fffd8380510 <col:30> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837e570 'fdarrayoff' 'stbtt_uint32':'unsigned int'
|   |   | | |-BinaryOperator 0x7fffd83806e8 <line:1443:10, col:51> 'stbtt__buf':'stbtt__buf' '='
|   |   | | | |-MemberExpr 0x7fffd83805f8 <col:10, col:16> 'stbtt__buf':'stbtt__buf' lvalue ->fontdicts 0x7fffd834d268
|   |   | | | | `-ImplicitCastExpr 0x7fffd83805e0 <col:10> 'stbtt_fontinfo *' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x7fffd83805b8 <col:10> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   |   | | | `-CallExpr 0x7fffd83806b8 <col:28, col:51> 'stbtt__buf':'stbtt__buf'
|   |   | | |   |-ImplicitCastExpr 0x7fffd83806a0 <col:28> 'stbtt__buf (*)(stbtt__buf *)' <FunctionToPointerDecay>
|   |   | | |   | `-DeclRefExpr 0x7fffd8380630 <col:28> 'stbtt__buf (stbtt__buf *)' Function 0x7fffd8364030 'stbtt__cff_get_index' 'stbtt__buf (stbtt__buf *)'
|   |   | | |   `-UnaryOperator 0x7fffd8380680 <col:49, col:50> 'stbtt__buf *' prefix '&'
|   |   | | |     `-DeclRefExpr 0x7fffd8380658 <col:50> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd837e298 'b' 'stbtt__buf':'stbtt__buf'
|   |   | | `-BinaryOperator 0x7fffd83809d0 <line:1444:10, col:79> 'stbtt__buf':'stbtt__buf' '='
|   |   | |   |-MemberExpr 0x7fffd8380750 <col:10, col:16> 'stbtt__buf':'stbtt__buf' lvalue ->fdselect 0x7fffd834d2c0
|   |   | |   | `-ImplicitCastExpr 0x7fffd8380738 <col:10> 'stbtt_fontinfo *' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x7fffd8380710 <col:10> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   |   | |   `-CallExpr 0x7fffd8380930 <col:27, col:79> 'stbtt__buf':'stbtt__buf'
|   |   | |     |-ImplicitCastExpr 0x7fffd8380918 <col:27> 'stbtt__buf (*)(const stbtt__buf *, int, int)' <FunctionToPointerDecay>
|   |   | |     | `-DeclRefExpr 0x7fffd8380788 <col:27> 'stbtt__buf (const stbtt__buf *, int, int)' Function 0x7fffd83634f0 'stbtt__buf_range' 'stbtt__buf (const stbtt__buf *, int, int)'
|   |   | |     |-ImplicitCastExpr 0x7fffd8380970 <col:44, col:45> 'const stbtt__buf *' <BitCast>
|   |   | |     | `-UnaryOperator 0x7fffd83807d8 <col:44, col:45> 'stbtt__buf *' prefix '&'
|   |   | |     |   `-DeclRefExpr 0x7fffd83807b0 <col:45> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd837e298 'b' 'stbtt__buf':'stbtt__buf'
|   |   | |     |-ImplicitCastExpr 0x7fffd83809a0 <col:48> 'int' <IntegralCast>
|   |   | |     | `-ImplicitCastExpr 0x7fffd8380988 <col:48> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   | |     |   `-DeclRefExpr 0x7fffd83807f8 <col:48> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837e618 'fdselectoff' 'stbtt_uint32':'unsigned int'
|   |   | |     `-ImplicitCastExpr 0x7fffd83809b8 <col:61, col:68> 'int' <IntegralCast>
|   |   | |       `-BinaryOperator 0x7fffd83808f0 <col:61, col:68> 'unsigned int' '-'
|   |   | |         |-ImplicitCastExpr 0x7fffd83808d8 <col:61, col:63> 'unsigned int' <IntegralCast>
|   |   | |         | `-ImplicitCastExpr 0x7fffd83808a8 <col:61, col:63> 'int' <LValueToRValue>
|   |   | |         |   `-MemberExpr 0x7fffd8380848 <col:61, col:63> 'int' lvalue .size 0x7fffd82a74c0
|   |   | |         |     `-DeclRefExpr 0x7fffd8380820 <col:61> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd837e298 'b' 'stbtt__buf':'stbtt__buf'
|   |   | |         `-ImplicitCastExpr 0x7fffd83808c0 <col:68> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   | |           `-DeclRefExpr 0x7fffd8380880 <col:68> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837e618 'fdselectoff' 'stbtt_uint32':'unsigned int'
|   |   | `-<<<NULL>>>
|   |   |-CallExpr 0x7fffd8380b10 <line:1447:7, col:38> 'void'
|   |   | |-ImplicitCastExpr 0x7fffd8380af8 <col:7> 'void (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x7fffd8380a60 <col:7> 'void (stbtt__buf *, int)' Function 0x7fffd8360530 'stbtt__buf_seek' 'void (stbtt__buf *, int)'
|   |   | |-UnaryOperator 0x7fffd8380ab0 <col:23, col:24> 'stbtt__buf *' prefix '&'
|   |   | | `-DeclRefExpr 0x7fffd8380a88 <col:24> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd837e298 'b' 'stbtt__buf':'stbtt__buf'
|   |   | `-ImplicitCastExpr 0x7fffd8380b60 <col:27> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x7fffd8380b48 <col:27> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x7fffd8380ad0 <col:27> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837e4c8 'charstrings' 'stbtt_uint32':'unsigned int'
|   |   `-BinaryOperator 0x7fffd8380ca8 <line:1448:7, col:50> 'stbtt__buf':'stbtt__buf' '='
|   |     |-MemberExpr 0x7fffd8380bb8 <col:7, col:13> 'stbtt__buf':'stbtt__buf' lvalue ->charstrings 0x7fffd834d160
|   |     | `-ImplicitCastExpr 0x7fffd8380ba0 <col:7> 'stbtt_fontinfo *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fffd8380b78 <col:7> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   |     `-CallExpr 0x7fffd8380c78 <col:27, col:50> 'stbtt__buf':'stbtt__buf'
|   |       |-ImplicitCastExpr 0x7fffd8380c60 <col:27> 'stbtt__buf (*)(stbtt__buf *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x7fffd8380bf0 <col:27> 'stbtt__buf (stbtt__buf *)' Function 0x7fffd8364030 'stbtt__cff_get_index' 'stbtt__buf (stbtt__buf *)'
|   |       `-UnaryOperator 0x7fffd8380c40 <col:48, col:49> 'stbtt__buf *' prefix '&'
|   |         `-DeclRefExpr 0x7fffd8380c18 <col:49> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd837e298 'b' 'stbtt__buf':'stbtt__buf'
|   |-BinaryOperator 0x7fffd8380f88 <line:1451:4, col:49> 'stbtt_uint32':'unsigned int' '='
|   | |-DeclRefExpr 0x7fffd8380de8 <col:4> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837c6e0 't' 'stbtt_uint32':'unsigned int'
|   | `-CallExpr 0x7fffd8380ed0 <col:8, col:49> 'stbtt_uint32':'unsigned int'
|   |   |-ImplicitCastExpr 0x7fffd8380eb8 <col:8> 'stbtt_uint32 (*)(stbtt_uint8 *, stbtt_uint32, const char *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x7fffd8380e10 <col:8> 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)' Function 0x7fffd83758f0 'stbtt__find_table' 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)'
|   |   |-ImplicitCastExpr 0x7fffd8380f10 <col:26> 'unsigned char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x7fffd8380e38 <col:26> 'unsigned char *' lvalue ParmVar 0x7fffd837c3f0 'data' 'unsigned char *'
|   |   |-ImplicitCastExpr 0x7fffd8380f40 <col:32> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |   | `-ImplicitCastExpr 0x7fffd8380f28 <col:32> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x7fffd8380e60 <col:32> 'int' lvalue ParmVar 0x7fffd837c468 'fontstart' 'int'
|   |   `-ImplicitCastExpr 0x7fffd8380f70 <col:43> 'const char *' <BitCast>
|   |     `-ImplicitCastExpr 0x7fffd8380f58 <col:43> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x7fffd8380e88 <col:43> 'char [5]' lvalue "maxp"
|   |-IfStmt 0x7fffd83812c8 <line:1452:4, line:1455:25>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd8380fd8 <line:1452:8> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd8380fb0 <col:8> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837c6e0 't' 'stbtt_uint32':'unsigned int'
|   | |-BinaryOperator 0x7fffd83811e0 <line:1453:7, col:42> 'int' '='
|   | | |-MemberExpr 0x7fffd8381030 <col:7, col:13> 'int' lvalue ->numGlyphs 0x7fffd834cc98
|   | | | `-ImplicitCastExpr 0x7fffd8381018 <col:7> 'stbtt_fontinfo *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd8380ff0 <col:7> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   | | `-ImplicitCastExpr 0x7fffd83811c8 <col:25, col:42> 'int' <IntegralCast>
|   | |   `-CallExpr 0x7fffd8381198 <col:25, col:42> 'stbtt_uint16':'unsigned short'
|   | |     |-ImplicitCastExpr 0x7fffd8381180 <col:25> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x7fffd8381068 <col:25> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   | |     `-BinaryOperator 0x7fffd8381158 <col:34, col:41> 'unsigned char *' '+'
|   | |       |-BinaryOperator 0x7fffd8381110 <col:34, col:39> 'unsigned char *' '+'
|   | |       | |-ImplicitCastExpr 0x7fffd83810e0 <col:34> 'unsigned char *' <LValueToRValue>
|   | |       | | `-DeclRefExpr 0x7fffd8381090 <col:34> 'unsigned char *' lvalue ParmVar 0x7fffd837c3f0 'data' 'unsigned char *'
|   | |       | `-ImplicitCastExpr 0x7fffd83810f8 <col:39> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   | |       |   `-DeclRefExpr 0x7fffd83810b8 <col:39> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837c6e0 't' 'stbtt_uint32':'unsigned int'
|   | |       `-IntegerLiteral 0x7fffd8381138 <col:41> 'int' 4
|   | `-BinaryOperator 0x7fffd83812a0 <line:1455:7, col:25> 'int' '='
|   |   |-MemberExpr 0x7fffd8381248 <col:7, col:13> 'int' lvalue ->numGlyphs 0x7fffd834cc98
|   |   | `-ImplicitCastExpr 0x7fffd8381230 <col:7> 'stbtt_fontinfo *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x7fffd8381208 <col:7> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   |   `-IntegerLiteral 0x7fffd8381280 <col:25> 'int' 65535
|   |-BinaryOperator 0x7fffd83813b8 <line:1457:4, col:17> 'int' '='
|   | |-MemberExpr 0x7fffd8381340 <col:4, col:10> 'int' lvalue ->svg 0x7fffd834cf98
|   | | `-ImplicitCastExpr 0x7fffd8381328 <col:4> 'stbtt_fontinfo *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8381300 <col:4> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   | `-UnaryOperator 0x7fffd8381398 <col:16, col:17> 'int' prefix '-'
|   |   `-IntegerLiteral 0x7fffd8381378 <col:17> 'int' 1
|   |-BinaryOperator 0x7fffd8381580 <line:1462:4, col:40> 'stbtt_int32':'int' '='
|   | |-DeclRefExpr 0x7fffd83813e0 <col:4> 'stbtt_int32':'int' lvalue Var 0x7fffd837c7f0 'numTables' 'stbtt_int32':'int'
|   | `-ImplicitCastExpr 0x7fffd8381568 <col:16, col:40> 'stbtt_int32':'int' <IntegralCast>
|   |   `-CallExpr 0x7fffd8381538 <col:16, col:40> 'stbtt_uint16':'unsigned short'
|   |     |-ImplicitCastExpr 0x7fffd8381520 <col:16> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd8381408 <col:16> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     `-BinaryOperator 0x7fffd83814f8 <col:25, col:39> 'unsigned char *' '+'
|   |       |-BinaryOperator 0x7fffd83814b0 <col:25, col:32> 'unsigned char *' '+'
|   |       | |-ImplicitCastExpr 0x7fffd8381480 <col:25> 'unsigned char *' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x7fffd8381430 <col:25> 'unsigned char *' lvalue ParmVar 0x7fffd837c3f0 'data' 'unsigned char *'
|   |       | `-ImplicitCastExpr 0x7fffd8381498 <col:32> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x7fffd8381458 <col:32> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837c670 'cmap' 'stbtt_uint32':'unsigned int'
|   |       `-IntegerLiteral 0x7fffd83814d8 <col:39> 'int' 2
|   |-BinaryOperator 0x7fffd8381640 <line:1463:4, col:22> 'int' '='
|   | |-MemberExpr 0x7fffd83815e8 <col:4, col:10> 'int' lvalue ->index_map 0x7fffd834cff8
|   | | `-ImplicitCastExpr 0x7fffd83815d0 <col:4> 'stbtt_fontinfo *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83815a8 <col:4> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   | `-IntegerLiteral 0x7fffd8381620 <col:22> 'int' 0
|   |-ForStmt 0x7fffd83823e0 <line:1464:4, line:1483:4>
|   | |-BinaryOperator 0x7fffd83816b0 <line:1464:9, col:11> 'stbtt_int32':'int' '='
|   | | |-DeclRefExpr 0x7fffd8381668 <col:9> 'stbtt_int32':'int' lvalue Var 0x7fffd837c780 'i' 'stbtt_int32':'int'
|   | | `-IntegerLiteral 0x7fffd8381690 <col:11> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd8381758 <col:14, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd8381728 <col:14> 'stbtt_int32':'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd83816d8 <col:14> 'stbtt_int32':'int' lvalue Var 0x7fffd837c780 'i' 'stbtt_int32':'int'
|   | | `-ImplicitCastExpr 0x7fffd8381740 <col:18> 'stbtt_int32':'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8381700 <col:18> 'stbtt_int32':'int' lvalue Var 0x7fffd837c7f0 'numTables' 'stbtt_int32':'int'
|   | |-UnaryOperator 0x7fffd83817a8 <col:29, col:31> 'stbtt_int32':'int' prefix '++'
|   | | `-DeclRefExpr 0x7fffd8381780 <col:31> 'stbtt_int32':'int' lvalue Var 0x7fffd837c780 'i' 'stbtt_int32':'int'
|   | `-CompoundStmt 0x7fffd83823c0 <col:34, line:1483:4>
|   |   |-DeclStmt 0x7fffd83819a0 <line:1465:7, col:54>
|   |   | `-VarDecl 0x7fffd83817d8 <col:7, col:53> col:20 used encoding_record 'stbtt_uint32':'unsigned int' cinit
|   |   |   `-BinaryOperator 0x7fffd8381978 <col:38, col:53> 'unsigned int' '+'
|   |   |     |-BinaryOperator 0x7fffd83818b0 <col:38, col:45> 'unsigned int' '+'
|   |   |     | |-ImplicitCastExpr 0x7fffd8381880 <col:38> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x7fffd8381838 <col:38> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837c670 'cmap' 'stbtt_uint32':'unsigned int'
|   |   |     | `-ImplicitCastExpr 0x7fffd8381898 <col:45> 'unsigned int' <IntegralCast>
|   |   |     |   `-IntegerLiteral 0x7fffd8381860 <col:45> 'int' 4
|   |   |     `-ImplicitCastExpr 0x7fffd8381960 <col:49, col:53> 'unsigned int' <IntegralCast>
|   |   |       `-BinaryOperator 0x7fffd8381938 <col:49, col:53> 'int' '*'
|   |   |         |-IntegerLiteral 0x7fffd83818d8 <col:49> 'int' 8
|   |   |         `-ImplicitCastExpr 0x7fffd8381920 <col:53> 'stbtt_int32':'int' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x7fffd83818f8 <col:53> 'stbtt_int32':'int' lvalue Var 0x7fffd837c780 'i' 'stbtt_int32':'int'
|   |   `-SwitchStmt 0x7fffd8381ae8 <line:1467:7, line:1482:7>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-ImplicitCastExpr 0x7fffd8381ad0 <line:1467:14, col:43> 'int' <IntegralCast>
|   |     | `-CallExpr 0x7fffd8381aa0 <col:14, col:43> 'stbtt_uint16':'unsigned short'
|   |     |   |-ImplicitCastExpr 0x7fffd8381a88 <col:14> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x7fffd83819b8 <col:14> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     |   `-BinaryOperator 0x7fffd8381a60 <col:23, col:28> 'unsigned char *' '+'
|   |     |     |-ImplicitCastExpr 0x7fffd8381a30 <col:23> 'unsigned char *' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x7fffd83819e0 <col:23> 'unsigned char *' lvalue ParmVar 0x7fffd837c3f0 'data' 'unsigned char *'
|   |     |     `-ImplicitCastExpr 0x7fffd8381a48 <col:28> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x7fffd8381a08 <col:28> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd83817d8 'encoding_record' 'stbtt_uint32':'unsigned int'
|   |     `-CompoundStmt 0x7fffd8382390 <col:46, line:1482:7>
|   |       |-CaseStmt 0x7fffd8381b40 <line:1468:10, line:1475:13>
|   |       | |-DeclRefExpr 0x7fffd8381b18 <line:1468:15> 'int' EnumConstant 0x7fffd835c078 'STBTT_PLATFORM_ID_MICROSOFT' 'int'
|   |       | |-<<<NULL>>>
|   |       | `-SwitchStmt 0x7fffd8381cf0 <line:1469:13, line:1475:13>
|   |       |   |-<<<NULL>>>
|   |       |   |-<<<NULL>>>
|   |       |   |-ImplicitCastExpr 0x7fffd8381cd8 <line:1469:21, col:52> 'int' <IntegralCast>
|   |       |   | `-CallExpr 0x7fffd8381ca8 <col:21, col:52> 'stbtt_uint16':'unsigned short'
|   |       |   |   |-ImplicitCastExpr 0x7fffd8381c90 <col:21> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       |   |   | `-DeclRefExpr 0x7fffd8381b78 <col:21> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       |   |   `-BinaryOperator 0x7fffd8381c68 <col:30, col:51> 'unsigned char *' '+'
|   |       |   |     |-BinaryOperator 0x7fffd8381c20 <col:30, col:35> 'unsigned char *' '+'
|   |       |   |     | |-ImplicitCastExpr 0x7fffd8381bf0 <col:30> 'unsigned char *' <LValueToRValue>
|   |       |   |     | | `-DeclRefExpr 0x7fffd8381ba0 <col:30> 'unsigned char *' lvalue ParmVar 0x7fffd837c3f0 'data' 'unsigned char *'
|   |       |   |     | `-ImplicitCastExpr 0x7fffd8381c08 <col:35> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       |   |     |   `-DeclRefExpr 0x7fffd8381bc8 <col:35> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd83817d8 'encoding_record' 'stbtt_uint32':'unsigned int'
|   |       |   |     `-IntegerLiteral 0x7fffd8381c48 <col:51> 'int' 2
|   |       |   `-CompoundStmt 0x7fffd8382068 <col:55, line:1475:13>
|   |       |     |-CaseStmt 0x7fffd8381d48 <line:1470:16, line:1473:74>
|   |       |     | |-DeclRefExpr 0x7fffd8381d20 <line:1470:21> 'int' EnumConstant 0x7fffd835c4c8 'STBTT_MS_EID_UNICODE_BMP' 'int'
|   |       |     | |-<<<NULL>>>
|   |       |     | `-CaseStmt 0x7fffd8381da8 <line:1471:16, line:1473:74>
|   |       |     |   |-DeclRefExpr 0x7fffd8381d80 <line:1471:21> 'int' EnumConstant 0x7fffd835c598 'STBTT_MS_EID_UNICODE_FULL' 'int'
|   |       |     |   |-<<<NULL>>>
|   |       |     |   `-BinaryOperator 0x7fffd8382038 <line:1473:19, col:74> 'int' '='
|   |       |     |     |-MemberExpr 0x7fffd8381e20 <col:19, col:25> 'int' lvalue ->index_map 0x7fffd834cff8
|   |       |     |     | `-ImplicitCastExpr 0x7fffd8381e08 <col:19> 'stbtt_fontinfo *' <LValueToRValue>
|   |       |     |     |   `-DeclRefExpr 0x7fffd8381de0 <col:19> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   |       |     |     `-ImplicitCastExpr 0x7fffd8382020 <col:37, col:74> 'int' <IntegralCast>
|   |       |     |       `-BinaryOperator 0x7fffd8381ff8 <col:37, col:74> 'unsigned int' '+'
|   |       |     |         |-ImplicitCastExpr 0x7fffd8381fe0 <col:37> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       |     |         | `-DeclRefExpr 0x7fffd8381e58 <col:37> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837c670 'cmap' 'stbtt_uint32':'unsigned int'
|   |       |     |         `-CallExpr 0x7fffd8381fb0 <col:44, col:74> 'stbtt_uint32':'unsigned int'
|   |       |     |           |-ImplicitCastExpr 0x7fffd8381f98 <col:44> 'stbtt_uint32 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       |     |           | `-DeclRefExpr 0x7fffd8381e80 <col:44> 'stbtt_uint32 (stbtt_uint8 *)' Function 0x7fffd83712a0 'ttULONG' 'stbtt_uint32 (stbtt_uint8 *)'
|   |       |     |           `-BinaryOperator 0x7fffd8381f70 <col:52, col:73> 'unsigned char *' '+'
|   |       |     |             |-BinaryOperator 0x7fffd8381f28 <col:52, col:57> 'unsigned char *' '+'
|   |       |     |             | |-ImplicitCastExpr 0x7fffd8381ef8 <col:52> 'unsigned char *' <LValueToRValue>
|   |       |     |             | | `-DeclRefExpr 0x7fffd8381ea8 <col:52> 'unsigned char *' lvalue ParmVar 0x7fffd837c3f0 'data' 'unsigned char *'
|   |       |     |             | `-ImplicitCastExpr 0x7fffd8381f10 <col:57> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       |     |             |   `-DeclRefExpr 0x7fffd8381ed0 <col:57> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd83817d8 'encoding_record' 'stbtt_uint32':'unsigned int'
|   |       |     |             `-IntegerLiteral 0x7fffd8381f50 <col:73> 'int' 4
|   |       |     `-BreakStmt 0x7fffd8382060 <line:1474:19>
|   |       |-BreakStmt 0x7fffd8382088 <line:1476:13>
|   |       |-CaseStmt 0x7fffd83820b8 <line:1477:9, line:1480:68>
|   |       | |-DeclRefExpr 0x7fffd8382090 <line:1477:14> 'int' EnumConstant 0x7fffd835bf40 'STBTT_PLATFORM_ID_UNICODE' 'int'
|   |       | |-<<<NULL>>>
|   |       | `-BinaryOperator 0x7fffd8382360 <line:1480:13, col:68> 'int' '='
|   |       |   |-MemberExpr 0x7fffd8382130 <col:13, col:19> 'int' lvalue ->index_map 0x7fffd834cff8
|   |       |   | `-ImplicitCastExpr 0x7fffd8382118 <col:13> 'stbtt_fontinfo *' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x7fffd83820f0 <col:13> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   |       |   `-ImplicitCastExpr 0x7fffd8382348 <col:31, col:68> 'int' <IntegralCast>
|   |       |     `-BinaryOperator 0x7fffd8382320 <col:31, col:68> 'unsigned int' '+'
|   |       |       |-ImplicitCastExpr 0x7fffd8382308 <col:31> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       |       | `-DeclRefExpr 0x7fffd8382168 <col:31> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd837c670 'cmap' 'stbtt_uint32':'unsigned int'
|   |       |       `-CallExpr 0x7fffd83822d8 <col:38, col:68> 'stbtt_uint32':'unsigned int'
|   |       |         |-ImplicitCastExpr 0x7fffd83822c0 <col:38> 'stbtt_uint32 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       |         | `-DeclRefExpr 0x7fffd8382190 <col:38> 'stbtt_uint32 (stbtt_uint8 *)' Function 0x7fffd83712a0 'ttULONG' 'stbtt_uint32 (stbtt_uint8 *)'
|   |       |         `-BinaryOperator 0x7fffd8382298 <col:46, col:67> 'unsigned char *' '+'
|   |       |           |-BinaryOperator 0x7fffd8382250 <col:46, col:51> 'unsigned char *' '+'
|   |       |           | |-ImplicitCastExpr 0x7fffd8382220 <col:46> 'unsigned char *' <LValueToRValue>
|   |       |           | | `-DeclRefExpr 0x7fffd83821b8 <col:46> 'unsigned char *' lvalue ParmVar 0x7fffd837c3f0 'data' 'unsigned char *'
|   |       |           | `-ImplicitCastExpr 0x7fffd8382238 <col:51> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       |           |   `-DeclRefExpr 0x7fffd83821e0 <col:51> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd83817d8 'encoding_record' 'stbtt_uint32':'unsigned int'
|   |       |           `-IntegerLiteral 0x7fffd8382278 <col:67> 'int' 4
|   |       `-BreakStmt 0x7fffd8382388 <line:1481:13>
|   |-IfStmt 0x7fffd8382528 <line:1484:4, line:1485:14>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83824c8 <line:1484:8, col:27> 'int' '=='
|   | | |-ImplicitCastExpr 0x7fffd83824b0 <col:8, col:14> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x7fffd8382458 <col:8, col:14> 'int' lvalue ->index_map 0x7fffd834cff8
|   | | |   `-ImplicitCastExpr 0x7fffd8382440 <col:8> 'stbtt_fontinfo *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x7fffd8382418 <col:8> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   | | `-IntegerLiteral 0x7fffd8382490 <col:27> 'int' 0
|   | |-ReturnStmt 0x7fffd8382510 <line:1485:7, col:14>
|   | | `-IntegerLiteral 0x7fffd83824f0 <col:14> 'int' 0
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x7fffd83827a0 <line:1487:4, col:58> 'int' '='
|   | |-MemberExpr 0x7fffd83825a0 <col:4, col:10> 'int' lvalue ->indexToLocFormat 0x7fffd834d058
|   | | `-ImplicitCastExpr 0x7fffd8382588 <col:4> 'stbtt_fontinfo *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8382560 <col:4> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   | `-ImplicitCastExpr 0x7fffd8382788 <col:29, col:58> 'int' <IntegralCast>
|   |   `-CallExpr 0x7fffd8382758 <col:29, col:58> 'stbtt_uint16':'unsigned short'
|   |     |-ImplicitCastExpr 0x7fffd8382740 <col:29> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd83825d8 <col:29> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     `-BinaryOperator 0x7fffd8382718 <col:38, col:56> 'unsigned char *' '+'
|   |       |-BinaryOperator 0x7fffd83826d0 <col:38, col:49> 'unsigned char *' '+'
|   |       | |-ImplicitCastExpr 0x7fffd83826a0 <col:38> 'unsigned char *' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x7fffd8382600 <col:38> 'unsigned char *' lvalue ParmVar 0x7fffd837c3f0 'data' 'unsigned char *'
|   |       | `-ImplicitCastExpr 0x7fffd83826b8 <col:43, col:49> 'int' <LValueToRValue>
|   |       |   `-MemberExpr 0x7fffd8382668 <col:43, col:49> 'int' lvalue ->head 0x7fffd834cd58
|   |       |     `-ImplicitCastExpr 0x7fffd8382650 <col:43> 'stbtt_fontinfo *' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x7fffd8382628 <col:43> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd837c378 'info' 'stbtt_fontinfo *'
|   |       `-IntegerLiteral 0x7fffd83826f8 <col:56> 'int' 50
|   `-ReturnStmt 0x7fffd83827e8 <line:1488:4, col:11>
|     `-IntegerLiteral 0x7fffd83827c8 <col:11> 'int' 1
|-FunctionDecl 0x7fffd83829f0 prev 0x7fffd834d828 <line:501:19, line:1582:1> line:1491:15 used stbtt_FindGlyphIndex 'int (const stbtt_fontinfo *, int)' extern
| |-ParmVarDecl 0x7fffd83828e0 <col:36, col:58> col:58 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8382958 <col:64, col:68> col:68 used unicode_codepoint 'int'
| `-CompoundStmt 0x7fffd8389d80 <line:1492:1, line:1582:1>
|   |-DeclStmt 0x7fffd8382ba0 <line:1493:4, col:34>
|   | `-VarDecl 0x7fffd8382ab0 <col:4, col:30> col:17 used data 'stbtt_uint8 *' cinit
|   |   `-ImplicitCastExpr 0x7fffd8382b88 <col:24, col:30> 'unsigned char *' <LValueToRValue>
|   |     `-MemberExpr 0x7fffd8382b50 <col:24, col:30> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   |       `-ImplicitCastExpr 0x7fffd8382b38 <col:24> 'const stbtt_fontinfo *' <LValueToRValue>
|   |         `-DeclRefExpr 0x7fffd8382b10 <col:24> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83828e0 'info' 'const stbtt_fontinfo *'
|   |-DeclStmt 0x7fffd8382cd0 <line:1494:4, col:44>
|   | `-VarDecl 0x7fffd8382bc8 <col:4, col:35> col:17 used index_map 'stbtt_uint32':'unsigned int' cinit
|   |   `-ImplicitCastExpr 0x7fffd8382cb8 <col:29, col:35> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |     `-ImplicitCastExpr 0x7fffd8382ca0 <col:29, col:35> 'int' <LValueToRValue>
|   |       `-MemberExpr 0x7fffd8382c68 <col:29, col:35> 'const int' lvalue ->index_map 0x7fffd834cff8
|   |         `-ImplicitCastExpr 0x7fffd8382c50 <col:29> 'const stbtt_fontinfo *' <LValueToRValue>
|   |           `-DeclRefExpr 0x7fffd8382c28 <col:29> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83828e0 'info' 'const stbtt_fontinfo *'
|   |-DeclStmt 0x7fffd8382eb8 <line:1496:4, col:56>
|   | `-VarDecl 0x7fffd8382cf8 <col:4, col:55> col:17 used format 'stbtt_uint16':'unsigned short' cinit
|   |   `-CallExpr 0x7fffd8382e88 <col:26, col:55> 'stbtt_uint16':'unsigned short'
|   |     |-ImplicitCastExpr 0x7fffd8382e70 <col:26> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd8382d58 <col:26> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     `-BinaryOperator 0x7fffd8382e48 <col:35, col:54> 'stbtt_uint8 *' '+'
|   |       |-BinaryOperator 0x7fffd8382e00 <col:35, col:42> 'stbtt_uint8 *' '+'
|   |       | |-ImplicitCastExpr 0x7fffd8382dd0 <col:35> 'stbtt_uint8 *' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x7fffd8382d80 <col:35> 'stbtt_uint8 *' lvalue Var 0x7fffd8382ab0 'data' 'stbtt_uint8 *'
|   |       | `-ImplicitCastExpr 0x7fffd8382de8 <col:42> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x7fffd8382da8 <col:42> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8382bc8 'index_map' 'stbtt_uint32':'unsigned int'
|   |       `-IntegerLiteral 0x7fffd8382e28 <col:54> 'int' 0
|   |-IfStmt 0x7fffd8389898 <line:1497:4, line:1578:4>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd8382f48 <line:1497:8, col:18> 'int' '=='
|   | | |-ImplicitCastExpr 0x7fffd8382f30 <col:8> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x7fffd8382f18 <col:8> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd8382ed0 <col:8> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8382cf8 'format' 'stbtt_uint16':'unsigned short'
|   | | `-IntegerLiteral 0x7fffd8382ef8 <col:18> 'int' 0
|   | |-CompoundStmt 0x7fffd8383538 <col:21, line:1502:4>
|   | | |-DeclStmt 0x7fffd8383158 <line:1498:7, col:57>
|   | | | `-VarDecl 0x7fffd8382f80 <col:7, col:56> col:19 used bytes 'stbtt_int32':'int' cinit
|   | | |   `-ImplicitCastExpr 0x7fffd8383140 <col:27, col:56> 'stbtt_int32':'int' <IntegralCast>
|   | | |     `-CallExpr 0x7fffd8383110 <col:27, col:56> 'stbtt_uint16':'unsigned short'
|   | | |       |-ImplicitCastExpr 0x7fffd83830f8 <col:27> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | | |       | `-DeclRefExpr 0x7fffd8382fe0 <col:27> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   | | |       `-BinaryOperator 0x7fffd83830d0 <col:36, col:55> 'stbtt_uint8 *' '+'
|   | | |         |-BinaryOperator 0x7fffd8383088 <col:36, col:43> 'stbtt_uint8 *' '+'
|   | | |         | |-ImplicitCastExpr 0x7fffd8383058 <col:36> 'stbtt_uint8 *' <LValueToRValue>
|   | | |         | | `-DeclRefExpr 0x7fffd8383008 <col:36> 'stbtt_uint8 *' lvalue Var 0x7fffd8382ab0 'data' 'stbtt_uint8 *'
|   | | |         | `-ImplicitCastExpr 0x7fffd8383070 <col:43> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   | | |         |   `-DeclRefExpr 0x7fffd8383030 <col:43> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8382bc8 'index_map' 'stbtt_uint32':'unsigned int'
|   | | |         `-IntegerLiteral 0x7fffd83830b0 <col:55> 'int' 2
|   | | |-IfStmt 0x7fffd83834c8 <line:1499:7, line:1277:45>
|   | | | |-<<<NULL>>>
|   | | | |-<<<NULL>>>
|   | | | |-BinaryOperator 0x7fffd8383238 <line:1499:11, col:37> 'int' '<'
|   | | | | |-ImplicitCastExpr 0x7fffd8383220 <col:11> 'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x7fffd8383170 <col:11> 'int' lvalue ParmVar 0x7fffd8382958 'unicode_codepoint' 'int'
|   | | | | `-BinaryOperator 0x7fffd83831f8 <col:31, col:37> 'int' '-'
|   | | | |   |-ImplicitCastExpr 0x7fffd83831e0 <col:31> 'stbtt_int32':'int' <LValueToRValue>
|   | | | |   | `-DeclRefExpr 0x7fffd8383198 <col:31> 'stbtt_int32':'int' lvalue Var 0x7fffd8382f80 'bytes' 'stbtt_int32':'int'
|   | | | |   `-IntegerLiteral 0x7fffd83831c0 <col:37> 'int' 6
|   | | | |-ReturnStmt 0x7fffd83834b0 <line:1500:10, line:1277:45>
|   | | | | `-ImplicitCastExpr 0x7fffd8383498 <col:23, col:45> 'int' <IntegralCast>
|   | | | |   `-ImplicitCastExpr 0x7fffd8383480 <col:23, col:45> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | | | |     `-ParenExpr 0x7fffd8383460 <col:23, col:45> 'stbtt_uint8':'unsigned char' lvalue
|   | | | |       `-UnaryOperator 0x7fffd8383440 <col:24, col:44> 'stbtt_uint8':'unsigned char' lvalue prefix '*'
|   | | | |         `-CStyleCastExpr 0x7fffd8383418 <col:26, col:44> 'stbtt_uint8 *' <NoOp>
|   | | | |           `-ParenExpr 0x7fffd83833f8 <col:42, col:44> 'stbtt_uint8 *'
|   | | | |             `-BinaryOperator 0x7fffd8383390 <line:1500:24, col:47> 'stbtt_uint8 *' '+'
|   | | | |               |-BinaryOperator 0x7fffd8383328 <col:24, col:43> 'stbtt_uint8 *' '+'
|   | | | |               | |-BinaryOperator 0x7fffd83832e0 <col:24, col:31> 'stbtt_uint8 *' '+'
|   | | | |               | | |-ImplicitCastExpr 0x7fffd83832b0 <col:24> 'stbtt_uint8 *' <LValueToRValue>
|   | | | |               | | | `-DeclRefExpr 0x7fffd8383260 <col:24> 'stbtt_uint8 *' lvalue Var 0x7fffd8382ab0 'data' 'stbtt_uint8 *'
|   | | | |               | | `-ImplicitCastExpr 0x7fffd83832c8 <col:31> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   | | | |               | |   `-DeclRefExpr 0x7fffd8383288 <col:31> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8382bc8 'index_map' 'stbtt_uint32':'unsigned int'
|   | | | |               | `-IntegerLiteral 0x7fffd8383308 <col:43> 'int' 6
|   | | | |               `-ImplicitCastExpr 0x7fffd8383378 <col:47> 'int' <LValueToRValue>
|   | | | |                 `-DeclRefExpr 0x7fffd8383350 <col:47> 'int' lvalue ParmVar 0x7fffd8382958 'unicode_codepoint' 'int'
|   | | | `-<<<NULL>>>
|   | | `-ReturnStmt 0x7fffd8383520 <line:1501:7, col:14>
|   | |   `-IntegerLiteral 0x7fffd8383500 <col:14> 'int' 0
|   | `-IfStmt 0x7fffd8389860 <line:1502:11, line:1578:4>
|   |   |-<<<NULL>>>
|   |   |-<<<NULL>>>
|   |   |-BinaryOperator 0x7fffd83835d8 <line:1502:15, col:25> 'int' '=='
|   |   | |-ImplicitCastExpr 0x7fffd83835c0 <col:15> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x7fffd83835a8 <col:15> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x7fffd8383560 <col:15> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8382cf8 'format' 'stbtt_uint16':'unsigned short'
|   |   | `-IntegerLiteral 0x7fffd8383588 <col:25> 'int' 6
|   |   |-CompoundStmt 0x7fffd8383fb8 <col:28, line:1508:4>
|   |   | |-DeclStmt 0x7fffd83837e8 <line:1503:7, col:58>
|   |   | | `-VarDecl 0x7fffd8383610 <col:7, col:57> col:20 used first 'stbtt_uint32':'unsigned int' cinit
|   |   | |   `-ImplicitCastExpr 0x7fffd83837d0 <col:28, col:57> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |   | |     `-CallExpr 0x7fffd83837a0 <col:28, col:57> 'stbtt_uint16':'unsigned short'
|   |   | |       |-ImplicitCastExpr 0x7fffd8383788 <col:28> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   | |       | `-DeclRefExpr 0x7fffd8383670 <col:28> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |   | |       `-BinaryOperator 0x7fffd8383760 <col:37, col:56> 'stbtt_uint8 *' '+'
|   |   | |         |-BinaryOperator 0x7fffd8383718 <col:37, col:44> 'stbtt_uint8 *' '+'
|   |   | |         | |-ImplicitCastExpr 0x7fffd83836e8 <col:37> 'stbtt_uint8 *' <LValueToRValue>
|   |   | |         | | `-DeclRefExpr 0x7fffd8383698 <col:37> 'stbtt_uint8 *' lvalue Var 0x7fffd8382ab0 'data' 'stbtt_uint8 *'
|   |   | |         | `-ImplicitCastExpr 0x7fffd8383700 <col:44> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   | |         |   `-DeclRefExpr 0x7fffd83836c0 <col:44> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8382bc8 'index_map' 'stbtt_uint32':'unsigned int'
|   |   | |         `-IntegerLiteral 0x7fffd8383740 <col:56> 'int' 6
|   |   | |-DeclStmt 0x7fffd83839e8 <line:1504:7, col:58>
|   |   | | `-VarDecl 0x7fffd8383810 <col:7, col:57> col:20 used count 'stbtt_uint32':'unsigned int' cinit
|   |   | |   `-ImplicitCastExpr 0x7fffd83839d0 <col:28, col:57> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |   | |     `-CallExpr 0x7fffd83839a0 <col:28, col:57> 'stbtt_uint16':'unsigned short'
|   |   | |       |-ImplicitCastExpr 0x7fffd8383988 <col:28> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   | |       | `-DeclRefExpr 0x7fffd8383870 <col:28> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |   | |       `-BinaryOperator 0x7fffd8383960 <col:37, col:56> 'stbtt_uint8 *' '+'
|   |   | |         |-BinaryOperator 0x7fffd8383918 <col:37, col:44> 'stbtt_uint8 *' '+'
|   |   | |         | |-ImplicitCastExpr 0x7fffd83838e8 <col:37> 'stbtt_uint8 *' <LValueToRValue>
|   |   | |         | | `-DeclRefExpr 0x7fffd8383898 <col:37> 'stbtt_uint8 *' lvalue Var 0x7fffd8382ab0 'data' 'stbtt_uint8 *'
|   |   | |         | `-ImplicitCastExpr 0x7fffd8383900 <col:44> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   | |         |   `-DeclRefExpr 0x7fffd83838c0 <col:44> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8382bc8 'index_map' 'stbtt_uint32':'unsigned int'
|   |   | |         `-IntegerLiteral 0x7fffd8383940 <col:56> 'int' 8
|   |   | |-IfStmt 0x7fffd8383f48 <line:1505:7, line:1506:79>
|   |   | | |-<<<NULL>>>
|   |   | | |-<<<NULL>>>
|   |   | | |-BinaryOperator 0x7fffd8383c28 <line:1505:11, col:97> 'int' '&&'
|   |   | | | |-BinaryOperator 0x7fffd8383ab8 <col:11, col:47> 'int' '>='
|   |   | | | | |-CStyleCastExpr 0x7fffd8383a50 <col:11, col:26> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |   | | | | | `-ImplicitCastExpr 0x7fffd8383a38 <col:26> 'int' <LValueToRValue>
|   |   | | | | |   `-DeclRefExpr 0x7fffd8383a00 <col:26> 'int' lvalue ParmVar 0x7fffd8382958 'unicode_codepoint' 'int'
|   |   | | | | `-ImplicitCastExpr 0x7fffd8383aa0 <col:47> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x7fffd8383a78 <col:47> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8383610 'first' 'stbtt_uint32':'unsigned int'
|   |   | | | `-BinaryOperator 0x7fffd8383c00 <col:56, col:97> 'int' '<'
|   |   | | |   |-CStyleCastExpr 0x7fffd8383b30 <col:56, col:71> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |   | | |   | `-ImplicitCastExpr 0x7fffd8383b18 <col:71> 'int' <LValueToRValue>
|   |   | | |   |   `-DeclRefExpr 0x7fffd8383ae0 <col:71> 'int' lvalue ParmVar 0x7fffd8382958 'unicode_codepoint' 'int'
|   |   | | |   `-BinaryOperator 0x7fffd8383bd8 <col:91, col:97> 'unsigned int' '+'
|   |   | | |     |-ImplicitCastExpr 0x7fffd8383ba8 <col:91> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   | | |     | `-DeclRefExpr 0x7fffd8383b58 <col:91> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8383610 'first' 'stbtt_uint32':'unsigned int'
|   |   | | |     `-ImplicitCastExpr 0x7fffd8383bc0 <col:97> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   | | |       `-DeclRefExpr 0x7fffd8383b80 <col:97> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8383810 'count' 'stbtt_uint32':'unsigned int'
|   |   | | |-ReturnStmt 0x7fffd8383f30 <line:1506:10, col:79>
|   |   | | | `-ImplicitCastExpr 0x7fffd8383f18 <col:17, col:79> 'int' <IntegralCast>
|   |   | | |   `-CallExpr 0x7fffd8383ee8 <col:17, col:79> 'stbtt_uint16':'unsigned short'
|   |   | | |     |-ImplicitCastExpr 0x7fffd8383ed0 <col:17> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   | | |     | `-DeclRefExpr 0x7fffd8383c50 <col:17> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |   | | |     `-BinaryOperator 0x7fffd8383ea8 <col:26, col:78> 'stbtt_uint8 *' '+'
|   |   | | |       |-BinaryOperator 0x7fffd8383d40 <col:26, col:45> 'stbtt_uint8 *' '+'
|   |   | | |       | |-BinaryOperator 0x7fffd8383cf8 <col:26, col:33> 'stbtt_uint8 *' '+'
|   |   | | |       | | |-ImplicitCastExpr 0x7fffd8383cc8 <col:26> 'stbtt_uint8 *' <LValueToRValue>
|   |   | | |       | | | `-DeclRefExpr 0x7fffd8383c78 <col:26> 'stbtt_uint8 *' lvalue Var 0x7fffd8382ab0 'data' 'stbtt_uint8 *'
|   |   | | |       | | `-ImplicitCastExpr 0x7fffd8383ce0 <col:33> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   | | |       | |   `-DeclRefExpr 0x7fffd8383ca0 <col:33> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8382bc8 'index_map' 'stbtt_uint32':'unsigned int'
|   |   | | |       | `-IntegerLiteral 0x7fffd8383d20 <col:45> 'int' 10
|   |   | | |       `-BinaryOperator 0x7fffd8383e80 <col:50, col:78> 'unsigned int' '*'
|   |   | | |         |-ParenExpr 0x7fffd8383e28 <col:50, col:76> 'unsigned int'
|   |   | | |         | `-BinaryOperator 0x7fffd8383e00 <col:51, col:71> 'unsigned int' '-'
|   |   | | |         |   |-ImplicitCastExpr 0x7fffd8383de8 <col:51> 'unsigned int' <IntegralCast>
|   |   | | |         |   | `-ImplicitCastExpr 0x7fffd8383db8 <col:51> 'int' <LValueToRValue>
|   |   | | |         |   |   `-DeclRefExpr 0x7fffd8383d68 <col:51> 'int' lvalue ParmVar 0x7fffd8382958 'unicode_codepoint' 'int'
|   |   | | |         |   `-ImplicitCastExpr 0x7fffd8383dd0 <col:71> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   | | |         |     `-DeclRefExpr 0x7fffd8383d90 <col:71> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8383610 'first' 'stbtt_uint32':'unsigned int'
|   |   | | |         `-ImplicitCastExpr 0x7fffd8383e68 <col:78> 'unsigned int' <IntegralCast>
|   |   | | |           `-IntegerLiteral 0x7fffd8383e48 <col:78> 'int' 2
|   |   | | `-<<<NULL>>>
|   |   | `-ReturnStmt 0x7fffd8383fa0 <line:1507:7, col:14>
|   |   |   `-IntegerLiteral 0x7fffd8383f80 <col:14> 'int' 0
|   |   `-IfStmt 0x7fffd8389828 <line:1508:11, line:1578:4>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x7fffd8384060 <line:1508:15, col:25> 'int' '=='
|   |     | |-ImplicitCastExpr 0x7fffd8384048 <col:15> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x7fffd8384030 <col:15> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x7fffd8383fe8 <col:15> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8382cf8 'format' 'stbtt_uint16':'unsigned short'
|   |     | `-IntegerLiteral 0x7fffd8384010 <col:25> 'int' 2
|   |     |-CompoundStmt 0x7fffd83845d8 <col:28, line:1511:4>
|   |     | |-ParenExpr 0x7fffd8384580 </usr/include/assert.h:108:3, line:113:7> 'void'
|   |     | | `-BinaryOperator 0x7fffd8384558 <line:108:4, line:113:6> 'void' ','
|   |     | |   |-CStyleCastExpr 0x7fffd8384188 <line:108:4, col:33> 'void' <ToVoid>
|   |     | |   | `-UnaryExprOrTypeTraitExpr 0x7fffd8384158 <col:11, col:33> 'unsigned long' sizeof
|   |     | |   |   `-ParenExpr 0x7fffd8384138 <col:18, col:33> 'int'
|   |     | |   |     `-ConditionalOperator 0x7fffd8384108 <col:19, col:32> 'int'
|   |     | |   |       |-ParenExpr 0x7fffd83840a8 <col:19, col:24> 'int'
|   |     | |   |       | `-IntegerLiteral 0x7fffd8384088 <././stb/stb_truetype.h:1509:20> 'int' 0
|   |     | |   |       |-IntegerLiteral 0x7fffd83840c8 </usr/include/assert.h:108:28> 'int' 1
|   |     | |   |       `-IntegerLiteral 0x7fffd83840e8 <col:32> 'int' 0
|   |     | |   `-UnaryOperator 0x7fffd8384538 <col:36, line:113:6> 'void' prefix '__extension__'
|   |     | |     `-StmtExpr 0x7fffd8384518 <line:108:50, line:113:6> 'void'
|   |     | |       `-CompoundStmt 0x7fffd8384500 <line:108:51, line:113:5>
|   |     | |         `-IfStmt 0x7fffd83844c8 <line:109:7, line:112:68>
|   |     | |           |-<<<NULL>>>
|   |     | |           |-<<<NULL>>>
|   |     | |           |-IntegerLiteral 0x7fffd83841b0 <././stb/stb_truetype.h:1509:20> 'int' 0
|   |     | |           |-NullStmt 0x7fffd83841d0 </usr/include/assert.h:110:9>
|   |     | |           `-CallExpr 0x7fffd83843f0 <line:112:9, col:68> 'void'
|   |     | |             |-ImplicitCastExpr 0x7fffd83843d8 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |     | |             | `-DeclRefExpr 0x7fffd83841e0 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |     | |             |-ImplicitCastExpr 0x7fffd8384450 <<scratch space>:243:1> 'const char *' <BitCast>
|   |     | |             | `-ImplicitCastExpr 0x7fffd8384438 <col:1> 'char *' <ArrayToPointerDecay>
|   |     | |             |   `-StringLiteral 0x7fffd8384230 <col:1> 'char [2]' lvalue "0"
|   |     | |             |-ImplicitCastExpr 0x7fffd8384480 <line:244:1> 'const char *' <BitCast>
|   |     | |             | `-ImplicitCastExpr 0x7fffd8384468 <col:1> 'char *' <ArrayToPointerDecay>
|   |     | |             |   `-StringLiteral 0x7fffd8384260 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |     | |             |-ImplicitCastExpr 0x7fffd8384498 <line:245:1> 'unsigned int' <IntegralCast>
|   |     | |             | `-IntegerLiteral 0x7fffd83842a0 <col:1> 'int' 1509
|   |     | |             `-ImplicitCastExpr 0x7fffd83844b0 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |     | |               `-UnaryOperator 0x7fffd83843b8 <col:30, col:44> 'const char [54]' lvalue prefix '__extension__'
|   |     | |                 `-PredefinedExpr 0x7fffd8384398 <col:44> 'const char [54]' lvalue __PRETTY_FUNCTION__
|   |     | |                   `-StringLiteral 0x7fffd8384338 <col:44> 'const char [54]' lvalue "int stbtt_FindGlyphIndex(const stbtt_fontinfo *, int)"
|   |     | `-ReturnStmt 0x7fffd83845c0 <././stb/stb_truetype.h:1510:7, col:14>
|   |     |   `-IntegerLiteral 0x7fffd83845a0 <col:14> 'int' 0
|   |     `-IfStmt 0x7fffd83897f0 <line:1511:11, line:1578:4>
|   |       |-<<<NULL>>>
|   |       |-<<<NULL>>>
|   |       |-BinaryOperator 0x7fffd8384670 <line:1511:15, col:25> 'int' '=='
|   |       | |-ImplicitCastExpr 0x7fffd8384658 <col:15> 'int' <IntegralCast>
|   |       | | `-ImplicitCastExpr 0x7fffd8384640 <col:15> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x7fffd83845f8 <col:15> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8382cf8 'format' 'stbtt_uint16':'unsigned short'
|   |       | `-IntegerLiteral 0x7fffd8384620 <col:25> 'int' 4
|   |       |-CompoundStmt 0x7fffd8387f50 <col:28, line:1556:4>
|   |       | |-DeclStmt 0x7fffd83848e0 <line:1512:7, col:62>
|   |       | | `-VarDecl 0x7fffd83846a8 <col:7, col:61> col:20 used segcount 'stbtt_uint16':'unsigned short' cinit
|   |       | |   `-ImplicitCastExpr 0x7fffd83848c8 <col:31, col:61> 'stbtt_uint16':'unsigned short' <IntegralCast>
|   |       | |     `-BinaryOperator 0x7fffd83848a0 <col:31, col:61> 'int' '>>'
|   |       | |       |-ImplicitCastExpr 0x7fffd8384888 <col:31, col:56> 'int' <IntegralCast>
|   |       | |       | `-CallExpr 0x7fffd8384838 <col:31, col:56> 'stbtt_uint16':'unsigned short'
|   |       | |       |   |-ImplicitCastExpr 0x7fffd8384820 <col:31> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       | |       |   | `-DeclRefExpr 0x7fffd8384708 <col:31> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       | |       |   `-BinaryOperator 0x7fffd83847f8 <col:40, col:55> 'stbtt_uint8 *' '+'
|   |       | |       |     |-BinaryOperator 0x7fffd83847b0 <col:40, col:45> 'stbtt_uint8 *' '+'
|   |       | |       |     | |-ImplicitCastExpr 0x7fffd8384780 <col:40> 'stbtt_uint8 *' <LValueToRValue>
|   |       | |       |     | | `-DeclRefExpr 0x7fffd8384730 <col:40> 'stbtt_uint8 *' lvalue Var 0x7fffd8382ab0 'data' 'stbtt_uint8 *'
|   |       | |       |     | `-ImplicitCastExpr 0x7fffd8384798 <col:45> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       | |       |     |   `-DeclRefExpr 0x7fffd8384758 <col:45> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8382bc8 'index_map' 'stbtt_uint32':'unsigned int'
|   |       | |       |     `-IntegerLiteral 0x7fffd83847d8 <col:55> 'int' 6
|   |       | |       `-IntegerLiteral 0x7fffd8384868 <col:61> 'int' 1
|   |       | |-DeclStmt 0x7fffd8384b40 <line:1513:7, col:65>
|   |       | | `-VarDecl 0x7fffd8384908 <col:7, col:64> col:20 used searchRange 'stbtt_uint16':'unsigned short' cinit
|   |       | |   `-ImplicitCastExpr 0x7fffd8384b28 <col:34, col:64> 'stbtt_uint16':'unsigned short' <IntegralCast>
|   |       | |     `-BinaryOperator 0x7fffd8384b00 <col:34, col:64> 'int' '>>'
|   |       | |       |-ImplicitCastExpr 0x7fffd8384ae8 <col:34, col:59> 'int' <IntegralCast>
|   |       | |       | `-CallExpr 0x7fffd8384a98 <col:34, col:59> 'stbtt_uint16':'unsigned short'
|   |       | |       |   |-ImplicitCastExpr 0x7fffd8384a80 <col:34> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       | |       |   | `-DeclRefExpr 0x7fffd8384968 <col:34> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       | |       |   `-BinaryOperator 0x7fffd8384a58 <col:43, col:58> 'stbtt_uint8 *' '+'
|   |       | |       |     |-BinaryOperator 0x7fffd8384a10 <col:43, col:48> 'stbtt_uint8 *' '+'
|   |       | |       |     | |-ImplicitCastExpr 0x7fffd83849e0 <col:43> 'stbtt_uint8 *' <LValueToRValue>
|   |       | |       |     | | `-DeclRefExpr 0x7fffd8384990 <col:43> 'stbtt_uint8 *' lvalue Var 0x7fffd8382ab0 'data' 'stbtt_uint8 *'
|   |       | |       |     | `-ImplicitCastExpr 0x7fffd83849f8 <col:48> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       | |       |     |   `-DeclRefExpr 0x7fffd83849b8 <col:48> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8382bc8 'index_map' 'stbtt_uint32':'unsigned int'
|   |       | |       |     `-IntegerLiteral 0x7fffd8384a38 <col:58> 'int' 8
|   |       | |       `-IntegerLiteral 0x7fffd8384ac8 <col:64> 'int' 1
|   |       | |-DeclStmt 0x7fffd8384d28 <line:1514:7, col:63>
|   |       | | `-VarDecl 0x7fffd8384b68 <col:7, col:62> col:20 used entrySelector 'stbtt_uint16':'unsigned short' cinit
|   |       | |   `-CallExpr 0x7fffd8384cf8 <col:36, col:62> 'stbtt_uint16':'unsigned short'
|   |       | |     |-ImplicitCastExpr 0x7fffd8384ce0 <col:36> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       | |     | `-DeclRefExpr 0x7fffd8384bc8 <col:36> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       | |     `-BinaryOperator 0x7fffd8384cb8 <col:45, col:60> 'stbtt_uint8 *' '+'
|   |       | |       |-BinaryOperator 0x7fffd8384c70 <col:45, col:50> 'stbtt_uint8 *' '+'
|   |       | |       | |-ImplicitCastExpr 0x7fffd8384c40 <col:45> 'stbtt_uint8 *' <LValueToRValue>
|   |       | |       | | `-DeclRefExpr 0x7fffd8384bf0 <col:45> 'stbtt_uint8 *' lvalue Var 0x7fffd8382ab0 'data' 'stbtt_uint8 *'
|   |       | |       | `-ImplicitCastExpr 0x7fffd8384c58 <col:50> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       | |       |   `-DeclRefExpr 0x7fffd8384c18 <col:50> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8382bc8 'index_map' 'stbtt_uint32':'unsigned int'
|   |       | |       `-IntegerLiteral 0x7fffd8384c98 <col:60> 'int' 10
|   |       | |-DeclStmt 0x7fffd8384f88 <line:1515:7, col:65>
|   |       | | `-VarDecl 0x7fffd8384d50 <col:7, col:64> col:20 used rangeShift 'stbtt_uint16':'unsigned short' cinit
|   |       | |   `-ImplicitCastExpr 0x7fffd8384f70 <col:33, col:64> 'stbtt_uint16':'unsigned short' <IntegralCast>
|   |       | |     `-BinaryOperator 0x7fffd8384f48 <col:33, col:64> 'int' '>>'
|   |       | |       |-ImplicitCastExpr 0x7fffd8384f30 <col:33, col:59> 'int' <IntegralCast>
|   |       | |       | `-CallExpr 0x7fffd8384ee0 <col:33, col:59> 'stbtt_uint16':'unsigned short'
|   |       | |       |   |-ImplicitCastExpr 0x7fffd8384ec8 <col:33> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       | |       |   | `-DeclRefExpr 0x7fffd8384db0 <col:33> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       | |       |   `-BinaryOperator 0x7fffd8384ea0 <col:42, col:57> 'stbtt_uint8 *' '+'
|   |       | |       |     |-BinaryOperator 0x7fffd8384e58 <col:42, col:47> 'stbtt_uint8 *' '+'
|   |       | |       |     | |-ImplicitCastExpr 0x7fffd8384e28 <col:42> 'stbtt_uint8 *' <LValueToRValue>
|   |       | |       |     | | `-DeclRefExpr 0x7fffd8384dd8 <col:42> 'stbtt_uint8 *' lvalue Var 0x7fffd8382ab0 'data' 'stbtt_uint8 *'
|   |       | |       |     | `-ImplicitCastExpr 0x7fffd8384e40 <col:47> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       | |       |     |   `-DeclRefExpr 0x7fffd8384e00 <col:47> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8382bc8 'index_map' 'stbtt_uint32':'unsigned int'
|   |       | |       |     `-IntegerLiteral 0x7fffd8384e80 <col:57> 'int' 12
|   |       | |       `-IntegerLiteral 0x7fffd8384f10 <col:64> 'int' 1
|   |       | |-DeclStmt 0x7fffd83850b0 <line:1518:7, col:45>
|   |       | | `-VarDecl 0x7fffd8384fb0 <col:7, col:43> col:20 used endCount 'stbtt_uint32':'unsigned int' cinit
|   |       | |   `-BinaryOperator 0x7fffd8385088 <col:31, col:43> 'unsigned int' '+'
|   |       | |     |-ImplicitCastExpr 0x7fffd8385058 <col:31> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       | |     | `-DeclRefExpr 0x7fffd8385010 <col:31> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8382bc8 'index_map' 'stbtt_uint32':'unsigned int'
|   |       | |     `-ImplicitCastExpr 0x7fffd8385070 <col:43> 'unsigned int' <IntegralCast>
|   |       | |       `-IntegerLiteral 0x7fffd8385038 <col:43> 'int' 14
|   |       | |-DeclStmt 0x7fffd8385178 <line:1519:7, col:37>
|   |       | | `-VarDecl 0x7fffd83850d8 <col:7, col:29> col:20 used search 'stbtt_uint32':'unsigned int' cinit
|   |       | |   `-ImplicitCastExpr 0x7fffd8385160 <col:29> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       | |     `-DeclRefExpr 0x7fffd8385138 <col:29> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8384fb0 'endCount' 'stbtt_uint32':'unsigned int'
|   |       | |-IfStmt 0x7fffd8385250 <line:1521:7, line:1522:17>
|   |       | | |-<<<NULL>>>
|   |       | | |-<<<NULL>>>
|   |       | | |-BinaryOperator 0x7fffd83851f0 <line:1521:11, col:31> 'int' '>'
|   |       | | | |-ImplicitCastExpr 0x7fffd83851d8 <col:11> 'int' <LValueToRValue>
|   |       | | | | `-DeclRefExpr 0x7fffd8385190 <col:11> 'int' lvalue ParmVar 0x7fffd8382958 'unicode_codepoint' 'int'
|   |       | | | `-IntegerLiteral 0x7fffd83851b8 <col:31> 'int' 65535
|   |       | | |-ReturnStmt 0x7fffd8385238 <line:1522:10, col:17>
|   |       | | | `-IntegerLiteral 0x7fffd8385218 <col:17> 'int' 0
|   |       | | `-<<<NULL>>>
|   |       | |-IfStmt 0x7fffd8385600 <line:1526:7, line:1527:31>
|   |       | | |-<<<NULL>>>
|   |       | | |-<<<NULL>>>
|   |       | | |-BinaryOperator 0x7fffd83854c0 <line:1526:11, col:69> 'int' '>='
|   |       | | | |-ImplicitCastExpr 0x7fffd8385490 <col:11> 'int' <LValueToRValue>
|   |       | | | | `-DeclRefExpr 0x7fffd8385288 <col:11> 'int' lvalue ParmVar 0x7fffd8382958 'unicode_codepoint' 'int'
|   |       | | | `-ImplicitCastExpr 0x7fffd83854a8 <col:32, col:69> 'int' <IntegralCast>
|   |       | | |   `-CallExpr 0x7fffd8385460 <col:32, col:69> 'stbtt_uint16':'unsigned short'
|   |       | | |     |-ImplicitCastExpr 0x7fffd8385448 <col:32> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       | | |     | `-DeclRefExpr 0x7fffd83852b0 <col:32> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       | | |     `-BinaryOperator 0x7fffd8385420 <col:41, col:68> 'stbtt_uint8 *' '+'
|   |       | | |       |-BinaryOperator 0x7fffd8385358 <col:41, col:48> 'stbtt_uint8 *' '+'
|   |       | | |       | |-ImplicitCastExpr 0x7fffd8385328 <col:41> 'stbtt_uint8 *' <LValueToRValue>
|   |       | | |       | | `-DeclRefExpr 0x7fffd83852d8 <col:41> 'stbtt_uint8 *' lvalue Var 0x7fffd8382ab0 'data' 'stbtt_uint8 *'
|   |       | | |       | `-ImplicitCastExpr 0x7fffd8385340 <col:48> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       | | |       |   `-DeclRefExpr 0x7fffd8385300 <col:48> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd83850d8 'search' 'stbtt_uint32':'unsigned int'
|   |       | | |       `-BinaryOperator 0x7fffd83853f8 <col:57, col:68> 'int' '*'
|   |       | | |         |-ImplicitCastExpr 0x7fffd83853e0 <col:57> 'int' <IntegralCast>
|   |       | | |         | `-ImplicitCastExpr 0x7fffd83853c8 <col:57> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       | | |         |   `-DeclRefExpr 0x7fffd8385380 <col:57> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8384d50 'rangeShift' 'stbtt_uint16':'unsigned short'
|   |       | | |         `-IntegerLiteral 0x7fffd83853a8 <col:68> 'int' 2
|   |       | | |-CompoundAssignOperator 0x7fffd83855c8 <line:1527:10, col:31> 'stbtt_uint32':'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |       | | | |-DeclRefExpr 0x7fffd83854e8 <col:10> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd83850d8 'search' 'stbtt_uint32':'unsigned int'
|   |       | | | `-ImplicitCastExpr 0x7fffd83855b0 <col:20, col:31> 'unsigned int' <IntegralCast>
|   |       | | |   `-BinaryOperator 0x7fffd8385588 <col:20, col:31> 'int' '*'
|   |       | | |     |-ImplicitCastExpr 0x7fffd8385570 <col:20> 'int' <IntegralCast>
|   |       | | |     | `-ImplicitCastExpr 0x7fffd8385558 <col:20> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       | | |     |   `-DeclRefExpr 0x7fffd8385510 <col:20> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8384d50 'rangeShift' 'stbtt_uint16':'unsigned short'
|   |       | | |     `-IntegerLiteral 0x7fffd8385538 <col:31> 'int' 2
|   |       | | `-<<<NULL>>>
|   |       | |-CompoundAssignOperator 0x7fffd8385698 <line:1530:7, col:17> 'stbtt_uint32':'unsigned int' '-=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |       | | |-DeclRefExpr 0x7fffd8385638 <col:7> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd83850d8 'search' 'stbtt_uint32':'unsigned int'
|   |       | | `-ImplicitCastExpr 0x7fffd8385680 <col:17> 'unsigned int' <IntegralCast>
|   |       | |   `-IntegerLiteral 0x7fffd8385660 <col:17> 'int' 2
|   |       | |-WhileStmt 0x7fffd8385d08 <line:1531:7, line:1538:7>
|   |       | | |-<<<NULL>>>
|   |       | | |-ImplicitCastExpr 0x7fffd83856f8 <line:1531:14> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       | | | `-DeclRefExpr 0x7fffd83856d0 <col:14> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8384b68 'entrySelector' 'stbtt_uint16':'unsigned short'
|   |       | | `-CompoundStmt 0x7fffd8385cd0 <col:29, line:1538:7>
|   |       | |   |-DeclStmt 0x7fffd8385780 <line:1532:10, col:26>
|   |       | |   | `-VarDecl 0x7fffd8385720 <col:10, col:23> col:23 used end 'stbtt_uint16':'unsigned short'
|   |       | |   |-CompoundAssignOperator 0x7fffd8385810 <line:1533:10, col:26> 'stbtt_uint16':'unsigned short' '>>=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       | |   | |-DeclRefExpr 0x7fffd8385798 <col:10> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8384908 'searchRange' 'stbtt_uint16':'unsigned short'
|   |       | |   | `-IntegerLiteral 0x7fffd83857c0 <col:26> 'int' 1
|   |       | |   |-BinaryOperator 0x7fffd8385a50 <line:1534:10, col:54> 'stbtt_uint16':'unsigned short' '='
|   |       | |   | |-DeclRefExpr 0x7fffd8385848 <col:10> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8385720 'end' 'stbtt_uint16':'unsigned short'
|   |       | |   | `-CallExpr 0x7fffd8385a20 <col:16, col:54> 'stbtt_uint16':'unsigned short'
|   |       | |   |   |-ImplicitCastExpr 0x7fffd8385a08 <col:16> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       | |   |   | `-DeclRefExpr 0x7fffd8385870 <col:16> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       | |   |   `-BinaryOperator 0x7fffd83859e0 <col:25, col:53> 'stbtt_uint8 *' '+'
|   |       | |   |     |-BinaryOperator 0x7fffd8385918 <col:25, col:32> 'stbtt_uint8 *' '+'
|   |       | |   |     | |-ImplicitCastExpr 0x7fffd83858e8 <col:25> 'stbtt_uint8 *' <LValueToRValue>
|   |       | |   |     | | `-DeclRefExpr 0x7fffd8385898 <col:25> 'stbtt_uint8 *' lvalue Var 0x7fffd8382ab0 'data' 'stbtt_uint8 *'
|   |       | |   |     | `-ImplicitCastExpr 0x7fffd8385900 <col:32> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       | |   |     |   `-DeclRefExpr 0x7fffd83858c0 <col:32> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd83850d8 'search' 'stbtt_uint32':'unsigned int'
|   |       | |   |     `-BinaryOperator 0x7fffd83859b8 <col:41, col:53> 'int' '*'
|   |       | |   |       |-ImplicitCastExpr 0x7fffd83859a0 <col:41> 'int' <IntegralCast>
|   |       | |   |       | `-ImplicitCastExpr 0x7fffd8385988 <col:41> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       | |   |       |   `-DeclRefExpr 0x7fffd8385940 <col:41> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8384908 'searchRange' 'stbtt_uint16':'unsigned short'
|   |       | |   |       `-IntegerLiteral 0x7fffd8385968 <col:53> 'int' 2
|   |       | |   |-IfStmt 0x7fffd8385c50 <line:1535:10, line:1536:35>
|   |       | |   | |-<<<NULL>>>
|   |       | |   | |-<<<NULL>>>
|   |       | |   | |-BinaryOperator 0x7fffd8385b10 <line:1535:14, col:34> 'int' '>'
|   |       | |   | | |-ImplicitCastExpr 0x7fffd8385ac8 <col:14> 'int' <LValueToRValue>
|   |       | |   | | | `-DeclRefExpr 0x7fffd8385a78 <col:14> 'int' lvalue ParmVar 0x7fffd8382958 'unicode_codepoint' 'int'
|   |       | |   | | `-ImplicitCastExpr 0x7fffd8385af8 <col:34> 'int' <IntegralCast>
|   |       | |   | |   `-ImplicitCastExpr 0x7fffd8385ae0 <col:34> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       | |   | |     `-DeclRefExpr 0x7fffd8385aa0 <col:34> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8385720 'end' 'stbtt_uint16':'unsigned short'
|   |       | |   | |-CompoundAssignOperator 0x7fffd8385c18 <line:1536:13, col:35> 'stbtt_uint32':'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |       | |   | | |-DeclRefExpr 0x7fffd8385b38 <col:13> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd83850d8 'search' 'stbtt_uint32':'unsigned int'
|   |       | |   | | `-ImplicitCastExpr 0x7fffd8385c00 <col:23, col:35> 'unsigned int' <IntegralCast>
|   |       | |   | |   `-BinaryOperator 0x7fffd8385bd8 <col:23, col:35> 'int' '*'
|   |       | |   | |     |-ImplicitCastExpr 0x7fffd8385bc0 <col:23> 'int' <IntegralCast>
|   |       | |   | |     | `-ImplicitCastExpr 0x7fffd8385ba8 <col:23> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       | |   | |     |   `-DeclRefExpr 0x7fffd8385b60 <col:23> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8384908 'searchRange' 'stbtt_uint16':'unsigned short'
|   |       | |   | |     `-IntegerLiteral 0x7fffd8385b88 <col:35> 'int' 2
|   |       | |   | `-<<<NULL>>>
|   |       | |   `-UnaryOperator 0x7fffd8385cb0 <line:1537:10, col:12> 'stbtt_uint16':'unsigned short' prefix '--'
|   |       | |     `-DeclRefExpr 0x7fffd8385c88 <col:12> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8384b68 'entrySelector' 'stbtt_uint16':'unsigned short'
|   |       | |-CompoundAssignOperator 0x7fffd8385d88 <line:1539:7, col:17> 'stbtt_uint32':'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|   |       | | |-DeclRefExpr 0x7fffd8385d28 <col:7> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd83850d8 'search' 'stbtt_uint32':'unsigned int'
|   |       | | `-ImplicitCastExpr 0x7fffd8385d70 <col:17> 'unsigned int' <IntegralCast>
|   |       | |   `-IntegerLiteral 0x7fffd8385d50 <col:17> 'int' 2
|   |       | `-CompoundStmt 0x7fffd8387f00 <line:1541:7, line:1555:7>
|   |       |   |-DeclStmt 0x7fffd8385eb8 <line:1542:10, col:36>
|   |       |   | |-VarDecl 0x7fffd8385dd0 <col:10, col:23> col:23 used offset 'stbtt_uint16':'unsigned short'
|   |       |   | `-VarDecl 0x7fffd8385e40 <col:10, col:31> col:31 used start 'stbtt_uint16':'unsigned short'
|   |       |   |-DeclStmt 0x7fffd83860d8 <line:1543:10, col:71>
|   |       |   | `-VarDecl 0x7fffd8385ee0 <col:10, col:70> col:23 used item 'stbtt_uint16':'unsigned short' cinit
|   |       |   |   `-CStyleCastExpr 0x7fffd83860b0 <col:30, col:70> 'stbtt_uint16':'unsigned short' <IntegralCast>
|   |       |   |     `-ParenExpr 0x7fffd8386090 <col:45, col:70> 'unsigned int'
|   |       |   |       `-BinaryOperator 0x7fffd8386028 <col:46, col:69> 'unsigned int' '>>'
|   |       |   |         |-ParenExpr 0x7fffd8385fe8 <col:46, col:64> 'unsigned int'
|   |       |   |         | `-BinaryOperator 0x7fffd8385fc0 <col:47, col:56> 'unsigned int' '-'
|   |       |   |         |   |-ImplicitCastExpr 0x7fffd8385f90 <col:47> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       |   |         |   | `-DeclRefExpr 0x7fffd8385f40 <col:47> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd83850d8 'search' 'stbtt_uint32':'unsigned int'
|   |       |   |         |   `-ImplicitCastExpr 0x7fffd8385fa8 <col:56> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       |   |         |     `-DeclRefExpr 0x7fffd8385f68 <col:56> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8384fb0 'endCount' 'stbtt_uint32':'unsigned int'
|   |       |   |         `-IntegerLiteral 0x7fffd8386008 <col:69> 'int' 1
|   |       |   |-ParenExpr 0x7fffd8386bc8 </usr/include/assert.h:108:3, line:113:7> 'void'
|   |       |   | `-BinaryOperator 0x7fffd8386ba0 <line:108:4, line:113:6> 'void' ','
|   |       |   |   |-CStyleCastExpr 0x7fffd8386600 <line:108:4, col:33> 'void' <ToVoid>
|   |       |   |   | `-UnaryExprOrTypeTraitExpr 0x7fffd83865d0 <col:11, col:33> 'unsigned long' sizeof
|   |       |   |   |   `-ParenExpr 0x7fffd83865b0 <col:18, col:33> 'int'
|   |       |   |   |     `-ConditionalOperator 0x7fffd8386580 <col:19, col:32> 'int'
|   |       |   |   |       |-ParenExpr 0x7fffd8386520 <col:19, col:24> 'int'
|   |       |   |   |       | `-BinaryOperator 0x7fffd83864f8 <././stb/stb_truetype.h:1545:23, col:77> 'int' '<='
|   |       |   |   |       |   |-ImplicitCastExpr 0x7fffd83864c8 <col:23> 'int' <LValueToRValue>
|   |       |   |   |       |   | `-DeclRefExpr 0x7fffd83860f0 <col:23> 'int' lvalue ParmVar 0x7fffd8382958 'unicode_codepoint' 'int'
|   |       |   |   |       |   `-ImplicitCastExpr 0x7fffd83864e0 <col:44, col:77> 'int' <IntegralCast>
|   |       |   |   |       |     `-CallExpr 0x7fffd8386498 <col:44, col:77> 'stbtt_uint16':'unsigned short'
|   |       |   |   |       |       |-ImplicitCastExpr 0x7fffd8386480 <col:44> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       |   |   |       |       | `-DeclRefExpr 0x7fffd8386118 <col:44> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       |   |   |       |       `-BinaryOperator 0x7fffd8386458 <col:53, col:73> 'stbtt_uint8 *' '+'
|   |       |   |   |       |         |-BinaryOperator 0x7fffd83861c0 <col:53, col:60> 'stbtt_uint8 *' '+'
|   |       |   |   |       |         | |-ImplicitCastExpr 0x7fffd8386190 <col:53> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |   |       |         | | `-DeclRefExpr 0x7fffd8386140 <col:53> 'stbtt_uint8 *' lvalue Var 0x7fffd8382ab0 'data' 'stbtt_uint8 *'
|   |       |   |   |       |         | `-ImplicitCastExpr 0x7fffd83861a8 <col:60> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       |   |   |       |         |   `-DeclRefExpr 0x7fffd8386168 <col:60> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8384fb0 'endCount' 'stbtt_uint32':'unsigned int'
|   |       |   |   |       |         `-BinaryOperator 0x7fffd8386430 <col:71, col:73> 'int' '*'
|   |       |   |   |       |           |-IntegerLiteral 0x7fffd83861e8 <col:71> 'int' 2
|   |       |   |   |       |           `-ImplicitCastExpr 0x7fffd8386418 <col:73> 'int' <IntegralCast>
|   |       |   |   |       |             `-ImplicitCastExpr 0x7fffd8386400 <col:73> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |   |       |               `-DeclRefExpr 0x7fffd8386208 <col:73> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8385ee0 'item' 'stbtt_uint16':'unsigned short'
|   |       |   |   |       |-IntegerLiteral 0x7fffd8386540 </usr/include/assert.h:108:28> 'int' 1
|   |       |   |   |       `-IntegerLiteral 0x7fffd8386560 <col:32> 'int' 0
|   |       |   |   `-UnaryOperator 0x7fffd8386b80 <col:36, line:113:6> 'void' prefix '__extension__'
|   |       |   |     `-StmtExpr 0x7fffd8386b60 <line:108:50, line:113:6> 'void'
|   |       |   |       `-CompoundStmt 0x7fffd8386b48 <line:108:51, line:113:5>
|   |       |   |         `-IfStmt 0x7fffd8386b10 <line:109:7, line:112:68>
|   |       |   |           |-<<<NULL>>>
|   |       |   |           |-<<<NULL>>>
|   |       |   |           |-BinaryOperator 0x7fffd8386860 <././stb/stb_truetype.h:1545:23, col:77> 'int' '<='
|   |       |   |           | |-ImplicitCastExpr 0x7fffd8386830 <col:23> 'int' <LValueToRValue>
|   |       |   |           | | `-DeclRefExpr 0x7fffd8386628 <col:23> 'int' lvalue ParmVar 0x7fffd8382958 'unicode_codepoint' 'int'
|   |       |   |           | `-ImplicitCastExpr 0x7fffd8386848 <col:44, col:77> 'int' <IntegralCast>
|   |       |   |           |   `-CallExpr 0x7fffd8386800 <col:44, col:77> 'stbtt_uint16':'unsigned short'
|   |       |   |           |     |-ImplicitCastExpr 0x7fffd83867e8 <col:44> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       |   |           |     | `-DeclRefExpr 0x7fffd8386650 <col:44> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       |   |           |     `-BinaryOperator 0x7fffd83867c0 <col:53, col:73> 'stbtt_uint8 *' '+'
|   |       |   |           |       |-BinaryOperator 0x7fffd83866f8 <col:53, col:60> 'stbtt_uint8 *' '+'
|   |       |   |           |       | |-ImplicitCastExpr 0x7fffd83866c8 <col:53> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |           |       | | `-DeclRefExpr 0x7fffd8386678 <col:53> 'stbtt_uint8 *' lvalue Var 0x7fffd8382ab0 'data' 'stbtt_uint8 *'
|   |       |   |           |       | `-ImplicitCastExpr 0x7fffd83866e0 <col:60> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       |   |           |       |   `-DeclRefExpr 0x7fffd83866a0 <col:60> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8384fb0 'endCount' 'stbtt_uint32':'unsigned int'
|   |       |   |           |       `-BinaryOperator 0x7fffd8386798 <col:71, col:73> 'int' '*'
|   |       |   |           |         |-IntegerLiteral 0x7fffd8386720 <col:71> 'int' 2
|   |       |   |           |         `-ImplicitCastExpr 0x7fffd8386780 <col:73> 'int' <IntegralCast>
|   |       |   |           |           `-ImplicitCastExpr 0x7fffd8386768 <col:73> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |           |             `-DeclRefExpr 0x7fffd8386740 <col:73> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8385ee0 'item' 'stbtt_uint16':'unsigned short'
|   |       |   |           |-NullStmt 0x7fffd8386888 </usr/include/assert.h:110:9>
|   |       |   |           `-CallExpr 0x7fffd8386a38 <line:112:9, col:68> 'void'
|   |       |   |             |-ImplicitCastExpr 0x7fffd8386a20 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |       |   |             | `-DeclRefExpr 0x7fffd8386898 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |       |   |             |-ImplicitCastExpr 0x7fffd8386a98 <<scratch space>:246:1> 'const char *' <BitCast>
|   |       |   |             | `-ImplicitCastExpr 0x7fffd8386a80 <col:1> 'char *' <ArrayToPointerDecay>
|   |       |   |             |   `-StringLiteral 0x7fffd83868c0 <col:1> 'char [56]' lvalue "unicode_codepoint <= ttUSHORT(data + endCount + 2*item)"
|   |       |   |             |-ImplicitCastExpr 0x7fffd8386ac8 <line:247:1> 'const char *' <BitCast>
|   |       |   |             | `-ImplicitCastExpr 0x7fffd8386ab0 <col:1> 'char *' <ArrayToPointerDecay>
|   |       |   |             |   `-StringLiteral 0x7fffd8386920 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |       |   |             |-ImplicitCastExpr 0x7fffd8386ae0 <line:248:1> 'unsigned int' <IntegralCast>
|   |       |   |             | `-IntegerLiteral 0x7fffd8386960 <col:1> 'int' 1545
|   |       |   |             `-ImplicitCastExpr 0x7fffd8386af8 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |       |   |               `-UnaryOperator 0x7fffd8386a00 <col:30, col:44> 'const char [54]' lvalue prefix '__extension__'
|   |       |   |                 `-PredefinedExpr 0x7fffd83869e0 <col:44> 'const char [54]' lvalue __PRETTY_FUNCTION__
|   |       |   |                   `-StringLiteral 0x7fffd8386980 <col:44> 'const char [54]' lvalue "int stbtt_FindGlyphIndex(const stbtt_fontinfo *, int)"
|   |       |   |-BinaryOperator 0x7fffd8386f48 <././stb/stb_truetype.h:1546:10, col:74> 'stbtt_uint16':'unsigned short' '='
|   |       |   | |-DeclRefExpr 0x7fffd8386be8 <col:10> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8385e40 'start' 'stbtt_uint16':'unsigned short'
|   |       |   | `-CallExpr 0x7fffd8386f18 <col:18, col:74> 'stbtt_uint16':'unsigned short'
|   |       |   |   |-ImplicitCastExpr 0x7fffd8386f00 <col:18> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       |   |   | `-DeclRefExpr 0x7fffd8386c10 <col:18> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       |   |   `-BinaryOperator 0x7fffd8386ed8 <col:27, col:70> 'stbtt_uint8 *' '+'
|   |       |   |     |-BinaryOperator 0x7fffd8386e10 <col:27, col:64> 'stbtt_uint8 *' '+'
|   |       |   |     | |-BinaryOperator 0x7fffd8386dc8 <col:27, col:60> 'stbtt_uint8 *' '+'
|   |       |   |     | | |-BinaryOperator 0x7fffd8386d00 <col:27, col:46> 'stbtt_uint8 *' '+'
|   |       |   |     | | | |-BinaryOperator 0x7fffd8386cb8 <col:27, col:34> 'stbtt_uint8 *' '+'
|   |       |   |     | | | | |-ImplicitCastExpr 0x7fffd8386c88 <col:27> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |     | | | | | `-DeclRefExpr 0x7fffd8386c38 <col:27> 'stbtt_uint8 *' lvalue Var 0x7fffd8382ab0 'data' 'stbtt_uint8 *'
|   |       |   |     | | | | `-ImplicitCastExpr 0x7fffd8386ca0 <col:34> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       |   |     | | | |   `-DeclRefExpr 0x7fffd8386c60 <col:34> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8382bc8 'index_map' 'stbtt_uint32':'unsigned int'
|   |       |   |     | | | `-IntegerLiteral 0x7fffd8386ce0 <col:46> 'int' 14
|   |       |   |     | | `-BinaryOperator 0x7fffd8386da0 <col:51, col:60> 'int' '*'
|   |       |   |     | |   |-ImplicitCastExpr 0x7fffd8386d88 <col:51> 'int' <IntegralCast>
|   |       |   |     | |   | `-ImplicitCastExpr 0x7fffd8386d70 <col:51> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |     | |   |   `-DeclRefExpr 0x7fffd8386d28 <col:51> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83846a8 'segcount' 'stbtt_uint16':'unsigned short'
|   |       |   |     | |   `-IntegerLiteral 0x7fffd8386d50 <col:60> 'int' 2
|   |       |   |     | `-IntegerLiteral 0x7fffd8386df0 <col:64> 'int' 2
|   |       |   |     `-BinaryOperator 0x7fffd8386eb0 <col:68, col:70> 'int' '*'
|   |       |   |       |-IntegerLiteral 0x7fffd8386e38 <col:68> 'int' 2
|   |       |   |       `-ImplicitCastExpr 0x7fffd8386e98 <col:70> 'int' <IntegralCast>
|   |       |   |         `-ImplicitCastExpr 0x7fffd8386e80 <col:70> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |           `-DeclRefExpr 0x7fffd8386e58 <col:70> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8385ee0 'item' 'stbtt_uint16':'unsigned short'
|   |       |   |-IfStmt 0x7fffd8387068 <line:1547:10, line:1548:20>
|   |       |   | |-<<<NULL>>>
|   |       |   | |-<<<NULL>>>
|   |       |   | |-BinaryOperator 0x7fffd8387008 <line:1547:14, col:34> 'int' '<'
|   |       |   | | |-ImplicitCastExpr 0x7fffd8386fc0 <col:14> 'int' <LValueToRValue>
|   |       |   | | | `-DeclRefExpr 0x7fffd8386f70 <col:14> 'int' lvalue ParmVar 0x7fffd8382958 'unicode_codepoint' 'int'
|   |       |   | | `-ImplicitCastExpr 0x7fffd8386ff0 <col:34> 'int' <IntegralCast>
|   |       |   | |   `-ImplicitCastExpr 0x7fffd8386fd8 <col:34> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   | |     `-DeclRefExpr 0x7fffd8386f98 <col:34> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8385e40 'start' 'stbtt_uint16':'unsigned short'
|   |       |   | |-ReturnStmt 0x7fffd8387050 <line:1548:13, col:20>
|   |       |   | | `-IntegerLiteral 0x7fffd8387030 <col:20> 'int' 0
|   |       |   | `-<<<NULL>>>
|   |       |   |-BinaryOperator 0x7fffd8387400 <line:1550:10, col:75> 'stbtt_uint16':'unsigned short' '='
|   |       |   | |-DeclRefExpr 0x7fffd83870a0 <col:10> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8385dd0 'offset' 'stbtt_uint16':'unsigned short'
|   |       |   | `-CallExpr 0x7fffd83873d0 <col:19, col:75> 'stbtt_uint16':'unsigned short'
|   |       |   |   |-ImplicitCastExpr 0x7fffd83873b8 <col:19> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       |   |   | `-DeclRefExpr 0x7fffd83870c8 <col:19> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       |   |   `-BinaryOperator 0x7fffd8387390 <col:28, col:71> 'stbtt_uint8 *' '+'
|   |       |   |     |-BinaryOperator 0x7fffd83872c8 <col:28, col:65> 'stbtt_uint8 *' '+'
|   |       |   |     | |-BinaryOperator 0x7fffd8387280 <col:28, col:61> 'stbtt_uint8 *' '+'
|   |       |   |     | | |-BinaryOperator 0x7fffd83871b8 <col:28, col:47> 'stbtt_uint8 *' '+'
|   |       |   |     | | | |-BinaryOperator 0x7fffd8387170 <col:28, col:35> 'stbtt_uint8 *' '+'
|   |       |   |     | | | | |-ImplicitCastExpr 0x7fffd8387140 <col:28> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |     | | | | | `-DeclRefExpr 0x7fffd83870f0 <col:28> 'stbtt_uint8 *' lvalue Var 0x7fffd8382ab0 'data' 'stbtt_uint8 *'
|   |       |   |     | | | | `-ImplicitCastExpr 0x7fffd8387158 <col:35> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       |   |     | | | |   `-DeclRefExpr 0x7fffd8387118 <col:35> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8382bc8 'index_map' 'stbtt_uint32':'unsigned int'
|   |       |   |     | | | `-IntegerLiteral 0x7fffd8387198 <col:47> 'int' 14
|   |       |   |     | | `-BinaryOperator 0x7fffd8387258 <col:52, col:61> 'int' '*'
|   |       |   |     | |   |-ImplicitCastExpr 0x7fffd8387240 <col:52> 'int' <IntegralCast>
|   |       |   |     | |   | `-ImplicitCastExpr 0x7fffd8387228 <col:52> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |     | |   |   `-DeclRefExpr 0x7fffd83871e0 <col:52> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83846a8 'segcount' 'stbtt_uint16':'unsigned short'
|   |       |   |     | |   `-IntegerLiteral 0x7fffd8387208 <col:61> 'int' 6
|   |       |   |     | `-IntegerLiteral 0x7fffd83872a8 <col:65> 'int' 2
|   |       |   |     `-BinaryOperator 0x7fffd8387368 <col:69, col:71> 'int' '*'
|   |       |   |       |-IntegerLiteral 0x7fffd83872f0 <col:69> 'int' 2
|   |       |   |       `-ImplicitCastExpr 0x7fffd8387350 <col:71> 'int' <IntegralCast>
|   |       |   |         `-ImplicitCastExpr 0x7fffd8387338 <col:71> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |           `-DeclRefExpr 0x7fffd8387310 <col:71> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8385ee0 'item' 'stbtt_uint16':'unsigned short'
|   |       |   |-IfStmt 0x7fffd8387990 <line:1551:10, line:1552:112>
|   |       |   | |-<<<NULL>>>
|   |       |   | |-<<<NULL>>>
|   |       |   | |-BinaryOperator 0x7fffd83874a0 <line:1551:14, col:24> 'int' '=='
|   |       |   | | |-ImplicitCastExpr 0x7fffd8387488 <col:14> 'int' <IntegralCast>
|   |       |   | | | `-ImplicitCastExpr 0x7fffd8387470 <col:14> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   | | |   `-DeclRefExpr 0x7fffd8387428 <col:14> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8385dd0 'offset' 'stbtt_uint16':'unsigned short'
|   |       |   | | `-IntegerLiteral 0x7fffd8387450 <col:24> 'int' 0
|   |       |   | |-ReturnStmt 0x7fffd8387978 <line:1552:13, col:112>
|   |       |   | | `-ImplicitCastExpr 0x7fffd8387960 <col:20, col:112> 'int' <IntegralCast>
|   |       |   | |   `-CStyleCastExpr 0x7fffd8387938 <col:20, col:112> 'stbtt_uint16':'unsigned short' <IntegralCast>
|   |       |   | |     `-ParenExpr 0x7fffd8387918 <col:35, col:112> 'int'
|   |       |   | |       `-BinaryOperator 0x7fffd83878b0 <col:36, col:111> 'int' '+'
|   |       |   | |         |-ImplicitCastExpr 0x7fffd8387880 <col:36> 'int' <LValueToRValue>
|   |       |   | |         | `-DeclRefExpr 0x7fffd83874c8 <col:36> 'int' lvalue ParmVar 0x7fffd8382958 'unicode_codepoint' 'int'
|   |       |   | |         `-ImplicitCastExpr 0x7fffd8387898 <col:56, col:111> 'int' <IntegralCast>
|   |       |   | |           `-CallExpr 0x7fffd8387850 <col:56, col:111> 'stbtt_int16':'short'
|   |       |   | |             |-ImplicitCastExpr 0x7fffd8387838 <col:56> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       |   | |             | `-DeclRefExpr 0x7fffd83874f0 <col:56> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |       |   | |             `-BinaryOperator 0x7fffd83877b8 <col:64, col:107> 'stbtt_uint8 *' '+'
|   |       |   | |               |-BinaryOperator 0x7fffd83876f0 <col:64, col:101> 'stbtt_uint8 *' '+'
|   |       |   | |               | |-BinaryOperator 0x7fffd83876a8 <col:64, col:97> 'stbtt_uint8 *' '+'
|   |       |   | |               | | |-BinaryOperator 0x7fffd83875e0 <col:64, col:83> 'stbtt_uint8 *' '+'
|   |       |   | |               | | | |-BinaryOperator 0x7fffd8387598 <col:64, col:71> 'stbtt_uint8 *' '+'
|   |       |   | |               | | | | |-ImplicitCastExpr 0x7fffd8387568 <col:64> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   | |               | | | | | `-DeclRefExpr 0x7fffd8387518 <col:64> 'stbtt_uint8 *' lvalue Var 0x7fffd8382ab0 'data' 'stbtt_uint8 *'
|   |       |   | |               | | | | `-ImplicitCastExpr 0x7fffd8387580 <col:71> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       |   | |               | | | |   `-DeclRefExpr 0x7fffd8387540 <col:71> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8382bc8 'index_map' 'stbtt_uint32':'unsigned int'
|   |       |   | |               | | | `-IntegerLiteral 0x7fffd83875c0 <col:83> 'int' 14
|   |       |   | |               | | `-BinaryOperator 0x7fffd8387680 <col:88, col:97> 'int' '*'
|   |       |   | |               | |   |-ImplicitCastExpr 0x7fffd8387668 <col:88> 'int' <IntegralCast>
|   |       |   | |               | |   | `-ImplicitCastExpr 0x7fffd8387650 <col:88> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   | |               | |   |   `-DeclRefExpr 0x7fffd8387608 <col:88> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83846a8 'segcount' 'stbtt_uint16':'unsigned short'
|   |       |   | |               | |   `-IntegerLiteral 0x7fffd8387630 <col:97> 'int' 4
|   |       |   | |               | `-IntegerLiteral 0x7fffd83876d0 <col:101> 'int' 2
|   |       |   | |               `-BinaryOperator 0x7fffd8387790 <col:105, col:107> 'int' '*'
|   |       |   | |                 |-IntegerLiteral 0x7fffd8387718 <col:105> 'int' 2
|   |       |   | |                 `-ImplicitCastExpr 0x7fffd8387778 <col:107> 'int' <IntegralCast>
|   |       |   | |                   `-ImplicitCastExpr 0x7fffd8387760 <col:107> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   | |                     `-DeclRefExpr 0x7fffd8387738 <col:107> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8385ee0 'item' 'stbtt_uint16':'unsigned short'
|   |       |   | `-<<<NULL>>>
|   |       |   `-ReturnStmt 0x7fffd8387ee8 <line:1554:10, col:112>
|   |       |     `-ImplicitCastExpr 0x7fffd8387ed0 <col:17, col:112> 'int' <IntegralCast>
|   |       |       `-CallExpr 0x7fffd8387ea0 <col:17, col:112> 'stbtt_uint16':'unsigned short'
|   |       |         |-ImplicitCastExpr 0x7fffd8387e88 <col:17> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       |         | `-DeclRefExpr 0x7fffd83879c8 <col:17> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       |         `-BinaryOperator 0x7fffd8387e60 <col:26, col:108> 'stbtt_uint8 *' '+'
|   |       |           |-BinaryOperator 0x7fffd8387d98 <col:26, col:102> 'stbtt_uint8 *' '+'
|   |       |           | |-BinaryOperator 0x7fffd8387d50 <col:26, col:98> 'stbtt_uint8 *' '+'
|   |       |           | | |-BinaryOperator 0x7fffd8387c88 <col:26, col:84> 'stbtt_uint8 *' '+'
|   |       |           | | | |-BinaryOperator 0x7fffd8387c40 <col:26, col:72> 'stbtt_uint8 *' '+'
|   |       |           | | | | |-BinaryOperator 0x7fffd8387bd8 <col:26, col:68> 'stbtt_uint8 *' '+'
|   |       |           | | | | | |-BinaryOperator 0x7fffd8387a88 <col:26, col:33> 'stbtt_uint8 *' '+'
|   |       |           | | | | | | |-ImplicitCastExpr 0x7fffd8387a40 <col:26> 'stbtt_uint8 *' <LValueToRValue>
|   |       |           | | | | | | | `-DeclRefExpr 0x7fffd83879f0 <col:26> 'stbtt_uint8 *' lvalue Var 0x7fffd8382ab0 'data' 'stbtt_uint8 *'
|   |       |           | | | | | | `-ImplicitCastExpr 0x7fffd8387a70 <col:33> 'int' <IntegralCast>
|   |       |           | | | | | |   `-ImplicitCastExpr 0x7fffd8387a58 <col:33> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |           | | | | | |     `-DeclRefExpr 0x7fffd8387a18 <col:33> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8385dd0 'offset' 'stbtt_uint16':'unsigned short'
|   |       |           | | | | | `-BinaryOperator 0x7fffd8387bb0 <col:42, col:68> 'int' '*'
|   |       |           | | | | |   |-ParenExpr 0x7fffd8387b70 <col:42, col:66> 'int'
|   |       |           | | | | |   | `-BinaryOperator 0x7fffd8387b48 <col:43, col:61> 'int' '-'
|   |       |           | | | | |   |   |-ImplicitCastExpr 0x7fffd8387b00 <col:43> 'int' <LValueToRValue>
|   |       |           | | | | |   |   | `-DeclRefExpr 0x7fffd8387ab0 <col:43> 'int' lvalue ParmVar 0x7fffd8382958 'unicode_codepoint' 'int'
|   |       |           | | | | |   |   `-ImplicitCastExpr 0x7fffd8387b30 <col:61> 'int' <IntegralCast>
|   |       |           | | | | |   |     `-ImplicitCastExpr 0x7fffd8387b18 <col:61> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |           | | | | |   |       `-DeclRefExpr 0x7fffd8387ad8 <col:61> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8385e40 'start' 'stbtt_uint16':'unsigned short'
|   |       |           | | | | |   `-IntegerLiteral 0x7fffd8387b90 <col:68> 'int' 2
|   |       |           | | | | `-ImplicitCastExpr 0x7fffd8387c28 <col:72> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       |           | | | |   `-DeclRefExpr 0x7fffd8387c00 <col:72> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8382bc8 'index_map' 'stbtt_uint32':'unsigned int'
|   |       |           | | | `-IntegerLiteral 0x7fffd8387c68 <col:84> 'int' 14
|   |       |           | | `-BinaryOperator 0x7fffd8387d28 <col:89, col:98> 'int' '*'
|   |       |           | |   |-ImplicitCastExpr 0x7fffd8387d10 <col:89> 'int' <IntegralCast>
|   |       |           | |   | `-ImplicitCastExpr 0x7fffd8387cf8 <col:89> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |           | |   |   `-DeclRefExpr 0x7fffd8387cb0 <col:89> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83846a8 'segcount' 'stbtt_uint16':'unsigned short'
|   |       |           | |   `-IntegerLiteral 0x7fffd8387cd8 <col:98> 'int' 6
|   |       |           | `-IntegerLiteral 0x7fffd8387d78 <col:102> 'int' 2
|   |       |           `-BinaryOperator 0x7fffd8387e38 <col:106, col:108> 'int' '*'
|   |       |             |-IntegerLiteral 0x7fffd8387dc0 <col:106> 'int' 2
|   |       |             `-ImplicitCastExpr 0x7fffd8387e20 <col:108> 'int' <IntegralCast>
|   |       |               `-ImplicitCastExpr 0x7fffd8387e08 <col:108> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |                 `-DeclRefExpr 0x7fffd8387de0 <col:108> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8385ee0 'item' 'stbtt_uint16':'unsigned short'
|   |       `-IfStmt 0x7fffd83897b8 <line:1556:11, line:1578:4>
|   |         |-<<<NULL>>>
|   |         |-<<<NULL>>>
|   |         |-BinaryOperator 0x7fffd8388100 <line:1556:15, col:41> 'int' '||'
|   |         | |-BinaryOperator 0x7fffd8388038 <col:15, col:25> 'int' '=='
|   |         | | |-ImplicitCastExpr 0x7fffd8388020 <col:15> 'int' <IntegralCast>
|   |         | | | `-ImplicitCastExpr 0x7fffd8388008 <col:15> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x7fffd8387fc0 <col:15> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8382cf8 'format' 'stbtt_uint16':'unsigned short'
|   |         | | `-IntegerLiteral 0x7fffd8387fe8 <col:25> 'int' 12
|   |         | `-BinaryOperator 0x7fffd83880d8 <col:31, col:41> 'int' '=='
|   |         |   |-ImplicitCastExpr 0x7fffd83880c0 <col:31> 'int' <IntegralCast>
|   |         |   | `-ImplicitCastExpr 0x7fffd83880a8 <col:31> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |         |   |   `-DeclRefExpr 0x7fffd8388060 <col:31> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8382cf8 'format' 'stbtt_uint16':'unsigned short'
|   |         |   `-IntegerLiteral 0x7fffd8388088 <col:41> 'int' 13
|   |         |-CompoundStmt 0x7fffd8389778 <col:45, line:1578:4>
|   |         | |-DeclStmt 0x7fffd83882f8 <line:1557:7, col:56>
|   |         | | `-VarDecl 0x7fffd8388138 <col:7, col:55> col:20 used ngroups 'stbtt_uint32':'unsigned int' cinit
|   |         | |   `-CallExpr 0x7fffd83882c8 <col:30, col:55> 'stbtt_uint32':'unsigned int'
|   |         | |     |-ImplicitCastExpr 0x7fffd83882b0 <col:30> 'stbtt_uint32 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |         | |     | `-DeclRefExpr 0x7fffd8388198 <col:30> 'stbtt_uint32 (stbtt_uint8 *)' Function 0x7fffd83712a0 'ttULONG' 'stbtt_uint32 (stbtt_uint8 *)'
|   |         | |     `-BinaryOperator 0x7fffd8388288 <col:38, col:53> 'stbtt_uint8 *' '+'
|   |         | |       |-BinaryOperator 0x7fffd8388240 <col:38, col:43> 'stbtt_uint8 *' '+'
|   |         | |       | |-ImplicitCastExpr 0x7fffd8388210 <col:38> 'stbtt_uint8 *' <LValueToRValue>
|   |         | |       | | `-DeclRefExpr 0x7fffd83881c0 <col:38> 'stbtt_uint8 *' lvalue Var 0x7fffd8382ab0 'data' 'stbtt_uint8 *'
|   |         | |       | `-ImplicitCastExpr 0x7fffd8388228 <col:43> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |         | |       |   `-DeclRefExpr 0x7fffd83881e8 <col:43> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8382bc8 'index_map' 'stbtt_uint32':'unsigned int'
|   |         | |       `-IntegerLiteral 0x7fffd8388268 <col:53> 'int' 12
|   |         | |-DeclStmt 0x7fffd8388428 <line:1558:7, col:27>
|   |         | | |-VarDecl 0x7fffd8388320 <col:7, col:19> col:19 used low 'stbtt_int32':'int'
|   |         | | `-VarDecl 0x7fffd8388390 <col:7, col:23> col:23 used high 'stbtt_int32':'int'
|   |         | |-BinaryOperator 0x7fffd8388488 <line:1559:7, col:13> 'stbtt_int32':'int' '='
|   |         | | |-DeclRefExpr 0x7fffd8388440 <col:7> 'stbtt_int32':'int' lvalue Var 0x7fffd8388320 'low' 'stbtt_int32':'int'
|   |         | | `-IntegerLiteral 0x7fffd8388468 <col:13> 'int' 0
|   |         | |-BinaryOperator 0x7fffd8388550 <col:16, col:36> 'stbtt_int32':'int' '='
|   |         | | |-DeclRefExpr 0x7fffd83884b0 <col:16> 'stbtt_int32':'int' lvalue Var 0x7fffd8388390 'high' 'stbtt_int32':'int'
|   |         | | `-CStyleCastExpr 0x7fffd8388528 <col:23, col:36> 'stbtt_int32':'int' <IntegralCast>
|   |         | |   `-ImplicitCastExpr 0x7fffd8388510 <col:36> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |         | |     `-DeclRefExpr 0x7fffd83884d8 <col:36> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8388138 'ngroups' 'stbtt_uint32':'unsigned int'
|   |         | |-WhileStmt 0x7fffd8389720 <line:1561:7, line:1576:7>
|   |         | | |-<<<NULL>>>
|   |         | | |-BinaryOperator 0x7fffd83885f8 <line:1561:14, col:20> 'int' '<'
|   |         | | | |-ImplicitCastExpr 0x7fffd83885c8 <col:14> 'stbtt_int32':'int' <LValueToRValue>
|   |         | | | | `-DeclRefExpr 0x7fffd8388578 <col:14> 'stbtt_int32':'int' lvalue Var 0x7fffd8388320 'low' 'stbtt_int32':'int'
|   |         | | | `-ImplicitCastExpr 0x7fffd83885e0 <col:20> 'stbtt_int32':'int' <LValueToRValue>
|   |         | | |   `-DeclRefExpr 0x7fffd83885a0 <col:20> 'stbtt_int32':'int' lvalue Var 0x7fffd8388390 'high' 'stbtt_int32':'int'
|   |         | | `-CompoundStmt 0x7fffd83896f0 <col:26, line:1576:7>
|   |         | |   |-DeclStmt 0x7fffd8388828 <line:1562:10, col:51>
|   |         | |   | `-VarDecl 0x7fffd8388630 <col:10, col:50> col:22 used mid 'stbtt_int32':'int' cinit
|   |         | |   |   `-BinaryOperator 0x7fffd8388800 <col:28, col:50> 'int' '+'
|   |         | |   |     |-ImplicitCastExpr 0x7fffd83887e8 <col:28> 'stbtt_int32':'int' <LValueToRValue>
|   |         | |   |     | `-DeclRefExpr 0x7fffd8388690 <col:28> 'stbtt_int32':'int' lvalue Var 0x7fffd8388320 'low' 'stbtt_int32':'int'
|   |         | |   |     `-ParenExpr 0x7fffd83887c8 <col:34, col:50> 'int'
|   |         | |   |       `-BinaryOperator 0x7fffd83887a0 <col:35, col:49> 'int' '>>'
|   |         | |   |         |-ParenExpr 0x7fffd8388760 <col:35, col:44> 'int'
|   |         | |   |         | `-BinaryOperator 0x7fffd8388738 <col:36, col:41> 'int' '-'
|   |         | |   |         |   |-ImplicitCastExpr 0x7fffd8388708 <col:36> 'stbtt_int32':'int' <LValueToRValue>
|   |         | |   |         |   | `-DeclRefExpr 0x7fffd83886b8 <col:36> 'stbtt_int32':'int' lvalue Var 0x7fffd8388390 'high' 'stbtt_int32':'int'
|   |         | |   |         |   `-ImplicitCastExpr 0x7fffd8388720 <col:41> 'stbtt_int32':'int' <LValueToRValue>
|   |         | |   |         |     `-DeclRefExpr 0x7fffd83886e0 <col:41> 'stbtt_int32':'int' lvalue Var 0x7fffd8388320 'low' 'stbtt_int32':'int'
|   |         | |   |         `-IntegerLiteral 0x7fffd8388780 <col:49> 'int' 1
|   |         | |   |-DeclStmt 0x7fffd8388ac0 <line:1563:10, col:69>
|   |         | |   | `-VarDecl 0x7fffd8388850 <col:10, col:68> col:23 used start_char 'stbtt_uint32':'unsigned int' cinit
|   |         | |   |   `-CallExpr 0x7fffd8388a90 <col:36, col:68> 'stbtt_uint32':'unsigned int'
|   |         | |   |     |-ImplicitCastExpr 0x7fffd8388a78 <col:36> 'stbtt_uint32 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |         | |   |     | `-DeclRefExpr 0x7fffd83888b0 <col:36> 'stbtt_uint32 (stbtt_uint8 *)' Function 0x7fffd83712a0 'ttULONG' 'stbtt_uint32 (stbtt_uint8 *)'
|   |         | |   |     `-BinaryOperator 0x7fffd8388a50 <col:44, col:66> 'stbtt_uint8 *' '+'
|   |         | |   |       |-BinaryOperator 0x7fffd83889a0 <col:44, col:59> 'stbtt_uint8 *' '+'
|   |         | |   |       | |-BinaryOperator 0x7fffd8388958 <col:44, col:49> 'stbtt_uint8 *' '+'
|   |         | |   |       | | |-ImplicitCastExpr 0x7fffd8388928 <col:44> 'stbtt_uint8 *' <LValueToRValue>
|   |         | |   |       | | | `-DeclRefExpr 0x7fffd83888d8 <col:44> 'stbtt_uint8 *' lvalue Var 0x7fffd8382ab0 'data' 'stbtt_uint8 *'
|   |         | |   |       | | `-ImplicitCastExpr 0x7fffd8388940 <col:49> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |         | |   |       | |   `-DeclRefExpr 0x7fffd8388900 <col:49> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8382bc8 'index_map' 'stbtt_uint32':'unsigned int'
|   |         | |   |       | `-IntegerLiteral 0x7fffd8388980 <col:59> 'int' 16
|   |         | |   |       `-BinaryOperator 0x7fffd8388a28 <col:62, col:66> 'int' '*'
|   |         | |   |         |-ImplicitCastExpr 0x7fffd8388a10 <col:62> 'stbtt_int32':'int' <LValueToRValue>
|   |         | |   |         | `-DeclRefExpr 0x7fffd83889c8 <col:62> 'stbtt_int32':'int' lvalue Var 0x7fffd8388630 'mid' 'stbtt_int32':'int'
|   |         | |   |         `-IntegerLiteral 0x7fffd83889f0 <col:66> 'int' 12
|   |         | |   |-DeclStmt 0x7fffd8388da0 <line:1564:10, col:69>
|   |         | |   | `-VarDecl 0x7fffd8388ae8 <col:10, col:68> col:23 used end_char 'stbtt_uint32':'unsigned int' cinit
|   |         | |   |   `-CallExpr 0x7fffd8388d70 <col:34, col:68> 'stbtt_uint32':'unsigned int'
|   |         | |   |     |-ImplicitCastExpr 0x7fffd8388d58 <col:34> 'stbtt_uint32 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |         | |   |     | `-DeclRefExpr 0x7fffd8388b48 <col:34> 'stbtt_uint32 (stbtt_uint8 *)' Function 0x7fffd83712a0 'ttULONG' 'stbtt_uint32 (stbtt_uint8 *)'
|   |         | |   |     `-BinaryOperator 0x7fffd8388d30 <col:42, col:67> 'stbtt_uint8 *' '+'
|   |         | |   |       |-BinaryOperator 0x7fffd8388ce8 <col:42, col:64> 'stbtt_uint8 *' '+'
|   |         | |   |       | |-BinaryOperator 0x7fffd8388c38 <col:42, col:57> 'stbtt_uint8 *' '+'
|   |         | |   |       | | |-BinaryOperator 0x7fffd8388bf0 <col:42, col:47> 'stbtt_uint8 *' '+'
|   |         | |   |       | | | |-ImplicitCastExpr 0x7fffd8388bc0 <col:42> 'stbtt_uint8 *' <LValueToRValue>
|   |         | |   |       | | | | `-DeclRefExpr 0x7fffd8388b70 <col:42> 'stbtt_uint8 *' lvalue Var 0x7fffd8382ab0 'data' 'stbtt_uint8 *'
|   |         | |   |       | | | `-ImplicitCastExpr 0x7fffd8388bd8 <col:47> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |         | |   |       | | |   `-DeclRefExpr 0x7fffd8388b98 <col:47> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8382bc8 'index_map' 'stbtt_uint32':'unsigned int'
|   |         | |   |       | | `-IntegerLiteral 0x7fffd8388c18 <col:57> 'int' 16
|   |         | |   |       | `-BinaryOperator 0x7fffd8388cc0 <col:60, col:64> 'int' '*'
|   |         | |   |       |   |-ImplicitCastExpr 0x7fffd8388ca8 <col:60> 'stbtt_int32':'int' <LValueToRValue>
|   |         | |   |       |   | `-DeclRefExpr 0x7fffd8388c60 <col:60> 'stbtt_int32':'int' lvalue Var 0x7fffd8388630 'mid' 'stbtt_int32':'int'
|   |         | |   |       |   `-IntegerLiteral 0x7fffd8388c88 <col:64> 'int' 12
|   |         | |   |       `-IntegerLiteral 0x7fffd8388d10 <col:67> 'int' 4
|   |         | |   `-IfStmt 0x7fffd83896b8 <line:1565:10, line:1575:10>
|   |         | |     |-<<<NULL>>>
|   |         | |     |-<<<NULL>>>
|   |         | |     |-BinaryOperator 0x7fffd8388e70 <line:1565:14, col:49> 'int' '<'
|   |         | |     | |-CStyleCastExpr 0x7fffd8388e08 <col:14, col:29> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |         | |     | | `-ImplicitCastExpr 0x7fffd8388df0 <col:29> 'int' <LValueToRValue>
|   |         | |     | |   `-DeclRefExpr 0x7fffd8388db8 <col:29> 'int' lvalue ParmVar 0x7fffd8382958 'unicode_codepoint' 'int'
|   |         | |     | `-ImplicitCastExpr 0x7fffd8388e58 <col:49> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |         | |     |   `-DeclRefExpr 0x7fffd8388e30 <col:49> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8388850 'start_char' 'stbtt_uint32':'unsigned int'
|   |         | |     |-BinaryOperator 0x7fffd8388f00 <line:1566:13, col:20> 'stbtt_int32':'int' '='
|   |         | |     | |-DeclRefExpr 0x7fffd8388e98 <col:13> 'stbtt_int32':'int' lvalue Var 0x7fffd8388390 'high' 'stbtt_int32':'int'
|   |         | |     | `-ImplicitCastExpr 0x7fffd8388ee8 <col:20> 'stbtt_int32':'int' <LValueToRValue>
|   |         | |     |   `-DeclRefExpr 0x7fffd8388ec0 <col:20> 'stbtt_int32':'int' lvalue Var 0x7fffd8388630 'mid' 'stbtt_int32':'int'
|   |         | |     `-IfStmt 0x7fffd8389680 <line:1567:15, line:1575:10>
|   |         | |       |-<<<NULL>>>
|   |         | |       |-<<<NULL>>>
|   |         | |       |-BinaryOperator 0x7fffd8388fe0 <line:1567:19, col:54> 'int' '>'
|   |         | |       | |-CStyleCastExpr 0x7fffd8388f78 <col:19, col:34> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |         | |       | | `-ImplicitCastExpr 0x7fffd8388f60 <col:34> 'int' <LValueToRValue>
|   |         | |       | |   `-DeclRefExpr 0x7fffd8388f28 <col:34> 'int' lvalue ParmVar 0x7fffd8382958 'unicode_codepoint' 'int'
|   |         | |       | `-ImplicitCastExpr 0x7fffd8388fc8 <col:54> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |         | |       |   `-DeclRefExpr 0x7fffd8388fa0 <col:54> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8388ae8 'end_char' 'stbtt_uint32':'unsigned int'
|   |         | |       |-BinaryOperator 0x7fffd83890b8 <line:1568:13, col:23> 'stbtt_int32':'int' '='
|   |         | |       | |-DeclRefExpr 0x7fffd8389008 <col:13> 'stbtt_int32':'int' lvalue Var 0x7fffd8388320 'low' 'stbtt_int32':'int'
|   |         | |       | `-BinaryOperator 0x7fffd8389090 <col:19, col:23> 'int' '+'
|   |         | |       |   |-ImplicitCastExpr 0x7fffd8389078 <col:19> 'stbtt_int32':'int' <LValueToRValue>
|   |         | |       |   | `-DeclRefExpr 0x7fffd8389030 <col:19> 'stbtt_int32':'int' lvalue Var 0x7fffd8388630 'mid' 'stbtt_int32':'int'
|   |         | |       |   `-IntegerLiteral 0x7fffd8389058 <col:23> 'int' 1
|   |         | |       `-CompoundStmt 0x7fffd8389660 <line:1569:15, line:1575:10>
|   |         | |         |-DeclStmt 0x7fffd83893a8 <line:1570:13, col:75>
|   |         | |         | `-VarDecl 0x7fffd83890f0 <col:13, col:74> col:26 used start_glyph 'stbtt_uint32':'unsigned int' cinit
|   |         | |         |   `-CallExpr 0x7fffd8389378 <col:40, col:74> 'stbtt_uint32':'unsigned int'
|   |         | |         |     |-ImplicitCastExpr 0x7fffd8389360 <col:40> 'stbtt_uint32 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |         | |         |     | `-DeclRefExpr 0x7fffd8389150 <col:40> 'stbtt_uint32 (stbtt_uint8 *)' Function 0x7fffd83712a0 'ttULONG' 'stbtt_uint32 (stbtt_uint8 *)'
|   |         | |         |     `-BinaryOperator 0x7fffd8389338 <col:48, col:73> 'stbtt_uint8 *' '+'
|   |         | |         |       |-BinaryOperator 0x7fffd83892f0 <col:48, col:70> 'stbtt_uint8 *' '+'
|   |         | |         |       | |-BinaryOperator 0x7fffd8389240 <col:48, col:63> 'stbtt_uint8 *' '+'
|   |         | |         |       | | |-BinaryOperator 0x7fffd83891f8 <col:48, col:53> 'stbtt_uint8 *' '+'
|   |         | |         |       | | | |-ImplicitCastExpr 0x7fffd83891c8 <col:48> 'stbtt_uint8 *' <LValueToRValue>
|   |         | |         |       | | | | `-DeclRefExpr 0x7fffd8389178 <col:48> 'stbtt_uint8 *' lvalue Var 0x7fffd8382ab0 'data' 'stbtt_uint8 *'
|   |         | |         |       | | | `-ImplicitCastExpr 0x7fffd83891e0 <col:53> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |         | |         |       | | |   `-DeclRefExpr 0x7fffd83891a0 <col:53> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8382bc8 'index_map' 'stbtt_uint32':'unsigned int'
|   |         | |         |       | | `-IntegerLiteral 0x7fffd8389220 <col:63> 'int' 16
|   |         | |         |       | `-BinaryOperator 0x7fffd83892c8 <col:66, col:70> 'int' '*'
|   |         | |         |       |   |-ImplicitCastExpr 0x7fffd83892b0 <col:66> 'stbtt_int32':'int' <LValueToRValue>
|   |         | |         |       |   | `-DeclRefExpr 0x7fffd8389268 <col:66> 'stbtt_int32':'int' lvalue Var 0x7fffd8388630 'mid' 'stbtt_int32':'int'
|   |         | |         |       |   `-IntegerLiteral 0x7fffd8389290 <col:70> 'int' 12
|   |         | |         |       `-IntegerLiteral 0x7fffd8389318 <col:73> 'int' 8
|   |         | |         `-IfStmt 0x7fffd8389628 <line:1571:13, line:1574:23>
|   |         | |           |-<<<NULL>>>
|   |         | |           |-<<<NULL>>>
|   |         | |           |-BinaryOperator 0x7fffd8389438 <line:1571:17, col:27> 'int' '=='
|   |         | |           | |-ImplicitCastExpr 0x7fffd8389420 <col:17> 'int' <IntegralCast>
|   |         | |           | | `-ImplicitCastExpr 0x7fffd8389408 <col:17> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |         | |           | |   `-DeclRefExpr 0x7fffd83893c0 <col:17> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8382cf8 'format' 'stbtt_uint16':'unsigned short'
|   |         | |           | `-IntegerLiteral 0x7fffd83893e8 <col:27> 'int' 12
|   |         | |           |-ReturnStmt 0x7fffd83895a0 <line:1572:16, col:55>
|   |         | |           | `-ImplicitCastExpr 0x7fffd8389588 <col:23, col:55> 'int' <IntegralCast>
|   |         | |           |   `-BinaryOperator 0x7fffd8389560 <col:23, col:55> 'unsigned int' '-'
|   |         | |           |     |-BinaryOperator 0x7fffd83894f8 <col:23, col:37> 'unsigned int' '+'
|   |         | |           |     | |-ImplicitCastExpr 0x7fffd83894b0 <col:23> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |         | |           |     | | `-DeclRefExpr 0x7fffd8389460 <col:23> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd83890f0 'start_glyph' 'stbtt_uint32':'unsigned int'
|   |         | |           |     | `-ImplicitCastExpr 0x7fffd83894e0 <col:37> 'unsigned int' <IntegralCast>
|   |         | |           |     |   `-ImplicitCastExpr 0x7fffd83894c8 <col:37> 'int' <LValueToRValue>
|   |         | |           |     |     `-DeclRefExpr 0x7fffd8389488 <col:37> 'int' lvalue ParmVar 0x7fffd8382958 'unicode_codepoint' 'int'
|   |         | |           |     `-ImplicitCastExpr 0x7fffd8389548 <col:55> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |         | |           |       `-DeclRefExpr 0x7fffd8389520 <col:55> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8388850 'start_char' 'stbtt_uint32':'unsigned int'
|   |         | |           `-ReturnStmt 0x7fffd8389610 <line:1574:16, col:23>
|   |         | |             `-ImplicitCastExpr 0x7fffd83895f8 <col:23> 'int' <IntegralCast>
|   |         | |               `-ImplicitCastExpr 0x7fffd83895e0 <col:23> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |         | |                 `-DeclRefExpr 0x7fffd83895b8 <col:23> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd83890f0 'start_glyph' 'stbtt_uint32':'unsigned int'
|   |         | `-ReturnStmt 0x7fffd8389760 <line:1577:7, col:14>
|   |         |   `-IntegerLiteral 0x7fffd8389740 <col:14> 'int' 0
|   |         `-<<<NULL>>>
|   |-ParenExpr 0x7fffd8389d28 </usr/include/assert.h:108:3, line:113:7> 'void'
|   | `-BinaryOperator 0x7fffd8389d00 <line:108:4, line:113:6> 'void' ','
|   |   |-CStyleCastExpr 0x7fffd83899d0 <line:108:4, col:33> 'void' <ToVoid>
|   |   | `-UnaryExprOrTypeTraitExpr 0x7fffd83899a0 <col:11, col:33> 'unsigned long' sizeof
|   |   |   `-ParenExpr 0x7fffd8389980 <col:18, col:33> 'int'
|   |   |     `-ConditionalOperator 0x7fffd8389950 <col:19, col:32> 'int'
|   |   |       |-ParenExpr 0x7fffd83898f0 <col:19, col:24> 'int'
|   |   |       | `-IntegerLiteral 0x7fffd83898d0 <././stb/stb_truetype.h:1580:17> 'int' 0
|   |   |       |-IntegerLiteral 0x7fffd8389910 </usr/include/assert.h:108:28> 'int' 1
|   |   |       `-IntegerLiteral 0x7fffd8389930 <col:32> 'int' 0
|   |   `-UnaryOperator 0x7fffd8389ce0 <col:36, line:113:6> 'void' prefix '__extension__'
|   |     `-StmtExpr 0x7fffd8389cc0 <line:108:50, line:113:6> 'void'
|   |       `-CompoundStmt 0x7fffd8389ca8 <line:108:51, line:113:5>
|   |         `-IfStmt 0x7fffd8389c70 <line:109:7, line:112:68>
|   |           |-<<<NULL>>>
|   |           |-<<<NULL>>>
|   |           |-IntegerLiteral 0x7fffd83899f8 <././stb/stb_truetype.h:1580:17> 'int' 0
|   |           |-NullStmt 0x7fffd8389a18 </usr/include/assert.h:110:9>
|   |           `-CallExpr 0x7fffd8389b98 <line:112:9, col:68> 'void'
|   |             |-ImplicitCastExpr 0x7fffd8389b80 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |             | `-DeclRefExpr 0x7fffd8389a28 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |             |-ImplicitCastExpr 0x7fffd8389bf8 <<scratch space>:249:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd8389be0 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd8389a50 <col:1> 'char [2]' lvalue "0"
|   |             |-ImplicitCastExpr 0x7fffd8389c28 <line:250:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd8389c10 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd8389a80 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |             |-ImplicitCastExpr 0x7fffd8389c40 <line:251:1> 'unsigned int' <IntegralCast>
|   |             | `-IntegerLiteral 0x7fffd8389ac0 <col:1> 'int' 1580
|   |             `-ImplicitCastExpr 0x7fffd8389c58 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |               `-UnaryOperator 0x7fffd8389b60 <col:30, col:44> 'const char [54]' lvalue prefix '__extension__'
|   |                 `-PredefinedExpr 0x7fffd8389b40 <col:44> 'const char [54]' lvalue __PRETTY_FUNCTION__
|   |                   `-StringLiteral 0x7fffd8389ae0 <col:44> 'const char [54]' lvalue "int stbtt_FindGlyphIndex(const stbtt_fontinfo *, int)"
|   `-ReturnStmt 0x7fffd8389d68 <././stb/stb_truetype.h:1581:4, col:11>
|     `-IntegerLiteral 0x7fffd8389d48 <col:11> 'int' 0
|-FunctionDecl 0x7fffd8389f60 prev 0x7fffd8352068 <line:501:19, line:1587:1> line:1584:15 stbtt_GetCodepointShape 'int (const stbtt_fontinfo *, int, stbtt_vertex **)' extern
| |-ParmVarDecl 0x7fffd8389dd0 <col:39, col:61> col:61 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8389e48 <col:67, col:71> col:71 used unicode_codepoint 'int'
| |-ParmVarDecl 0x7fffd8389ec0 <col:90, col:105> col:105 used vertices 'stbtt_vertex **'
| `-CompoundStmt 0x7fffd838a2d8 <line:1585:1, line:1587:1>
|   `-ReturnStmt 0x7fffd838a2c0 <line:1586:4, col:92>
|     `-CallExpr 0x7fffd838a250 <col:11, col:92> 'int'
|       |-ImplicitCastExpr 0x7fffd838a238 <col:11> 'int (*)(const stbtt_fontinfo *, int, stbtt_vertex **)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x7fffd838a018 <col:11> 'int (const stbtt_fontinfo *, int, stbtt_vertex **)' Function 0x7fffd83522e0 'stbtt_GetGlyphShape' 'int (const stbtt_fontinfo *, int, stbtt_vertex **)'
|       |-ImplicitCastExpr 0x7fffd838a290 <col:31> 'const stbtt_fontinfo *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd838a040 <col:31> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd8389dd0 'info' 'const stbtt_fontinfo *'
|       |-CallExpr 0x7fffd838a150 <col:37, col:81> 'int'
|       | |-ImplicitCastExpr 0x7fffd838a138 <col:37> 'int (*)(const stbtt_fontinfo *, int)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x7fffd838a068 <col:37> 'int (const stbtt_fontinfo *, int)' Function 0x7fffd83829f0 'stbtt_FindGlyphIndex' 'int (const stbtt_fontinfo *, int)'
|       | |-ImplicitCastExpr 0x7fffd838a188 <col:58> 'const stbtt_fontinfo *' <LValueToRValue>
|       | | `-DeclRefExpr 0x7fffd838a090 <col:58> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd8389dd0 'info' 'const stbtt_fontinfo *'
|       | `-ImplicitCastExpr 0x7fffd838a1a0 <col:64> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fffd838a0b8 <col:64> 'int' lvalue ParmVar 0x7fffd8389e48 'unicode_codepoint' 'int'
|       `-ImplicitCastExpr 0x7fffd838a2a8 <col:84> 'stbtt_vertex **' <LValueToRValue>
|         `-DeclRefExpr 0x7fffd838a1b8 <col:84> 'stbtt_vertex **' lvalue ParmVar 0x7fffd8389ec0 'vertices' 'stbtt_vertex **'
|-FunctionDecl 0x7fffd838b970 <line:1589:1, line:1596:1> line:1589:13 used stbtt_setvertex 'void (stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' static
| |-ParmVarDecl 0x7fffd838a300 <col:29, col:43> col:43 used v 'stbtt_vertex *'
| |-ParmVarDecl 0x7fffd838a370 <col:46, col:58> col:58 used type 'stbtt_uint8':'unsigned char'
| |-ParmVarDecl 0x7fffd838b6b0 <col:64, col:76> col:76 used x 'stbtt_int32':'int'
| |-ParmVarDecl 0x7fffd838b720 <col:79, col:91> col:91 used y 'stbtt_int32':'int'
| |-ParmVarDecl 0x7fffd838b790 <col:94, col:106> col:106 used cx 'stbtt_int32':'int'
| |-ParmVarDecl 0x7fffd838b800 <col:110, col:122> col:122 used cy 'stbtt_int32':'int'
| `-CompoundStmt 0x7fffd838bf80 <line:1590:1, line:1596:1>
|   |-BinaryOperator 0x7fffd838baf8 <line:1591:4, col:14> 'unsigned char' '='
|   | |-MemberExpr 0x7fffd838ba80 <col:4, col:7> 'unsigned char' lvalue ->type 0x7fffd8351a18
|   | | `-ImplicitCastExpr 0x7fffd838ba68 <col:4> 'stbtt_vertex *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd838ba40 <col:4> 'stbtt_vertex *' lvalue ParmVar 0x7fffd838a300 'v' 'stbtt_vertex *'
|   | `-ImplicitCastExpr 0x7fffd838bae0 <col:14> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd838bab8 <col:14> 'stbtt_uint8':'unsigned char' lvalue ParmVar 0x7fffd838a370 'type' 'stbtt_uint8':'unsigned char'
|   |-BinaryOperator 0x7fffd838bc10 <line:1592:4, col:25> 'short' '='
|   | |-MemberExpr 0x7fffd838bb60 <col:4, col:7> 'short' lvalue ->x 0x7fffd83517d8
|   | | `-ImplicitCastExpr 0x7fffd838bb48 <col:4> 'stbtt_vertex *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd838bb20 <col:4> 'stbtt_vertex *' lvalue ParmVar 0x7fffd838a300 'v' 'stbtt_vertex *'
|   | `-CStyleCastExpr 0x7fffd838bbe8 <col:11, col:25> 'stbtt_int16':'short' <IntegralCast>
|   |   `-ImplicitCastExpr 0x7fffd838bbd0 <col:25> 'stbtt_int32':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd838bb98 <col:25> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd838b6b0 'x' 'stbtt_int32':'int'
|   |-BinaryOperator 0x7fffd838bd28 <line:1593:4, col:25> 'short' '='
|   | |-MemberExpr 0x7fffd838bc78 <col:4, col:7> 'short' lvalue ->y 0x7fffd8351838
|   | | `-ImplicitCastExpr 0x7fffd838bc60 <col:4> 'stbtt_vertex *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd838bc38 <col:4> 'stbtt_vertex *' lvalue ParmVar 0x7fffd838a300 'v' 'stbtt_vertex *'
|   | `-CStyleCastExpr 0x7fffd838bd00 <col:11, col:25> 'stbtt_int16':'short' <IntegralCast>
|   |   `-ImplicitCastExpr 0x7fffd838bce8 <col:25> 'stbtt_int32':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd838bcb0 <col:25> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd838b720 'y' 'stbtt_int32':'int'
|   |-BinaryOperator 0x7fffd838be40 <line:1594:4, col:26> 'short' '='
|   | |-MemberExpr 0x7fffd838bd90 <col:4, col:7> 'short' lvalue ->cx 0x7fffd8351898
|   | | `-ImplicitCastExpr 0x7fffd838bd78 <col:4> 'stbtt_vertex *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd838bd50 <col:4> 'stbtt_vertex *' lvalue ParmVar 0x7fffd838a300 'v' 'stbtt_vertex *'
|   | `-CStyleCastExpr 0x7fffd838be18 <col:12, col:26> 'stbtt_int16':'short' <IntegralCast>
|   |   `-ImplicitCastExpr 0x7fffd838be00 <col:26> 'stbtt_int32':'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd838bdc8 <col:26> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd838b790 'cx' 'stbtt_int32':'int'
|   `-BinaryOperator 0x7fffd838bf58 <line:1595:4, col:26> 'short' '='
|     |-MemberExpr 0x7fffd838bea8 <col:4, col:7> 'short' lvalue ->cy 0x7fffd83518f8
|     | `-ImplicitCastExpr 0x7fffd838be90 <col:4> 'stbtt_vertex *' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fffd838be68 <col:4> 'stbtt_vertex *' lvalue ParmVar 0x7fffd838a300 'v' 'stbtt_vertex *'
|     `-CStyleCastExpr 0x7fffd838bf30 <col:12, col:26> 'stbtt_int16':'short' <IntegralCast>
|       `-ImplicitCastExpr 0x7fffd838bf18 <col:26> 'stbtt_int32':'int' <LValueToRValue>
|         `-DeclRefExpr 0x7fffd838bee0 <col:26> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd838b800 'cy' 'stbtt_int32':'int'
|-FunctionDecl 0x7fffd838c0d8 <line:1598:1, line:1616:1> line:1598:12 used stbtt__GetGlyfOffset 'int (const stbtt_fontinfo *, int)' static
| |-ParmVarDecl 0x7fffd838bfc8 <col:33, col:55> col:55 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd838c040 <col:61, col:65> col:65 used glyph_index 'int'
| `-CompoundStmt 0x7fffd838de28 <line:1599:1, line:1616:1>
|   |-DeclStmt 0x7fffd838c290 <line:1600:4, col:13>
|   | |-VarDecl 0x7fffd838c1a0 <col:4, col:8> col:8 used g1 'int'
|   | `-VarDecl 0x7fffd838c218 <col:4, col:11> col:11 used g2 'int'
|   |-ParenExpr 0x7fffd838c8d8 </usr/include/assert.h:108:3, line:113:7> 'void'
|   | `-BinaryOperator 0x7fffd838c8b0 <line:108:4, line:113:6> 'void' ','
|   |   |-CStyleCastExpr 0x7fffd838c470 <line:108:4, col:33> 'void' <ToVoid>
|   |   | `-UnaryExprOrTypeTraitExpr 0x7fffd838c440 <col:11, col:33> 'unsigned long' sizeof
|   |   |   `-ParenExpr 0x7fffd838c420 <col:18, col:33> 'int'
|   |   |     `-ConditionalOperator 0x7fffd838c3f0 <col:19, col:32> 'int'
|   |   |       |-ParenExpr 0x7fffd838c390 <col:19, col:24> 'int'
|   |   |       | `-UnaryOperator 0x7fffd838c370 <././stb/stb_truetype.h:1602:17, col:28> 'int' prefix '!'
|   |   |       |   `-ImplicitCastExpr 0x7fffd838c358 <col:18, col:28> 'int' <LValueToRValue>
|   |   |       |     `-MemberExpr 0x7fffd838c320 <col:18, col:28> 'const int' lvalue .size 0x7fffd82a74c0
|   |   |       |       `-MemberExpr 0x7fffd838c2e8 <col:18, col:24> 'const stbtt__buf':'const stbtt__buf' lvalue ->cff 0x7fffd834d0d0
|   |   |       |         `-ImplicitCastExpr 0x7fffd838c2d0 <col:18> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   |       |           `-DeclRefExpr 0x7fffd838c2a8 <col:18> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838bfc8 'info' 'const stbtt_fontinfo *'
|   |   |       |-IntegerLiteral 0x7fffd838c3b0 </usr/include/assert.h:108:28> 'int' 1
|   |   |       `-IntegerLiteral 0x7fffd838c3d0 <col:32> 'int' 0
|   |   `-UnaryOperator 0x7fffd838c890 <col:36, line:113:6> 'void' prefix '__extension__'
|   |     `-StmtExpr 0x7fffd838c870 <line:108:50, line:113:6> 'void'
|   |       `-CompoundStmt 0x7fffd838c858 <line:108:51, line:113:5>
|   |         `-IfStmt 0x7fffd838c820 <line:109:7, line:112:68>
|   |           |-<<<NULL>>>
|   |           |-<<<NULL>>>
|   |           |-UnaryOperator 0x7fffd838c560 <././stb/stb_truetype.h:1602:17, col:28> 'int' prefix '!'
|   |           | `-ImplicitCastExpr 0x7fffd838c548 <col:18, col:28> 'int' <LValueToRValue>
|   |           |   `-MemberExpr 0x7fffd838c510 <col:18, col:28> 'const int' lvalue .size 0x7fffd82a74c0
|   |           |     `-MemberExpr 0x7fffd838c4d8 <col:18, col:24> 'const stbtt__buf':'const stbtt__buf' lvalue ->cff 0x7fffd834d0d0
|   |           |       `-ImplicitCastExpr 0x7fffd838c4c0 <col:18> 'const stbtt_fontinfo *' <LValueToRValue>
|   |           |         `-DeclRefExpr 0x7fffd838c498 <col:18> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838bfc8 'info' 'const stbtt_fontinfo *'
|   |           |-NullStmt 0x7fffd838c580 </usr/include/assert.h:110:9>
|   |           `-CallExpr 0x7fffd838c748 <line:112:9, col:68> 'void'
|   |             |-ImplicitCastExpr 0x7fffd838c730 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |             | `-DeclRefExpr 0x7fffd838c590 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |             |-ImplicitCastExpr 0x7fffd838c7a8 <<scratch space>:252:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd838c790 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd838c5f8 <col:1> 'char [16]' lvalue "!info->cff.size"
|   |             |-ImplicitCastExpr 0x7fffd838c7d8 <line:253:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd838c7c0 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd838c630 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |             |-ImplicitCastExpr 0x7fffd838c7f0 <line:254:1> 'unsigned int' <IntegralCast>
|   |             | `-IntegerLiteral 0x7fffd838c670 <col:1> 'int' 1602
|   |             `-ImplicitCastExpr 0x7fffd838c808 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |               `-UnaryOperator 0x7fffd838c710 <col:30, col:44> 'const char [54]' lvalue prefix '__extension__'
|   |                 `-PredefinedExpr 0x7fffd838c6f0 <col:44> 'const char [54]' lvalue __PRETTY_FUNCTION__
|   |                   `-StringLiteral 0x7fffd838c690 <col:44> 'const char [54]' lvalue "int stbtt__GetGlyfOffset(const stbtt_fontinfo *, int)"
|   |-IfStmt 0x7fffd838ca48 <././stb/stb_truetype.h:1604:4, col:48>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd838c9c8 <col:8, col:29> 'int' '>='
|   | | |-ImplicitCastExpr 0x7fffd838c998 <col:8> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd838c8f8 <col:8> 'int' lvalue ParmVar 0x7fffd838c040 'glyph_index' 'int'
|   | | `-ImplicitCastExpr 0x7fffd838c9b0 <col:23, col:29> 'int' <LValueToRValue>
|   | |   `-MemberExpr 0x7fffd838c960 <col:23, col:29> 'const int' lvalue ->numGlyphs 0x7fffd834cc98
|   | |     `-ImplicitCastExpr 0x7fffd838c948 <col:23> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x7fffd838c920 <col:23> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838bfc8 'info' 'const stbtt_fontinfo *'
|   | |-ReturnStmt 0x7fffd838ca30 <col:40, col:48>
|   | | `-UnaryOperator 0x7fffd838ca10 <col:47, col:48> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x7fffd838c9f0 <col:48> 'int' 1
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd838cbb0 <line:1605:4, col:48>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd838cb30 <col:8, col:34> 'int' '>='
|   | | |-ImplicitCastExpr 0x7fffd838cb18 <col:8, col:14> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x7fffd838cac0 <col:8, col:14> 'const int' lvalue ->indexToLocFormat 0x7fffd834d058
|   | | |   `-ImplicitCastExpr 0x7fffd838caa8 <col:8> 'const stbtt_fontinfo *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x7fffd838ca80 <col:8> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838bfc8 'info' 'const stbtt_fontinfo *'
|   | | `-IntegerLiteral 0x7fffd838caf8 <col:34> 'int' 2
|   | |-ReturnStmt 0x7fffd838cb98 <col:40, col:48>
|   | | `-UnaryOperator 0x7fffd838cb78 <col:47, col:48> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x7fffd838cb58 <col:48> 'int' 1
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd838dc80 <line:1607:4, line:1613:4>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd838cc98 <line:1607:8, col:34> 'int' '=='
|   | | |-ImplicitCastExpr 0x7fffd838cc80 <col:8, col:14> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x7fffd838cc28 <col:8, col:14> 'const int' lvalue ->indexToLocFormat 0x7fffd834d058
|   | | |   `-ImplicitCastExpr 0x7fffd838cc10 <col:8> 'const stbtt_fontinfo *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x7fffd838cbe8 <col:8> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838bfc8 'info' 'const stbtt_fontinfo *'
|   | | `-IntegerLiteral 0x7fffd838cc60 <col:34> 'int' 0
|   | |-CompoundStmt 0x7fffd838d4a8 <col:37, line:1610:4>
|   | | |-BinaryOperator 0x7fffd838d068 <line:1608:7, col:79> 'int' '='
|   | | | |-DeclRefExpr 0x7fffd838ccc0 <col:7> 'int' lvalue Var 0x7fffd838c1a0 'g1' 'int'
|   | | | `-BinaryOperator 0x7fffd838d040 <col:12, col:79> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x7fffd838d028 <col:12, col:18> 'int' <LValueToRValue>
|   | | |   | `-MemberExpr 0x7fffd838cd28 <col:12, col:18> 'const int' lvalue ->glyf 0x7fffd834cdb8
|   | | |   |   `-ImplicitCastExpr 0x7fffd838cd10 <col:12> 'const stbtt_fontinfo *' <LValueToRValue>
|   | | |   |     `-DeclRefExpr 0x7fffd838cce8 <col:12> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838bfc8 'info' 'const stbtt_fontinfo *'
|   | | |   `-BinaryOperator 0x7fffd838d000 <col:25, col:79> 'int' '*'
|   | | |     |-ImplicitCastExpr 0x7fffd838cfe8 <col:25, col:75> 'int' <IntegralCast>
|   | | |     | `-CallExpr 0x7fffd838cf98 <col:25, col:75> 'stbtt_uint16':'unsigned short'
|   | | |     |   |-ImplicitCastExpr 0x7fffd838cf80 <col:25> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | | |     |   | `-DeclRefExpr 0x7fffd838cd60 <col:25> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   | | |     |   `-BinaryOperator 0x7fffd838cf58 <col:34, col:74> 'unsigned char *' '+'
|   | | |     |     |-BinaryOperator 0x7fffd838cea8 <col:34, col:53> 'unsigned char *' '+'
|   | | |     |     | |-ImplicitCastExpr 0x7fffd838ce78 <col:34, col:40> 'unsigned char *' <LValueToRValue>
|   | | |     |     | | `-MemberExpr 0x7fffd838cdc8 <col:34, col:40> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   | | |     |     | |   `-ImplicitCastExpr 0x7fffd838cdb0 <col:34> 'const stbtt_fontinfo *' <LValueToRValue>
|   | | |     |     | |     `-DeclRefExpr 0x7fffd838cd88 <col:34> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838bfc8 'info' 'const stbtt_fontinfo *'
|   | | |     |     | `-ImplicitCastExpr 0x7fffd838ce90 <col:47, col:53> 'int' <LValueToRValue>
|   | | |     |     |   `-MemberExpr 0x7fffd838ce40 <col:47, col:53> 'const int' lvalue ->loca 0x7fffd834ccf8
|   | | |     |     |     `-ImplicitCastExpr 0x7fffd838ce28 <col:47> 'const stbtt_fontinfo *' <LValueToRValue>
|   | | |     |     |       `-DeclRefExpr 0x7fffd838ce00 <col:47> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838bfc8 'info' 'const stbtt_fontinfo *'
|   | | |     |     `-BinaryOperator 0x7fffd838cf30 <col:60, col:74> 'int' '*'
|   | | |     |       |-ImplicitCastExpr 0x7fffd838cf18 <col:60> 'int' <LValueToRValue>
|   | | |     |       | `-DeclRefExpr 0x7fffd838ced0 <col:60> 'int' lvalue ParmVar 0x7fffd838c040 'glyph_index' 'int'
|   | | |     |       `-IntegerLiteral 0x7fffd838cef8 <col:74> 'int' 2
|   | | |     `-IntegerLiteral 0x7fffd838cfc8 <col:79> 'int' 2
|   | | `-BinaryOperator 0x7fffd838d480 <line:1609:7, col:83> 'int' '='
|   | |   |-DeclRefExpr 0x7fffd838d090 <col:7> 'int' lvalue Var 0x7fffd838c218 'g2' 'int'
|   | |   `-BinaryOperator 0x7fffd838d458 <col:12, col:83> 'int' '+'
|   | |     |-ImplicitCastExpr 0x7fffd838d440 <col:12, col:18> 'int' <LValueToRValue>
|   | |     | `-MemberExpr 0x7fffd838d0f8 <col:12, col:18> 'const int' lvalue ->glyf 0x7fffd834cdb8
|   | |     |   `-ImplicitCastExpr 0x7fffd838d0e0 <col:12> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |     |     `-DeclRefExpr 0x7fffd838d0b8 <col:12> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838bfc8 'info' 'const stbtt_fontinfo *'
|   | |     `-BinaryOperator 0x7fffd838d418 <col:25, col:83> 'int' '*'
|   | |       |-ImplicitCastExpr 0x7fffd838d400 <col:25, col:79> 'int' <IntegralCast>
|   | |       | `-CallExpr 0x7fffd838d3b0 <col:25, col:79> 'stbtt_uint16':'unsigned short'
|   | |       |   |-ImplicitCastExpr 0x7fffd838d398 <col:25> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | |       |   | `-DeclRefExpr 0x7fffd838d130 <col:25> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   | |       |   `-BinaryOperator 0x7fffd838d370 <col:34, col:78> 'unsigned char *' '+'
|   | |       |     |-BinaryOperator 0x7fffd838d328 <col:34, col:74> 'unsigned char *' '+'
|   | |       |     | |-BinaryOperator 0x7fffd838d278 <col:34, col:53> 'unsigned char *' '+'
|   | |       |     | | |-ImplicitCastExpr 0x7fffd838d248 <col:34, col:40> 'unsigned char *' <LValueToRValue>
|   | |       |     | | | `-MemberExpr 0x7fffd838d198 <col:34, col:40> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   | |       |     | | |   `-ImplicitCastExpr 0x7fffd838d180 <col:34> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |       |     | | |     `-DeclRefExpr 0x7fffd838d158 <col:34> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838bfc8 'info' 'const stbtt_fontinfo *'
|   | |       |     | | `-ImplicitCastExpr 0x7fffd838d260 <col:47, col:53> 'int' <LValueToRValue>
|   | |       |     | |   `-MemberExpr 0x7fffd838d210 <col:47, col:53> 'const int' lvalue ->loca 0x7fffd834ccf8
|   | |       |     | |     `-ImplicitCastExpr 0x7fffd838d1f8 <col:47> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |       |     | |       `-DeclRefExpr 0x7fffd838d1d0 <col:47> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838bfc8 'info' 'const stbtt_fontinfo *'
|   | |       |     | `-BinaryOperator 0x7fffd838d300 <col:60, col:74> 'int' '*'
|   | |       |     |   |-ImplicitCastExpr 0x7fffd838d2e8 <col:60> 'int' <LValueToRValue>
|   | |       |     |   | `-DeclRefExpr 0x7fffd838d2a0 <col:60> 'int' lvalue ParmVar 0x7fffd838c040 'glyph_index' 'int'
|   | |       |     |   `-IntegerLiteral 0x7fffd838d2c8 <col:74> 'int' 2
|   | |       |     `-IntegerLiteral 0x7fffd838d350 <col:78> 'int' 2
|   | |       `-IntegerLiteral 0x7fffd838d3e0 <col:83> 'int' 2
|   | `-CompoundStmt 0x7fffd838dc60 <line:1610:11, line:1613:4>
|   |   |-BinaryOperator 0x7fffd838d850 <line:1611:7, col:75> 'int' '='
|   |   | |-DeclRefExpr 0x7fffd838d4c8 <col:7> 'int' lvalue Var 0x7fffd838c1a0 'g1' 'int'
|   |   | `-ImplicitCastExpr 0x7fffd838d838 <col:12, col:75> 'int' <IntegralCast>
|   |   |   `-BinaryOperator 0x7fffd838d810 <col:12, col:75> 'unsigned int' '+'
|   |   |     |-ImplicitCastExpr 0x7fffd838d7f8 <col:12, col:18> 'unsigned int' <IntegralCast>
|   |   |     | `-ImplicitCastExpr 0x7fffd838d7e0 <col:12, col:18> 'int' <LValueToRValue>
|   |   |     |   `-MemberExpr 0x7fffd838d530 <col:12, col:18> 'const int' lvalue ->glyf 0x7fffd834cdb8
|   |   |     |     `-ImplicitCastExpr 0x7fffd838d518 <col:12> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   |     |       `-DeclRefExpr 0x7fffd838d4f0 <col:12> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838bfc8 'info' 'const stbtt_fontinfo *'
|   |   |     `-CallExpr 0x7fffd838d7b0 <col:25, col:75> 'stbtt_uint32':'unsigned int'
|   |   |       |-ImplicitCastExpr 0x7fffd838d798 <col:25> 'stbtt_uint32 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x7fffd838d568 <col:25> 'stbtt_uint32 (stbtt_uint8 *)' Function 0x7fffd83712a0 'ttULONG' 'stbtt_uint32 (stbtt_uint8 *)'
|   |   |       `-BinaryOperator 0x7fffd838d770 <col:34, col:74> 'unsigned char *' '+'
|   |   |         |-BinaryOperator 0x7fffd838d6c0 <col:34, col:53> 'unsigned char *' '+'
|   |   |         | |-ImplicitCastExpr 0x7fffd838d680 <col:34, col:40> 'unsigned char *' <LValueToRValue>
|   |   |         | | `-MemberExpr 0x7fffd838d5d0 <col:34, col:40> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   |   |         | |   `-ImplicitCastExpr 0x7fffd838d5b8 <col:34> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   |         | |     `-DeclRefExpr 0x7fffd838d590 <col:34> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838bfc8 'info' 'const stbtt_fontinfo *'
|   |   |         | `-ImplicitCastExpr 0x7fffd838d698 <col:47, col:53> 'int' <LValueToRValue>
|   |   |         |   `-MemberExpr 0x7fffd838d648 <col:47, col:53> 'const int' lvalue ->loca 0x7fffd834ccf8
|   |   |         |     `-ImplicitCastExpr 0x7fffd838d630 <col:47> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   |         |       `-DeclRefExpr 0x7fffd838d608 <col:47> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838bfc8 'info' 'const stbtt_fontinfo *'
|   |   |         `-BinaryOperator 0x7fffd838d748 <col:60, col:74> 'int' '*'
|   |   |           |-ImplicitCastExpr 0x7fffd838d730 <col:60> 'int' <LValueToRValue>
|   |   |           | `-DeclRefExpr 0x7fffd838d6e8 <col:60> 'int' lvalue ParmVar 0x7fffd838c040 'glyph_index' 'int'
|   |   |           `-IntegerLiteral 0x7fffd838d710 <col:74> 'int' 4
|   |   `-BinaryOperator 0x7fffd838dc38 <line:1612:7, col:79> 'int' '='
|   |     |-DeclRefExpr 0x7fffd838d878 <col:7> 'int' lvalue Var 0x7fffd838c218 'g2' 'int'
|   |     `-ImplicitCastExpr 0x7fffd838dc20 <col:12, col:79> 'int' <IntegralCast>
|   |       `-BinaryOperator 0x7fffd838dbf8 <col:12, col:79> 'unsigned int' '+'
|   |         |-ImplicitCastExpr 0x7fffd838dbe0 <col:12, col:18> 'unsigned int' <IntegralCast>
|   |         | `-ImplicitCastExpr 0x7fffd838dbc8 <col:12, col:18> 'int' <LValueToRValue>
|   |         |   `-MemberExpr 0x7fffd838d8e0 <col:12, col:18> 'const int' lvalue ->glyf 0x7fffd834cdb8
|   |         |     `-ImplicitCastExpr 0x7fffd838d8c8 <col:12> 'const stbtt_fontinfo *' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x7fffd838d8a0 <col:12> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838bfc8 'info' 'const stbtt_fontinfo *'
|   |         `-CallExpr 0x7fffd838db98 <col:25, col:79> 'stbtt_uint32':'unsigned int'
|   |           |-ImplicitCastExpr 0x7fffd838db80 <col:25> 'stbtt_uint32 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |           | `-DeclRefExpr 0x7fffd838d918 <col:25> 'stbtt_uint32 (stbtt_uint8 *)' Function 0x7fffd83712a0 'ttULONG' 'stbtt_uint32 (stbtt_uint8 *)'
|   |           `-BinaryOperator 0x7fffd838db58 <col:34, col:78> 'unsigned char *' '+'
|   |             |-BinaryOperator 0x7fffd838db10 <col:34, col:74> 'unsigned char *' '+'
|   |             | |-BinaryOperator 0x7fffd838da60 <col:34, col:53> 'unsigned char *' '+'
|   |             | | |-ImplicitCastExpr 0x7fffd838da30 <col:34, col:40> 'unsigned char *' <LValueToRValue>
|   |             | | | `-MemberExpr 0x7fffd838d980 <col:34, col:40> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   |             | | |   `-ImplicitCastExpr 0x7fffd838d968 <col:34> 'const stbtt_fontinfo *' <LValueToRValue>
|   |             | | |     `-DeclRefExpr 0x7fffd838d940 <col:34> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838bfc8 'info' 'const stbtt_fontinfo *'
|   |             | | `-ImplicitCastExpr 0x7fffd838da48 <col:47, col:53> 'int' <LValueToRValue>
|   |             | |   `-MemberExpr 0x7fffd838d9f8 <col:47, col:53> 'const int' lvalue ->loca 0x7fffd834ccf8
|   |             | |     `-ImplicitCastExpr 0x7fffd838d9e0 <col:47> 'const stbtt_fontinfo *' <LValueToRValue>
|   |             | |       `-DeclRefExpr 0x7fffd838d9b8 <col:47> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838bfc8 'info' 'const stbtt_fontinfo *'
|   |             | `-BinaryOperator 0x7fffd838dae8 <col:60, col:74> 'int' '*'
|   |             |   |-ImplicitCastExpr 0x7fffd838dad0 <col:60> 'int' <LValueToRValue>
|   |             |   | `-DeclRefExpr 0x7fffd838da88 <col:60> 'int' lvalue ParmVar 0x7fffd838c040 'glyph_index' 'int'
|   |             |   `-IntegerLiteral 0x7fffd838dab0 <col:74> 'int' 4
|   |             `-IntegerLiteral 0x7fffd838db38 <col:78> 'int' 4
|   `-ReturnStmt 0x7fffd838de10 <line:1615:4, col:25>
|     `-ConditionalOperator 0x7fffd838dde0 <col:11, col:25> 'int'
|       |-BinaryOperator 0x7fffd838dd38 <col:11, col:15> 'int' '=='
|       | |-ImplicitCastExpr 0x7fffd838dd08 <col:11> 'int' <LValueToRValue>
|       | | `-DeclRefExpr 0x7fffd838dcb8 <col:11> 'int' lvalue Var 0x7fffd838c1a0 'g1' 'int'
|       | `-ImplicitCastExpr 0x7fffd838dd20 <col:15> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fffd838dce0 <col:15> 'int' lvalue Var 0x7fffd838c218 'g2' 'int'
|       |-UnaryOperator 0x7fffd838dd80 <col:20, col:21> 'int' prefix '-'
|       | `-IntegerLiteral 0x7fffd838dd60 <col:21> 'int' 1
|       `-ImplicitCastExpr 0x7fffd838ddc8 <col:25> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x7fffd838dda0 <col:25> 'int' lvalue Var 0x7fffd838c1a0 'g1' 'int'
|-FunctionDecl 0x7fffd838e188 <line:1618:1, col:113> col:12 used stbtt__GetGlyphInfoT2 'int (const stbtt_fontinfo *, int, int *, int *, int *, int *)' static
| |-ParmVarDecl 0x7fffd838de78 <col:34, col:56> col:56 info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd838def0 <col:62, col:66> col:66 glyph_index 'int'
| |-ParmVarDecl 0x7fffd838df68 <col:79, col:84> col:84 x0 'int *'
| |-ParmVarDecl 0x7fffd838dfe0 <col:88, col:93> col:93 y0 'int *'
| |-ParmVarDecl 0x7fffd838e058 <col:97, col:102> col:102 x1 'int *'
| `-ParmVarDecl 0x7fffd838e0d0 <col:106, col:111> col:111 y1 'int *'
|-FunctionDecl 0x7fffd838e578 prev 0x7fffd8350c28 <line:501:19, line:1634:1> line:1620:15 used stbtt_GetGlyphBox 'int (const stbtt_fontinfo *, int, int *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd838e268 <col:33, col:55> col:55 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd838e2e0 <col:61, col:65> col:65 used glyph_index 'int'
| |-ParmVarDecl 0x7fffd838e358 <col:78, col:83> col:83 used x0 'int *'
| |-ParmVarDecl 0x7fffd838e3d0 <col:87, col:92> col:92 used y0 'int *'
| |-ParmVarDecl 0x7fffd838e448 <col:96, col:101> col:101 used x1 'int *'
| |-ParmVarDecl 0x7fffd838e4c0 <col:105, col:110> col:110 used y1 'int *'
| `-CompoundStmt 0x7fffd838f808 <line:1621:1, line:1634:1>
|   |-IfStmt 0x7fffd838f798 <line:1622:4, line:1632:4>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd838e6f8 <line:1622:8, col:18> 'int' <LValueToRValue>
|   | | `-MemberExpr 0x7fffd838e6c0 <col:8, col:18> 'const int' lvalue .size 0x7fffd82a74c0
|   | |   `-MemberExpr 0x7fffd838e688 <col:8, col:14> 'const stbtt__buf':'const stbtt__buf' lvalue ->cff 0x7fffd834d0d0
|   | |     `-ImplicitCastExpr 0x7fffd838e670 <col:8> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x7fffd838e648 <col:8> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838e268 'info' 'const stbtt_fontinfo *'
|   | |-CompoundStmt 0x7fffd838e988 <col:24, line:1624:4>
|   | | `-CallExpr 0x7fffd838e8a0 <line:1623:7, col:62> 'int'
|   | |   |-ImplicitCastExpr 0x7fffd838e888 <col:7> 'int (*)(const stbtt_fontinfo *, int, int *, int *, int *, int *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x7fffd838e710 <col:7> 'int (const stbtt_fontinfo *, int, int *, int *, int *, int *)' Function 0x7fffd838e188 'stbtt__GetGlyphInfoT2' 'int (const stbtt_fontinfo *, int, int *, int *, int *, int *)'
|   | |   |-ImplicitCastExpr 0x7fffd838e8f8 <col:29> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd838e738 <col:29> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838e268 'info' 'const stbtt_fontinfo *'
|   | |   |-ImplicitCastExpr 0x7fffd838e910 <col:35> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd838e760 <col:35> 'int' lvalue ParmVar 0x7fffd838e2e0 'glyph_index' 'int'
|   | |   |-ImplicitCastExpr 0x7fffd838e928 <col:48> 'int *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd838e788 <col:48> 'int *' lvalue ParmVar 0x7fffd838e358 'x0' 'int *'
|   | |   |-ImplicitCastExpr 0x7fffd838e940 <col:52> 'int *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd838e7b0 <col:52> 'int *' lvalue ParmVar 0x7fffd838e3d0 'y0' 'int *'
|   | |   |-ImplicitCastExpr 0x7fffd838e958 <col:56> 'int *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd838e7d8 <col:56> 'int *' lvalue ParmVar 0x7fffd838e448 'x1' 'int *'
|   | |   `-ImplicitCastExpr 0x7fffd838e970 <col:60> 'int *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x7fffd838e800 <col:60> 'int *' lvalue ParmVar 0x7fffd838e4c0 'y1' 'int *'
|   | `-CompoundStmt 0x7fffd838f758 <line:1624:11, line:1632:4>
|   |   |-DeclStmt 0x7fffd838eb10 <line:1625:7, col:54>
|   |   | `-VarDecl 0x7fffd838e9b8 <col:7, col:53> col:11 used g 'int' cinit
|   |   |   `-CallExpr 0x7fffd838eaa8 <col:15, col:53> 'int'
|   |   |     |-ImplicitCastExpr 0x7fffd838ea90 <col:15> 'int (*)(const stbtt_fontinfo *, int)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x7fffd838ea18 <col:15> 'int (const stbtt_fontinfo *, int)' Function 0x7fffd838c0d8 'stbtt__GetGlyfOffset' 'int (const stbtt_fontinfo *, int)'
|   |   |     |-ImplicitCastExpr 0x7fffd838eae0 <col:36> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x7fffd838ea40 <col:36> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838e268 'info' 'const stbtt_fontinfo *'
|   |   |     `-ImplicitCastExpr 0x7fffd838eaf8 <col:42> 'int' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x7fffd838ea68 <col:42> 'int' lvalue ParmVar 0x7fffd838e2e0 'glyph_index' 'int'
|   |   |-IfStmt 0x7fffd838ebe8 <line:1626:7, col:25>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x7fffd838eb88 <col:11, col:15> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x7fffd838eb70 <col:11> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x7fffd838eb28 <col:11> 'int' lvalue Var 0x7fffd838e9b8 'g' 'int'
|   |   | | `-IntegerLiteral 0x7fffd838eb50 <col:15> 'int' 0
|   |   | |-ReturnStmt 0x7fffd838ebd0 <col:18, col:25>
|   |   | | `-IntegerLiteral 0x7fffd838ebb0 <col:25> 'int' 0
|   |   | `-<<<NULL>>>
|   |   |-IfStmt 0x7fffd838eeb0 <line:1628:7, col:47>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-ImplicitCastExpr 0x7fffd838ec48 <col:11> 'int *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x7fffd838ec20 <col:11> 'int *' lvalue ParmVar 0x7fffd838e358 'x0' 'int *'
|   |   | |-BinaryOperator 0x7fffd838ee88 <col:15, col:47> 'int' '='
|   |   | | |-UnaryOperator 0x7fffd838eca0 <col:15, col:16> 'int' lvalue prefix '*'
|   |   | | | `-ImplicitCastExpr 0x7fffd838ec88 <col:16> 'int *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x7fffd838ec60 <col:16> 'int *' lvalue ParmVar 0x7fffd838e358 'x0' 'int *'
|   |   | | `-ImplicitCastExpr 0x7fffd838ee70 <col:21, col:47> 'int' <IntegralCast>
|   |   | |   `-CallExpr 0x7fffd838ee40 <col:21, col:47> 'stbtt_int16':'short'
|   |   | |     |-ImplicitCastExpr 0x7fffd838ee28 <col:21> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   | |     | `-DeclRefExpr 0x7fffd838ecc0 <col:21> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |   | |     `-BinaryOperator 0x7fffd838ee00 <col:29, col:46> 'unsigned char *' '+'
|   |   | |       |-BinaryOperator 0x7fffd838edb8 <col:29, col:42> 'unsigned char *' '+'
|   |   | |       | |-ImplicitCastExpr 0x7fffd838ed88 <col:29, col:35> 'unsigned char *' <LValueToRValue>
|   |   | |       | | `-MemberExpr 0x7fffd838ed28 <col:29, col:35> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   |   | |       | |   `-ImplicitCastExpr 0x7fffd838ed10 <col:29> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   | |       | |     `-DeclRefExpr 0x7fffd838ece8 <col:29> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838e268 'info' 'const stbtt_fontinfo *'
|   |   | |       | `-ImplicitCastExpr 0x7fffd838eda0 <col:42> 'int' <LValueToRValue>
|   |   | |       |   `-DeclRefExpr 0x7fffd838ed60 <col:42> 'int' lvalue Var 0x7fffd838e9b8 'g' 'int'
|   |   | |       `-IntegerLiteral 0x7fffd838ede0 <col:46> 'int' 2
|   |   | `-<<<NULL>>>
|   |   |-IfStmt 0x7fffd838f178 <line:1629:7, col:47>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-ImplicitCastExpr 0x7fffd838ef10 <col:11> 'int *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x7fffd838eee8 <col:11> 'int *' lvalue ParmVar 0x7fffd838e3d0 'y0' 'int *'
|   |   | |-BinaryOperator 0x7fffd838f150 <col:15, col:47> 'int' '='
|   |   | | |-UnaryOperator 0x7fffd838ef68 <col:15, col:16> 'int' lvalue prefix '*'
|   |   | | | `-ImplicitCastExpr 0x7fffd838ef50 <col:16> 'int *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x7fffd838ef28 <col:16> 'int *' lvalue ParmVar 0x7fffd838e3d0 'y0' 'int *'
|   |   | | `-ImplicitCastExpr 0x7fffd838f138 <col:21, col:47> 'int' <IntegralCast>
|   |   | |   `-CallExpr 0x7fffd838f108 <col:21, col:47> 'stbtt_int16':'short'
|   |   | |     |-ImplicitCastExpr 0x7fffd838f0f0 <col:21> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   | |     | `-DeclRefExpr 0x7fffd838ef88 <col:21> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |   | |     `-BinaryOperator 0x7fffd838f0c8 <col:29, col:46> 'unsigned char *' '+'
|   |   | |       |-BinaryOperator 0x7fffd838f080 <col:29, col:42> 'unsigned char *' '+'
|   |   | |       | |-ImplicitCastExpr 0x7fffd838f050 <col:29, col:35> 'unsigned char *' <LValueToRValue>
|   |   | |       | | `-MemberExpr 0x7fffd838eff0 <col:29, col:35> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   |   | |       | |   `-ImplicitCastExpr 0x7fffd838efd8 <col:29> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   | |       | |     `-DeclRefExpr 0x7fffd838efb0 <col:29> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838e268 'info' 'const stbtt_fontinfo *'
|   |   | |       | `-ImplicitCastExpr 0x7fffd838f068 <col:42> 'int' <LValueToRValue>
|   |   | |       |   `-DeclRefExpr 0x7fffd838f028 <col:42> 'int' lvalue Var 0x7fffd838e9b8 'g' 'int'
|   |   | |       `-IntegerLiteral 0x7fffd838f0a8 <col:46> 'int' 4
|   |   | `-<<<NULL>>>
|   |   |-IfStmt 0x7fffd838f440 <line:1630:7, col:47>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-ImplicitCastExpr 0x7fffd838f1d8 <col:11> 'int *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x7fffd838f1b0 <col:11> 'int *' lvalue ParmVar 0x7fffd838e448 'x1' 'int *'
|   |   | |-BinaryOperator 0x7fffd838f418 <col:15, col:47> 'int' '='
|   |   | | |-UnaryOperator 0x7fffd838f230 <col:15, col:16> 'int' lvalue prefix '*'
|   |   | | | `-ImplicitCastExpr 0x7fffd838f218 <col:16> 'int *' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x7fffd838f1f0 <col:16> 'int *' lvalue ParmVar 0x7fffd838e448 'x1' 'int *'
|   |   | | `-ImplicitCastExpr 0x7fffd838f400 <col:21, col:47> 'int' <IntegralCast>
|   |   | |   `-CallExpr 0x7fffd838f3d0 <col:21, col:47> 'stbtt_int16':'short'
|   |   | |     |-ImplicitCastExpr 0x7fffd838f3b8 <col:21> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   | |     | `-DeclRefExpr 0x7fffd838f250 <col:21> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |   | |     `-BinaryOperator 0x7fffd838f390 <col:29, col:46> 'unsigned char *' '+'
|   |   | |       |-BinaryOperator 0x7fffd838f348 <col:29, col:42> 'unsigned char *' '+'
|   |   | |       | |-ImplicitCastExpr 0x7fffd838f318 <col:29, col:35> 'unsigned char *' <LValueToRValue>
|   |   | |       | | `-MemberExpr 0x7fffd838f2b8 <col:29, col:35> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   |   | |       | |   `-ImplicitCastExpr 0x7fffd838f2a0 <col:29> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   | |       | |     `-DeclRefExpr 0x7fffd838f278 <col:29> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838e268 'info' 'const stbtt_fontinfo *'
|   |   | |       | `-ImplicitCastExpr 0x7fffd838f330 <col:42> 'int' <LValueToRValue>
|   |   | |       |   `-DeclRefExpr 0x7fffd838f2f0 <col:42> 'int' lvalue Var 0x7fffd838e9b8 'g' 'int'
|   |   | |       `-IntegerLiteral 0x7fffd838f370 <col:46> 'int' 6
|   |   | `-<<<NULL>>>
|   |   `-IfStmt 0x7fffd838f720 <line:1631:7, col:47>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-ImplicitCastExpr 0x7fffd838f4a0 <col:11> 'int *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd838f478 <col:11> 'int *' lvalue ParmVar 0x7fffd838e4c0 'y1' 'int *'
|   |     |-BinaryOperator 0x7fffd838f6f8 <col:15, col:47> 'int' '='
|   |     | |-UnaryOperator 0x7fffd838f4f8 <col:15, col:16> 'int' lvalue prefix '*'
|   |     | | `-ImplicitCastExpr 0x7fffd838f4e0 <col:16> 'int *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x7fffd838f4b8 <col:16> 'int *' lvalue ParmVar 0x7fffd838e4c0 'y1' 'int *'
|   |     | `-ImplicitCastExpr 0x7fffd838f6e0 <col:21, col:47> 'int' <IntegralCast>
|   |     |   `-CallExpr 0x7fffd838f698 <col:21, col:47> 'stbtt_int16':'short'
|   |     |     |-ImplicitCastExpr 0x7fffd838f680 <col:21> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     |     | `-DeclRefExpr 0x7fffd838f518 <col:21> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |     |     `-BinaryOperator 0x7fffd838f658 <col:29, col:46> 'unsigned char *' '+'
|   |     |       |-BinaryOperator 0x7fffd838f610 <col:29, col:42> 'unsigned char *' '+'
|   |     |       | |-ImplicitCastExpr 0x7fffd838f5e0 <col:29, col:35> 'unsigned char *' <LValueToRValue>
|   |     |       | | `-MemberExpr 0x7fffd838f580 <col:29, col:35> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   |     |       | |   `-ImplicitCastExpr 0x7fffd838f568 <col:29> 'const stbtt_fontinfo *' <LValueToRValue>
|   |     |       | |     `-DeclRefExpr 0x7fffd838f540 <col:29> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838e268 'info' 'const stbtt_fontinfo *'
|   |     |       | `-ImplicitCastExpr 0x7fffd838f5f8 <col:42> 'int' <LValueToRValue>
|   |     |       |   `-DeclRefExpr 0x7fffd838f5b8 <col:42> 'int' lvalue Var 0x7fffd838e9b8 'g' 'int'
|   |     |       `-IntegerLiteral 0x7fffd838f638 <col:46> 'int' 8
|   |     `-<<<NULL>>>
|   `-ReturnStmt 0x7fffd838f7f0 <line:1633:4, col:11>
|     `-IntegerLiteral 0x7fffd838f7d0 <col:11> 'int' 1
|-FunctionDecl 0x7fffd838fb48 prev 0x7fffd8350308 <line:501:19, line:1639:1> line:1636:15 stbtt_GetCodepointBox 'int (const stbtt_fontinfo *, int, int *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd838f838 <col:37, col:59> col:59 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd838f8b0 <col:65, col:69> col:69 used codepoint 'int'
| |-ParmVarDecl 0x7fffd838f928 <col:80, col:85> col:85 used x0 'int *'
| |-ParmVarDecl 0x7fffd838f9a0 <col:89, col:94> col:94 used y0 'int *'
| |-ParmVarDecl 0x7fffd838fa18 <col:98, col:103> col:103 used x1 'int *'
| |-ParmVarDecl 0x7fffd838fa90 <col:107, col:112> col:112 used y1 'int *'
| `-CompoundStmt 0x7fffd838ff00 <line:1637:1, line:1639:1>
|   `-ReturnStmt 0x7fffd838fee8 <line:1638:4, col:84>
|     `-CallExpr 0x7fffd838fe18 <col:11, col:84> 'int'
|       |-ImplicitCastExpr 0x7fffd838fe00 <col:11> 'int (*)(const stbtt_fontinfo *, int, int *, int *, int *, int *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x7fffd838fc18 <col:11> 'int (const stbtt_fontinfo *, int, int *, int *, int *, int *)' Function 0x7fffd838e578 'stbtt_GetGlyphBox' 'int (const stbtt_fontinfo *, int, int *, int *, int *, int *)'
|       |-ImplicitCastExpr 0x7fffd838fe70 <col:29> 'const stbtt_fontinfo *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd838fc40 <col:29> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838f838 'info' 'const stbtt_fontinfo *'
|       |-CallExpr 0x7fffd838fcf8 <col:35, col:70> 'int'
|       | |-ImplicitCastExpr 0x7fffd838fce0 <col:35> 'int (*)(const stbtt_fontinfo *, int)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x7fffd838fc68 <col:35> 'int (const stbtt_fontinfo *, int)' Function 0x7fffd83829f0 'stbtt_FindGlyphIndex' 'int (const stbtt_fontinfo *, int)'
|       | |-ImplicitCastExpr 0x7fffd838fd30 <col:56> 'const stbtt_fontinfo *' <LValueToRValue>
|       | | `-DeclRefExpr 0x7fffd838fc90 <col:56> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838f838 'info' 'const stbtt_fontinfo *'
|       | `-ImplicitCastExpr 0x7fffd838fd48 <col:61> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fffd838fcb8 <col:61> 'int' lvalue ParmVar 0x7fffd838f8b0 'codepoint' 'int'
|       |-ImplicitCastExpr 0x7fffd838fe88 <col:73> 'int *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd838fd60 <col:73> 'int *' lvalue ParmVar 0x7fffd838f928 'x0' 'int *'
|       |-ImplicitCastExpr 0x7fffd838fea0 <col:76> 'int *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd838fd88 <col:76> 'int *' lvalue ParmVar 0x7fffd838f9a0 'y0' 'int *'
|       |-ImplicitCastExpr 0x7fffd838feb8 <col:79> 'int *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd838fdb0 <col:79> 'int *' lvalue ParmVar 0x7fffd838fa18 'x1' 'int *'
|       `-ImplicitCastExpr 0x7fffd838fed0 <col:82> 'int *' <LValueToRValue>
|         `-DeclRefExpr 0x7fffd838fdd8 <col:82> 'int *' lvalue ParmVar 0x7fffd838fa90 'y1' 'int *'
|-FunctionDecl 0x7fffd8390038 prev 0x7fffd8351ca0 <line:501:19, line:1651:1> line:1641:15 stbtt_IsGlyphEmpty 'int (const stbtt_fontinfo *, int)' extern
| |-ParmVarDecl 0x7fffd838ff28 <col:34, col:56> col:56 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd838ffa0 <col:62, col:66> col:66 used glyph_index 'int'
| `-CompoundStmt 0x7fffd8390b88 <line:1642:1, line:1651:1>
|   |-DeclStmt 0x7fffd8390158 <line:1643:4, col:32>
|   | `-VarDecl 0x7fffd83900f8 <col:4, col:16> col:16 used numberOfContours 'stbtt_int16':'short'
|   |-DeclStmt 0x7fffd83901e8 <line:1644:4, col:9>
|   | `-VarDecl 0x7fffd8390188 <col:4, col:8> col:8 used g 'int'
|   |-IfStmt 0x7fffd83906a0 <line:1645:4, line:1646:82>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd83902b0 <line:1645:8, col:18> 'int' <LValueToRValue>
|   | | `-MemberExpr 0x7fffd8390278 <col:8, col:18> 'const int' lvalue .size 0x7fffd82a74c0
|   | |   `-MemberExpr 0x7fffd8390240 <col:8, col:14> 'const stbtt__buf':'const stbtt__buf' lvalue ->cff 0x7fffd834d0d0
|   | |     `-ImplicitCastExpr 0x7fffd8390228 <col:8> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x7fffd8390200 <col:8> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838ff28 'info' 'const stbtt_fontinfo *'
|   | |-ReturnStmt 0x7fffd8390688 <line:1646:7, col:82>
|   | | `-BinaryOperator 0x7fffd8390660 <col:14, col:82> 'int' '=='
|   | |   |-CallExpr 0x7fffd8390558 <col:14, col:77> 'int'
|   | |   | |-ImplicitCastExpr 0x7fffd8390540 <col:14> 'int (*)(const stbtt_fontinfo *, int, int *, int *, int *, int *)' <FunctionToPointerDecay>
|   | |   | | `-DeclRefExpr 0x7fffd83902c8 <col:14> 'int (const stbtt_fontinfo *, int, int *, int *, int *, int *)' Function 0x7fffd838e188 'stbtt__GetGlyphInfoT2' 'int (const stbtt_fontinfo *, int, int *, int *, int *, int *)'
|   | |   | |-ImplicitCastExpr 0x7fffd83905b0 <col:36> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x7fffd83902f0 <col:36> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838ff28 'info' 'const stbtt_fontinfo *'
|   | |   | |-ImplicitCastExpr 0x7fffd83905c8 <col:42> 'int' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x7fffd8390318 <col:42> 'int' lvalue ParmVar 0x7fffd838ffa0 'glyph_index' 'int'
|   | |   | |-ImplicitCastExpr 0x7fffd83905e0 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'int *' <NullToPointer>
|   | |   | | `-ParenExpr 0x7fffd83903a0 <col:16, col:25> 'void *'
|   | |   | |   `-CStyleCastExpr 0x7fffd8390378 <col:17, col:24> 'void *' <NullToPointer>
|   | |   | |     `-IntegerLiteral 0x7fffd8390340 <col:24> 'int' 0
|   | |   | |-ImplicitCastExpr 0x7fffd83905f8 <col:16, col:25> 'int *' <NullToPointer>
|   | |   | | `-ParenExpr 0x7fffd8390420 <col:16, col:25> 'void *'
|   | |   | |   `-CStyleCastExpr 0x7fffd83903f8 <col:17, col:24> 'void *' <NullToPointer>
|   | |   | |     `-IntegerLiteral 0x7fffd83903c0 <col:24> 'int' 0
|   | |   | |-ImplicitCastExpr 0x7fffd8390610 <col:16, col:25> 'int *' <NullToPointer>
|   | |   | | `-ParenExpr 0x7fffd83904a0 <col:16, col:25> 'void *'
|   | |   | |   `-CStyleCastExpr 0x7fffd8390478 <col:17, col:24> 'void *' <NullToPointer>
|   | |   | |     `-IntegerLiteral 0x7fffd8390440 <col:24> 'int' 0
|   | |   | `-ImplicitCastExpr 0x7fffd8390628 <col:16, col:25> 'int *' <NullToPointer>
|   | |   |   `-ParenExpr 0x7fffd8390520 <col:16, col:25> 'void *'
|   | |   |     `-CStyleCastExpr 0x7fffd83904f8 <col:17, col:24> 'void *' <NullToPointer>
|   | |   |       `-IntegerLiteral 0x7fffd83904c0 <col:24> 'int' 0
|   | |   `-IntegerLiteral 0x7fffd8390640 <././stb/stb_truetype.h:1646:82> 'int' 0
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x7fffd83907f8 <line:1647:4, col:46> 'int' '='
|   | |-DeclRefExpr 0x7fffd83906d8 <col:4> 'int' lvalue Var 0x7fffd8390188 'g' 'int'
|   | `-CallExpr 0x7fffd8390790 <col:8, col:46> 'int'
|   |   |-ImplicitCastExpr 0x7fffd8390778 <col:8> 'int (*)(const stbtt_fontinfo *, int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x7fffd8390700 <col:8> 'int (const stbtt_fontinfo *, int)' Function 0x7fffd838c0d8 'stbtt__GetGlyfOffset' 'int (const stbtt_fontinfo *, int)'
|   |   |-ImplicitCastExpr 0x7fffd83907c8 <col:29> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x7fffd8390728 <col:29> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838ff28 'info' 'const stbtt_fontinfo *'
|   |   `-ImplicitCastExpr 0x7fffd83907e0 <col:35> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd8390750 <col:35> 'int' lvalue ParmVar 0x7fffd838ffa0 'glyph_index' 'int'
|   |-IfStmt 0x7fffd83908e0 <line:1648:4, col:22>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd8390880 <col:8, col:12> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd8390868 <col:8> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd8390820 <col:8> 'int' lvalue Var 0x7fffd8390188 'g' 'int'
|   | | `-IntegerLiteral 0x7fffd8390848 <col:12> 'int' 0
|   | |-ReturnStmt 0x7fffd83908c8 <col:15, col:22>
|   | | `-IntegerLiteral 0x7fffd83908a8 <col:22> 'int' 1
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x7fffd8390aa8 <line:1649:4, col:45> 'stbtt_int16':'short' '='
|   | |-DeclRefExpr 0x7fffd8390918 <col:4> 'stbtt_int16':'short' lvalue Var 0x7fffd83900f8 'numberOfContours' 'stbtt_int16':'short'
|   | `-CallExpr 0x7fffd8390a78 <col:23, col:45> 'stbtt_int16':'short'
|   |   |-ImplicitCastExpr 0x7fffd8390a60 <col:23> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x7fffd8390940 <col:23> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |   `-BinaryOperator 0x7fffd8390a38 <col:31, col:44> 'unsigned char *' '+'
|   |     |-ImplicitCastExpr 0x7fffd8390a08 <col:31, col:37> 'unsigned char *' <LValueToRValue>
|   |     | `-MemberExpr 0x7fffd83909a8 <col:31, col:37> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   |     |   `-ImplicitCastExpr 0x7fffd8390990 <col:31> 'const stbtt_fontinfo *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x7fffd8390968 <col:31> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd838ff28 'info' 'const stbtt_fontinfo *'
|   |     `-ImplicitCastExpr 0x7fffd8390a20 <col:44> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd83909e0 <col:44> 'int' lvalue Var 0x7fffd8390188 'g' 'int'
|   `-ReturnStmt 0x7fffd8390b70 <line:1650:4, col:31>
|     `-BinaryOperator 0x7fffd8390b48 <col:11, col:31> 'int' '=='
|       |-ImplicitCastExpr 0x7fffd8390b30 <col:11> 'int' <IntegralCast>
|       | `-ImplicitCastExpr 0x7fffd8390b18 <col:11> 'stbtt_int16':'short' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fffd8390ad0 <col:11> 'stbtt_int16':'short' lvalue Var 0x7fffd83900f8 'numberOfContours' 'stbtt_int16':'short'
|       `-IntegerLiteral 0x7fffd8390af8 <col:31> 'int' 0
|-FunctionDecl 0x7fffd83911c8 <line:1653:1, line:1667:1> line:1653:12 used stbtt__close_shape 'int (stbtt_vertex *, int, int, int, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' static
| |-ParmVarDecl 0x7fffd8390be0 <col:31, col:45> col:45 used vertices 'stbtt_vertex *'
| |-ParmVarDecl 0x7fffd8390c58 <col:55, col:59> col:59 used num_vertices 'int'
| |-ParmVarDecl 0x7fffd8390cd0 <col:73, col:77> col:77 used was_off 'int'
| |-ParmVarDecl 0x7fffd8390d48 <col:86, col:90> col:90 used start_off 'int'
| |-ParmVarDecl 0x7fffd8390db8 <line:1654:5, col:17> col:17 used sx 'stbtt_int32':'int'
| |-ParmVarDecl 0x7fffd8390e28 <col:21, col:33> col:33 used sy 'stbtt_int32':'int'
| |-ParmVarDecl 0x7fffd8390e98 <col:37, col:49> col:49 used scx 'stbtt_int32':'int'
| |-ParmVarDecl 0x7fffd8390f08 <col:54, col:66> col:66 used scy 'stbtt_int32':'int'
| |-ParmVarDecl 0x7fffd8390f78 <col:71, col:83> col:83 used cx 'stbtt_int32':'int'
| |-ParmVarDecl 0x7fffd8390fe8 <col:87, col:99> col:99 used cy 'stbtt_int32':'int'
| `-CompoundStmt 0x7fffd8392120 <line:1655:1, line:1667:1>
|   |-IfStmt 0x7fffd8392090 <line:1656:4, line:1665:4>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd83912e0 <line:1656:8> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd83912b8 <col:8> 'int' lvalue ParmVar 0x7fffd8390d48 'start_off' 'int'
|   | |-CompoundStmt 0x7fffd8391ad0 <col:19, line:1660:4>
|   | | |-IfStmt 0x7fffd83917f0 <line:1657:7, line:1658:98>
|   | | | |-<<<NULL>>>
|   | | | |-<<<NULL>>>
|   | | | |-ImplicitCastExpr 0x7fffd8391320 <line:1657:11> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x7fffd83912f8 <col:11> 'int' lvalue ParmVar 0x7fffd8390cd0 'was_off' 'int'
|   | | | |-CallExpr 0x7fffd8391750 <line:1658:10, col:98> 'void'
|   | | | | |-ImplicitCastExpr 0x7fffd8391738 <col:10> 'void (*)(stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' <FunctionToPointerDecay>
|   | | | | | `-DeclRefExpr 0x7fffd8391338 <col:10> 'void (stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' Function 0x7fffd838b970 'stbtt_setvertex' 'void (stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)'
|   | | | | |-UnaryOperator 0x7fffd8391410 <col:26, col:50> 'stbtt_vertex *' prefix '&'
|   | | | | | `-ArraySubscriptExpr 0x7fffd83913e8 <col:27, col:50> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | | | | |   |-ImplicitCastExpr 0x7fffd83913d0 <col:27> 'stbtt_vertex *' <LValueToRValue>
|   | | | | |   | `-DeclRefExpr 0x7fffd8391360 <col:27> 'stbtt_vertex *' lvalue ParmVar 0x7fffd8390be0 'vertices' 'stbtt_vertex *'
|   | | | | |   `-UnaryOperator 0x7fffd83913b0 <col:36, col:48> 'int' postfix '++'
|   | | | | |     `-DeclRefExpr 0x7fffd8391388 <col:36> 'int' lvalue ParmVar 0x7fffd8390c58 'num_vertices' 'int'
|   | | | | |-ImplicitCastExpr 0x7fffd83917a8 <col:53> 'stbtt_uint8':'unsigned char' <IntegralCast>
|   | | | | | `-DeclRefExpr 0x7fffd8391430 <col:53> 'int' EnumConstant 0x7fffd8351680 'STBTT_vcurve' 'int'
|   | | | | |-BinaryOperator 0x7fffd8391540 <col:67, col:77> 'int' '>>'
|   | | | | | |-ParenExpr 0x7fffd8391500 <col:67, col:74> 'int'
|   | | | | | | `-BinaryOperator 0x7fffd83914d8 <col:68, col:71> 'int' '+'
|   | | | | | |   |-ImplicitCastExpr 0x7fffd83914a8 <col:68> 'stbtt_int32':'int' <LValueToRValue>
|   | | | | | |   | `-DeclRefExpr 0x7fffd8391458 <col:68> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd8390f78 'cx' 'stbtt_int32':'int'
|   | | | | | |   `-ImplicitCastExpr 0x7fffd83914c0 <col:71> 'stbtt_int32':'int' <LValueToRValue>
|   | | | | | |     `-DeclRefExpr 0x7fffd8391480 <col:71> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd8390e98 'scx' 'stbtt_int32':'int'
|   | | | | | `-IntegerLiteral 0x7fffd8391520 <col:77> 'int' 1
|   | | | | |-BinaryOperator 0x7fffd8391650 <col:80, col:90> 'int' '>>'
|   | | | | | |-ParenExpr 0x7fffd8391610 <col:80, col:87> 'int'
|   | | | | | | `-BinaryOperator 0x7fffd83915e8 <col:81, col:84> 'int' '+'
|   | | | | | |   |-ImplicitCastExpr 0x7fffd83915b8 <col:81> 'stbtt_int32':'int' <LValueToRValue>
|   | | | | | |   | `-DeclRefExpr 0x7fffd8391568 <col:81> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd8390fe8 'cy' 'stbtt_int32':'int'
|   | | | | | |   `-ImplicitCastExpr 0x7fffd83915d0 <col:84> 'stbtt_int32':'int' <LValueToRValue>
|   | | | | | |     `-DeclRefExpr 0x7fffd8391590 <col:84> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd8390f08 'scy' 'stbtt_int32':'int'
|   | | | | | `-IntegerLiteral 0x7fffd8391630 <col:90> 'int' 1
|   | | | | |-ImplicitCastExpr 0x7fffd83917c0 <col:93> 'stbtt_int32':'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x7fffd8391678 <col:93> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd8390f78 'cx' 'stbtt_int32':'int'
|   | | | | `-ImplicitCastExpr 0x7fffd83917d8 <col:96> 'stbtt_int32':'int' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x7fffd83916a0 <col:96> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd8390fe8 'cy' 'stbtt_int32':'int'
|   | | | `-<<<NULL>>>
|   | | `-CallExpr 0x7fffd8391a00 <line:1659:7, col:77> 'void'
|   | |   |-ImplicitCastExpr 0x7fffd83919e8 <col:7> 'void (*)(stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x7fffd8391828 <col:7> 'void (stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' Function 0x7fffd838b970 'stbtt_setvertex' 'void (stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)'
|   | |   |-UnaryOperator 0x7fffd8391900 <col:23, col:47> 'stbtt_vertex *' prefix '&'
|   | |   | `-ArraySubscriptExpr 0x7fffd83918d8 <col:24, col:47> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | |   |   |-ImplicitCastExpr 0x7fffd83918c0 <col:24> 'stbtt_vertex *' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x7fffd8391850 <col:24> 'stbtt_vertex *' lvalue ParmVar 0x7fffd8390be0 'vertices' 'stbtt_vertex *'
|   | |   |   `-UnaryOperator 0x7fffd83918a0 <col:33, col:45> 'int' postfix '++'
|   | |   |     `-DeclRefExpr 0x7fffd8391878 <col:33> 'int' lvalue ParmVar 0x7fffd8390c58 'num_vertices' 'int'
|   | |   |-ImplicitCastExpr 0x7fffd8391a58 <col:50> 'stbtt_uint8':'unsigned char' <IntegralCast>
|   | |   | `-DeclRefExpr 0x7fffd8391920 <col:50> 'int' EnumConstant 0x7fffd8351680 'STBTT_vcurve' 'int'
|   | |   |-ImplicitCastExpr 0x7fffd8391a70 <col:64> 'stbtt_int32':'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd8391948 <col:64> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd8390db8 'sx' 'stbtt_int32':'int'
|   | |   |-ImplicitCastExpr 0x7fffd8391a88 <col:67> 'stbtt_int32':'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd8391970 <col:67> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd8390e28 'sy' 'stbtt_int32':'int'
|   | |   |-ImplicitCastExpr 0x7fffd8391aa0 <col:70> 'stbtt_int32':'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd8391998 <col:70> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd8390e98 'scx' 'stbtt_int32':'int'
|   | |   `-ImplicitCastExpr 0x7fffd8391ab8 <col:74> 'stbtt_int32':'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x7fffd83919c0 <col:74> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd8390f08 'scy' 'stbtt_int32':'int'
|   | `-CompoundStmt 0x7fffd8392078 <line:1660:11, line:1665:4>
|   |   `-IfStmt 0x7fffd8392040 <line:1661:7, line:1664:74>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-ImplicitCastExpr 0x7fffd8391b18 <line:1661:11> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd8391af0 <col:11> 'int' lvalue ParmVar 0x7fffd8390cd0 'was_off' 'int'
|   |     |-CallExpr 0x7fffd8391d08 <line:1662:10, col:77> 'void'
|   |     | |-ImplicitCastExpr 0x7fffd8391cf0 <col:10> 'void (*)(stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x7fffd8391b30 <col:10> 'void (stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' Function 0x7fffd838b970 'stbtt_setvertex' 'void (stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)'
|   |     | |-UnaryOperator 0x7fffd8391c08 <col:26, col:50> 'stbtt_vertex *' prefix '&'
|   |     | | `-ArraySubscriptExpr 0x7fffd8391be0 <col:27, col:50> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |     | |   |-ImplicitCastExpr 0x7fffd8391bc8 <col:27> 'stbtt_vertex *' <LValueToRValue>
|   |     | |   | `-DeclRefExpr 0x7fffd8391b58 <col:27> 'stbtt_vertex *' lvalue ParmVar 0x7fffd8390be0 'vertices' 'stbtt_vertex *'
|   |     | |   `-UnaryOperator 0x7fffd8391ba8 <col:36, col:48> 'int' postfix '++'
|   |     | |     `-DeclRefExpr 0x7fffd8391b80 <col:36> 'int' lvalue ParmVar 0x7fffd8390c58 'num_vertices' 'int'
|   |     | |-ImplicitCastExpr 0x7fffd8391d60 <col:53> 'stbtt_uint8':'unsigned char' <IntegralCast>
|   |     | | `-DeclRefExpr 0x7fffd8391c28 <col:53> 'int' EnumConstant 0x7fffd8351680 'STBTT_vcurve' 'int'
|   |     | |-ImplicitCastExpr 0x7fffd8391d78 <col:66> 'stbtt_int32':'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x7fffd8391c50 <col:66> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd8390db8 'sx' 'stbtt_int32':'int'
|   |     | |-ImplicitCastExpr 0x7fffd8391d90 <col:69> 'stbtt_int32':'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x7fffd8391c78 <col:69> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd8390e28 'sy' 'stbtt_int32':'int'
|   |     | |-ImplicitCastExpr 0x7fffd8391da8 <col:72> 'stbtt_int32':'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x7fffd8391ca0 <col:72> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd8390f78 'cx' 'stbtt_int32':'int'
|   |     | `-ImplicitCastExpr 0x7fffd8391dc0 <col:75> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fffd8391cc8 <col:75> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd8390fe8 'cy' 'stbtt_int32':'int'
|   |     `-CallExpr 0x7fffd8391fa0 <line:1664:10, col:74> 'void'
|   |       |-ImplicitCastExpr 0x7fffd8391f88 <col:10> 'void (*)(stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x7fffd8391dd8 <col:10> 'void (stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' Function 0x7fffd838b970 'stbtt_setvertex' 'void (stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)'
|   |       |-UnaryOperator 0x7fffd8391eb0 <col:26, col:50> 'stbtt_vertex *' prefix '&'
|   |       | `-ArraySubscriptExpr 0x7fffd8391e88 <col:27, col:50> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |       |   |-ImplicitCastExpr 0x7fffd8391e70 <col:27> 'stbtt_vertex *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x7fffd8391e00 <col:27> 'stbtt_vertex *' lvalue ParmVar 0x7fffd8390be0 'vertices' 'stbtt_vertex *'
|   |       |   `-UnaryOperator 0x7fffd8391e50 <col:36, col:48> 'int' postfix '++'
|   |       |     `-DeclRefExpr 0x7fffd8391e28 <col:36> 'int' lvalue ParmVar 0x7fffd8390c58 'num_vertices' 'int'
|   |       |-ImplicitCastExpr 0x7fffd8391ff8 <col:53> 'stbtt_uint8':'unsigned char' <IntegralCast>
|   |       | `-DeclRefExpr 0x7fffd8391ed0 <col:53> 'int' EnumConstant 0x7fffd8351638 'STBTT_vline' 'int'
|   |       |-ImplicitCastExpr 0x7fffd8392010 <col:65> 'stbtt_int32':'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x7fffd8391ef8 <col:65> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd8390db8 'sx' 'stbtt_int32':'int'
|   |       |-ImplicitCastExpr 0x7fffd8392028 <col:68> 'stbtt_int32':'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x7fffd8391f20 <col:68> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd8390e28 'sy' 'stbtt_int32':'int'
|   |       |-IntegerLiteral 0x7fffd8391f48 <col:71> 'int' 0
|   |       `-IntegerLiteral 0x7fffd8391f68 <col:73> 'int' 0
|   `-ReturnStmt 0x7fffd8392108 <line:1666:4, col:11>
|     `-ImplicitCastExpr 0x7fffd83920f0 <col:11> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd83920c8 <col:11> 'int' lvalue ParmVar 0x7fffd8390c58 'num_vertices' 'int'
|-FunctionDecl 0x7fffd83922e0 <line:1669:1, line:1890:1> line:1669:12 used stbtt__GetGlyphShapeTT 'int (const stbtt_fontinfo *, int, stbtt_vertex **)' static
| |-ParmVarDecl 0x7fffd8392150 <col:35, col:57> col:57 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83921c8 <col:63, col:67> col:67 used glyph_index 'int'
| |-ParmVarDecl 0x7fffd8392240 <col:80, col:95> col:95 used pvertices 'stbtt_vertex **'
| `-CompoundStmt 0x7fffd83a28e8 <line:1670:1, line:1890:1>
|   |-DeclStmt 0x7fffd8392408 <line:1671:4, col:32>
|   | `-VarDecl 0x7fffd83923a8 <col:4, col:16> col:16 used numberOfContours 'stbtt_int16':'short'
|   |-DeclStmt 0x7fffd8392490 <line:1672:4, col:33>
|   | `-VarDecl 0x7fffd8392430 <col:4, col:17> col:17 used endPtsOfContours 'stbtt_uint8 *'
|   |-DeclStmt 0x7fffd83925a8 <line:1673:4, col:34>
|   | `-VarDecl 0x7fffd83924b8 <col:4, col:30> col:17 used data 'stbtt_uint8 *' cinit
|   |   `-ImplicitCastExpr 0x7fffd8392590 <col:24, col:30> 'unsigned char *' <LValueToRValue>
|   |     `-MemberExpr 0x7fffd8392558 <col:24, col:30> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   |       `-ImplicitCastExpr 0x7fffd8392540 <col:24> 'const stbtt_fontinfo *' <LValueToRValue>
|   |         `-DeclRefExpr 0x7fffd8392518 <col:24> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd8392150 'info' 'const stbtt_fontinfo *'
|   |-DeclStmt 0x7fffd8392668 <line:1674:4, col:28>
|   | `-VarDecl 0x7fffd83925d0 <col:4, col:27> col:18 used vertices 'stbtt_vertex *' cinit
|   |   `-ImplicitCastExpr 0x7fffd8392650 <col:27> 'stbtt_vertex *' <NullToPointer>
|   |     `-IntegerLiteral 0x7fffd8392630 <col:27> 'int' 0
|   |-DeclStmt 0x7fffd8392718 <line:1675:4, col:22>
|   | `-VarDecl 0x7fffd8392698 <col:4, col:21> col:8 used num_vertices 'int' cinit
|   |   `-IntegerLiteral 0x7fffd83926f8 <col:21> 'int' 0
|   |-DeclStmt 0x7fffd83928a0 <line:1676:4, col:51>
|   | `-VarDecl 0x7fffd8392748 <col:4, col:50> col:8 used g 'int' cinit
|   |   `-CallExpr 0x7fffd8392838 <col:12, col:50> 'int'
|   |     |-ImplicitCastExpr 0x7fffd8392820 <col:12> 'int (*)(const stbtt_fontinfo *, int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd83927a8 <col:12> 'int (const stbtt_fontinfo *, int)' Function 0x7fffd838c0d8 'stbtt__GetGlyfOffset' 'int (const stbtt_fontinfo *, int)'
|   |     |-ImplicitCastExpr 0x7fffd8392870 <col:33> 'const stbtt_fontinfo *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd83927d0 <col:33> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd8392150 'info' 'const stbtt_fontinfo *'
|   |     `-ImplicitCastExpr 0x7fffd8392888 <col:39> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd83927f8 <col:39> 'int' lvalue ParmVar 0x7fffd83921c8 'glyph_index' 'int'
|   |-BinaryOperator 0x7fffd83929b0 <line:1678:4, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25> 'stbtt_vertex *' '='
|   | |-UnaryOperator 0x7fffd83928f8 <././stb/stb_truetype.h:1678:4, col:5> 'stbtt_vertex *' lvalue prefix '*'
|   | | `-ImplicitCastExpr 0x7fffd83928e0 <col:5> 'stbtt_vertex **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83928b8 <col:5> 'stbtt_vertex **' lvalue ParmVar 0x7fffd8392240 'pvertices' 'stbtt_vertex **'
|   | `-ImplicitCastExpr 0x7fffd8392998 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'stbtt_vertex *' <NullToPointer>
|   |   `-ParenExpr 0x7fffd8392978 <col:16, col:25> 'void *'
|   |     `-CStyleCastExpr 0x7fffd8392950 <col:17, col:24> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x7fffd8392918 <col:24> 'int' 0
|   |-IfStmt 0x7fffd8392a98 <././stb/stb_truetype.h:1680:4, col:22>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd8392a38 <col:8, col:12> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd8392a20 <col:8> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd83929d8 <col:8> 'int' lvalue Var 0x7fffd8392748 'g' 'int'
|   | | `-IntegerLiteral 0x7fffd8392a00 <col:12> 'int' 0
|   | |-ReturnStmt 0x7fffd8392a80 <col:15, col:22>
|   | | `-IntegerLiteral 0x7fffd8392a60 <col:22> 'int' 0
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x7fffd8392c10 <line:1682:4, col:39> 'stbtt_int16':'short' '='
|   | |-DeclRefExpr 0x7fffd8392ad0 <col:4> 'stbtt_int16':'short' lvalue Var 0x7fffd83923a8 'numberOfContours' 'stbtt_int16':'short'
|   | `-CallExpr 0x7fffd8392be0 <col:23, col:39> 'stbtt_int16':'short'
|   |   |-ImplicitCastExpr 0x7fffd8392bc8 <col:23> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x7fffd8392af8 <col:23> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |   `-BinaryOperator 0x7fffd8392ba0 <col:31, col:38> 'stbtt_uint8 *' '+'
|   |     |-ImplicitCastExpr 0x7fffd8392b70 <col:31> 'stbtt_uint8 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd8392b20 <col:31> 'stbtt_uint8 *' lvalue Var 0x7fffd83924b8 'data' 'stbtt_uint8 *'
|   |     `-ImplicitCastExpr 0x7fffd8392b88 <col:38> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd8392b48 <col:38> 'int' lvalue Var 0x7fffd8392748 'g' 'int'
|   |-IfStmt 0x7fffd83a2790 <line:1684:4, line:1886:4>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd8392cb0 <line:1684:8, col:27> 'int' '>'
|   | | |-ImplicitCastExpr 0x7fffd8392c98 <col:8> 'int' <IntegralCast>
|   | | | `-ImplicitCastExpr 0x7fffd8392c80 <col:8> 'stbtt_int16':'short' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd8392c38 <col:8> 'stbtt_int16':'short' lvalue Var 0x7fffd83923a8 'numberOfContours' 'stbtt_int16':'short'
|   | | `-IntegerLiteral 0x7fffd8392c60 <col:27> 'int' 0
|   | |-CompoundStmt 0x7fffd839a650 <col:30, line:1807:4>
|   | | |-DeclStmt 0x7fffd8392e08 <line:1685:7, col:36>
|   | | | |-VarDecl 0x7fffd8392ce8 <col:7, col:25> col:19 used flags 'stbtt_uint8':'unsigned char' cinit
|   | | | | `-ImplicitCastExpr 0x7fffd8392d68 <col:25> 'stbtt_uint8':'unsigned char' <IntegralCast>
|   | | | |   `-IntegerLiteral 0x7fffd8392d48 <col:25> 'int' 0
|   | | | `-VarDecl 0x7fffd8392d90 <col:7, col:27> col:27 used flagcount 'stbtt_uint8':'unsigned char'
|   | | |-DeclStmt 0x7fffd83932c0 <line:1686:7, col:73>
|   | | | |-VarDecl 0x7fffd8392e30 <col:7, col:19> col:19 used ins 'stbtt_int32':'int'
|   | | | |-VarDecl 0x7fffd8392ea0 <col:7, col:24> col:24 used i 'stbtt_int32':'int'
|   | | | |-VarDecl 0x7fffd8392f10 <col:7, col:28> col:26 used j 'stbtt_int32':'int' cinit
|   | | | | `-IntegerLiteral 0x7fffd8392f70 <col:28> 'int' 0
|   | | | |-VarDecl 0x7fffd8392fa0 <col:7, col:30> col:30 used m 'stbtt_int32':'int'
|   | | | |-VarDecl 0x7fffd8393010 <col:7, col:32> col:32 used n 'stbtt_int32':'int'
|   | | | |-VarDecl 0x7fffd8393080 <col:7, col:35> col:35 used next_move 'stbtt_int32':'int'
|   | | | |-VarDecl 0x7fffd83930f0 <col:7, col:54> col:46 used was_off 'stbtt_int32':'int' cinit
|   | | | | `-IntegerLiteral 0x7fffd8393150 <col:54> 'int' 0
|   | | | |-VarDecl 0x7fffd8393180 <col:7, col:57> col:57 used off 'stbtt_int32':'int'
|   | | | `-VarDecl 0x7fffd83931f0 <col:7, col:72> col:62 used start_off 'stbtt_int32':'int' cinit
|   | | |   `-IntegerLiteral 0x7fffd8393250 <col:72> 'int' 0
|   | | |-DeclStmt 0x7fffd83936a0 <line:1687:7, col:43>
|   | | | |-VarDecl 0x7fffd83932e8 <col:7, col:19> col:19 used x 'stbtt_int32':'int'
|   | | | |-VarDecl 0x7fffd8393358 <col:7, col:21> col:21 used y 'stbtt_int32':'int'
|   | | | |-VarDecl 0x7fffd83933c8 <col:7, col:23> col:23 used cx 'stbtt_int32':'int'
|   | | | |-VarDecl 0x7fffd8393438 <col:7, col:26> col:26 used cy 'stbtt_int32':'int'
|   | | | |-VarDecl 0x7fffd83934a8 <col:7, col:29> col:29 used sx 'stbtt_int32':'int'
|   | | | |-VarDecl 0x7fffd8393518 <col:7, col:32> col:32 used sy 'stbtt_int32':'int'
|   | | | |-VarDecl 0x7fffd8393588 <col:7, col:36> col:36 used scx 'stbtt_int32':'int'
|   | | | `-VarDecl 0x7fffd83935f8 <col:7, col:40> col:40 used scy 'stbtt_int32':'int'
|   | | |-DeclStmt 0x7fffd8393750 <line:1688:7, col:26>
|   | | | `-VarDecl 0x7fffd83936f0 <col:7, col:20> col:20 used points 'stbtt_uint8 *'
|   | | |-BinaryOperator 0x7fffd83938a0 <line:1689:7, col:40> 'stbtt_uint8 *' '='
|   | | | |-DeclRefExpr 0x7fffd8393768 <col:7> 'stbtt_uint8 *' lvalue Var 0x7fffd8392430 'endPtsOfContours' 'stbtt_uint8 *'
|   | | | `-ParenExpr 0x7fffd8393880 <col:26, col:40> 'stbtt_uint8 *'
|   | | |   `-BinaryOperator 0x7fffd8393858 <col:27, col:38> 'stbtt_uint8 *' '+'
|   | | |     |-BinaryOperator 0x7fffd8393810 <col:27, col:34> 'stbtt_uint8 *' '+'
|   | | |     | |-ImplicitCastExpr 0x7fffd83937e0 <col:27> 'stbtt_uint8 *' <LValueToRValue>
|   | | |     | | `-DeclRefExpr 0x7fffd8393790 <col:27> 'stbtt_uint8 *' lvalue Var 0x7fffd83924b8 'data' 'stbtt_uint8 *'
|   | | |     | `-ImplicitCastExpr 0x7fffd83937f8 <col:34> 'int' <LValueToRValue>
|   | | |     |   `-DeclRefExpr 0x7fffd83937b8 <col:34> 'int' lvalue Var 0x7fffd8392748 'g' 'int'
|   | | |     `-IntegerLiteral 0x7fffd8393838 <col:38> 'int' 10
|   | | |-BinaryOperator 0x7fffd8393b30 <line:1690:7, col:58> 'stbtt_int32':'int' '='
|   | | | |-DeclRefExpr 0x7fffd83938c8 <col:7> 'stbtt_int32':'int' lvalue Var 0x7fffd8392e30 'ins' 'stbtt_int32':'int'
|   | | | `-ImplicitCastExpr 0x7fffd8393b18 <col:13, col:58> 'stbtt_int32':'int' <IntegralCast>
|   | | |   `-CallExpr 0x7fffd8393ae8 <col:13, col:58> 'stbtt_uint16':'unsigned short'
|   | | |     |-ImplicitCastExpr 0x7fffd8393ad0 <col:13> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | | |     | `-DeclRefExpr 0x7fffd83938f0 <col:13> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   | | |     `-BinaryOperator 0x7fffd8393aa8 <col:22, col:57> 'stbtt_uint8 *' '+'
|   | | |       |-BinaryOperator 0x7fffd83939e0 <col:22, col:33> 'stbtt_uint8 *' '+'
|   | | |       | |-BinaryOperator 0x7fffd8393998 <col:22, col:29> 'stbtt_uint8 *' '+'
|   | | |       | | |-ImplicitCastExpr 0x7fffd8393968 <col:22> 'stbtt_uint8 *' <LValueToRValue>
|   | | |       | | | `-DeclRefExpr 0x7fffd8393918 <col:22> 'stbtt_uint8 *' lvalue Var 0x7fffd83924b8 'data' 'stbtt_uint8 *'
|   | | |       | | `-ImplicitCastExpr 0x7fffd8393980 <col:29> 'int' <LValueToRValue>
|   | | |       | |   `-DeclRefExpr 0x7fffd8393940 <col:29> 'int' lvalue Var 0x7fffd8392748 'g' 'int'
|   | | |       | `-IntegerLiteral 0x7fffd83939c0 <col:33> 'int' 10
|   | | |       `-BinaryOperator 0x7fffd8393a80 <col:38, col:57> 'int' '*'
|   | | |         |-ImplicitCastExpr 0x7fffd8393a68 <col:38> 'int' <IntegralCast>
|   | | |         | `-ImplicitCastExpr 0x7fffd8393a50 <col:38> 'stbtt_int16':'short' <LValueToRValue>
|   | | |         |   `-DeclRefExpr 0x7fffd8393a08 <col:38> 'stbtt_int16':'short' lvalue Var 0x7fffd83923a8 'numberOfContours' 'stbtt_int16':'short'
|   | | |         `-IntegerLiteral 0x7fffd8393a30 <col:57> 'int' 2
|   | | |-BinaryOperator 0x7fffd8393de8 <line:1691:7, col:59> 'stbtt_uint8 *' '='
|   | | | |-DeclRefExpr 0x7fffd8393b58 <col:7> 'stbtt_uint8 *' lvalue Var 0x7fffd83936f0 'points' 'stbtt_uint8 *'
|   | | | `-BinaryOperator 0x7fffd8393dc0 <col:16, col:59> 'stbtt_uint8 *' '+'
|   | | |   |-BinaryOperator 0x7fffd8393d58 <col:16, col:55> 'stbtt_uint8 *' '+'
|   | | |   | |-BinaryOperator 0x7fffd8393d10 <col:16, col:51> 'stbtt_uint8 *' '+'
|   | | |   | | |-BinaryOperator 0x7fffd8393c48 <col:16, col:27> 'stbtt_uint8 *' '+'
|   | | |   | | | |-BinaryOperator 0x7fffd8393c00 <col:16, col:23> 'stbtt_uint8 *' '+'
|   | | |   | | | | |-ImplicitCastExpr 0x7fffd8393bd0 <col:16> 'stbtt_uint8 *' <LValueToRValue>
|   | | |   | | | | | `-DeclRefExpr 0x7fffd8393b80 <col:16> 'stbtt_uint8 *' lvalue Var 0x7fffd83924b8 'data' 'stbtt_uint8 *'
|   | | |   | | | | `-ImplicitCastExpr 0x7fffd8393be8 <col:23> 'int' <LValueToRValue>
|   | | |   | | | |   `-DeclRefExpr 0x7fffd8393ba8 <col:23> 'int' lvalue Var 0x7fffd8392748 'g' 'int'
|   | | |   | | | `-IntegerLiteral 0x7fffd8393c28 <col:27> 'int' 10
|   | | |   | | `-BinaryOperator 0x7fffd8393ce8 <col:32, col:51> 'int' '*'
|   | | |   | |   |-ImplicitCastExpr 0x7fffd8393cd0 <col:32> 'int' <IntegralCast>
|   | | |   | |   | `-ImplicitCastExpr 0x7fffd8393cb8 <col:32> 'stbtt_int16':'short' <LValueToRValue>
|   | | |   | |   |   `-DeclRefExpr 0x7fffd8393c70 <col:32> 'stbtt_int16':'short' lvalue Var 0x7fffd83923a8 'numberOfContours' 'stbtt_int16':'short'
|   | | |   | |   `-IntegerLiteral 0x7fffd8393c98 <col:51> 'int' 2
|   | | |   | `-IntegerLiteral 0x7fffd8393d38 <col:55> 'int' 2
|   | | |   `-ImplicitCastExpr 0x7fffd8393da8 <col:59> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x7fffd8393d80 <col:59> 'stbtt_int32':'int' lvalue Var 0x7fffd8392e30 'ins' 'stbtt_int32':'int'
|   | | |-BinaryOperator 0x7fffd8394058 <line:1693:7, col:61> 'stbtt_int32':'int' '='
|   | | | |-DeclRefExpr 0x7fffd8393e10 <col:7> 'stbtt_int32':'int' lvalue Var 0x7fffd8393010 'n' 'stbtt_int32':'int'
|   | | | `-BinaryOperator 0x7fffd8394030 <col:11, col:61> 'int' '+'
|   | | |   |-IntegerLiteral 0x7fffd8393e38 <col:11> 'int' 1
|   | | |   `-ImplicitCastExpr 0x7fffd8394018 <col:13, col:61> 'int' <IntegralCast>
|   | | |     `-CallExpr 0x7fffd8393fe8 <col:13, col:61> 'stbtt_uint16':'unsigned short'
|   | | |       |-ImplicitCastExpr 0x7fffd8393fd0 <col:13> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | | |       | `-DeclRefExpr 0x7fffd8393e58 <col:13> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   | | |       `-BinaryOperator 0x7fffd8393fa8 <col:22, col:60> 'stbtt_uint8 *' '-'
|   | | |         |-BinaryOperator 0x7fffd8393f60 <col:22, col:58> 'stbtt_uint8 *' '+'
|   | | |         | |-ImplicitCastExpr 0x7fffd8393f48 <col:22> 'stbtt_uint8 *' <LValueToRValue>
|   | | |         | | `-DeclRefExpr 0x7fffd8393e80 <col:22> 'stbtt_uint8 *' lvalue Var 0x7fffd8392430 'endPtsOfContours' 'stbtt_uint8 *'
|   | | |         | `-BinaryOperator 0x7fffd8393f20 <col:41, col:58> 'int' '*'
|   | | |         |   |-ImplicitCastExpr 0x7fffd8393f08 <col:41> 'int' <IntegralCast>
|   | | |         |   | `-ImplicitCastExpr 0x7fffd8393ef0 <col:41> 'stbtt_int16':'short' <LValueToRValue>
|   | | |         |   |   `-DeclRefExpr 0x7fffd8393ea8 <col:41> 'stbtt_int16':'short' lvalue Var 0x7fffd83923a8 'numberOfContours' 'stbtt_int16':'short'
|   | | |         |   `-IntegerLiteral 0x7fffd8393ed0 <col:58> 'int' 2
|   | | |         `-IntegerLiteral 0x7fffd8393f88 <col:60> 'int' 2
|   | | |-BinaryOperator 0x7fffd83941b0 <line:1695:7, col:17> 'stbtt_int32':'int' '='
|   | | | |-DeclRefExpr 0x7fffd8394080 <col:7> 'stbtt_int32':'int' lvalue Var 0x7fffd8392fa0 'm' 'stbtt_int32':'int'
|   | | | `-BinaryOperator 0x7fffd8394188 <col:11, col:17> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x7fffd8394170 <col:11> 'stbtt_int32':'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x7fffd83940a8 <col:11> 'stbtt_int32':'int' lvalue Var 0x7fffd8393010 'n' 'stbtt_int32':'int'
|   | | |   `-BinaryOperator 0x7fffd8394148 <col:15, col:17> 'int' '*'
|   | | |     |-IntegerLiteral 0x7fffd83940d0 <col:15> 'int' 2
|   | | |     `-ImplicitCastExpr 0x7fffd8394130 <col:17> 'int' <IntegralCast>
|   | | |       `-ImplicitCastExpr 0x7fffd8394118 <col:17> 'stbtt_int16':'short' <LValueToRValue>
|   | | |         `-DeclRefExpr 0x7fffd83940f0 <col:17> 'stbtt_int16':'short' lvalue Var 0x7fffd83923a8 'numberOfContours' 'stbtt_int16':'short'
|   | | |-BinaryOperator 0x7fffd83945b8 <line:1696:7, line:467:51> 'stbtt_vertex *' '='
|   | | | |-DeclRefExpr 0x7fffd83941d8 <line:1696:7> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   | | | `-CStyleCastExpr 0x7fffd8394590 <col:18, line:467:51> 'stbtt_vertex *' <BitCast>
|   | | |   `-ParenExpr 0x7fffd8394570 <col:31, col:51> 'void *'
|   | | |     `-BinaryOperator 0x7fffd8394548 <col:32, col:50> 'void *' ','
|   | | |       |-CStyleCastExpr 0x7fffd83942f0 <col:32, col:40> 'void' <ToVoid>
|   | | |       | `-ImplicitCastExpr 0x7fffd83942d8 <col:38, col:40> 'void *' <LValueToRValue>
|   | | |       |   `-ParenExpr 0x7fffd83942b8 <col:38, col:40> 'void *const' lvalue
|   | | |       |     `-MemberExpr 0x7fffd8394240 <line:1696:73, col:79> 'void *const' lvalue ->userdata 0x7fffd834cb78
|   | | |       |       `-ImplicitCastExpr 0x7fffd8394228 <col:73> 'const stbtt_fontinfo *' <LValueToRValue>
|   | | |       |         `-DeclRefExpr 0x7fffd8394200 <col:73> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd8392150 'info' 'const stbtt_fontinfo *'
|   | | |       `-CallExpr 0x7fffd83944d0 <line:467:42, col:50> 'void *'
|   | | |         |-ImplicitCastExpr 0x7fffd83944b8 <col:42> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|   | | |         | `-DeclRefExpr 0x7fffd8394318 <col:42> 'void *(unsigned long)' Function 0x7fffd831b4b0 'malloc' 'void *(unsigned long)'
|   | | |         `-BinaryOperator 0x7fffd8394460 <line:1696:48, col:70> 'unsigned long' '*'
|   | | |           |-ImplicitCastExpr 0x7fffd8394448 <col:48> 'unsigned long' <IntegralCast>
|   | | |           | `-ImplicitCastExpr 0x7fffd8394430 <col:48> 'stbtt_int32':'int' <LValueToRValue>
|   | | |           |   `-DeclRefExpr 0x7fffd8394340 <col:48> 'stbtt_int32':'int' lvalue Var 0x7fffd8392fa0 'm' 'stbtt_int32':'int'
|   | | |           `-UnaryExprOrTypeTraitExpr 0x7fffd8394410 <col:52, col:70> 'unsigned long' sizeof
|   | | |             `-ParenExpr 0x7fffd83943f0 <col:58, col:70> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | | |               `-ArraySubscriptExpr 0x7fffd83943c8 <col:59, col:69> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | | |                 |-ImplicitCastExpr 0x7fffd83943b0 <col:59> 'stbtt_vertex *' <LValueToRValue>
|   | | |                 | `-DeclRefExpr 0x7fffd8394368 <col:59> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   | | |                 `-IntegerLiteral 0x7fffd8394390 <col:68> 'int' 0
|   | | |-IfStmt 0x7fffd83946b8 <line:1697:7, line:1698:17>
|   | | | |-<<<NULL>>>
|   | | | |-<<<NULL>>>
|   | | | |-BinaryOperator 0x7fffd8394658 <line:1697:11, col:23> 'int' '=='
|   | | | | |-ImplicitCastExpr 0x7fffd8394628 <col:11> 'stbtt_vertex *' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x7fffd83945e0 <col:11> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   | | | | `-ImplicitCastExpr 0x7fffd8394640 <col:23> 'stbtt_vertex *' <NullToPointer>
|   | | | |   `-IntegerLiteral 0x7fffd8394608 <col:23> 'int' 0
|   | | | |-ReturnStmt 0x7fffd83946a0 <line:1698:10, col:17>
|   | | | | `-IntegerLiteral 0x7fffd8394680 <col:17> 'int' 0
|   | | | `-<<<NULL>>>
|   | | |-BinaryOperator 0x7fffd8394738 <line:1700:7, col:19> 'stbtt_int32':'int' '='
|   | | | |-DeclRefExpr 0x7fffd83946f0 <col:7> 'stbtt_int32':'int' lvalue Var 0x7fffd8393080 'next_move' 'stbtt_int32':'int'
|   | | | `-IntegerLiteral 0x7fffd8394718 <col:19> 'int' 0
|   | | |-BinaryOperator 0x7fffd83947c0 <line:1701:7, col:17> 'stbtt_uint8':'unsigned char' '='
|   | | | |-DeclRefExpr 0x7fffd8394760 <col:7> 'stbtt_uint8':'unsigned char' lvalue Var 0x7fffd8392d90 'flagcount' 'stbtt_uint8':'unsigned char'
|   | | | `-ImplicitCastExpr 0x7fffd83947a8 <col:17> 'stbtt_uint8':'unsigned char' <IntegralCast>
|   | | |   `-IntegerLiteral 0x7fffd8394788 <col:17> 'int' 0
|   | | |-BinaryOperator 0x7fffd83948b8 <line:1707:7, col:17> 'stbtt_int32':'int' '='
|   | | | |-DeclRefExpr 0x7fffd83947e8 <col:7> 'stbtt_int32':'int' lvalue Var 0x7fffd8393180 'off' 'stbtt_int32':'int'
|   | | | `-BinaryOperator 0x7fffd8394890 <col:13, col:17> 'int' '-'
|   | | |   |-ImplicitCastExpr 0x7fffd8394860 <col:13> 'stbtt_int32':'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x7fffd8394810 <col:13> 'stbtt_int32':'int' lvalue Var 0x7fffd8392fa0 'm' 'stbtt_int32':'int'
|   | | |   `-ImplicitCastExpr 0x7fffd8394878 <col:17> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x7fffd8394838 <col:17> 'stbtt_int32':'int' lvalue Var 0x7fffd8393010 'n' 'stbtt_int32':'int'
|   | | |-ForStmt 0x7fffd8394fc8 <line:1711:7, line:1719:7>
|   | | | |-BinaryOperator 0x7fffd8394928 <line:1711:12, col:14> 'stbtt_int32':'int' '='
|   | | | | |-DeclRefExpr 0x7fffd83948e0 <col:12> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | | | `-IntegerLiteral 0x7fffd8394908 <col:14> 'int' 0
|   | | | |-<<<NULL>>>
|   | | | |-BinaryOperator 0x7fffd83949d0 <col:17, col:21> 'int' '<'
|   | | | | |-ImplicitCastExpr 0x7fffd83949a0 <col:17> 'stbtt_int32':'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x7fffd8394950 <col:17> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | | | `-ImplicitCastExpr 0x7fffd83949b8 <col:21> 'stbtt_int32':'int' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x7fffd8394978 <col:21> 'stbtt_int32':'int' lvalue Var 0x7fffd8393010 'n' 'stbtt_int32':'int'
|   | | | |-UnaryOperator 0x7fffd8394a20 <col:24, col:26> 'stbtt_int32':'int' prefix '++'
|   | | | | `-DeclRefExpr 0x7fffd83949f8 <col:26> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | | `-CompoundStmt 0x7fffd8394fa8 <col:29, line:1719:7>
|   | | |   |-IfStmt 0x7fffd8394dc0 <line:1712:10, line:1717:15>
|   | | |   | |-<<<NULL>>>
|   | | |   | |-<<<NULL>>>
|   | | |   | |-BinaryOperator 0x7fffd8394ab8 <line:1712:14, col:27> 'int' '=='
|   | | |   | | |-ImplicitCastExpr 0x7fffd8394aa0 <col:14> 'int' <IntegralCast>
|   | | |   | | | `-ImplicitCastExpr 0x7fffd8394a88 <col:14> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | | |   | | |   `-DeclRefExpr 0x7fffd8394a40 <col:14> 'stbtt_uint8':'unsigned char' lvalue Var 0x7fffd8392d90 'flagcount' 'stbtt_uint8':'unsigned char'
|   | | |   | | `-IntegerLiteral 0x7fffd8394a68 <col:27> 'int' 0
|   | | |   | |-CompoundStmt 0x7fffd8394d58 <col:30, line:1716:10>
|   | | |   | | |-BinaryOperator 0x7fffd8394b88 <line:1713:13, col:28> 'stbtt_uint8':'unsigned char' '='
|   | | |   | | | |-DeclRefExpr 0x7fffd8394ae0 <col:13> 'stbtt_uint8':'unsigned char' lvalue Var 0x7fffd8392ce8 'flags' 'stbtt_uint8':'unsigned char'
|   | | |   | | | `-ImplicitCastExpr 0x7fffd8394b70 <col:21, col:28> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | | |   | | |   `-UnaryOperator 0x7fffd8394b50 <col:21, col:28> 'stbtt_uint8':'unsigned char' lvalue prefix '*'
|   | | |   | | |     `-UnaryOperator 0x7fffd8394b30 <col:22, col:28> 'stbtt_uint8 *' postfix '++'
|   | | |   | | |       `-DeclRefExpr 0x7fffd8394b08 <col:22> 'stbtt_uint8 *' lvalue Var 0x7fffd83936f0 'points' 'stbtt_uint8 *'
|   | | |   | | `-IfStmt 0x7fffd8394d20 <line:1714:13, line:1715:35>
|   | | |   | |   |-<<<NULL>>>
|   | | |   | |   |-<<<NULL>>>
|   | | |   | |   |-BinaryOperator 0x7fffd8394c28 <line:1714:17, col:25> 'int' '&'
|   | | |   | |   | |-ImplicitCastExpr 0x7fffd8394c10 <col:17> 'int' <IntegralCast>
|   | | |   | |   | | `-ImplicitCastExpr 0x7fffd8394bf8 <col:17> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | | |   | |   | |   `-DeclRefExpr 0x7fffd8394bb0 <col:17> 'stbtt_uint8':'unsigned char' lvalue Var 0x7fffd8392ce8 'flags' 'stbtt_uint8':'unsigned char'
|   | | |   | |   | `-IntegerLiteral 0x7fffd8394bd8 <col:25> 'int' 8
|   | | |   | |   |-BinaryOperator 0x7fffd8394cf8 <line:1715:16, col:35> 'stbtt_uint8':'unsigned char' '='
|   | | |   | |   | |-DeclRefExpr 0x7fffd8394c50 <col:16> 'stbtt_uint8':'unsigned char' lvalue Var 0x7fffd8392d90 'flagcount' 'stbtt_uint8':'unsigned char'
|   | | |   | |   | `-ImplicitCastExpr 0x7fffd8394ce0 <col:28, col:35> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | | |   | |   |   `-UnaryOperator 0x7fffd8394cc0 <col:28, col:35> 'stbtt_uint8':'unsigned char' lvalue prefix '*'
|   | | |   | |   |     `-UnaryOperator 0x7fffd8394ca0 <col:29, col:35> 'stbtt_uint8 *' postfix '++'
|   | | |   | |   |       `-DeclRefExpr 0x7fffd8394c78 <col:29> 'stbtt_uint8 *' lvalue Var 0x7fffd83936f0 'points' 'stbtt_uint8 *'
|   | | |   | |   `-<<<NULL>>>
|   | | |   | `-UnaryOperator 0x7fffd8394da0 <line:1717:13, col:15> 'stbtt_uint8':'unsigned char' prefix '--'
|   | | |   |   `-DeclRefExpr 0x7fffd8394d78 <col:15> 'stbtt_uint8':'unsigned char' lvalue Var 0x7fffd8392d90 'flagcount' 'stbtt_uint8':'unsigned char'
|   | | |   `-BinaryOperator 0x7fffd8394f80 <line:1718:10, col:33> 'unsigned char' '='
|   | | |     |-MemberExpr 0x7fffd8394f08 <col:10, col:26> 'unsigned char' lvalue .type 0x7fffd8351a18
|   | | |     | `-ArraySubscriptExpr 0x7fffd8394ee0 <col:10, col:24> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | | |     |   |-ImplicitCastExpr 0x7fffd8394ec8 <col:10> 'stbtt_vertex *' <LValueToRValue>
|   | | |     |   | `-DeclRefExpr 0x7fffd8394df8 <col:10> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   | | |     |   `-BinaryOperator 0x7fffd8394ea0 <col:19, col:23> 'int' '+'
|   | | |     |     |-ImplicitCastExpr 0x7fffd8394e70 <col:19> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     |     | `-DeclRefExpr 0x7fffd8394e20 <col:19> 'stbtt_int32':'int' lvalue Var 0x7fffd8393180 'off' 'stbtt_int32':'int'
|   | | |     |     `-ImplicitCastExpr 0x7fffd8394e88 <col:23> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     |       `-DeclRefExpr 0x7fffd8394e48 <col:23> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | |     `-ImplicitCastExpr 0x7fffd8394f68 <col:33> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x7fffd8394f40 <col:33> 'stbtt_uint8':'unsigned char' lvalue Var 0x7fffd8392ce8 'flags' 'stbtt_uint8':'unsigned char'
|   | | |-BinaryOperator 0x7fffd8395048 <line:1722:7, col:9> 'stbtt_int32':'int' '='
|   | | | |-DeclRefExpr 0x7fffd8395000 <col:7> 'stbtt_int32':'int' lvalue Var 0x7fffd83932e8 'x' 'stbtt_int32':'int'
|   | | | `-IntegerLiteral 0x7fffd8395028 <col:9> 'int' 0
|   | | |-ForStmt 0x7fffd8395ef0 <line:1723:7, line:1735:7>
|   | | | |-BinaryOperator 0x7fffd83950b8 <line:1723:12, col:14> 'stbtt_int32':'int' '='
|   | | | | |-DeclRefExpr 0x7fffd8395070 <col:12> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | | | `-IntegerLiteral 0x7fffd8395098 <col:14> 'int' 0
|   | | | |-<<<NULL>>>
|   | | | |-BinaryOperator 0x7fffd8395160 <col:17, col:21> 'int' '<'
|   | | | | |-ImplicitCastExpr 0x7fffd8395130 <col:17> 'stbtt_int32':'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x7fffd83950e0 <col:17> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | | | `-ImplicitCastExpr 0x7fffd8395148 <col:21> 'stbtt_int32':'int' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x7fffd8395108 <col:21> 'stbtt_int32':'int' lvalue Var 0x7fffd8393010 'n' 'stbtt_int32':'int'
|   | | | |-UnaryOperator 0x7fffd83951b0 <col:24, col:26> 'stbtt_int32':'int' prefix '++'
|   | | | | `-DeclRefExpr 0x7fffd8395188 <col:26> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | | `-CompoundStmt 0x7fffd8395ec8 <col:29, line:1735:7>
|   | | |   |-BinaryOperator 0x7fffd8395358 <line:1724:10, col:34> 'stbtt_uint8':'unsigned char' '='
|   | | |   | |-DeclRefExpr 0x7fffd83951d0 <col:10> 'stbtt_uint8':'unsigned char' lvalue Var 0x7fffd8392ce8 'flags' 'stbtt_uint8':'unsigned char'
|   | | |   | `-ImplicitCastExpr 0x7fffd8395340 <col:18, col:34> 'unsigned char' <LValueToRValue>
|   | | |   |   `-MemberExpr 0x7fffd8395308 <col:18, col:34> 'unsigned char' lvalue .type 0x7fffd8351a18
|   | | |   |     `-ArraySubscriptExpr 0x7fffd83952e0 <col:18, col:32> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | | |   |       |-ImplicitCastExpr 0x7fffd83952c8 <col:18> 'stbtt_vertex *' <LValueToRValue>
|   | | |   |       | `-DeclRefExpr 0x7fffd83951f8 <col:18> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   | | |   |       `-BinaryOperator 0x7fffd83952a0 <col:27, col:31> 'int' '+'
|   | | |   |         |-ImplicitCastExpr 0x7fffd8395270 <col:27> 'stbtt_int32':'int' <LValueToRValue>
|   | | |   |         | `-DeclRefExpr 0x7fffd8395220 <col:27> 'stbtt_int32':'int' lvalue Var 0x7fffd8393180 'off' 'stbtt_int32':'int'
|   | | |   |         `-ImplicitCastExpr 0x7fffd8395288 <col:31> 'stbtt_int32':'int' <LValueToRValue>
|   | | |   |           `-DeclRefExpr 0x7fffd8395248 <col:31> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | |   |-IfStmt 0x7fffd8395ca8 <line:1725:10, line:1733:10>
|   | | |   | |-<<<NULL>>>
|   | | |   | |-<<<NULL>>>
|   | | |   | |-BinaryOperator 0x7fffd83953f8 <line:1725:14, col:22> 'int' '&'
|   | | |   | | |-ImplicitCastExpr 0x7fffd83953e0 <col:14> 'int' <IntegralCast>
|   | | |   | | | `-ImplicitCastExpr 0x7fffd83953c8 <col:14> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | | |   | | |   `-DeclRefExpr 0x7fffd8395380 <col:14> 'stbtt_uint8':'unsigned char' lvalue Var 0x7fffd8392ce8 'flags' 'stbtt_uint8':'unsigned char'
|   | | |   | | `-IntegerLiteral 0x7fffd83953a8 <col:22> 'int' 2
|   | | |   | |-CompoundStmt 0x7fffd8395780 <col:25, line:1728:10>
|   | | |   | | |-DeclStmt 0x7fffd8395528 <line:1726:13, col:39>
|   | | |   | | | `-VarDecl 0x7fffd8395430 <col:13, col:37> col:25 used dx 'stbtt_int16':'short' cinit
|   | | |   | | |   `-ImplicitCastExpr 0x7fffd8395510 <col:30, col:37> 'stbtt_int16':'short' <IntegralCast>
|   | | |   | | |     `-ImplicitCastExpr 0x7fffd83954f8 <col:30, col:37> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | | |   | | |       `-UnaryOperator 0x7fffd83954d8 <col:30, col:37> 'stbtt_uint8':'unsigned char' lvalue prefix '*'
|   | | |   | | |         `-UnaryOperator 0x7fffd83954b8 <col:31, col:37> 'stbtt_uint8 *' postfix '++'
|   | | |   | | |           `-DeclRefExpr 0x7fffd8395490 <col:31> 'stbtt_uint8 *' lvalue Var 0x7fffd83936f0 'points' 'stbtt_uint8 *'
|   | | |   | | `-CompoundAssignOperator 0x7fffd8395748 <line:1727:13, col:39> 'stbtt_int32':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | | |   | |   |-DeclRefExpr 0x7fffd8395540 <col:13> 'stbtt_int32':'int' lvalue Var 0x7fffd83932e8 'x' 'stbtt_int32':'int'
|   | | |   | |   `-ConditionalOperator 0x7fffd8395718 <col:18, col:39> 'int'
|   | | |   | |     |-ParenExpr 0x7fffd8395608 <col:18, col:29> 'int'
|   | | |   | |     | `-BinaryOperator 0x7fffd83955e0 <col:19, col:27> 'int' '&'
|   | | |   | |     |   |-ImplicitCastExpr 0x7fffd83955c8 <col:19> 'int' <IntegralCast>
|   | | |   | |     |   | `-ImplicitCastExpr 0x7fffd83955b0 <col:19> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | | |   | |     |   |   `-DeclRefExpr 0x7fffd8395568 <col:19> 'stbtt_uint8':'unsigned char' lvalue Var 0x7fffd8392ce8 'flags' 'stbtt_uint8':'unsigned char'
|   | | |   | |     |   `-IntegerLiteral 0x7fffd8395590 <col:27> 'int' 16
|   | | |   | |     |-ImplicitCastExpr 0x7fffd8395700 <col:33> 'int' <IntegralCast>
|   | | |   | |     | `-ImplicitCastExpr 0x7fffd83956c8 <col:33> 'stbtt_int16':'short' <LValueToRValue>
|   | | |   | |     |   `-DeclRefExpr 0x7fffd8395628 <col:33> 'stbtt_int16':'short' lvalue Var 0x7fffd8395430 'dx' 'stbtt_int16':'short'
|   | | |   | |     `-UnaryOperator 0x7fffd83956a8 <col:38, col:39> 'int' prefix '-'
|   | | |   | |       `-ImplicitCastExpr 0x7fffd8395690 <col:39> 'int' <IntegralCast>
|   | | |   | |         `-ImplicitCastExpr 0x7fffd8395678 <col:39> 'stbtt_int16':'short' <LValueToRValue>
|   | | |   | |           `-DeclRefExpr 0x7fffd8395650 <col:39> 'stbtt_int16':'short' lvalue Var 0x7fffd8395430 'dx' 'stbtt_int16':'short'
|   | | |   | `-CompoundStmt 0x7fffd8395c90 <line:1728:17, line:1733:10>
|   | | |   |   `-IfStmt 0x7fffd8395c58 <line:1729:13, line:1732:13>
|   | | |   |     |-<<<NULL>>>
|   | | |   |     |-<<<NULL>>>
|   | | |   |     |-UnaryOperator 0x7fffd8395860 <line:1729:17, col:29> 'int' prefix '!'
|   | | |   |     | `-ParenExpr 0x7fffd8395840 <col:18, col:29> 'int'
|   | | |   |     |   `-BinaryOperator 0x7fffd8395818 <col:19, col:27> 'int' '&'
|   | | |   |     |     |-ImplicitCastExpr 0x7fffd8395800 <col:19> 'int' <IntegralCast>
|   | | |   |     |     | `-ImplicitCastExpr 0x7fffd83957e8 <col:19> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | | |   |     |     |   `-DeclRefExpr 0x7fffd83957a0 <col:19> 'stbtt_uint8':'unsigned char' lvalue Var 0x7fffd8392ce8 'flags' 'stbtt_uint8':'unsigned char'
|   | | |   |     |     `-IntegerLiteral 0x7fffd83957c8 <col:27> 'int' 16
|   | | |   |     |-CompoundStmt 0x7fffd8395c38 <col:32, line:1732:13>
|   | | |   |     | |-BinaryOperator 0x7fffd8395b90 <line:1730:16, col:64> 'stbtt_int32':'int' '='
|   | | |   |     | | |-DeclRefExpr 0x7fffd8395880 <col:16> 'stbtt_int32':'int' lvalue Var 0x7fffd83932e8 'x' 'stbtt_int32':'int'
|   | | |   |     | | `-BinaryOperator 0x7fffd8395b68 <col:20, col:64> 'int' '+'
|   | | |   |     | |   |-ImplicitCastExpr 0x7fffd8395b38 <col:20> 'stbtt_int32':'int' <LValueToRValue>
|   | | |   |     | |   | `-DeclRefExpr 0x7fffd83958a8 <col:20> 'stbtt_int32':'int' lvalue Var 0x7fffd83932e8 'x' 'stbtt_int32':'int'
|   | | |   |     | |   `-ImplicitCastExpr 0x7fffd8395b50 <col:24, col:64> 'int' <IntegralCast>
|   | | |   |     | |     `-CStyleCastExpr 0x7fffd8395b10 <col:24, col:64> 'stbtt_int16':'short' <IntegralCast>
|   | | |   |     | |       `-ParenExpr 0x7fffd8395af0 <col:38, col:64> 'int'
|   | | |   |     | |         `-BinaryOperator 0x7fffd8395a88 <col:39, col:63> 'int' '+'
|   | | |   |     | |           |-BinaryOperator 0x7fffd83959a8 <col:39, col:49> 'int' '*'
|   | | |   |     | |           | |-ImplicitCastExpr 0x7fffd8395990 <col:39, col:47> 'int' <IntegralCast>
|   | | |   |     | |           | | `-ImplicitCastExpr 0x7fffd8395978 <col:39, col:47> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | | |   |     | |           | |   `-ArraySubscriptExpr 0x7fffd8395930 <col:39, col:47> 'stbtt_uint8':'unsigned char' lvalue
|   | | |   |     | |           | |     |-ImplicitCastExpr 0x7fffd8395918 <col:39> 'stbtt_uint8 *' <LValueToRValue>
|   | | |   |     | |           | |     | `-DeclRefExpr 0x7fffd83958d0 <col:39> 'stbtt_uint8 *' lvalue Var 0x7fffd83936f0 'points' 'stbtt_uint8 *'
|   | | |   |     | |           | |     `-IntegerLiteral 0x7fffd83958f8 <col:46> 'int' 0
|   | | |   |     | |           | `-IntegerLiteral 0x7fffd8395958 <col:49> 'int' 256
|   | | |   |     | |           `-ImplicitCastExpr 0x7fffd8395a70 <col:55, col:63> 'int' <IntegralCast>
|   | | |   |     | |             `-ImplicitCastExpr 0x7fffd8395a58 <col:55, col:63> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | | |   |     | |               `-ArraySubscriptExpr 0x7fffd8395a30 <col:55, col:63> 'stbtt_uint8':'unsigned char' lvalue
|   | | |   |     | |                 |-ImplicitCastExpr 0x7fffd8395a18 <col:55> 'stbtt_uint8 *' <LValueToRValue>
|   | | |   |     | |                 | `-DeclRefExpr 0x7fffd83959d0 <col:55> 'stbtt_uint8 *' lvalue Var 0x7fffd83936f0 'points' 'stbtt_uint8 *'
|   | | |   |     | |                 `-IntegerLiteral 0x7fffd83959f8 <col:62> 'int' 1
|   | | |   |     | `-CompoundAssignOperator 0x7fffd8395c00 <line:1731:16, col:26> 'stbtt_uint8 *' '+=' ComputeLHSTy='stbtt_uint8 *' ComputeResultTy='stbtt_uint8 *'
|   | | |   |     |   |-DeclRefExpr 0x7fffd8395bb8 <col:16> 'stbtt_uint8 *' lvalue Var 0x7fffd83936f0 'points' 'stbtt_uint8 *'
|   | | |   |     |   `-IntegerLiteral 0x7fffd8395be0 <col:26> 'int' 2
|   | | |   |     `-<<<NULL>>>
|   | | |   `-BinaryOperator 0x7fffd8395ea0 <line:1734:10, col:44> 'short' '='
|   | | |     |-MemberExpr 0x7fffd8395df0 <col:10, col:26> 'short' lvalue .x 0x7fffd83517d8
|   | | |     | `-ArraySubscriptExpr 0x7fffd8395dc8 <col:10, col:24> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | | |     |   |-ImplicitCastExpr 0x7fffd8395db0 <col:10> 'stbtt_vertex *' <LValueToRValue>
|   | | |     |   | `-DeclRefExpr 0x7fffd8395ce0 <col:10> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   | | |     |   `-BinaryOperator 0x7fffd8395d88 <col:19, col:23> 'int' '+'
|   | | |     |     |-ImplicitCastExpr 0x7fffd8395d58 <col:19> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     |     | `-DeclRefExpr 0x7fffd8395d08 <col:19> 'stbtt_int32':'int' lvalue Var 0x7fffd8393180 'off' 'stbtt_int32':'int'
|   | | |     |     `-ImplicitCastExpr 0x7fffd8395d70 <col:23> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     |       `-DeclRefExpr 0x7fffd8395d30 <col:23> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | |     `-CStyleCastExpr 0x7fffd8395e78 <col:30, col:44> 'stbtt_int16':'short' <IntegralCast>
|   | | |       `-ImplicitCastExpr 0x7fffd8395e60 <col:44> 'stbtt_int32':'int' <LValueToRValue>
|   | | |         `-DeclRefExpr 0x7fffd8395e28 <col:44> 'stbtt_int32':'int' lvalue Var 0x7fffd83932e8 'x' 'stbtt_int32':'int'
|   | | |-BinaryOperator 0x7fffd8395f70 <line:1738:7, col:9> 'stbtt_int32':'int' '='
|   | | | |-DeclRefExpr 0x7fffd8395f28 <col:7> 'stbtt_int32':'int' lvalue Var 0x7fffd8393358 'y' 'stbtt_int32':'int'
|   | | | `-IntegerLiteral 0x7fffd8395f50 <col:9> 'int' 0
|   | | |-ForStmt 0x7fffd8396df8 <line:1739:7, line:1751:7>
|   | | | |-BinaryOperator 0x7fffd8395fe0 <line:1739:12, col:14> 'stbtt_int32':'int' '='
|   | | | | |-DeclRefExpr 0x7fffd8395f98 <col:12> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | | | `-IntegerLiteral 0x7fffd8395fc0 <col:14> 'int' 0
|   | | | |-<<<NULL>>>
|   | | | |-BinaryOperator 0x7fffd8396088 <col:17, col:21> 'int' '<'
|   | | | | |-ImplicitCastExpr 0x7fffd8396058 <col:17> 'stbtt_int32':'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x7fffd8396008 <col:17> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | | | `-ImplicitCastExpr 0x7fffd8396070 <col:21> 'stbtt_int32':'int' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x7fffd8396030 <col:21> 'stbtt_int32':'int' lvalue Var 0x7fffd8393010 'n' 'stbtt_int32':'int'
|   | | | |-UnaryOperator 0x7fffd83960d8 <col:24, col:26> 'stbtt_int32':'int' prefix '++'
|   | | | | `-DeclRefExpr 0x7fffd83960b0 <col:26> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | | `-CompoundStmt 0x7fffd8396dd0 <col:29, line:1751:7>
|   | | |   |-BinaryOperator 0x7fffd8396280 <line:1740:10, col:34> 'stbtt_uint8':'unsigned char' '='
|   | | |   | |-DeclRefExpr 0x7fffd83960f8 <col:10> 'stbtt_uint8':'unsigned char' lvalue Var 0x7fffd8392ce8 'flags' 'stbtt_uint8':'unsigned char'
|   | | |   | `-ImplicitCastExpr 0x7fffd8396268 <col:18, col:34> 'unsigned char' <LValueToRValue>
|   | | |   |   `-MemberExpr 0x7fffd8396230 <col:18, col:34> 'unsigned char' lvalue .type 0x7fffd8351a18
|   | | |   |     `-ArraySubscriptExpr 0x7fffd8396208 <col:18, col:32> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | | |   |       |-ImplicitCastExpr 0x7fffd83961f0 <col:18> 'stbtt_vertex *' <LValueToRValue>
|   | | |   |       | `-DeclRefExpr 0x7fffd8396120 <col:18> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   | | |   |       `-BinaryOperator 0x7fffd83961c8 <col:27, col:31> 'int' '+'
|   | | |   |         |-ImplicitCastExpr 0x7fffd8396198 <col:27> 'stbtt_int32':'int' <LValueToRValue>
|   | | |   |         | `-DeclRefExpr 0x7fffd8396148 <col:27> 'stbtt_int32':'int' lvalue Var 0x7fffd8393180 'off' 'stbtt_int32':'int'
|   | | |   |         `-ImplicitCastExpr 0x7fffd83961b0 <col:31> 'stbtt_int32':'int' <LValueToRValue>
|   | | |   |           `-DeclRefExpr 0x7fffd8396170 <col:31> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | |   |-IfStmt 0x7fffd8396bb0 <line:1741:10, line:1749:10>
|   | | |   | |-<<<NULL>>>
|   | | |   | |-<<<NULL>>>
|   | | |   | |-BinaryOperator 0x7fffd8396320 <line:1741:14, col:22> 'int' '&'
|   | | |   | | |-ImplicitCastExpr 0x7fffd8396308 <col:14> 'int' <IntegralCast>
|   | | |   | | | `-ImplicitCastExpr 0x7fffd83962f0 <col:14> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | | |   | | |   `-DeclRefExpr 0x7fffd83962a8 <col:14> 'stbtt_uint8':'unsigned char' lvalue Var 0x7fffd8392ce8 'flags' 'stbtt_uint8':'unsigned char'
|   | | |   | | `-IntegerLiteral 0x7fffd83962d0 <col:22> 'int' 4
|   | | |   | |-CompoundStmt 0x7fffd8396688 <col:25, line:1744:10>
|   | | |   | | |-DeclStmt 0x7fffd8396450 <line:1742:13, col:39>
|   | | |   | | | `-VarDecl 0x7fffd8396358 <col:13, col:37> col:25 used dy 'stbtt_int16':'short' cinit
|   | | |   | | |   `-ImplicitCastExpr 0x7fffd8396438 <col:30, col:37> 'stbtt_int16':'short' <IntegralCast>
|   | | |   | | |     `-ImplicitCastExpr 0x7fffd8396420 <col:30, col:37> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | | |   | | |       `-UnaryOperator 0x7fffd8396400 <col:30, col:37> 'stbtt_uint8':'unsigned char' lvalue prefix '*'
|   | | |   | | |         `-UnaryOperator 0x7fffd83963e0 <col:31, col:37> 'stbtt_uint8 *' postfix '++'
|   | | |   | | |           `-DeclRefExpr 0x7fffd83963b8 <col:31> 'stbtt_uint8 *' lvalue Var 0x7fffd83936f0 'points' 'stbtt_uint8 *'
|   | | |   | | `-CompoundAssignOperator 0x7fffd8396650 <line:1743:13, col:39> 'stbtt_int32':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | | |   | |   |-DeclRefExpr 0x7fffd8396468 <col:13> 'stbtt_int32':'int' lvalue Var 0x7fffd8393358 'y' 'stbtt_int32':'int'
|   | | |   | |   `-ConditionalOperator 0x7fffd8396620 <col:18, col:39> 'int'
|   | | |   | |     |-ParenExpr 0x7fffd8396530 <col:18, col:29> 'int'
|   | | |   | |     | `-BinaryOperator 0x7fffd8396508 <col:19, col:27> 'int' '&'
|   | | |   | |     |   |-ImplicitCastExpr 0x7fffd83964f0 <col:19> 'int' <IntegralCast>
|   | | |   | |     |   | `-ImplicitCastExpr 0x7fffd83964d8 <col:19> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | | |   | |     |   |   `-DeclRefExpr 0x7fffd8396490 <col:19> 'stbtt_uint8':'unsigned char' lvalue Var 0x7fffd8392ce8 'flags' 'stbtt_uint8':'unsigned char'
|   | | |   | |     |   `-IntegerLiteral 0x7fffd83964b8 <col:27> 'int' 32
|   | | |   | |     |-ImplicitCastExpr 0x7fffd8396608 <col:33> 'int' <IntegralCast>
|   | | |   | |     | `-ImplicitCastExpr 0x7fffd83965f0 <col:33> 'stbtt_int16':'short' <LValueToRValue>
|   | | |   | |     |   `-DeclRefExpr 0x7fffd8396550 <col:33> 'stbtt_int16':'short' lvalue Var 0x7fffd8396358 'dy' 'stbtt_int16':'short'
|   | | |   | |     `-UnaryOperator 0x7fffd83965d0 <col:38, col:39> 'int' prefix '-'
|   | | |   | |       `-ImplicitCastExpr 0x7fffd83965b8 <col:39> 'int' <IntegralCast>
|   | | |   | |         `-ImplicitCastExpr 0x7fffd83965a0 <col:39> 'stbtt_int16':'short' <LValueToRValue>
|   | | |   | |           `-DeclRefExpr 0x7fffd8396578 <col:39> 'stbtt_int16':'short' lvalue Var 0x7fffd8396358 'dy' 'stbtt_int16':'short'
|   | | |   | `-CompoundStmt 0x7fffd8396b98 <line:1744:17, line:1749:10>
|   | | |   |   `-IfStmt 0x7fffd8396b60 <line:1745:13, line:1748:13>
|   | | |   |     |-<<<NULL>>>
|   | | |   |     |-<<<NULL>>>
|   | | |   |     |-UnaryOperator 0x7fffd8396768 <line:1745:17, col:29> 'int' prefix '!'
|   | | |   |     | `-ParenExpr 0x7fffd8396748 <col:18, col:29> 'int'
|   | | |   |     |   `-BinaryOperator 0x7fffd8396720 <col:19, col:27> 'int' '&'
|   | | |   |     |     |-ImplicitCastExpr 0x7fffd8396708 <col:19> 'int' <IntegralCast>
|   | | |   |     |     | `-ImplicitCastExpr 0x7fffd83966f0 <col:19> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | | |   |     |     |   `-DeclRefExpr 0x7fffd83966a8 <col:19> 'stbtt_uint8':'unsigned char' lvalue Var 0x7fffd8392ce8 'flags' 'stbtt_uint8':'unsigned char'
|   | | |   |     |     `-IntegerLiteral 0x7fffd83966d0 <col:27> 'int' 32
|   | | |   |     |-CompoundStmt 0x7fffd8396b40 <col:32, line:1748:13>
|   | | |   |     | |-BinaryOperator 0x7fffd8396a98 <line:1746:16, col:64> 'stbtt_int32':'int' '='
|   | | |   |     | | |-DeclRefExpr 0x7fffd8396788 <col:16> 'stbtt_int32':'int' lvalue Var 0x7fffd8393358 'y' 'stbtt_int32':'int'
|   | | |   |     | | `-BinaryOperator 0x7fffd8396a70 <col:20, col:64> 'int' '+'
|   | | |   |     | |   |-ImplicitCastExpr 0x7fffd8396a40 <col:20> 'stbtt_int32':'int' <LValueToRValue>
|   | | |   |     | |   | `-DeclRefExpr 0x7fffd83967b0 <col:20> 'stbtt_int32':'int' lvalue Var 0x7fffd8393358 'y' 'stbtt_int32':'int'
|   | | |   |     | |   `-ImplicitCastExpr 0x7fffd8396a58 <col:24, col:64> 'int' <IntegralCast>
|   | | |   |     | |     `-CStyleCastExpr 0x7fffd8396a18 <col:24, col:64> 'stbtt_int16':'short' <IntegralCast>
|   | | |   |     | |       `-ParenExpr 0x7fffd83969f8 <col:38, col:64> 'int'
|   | | |   |     | |         `-BinaryOperator 0x7fffd8396990 <col:39, col:63> 'int' '+'
|   | | |   |     | |           |-BinaryOperator 0x7fffd83968b0 <col:39, col:49> 'int' '*'
|   | | |   |     | |           | |-ImplicitCastExpr 0x7fffd8396898 <col:39, col:47> 'int' <IntegralCast>
|   | | |   |     | |           | | `-ImplicitCastExpr 0x7fffd8396880 <col:39, col:47> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | | |   |     | |           | |   `-ArraySubscriptExpr 0x7fffd8396838 <col:39, col:47> 'stbtt_uint8':'unsigned char' lvalue
|   | | |   |     | |           | |     |-ImplicitCastExpr 0x7fffd8396820 <col:39> 'stbtt_uint8 *' <LValueToRValue>
|   | | |   |     | |           | |     | `-DeclRefExpr 0x7fffd83967d8 <col:39> 'stbtt_uint8 *' lvalue Var 0x7fffd83936f0 'points' 'stbtt_uint8 *'
|   | | |   |     | |           | |     `-IntegerLiteral 0x7fffd8396800 <col:46> 'int' 0
|   | | |   |     | |           | `-IntegerLiteral 0x7fffd8396860 <col:49> 'int' 256
|   | | |   |     | |           `-ImplicitCastExpr 0x7fffd8396978 <col:55, col:63> 'int' <IntegralCast>
|   | | |   |     | |             `-ImplicitCastExpr 0x7fffd8396960 <col:55, col:63> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | | |   |     | |               `-ArraySubscriptExpr 0x7fffd8396938 <col:55, col:63> 'stbtt_uint8':'unsigned char' lvalue
|   | | |   |     | |                 |-ImplicitCastExpr 0x7fffd8396920 <col:55> 'stbtt_uint8 *' <LValueToRValue>
|   | | |   |     | |                 | `-DeclRefExpr 0x7fffd83968d8 <col:55> 'stbtt_uint8 *' lvalue Var 0x7fffd83936f0 'points' 'stbtt_uint8 *'
|   | | |   |     | |                 `-IntegerLiteral 0x7fffd8396900 <col:62> 'int' 1
|   | | |   |     | `-CompoundAssignOperator 0x7fffd8396b08 <line:1747:16, col:26> 'stbtt_uint8 *' '+=' ComputeLHSTy='stbtt_uint8 *' ComputeResultTy='stbtt_uint8 *'
|   | | |   |     |   |-DeclRefExpr 0x7fffd8396ac0 <col:16> 'stbtt_uint8 *' lvalue Var 0x7fffd83936f0 'points' 'stbtt_uint8 *'
|   | | |   |     |   `-IntegerLiteral 0x7fffd8396ae8 <col:26> 'int' 2
|   | | |   |     `-<<<NULL>>>
|   | | |   `-BinaryOperator 0x7fffd8396da8 <line:1750:10, col:44> 'short' '='
|   | | |     |-MemberExpr 0x7fffd8396cf8 <col:10, col:26> 'short' lvalue .y 0x7fffd8351838
|   | | |     | `-ArraySubscriptExpr 0x7fffd8396cd0 <col:10, col:24> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | | |     |   |-ImplicitCastExpr 0x7fffd8396cb8 <col:10> 'stbtt_vertex *' <LValueToRValue>
|   | | |     |   | `-DeclRefExpr 0x7fffd8396be8 <col:10> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   | | |     |   `-BinaryOperator 0x7fffd8396c90 <col:19, col:23> 'int' '+'
|   | | |     |     |-ImplicitCastExpr 0x7fffd8396c60 <col:19> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     |     | `-DeclRefExpr 0x7fffd8396c10 <col:19> 'stbtt_int32':'int' lvalue Var 0x7fffd8393180 'off' 'stbtt_int32':'int'
|   | | |     |     `-ImplicitCastExpr 0x7fffd8396c78 <col:23> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     |       `-DeclRefExpr 0x7fffd8396c38 <col:23> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | |     `-CStyleCastExpr 0x7fffd8396d80 <col:30, col:44> 'stbtt_int16':'short' <IntegralCast>
|   | | |       `-ImplicitCastExpr 0x7fffd8396d68 <col:44> 'stbtt_int32':'int' <LValueToRValue>
|   | | |         `-DeclRefExpr 0x7fffd8396d30 <col:44> 'stbtt_int32':'int' lvalue Var 0x7fffd8393358 'y' 'stbtt_int32':'int'
|   | | |-BinaryOperator 0x7fffd8396e78 <line:1754:7, col:20> 'int' '='
|   | | | |-DeclRefExpr 0x7fffd8396e30 <col:7> 'int' lvalue Var 0x7fffd8392698 'num_vertices' 'int'
|   | | | `-IntegerLiteral 0x7fffd8396e58 <col:20> 'int' 0
|   | | |-BinaryOperator 0x7fffd8397078 <line:1755:7, col:39> 'stbtt_int32':'int' '='
|   | | | |-DeclRefExpr 0x7fffd8396ea0 <col:7> 'stbtt_int32':'int' lvalue Var 0x7fffd83934a8 'sx' 'stbtt_int32':'int'
|   | | | `-BinaryOperator 0x7fffd8397050 <col:12, col:39> 'stbtt_int32':'int' '='
|   | | |   |-DeclRefExpr 0x7fffd8396ec8 <col:12> 'stbtt_int32':'int' lvalue Var 0x7fffd8393518 'sy' 'stbtt_int32':'int'
|   | | |   `-BinaryOperator 0x7fffd8397028 <col:17, col:39> 'stbtt_int32':'int' '='
|   | | |     |-DeclRefExpr 0x7fffd8396ef0 <col:17> 'stbtt_int32':'int' lvalue Var 0x7fffd83933c8 'cx' 'stbtt_int32':'int'
|   | | |     `-BinaryOperator 0x7fffd8397000 <col:22, col:39> 'stbtt_int32':'int' '='
|   | | |       |-DeclRefExpr 0x7fffd8396f18 <col:22> 'stbtt_int32':'int' lvalue Var 0x7fffd8393438 'cy' 'stbtt_int32':'int'
|   | | |       `-BinaryOperator 0x7fffd8396fd8 <col:27, col:39> 'stbtt_int32':'int' '='
|   | | |         |-DeclRefExpr 0x7fffd8396f40 <col:27> 'stbtt_int32':'int' lvalue Var 0x7fffd8393588 'scx' 'stbtt_int32':'int'
|   | | |         `-BinaryOperator 0x7fffd8396fb0 <col:33, col:39> 'stbtt_int32':'int' '='
|   | | |           |-DeclRefExpr 0x7fffd8396f68 <col:33> 'stbtt_int32':'int' lvalue Var 0x7fffd83935f8 'scy' 'stbtt_int32':'int'
|   | | |           `-IntegerLiteral 0x7fffd8396f90 <col:39> 'int' 0
|   | | |-ForStmt 0x7fffd839a290 <line:1756:7, line:1805:7>
|   | | | |-BinaryOperator 0x7fffd83970e8 <line:1756:12, col:14> 'stbtt_int32':'int' '='
|   | | | | |-DeclRefExpr 0x7fffd83970a0 <col:12> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | | | `-IntegerLiteral 0x7fffd83970c8 <col:14> 'int' 0
|   | | | |-<<<NULL>>>
|   | | | |-BinaryOperator 0x7fffd8397190 <col:17, col:21> 'int' '<'
|   | | | | |-ImplicitCastExpr 0x7fffd8397160 <col:17> 'stbtt_int32':'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x7fffd8397110 <col:17> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | | | `-ImplicitCastExpr 0x7fffd8397178 <col:21> 'stbtt_int32':'int' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x7fffd8397138 <col:21> 'stbtt_int32':'int' lvalue Var 0x7fffd8393010 'n' 'stbtt_int32':'int'
|   | | | |-UnaryOperator 0x7fffd83971e0 <col:24, col:26> 'stbtt_int32':'int' prefix '++'
|   | | | | `-DeclRefExpr 0x7fffd83971b8 <col:26> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | | `-CompoundStmt 0x7fffd839a260 <col:29, line:1805:7>
|   | | |   |-BinaryOperator 0x7fffd8397388 <line:1757:10, col:34> 'stbtt_uint8':'unsigned char' '='
|   | | |   | |-DeclRefExpr 0x7fffd8397200 <col:10> 'stbtt_uint8':'unsigned char' lvalue Var 0x7fffd8392ce8 'flags' 'stbtt_uint8':'unsigned char'
|   | | |   | `-ImplicitCastExpr 0x7fffd8397370 <col:18, col:34> 'unsigned char' <LValueToRValue>
|   | | |   |   `-MemberExpr 0x7fffd8397338 <col:18, col:34> 'unsigned char' lvalue .type 0x7fffd8351a18
|   | | |   |     `-ArraySubscriptExpr 0x7fffd8397310 <col:18, col:32> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | | |   |       |-ImplicitCastExpr 0x7fffd83972f8 <col:18> 'stbtt_vertex *' <LValueToRValue>
|   | | |   |       | `-DeclRefExpr 0x7fffd8397228 <col:18> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   | | |   |       `-BinaryOperator 0x7fffd83972d0 <col:27, col:31> 'int' '+'
|   | | |   |         |-ImplicitCastExpr 0x7fffd83972a0 <col:27> 'stbtt_int32':'int' <LValueToRValue>
|   | | |   |         | `-DeclRefExpr 0x7fffd8397250 <col:27> 'stbtt_int32':'int' lvalue Var 0x7fffd8393180 'off' 'stbtt_int32':'int'
|   | | |   |         `-ImplicitCastExpr 0x7fffd83972b8 <col:31> 'stbtt_int32':'int' <LValueToRValue>
|   | | |   |           `-DeclRefExpr 0x7fffd8397278 <col:31> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | |   |-BinaryOperator 0x7fffd8397588 <line:1758:10, col:48> 'stbtt_int32':'int' '='
|   | | |   | |-DeclRefExpr 0x7fffd83973b0 <col:10> 'stbtt_int32':'int' lvalue Var 0x7fffd83932e8 'x' 'stbtt_int32':'int'
|   | | |   | `-ImplicitCastExpr 0x7fffd8397570 <col:18, col:48> 'stbtt_int32':'int' <IntegralCast>
|   | | |   |   `-CStyleCastExpr 0x7fffd8397548 <col:18, col:48> 'stbtt_int16':'short' <NoOp>
|   | | |   |     `-ImplicitCastExpr 0x7fffd8397530 <col:32, col:48> 'short' <LValueToRValue>
|   | | |   |       `-MemberExpr 0x7fffd83974e8 <col:32, col:48> 'short' lvalue .x 0x7fffd83517d8
|   | | |   |         `-ArraySubscriptExpr 0x7fffd83974c0 <col:32, col:46> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | | |   |           |-ImplicitCastExpr 0x7fffd83974a8 <col:32> 'stbtt_vertex *' <LValueToRValue>
|   | | |   |           | `-DeclRefExpr 0x7fffd83973d8 <col:32> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   | | |   |           `-BinaryOperator 0x7fffd8397480 <col:41, col:45> 'int' '+'
|   | | |   |             |-ImplicitCastExpr 0x7fffd8397450 <col:41> 'stbtt_int32':'int' <LValueToRValue>
|   | | |   |             | `-DeclRefExpr 0x7fffd8397400 <col:41> 'stbtt_int32':'int' lvalue Var 0x7fffd8393180 'off' 'stbtt_int32':'int'
|   | | |   |             `-ImplicitCastExpr 0x7fffd8397468 <col:45> 'stbtt_int32':'int' <LValueToRValue>
|   | | |   |               `-DeclRefExpr 0x7fffd8397428 <col:45> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | |   |-BinaryOperator 0x7fffd83977b0 <line:1759:10, col:48> 'stbtt_int32':'int' '='
|   | | |   | |-DeclRefExpr 0x7fffd83975b0 <col:10> 'stbtt_int32':'int' lvalue Var 0x7fffd8393358 'y' 'stbtt_int32':'int'
|   | | |   | `-ImplicitCastExpr 0x7fffd8397798 <col:18, col:48> 'stbtt_int32':'int' <IntegralCast>
|   | | |   |   `-CStyleCastExpr 0x7fffd8397770 <col:18, col:48> 'stbtt_int16':'short' <NoOp>
|   | | |   |     `-ImplicitCastExpr 0x7fffd8397758 <col:32, col:48> 'short' <LValueToRValue>
|   | | |   |       `-MemberExpr 0x7fffd8397710 <col:32, col:48> 'short' lvalue .y 0x7fffd8351838
|   | | |   |         `-ArraySubscriptExpr 0x7fffd83976c0 <col:32, col:46> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | | |   |           |-ImplicitCastExpr 0x7fffd83976a8 <col:32> 'stbtt_vertex *' <LValueToRValue>
|   | | |   |           | `-DeclRefExpr 0x7fffd83975d8 <col:32> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   | | |   |           `-BinaryOperator 0x7fffd8397680 <col:41, col:45> 'int' '+'
|   | | |   |             |-ImplicitCastExpr 0x7fffd8397650 <col:41> 'stbtt_int32':'int' <LValueToRValue>
|   | | |   |             | `-DeclRefExpr 0x7fffd8397600 <col:41> 'stbtt_int32':'int' lvalue Var 0x7fffd8393180 'off' 'stbtt_int32':'int'
|   | | |   |             `-ImplicitCastExpr 0x7fffd8397668 <col:45> 'stbtt_int32':'int' <LValueToRValue>
|   | | |   |               `-DeclRefExpr 0x7fffd8397628 <col:45> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | |   `-IfStmt 0x7fffd839a228 <line:1761:10, line:1804:10>
|   | | |     |-<<<NULL>>>
|   | | |     |-<<<NULL>>>
|   | | |     |-BinaryOperator 0x7fffd8397858 <line:1761:14, col:27> 'int' '=='
|   | | |     | |-ImplicitCastExpr 0x7fffd8397828 <col:14> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | `-DeclRefExpr 0x7fffd83977d8 <col:14> 'stbtt_int32':'int' lvalue Var 0x7fffd8393080 'next_move' 'stbtt_int32':'int'
|   | | |     | `-ImplicitCastExpr 0x7fffd8397840 <col:27> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     |   `-DeclRefExpr 0x7fffd8397800 <col:27> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | |     |-CompoundStmt 0x7fffd83993f8 <col:30, line:1790:10>
|   | | |     | |-IfStmt 0x7fffd8397cf0 <line:1762:13, line:1763:113>
|   | | |     | | |-<<<NULL>>>
|   | | |     | | |-<<<NULL>>>
|   | | |     | | |-BinaryOperator 0x7fffd83978e0 <line:1762:17, col:22> 'int' '!='
|   | | |     | | | |-ImplicitCastExpr 0x7fffd83978c8 <col:17> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | | | `-DeclRefExpr 0x7fffd8397880 <col:17> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | |     | | | `-IntegerLiteral 0x7fffd83978a8 <col:22> 'int' 0
|   | | |     | | |-BinaryOperator 0x7fffd8397cc8 <line:1763:16, col:113> 'int' '='
|   | | |     | | | |-DeclRefExpr 0x7fffd8397908 <col:16> 'int' lvalue Var 0x7fffd8392698 'num_vertices' 'int'
|   | | |     | | | `-CallExpr 0x7fffd8397b60 <col:31, col:113> 'int'
|   | | |     | | |   |-ImplicitCastExpr 0x7fffd8397b48 <col:31> 'int (*)(stbtt_vertex *, int, int, int, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' <FunctionToPointerDecay>
|   | | |     | | |   | `-DeclRefExpr 0x7fffd8397930 <col:31> 'int (stbtt_vertex *, int, int, int, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' Function 0x7fffd83911c8 'stbtt__close_shape' 'int (stbtt_vertex *, int, int, int, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)'
|   | | |     | | |   |-ImplicitCastExpr 0x7fffd8397bd8 <col:50> 'stbtt_vertex *' <LValueToRValue>
|   | | |     | | |   | `-DeclRefExpr 0x7fffd8397958 <col:50> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   | | |     | | |   |-ImplicitCastExpr 0x7fffd8397bf0 <col:60> 'int' <LValueToRValue>
|   | | |     | | |   | `-DeclRefExpr 0x7fffd8397980 <col:60> 'int' lvalue Var 0x7fffd8392698 'num_vertices' 'int'
|   | | |     | | |   |-ImplicitCastExpr 0x7fffd8397c08 <col:74> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | |   | `-DeclRefExpr 0x7fffd83979a8 <col:74> 'stbtt_int32':'int' lvalue Var 0x7fffd83930f0 'was_off' 'stbtt_int32':'int'
|   | | |     | | |   |-ImplicitCastExpr 0x7fffd8397c20 <col:83> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | |   | `-DeclRefExpr 0x7fffd83979d0 <col:83> 'stbtt_int32':'int' lvalue Var 0x7fffd83931f0 'start_off' 'stbtt_int32':'int'
|   | | |     | | |   |-ImplicitCastExpr 0x7fffd8397c38 <col:94> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | |   | `-DeclRefExpr 0x7fffd83979f8 <col:94> 'stbtt_int32':'int' lvalue Var 0x7fffd83934a8 'sx' 'stbtt_int32':'int'
|   | | |     | | |   |-ImplicitCastExpr 0x7fffd8397c50 <col:97> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | |   | `-DeclRefExpr 0x7fffd8397a20 <col:97> 'stbtt_int32':'int' lvalue Var 0x7fffd8393518 'sy' 'stbtt_int32':'int'
|   | | |     | | |   |-ImplicitCastExpr 0x7fffd8397c68 <col:100> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | |   | `-DeclRefExpr 0x7fffd8397a48 <col:100> 'stbtt_int32':'int' lvalue Var 0x7fffd8393588 'scx' 'stbtt_int32':'int'
|   | | |     | | |   |-ImplicitCastExpr 0x7fffd8397c80 <col:104> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | |   | `-DeclRefExpr 0x7fffd8397a70 <col:104> 'stbtt_int32':'int' lvalue Var 0x7fffd83935f8 'scy' 'stbtt_int32':'int'
|   | | |     | | |   |-ImplicitCastExpr 0x7fffd8397c98 <col:108> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | |   | `-DeclRefExpr 0x7fffd8397a98 <col:108> 'stbtt_int32':'int' lvalue Var 0x7fffd83933c8 'cx' 'stbtt_int32':'int'
|   | | |     | | |   `-ImplicitCastExpr 0x7fffd8397cb0 <col:111> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | |     `-DeclRefExpr 0x7fffd8397ac0 <col:111> 'stbtt_int32':'int' lvalue Var 0x7fffd8393438 'cy' 'stbtt_int32':'int'
|   | | |     | | `-<<<NULL>>>
|   | | |     | |-BinaryOperator 0x7fffd8397e30 <line:1766:13, col:36> 'stbtt_int32':'int' '='
|   | | |     | | |-DeclRefExpr 0x7fffd8397d28 <col:13> 'stbtt_int32':'int' lvalue Var 0x7fffd83931f0 'start_off' 'stbtt_int32':'int'
|   | | |     | | `-UnaryOperator 0x7fffd8397e10 <col:25, col:36> 'int' prefix '!'
|   | | |     | |   `-ParenExpr 0x7fffd8397df0 <col:26, col:36> 'int'
|   | | |     | |     `-BinaryOperator 0x7fffd8397dc8 <col:27, col:35> 'int' '&'
|   | | |     | |       |-ImplicitCastExpr 0x7fffd8397db0 <col:27> 'int' <IntegralCast>
|   | | |     | |       | `-ImplicitCastExpr 0x7fffd8397d98 <col:27> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | | |     | |       |   `-DeclRefExpr 0x7fffd8397d50 <col:27> 'stbtt_uint8':'unsigned char' lvalue Var 0x7fffd8392ce8 'flags' 'stbtt_uint8':'unsigned char'
|   | | |     | |       `-IntegerLiteral 0x7fffd8397d78 <col:35> 'int' 1
|   | | |     | |-IfStmt 0x7fffd8398e90 <line:1767:13, line:1785:13>
|   | | |     | | |-<<<NULL>>>
|   | | |     | | |-<<<NULL>>>
|   | | |     | | |-ImplicitCastExpr 0x7fffd8397e80 <line:1767:17> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | | `-DeclRefExpr 0x7fffd8397e58 <col:17> 'stbtt_int32':'int' lvalue Var 0x7fffd83931f0 'start_off' 'stbtt_int32':'int'
|   | | |     | | |-CompoundStmt 0x7fffd8398d28 <col:28, line:1782:13>
|   | | |     | | | |-BinaryOperator 0x7fffd8397f00 <line:1770:16, col:22> 'stbtt_int32':'int' '='
|   | | |     | | | | |-DeclRefExpr 0x7fffd8397e98 <col:16> 'stbtt_int32':'int' lvalue Var 0x7fffd8393588 'scx' 'stbtt_int32':'int'
|   | | |     | | | | `-ImplicitCastExpr 0x7fffd8397ee8 <col:22> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | | |   `-DeclRefExpr 0x7fffd8397ec0 <col:22> 'stbtt_int32':'int' lvalue Var 0x7fffd83932e8 'x' 'stbtt_int32':'int'
|   | | |     | | | |-BinaryOperator 0x7fffd8397f90 <line:1771:16, col:22> 'stbtt_int32':'int' '='
|   | | |     | | | | |-DeclRefExpr 0x7fffd8397f28 <col:16> 'stbtt_int32':'int' lvalue Var 0x7fffd83935f8 'scy' 'stbtt_int32':'int'
|   | | |     | | | | `-ImplicitCastExpr 0x7fffd8397f78 <col:22> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | | |   `-DeclRefExpr 0x7fffd8397f50 <col:22> 'stbtt_int32':'int' lvalue Var 0x7fffd8393358 'y' 'stbtt_int32':'int'
|   | | |     | | | `-IfStmt 0x7fffd8398cf0 <line:1772:16, line:1781:16>
|   | | |     | | |   |-<<<NULL>>>
|   | | |     | | |   |-<<<NULL>>>
|   | | |     | | |   |-UnaryOperator 0x7fffd83981e0 <line:1772:20, col:48> 'int' prefix '!'
|   | | |     | | |   | `-ParenExpr 0x7fffd83981c0 <col:21, col:48> 'int'
|   | | |     | | |   |   `-BinaryOperator 0x7fffd8398198 <col:22, col:47> 'int' '&'
|   | | |     | | |   |     |-ImplicitCastExpr 0x7fffd8398180 <col:22, col:40> 'int' <IntegralCast>
|   | | |     | | |   |     | `-ImplicitCastExpr 0x7fffd8398168 <col:22, col:40> 'unsigned char' <LValueToRValue>
|   | | |     | | |   |     |   `-MemberExpr 0x7fffd8398110 <col:22, col:40> 'unsigned char' lvalue .type 0x7fffd8351a18
|   | | |     | | |   |     |     `-ArraySubscriptExpr 0x7fffd83980e8 <col:22, col:38> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | | |     | | |   |     |       |-ImplicitCastExpr 0x7fffd83980d0 <col:22> 'stbtt_vertex *' <LValueToRValue>
|   | | |     | | |   |     |       | `-DeclRefExpr 0x7fffd8397fb8 <col:22> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   | | |     | | |   |     |       `-BinaryOperator 0x7fffd83980a8 <col:31, col:37> 'int' '+'
|   | | |     | | |   |     |         |-BinaryOperator 0x7fffd8398060 <col:31, col:35> 'int' '+'
|   | | |     | | |   |     |         | |-ImplicitCastExpr 0x7fffd8398030 <col:31> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | |   |     |         | | `-DeclRefExpr 0x7fffd8397fe0 <col:31> 'stbtt_int32':'int' lvalue Var 0x7fffd8393180 'off' 'stbtt_int32':'int'
|   | | |     | | |   |     |         | `-ImplicitCastExpr 0x7fffd8398048 <col:35> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | |   |     |         |   `-DeclRefExpr 0x7fffd8398008 <col:35> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | |     | | |   |     |         `-IntegerLiteral 0x7fffd8398088 <col:37> 'int' 1
|   | | |     | | |   |     `-IntegerLiteral 0x7fffd8398148 <col:47> 'int' 1
|   | | |     | | |   |-CompoundStmt 0x7fffd8398800 <col:51, line:1776:16>
|   | | |     | | |   | |-BinaryOperator 0x7fffd83984d8 <line:1774:19, col:67> 'stbtt_int32':'int' '='
|   | | |     | | |   | | |-DeclRefExpr 0x7fffd8398200 <col:19> 'stbtt_int32':'int' lvalue Var 0x7fffd83934a8 'sx' 'stbtt_int32':'int'
|   | | |     | | |   | | `-BinaryOperator 0x7fffd83984b0 <col:24, col:67> 'int' '>>'
|   | | |     | | |   | |   |-ParenExpr 0x7fffd8398470 <col:24, col:62> 'int'
|   | | |     | | |   | |   | `-BinaryOperator 0x7fffd8398448 <col:25, col:61> 'int' '+'
|   | | |     | | |   | |   |   |-ImplicitCastExpr 0x7fffd8398430 <col:25> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | |   | |   |   | `-DeclRefExpr 0x7fffd8398228 <col:25> 'stbtt_int32':'int' lvalue Var 0x7fffd83932e8 'x' 'stbtt_int32':'int'
|   | | |     | | |   | |   |   `-CStyleCastExpr 0x7fffd8398408 <col:29, col:61> 'stbtt_int32':'int' <IntegralCast>
|   | | |     | | |   | |   |     `-ImplicitCastExpr 0x7fffd83983f0 <col:43, col:61> 'short' <LValueToRValue>
|   | | |     | | |   | |   |       `-MemberExpr 0x7fffd83983a8 <col:43, col:61> 'short' lvalue .x 0x7fffd83517d8
|   | | |     | | |   | |   |         `-ArraySubscriptExpr 0x7fffd8398380 <col:43, col:59> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | | |     | | |   | |   |           |-ImplicitCastExpr 0x7fffd8398368 <col:43> 'stbtt_vertex *' <LValueToRValue>
|   | | |     | | |   | |   |           | `-DeclRefExpr 0x7fffd8398250 <col:43> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   | | |     | | |   | |   |           `-BinaryOperator 0x7fffd8398340 <col:52, col:58> 'int' '+'
|   | | |     | | |   | |   |             |-BinaryOperator 0x7fffd83982f8 <col:52, col:56> 'int' '+'
|   | | |     | | |   | |   |             | |-ImplicitCastExpr 0x7fffd83982c8 <col:52> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | |   | |   |             | | `-DeclRefExpr 0x7fffd8398278 <col:52> 'stbtt_int32':'int' lvalue Var 0x7fffd8393180 'off' 'stbtt_int32':'int'
|   | | |     | | |   | |   |             | `-ImplicitCastExpr 0x7fffd83982e0 <col:56> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | |   | |   |             |   `-DeclRefExpr 0x7fffd83982a0 <col:56> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | |     | | |   | |   |             `-IntegerLiteral 0x7fffd8398320 <col:58> 'int' 1
|   | | |     | | |   | |   `-IntegerLiteral 0x7fffd8398490 <col:67> 'int' 1
|   | | |     | | |   | `-BinaryOperator 0x7fffd83987d8 <line:1775:19, col:67> 'stbtt_int32':'int' '='
|   | | |     | | |   |   |-DeclRefExpr 0x7fffd8398500 <col:19> 'stbtt_int32':'int' lvalue Var 0x7fffd8393518 'sy' 'stbtt_int32':'int'
|   | | |     | | |   |   `-BinaryOperator 0x7fffd83987b0 <col:24, col:67> 'int' '>>'
|   | | |     | | |   |     |-ParenExpr 0x7fffd8398770 <col:24, col:62> 'int'
|   | | |     | | |   |     | `-BinaryOperator 0x7fffd8398748 <col:25, col:61> 'int' '+'
|   | | |     | | |   |     |   |-ImplicitCastExpr 0x7fffd8398730 <col:25> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | |   |     |   | `-DeclRefExpr 0x7fffd8398528 <col:25> 'stbtt_int32':'int' lvalue Var 0x7fffd8393358 'y' 'stbtt_int32':'int'
|   | | |     | | |   |     |   `-CStyleCastExpr 0x7fffd8398708 <col:29, col:61> 'stbtt_int32':'int' <IntegralCast>
|   | | |     | | |   |     |     `-ImplicitCastExpr 0x7fffd83986f0 <col:43, col:61> 'short' <LValueToRValue>
|   | | |     | | |   |     |       `-MemberExpr 0x7fffd83986a8 <col:43, col:61> 'short' lvalue .y 0x7fffd8351838
|   | | |     | | |   |     |         `-ArraySubscriptExpr 0x7fffd8398680 <col:43, col:59> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | | |     | | |   |     |           |-ImplicitCastExpr 0x7fffd8398668 <col:43> 'stbtt_vertex *' <LValueToRValue>
|   | | |     | | |   |     |           | `-DeclRefExpr 0x7fffd8398550 <col:43> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   | | |     | | |   |     |           `-BinaryOperator 0x7fffd8398640 <col:52, col:58> 'int' '+'
|   | | |     | | |   |     |             |-BinaryOperator 0x7fffd83985f8 <col:52, col:56> 'int' '+'
|   | | |     | | |   |     |             | |-ImplicitCastExpr 0x7fffd83985c8 <col:52> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | |   |     |             | | `-DeclRefExpr 0x7fffd8398578 <col:52> 'stbtt_int32':'int' lvalue Var 0x7fffd8393180 'off' 'stbtt_int32':'int'
|   | | |     | | |   |     |             | `-ImplicitCastExpr 0x7fffd83985e0 <col:56> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | |   |     |             |   `-DeclRefExpr 0x7fffd83985a0 <col:56> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | |     | | |   |     |             `-IntegerLiteral 0x7fffd8398620 <col:58> 'int' 1
|   | | |     | | |   |     `-IntegerLiteral 0x7fffd8398790 <col:67> 'int' 1
|   | | |     | | |   `-CompoundStmt 0x7fffd8398cc8 <line:1776:23, line:1781:16>
|   | | |     | | |     |-BinaryOperator 0x7fffd8398a28 <line:1778:19, col:56> 'stbtt_int32':'int' '='
|   | | |     | | |     | |-DeclRefExpr 0x7fffd8398820 <col:19> 'stbtt_int32':'int' lvalue Var 0x7fffd83934a8 'sx' 'stbtt_int32':'int'
|   | | |     | | |     | `-CStyleCastExpr 0x7fffd8398a00 <col:24, col:56> 'stbtt_int32':'int' <IntegralCast>
|   | | |     | | |     |   `-ImplicitCastExpr 0x7fffd83989e8 <col:38, col:56> 'short' <LValueToRValue>
|   | | |     | | |     |     `-MemberExpr 0x7fffd83989a0 <col:38, col:56> 'short' lvalue .x 0x7fffd83517d8
|   | | |     | | |     |       `-ArraySubscriptExpr 0x7fffd8398978 <col:38, col:54> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | | |     | | |     |         |-ImplicitCastExpr 0x7fffd8398960 <col:38> 'stbtt_vertex *' <LValueToRValue>
|   | | |     | | |     |         | `-DeclRefExpr 0x7fffd8398848 <col:38> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   | | |     | | |     |         `-BinaryOperator 0x7fffd8398938 <col:47, col:53> 'int' '+'
|   | | |     | | |     |           |-BinaryOperator 0x7fffd83988f0 <col:47, col:51> 'int' '+'
|   | | |     | | |     |           | |-ImplicitCastExpr 0x7fffd83988c0 <col:47> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | |     |           | | `-DeclRefExpr 0x7fffd8398870 <col:47> 'stbtt_int32':'int' lvalue Var 0x7fffd8393180 'off' 'stbtt_int32':'int'
|   | | |     | | |     |           | `-ImplicitCastExpr 0x7fffd83988d8 <col:51> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | |     |           |   `-DeclRefExpr 0x7fffd8398898 <col:51> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | |     | | |     |           `-IntegerLiteral 0x7fffd8398918 <col:53> 'int' 1
|   | | |     | | |     |-BinaryOperator 0x7fffd8398c58 <line:1779:19, col:56> 'stbtt_int32':'int' '='
|   | | |     | | |     | |-DeclRefExpr 0x7fffd8398a50 <col:19> 'stbtt_int32':'int' lvalue Var 0x7fffd8393518 'sy' 'stbtt_int32':'int'
|   | | |     | | |     | `-CStyleCastExpr 0x7fffd8398c30 <col:24, col:56> 'stbtt_int32':'int' <IntegralCast>
|   | | |     | | |     |   `-ImplicitCastExpr 0x7fffd8398c18 <col:38, col:56> 'short' <LValueToRValue>
|   | | |     | | |     |     `-MemberExpr 0x7fffd8398bd0 <col:38, col:56> 'short' lvalue .y 0x7fffd8351838
|   | | |     | | |     |       `-ArraySubscriptExpr 0x7fffd8398ba8 <col:38, col:54> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | | |     | | |     |         |-ImplicitCastExpr 0x7fffd8398b90 <col:38> 'stbtt_vertex *' <LValueToRValue>
|   | | |     | | |     |         | `-DeclRefExpr 0x7fffd8398a78 <col:38> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   | | |     | | |     |         `-BinaryOperator 0x7fffd8398b68 <col:47, col:53> 'int' '+'
|   | | |     | | |     |           |-BinaryOperator 0x7fffd8398b20 <col:47, col:51> 'int' '+'
|   | | |     | | |     |           | |-ImplicitCastExpr 0x7fffd8398af0 <col:47> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | |     |           | | `-DeclRefExpr 0x7fffd8398aa0 <col:47> 'stbtt_int32':'int' lvalue Var 0x7fffd8393180 'off' 'stbtt_int32':'int'
|   | | |     | | |     |           | `-ImplicitCastExpr 0x7fffd8398b08 <col:51> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | |     |           |   `-DeclRefExpr 0x7fffd8398ac8 <col:51> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | |     | | |     |           `-IntegerLiteral 0x7fffd8398b48 <col:53> 'int' 1
|   | | |     | | |     `-UnaryOperator 0x7fffd8398ca8 <line:1780:19, col:21> 'stbtt_int32':'int' prefix '++'
|   | | |     | | |       `-DeclRefExpr 0x7fffd8398c80 <col:21> 'stbtt_int32':'int' lvalue Var 0x7fffd8392ea0 'i' 'stbtt_int32':'int'
|   | | |     | | `-CompoundStmt 0x7fffd8398e70 <line:1782:20, line:1785:13>
|   | | |     | |   |-BinaryOperator 0x7fffd8398db8 <line:1783:16, col:21> 'stbtt_int32':'int' '='
|   | | |     | |   | |-DeclRefExpr 0x7fffd8398d50 <col:16> 'stbtt_int32':'int' lvalue Var 0x7fffd83934a8 'sx' 'stbtt_int32':'int'
|   | | |     | |   | `-ImplicitCastExpr 0x7fffd8398da0 <col:21> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | |   |   `-DeclRefExpr 0x7fffd8398d78 <col:21> 'stbtt_int32':'int' lvalue Var 0x7fffd83932e8 'x' 'stbtt_int32':'int'
|   | | |     | |   `-BinaryOperator 0x7fffd8398e48 <line:1784:16, col:21> 'stbtt_int32':'int' '='
|   | | |     | |     |-DeclRefExpr 0x7fffd8398de0 <col:16> 'stbtt_int32':'int' lvalue Var 0x7fffd8393518 'sy' 'stbtt_int32':'int'
|   | | |     | |     `-ImplicitCastExpr 0x7fffd8398e30 <col:21> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | |       `-DeclRefExpr 0x7fffd8398e08 <col:21> 'stbtt_int32':'int' lvalue Var 0x7fffd8393358 'y' 'stbtt_int32':'int'
|   | | |     | |-CallExpr 0x7fffd8399090 <line:1786:13, col:77> 'void'
|   | | |     | | |-ImplicitCastExpr 0x7fffd8399078 <col:13> 'void (*)(stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' <FunctionToPointerDecay>
|   | | |     | | | `-DeclRefExpr 0x7fffd8398ec8 <col:13> 'void (stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' Function 0x7fffd838b970 'stbtt_setvertex' 'void (stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)'
|   | | |     | | |-UnaryOperator 0x7fffd8398fa0 <col:29, col:53> 'stbtt_vertex *' prefix '&'
|   | | |     | | | `-ArraySubscriptExpr 0x7fffd8398f78 <col:30, col:53> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | | |     | | |   |-ImplicitCastExpr 0x7fffd8398f60 <col:30> 'stbtt_vertex *' <LValueToRValue>
|   | | |     | | |   | `-DeclRefExpr 0x7fffd8398ef0 <col:30> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   | | |     | | |   `-UnaryOperator 0x7fffd8398f40 <col:39, col:51> 'int' postfix '++'
|   | | |     | | |     `-DeclRefExpr 0x7fffd8398f18 <col:39> 'int' lvalue Var 0x7fffd8392698 'num_vertices' 'int'
|   | | |     | | |-ImplicitCastExpr 0x7fffd83990e8 <col:56> 'stbtt_uint8':'unsigned char' <IntegralCast>
|   | | |     | | | `-DeclRefExpr 0x7fffd8398fc0 <col:56> 'int' EnumConstant 0x7fffd83515f0 'STBTT_vmove' 'int'
|   | | |     | | |-ImplicitCastExpr 0x7fffd8399100 <col:68> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | | `-DeclRefExpr 0x7fffd8398fe8 <col:68> 'stbtt_int32':'int' lvalue Var 0x7fffd83934a8 'sx' 'stbtt_int32':'int'
|   | | |     | | |-ImplicitCastExpr 0x7fffd8399118 <col:71> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | | | `-DeclRefExpr 0x7fffd8399010 <col:71> 'stbtt_int32':'int' lvalue Var 0x7fffd8393518 'sy' 'stbtt_int32':'int'
|   | | |     | | |-IntegerLiteral 0x7fffd8399038 <col:74> 'int' 0
|   | | |     | | `-IntegerLiteral 0x7fffd8399058 <col:76> 'int' 0
|   | | |     | |-BinaryOperator 0x7fffd8399178 <line:1787:13, col:23> 'stbtt_int32':'int' '='
|   | | |     | | |-DeclRefExpr 0x7fffd8399130 <col:13> 'stbtt_int32':'int' lvalue Var 0x7fffd83930f0 'was_off' 'stbtt_int32':'int'
|   | | |     | | `-IntegerLiteral 0x7fffd8399158 <col:23> 'int' 0
|   | | |     | |-BinaryOperator 0x7fffd8399388 <line:1788:13, col:58> 'stbtt_int32':'int' '='
|   | | |     | | |-DeclRefExpr 0x7fffd83991a0 <col:13> 'stbtt_int32':'int' lvalue Var 0x7fffd8393080 'next_move' 'stbtt_int32':'int'
|   | | |     | | `-BinaryOperator 0x7fffd8399360 <col:25, col:58> 'int' '+'
|   | | |     | |   |-IntegerLiteral 0x7fffd83991c8 <col:25> 'int' 1
|   | | |     | |   `-ImplicitCastExpr 0x7fffd8399348 <col:29, col:58> 'int' <IntegralCast>
|   | | |     | |     `-CallExpr 0x7fffd8399318 <col:29, col:58> 'stbtt_uint16':'unsigned short'
|   | | |     | |       |-ImplicitCastExpr 0x7fffd8399300 <col:29> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | | |     | |       | `-DeclRefExpr 0x7fffd83991e8 <col:29> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   | | |     | |       `-BinaryOperator 0x7fffd83992d8 <col:38, col:57> 'stbtt_uint8 *' '+'
|   | | |     | |         |-ImplicitCastExpr 0x7fffd83992c0 <col:38> 'stbtt_uint8 *' <LValueToRValue>
|   | | |     | |         | `-DeclRefExpr 0x7fffd8399210 <col:38> 'stbtt_uint8 *' lvalue Var 0x7fffd8392430 'endPtsOfContours' 'stbtt_uint8 *'
|   | | |     | |         `-BinaryOperator 0x7fffd8399298 <col:55, col:57> 'int' '*'
|   | | |     | |           |-ImplicitCastExpr 0x7fffd8399280 <col:55> 'stbtt_int32':'int' <LValueToRValue>
|   | | |     | |           | `-DeclRefExpr 0x7fffd8399238 <col:55> 'stbtt_int32':'int' lvalue Var 0x7fffd8392f10 'j' 'stbtt_int32':'int'
|   | | |     | |           `-IntegerLiteral 0x7fffd8399260 <col:57> 'int' 2
|   | | |     | `-UnaryOperator 0x7fffd83993d8 <line:1789:13, col:15> 'stbtt_int32':'int' prefix '++'
|   | | |     |   `-DeclRefExpr 0x7fffd83993b0 <col:15> 'stbtt_int32':'int' lvalue Var 0x7fffd8392f10 'j' 'stbtt_int32':'int'
|   | | |     `-CompoundStmt 0x7fffd839a210 <line:1790:17, line:1804:10>
|   | | |       `-IfStmt 0x7fffd839a1d8 <line:1791:13, line:1803:13>
|   | | |         |-<<<NULL>>>
|   | | |         |-<<<NULL>>>
|   | | |         |-UnaryOperator 0x7fffd8399500 <line:1791:17, col:28> 'int' prefix '!'
|   | | |         | `-ParenExpr 0x7fffd83994e0 <col:18, col:28> 'int'
|   | | |         |   `-BinaryOperator 0x7fffd83994b8 <col:19, col:27> 'int' '&'
|   | | |         |     |-ImplicitCastExpr 0x7fffd83994a0 <col:19> 'int' <IntegralCast>
|   | | |         |     | `-ImplicitCastExpr 0x7fffd8399488 <col:19> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | | |         |     |   `-DeclRefExpr 0x7fffd8399440 <col:19> 'stbtt_uint8':'unsigned char' lvalue Var 0x7fffd8392ce8 'flags' 'stbtt_uint8':'unsigned char'
|   | | |         |     `-IntegerLiteral 0x7fffd8399468 <col:27> 'int' 1
|   | | |         |-CompoundStmt 0x7fffd8399b90 <col:31, line:1797:13>
|   | | |         | |-IfStmt 0x7fffd83999c8 <line:1792:16, line:1793:104>
|   | | |         | | |-<<<NULL>>>
|   | | |         | | |-<<<NULL>>>
|   | | |         | | |-ImplicitCastExpr 0x7fffd8399548 <line:1792:20> 'stbtt_int32':'int' <LValueToRValue>
|   | | |         | | | `-DeclRefExpr 0x7fffd8399520 <col:20> 'stbtt_int32':'int' lvalue Var 0x7fffd83930f0 'was_off' 'stbtt_int32':'int'
|   | | |         | | |-CallExpr 0x7fffd8399928 <line:1793:19, col:104> 'void'
|   | | |         | | | |-ImplicitCastExpr 0x7fffd8399910 <col:19> 'void (*)(stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' <FunctionToPointerDecay>
|   | | |         | | | | `-DeclRefExpr 0x7fffd8399560 <col:19> 'void (stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' Function 0x7fffd838b970 'stbtt_setvertex' 'void (stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)'
|   | | |         | | | |-UnaryOperator 0x7fffd8399638 <col:35, col:59> 'stbtt_vertex *' prefix '&'
|   | | |         | | | | `-ArraySubscriptExpr 0x7fffd8399610 <col:36, col:59> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | | |         | | | |   |-ImplicitCastExpr 0x7fffd83995f8 <col:36> 'stbtt_vertex *' <LValueToRValue>
|   | | |         | | | |   | `-DeclRefExpr 0x7fffd8399588 <col:36> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   | | |         | | | |   `-UnaryOperator 0x7fffd83995d8 <col:45, col:57> 'int' postfix '++'
|   | | |         | | | |     `-DeclRefExpr 0x7fffd83995b0 <col:45> 'int' lvalue Var 0x7fffd8392698 'num_vertices' 'int'
|   | | |         | | | |-ImplicitCastExpr 0x7fffd8399980 <col:62> 'stbtt_uint8':'unsigned char' <IntegralCast>
|   | | |         | | | | `-DeclRefExpr 0x7fffd8399658 <col:62> 'int' EnumConstant 0x7fffd8351680 'STBTT_vcurve' 'int'
|   | | |         | | | |-BinaryOperator 0x7fffd8399788 <col:76, col:84> 'int' '>>'
|   | | |         | | | | |-ParenExpr 0x7fffd8399748 <col:76, col:81> 'int'
|   | | |         | | | | | `-BinaryOperator 0x7fffd8399720 <col:77, col:80> 'int' '+'
|   | | |         | | | | |   |-ImplicitCastExpr 0x7fffd83996d0 <col:77> 'stbtt_int32':'int' <LValueToRValue>
|   | | |         | | | | |   | `-DeclRefExpr 0x7fffd8399680 <col:77> 'stbtt_int32':'int' lvalue Var 0x7fffd83933c8 'cx' 'stbtt_int32':'int'
|   | | |         | | | | |   `-ImplicitCastExpr 0x7fffd83996e8 <col:80> 'stbtt_int32':'int' <LValueToRValue>
|   | | |         | | | | |     `-DeclRefExpr 0x7fffd83996a8 <col:80> 'stbtt_int32':'int' lvalue Var 0x7fffd83932e8 'x' 'stbtt_int32':'int'
|   | | |         | | | | `-IntegerLiteral 0x7fffd8399768 <col:84> 'int' 1
|   | | |         | | | |-BinaryOperator 0x7fffd8399898 <col:87, col:95> 'int' '>>'
|   | | |         | | | | |-ParenExpr 0x7fffd8399858 <col:87, col:92> 'int'
|   | | |         | | | | | `-BinaryOperator 0x7fffd8399830 <col:88, col:91> 'int' '+'
|   | | |         | | | | |   |-ImplicitCastExpr 0x7fffd8399800 <col:88> 'stbtt_int32':'int' <LValueToRValue>
|   | | |         | | | | |   | `-DeclRefExpr 0x7fffd83997b0 <col:88> 'stbtt_int32':'int' lvalue Var 0x7fffd8393438 'cy' 'stbtt_int32':'int'
|   | | |         | | | | |   `-ImplicitCastExpr 0x7fffd8399818 <col:91> 'stbtt_int32':'int' <LValueToRValue>
|   | | |         | | | | |     `-DeclRefExpr 0x7fffd83997d8 <col:91> 'stbtt_int32':'int' lvalue Var 0x7fffd8393358 'y' 'stbtt_int32':'int'
|   | | |         | | | | `-IntegerLiteral 0x7fffd8399878 <col:95> 'int' 1
|   | | |         | | | |-ImplicitCastExpr 0x7fffd8399998 <col:98> 'stbtt_int32':'int' <LValueToRValue>
|   | | |         | | | | `-DeclRefExpr 0x7fffd83998c0 <col:98> 'stbtt_int32':'int' lvalue Var 0x7fffd83933c8 'cx' 'stbtt_int32':'int'
|   | | |         | | | `-ImplicitCastExpr 0x7fffd83999b0 <col:102> 'stbtt_int32':'int' <LValueToRValue>
|   | | |         | | |   `-DeclRefExpr 0x7fffd83998e8 <col:102> 'stbtt_int32':'int' lvalue Var 0x7fffd8393438 'cy' 'stbtt_int32':'int'
|   | | |         | | `-<<<NULL>>>
|   | | |         | |-BinaryOperator 0x7fffd8399a68 <line:1794:16, col:21> 'stbtt_int32':'int' '='
|   | | |         | | |-DeclRefExpr 0x7fffd8399a00 <col:16> 'stbtt_int32':'int' lvalue Var 0x7fffd83933c8 'cx' 'stbtt_int32':'int'
|   | | |         | | `-ImplicitCastExpr 0x7fffd8399a50 <col:21> 'stbtt_int32':'int' <LValueToRValue>
|   | | |         | |   `-DeclRefExpr 0x7fffd8399a28 <col:21> 'stbtt_int32':'int' lvalue Var 0x7fffd83932e8 'x' 'stbtt_int32':'int'
|   | | |         | |-BinaryOperator 0x7fffd8399af8 <line:1795:16, col:21> 'stbtt_int32':'int' '='
|   | | |         | | |-DeclRefExpr 0x7fffd8399a90 <col:16> 'stbtt_int32':'int' lvalue Var 0x7fffd8393438 'cy' 'stbtt_int32':'int'
|   | | |         | | `-ImplicitCastExpr 0x7fffd8399ae0 <col:21> 'stbtt_int32':'int' <LValueToRValue>
|   | | |         | |   `-DeclRefExpr 0x7fffd8399ab8 <col:21> 'stbtt_int32':'int' lvalue Var 0x7fffd8393358 'y' 'stbtt_int32':'int'
|   | | |         | `-BinaryOperator 0x7fffd8399b68 <line:1796:16, col:26> 'stbtt_int32':'int' '='
|   | | |         |   |-DeclRefExpr 0x7fffd8399b20 <col:16> 'stbtt_int32':'int' lvalue Var 0x7fffd83930f0 'was_off' 'stbtt_int32':'int'
|   | | |         |   `-IntegerLiteral 0x7fffd8399b48 <col:26> 'int' 1
|   | | |         `-CompoundStmt 0x7fffd839a1b8 <line:1797:20, line:1803:13>
|   | | |           |-IfStmt 0x7fffd839a110 <line:1798:16, line:1801:82>
|   | | |           | |-<<<NULL>>>
|   | | |           | |-<<<NULL>>>
|   | | |           | |-ImplicitCastExpr 0x7fffd8399be8 <line:1798:20> 'stbtt_int32':'int' <LValueToRValue>
|   | | |           | | `-DeclRefExpr 0x7fffd8399bc0 <col:20> 'stbtt_int32':'int' lvalue Var 0x7fffd83930f0 'was_off' 'stbtt_int32':'int'
|   | | |           | |-CallExpr 0x7fffd8399dd8 <line:1799:19, col:87> 'void'
|   | | |           | | |-ImplicitCastExpr 0x7fffd8399dc0 <col:19> 'void (*)(stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' <FunctionToPointerDecay>
|   | | |           | | | `-DeclRefExpr 0x7fffd8399c00 <col:19> 'void (stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' Function 0x7fffd838b970 'stbtt_setvertex' 'void (stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)'
|   | | |           | | |-UnaryOperator 0x7fffd8399cd8 <col:35, col:59> 'stbtt_vertex *' prefix '&'
|   | | |           | | | `-ArraySubscriptExpr 0x7fffd8399cb0 <col:36, col:59> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | | |           | | |   |-ImplicitCastExpr 0x7fffd8399c98 <col:36> 'stbtt_vertex *' <LValueToRValue>
|   | | |           | | |   | `-DeclRefExpr 0x7fffd8399c28 <col:36> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   | | |           | | |   `-UnaryOperator 0x7fffd8399c78 <col:45, col:57> 'int' postfix '++'
|   | | |           | | |     `-DeclRefExpr 0x7fffd8399c50 <col:45> 'int' lvalue Var 0x7fffd8392698 'num_vertices' 'int'
|   | | |           | | |-ImplicitCastExpr 0x7fffd8399e30 <col:62> 'stbtt_uint8':'unsigned char' <IntegralCast>
|   | | |           | | | `-DeclRefExpr 0x7fffd8399cf8 <col:62> 'int' EnumConstant 0x7fffd8351680 'STBTT_vcurve' 'int'
|   | | |           | | |-ImplicitCastExpr 0x7fffd8399e48 <col:76> 'stbtt_int32':'int' <LValueToRValue>
|   | | |           | | | `-DeclRefExpr 0x7fffd8399d20 <col:76> 'stbtt_int32':'int' lvalue Var 0x7fffd83932e8 'x' 'stbtt_int32':'int'
|   | | |           | | |-ImplicitCastExpr 0x7fffd8399e60 <col:78> 'stbtt_int32':'int' <LValueToRValue>
|   | | |           | | | `-DeclRefExpr 0x7fffd8399d48 <col:78> 'stbtt_int32':'int' lvalue Var 0x7fffd8393358 'y' 'stbtt_int32':'int'
|   | | |           | | |-ImplicitCastExpr 0x7fffd8399e78 <col:81> 'stbtt_int32':'int' <LValueToRValue>
|   | | |           | | | `-DeclRefExpr 0x7fffd8399d70 <col:81> 'stbtt_int32':'int' lvalue Var 0x7fffd83933c8 'cx' 'stbtt_int32':'int'
|   | | |           | | `-ImplicitCastExpr 0x7fffd8399e90 <col:85> 'stbtt_int32':'int' <LValueToRValue>
|   | | |           | |   `-DeclRefExpr 0x7fffd8399d98 <col:85> 'stbtt_int32':'int' lvalue Var 0x7fffd8393438 'cy' 'stbtt_int32':'int'
|   | | |           | `-CallExpr 0x7fffd839a070 <line:1801:19, col:82> 'void'
|   | | |           |   |-ImplicitCastExpr 0x7fffd839a058 <col:19> 'void (*)(stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' <FunctionToPointerDecay>
|   | | |           |   | `-DeclRefExpr 0x7fffd8399ea8 <col:19> 'void (stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' Function 0x7fffd838b970 'stbtt_setvertex' 'void (stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)'
|   | | |           |   |-UnaryOperator 0x7fffd8399f80 <col:35, col:59> 'stbtt_vertex *' prefix '&'
|   | | |           |   | `-ArraySubscriptExpr 0x7fffd8399f58 <col:36, col:59> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | | |           |   |   |-ImplicitCastExpr 0x7fffd8399f40 <col:36> 'stbtt_vertex *' <LValueToRValue>
|   | | |           |   |   | `-DeclRefExpr 0x7fffd8399ed0 <col:36> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   | | |           |   |   `-UnaryOperator 0x7fffd8399f20 <col:45, col:57> 'int' postfix '++'
|   | | |           |   |     `-DeclRefExpr 0x7fffd8399ef8 <col:45> 'int' lvalue Var 0x7fffd8392698 'num_vertices' 'int'
|   | | |           |   |-ImplicitCastExpr 0x7fffd839a0c8 <col:62> 'stbtt_uint8':'unsigned char' <IntegralCast>
|   | | |           |   | `-DeclRefExpr 0x7fffd8399fa0 <col:62> 'int' EnumConstant 0x7fffd8351638 'STBTT_vline' 'int'
|   | | |           |   |-ImplicitCastExpr 0x7fffd839a0e0 <col:75> 'stbtt_int32':'int' <LValueToRValue>
|   | | |           |   | `-DeclRefExpr 0x7fffd8399fc8 <col:75> 'stbtt_int32':'int' lvalue Var 0x7fffd83932e8 'x' 'stbtt_int32':'int'
|   | | |           |   |-ImplicitCastExpr 0x7fffd839a0f8 <col:77> 'stbtt_int32':'int' <LValueToRValue>
|   | | |           |   | `-DeclRefExpr 0x7fffd8399ff0 <col:77> 'stbtt_int32':'int' lvalue Var 0x7fffd8393358 'y' 'stbtt_int32':'int'
|   | | |           |   |-IntegerLiteral 0x7fffd839a018 <col:79> 'int' 0
|   | | |           |   `-IntegerLiteral 0x7fffd839a038 <col:81> 'int' 0
|   | | |           `-BinaryOperator 0x7fffd839a190 <line:1802:16, col:26> 'stbtt_int32':'int' '='
|   | | |             |-DeclRefExpr 0x7fffd839a148 <col:16> 'stbtt_int32':'int' lvalue Var 0x7fffd83930f0 'was_off' 'stbtt_int32':'int'
|   | | |             `-IntegerLiteral 0x7fffd839a170 <col:26> 'int' 0
|   | | `-BinaryOperator 0x7fffd839a628 <line:1806:7, col:104> 'int' '='
|   | |   |-DeclRefExpr 0x7fffd839a2c8 <col:7> 'int' lvalue Var 0x7fffd8392698 'num_vertices' 'int'
|   | |   `-CallExpr 0x7fffd839a4c0 <col:22, col:104> 'int'
|   | |     |-ImplicitCastExpr 0x7fffd839a4a8 <col:22> 'int (*)(stbtt_vertex *, int, int, int, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x7fffd839a2f0 <col:22> 'int (stbtt_vertex *, int, int, int, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' Function 0x7fffd83911c8 'stbtt__close_shape' 'int (stbtt_vertex *, int, int, int, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)'
|   | |     |-ImplicitCastExpr 0x7fffd839a538 <col:41> 'stbtt_vertex *' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x7fffd839a318 <col:41> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   | |     |-ImplicitCastExpr 0x7fffd839a550 <col:51> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x7fffd839a340 <col:51> 'int' lvalue Var 0x7fffd8392698 'num_vertices' 'int'
|   | |     |-ImplicitCastExpr 0x7fffd839a568 <col:65> 'stbtt_int32':'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x7fffd839a368 <col:65> 'stbtt_int32':'int' lvalue Var 0x7fffd83930f0 'was_off' 'stbtt_int32':'int'
|   | |     |-ImplicitCastExpr 0x7fffd839a580 <col:74> 'stbtt_int32':'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x7fffd839a390 <col:74> 'stbtt_int32':'int' lvalue Var 0x7fffd83931f0 'start_off' 'stbtt_int32':'int'
|   | |     |-ImplicitCastExpr 0x7fffd839a598 <col:85> 'stbtt_int32':'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x7fffd839a3b8 <col:85> 'stbtt_int32':'int' lvalue Var 0x7fffd83934a8 'sx' 'stbtt_int32':'int'
|   | |     |-ImplicitCastExpr 0x7fffd839a5b0 <col:88> 'stbtt_int32':'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x7fffd839a3e0 <col:88> 'stbtt_int32':'int' lvalue Var 0x7fffd8393518 'sy' 'stbtt_int32':'int'
|   | |     |-ImplicitCastExpr 0x7fffd839a5c8 <col:91> 'stbtt_int32':'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x7fffd839a408 <col:91> 'stbtt_int32':'int' lvalue Var 0x7fffd8393588 'scx' 'stbtt_int32':'int'
|   | |     |-ImplicitCastExpr 0x7fffd839a5e0 <col:95> 'stbtt_int32':'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x7fffd839a430 <col:95> 'stbtt_int32':'int' lvalue Var 0x7fffd83935f8 'scy' 'stbtt_int32':'int'
|   | |     |-ImplicitCastExpr 0x7fffd839a5f8 <col:99> 'stbtt_int32':'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x7fffd839a458 <col:99> 'stbtt_int32':'int' lvalue Var 0x7fffd83933c8 'cx' 'stbtt_int32':'int'
|   | |     `-ImplicitCastExpr 0x7fffd839a610 <col:102> 'stbtt_int32':'int' <LValueToRValue>
|   | |       `-DeclRefExpr 0x7fffd839a480 <col:102> 'stbtt_int32':'int' lvalue Var 0x7fffd8393438 'cy' 'stbtt_int32':'int'
|   | `-IfStmt 0x7fffd83a2758 <line:1807:11, line:1886:4>
|   |   |-<<<NULL>>>
|   |   |-<<<NULL>>>
|   |   |-BinaryOperator 0x7fffd839a790 <line:1807:15, col:34> 'int' '<'
|   |   | |-ImplicitCastExpr 0x7fffd839a778 <col:15> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x7fffd839a760 <col:15> 'stbtt_int16':'short' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x7fffd839a718 <col:15> 'stbtt_int16':'short' lvalue Var 0x7fffd83923a8 'numberOfContours' 'stbtt_int16':'short'
|   |   | `-IntegerLiteral 0x7fffd839a740 <col:34> 'int' 0
|   |   |-CompoundStmt 0x7fffd83a2710 <col:37, line:1884:4>
|   |   | |-DeclStmt 0x7fffd839a850 <line:1809:7, col:19>
|   |   | | `-VarDecl 0x7fffd839a7d0 <col:7, col:18> col:11 used more 'int' cinit
|   |   | |   `-IntegerLiteral 0x7fffd839a830 <col:18> 'int' 1
|   |   | |-DeclStmt 0x7fffd839a9c8 <line:1810:7, col:40>
|   |   | | `-VarDecl 0x7fffd839a878 <col:7, col:38> col:20 used comp 'stbtt_uint8 *' cinit
|   |   | |   `-BinaryOperator 0x7fffd839a9a0 <col:27, col:38> 'stbtt_uint8 *' '+'
|   |   | |     |-BinaryOperator 0x7fffd839a958 <col:27, col:34> 'stbtt_uint8 *' '+'
|   |   | |     | |-ImplicitCastExpr 0x7fffd839a928 <col:27> 'stbtt_uint8 *' <LValueToRValue>
|   |   | |     | | `-DeclRefExpr 0x7fffd839a8d8 <col:27> 'stbtt_uint8 *' lvalue Var 0x7fffd83924b8 'data' 'stbtt_uint8 *'
|   |   | |     | `-ImplicitCastExpr 0x7fffd839a940 <col:34> 'int' <LValueToRValue>
|   |   | |     |   `-DeclRefExpr 0x7fffd839a900 <col:34> 'int' lvalue Var 0x7fffd8392748 'g' 'int'
|   |   | |     `-IntegerLiteral 0x7fffd839a980 <col:38> 'int' 10
|   |   | |-BinaryOperator 0x7fffd839aa28 <line:1811:7, col:22> 'int' '='
|   |   | | |-DeclRefExpr 0x7fffd839a9e0 <col:7> 'int' lvalue Var 0x7fffd8392698 'num_vertices' 'int'
|   |   | | `-IntegerLiteral 0x7fffd839aa08 <col:22> 'int' 0
|   |   | |-BinaryOperator 0x7fffd839aab0 <line:1812:7, col:18> 'stbtt_vertex *' '='
|   |   | | |-DeclRefExpr 0x7fffd839aa50 <col:7> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   |   | | `-ImplicitCastExpr 0x7fffd839aa98 <col:18> 'stbtt_vertex *' <NullToPointer>
|   |   | |   `-IntegerLiteral 0x7fffd839aa78 <col:18> 'int' 0
|   |   | `-WhileStmt 0x7fffd83a26f0 <line:1813:7, line:1883:7>
|   |   |   |-<<<NULL>>>
|   |   |   |-ImplicitCastExpr 0x7fffd839ab00 <line:1813:14> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x7fffd839aad8 <col:14> 'int' lvalue Var 0x7fffd839a7d0 'more' 'int'
|   |   |   `-CompoundStmt 0x7fffd83a2668 <col:20, line:1883:7>
|   |   |     |-DeclStmt 0x7fffd839ac10 <line:1814:10, col:34>
|   |   |     | |-VarDecl 0x7fffd839ab28 <col:10, col:23> col:23 used flags 'stbtt_uint16':'unsigned short'
|   |   |     | `-VarDecl 0x7fffd839ab98 <col:10, col:30> col:30 used gidx 'stbtt_uint16':'unsigned short'
|   |   |     |-DeclStmt 0x7fffd839ad50 <line:1815:10, col:35>
|   |   |     | |-VarDecl 0x7fffd839ac40 <col:10, col:31> col:14 used comp_num_verts 'int' cinit
|   |   |     | | `-IntegerLiteral 0x7fffd839aca0 <col:31> 'int' 0
|   |   |     | `-VarDecl 0x7fffd839acd8 <col:10, col:34> col:34 used i 'int'
|   |   |     |-DeclStmt 0x7fffd839aed0 <line:1816:10, col:48>
|   |   |     | |-VarDecl 0x7fffd839ad78 <col:10, col:37> col:24 used comp_verts 'stbtt_vertex *' cinit
|   |   |     | | `-ImplicitCastExpr 0x7fffd839adf8 <col:37> 'stbtt_vertex *' <NullToPointer>
|   |   |     | |   `-IntegerLiteral 0x7fffd839add8 <col:37> 'int' 0
|   |   |     | `-VarDecl 0x7fffd839ae20 <col:10, col:47> col:41 used tmp 'stbtt_vertex *' cinit
|   |   |     |   `-ImplicitCastExpr 0x7fffd839aea0 <col:47> 'stbtt_vertex *' <NullToPointer>
|   |   |     |     `-IntegerLiteral 0x7fffd839ae80 <col:47> 'int' 0
|   |   |     |-DeclStmt 0x7fffd839b310 <line:1817:10, col:44>
|   |   |     | |-VarDecl 0x7fffd839af70 <col:10, col:37> col:16 used mtx 'float [6]' cinit
|   |   |     | | `-InitListExpr 0x7fffd839b100 <col:25, col:37> 'float [6]'
|   |   |     | |   |-ImplicitCastExpr 0x7fffd839b170 <col:26> 'float' <IntegralToFloating>
|   |   |     | |   | `-IntegerLiteral 0x7fffd839afd0 <col:26> 'int' 1
|   |   |     | |   |-ImplicitCastExpr 0x7fffd839b188 <col:28> 'float' <IntegralToFloating>
|   |   |     | |   | `-IntegerLiteral 0x7fffd839aff0 <col:28> 'int' 0
|   |   |     | |   |-ImplicitCastExpr 0x7fffd839b1a0 <col:30> 'float' <IntegralToFloating>
|   |   |     | |   | `-IntegerLiteral 0x7fffd839b010 <col:30> 'int' 0
|   |   |     | |   |-ImplicitCastExpr 0x7fffd839b1b8 <col:32> 'float' <IntegralToFloating>
|   |   |     | |   | `-IntegerLiteral 0x7fffd839b030 <col:32> 'int' 1
|   |   |     | |   |-ImplicitCastExpr 0x7fffd839b1d0 <col:34> 'float' <IntegralToFloating>
|   |   |     | |   | `-IntegerLiteral 0x7fffd839b050 <col:34> 'int' 0
|   |   |     | |   `-ImplicitCastExpr 0x7fffd839b1e8 <col:36> 'float' <IntegralToFloating>
|   |   |     | |     `-IntegerLiteral 0x7fffd839b070 <col:36> 'int' 0
|   |   |     | |-VarDecl 0x7fffd839b218 <col:10, col:40> col:40 used m 'float'
|   |   |     | `-VarDecl 0x7fffd839b290 <col:10, col:43> col:43 used n 'float'
|   |   |     |-BinaryOperator 0x7fffd839b418 <line:1819:10, col:30> 'stbtt_uint16':'unsigned short' '='
|   |   |     | |-DeclRefExpr 0x7fffd839b328 <col:10> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd839ab28 'flags' 'stbtt_uint16':'unsigned short'
|   |   |     | `-ImplicitCastExpr 0x7fffd839b400 <col:18, col:30> 'stbtt_uint16':'unsigned short' <IntegralCast>
|   |   |     |   `-CallExpr 0x7fffd839b3b8 <col:18, col:30> 'stbtt_int16':'short'
|   |   |     |     |-ImplicitCastExpr 0x7fffd839b3a0 <col:18> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x7fffd839b350 <col:18> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |   |     |     `-ImplicitCastExpr 0x7fffd839b3e8 <col:26> 'stbtt_uint8 *' <LValueToRValue>
|   |   |     |       `-DeclRefExpr 0x7fffd839b378 <col:26> 'stbtt_uint8 *' lvalue Var 0x7fffd839a878 'comp' 'stbtt_uint8 *'
|   |   |     |-CompoundAssignOperator 0x7fffd839b488 <col:33, col:39> 'stbtt_uint8 *' '+=' ComputeLHSTy='stbtt_uint8 *' ComputeResultTy='stbtt_uint8 *'
|   |   |     | |-DeclRefExpr 0x7fffd839b440 <col:33> 'stbtt_uint8 *' lvalue Var 0x7fffd839a878 'comp' 'stbtt_uint8 *'
|   |   |     | `-IntegerLiteral 0x7fffd839b468 <col:39> 'int' 2
|   |   |     |-BinaryOperator 0x7fffd839b5b0 <line:1820:10, col:29> 'stbtt_uint16':'unsigned short' '='
|   |   |     | |-DeclRefExpr 0x7fffd839b4c0 <col:10> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd839ab98 'gidx' 'stbtt_uint16':'unsigned short'
|   |   |     | `-ImplicitCastExpr 0x7fffd839b598 <col:17, col:29> 'stbtt_uint16':'unsigned short' <IntegralCast>
|   |   |     |   `-CallExpr 0x7fffd839b550 <col:17, col:29> 'stbtt_int16':'short'
|   |   |     |     |-ImplicitCastExpr 0x7fffd839b538 <col:17> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x7fffd839b4e8 <col:17> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |   |     |     `-ImplicitCastExpr 0x7fffd839b580 <col:25> 'stbtt_uint8 *' <LValueToRValue>
|   |   |     |       `-DeclRefExpr 0x7fffd839b510 <col:25> 'stbtt_uint8 *' lvalue Var 0x7fffd839a878 'comp' 'stbtt_uint8 *'
|   |   |     |-CompoundAssignOperator 0x7fffd839b620 <col:32, col:38> 'stbtt_uint8 *' '+=' ComputeLHSTy='stbtt_uint8 *' ComputeResultTy='stbtt_uint8 *'
|   |   |     | |-DeclRefExpr 0x7fffd839b5d8 <col:32> 'stbtt_uint8 *' lvalue Var 0x7fffd839a878 'comp' 'stbtt_uint8 *'
|   |   |     | `-IntegerLiteral 0x7fffd839b600 <col:38> 'int' 2
|   |   |     |-IfStmt 0x7fffd839cac8 <line:1822:10, line:1834:10>
|   |   |     | |-<<<NULL>>>
|   |   |     | |-<<<NULL>>>
|   |   |     | |-BinaryOperator 0x7fffd839b6d0 <line:1822:14, col:22> 'int' '&'
|   |   |     | | |-ImplicitCastExpr 0x7fffd839b6b8 <col:14> 'int' <IntegralCast>
|   |   |     | | | `-ImplicitCastExpr 0x7fffd839b6a0 <col:14> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |     | | |   `-DeclRefExpr 0x7fffd839b658 <col:14> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd839ab28 'flags' 'stbtt_uint16':'unsigned short'
|   |   |     | | `-IntegerLiteral 0x7fffd839b680 <col:22> 'int' 2
|   |   |     | |-CompoundStmt 0x7fffd839c590 <col:25, line:1830:10>
|   |   |     | | `-IfStmt 0x7fffd839c558 <line:1823:13, line:1829:13>
|   |   |     | |   |-<<<NULL>>>
|   |   |     | |   |-<<<NULL>>>
|   |   |     | |   |-BinaryOperator 0x7fffd839bb90 <line:1823:17, col:25> 'int' '&'
|   |   |     | |   | |-ImplicitCastExpr 0x7fffd839bb78 <col:17> 'int' <IntegralCast>
|   |   |     | |   | | `-ImplicitCastExpr 0x7fffd839bb60 <col:17> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |     | |   | |   `-DeclRefExpr 0x7fffd839b6f8 <col:17> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd839ab28 'flags' 'stbtt_uint16':'unsigned short'
|   |   |     | |   | `-IntegerLiteral 0x7fffd839bb40 <col:25> 'int' 1
|   |   |     | |   |-CompoundStmt 0x7fffd839bfa8 <col:28, line:1826:13>
|   |   |     | |   | |-BinaryOperator 0x7fffd839bd08 <line:1824:16, col:37> 'float' '='
|   |   |     | |   | | |-ArraySubscriptExpr 0x7fffd839bc18 <col:16, col:21> 'float' lvalue
|   |   |     | |   | | | |-ImplicitCastExpr 0x7fffd839bc00 <col:16> 'float *' <ArrayToPointerDecay>
|   |   |     | |   | | | | `-DeclRefExpr 0x7fffd839bbb8 <col:16> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     | |   | | | `-IntegerLiteral 0x7fffd839bbe0 <col:20> 'int' 4
|   |   |     | |   | | `-ImplicitCastExpr 0x7fffd839bcf0 <col:25, col:37> 'float' <IntegralToFloating>
|   |   |     | |   | |   `-CallExpr 0x7fffd839bca8 <col:25, col:37> 'stbtt_int16':'short'
|   |   |     | |   | |     |-ImplicitCastExpr 0x7fffd839bc90 <col:25> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |     | |   | |     | `-DeclRefExpr 0x7fffd839bc40 <col:25> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |   |     | |   | |     `-ImplicitCastExpr 0x7fffd839bcd8 <col:33> 'stbtt_uint8 *' <LValueToRValue>
|   |   |     | |   | |       `-DeclRefExpr 0x7fffd839bc68 <col:33> 'stbtt_uint8 *' lvalue Var 0x7fffd839a878 'comp' 'stbtt_uint8 *'
|   |   |     | |   | |-CompoundAssignOperator 0x7fffd839bd78 <col:40, col:46> 'stbtt_uint8 *' '+=' ComputeLHSTy='stbtt_uint8 *' ComputeResultTy='stbtt_uint8 *'
|   |   |     | |   | | |-DeclRefExpr 0x7fffd839bd30 <col:40> 'stbtt_uint8 *' lvalue Var 0x7fffd839a878 'comp' 'stbtt_uint8 *'
|   |   |     | |   | | `-IntegerLiteral 0x7fffd839bd58 <col:46> 'int' 2
|   |   |     | |   | |-BinaryOperator 0x7fffd839bf00 <line:1825:16, col:37> 'float' '='
|   |   |     | |   | | |-ArraySubscriptExpr 0x7fffd839be10 <col:16, col:21> 'float' lvalue
|   |   |     | |   | | | |-ImplicitCastExpr 0x7fffd839bdf8 <col:16> 'float *' <ArrayToPointerDecay>
|   |   |     | |   | | | | `-DeclRefExpr 0x7fffd839bdb0 <col:16> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     | |   | | | `-IntegerLiteral 0x7fffd839bdd8 <col:20> 'int' 5
|   |   |     | |   | | `-ImplicitCastExpr 0x7fffd839bee8 <col:25, col:37> 'float' <IntegralToFloating>
|   |   |     | |   | |   `-CallExpr 0x7fffd839bea0 <col:25, col:37> 'stbtt_int16':'short'
|   |   |     | |   | |     |-ImplicitCastExpr 0x7fffd839be88 <col:25> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |     | |   | |     | `-DeclRefExpr 0x7fffd839be38 <col:25> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |   |     | |   | |     `-ImplicitCastExpr 0x7fffd839bed0 <col:33> 'stbtt_uint8 *' <LValueToRValue>
|   |   |     | |   | |       `-DeclRefExpr 0x7fffd839be60 <col:33> 'stbtt_uint8 *' lvalue Var 0x7fffd839a878 'comp' 'stbtt_uint8 *'
|   |   |     | |   | `-CompoundAssignOperator 0x7fffd839bf70 <col:40, col:46> 'stbtt_uint8 *' '+=' ComputeLHSTy='stbtt_uint8 *' ComputeResultTy='stbtt_uint8 *'
|   |   |     | |   |   |-DeclRefExpr 0x7fffd839bf28 <col:40> 'stbtt_uint8 *' lvalue Var 0x7fffd839a878 'comp' 'stbtt_uint8 *'
|   |   |     | |   |   `-IntegerLiteral 0x7fffd839bf50 <col:46> 'int' 2
|   |   |     | |   `-CompoundStmt 0x7fffd839c528 <line:1826:20, line:1829:13>
|   |   |     | |     |-BinaryOperator 0x7fffd839c218 <line:1827:16, line:1278:44> 'float' '='
|   |   |     | |     | |-ArraySubscriptExpr 0x7fffd839c038 <line:1827:16, col:21> 'float' lvalue
|   |   |     | |     | | |-ImplicitCastExpr 0x7fffd839c020 <col:16> 'float *' <ArrayToPointerDecay>
|   |   |     | |     | | | `-DeclRefExpr 0x7fffd839bfd8 <col:16> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     | |     | | `-IntegerLiteral 0x7fffd839c000 <col:20> 'int' 4
|   |   |     | |     | `-ImplicitCastExpr 0x7fffd839c200 <line:1278:23, col:44> 'float' <IntegralToFloating>
|   |   |     | |     |   `-ImplicitCastExpr 0x7fffd839c1e8 <col:23, col:44> 'stbtt_int8':'signed char' <LValueToRValue>
|   |   |     | |     |     `-ParenExpr 0x7fffd839c1c8 <col:23, col:44> 'stbtt_int8':'signed char' lvalue
|   |   |     | |     |       `-UnaryOperator 0x7fffd839c1a8 <col:24, col:43> 'stbtt_int8':'signed char' lvalue prefix '*'
|   |   |     | |     |         `-CStyleCastExpr 0x7fffd839c180 <col:26, col:43> 'stbtt_int8 *' <BitCast>
|   |   |     | |     |           `-ImplicitCastExpr 0x7fffd839c168 <col:41, col:43> 'stbtt_uint8 *' <LValueToRValue>
|   |   |     | |     |             `-ParenExpr 0x7fffd839c148 <col:41, col:43> 'stbtt_uint8 *' lvalue
|   |   |     | |     |               `-DeclRefExpr 0x7fffd839c080 <line:1827:32> 'stbtt_uint8 *' lvalue Var 0x7fffd839a878 'comp' 'stbtt_uint8 *'
|   |   |     | |     |-CompoundAssignOperator 0x7fffd839c288 <col:39, col:45> 'stbtt_uint8 *' '+=' ComputeLHSTy='stbtt_uint8 *' ComputeResultTy='stbtt_uint8 *'
|   |   |     | |     | |-DeclRefExpr 0x7fffd839c240 <col:39> 'stbtt_uint8 *' lvalue Var 0x7fffd839a878 'comp' 'stbtt_uint8 *'
|   |   |     | |     | `-IntegerLiteral 0x7fffd839c268 <col:45> 'int' 1
|   |   |     | |     |-BinaryOperator 0x7fffd839c480 <line:1828:16, line:1278:44> 'float' '='
|   |   |     | |     | |-ArraySubscriptExpr 0x7fffd839c320 <line:1828:16, col:21> 'float' lvalue
|   |   |     | |     | | |-ImplicitCastExpr 0x7fffd839c308 <col:16> 'float *' <ArrayToPointerDecay>
|   |   |     | |     | | | `-DeclRefExpr 0x7fffd839c2c0 <col:16> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     | |     | | `-IntegerLiteral 0x7fffd839c2e8 <col:20> 'int' 5
|   |   |     | |     | `-ImplicitCastExpr 0x7fffd839c468 <line:1278:23, col:44> 'float' <IntegralToFloating>
|   |   |     | |     |   `-ImplicitCastExpr 0x7fffd839c450 <col:23, col:44> 'stbtt_int8':'signed char' <LValueToRValue>
|   |   |     | |     |     `-ParenExpr 0x7fffd839c430 <col:23, col:44> 'stbtt_int8':'signed char' lvalue
|   |   |     | |     |       `-UnaryOperator 0x7fffd839c410 <col:24, col:43> 'stbtt_int8':'signed char' lvalue prefix '*'
|   |   |     | |     |         `-CStyleCastExpr 0x7fffd839c3e8 <col:26, col:43> 'stbtt_int8 *' <BitCast>
|   |   |     | |     |           `-ImplicitCastExpr 0x7fffd839c3d0 <col:41, col:43> 'stbtt_uint8 *' <LValueToRValue>
|   |   |     | |     |             `-ParenExpr 0x7fffd839c3b0 <col:41, col:43> 'stbtt_uint8 *' lvalue
|   |   |     | |     |               `-DeclRefExpr 0x7fffd839c348 <line:1828:32> 'stbtt_uint8 *' lvalue Var 0x7fffd839a878 'comp' 'stbtt_uint8 *'
|   |   |     | |     `-CompoundAssignOperator 0x7fffd839c4f0 <col:39, col:45> 'stbtt_uint8 *' '+=' ComputeLHSTy='stbtt_uint8 *' ComputeResultTy='stbtt_uint8 *'
|   |   |     | |       |-DeclRefExpr 0x7fffd839c4a8 <col:39> 'stbtt_uint8 *' lvalue Var 0x7fffd839a878 'comp' 'stbtt_uint8 *'
|   |   |     | |       `-IntegerLiteral 0x7fffd839c4d0 <col:45> 'int' 1
|   |   |     | `-CompoundStmt 0x7fffd839cab0 <line:1831:15, line:1834:10>
|   |   |     |   `-ParenExpr 0x7fffd839ca90 </usr/include/assert.h:108:3, line:113:7> 'void'
|   |   |     |     `-BinaryOperator 0x7fffd839ca68 <line:108:4, line:113:6> 'void' ','
|   |   |     |       |-CStyleCastExpr 0x7fffd839c6a8 <line:108:4, col:33> 'void' <ToVoid>
|   |   |     |       | `-UnaryExprOrTypeTraitExpr 0x7fffd839c678 <col:11, col:33> 'unsigned long' sizeof
|   |   |     |       |   `-ParenExpr 0x7fffd839c658 <col:18, col:33> 'int'
|   |   |     |       |     `-ConditionalOperator 0x7fffd839c628 <col:19, col:32> 'int'
|   |   |     |       |       |-ParenExpr 0x7fffd839c5c8 <col:19, col:24> 'int'
|   |   |     |       |       | `-IntegerLiteral 0x7fffd839c5a8 <././stb/stb_truetype.h:1833:26> 'int' 0
|   |   |     |       |       |-IntegerLiteral 0x7fffd839c5e8 </usr/include/assert.h:108:28> 'int' 1
|   |   |     |       |       `-IntegerLiteral 0x7fffd839c608 <col:32> 'int' 0
|   |   |     |       `-UnaryOperator 0x7fffd839ca48 <col:36, line:113:6> 'void' prefix '__extension__'
|   |   |     |         `-StmtExpr 0x7fffd839ca28 <line:108:50, line:113:6> 'void'
|   |   |     |           `-CompoundStmt 0x7fffd839ca10 <line:108:51, line:113:5>
|   |   |     |             `-IfStmt 0x7fffd839c9d8 <line:109:7, line:112:68>
|   |   |     |               |-<<<NULL>>>
|   |   |     |               |-<<<NULL>>>
|   |   |     |               |-IntegerLiteral 0x7fffd839c6d0 <././stb/stb_truetype.h:1833:26> 'int' 0
|   |   |     |               |-NullStmt 0x7fffd839c6f0 </usr/include/assert.h:110:9>
|   |   |     |               `-CallExpr 0x7fffd839c900 <line:112:9, col:68> 'void'
|   |   |     |                 |-ImplicitCastExpr 0x7fffd839c8e8 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |   |     |                 | `-DeclRefExpr 0x7fffd839c700 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |   |     |                 |-ImplicitCastExpr 0x7fffd839c960 <<scratch space>:255:1> 'const char *' <BitCast>
|   |   |     |                 | `-ImplicitCastExpr 0x7fffd839c948 <col:1> 'char *' <ArrayToPointerDecay>
|   |   |     |                 |   `-StringLiteral 0x7fffd839c728 <col:1> 'char [2]' lvalue "0"
|   |   |     |                 |-ImplicitCastExpr 0x7fffd839c990 <line:256:1> 'const char *' <BitCast>
|   |   |     |                 | `-ImplicitCastExpr 0x7fffd839c978 <col:1> 'char *' <ArrayToPointerDecay>
|   |   |     |                 |   `-StringLiteral 0x7fffd839c758 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |   |     |                 |-ImplicitCastExpr 0x7fffd839c9a8 <line:257:1> 'unsigned int' <IntegralCast>
|   |   |     |                 | `-IntegerLiteral 0x7fffd839c798 <col:1> 'int' 1833
|   |   |     |                 `-ImplicitCastExpr 0x7fffd839c9c0 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |   |     |                   `-UnaryOperator 0x7fffd839c8c8 <col:30, col:44> 'const char [73]' lvalue prefix '__extension__'
|   |   |     |                     `-PredefinedExpr 0x7fffd839c8a8 <col:44> 'const char [73]' lvalue __PRETTY_FUNCTION__
|   |   |     |                       `-StringLiteral 0x7fffd839c838 <col:44> 'const char [73]' lvalue "int stbtt__GetGlyphShapeTT(const stbtt_fontinfo *, int, stbtt_vertex **)"
|   |   |     |-IfStmt 0x7fffd839e7a8 <././stb/stb_truetype.h:1835:10, line:1847:10>
|   |   |     | |-<<<NULL>>>
|   |   |     | |-<<<NULL>>>
|   |   |     | |-BinaryOperator 0x7fffd839cbe0 <line:1835:14, col:27> 'int' '&'
|   |   |     | | |-ImplicitCastExpr 0x7fffd839cbc8 <col:14> 'int' <IntegralCast>
|   |   |     | | | `-ImplicitCastExpr 0x7fffd839cbb0 <col:14> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |     | | |   `-DeclRefExpr 0x7fffd839cb00 <col:14> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd839ab28 'flags' 'stbtt_uint16':'unsigned short'
|   |   |     | | `-ParenExpr 0x7fffd839cb90 <col:22, col:27> 'int'
|   |   |     | |   `-BinaryOperator 0x7fffd839cb68 <col:23, col:26> 'int' '<<'
|   |   |     | |     |-IntegerLiteral 0x7fffd839cb28 <col:23> 'int' 1
|   |   |     | |     `-IntegerLiteral 0x7fffd839cb48 <col:26> 'int' 3
|   |   |     | |-CompoundStmt 0x7fffd839d0a8 <col:30, line:1838:10>
|   |   |     | | |-BinaryOperator 0x7fffd839ce68 <line:1836:13, col:45> 'float' '='
|   |   |     | | | |-ArraySubscriptExpr 0x7fffd839cc68 <col:13, col:18> 'float' lvalue
|   |   |     | | | | |-ImplicitCastExpr 0x7fffd839cc50 <col:13> 'float *' <ArrayToPointerDecay>
|   |   |     | | | | | `-DeclRefExpr 0x7fffd839cc08 <col:13> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     | | | | `-IntegerLiteral 0x7fffd839cc30 <col:17> 'int' 0
|   |   |     | | | `-BinaryOperator 0x7fffd839ce40 <col:22, col:45> 'float' '='
|   |   |     | | |   |-ArraySubscriptExpr 0x7fffd839ccf0 <col:22, col:27> 'float' lvalue
|   |   |     | | |   | |-ImplicitCastExpr 0x7fffd839ccd8 <col:22> 'float *' <ArrayToPointerDecay>
|   |   |     | | |   | | `-DeclRefExpr 0x7fffd839cc90 <col:22> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     | | |   | `-IntegerLiteral 0x7fffd839ccb8 <col:26> 'int' 3
|   |   |     | | |   `-BinaryOperator 0x7fffd839ce18 <col:31, col:45> 'float' '/'
|   |   |     | | |     |-ImplicitCastExpr 0x7fffd839ce00 <col:31, col:43> 'float' <IntegralToFloating>
|   |   |     | | |     | `-ImplicitCastExpr 0x7fffd839cde8 <col:31, col:43> 'int' <IntegralCast>
|   |   |     | | |     |   `-CallExpr 0x7fffd839cd80 <col:31, col:43> 'stbtt_int16':'short'
|   |   |     | | |     |     |-ImplicitCastExpr 0x7fffd839cd68 <col:31> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |     | | |     |     | `-DeclRefExpr 0x7fffd839cd18 <col:31> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |   |     | | |     |     `-ImplicitCastExpr 0x7fffd839cdb0 <col:39> 'stbtt_uint8 *' <LValueToRValue>
|   |   |     | | |     |       `-DeclRefExpr 0x7fffd839cd40 <col:39> 'stbtt_uint8 *' lvalue Var 0x7fffd839a878 'comp' 'stbtt_uint8 *'
|   |   |     | | |     `-FloatingLiteral 0x7fffd839cdc8 <col:45> 'float' 1.638400e+04
|   |   |     | | |-CompoundAssignOperator 0x7fffd839ced8 <col:55, col:61> 'stbtt_uint8 *' '+=' ComputeLHSTy='stbtt_uint8 *' ComputeResultTy='stbtt_uint8 *'
|   |   |     | | | |-DeclRefExpr 0x7fffd839ce90 <col:55> 'stbtt_uint8 *' lvalue Var 0x7fffd839a878 'comp' 'stbtt_uint8 *'
|   |   |     | | | `-IntegerLiteral 0x7fffd839ceb8 <col:61> 'int' 2
|   |   |     | | `-BinaryOperator 0x7fffd839d080 <line:1837:13, col:31> 'float' '='
|   |   |     | |   |-ArraySubscriptExpr 0x7fffd839cf70 <col:13, col:18> 'float' lvalue
|   |   |     | |   | |-ImplicitCastExpr 0x7fffd839cf58 <col:13> 'float *' <ArrayToPointerDecay>
|   |   |     | |   | | `-DeclRefExpr 0x7fffd839cf10 <col:13> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     | |   | `-IntegerLiteral 0x7fffd839cf38 <col:17> 'int' 1
|   |   |     | |   `-BinaryOperator 0x7fffd839d058 <col:22, col:31> 'float' '='
|   |   |     | |     |-ArraySubscriptExpr 0x7fffd839cff8 <col:22, col:27> 'float' lvalue
|   |   |     | |     | |-ImplicitCastExpr 0x7fffd839cfe0 <col:22> 'float *' <ArrayToPointerDecay>
|   |   |     | |     | | `-DeclRefExpr 0x7fffd839cf98 <col:22> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     | |     | `-IntegerLiteral 0x7fffd839cfc0 <col:26> 'int' 2
|   |   |     | |     `-ImplicitCastExpr 0x7fffd839d040 <col:31> 'float' <IntegralToFloating>
|   |   |     | |       `-IntegerLiteral 0x7fffd839d020 <col:31> 'int' 0
|   |   |     | `-IfStmt 0x7fffd839e770 <line:1838:17, line:1847:10>
|   |   |     |   |-<<<NULL>>>
|   |   |     |   |-<<<NULL>>>
|   |   |     |   |-BinaryOperator 0x7fffd839d1b0 <line:1838:21, col:34> 'int' '&'
|   |   |     |   | |-ImplicitCastExpr 0x7fffd839d198 <col:21> 'int' <IntegralCast>
|   |   |     |   | | `-ImplicitCastExpr 0x7fffd839d180 <col:21> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |     |   | |   `-DeclRefExpr 0x7fffd839d0d0 <col:21> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd839ab28 'flags' 'stbtt_uint16':'unsigned short'
|   |   |     |   | `-ParenExpr 0x7fffd839d160 <col:29, col:34> 'int'
|   |   |     |   |   `-BinaryOperator 0x7fffd839d138 <col:30, col:33> 'int' '<<'
|   |   |     |   |     |-IntegerLiteral 0x7fffd839d0f8 <col:30> 'int' 1
|   |   |     |   |     `-IntegerLiteral 0x7fffd839d118 <col:33> 'int' 6
|   |   |     |   |-CompoundStmt 0x7fffd839d820 <col:37, line:1842:10>
|   |   |     |   | |-BinaryOperator 0x7fffd839d388 <line:1839:13, col:36> 'float' '='
|   |   |     |   | | |-ArraySubscriptExpr 0x7fffd839d238 <col:13, col:18> 'float' lvalue
|   |   |     |   | | | |-ImplicitCastExpr 0x7fffd839d220 <col:13> 'float *' <ArrayToPointerDecay>
|   |   |     |   | | | | `-DeclRefExpr 0x7fffd839d1d8 <col:13> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     |   | | | `-IntegerLiteral 0x7fffd839d200 <col:17> 'int' 0
|   |   |     |   | | `-BinaryOperator 0x7fffd839d360 <col:22, col:36> 'float' '/'
|   |   |     |   | |   |-ImplicitCastExpr 0x7fffd839d348 <col:22, col:34> 'float' <IntegralToFloating>
|   |   |     |   | |   | `-ImplicitCastExpr 0x7fffd839d330 <col:22, col:34> 'int' <IntegralCast>
|   |   |     |   | |   |   `-CallExpr 0x7fffd839d2c8 <col:22, col:34> 'stbtt_int16':'short'
|   |   |     |   | |   |     |-ImplicitCastExpr 0x7fffd839d2b0 <col:22> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |     |   | |   |     | `-DeclRefExpr 0x7fffd839d260 <col:22> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |   |     |   | |   |     `-ImplicitCastExpr 0x7fffd839d2f8 <col:30> 'stbtt_uint8 *' <LValueToRValue>
|   |   |     |   | |   |       `-DeclRefExpr 0x7fffd839d288 <col:30> 'stbtt_uint8 *' lvalue Var 0x7fffd839a878 'comp' 'stbtt_uint8 *'
|   |   |     |   | |   `-FloatingLiteral 0x7fffd839d310 <col:36> 'float' 1.638400e+04
|   |   |     |   | |-CompoundAssignOperator 0x7fffd839d3f8 <col:46, col:52> 'stbtt_uint8 *' '+=' ComputeLHSTy='stbtt_uint8 *' ComputeResultTy='stbtt_uint8 *'
|   |   |     |   | | |-DeclRefExpr 0x7fffd839d3b0 <col:46> 'stbtt_uint8 *' lvalue Var 0x7fffd839a878 'comp' 'stbtt_uint8 *'
|   |   |     |   | | `-IntegerLiteral 0x7fffd839d3d8 <col:52> 'int' 2
|   |   |     |   | |-BinaryOperator 0x7fffd839d5a0 <line:1840:13, col:31> 'float' '='
|   |   |     |   | | |-ArraySubscriptExpr 0x7fffd839d490 <col:13, col:18> 'float' lvalue
|   |   |     |   | | | |-ImplicitCastExpr 0x7fffd839d478 <col:13> 'float *' <ArrayToPointerDecay>
|   |   |     |   | | | | `-DeclRefExpr 0x7fffd839d430 <col:13> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     |   | | | `-IntegerLiteral 0x7fffd839d458 <col:17> 'int' 1
|   |   |     |   | | `-BinaryOperator 0x7fffd839d578 <col:22, col:31> 'float' '='
|   |   |     |   | |   |-ArraySubscriptExpr 0x7fffd839d518 <col:22, col:27> 'float' lvalue
|   |   |     |   | |   | |-ImplicitCastExpr 0x7fffd839d500 <col:22> 'float *' <ArrayToPointerDecay>
|   |   |     |   | |   | | `-DeclRefExpr 0x7fffd839d4b8 <col:22> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     |   | |   | `-IntegerLiteral 0x7fffd839d4e0 <col:26> 'int' 2
|   |   |     |   | |   `-ImplicitCastExpr 0x7fffd839d560 <col:31> 'float' <IntegralToFloating>
|   |   |     |   | |     `-IntegerLiteral 0x7fffd839d540 <col:31> 'int' 0
|   |   |     |   | |-BinaryOperator 0x7fffd839d778 <line:1841:13, col:36> 'float' '='
|   |   |     |   | | |-ArraySubscriptExpr 0x7fffd839d628 <col:13, col:18> 'float' lvalue
|   |   |     |   | | | |-ImplicitCastExpr 0x7fffd839d610 <col:13> 'float *' <ArrayToPointerDecay>
|   |   |     |   | | | | `-DeclRefExpr 0x7fffd839d5c8 <col:13> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     |   | | | `-IntegerLiteral 0x7fffd839d5f0 <col:17> 'int' 3
|   |   |     |   | | `-BinaryOperator 0x7fffd839d750 <col:22, col:36> 'float' '/'
|   |   |     |   | |   |-ImplicitCastExpr 0x7fffd839d738 <col:22, col:34> 'float' <IntegralToFloating>
|   |   |     |   | |   | `-ImplicitCastExpr 0x7fffd839d720 <col:22, col:34> 'int' <IntegralCast>
|   |   |     |   | |   |   `-CallExpr 0x7fffd839d6b8 <col:22, col:34> 'stbtt_int16':'short'
|   |   |     |   | |   |     |-ImplicitCastExpr 0x7fffd839d6a0 <col:22> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |     |   | |   |     | `-DeclRefExpr 0x7fffd839d650 <col:22> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |   |     |   | |   |     `-ImplicitCastExpr 0x7fffd839d6e8 <col:30> 'stbtt_uint8 *' <LValueToRValue>
|   |   |     |   | |   |       `-DeclRefExpr 0x7fffd839d678 <col:30> 'stbtt_uint8 *' lvalue Var 0x7fffd839a878 'comp' 'stbtt_uint8 *'
|   |   |     |   | |   `-FloatingLiteral 0x7fffd839d700 <col:36> 'float' 1.638400e+04
|   |   |     |   | `-CompoundAssignOperator 0x7fffd839d7e8 <col:46, col:52> 'stbtt_uint8 *' '+=' ComputeLHSTy='stbtt_uint8 *' ComputeResultTy='stbtt_uint8 *'
|   |   |     |   |   |-DeclRefExpr 0x7fffd839d7a0 <col:46> 'stbtt_uint8 *' lvalue Var 0x7fffd839a878 'comp' 'stbtt_uint8 *'
|   |   |     |   |   `-IntegerLiteral 0x7fffd839d7c8 <col:52> 'int' 2
|   |   |     |   `-IfStmt 0x7fffd839e738 <line:1842:17, line:1847:10>
|   |   |     |     |-<<<NULL>>>
|   |   |     |     |-<<<NULL>>>
|   |   |     |     |-BinaryOperator 0x7fffd839d938 <line:1842:21, col:34> 'int' '&'
|   |   |     |     | |-ImplicitCastExpr 0x7fffd839d920 <col:21> 'int' <IntegralCast>
|   |   |     |     | | `-ImplicitCastExpr 0x7fffd839d908 <col:21> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |     |     | |   `-DeclRefExpr 0x7fffd839d858 <col:21> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd839ab28 'flags' 'stbtt_uint16':'unsigned short'
|   |   |     |     | `-ParenExpr 0x7fffd839d8e8 <col:29, col:34> 'int'
|   |   |     |     |   `-BinaryOperator 0x7fffd839d8c0 <col:30, col:33> 'int' '<<'
|   |   |     |     |     |-IntegerLiteral 0x7fffd839d880 <col:30> 'int' 1
|   |   |     |     |     `-IntegerLiteral 0x7fffd839d8a0 <col:33> 'int' 7
|   |   |     |     |-CompoundStmt 0x7fffd839e6e8 <col:37, line:1847:10>
|   |   |     |     | |-BinaryOperator 0x7fffd839db10 <line:1843:13, col:36> 'float' '='
|   |   |     |     | | |-ArraySubscriptExpr 0x7fffd839d9c0 <col:13, col:18> 'float' lvalue
|   |   |     |     | | | |-ImplicitCastExpr 0x7fffd839d9a8 <col:13> 'float *' <ArrayToPointerDecay>
|   |   |     |     | | | | `-DeclRefExpr 0x7fffd839d960 <col:13> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     |     | | | `-IntegerLiteral 0x7fffd839d988 <col:17> 'int' 0
|   |   |     |     | | `-BinaryOperator 0x7fffd839dae8 <col:22, col:36> 'float' '/'
|   |   |     |     | |   |-ImplicitCastExpr 0x7fffd839dad0 <col:22, col:34> 'float' <IntegralToFloating>
|   |   |     |     | |   | `-ImplicitCastExpr 0x7fffd839dab8 <col:22, col:34> 'int' <IntegralCast>
|   |   |     |     | |   |   `-CallExpr 0x7fffd839da50 <col:22, col:34> 'stbtt_int16':'short'
|   |   |     |     | |   |     |-ImplicitCastExpr 0x7fffd839da38 <col:22> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |     |     | |   |     | `-DeclRefExpr 0x7fffd839d9e8 <col:22> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |   |     |     | |   |     `-ImplicitCastExpr 0x7fffd839da80 <col:30> 'stbtt_uint8 *' <LValueToRValue>
|   |   |     |     | |   |       `-DeclRefExpr 0x7fffd839da10 <col:30> 'stbtt_uint8 *' lvalue Var 0x7fffd839a878 'comp' 'stbtt_uint8 *'
|   |   |     |     | |   `-FloatingLiteral 0x7fffd839da98 <col:36> 'float' 1.638400e+04
|   |   |     |     | |-CompoundAssignOperator 0x7fffd839dfa8 <col:46, col:52> 'stbtt_uint8 *' '+=' ComputeLHSTy='stbtt_uint8 *' ComputeResultTy='stbtt_uint8 *'
|   |   |     |     | | |-DeclRefExpr 0x7fffd839df60 <col:46> 'stbtt_uint8 *' lvalue Var 0x7fffd839a878 'comp' 'stbtt_uint8 *'
|   |   |     |     | | `-IntegerLiteral 0x7fffd839df88 <col:52> 'int' 2
|   |   |     |     | |-BinaryOperator 0x7fffd839e190 <line:1844:13, col:36> 'float' '='
|   |   |     |     | | |-ArraySubscriptExpr 0x7fffd839e040 <col:13, col:18> 'float' lvalue
|   |   |     |     | | | |-ImplicitCastExpr 0x7fffd839e028 <col:13> 'float *' <ArrayToPointerDecay>
|   |   |     |     | | | | `-DeclRefExpr 0x7fffd839dfe0 <col:13> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     |     | | | `-IntegerLiteral 0x7fffd839e008 <col:17> 'int' 1
|   |   |     |     | | `-BinaryOperator 0x7fffd839e168 <col:22, col:36> 'float' '/'
|   |   |     |     | |   |-ImplicitCastExpr 0x7fffd839e150 <col:22, col:34> 'float' <IntegralToFloating>
|   |   |     |     | |   | `-ImplicitCastExpr 0x7fffd839e138 <col:22, col:34> 'int' <IntegralCast>
|   |   |     |     | |   |   `-CallExpr 0x7fffd839e0d0 <col:22, col:34> 'stbtt_int16':'short'
|   |   |     |     | |   |     |-ImplicitCastExpr 0x7fffd839e0b8 <col:22> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |     |     | |   |     | `-DeclRefExpr 0x7fffd839e068 <col:22> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |   |     |     | |   |     `-ImplicitCastExpr 0x7fffd839e100 <col:30> 'stbtt_uint8 *' <LValueToRValue>
|   |   |     |     | |   |       `-DeclRefExpr 0x7fffd839e090 <col:30> 'stbtt_uint8 *' lvalue Var 0x7fffd839a878 'comp' 'stbtt_uint8 *'
|   |   |     |     | |   `-FloatingLiteral 0x7fffd839e118 <col:36> 'float' 1.638400e+04
|   |   |     |     | |-CompoundAssignOperator 0x7fffd839e200 <col:46, col:52> 'stbtt_uint8 *' '+=' ComputeLHSTy='stbtt_uint8 *' ComputeResultTy='stbtt_uint8 *'
|   |   |     |     | | |-DeclRefExpr 0x7fffd839e1b8 <col:46> 'stbtt_uint8 *' lvalue Var 0x7fffd839a878 'comp' 'stbtt_uint8 *'
|   |   |     |     | | `-IntegerLiteral 0x7fffd839e1e0 <col:52> 'int' 2
|   |   |     |     | |-BinaryOperator 0x7fffd839e3e8 <line:1845:13, col:36> 'float' '='
|   |   |     |     | | |-ArraySubscriptExpr 0x7fffd839e298 <col:13, col:18> 'float' lvalue
|   |   |     |     | | | |-ImplicitCastExpr 0x7fffd839e280 <col:13> 'float *' <ArrayToPointerDecay>
|   |   |     |     | | | | `-DeclRefExpr 0x7fffd839e238 <col:13> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     |     | | | `-IntegerLiteral 0x7fffd839e260 <col:17> 'int' 2
|   |   |     |     | | `-BinaryOperator 0x7fffd839e3c0 <col:22, col:36> 'float' '/'
|   |   |     |     | |   |-ImplicitCastExpr 0x7fffd839e3a8 <col:22, col:34> 'float' <IntegralToFloating>
|   |   |     |     | |   | `-ImplicitCastExpr 0x7fffd839e390 <col:22, col:34> 'int' <IntegralCast>
|   |   |     |     | |   |   `-CallExpr 0x7fffd839e328 <col:22, col:34> 'stbtt_int16':'short'
|   |   |     |     | |   |     |-ImplicitCastExpr 0x7fffd839e310 <col:22> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |     |     | |   |     | `-DeclRefExpr 0x7fffd839e2c0 <col:22> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |   |     |     | |   |     `-ImplicitCastExpr 0x7fffd839e358 <col:30> 'stbtt_uint8 *' <LValueToRValue>
|   |   |     |     | |   |       `-DeclRefExpr 0x7fffd839e2e8 <col:30> 'stbtt_uint8 *' lvalue Var 0x7fffd839a878 'comp' 'stbtt_uint8 *'
|   |   |     |     | |   `-FloatingLiteral 0x7fffd839e370 <col:36> 'float' 1.638400e+04
|   |   |     |     | |-CompoundAssignOperator 0x7fffd839e458 <col:46, col:52> 'stbtt_uint8 *' '+=' ComputeLHSTy='stbtt_uint8 *' ComputeResultTy='stbtt_uint8 *'
|   |   |     |     | | |-DeclRefExpr 0x7fffd839e410 <col:46> 'stbtt_uint8 *' lvalue Var 0x7fffd839a878 'comp' 'stbtt_uint8 *'
|   |   |     |     | | `-IntegerLiteral 0x7fffd839e438 <col:52> 'int' 2
|   |   |     |     | |-BinaryOperator 0x7fffd839e640 <line:1846:13, col:36> 'float' '='
|   |   |     |     | | |-ArraySubscriptExpr 0x7fffd839e4f0 <col:13, col:18> 'float' lvalue
|   |   |     |     | | | |-ImplicitCastExpr 0x7fffd839e4d8 <col:13> 'float *' <ArrayToPointerDecay>
|   |   |     |     | | | | `-DeclRefExpr 0x7fffd839e490 <col:13> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     |     | | | `-IntegerLiteral 0x7fffd839e4b8 <col:17> 'int' 3
|   |   |     |     | | `-BinaryOperator 0x7fffd839e618 <col:22, col:36> 'float' '/'
|   |   |     |     | |   |-ImplicitCastExpr 0x7fffd839e600 <col:22, col:34> 'float' <IntegralToFloating>
|   |   |     |     | |   | `-ImplicitCastExpr 0x7fffd839e5e8 <col:22, col:34> 'int' <IntegralCast>
|   |   |     |     | |   |   `-CallExpr 0x7fffd839e580 <col:22, col:34> 'stbtt_int16':'short'
|   |   |     |     | |   |     |-ImplicitCastExpr 0x7fffd839e568 <col:22> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |     |     | |   |     | `-DeclRefExpr 0x7fffd839e518 <col:22> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |   |     |     | |   |     `-ImplicitCastExpr 0x7fffd839e5b0 <col:30> 'stbtt_uint8 *' <LValueToRValue>
|   |   |     |     | |   |       `-DeclRefExpr 0x7fffd839e540 <col:30> 'stbtt_uint8 *' lvalue Var 0x7fffd839a878 'comp' 'stbtt_uint8 *'
|   |   |     |     | |   `-FloatingLiteral 0x7fffd839e5c8 <col:36> 'float' 1.638400e+04
|   |   |     |     | `-CompoundAssignOperator 0x7fffd839e6b0 <col:46, col:52> 'stbtt_uint8 *' '+=' ComputeLHSTy='stbtt_uint8 *' ComputeResultTy='stbtt_uint8 *'
|   |   |     |     |   |-DeclRefExpr 0x7fffd839e668 <col:46> 'stbtt_uint8 *' lvalue Var 0x7fffd839a878 'comp' 'stbtt_uint8 *'
|   |   |     |     |   `-IntegerLiteral 0x7fffd839e690 <col:52> 'int' 2
|   |   |     |     `-<<<NULL>>>
|   |   |     |-BinaryOperator 0x7fffd839ebf8 <line:1850:10, line:444:37> 'float' '='
|   |   |     | |-DeclRefExpr 0x7fffd839e7e0 <line:1850:10> 'float' lvalue Var 0x7fffd839b218 'm' 'float'
|   |   |     | `-CStyleCastExpr 0x7fffd839ebd0 <col:14, line:444:37> 'float' <FloatingCast>
|   |   |     |   `-CallExpr 0x7fffd839eb70 <col:31, col:37> 'double'
|   |   |     |     |-ImplicitCastExpr 0x7fffd839eb58 <col:31> 'double (*)(double)' <FunctionToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x7fffd839e808 <col:31> 'double (double)' Function 0x7fffd828e9f0 'sqrt' 'double (double)'
|   |   |     |     `-ImplicitCastExpr 0x7fffd839eba0 <line:1850:33, col:61> 'double' <FloatingCast>
|   |   |     |       `-BinaryOperator 0x7fffd839eb00 <col:33, col:61> 'float' '+'
|   |   |     |         |-BinaryOperator 0x7fffd839e970 <col:33, col:45> 'float' '*'
|   |   |     |         | |-ImplicitCastExpr 0x7fffd839e940 <col:33, col:38> 'float' <LValueToRValue>
|   |   |     |         | | `-ArraySubscriptExpr 0x7fffd839e890 <col:33, col:38> 'float' lvalue
|   |   |     |         | |   |-ImplicitCastExpr 0x7fffd839e878 <col:33> 'float *' <ArrayToPointerDecay>
|   |   |     |         | |   | `-DeclRefExpr 0x7fffd839e830 <col:33> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     |         | |   `-IntegerLiteral 0x7fffd839e858 <col:37> 'int' 0
|   |   |     |         | `-ImplicitCastExpr 0x7fffd839e958 <col:40, col:45> 'float' <LValueToRValue>
|   |   |     |         |   `-ArraySubscriptExpr 0x7fffd839e918 <col:40, col:45> 'float' lvalue
|   |   |     |         |     |-ImplicitCastExpr 0x7fffd839e900 <col:40> 'float *' <ArrayToPointerDecay>
|   |   |     |         |     | `-DeclRefExpr 0x7fffd839e8b8 <col:40> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     |         |     `-IntegerLiteral 0x7fffd839e8e0 <col:44> 'int' 0
|   |   |     |         `-BinaryOperator 0x7fffd839ead8 <col:49, col:61> 'float' '*'
|   |   |     |           |-ImplicitCastExpr 0x7fffd839eaa8 <col:49, col:54> 'float' <LValueToRValue>
|   |   |     |           | `-ArraySubscriptExpr 0x7fffd839e9f8 <col:49, col:54> 'float' lvalue
|   |   |     |           |   |-ImplicitCastExpr 0x7fffd839e9e0 <col:49> 'float *' <ArrayToPointerDecay>
|   |   |     |           |   | `-DeclRefExpr 0x7fffd839e998 <col:49> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     |           |   `-IntegerLiteral 0x7fffd839e9c0 <col:53> 'int' 1
|   |   |     |           `-ImplicitCastExpr 0x7fffd839eac0 <col:56, col:61> 'float' <LValueToRValue>
|   |   |     |             `-ArraySubscriptExpr 0x7fffd839ea80 <col:56, col:61> 'float' lvalue
|   |   |     |               |-ImplicitCastExpr 0x7fffd839ea68 <col:56> 'float *' <ArrayToPointerDecay>
|   |   |     |               | `-DeclRefExpr 0x7fffd839ea20 <col:56> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     |               `-IntegerLiteral 0x7fffd839ea48 <col:60> 'int' 1
|   |   |     |-BinaryOperator 0x7fffd839f008 <line:1851:10, line:444:37> 'float' '='
|   |   |     | |-DeclRefExpr 0x7fffd839ec20 <line:1851:10> 'float' lvalue Var 0x7fffd839b290 'n' 'float'
|   |   |     | `-CStyleCastExpr 0x7fffd839efe0 <col:14, line:444:37> 'float' <FloatingCast>
|   |   |     |   `-CallExpr 0x7fffd839ef80 <col:31, col:37> 'double'
|   |   |     |     |-ImplicitCastExpr 0x7fffd839ef68 <col:31> 'double (*)(double)' <FunctionToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x7fffd839ec48 <col:31> 'double (double)' Function 0x7fffd828e9f0 'sqrt' 'double (double)'
|   |   |     |     `-ImplicitCastExpr 0x7fffd839efb0 <line:1851:33, col:61> 'double' <FloatingCast>
|   |   |     |       `-BinaryOperator 0x7fffd839ef40 <col:33, col:61> 'float' '+'
|   |   |     |         |-BinaryOperator 0x7fffd839edb0 <col:33, col:45> 'float' '*'
|   |   |     |         | |-ImplicitCastExpr 0x7fffd839ed80 <col:33, col:38> 'float' <LValueToRValue>
|   |   |     |         | | `-ArraySubscriptExpr 0x7fffd839ecd0 <col:33, col:38> 'float' lvalue
|   |   |     |         | |   |-ImplicitCastExpr 0x7fffd839ecb8 <col:33> 'float *' <ArrayToPointerDecay>
|   |   |     |         | |   | `-DeclRefExpr 0x7fffd839ec70 <col:33> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     |         | |   `-IntegerLiteral 0x7fffd839ec98 <col:37> 'int' 2
|   |   |     |         | `-ImplicitCastExpr 0x7fffd839ed98 <col:40, col:45> 'float' <LValueToRValue>
|   |   |     |         |   `-ArraySubscriptExpr 0x7fffd839ed58 <col:40, col:45> 'float' lvalue
|   |   |     |         |     |-ImplicitCastExpr 0x7fffd839ed40 <col:40> 'float *' <ArrayToPointerDecay>
|   |   |     |         |     | `-DeclRefExpr 0x7fffd839ecf8 <col:40> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     |         |     `-IntegerLiteral 0x7fffd839ed20 <col:44> 'int' 2
|   |   |     |         `-BinaryOperator 0x7fffd839ef18 <col:49, col:61> 'float' '*'
|   |   |     |           |-ImplicitCastExpr 0x7fffd839eee8 <col:49, col:54> 'float' <LValueToRValue>
|   |   |     |           | `-ArraySubscriptExpr 0x7fffd839ee38 <col:49, col:54> 'float' lvalue
|   |   |     |           |   |-ImplicitCastExpr 0x7fffd839ee20 <col:49> 'float *' <ArrayToPointerDecay>
|   |   |     |           |   | `-DeclRefExpr 0x7fffd839edd8 <col:49> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     |           |   `-IntegerLiteral 0x7fffd839ee00 <col:53> 'int' 3
|   |   |     |           `-ImplicitCastExpr 0x7fffd839ef00 <col:56, col:61> 'float' <LValueToRValue>
|   |   |     |             `-ArraySubscriptExpr 0x7fffd839eec0 <col:56, col:61> 'float' lvalue
|   |   |     |               |-ImplicitCastExpr 0x7fffd839eea8 <col:56> 'float *' <ArrayToPointerDecay>
|   |   |     |               | `-DeclRefExpr 0x7fffd839ee60 <col:56> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     |               `-IntegerLiteral 0x7fffd839ee88 <col:60> 'int' 3
|   |   |     |-BinaryOperator 0x7fffd839f1b8 <line:1854:10, col:70> 'int' '='
|   |   |     | |-DeclRefExpr 0x7fffd839f030 <col:10> 'int' lvalue Var 0x7fffd839ac40 'comp_num_verts' 'int'
|   |   |     | `-CallExpr 0x7fffd839f130 <col:27, col:70> 'int'
|   |   |     |   |-ImplicitCastExpr 0x7fffd839f118 <col:27> 'int (*)(const stbtt_fontinfo *, int, stbtt_vertex **)' <FunctionToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x7fffd839f058 <col:27> 'int (const stbtt_fontinfo *, int, stbtt_vertex **)' Function 0x7fffd83522e0 'stbtt_GetGlyphShape' 'int (const stbtt_fontinfo *, int, stbtt_vertex **)'
|   |   |     |   |-ImplicitCastExpr 0x7fffd839f170 <col:47> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   |     |   | `-DeclRefExpr 0x7fffd839f080 <col:47> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd8392150 'info' 'const stbtt_fontinfo *'
|   |   |     |   |-ImplicitCastExpr 0x7fffd839f1a0 <col:53> 'int' <IntegralCast>
|   |   |     |   | `-ImplicitCastExpr 0x7fffd839f188 <col:53> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |     |   |   `-DeclRefExpr 0x7fffd839f0a8 <col:53> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd839ab98 'gidx' 'stbtt_uint16':'unsigned short'
|   |   |     |   `-UnaryOperator 0x7fffd839f0f8 <col:59, col:60> 'stbtt_vertex **' prefix '&'
|   |   |     |     `-DeclRefExpr 0x7fffd839f0d0 <col:60> 'stbtt_vertex *' lvalue Var 0x7fffd839ad78 'comp_verts' 'stbtt_vertex *'
|   |   |     |-IfStmt 0x7fffd83a24d8 <line:1855:10, line:1880:10>
|   |   |     | |-<<<NULL>>>
|   |   |     | |-<<<NULL>>>
|   |   |     | |-BinaryOperator 0x7fffd839f240 <line:1855:14, col:31> 'int' '>'
|   |   |     | | |-ImplicitCastExpr 0x7fffd839f228 <col:14> 'int' <LValueToRValue>
|   |   |     | | | `-DeclRefExpr 0x7fffd839f1e0 <col:14> 'int' lvalue Var 0x7fffd839ac40 'comp_num_verts' 'int'
|   |   |     | | `-IntegerLiteral 0x7fffd839f208 <col:31> 'int' 0
|   |   |     | |-CompoundStmt 0x7fffd83a2480 <col:34, line:1880:10>
|   |   |     | | |-ForStmt 0x7fffd83a0ea0 <line:1857:13, line:1866:13>
|   |   |     | | | |-BinaryOperator 0x7fffd839f2b0 <line:1857:18, col:22> 'int' '='
|   |   |     | | | | |-DeclRefExpr 0x7fffd839f268 <col:18> 'int' lvalue Var 0x7fffd839acd8 'i' 'int'
|   |   |     | | | | `-IntegerLiteral 0x7fffd839f290 <col:22> 'int' 0
|   |   |     | | | |-<<<NULL>>>
|   |   |     | | | |-BinaryOperator 0x7fffd839f358 <col:25, col:29> 'int' '<'
|   |   |     | | | | |-ImplicitCastExpr 0x7fffd839f328 <col:25> 'int' <LValueToRValue>
|   |   |     | | | | | `-DeclRefExpr 0x7fffd839f2d8 <col:25> 'int' lvalue Var 0x7fffd839acd8 'i' 'int'
|   |   |     | | | | `-ImplicitCastExpr 0x7fffd839f340 <col:29> 'int' <LValueToRValue>
|   |   |     | | | |   `-DeclRefExpr 0x7fffd839f300 <col:29> 'int' lvalue Var 0x7fffd839ac40 'comp_num_verts' 'int'
|   |   |     | | | |-UnaryOperator 0x7fffd839f3a8 <col:45, col:47> 'int' prefix '++'
|   |   |     | | | | `-DeclRefExpr 0x7fffd839f380 <col:47> 'int' lvalue Var 0x7fffd839acd8 'i' 'int'
|   |   |     | | | `-CompoundStmt 0x7fffd83a0e40 <col:50, line:1866:13>
|   |   |     | | |   |-DeclStmt 0x7fffd839f500 <line:1858:16, col:48>
|   |   |     | | |   | `-VarDecl 0x7fffd839f3d8 <col:16, col:47> col:30 used v 'stbtt_vertex *' cinit
|   |   |     | | |   |   `-UnaryOperator 0x7fffd839f4e0 <col:34, col:47> 'stbtt_vertex *' prefix '&'
|   |   |     | | |   |     `-ArraySubscriptExpr 0x7fffd839f4b8 <col:35, col:47> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   |     | | |   |       |-ImplicitCastExpr 0x7fffd839f488 <col:35> 'stbtt_vertex *' <LValueToRValue>
|   |   |     | | |   |       | `-DeclRefExpr 0x7fffd839f438 <col:35> 'stbtt_vertex *' lvalue Var 0x7fffd839ad78 'comp_verts' 'stbtt_vertex *'
|   |   |     | | |   |       `-ImplicitCastExpr 0x7fffd839f4a0 <col:46> 'int' <LValueToRValue>
|   |   |     | | |   |         `-DeclRefExpr 0x7fffd839f460 <col:46> 'int' lvalue Var 0x7fffd839acd8 'i' 'int'
|   |   |     | | |   |-DeclStmt 0x7fffd839f620 <line:830:27, line:1859:37>
|   |   |     | | |   | |-VarDecl 0x7fffd839f530 <line:830:27, line:1859:34> col:34 used x 'short'
|   |   |     | | |   | `-VarDecl 0x7fffd839f5a8 <line:830:27, line:1859:36> col:36 used y 'short'
|   |   |     | | |   |-BinaryOperator 0x7fffd839f6f0 <line:1860:16, col:21> 'short' '='
|   |   |     | | |   | |-DeclRefExpr 0x7fffd839f638 <col:16> 'short' lvalue Var 0x7fffd839f530 'x' 'short'
|   |   |     | | |   | `-ImplicitCastExpr 0x7fffd839f6d8 <col:18, col:21> 'short' <LValueToRValue>
|   |   |     | | |   |   `-MemberExpr 0x7fffd839f6a0 <col:18, col:21> 'short' lvalue ->x 0x7fffd83517d8
|   |   |     | | |   |     `-ImplicitCastExpr 0x7fffd839f688 <col:18> 'stbtt_vertex *' <LValueToRValue>
|   |   |     | | |   |       `-DeclRefExpr 0x7fffd839f660 <col:18> 'stbtt_vertex *' lvalue Var 0x7fffd839f3d8 'v' 'stbtt_vertex *'
|   |   |     | | |   |-BinaryOperator 0x7fffd839f7d0 <col:24, col:29> 'short' '='
|   |   |     | | |   | |-DeclRefExpr 0x7fffd839f718 <col:24> 'short' lvalue Var 0x7fffd839f5a8 'y' 'short'
|   |   |     | | |   | `-ImplicitCastExpr 0x7fffd839f7b8 <col:26, col:29> 'short' <LValueToRValue>
|   |   |     | | |   |   `-MemberExpr 0x7fffd839f780 <col:26, col:29> 'short' lvalue ->y 0x7fffd8351838
|   |   |     | | |   |     `-ImplicitCastExpr 0x7fffd839f768 <col:26> 'stbtt_vertex *' <LValueToRValue>
|   |   |     | | |   |       `-DeclRefExpr 0x7fffd839f740 <col:26> 'stbtt_vertex *' lvalue Var 0x7fffd839f3d8 'v' 'stbtt_vertex *'
|   |   |     | | |   |-BinaryOperator 0x7fffd839fce8 <line:1861:16, col:77> 'short' '='
|   |   |     | | |   | |-MemberExpr 0x7fffd839f838 <col:16, col:19> 'short' lvalue ->x 0x7fffd83517d8
|   |   |     | | |   | | `-ImplicitCastExpr 0x7fffd839f820 <col:16> 'stbtt_vertex *' <LValueToRValue>
|   |   |     | | |   | |   `-DeclRefExpr 0x7fffd839f7f8 <col:16> 'stbtt_vertex *' lvalue Var 0x7fffd839f3d8 'v' 'stbtt_vertex *'
|   |   |     | | |   | `-CStyleCastExpr 0x7fffd839fcc0 <col:23, col:77> 'short' <FloatingToIntegral>
|   |   |     | | |   |   `-ParenExpr 0x7fffd839fca0 <col:42, col:77> 'float'
|   |   |     | | |   |     `-BinaryOperator 0x7fffd839fc30 <col:43, col:76> 'float' '*'
|   |   |     | | |   |       |-ImplicitCastExpr 0x7fffd839fc18 <col:43> 'float' <LValueToRValue>
|   |   |     | | |   |       | `-DeclRefExpr 0x7fffd839f870 <col:43> 'float' lvalue Var 0x7fffd839b218 'm' 'float'
|   |   |     | | |   |       `-ParenExpr 0x7fffd839fbf8 <col:47, col:76> 'float'
|   |   |     | | |   |         `-BinaryOperator 0x7fffd839fbd0 <col:48, col:75> 'float' '+'
|   |   |     | | |   |           |-BinaryOperator 0x7fffd839fb08 <col:48, col:66> 'float' '+'
|   |   |     | | |   |           | |-BinaryOperator 0x7fffd839f9a8 <col:48, col:55> 'float' '*'
|   |   |     | | |   |           | | |-ImplicitCastExpr 0x7fffd839f948 <col:48, col:53> 'float' <LValueToRValue>
|   |   |     | | |   |           | | | `-ArraySubscriptExpr 0x7fffd839f8f8 <col:48, col:53> 'float' lvalue
|   |   |     | | |   |           | | |   |-ImplicitCastExpr 0x7fffd839f8e0 <col:48> 'float *' <ArrayToPointerDecay>
|   |   |     | | |   |           | | |   | `-DeclRefExpr 0x7fffd839f898 <col:48> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     | | |   |           | | |   `-IntegerLiteral 0x7fffd839f8c0 <col:52> 'int' 0
|   |   |     | | |   |           | | `-ImplicitCastExpr 0x7fffd839f990 <col:55> 'float' <IntegralToFloating>
|   |   |     | | |   |           | |   `-ImplicitCastExpr 0x7fffd839f978 <col:55> 'int' <IntegralCast>
|   |   |     | | |   |           | |     `-ImplicitCastExpr 0x7fffd839f960 <col:55> 'short' <LValueToRValue>
|   |   |     | | |   |           | |       `-DeclRefExpr 0x7fffd839f920 <col:55> 'short' lvalue Var 0x7fffd839f530 'x' 'short'
|   |   |     | | |   |           | `-BinaryOperator 0x7fffd839fae0 <col:59, col:66> 'float' '*'
|   |   |     | | |   |           |   |-ImplicitCastExpr 0x7fffd839fa80 <col:59, col:64> 'float' <LValueToRValue>
|   |   |     | | |   |           |   | `-ArraySubscriptExpr 0x7fffd839fa30 <col:59, col:64> 'float' lvalue
|   |   |     | | |   |           |   |   |-ImplicitCastExpr 0x7fffd839fa18 <col:59> 'float *' <ArrayToPointerDecay>
|   |   |     | | |   |           |   |   | `-DeclRefExpr 0x7fffd839f9d0 <col:59> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     | | |   |           |   |   `-IntegerLiteral 0x7fffd839f9f8 <col:63> 'int' 2
|   |   |     | | |   |           |   `-ImplicitCastExpr 0x7fffd839fac8 <col:66> 'float' <IntegralToFloating>
|   |   |     | | |   |           |     `-ImplicitCastExpr 0x7fffd839fab0 <col:66> 'int' <IntegralCast>
|   |   |     | | |   |           |       `-ImplicitCastExpr 0x7fffd839fa98 <col:66> 'short' <LValueToRValue>
|   |   |     | | |   |           |         `-DeclRefExpr 0x7fffd839fa58 <col:66> 'short' lvalue Var 0x7fffd839f5a8 'y' 'short'
|   |   |     | | |   |           `-ImplicitCastExpr 0x7fffd839fbb8 <col:70, col:75> 'float' <LValueToRValue>
|   |   |     | | |   |             `-ArraySubscriptExpr 0x7fffd839fb90 <col:70, col:75> 'float' lvalue
|   |   |     | | |   |               |-ImplicitCastExpr 0x7fffd839fb78 <col:70> 'float *' <ArrayToPointerDecay>
|   |   |     | | |   |               | `-DeclRefExpr 0x7fffd839fb30 <col:70> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     | | |   |               `-IntegerLiteral 0x7fffd839fb58 <col:74> 'int' 4
|   |   |     | | |   |-BinaryOperator 0x7fffd83a0228 <line:1862:16, col:77> 'short' '='
|   |   |     | | |   | |-MemberExpr 0x7fffd839fd50 <col:16, col:19> 'short' lvalue ->y 0x7fffd8351838
|   |   |     | | |   | | `-ImplicitCastExpr 0x7fffd839fd38 <col:16> 'stbtt_vertex *' <LValueToRValue>
|   |   |     | | |   | |   `-DeclRefExpr 0x7fffd839fd10 <col:16> 'stbtt_vertex *' lvalue Var 0x7fffd839f3d8 'v' 'stbtt_vertex *'
|   |   |     | | |   | `-CStyleCastExpr 0x7fffd83a0200 <col:23, col:77> 'short' <FloatingToIntegral>
|   |   |     | | |   |   `-ParenExpr 0x7fffd83a01e0 <col:42, col:77> 'float'
|   |   |     | | |   |     `-BinaryOperator 0x7fffd83a0170 <col:43, col:76> 'float' '*'
|   |   |     | | |   |       |-ImplicitCastExpr 0x7fffd83a0158 <col:43> 'float' <LValueToRValue>
|   |   |     | | |   |       | `-DeclRefExpr 0x7fffd839fd88 <col:43> 'float' lvalue Var 0x7fffd839b290 'n' 'float'
|   |   |     | | |   |       `-ParenExpr 0x7fffd83a0138 <col:47, col:76> 'float'
|   |   |     | | |   |         `-BinaryOperator 0x7fffd83a0110 <col:48, col:75> 'float' '+'
|   |   |     | | |   |           |-BinaryOperator 0x7fffd83a0048 <col:48, col:66> 'float' '+'
|   |   |     | | |   |           | |-BinaryOperator 0x7fffd839fec0 <col:48, col:55> 'float' '*'
|   |   |     | | |   |           | | |-ImplicitCastExpr 0x7fffd839fe60 <col:48, col:53> 'float' <LValueToRValue>
|   |   |     | | |   |           | | | `-ArraySubscriptExpr 0x7fffd839fe10 <col:48, col:53> 'float' lvalue
|   |   |     | | |   |           | | |   |-ImplicitCastExpr 0x7fffd839fdf8 <col:48> 'float *' <ArrayToPointerDecay>
|   |   |     | | |   |           | | |   | `-DeclRefExpr 0x7fffd839fdb0 <col:48> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     | | |   |           | | |   `-IntegerLiteral 0x7fffd839fdd8 <col:52> 'int' 1
|   |   |     | | |   |           | | `-ImplicitCastExpr 0x7fffd839fea8 <col:55> 'float' <IntegralToFloating>
|   |   |     | | |   |           | |   `-ImplicitCastExpr 0x7fffd839fe90 <col:55> 'int' <IntegralCast>
|   |   |     | | |   |           | |     `-ImplicitCastExpr 0x7fffd839fe78 <col:55> 'short' <LValueToRValue>
|   |   |     | | |   |           | |       `-DeclRefExpr 0x7fffd839fe38 <col:55> 'short' lvalue Var 0x7fffd839f530 'x' 'short'
|   |   |     | | |   |           | `-BinaryOperator 0x7fffd83a0020 <col:59, col:66> 'float' '*'
|   |   |     | | |   |           |   |-ImplicitCastExpr 0x7fffd839ffc0 <col:59, col:64> 'float' <LValueToRValue>
|   |   |     | | |   |           |   | `-ArraySubscriptExpr 0x7fffd839ff70 <col:59, col:64> 'float' lvalue
|   |   |     | | |   |           |   |   |-ImplicitCastExpr 0x7fffd839ff30 <col:59> 'float *' <ArrayToPointerDecay>
|   |   |     | | |   |           |   |   | `-DeclRefExpr 0x7fffd839fee8 <col:59> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     | | |   |           |   |   `-IntegerLiteral 0x7fffd839ff10 <col:63> 'int' 3
|   |   |     | | |   |           |   `-ImplicitCastExpr 0x7fffd83a0008 <col:66> 'float' <IntegralToFloating>
|   |   |     | | |   |           |     `-ImplicitCastExpr 0x7fffd839fff0 <col:66> 'int' <IntegralCast>
|   |   |     | | |   |           |       `-ImplicitCastExpr 0x7fffd839ffd8 <col:66> 'short' <LValueToRValue>
|   |   |     | | |   |           |         `-DeclRefExpr 0x7fffd839ff98 <col:66> 'short' lvalue Var 0x7fffd839f5a8 'y' 'short'
|   |   |     | | |   |           `-ImplicitCastExpr 0x7fffd83a00f8 <col:70, col:75> 'float' <LValueToRValue>
|   |   |     | | |   |             `-ArraySubscriptExpr 0x7fffd83a00d0 <col:70, col:75> 'float' lvalue
|   |   |     | | |   |               |-ImplicitCastExpr 0x7fffd83a00b8 <col:70> 'float *' <ArrayToPointerDecay>
|   |   |     | | |   |               | `-DeclRefExpr 0x7fffd83a0070 <col:70> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     | | |   |               `-IntegerLiteral 0x7fffd83a0098 <col:74> 'int' 5
|   |   |     | | |   |-BinaryOperator 0x7fffd83a0308 <line:1863:16, col:21> 'short' '='
|   |   |     | | |   | |-DeclRefExpr 0x7fffd83a0250 <col:16> 'short' lvalue Var 0x7fffd839f530 'x' 'short'
|   |   |     | | |   | `-ImplicitCastExpr 0x7fffd83a02f0 <col:18, col:21> 'short' <LValueToRValue>
|   |   |     | | |   |   `-MemberExpr 0x7fffd83a02b8 <col:18, col:21> 'short' lvalue ->cx 0x7fffd8351898
|   |   |     | | |   |     `-ImplicitCastExpr 0x7fffd83a02a0 <col:18> 'stbtt_vertex *' <LValueToRValue>
|   |   |     | | |   |       `-DeclRefExpr 0x7fffd83a0278 <col:18> 'stbtt_vertex *' lvalue Var 0x7fffd839f3d8 'v' 'stbtt_vertex *'
|   |   |     | | |   |-BinaryOperator 0x7fffd83a03e8 <col:25, col:30> 'short' '='
|   |   |     | | |   | |-DeclRefExpr 0x7fffd83a0330 <col:25> 'short' lvalue Var 0x7fffd839f5a8 'y' 'short'
|   |   |     | | |   | `-ImplicitCastExpr 0x7fffd83a03d0 <col:27, col:30> 'short' <LValueToRValue>
|   |   |     | | |   |   `-MemberExpr 0x7fffd83a0398 <col:27, col:30> 'short' lvalue ->cy 0x7fffd83518f8
|   |   |     | | |   |     `-ImplicitCastExpr 0x7fffd83a0380 <col:27> 'stbtt_vertex *' <LValueToRValue>
|   |   |     | | |   |       `-DeclRefExpr 0x7fffd83a0358 <col:27> 'stbtt_vertex *' lvalue Var 0x7fffd839f3d8 'v' 'stbtt_vertex *'
|   |   |     | | |   |-BinaryOperator 0x7fffd83a0900 <line:1864:16, col:78> 'short' '='
|   |   |     | | |   | |-MemberExpr 0x7fffd83a0450 <col:16, col:19> 'short' lvalue ->cx 0x7fffd8351898
|   |   |     | | |   | | `-ImplicitCastExpr 0x7fffd83a0438 <col:16> 'stbtt_vertex *' <LValueToRValue>
|   |   |     | | |   | |   `-DeclRefExpr 0x7fffd83a0410 <col:16> 'stbtt_vertex *' lvalue Var 0x7fffd839f3d8 'v' 'stbtt_vertex *'
|   |   |     | | |   | `-CStyleCastExpr 0x7fffd83a08d8 <col:24, col:78> 'short' <FloatingToIntegral>
|   |   |     | | |   |   `-ParenExpr 0x7fffd83a08b8 <col:43, col:78> 'float'
|   |   |     | | |   |     `-BinaryOperator 0x7fffd83a0848 <col:44, col:77> 'float' '*'
|   |   |     | | |   |       |-ImplicitCastExpr 0x7fffd83a0830 <col:44> 'float' <LValueToRValue>
|   |   |     | | |   |       | `-DeclRefExpr 0x7fffd83a0488 <col:44> 'float' lvalue Var 0x7fffd839b218 'm' 'float'
|   |   |     | | |   |       `-ParenExpr 0x7fffd83a0810 <col:48, col:77> 'float'
|   |   |     | | |   |         `-BinaryOperator 0x7fffd83a07e8 <col:49, col:76> 'float' '+'
|   |   |     | | |   |           |-BinaryOperator 0x7fffd83a0720 <col:49, col:67> 'float' '+'
|   |   |     | | |   |           | |-BinaryOperator 0x7fffd83a05c0 <col:49, col:56> 'float' '*'
|   |   |     | | |   |           | | |-ImplicitCastExpr 0x7fffd83a0560 <col:49, col:54> 'float' <LValueToRValue>
|   |   |     | | |   |           | | | `-ArraySubscriptExpr 0x7fffd83a0510 <col:49, col:54> 'float' lvalue
|   |   |     | | |   |           | | |   |-ImplicitCastExpr 0x7fffd83a04f8 <col:49> 'float *' <ArrayToPointerDecay>
|   |   |     | | |   |           | | |   | `-DeclRefExpr 0x7fffd83a04b0 <col:49> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     | | |   |           | | |   `-IntegerLiteral 0x7fffd83a04d8 <col:53> 'int' 0
|   |   |     | | |   |           | | `-ImplicitCastExpr 0x7fffd83a05a8 <col:56> 'float' <IntegralToFloating>
|   |   |     | | |   |           | |   `-ImplicitCastExpr 0x7fffd83a0590 <col:56> 'int' <IntegralCast>
|   |   |     | | |   |           | |     `-ImplicitCastExpr 0x7fffd83a0578 <col:56> 'short' <LValueToRValue>
|   |   |     | | |   |           | |       `-DeclRefExpr 0x7fffd83a0538 <col:56> 'short' lvalue Var 0x7fffd839f530 'x' 'short'
|   |   |     | | |   |           | `-BinaryOperator 0x7fffd83a06f8 <col:60, col:67> 'float' '*'
|   |   |     | | |   |           |   |-ImplicitCastExpr 0x7fffd83a0698 <col:60, col:65> 'float' <LValueToRValue>
|   |   |     | | |   |           |   | `-ArraySubscriptExpr 0x7fffd83a0648 <col:60, col:65> 'float' lvalue
|   |   |     | | |   |           |   |   |-ImplicitCastExpr 0x7fffd83a0630 <col:60> 'float *' <ArrayToPointerDecay>
|   |   |     | | |   |           |   |   | `-DeclRefExpr 0x7fffd83a05e8 <col:60> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     | | |   |           |   |   `-IntegerLiteral 0x7fffd83a0610 <col:64> 'int' 2
|   |   |     | | |   |           |   `-ImplicitCastExpr 0x7fffd83a06e0 <col:67> 'float' <IntegralToFloating>
|   |   |     | | |   |           |     `-ImplicitCastExpr 0x7fffd83a06c8 <col:67> 'int' <IntegralCast>
|   |   |     | | |   |           |       `-ImplicitCastExpr 0x7fffd83a06b0 <col:67> 'short' <LValueToRValue>
|   |   |     | | |   |           |         `-DeclRefExpr 0x7fffd83a0670 <col:67> 'short' lvalue Var 0x7fffd839f5a8 'y' 'short'
|   |   |     | | |   |           `-ImplicitCastExpr 0x7fffd83a07d0 <col:71, col:76> 'float' <LValueToRValue>
|   |   |     | | |   |             `-ArraySubscriptExpr 0x7fffd83a07a8 <col:71, col:76> 'float' lvalue
|   |   |     | | |   |               |-ImplicitCastExpr 0x7fffd83a0790 <col:71> 'float *' <ArrayToPointerDecay>
|   |   |     | | |   |               | `-DeclRefExpr 0x7fffd83a0748 <col:71> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     | | |   |               `-IntegerLiteral 0x7fffd83a0770 <col:75> 'int' 4
|   |   |     | | |   `-BinaryOperator 0x7fffd83a0e18 <line:1865:16, col:78> 'short' '='
|   |   |     | | |     |-MemberExpr 0x7fffd83a0968 <col:16, col:19> 'short' lvalue ->cy 0x7fffd83518f8
|   |   |     | | |     | `-ImplicitCastExpr 0x7fffd83a0950 <col:16> 'stbtt_vertex *' <LValueToRValue>
|   |   |     | | |     |   `-DeclRefExpr 0x7fffd83a0928 <col:16> 'stbtt_vertex *' lvalue Var 0x7fffd839f3d8 'v' 'stbtt_vertex *'
|   |   |     | | |     `-CStyleCastExpr 0x7fffd83a0df0 <col:24, col:78> 'short' <FloatingToIntegral>
|   |   |     | | |       `-ParenExpr 0x7fffd83a0dd0 <col:43, col:78> 'float'
|   |   |     | | |         `-BinaryOperator 0x7fffd83a0d60 <col:44, col:77> 'float' '*'
|   |   |     | | |           |-ImplicitCastExpr 0x7fffd83a0d48 <col:44> 'float' <LValueToRValue>
|   |   |     | | |           | `-DeclRefExpr 0x7fffd83a09a0 <col:44> 'float' lvalue Var 0x7fffd839b290 'n' 'float'
|   |   |     | | |           `-ParenExpr 0x7fffd83a0d28 <col:48, col:77> 'float'
|   |   |     | | |             `-BinaryOperator 0x7fffd83a0d00 <col:49, col:76> 'float' '+'
|   |   |     | | |               |-BinaryOperator 0x7fffd83a0c38 <col:49, col:67> 'float' '+'
|   |   |     | | |               | |-BinaryOperator 0x7fffd83a0ad8 <col:49, col:56> 'float' '*'
|   |   |     | | |               | | |-ImplicitCastExpr 0x7fffd83a0a78 <col:49, col:54> 'float' <LValueToRValue>
|   |   |     | | |               | | | `-ArraySubscriptExpr 0x7fffd83a0a28 <col:49, col:54> 'float' lvalue
|   |   |     | | |               | | |   |-ImplicitCastExpr 0x7fffd83a0a10 <col:49> 'float *' <ArrayToPointerDecay>
|   |   |     | | |               | | |   | `-DeclRefExpr 0x7fffd83a09c8 <col:49> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     | | |               | | |   `-IntegerLiteral 0x7fffd83a09f0 <col:53> 'int' 1
|   |   |     | | |               | | `-ImplicitCastExpr 0x7fffd83a0ac0 <col:56> 'float' <IntegralToFloating>
|   |   |     | | |               | |   `-ImplicitCastExpr 0x7fffd83a0aa8 <col:56> 'int' <IntegralCast>
|   |   |     | | |               | |     `-ImplicitCastExpr 0x7fffd83a0a90 <col:56> 'short' <LValueToRValue>
|   |   |     | | |               | |       `-DeclRefExpr 0x7fffd83a0a50 <col:56> 'short' lvalue Var 0x7fffd839f530 'x' 'short'
|   |   |     | | |               | `-BinaryOperator 0x7fffd83a0c10 <col:60, col:67> 'float' '*'
|   |   |     | | |               |   |-ImplicitCastExpr 0x7fffd83a0bb0 <col:60, col:65> 'float' <LValueToRValue>
|   |   |     | | |               |   | `-ArraySubscriptExpr 0x7fffd83a0b60 <col:60, col:65> 'float' lvalue
|   |   |     | | |               |   |   |-ImplicitCastExpr 0x7fffd83a0b48 <col:60> 'float *' <ArrayToPointerDecay>
|   |   |     | | |               |   |   | `-DeclRefExpr 0x7fffd83a0b00 <col:60> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     | | |               |   |   `-IntegerLiteral 0x7fffd83a0b28 <col:64> 'int' 3
|   |   |     | | |               |   `-ImplicitCastExpr 0x7fffd83a0bf8 <col:67> 'float' <IntegralToFloating>
|   |   |     | | |               |     `-ImplicitCastExpr 0x7fffd83a0be0 <col:67> 'int' <IntegralCast>
|   |   |     | | |               |       `-ImplicitCastExpr 0x7fffd83a0bc8 <col:67> 'short' <LValueToRValue>
|   |   |     | | |               |         `-DeclRefExpr 0x7fffd83a0b88 <col:67> 'short' lvalue Var 0x7fffd839f5a8 'y' 'short'
|   |   |     | | |               `-ImplicitCastExpr 0x7fffd83a0ce8 <col:71, col:76> 'float' <LValueToRValue>
|   |   |     | | |                 `-ArraySubscriptExpr 0x7fffd83a0cc0 <col:71, col:76> 'float' lvalue
|   |   |     | | |                   |-ImplicitCastExpr 0x7fffd83a0ca8 <col:71> 'float *' <ArrayToPointerDecay>
|   |   |     | | |                   | `-DeclRefExpr 0x7fffd83a0c60 <col:71> 'float [6]' lvalue Var 0x7fffd839af70 'mtx' 'float [6]'
|   |   |     | | |                   `-IntegerLiteral 0x7fffd83a0c88 <col:75> 'int' 5
|   |   |     | | |-BinaryOperator 0x7fffd83a1278 <line:1868:13, line:467:51> 'stbtt_vertex *' '='
|   |   |     | | | |-DeclRefExpr 0x7fffd83a0ed8 <line:1868:13> 'stbtt_vertex *' lvalue Var 0x7fffd839ae20 'tmp' 'stbtt_vertex *'
|   |   |     | | | `-CStyleCastExpr 0x7fffd83a1250 <col:19, line:467:51> 'stbtt_vertex *' <BitCast>
|   |   |     | | |   `-ParenExpr 0x7fffd83a1230 <col:31, col:51> 'void *'
|   |   |     | | |     `-BinaryOperator 0x7fffd83a1208 <col:32, col:50> 'void *' ','
|   |   |     | | |       |-CStyleCastExpr 0x7fffd83a0ff0 <col:32, col:40> 'void' <ToVoid>
|   |   |     | | |       | `-ImplicitCastExpr 0x7fffd83a0fd8 <col:38, col:40> 'void *' <LValueToRValue>
|   |   |     | | |       |   `-ParenExpr 0x7fffd83a0fb8 <col:38, col:40> 'void *const' lvalue
|   |   |     | | |       |     `-MemberExpr 0x7fffd83a0f40 <line:1868:99, col:105> 'void *const' lvalue ->userdata 0x7fffd834cb78
|   |   |     | | |       |       `-ImplicitCastExpr 0x7fffd83a0f28 <col:99> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   |     | | |       |         `-DeclRefExpr 0x7fffd83a0f00 <col:99> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd8392150 'info' 'const stbtt_fontinfo *'
|   |   |     | | |       `-CallExpr 0x7fffd83a1190 <line:467:42, col:50> 'void *'
|   |   |     | | |         |-ImplicitCastExpr 0x7fffd83a1178 <col:42> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|   |   |     | | |         | `-DeclRefExpr 0x7fffd83a1018 <col:42> 'void *(unsigned long)' Function 0x7fffd831b4b0 'malloc' 'void *(unsigned long)'
|   |   |     | | |         `-BinaryOperator 0x7fffd83a1150 <line:1868:47, col:96> 'unsigned long' '*'
|   |   |     | | |           |-ImplicitCastExpr 0x7fffd83a1138 <col:47, col:75> 'unsigned long' <IntegralCast>
|   |   |     | | |           | `-ParenExpr 0x7fffd83a10e8 <col:47, col:75> 'int'
|   |   |     | | |           |   `-BinaryOperator 0x7fffd83a10c0 <col:48, col:61> 'int' '+'
|   |   |     | | |           |     |-ImplicitCastExpr 0x7fffd83a1090 <col:48> 'int' <LValueToRValue>
|   |   |     | | |           |     | `-DeclRefExpr 0x7fffd83a1040 <col:48> 'int' lvalue Var 0x7fffd8392698 'num_vertices' 'int'
|   |   |     | | |           |     `-ImplicitCastExpr 0x7fffd83a10a8 <col:61> 'int' <LValueToRValue>
|   |   |     | | |           |       `-DeclRefExpr 0x7fffd83a1068 <col:61> 'int' lvalue Var 0x7fffd839ac40 'comp_num_verts' 'int'
|   |   |     | | |           `-UnaryExprOrTypeTraitExpr 0x7fffd83a1118 <col:77, col:96> 'unsigned long' sizeof 'stbtt_vertex':'stbtt_vertex'
|   |   |     | | |-IfStmt 0x7fffd83a18d0 <line:1869:13, line:1873:13>
|   |   |     | | | |-<<<NULL>>>
|   |   |     | | | |-<<<NULL>>>
|   |   |     | | | |-UnaryOperator 0x7fffd83a12e0 <line:1869:17, col:18> 'int' prefix '!'
|   |   |     | | | | `-ImplicitCastExpr 0x7fffd83a12c8 <col:18> 'stbtt_vertex *' <LValueToRValue>
|   |   |     | | | |   `-DeclRefExpr 0x7fffd83a12a0 <col:18> 'stbtt_vertex *' lvalue Var 0x7fffd839ae20 'tmp' 'stbtt_vertex *'
|   |   |     | | | |-CompoundStmt 0x7fffd83a18a8 <col:23, line:1873:13>
|   |   |     | | | | |-IfStmt 0x7fffd83a1598 <line:1870:16, line:468:49>
|   |   |     | | | | | |-<<<NULL>>>
|   |   |     | | | | | |-<<<NULL>>>
|   |   |     | | | | | |-ImplicitCastExpr 0x7fffd83a1328 <line:1870:20> 'stbtt_vertex *' <LValueToRValue>
|   |   |     | | | | | | `-DeclRefExpr 0x7fffd83a1300 <col:20> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   |   |     | | | | | |-ParenExpr 0x7fffd83a1578 <line:468:31, col:49> 'void'
|   |   |     | | | | | | `-BinaryOperator 0x7fffd83a1550 <col:32, col:48> 'void' ','
|   |   |     | | | | | |   |-CStyleCastExpr 0x7fffd83a1430 <col:32, col:40> 'void' <ToVoid>
|   |   |     | | | | | |   | `-ImplicitCastExpr 0x7fffd83a1418 <col:38, col:40> 'void *' <LValueToRValue>
|   |   |     | | | | | |   |   `-ParenExpr 0x7fffd83a13f8 <col:38, col:40> 'void *const' lvalue
|   |   |     | | | | | |   |     `-MemberExpr 0x7fffd83a1380 <line:1870:51, col:57> 'void *const' lvalue ->userdata 0x7fffd834cb78
|   |   |     | | | | | |   |       `-ImplicitCastExpr 0x7fffd83a1368 <col:51> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   |     | | | | | |   |         `-DeclRefExpr 0x7fffd83a1340 <col:51> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd8392150 'info' 'const stbtt_fontinfo *'
|   |   |     | | | | | |   `-CallExpr 0x7fffd83a14f0 <line:468:42, col:48> 'void'
|   |   |     | | | | | |     |-ImplicitCastExpr 0x7fffd83a14d8 <col:42> 'void (*)(void *)' <FunctionToPointerDecay>
|   |   |     | | | | | |     | `-DeclRefExpr 0x7fffd83a1458 <col:42> 'void (void *)' Function 0x7fffd831bec0 'free' 'void (void *)'
|   |   |     | | | | | |     `-ImplicitCastExpr 0x7fffd83a1538 <line:1870:41> 'void *' <BitCast>
|   |   |     | | | | | |       `-ImplicitCastExpr 0x7fffd83a1520 <col:41> 'stbtt_vertex *' <LValueToRValue>
|   |   |     | | | | | |         `-DeclRefExpr 0x7fffd83a1480 <col:41> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   |   |     | | | | | `-<<<NULL>>>
|   |   |     | | | | |-IfStmt 0x7fffd83a1838 <line:1871:16, line:468:49>
|   |   |     | | | | | |-<<<NULL>>>
|   |   |     | | | | | |-<<<NULL>>>
|   |   |     | | | | | |-ImplicitCastExpr 0x7fffd83a15f8 <line:1871:20> 'stbtt_vertex *' <LValueToRValue>
|   |   |     | | | | | | `-DeclRefExpr 0x7fffd83a15d0 <col:20> 'stbtt_vertex *' lvalue Var 0x7fffd839ad78 'comp_verts' 'stbtt_vertex *'
|   |   |     | | | | | |-ParenExpr 0x7fffd83a1818 <line:468:31, col:49> 'void'
|   |   |     | | | | | | `-BinaryOperator 0x7fffd83a17f0 <col:32, col:48> 'void' ','
|   |   |     | | | | | |   |-CStyleCastExpr 0x7fffd83a1700 <col:32, col:40> 'void' <ToVoid>
|   |   |     | | | | | |   | `-ImplicitCastExpr 0x7fffd83a16e8 <col:38, col:40> 'void *' <LValueToRValue>
|   |   |     | | | | | |   |   `-ParenExpr 0x7fffd83a16c8 <col:38, col:40> 'void *const' lvalue
|   |   |     | | | | | |   |     `-MemberExpr 0x7fffd83a1650 <line:1871:55, col:61> 'void *const' lvalue ->userdata 0x7fffd834cb78
|   |   |     | | | | | |   |       `-ImplicitCastExpr 0x7fffd83a1638 <col:55> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   |     | | | | | |   |         `-DeclRefExpr 0x7fffd83a1610 <col:55> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd8392150 'info' 'const stbtt_fontinfo *'
|   |   |     | | | | | |   `-CallExpr 0x7fffd83a1790 <line:468:42, col:48> 'void'
|   |   |     | | | | | |     |-ImplicitCastExpr 0x7fffd83a1778 <col:42> 'void (*)(void *)' <FunctionToPointerDecay>
|   |   |     | | | | | |     | `-DeclRefExpr 0x7fffd83a1728 <col:42> 'void (void *)' Function 0x7fffd831bec0 'free' 'void (void *)'
|   |   |     | | | | | |     `-ImplicitCastExpr 0x7fffd83a17d8 <line:1871:43> 'void *' <BitCast>
|   |   |     | | | | | |       `-ImplicitCastExpr 0x7fffd83a17c0 <col:43> 'stbtt_vertex *' <LValueToRValue>
|   |   |     | | | | | |         `-DeclRefExpr 0x7fffd83a1750 <col:43> 'stbtt_vertex *' lvalue Var 0x7fffd839ad78 'comp_verts' 'stbtt_vertex *'
|   |   |     | | | | | `-<<<NULL>>>
|   |   |     | | | | `-ReturnStmt 0x7fffd83a1890 <line:1872:16, col:23>
|   |   |     | | | |   `-IntegerLiteral 0x7fffd83a1870 <col:23> 'int' 0
|   |   |     | | | `-<<<NULL>>>
|   |   |     | | |-IfStmt 0x7fffd83a1bd0 <line:1874:13, col:96>
|   |   |     | | | |-<<<NULL>>>
|   |   |     | | | |-<<<NULL>>>
|   |   |     | | | |-BinaryOperator 0x7fffd83a1968 <col:17, col:32> 'int' '>'
|   |   |     | | | | |-ImplicitCastExpr 0x7fffd83a1950 <col:17> 'int' <LValueToRValue>
|   |   |     | | | | | `-DeclRefExpr 0x7fffd83a1908 <col:17> 'int' lvalue Var 0x7fffd8392698 'num_vertices' 'int'
|   |   |     | | | | `-IntegerLiteral 0x7fffd83a1930 <col:32> 'int' 0
|   |   |     | | | |-CallExpr 0x7fffd83a1b30 <line:483:31, line:1874:96> 'void *'
|   |   |     | | | | |-ImplicitCastExpr 0x7fffd83a1b18 <line:483:31> 'void *(*)(void *, const void *, unsigned long)' <FunctionToPointerDecay>
|   |   |     | | | | | `-DeclRefExpr 0x7fffd83a1990 <col:31> 'void *(void *, const void *, unsigned long)' Function 0x7fffd832c200 'memcpy' 'void *(void *, const void *, unsigned long)'
|   |   |     | | | | |-ImplicitCastExpr 0x7fffd83a1b88 <line:1874:48> 'void *' <BitCast>
|   |   |     | | | | | `-ImplicitCastExpr 0x7fffd83a1b70 <col:48> 'stbtt_vertex *' <LValueToRValue>
|   |   |     | | | | |   `-DeclRefExpr 0x7fffd83a19b8 <col:48> 'stbtt_vertex *' lvalue Var 0x7fffd839ae20 'tmp' 'stbtt_vertex *'
|   |   |     | | | | |-ImplicitCastExpr 0x7fffd83a1bb8 <col:53> 'const void *' <BitCast>
|   |   |     | | | | | `-ImplicitCastExpr 0x7fffd83a1ba0 <col:53> 'stbtt_vertex *' <LValueToRValue>
|   |   |     | | | | |   `-DeclRefExpr 0x7fffd83a19e0 <col:53> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   |   |     | | | | `-BinaryOperator 0x7fffd83a1a90 <col:63, col:95> 'unsigned long' '*'
|   |   |     | | | |   |-ImplicitCastExpr 0x7fffd83a1a78 <col:63> 'unsigned long' <IntegralCast>
|   |   |     | | | |   | `-ImplicitCastExpr 0x7fffd83a1a60 <col:63> 'int' <LValueToRValue>
|   |   |     | | | |   |   `-DeclRefExpr 0x7fffd83a1a08 <col:63> 'int' lvalue Var 0x7fffd8392698 'num_vertices' 'int'
|   |   |     | | | |   `-UnaryExprOrTypeTraitExpr 0x7fffd83a1a40 <col:76, col:95> 'unsigned long' sizeof 'stbtt_vertex':'stbtt_vertex'
|   |   |     | | | `-<<<NULL>>>
|   |   |     | | |-CallExpr 0x7fffd83a1de0 <line:483:31, line:1875:91> 'void *'
|   |   |     | | | |-ImplicitCastExpr 0x7fffd83a1dc8 <line:483:31> 'void *(*)(void *, const void *, unsigned long)' <FunctionToPointerDecay>
|   |   |     | | | | `-DeclRefExpr 0x7fffd83a1c08 <col:31> 'void *(void *, const void *, unsigned long)' Function 0x7fffd832c200 'memcpy' 'void *(void *, const void *, unsigned long)'
|   |   |     | | | |-ImplicitCastExpr 0x7fffd83a1e20 <line:1875:26, col:30> 'void *' <BitCast>
|   |   |     | | | | `-BinaryOperator 0x7fffd83a1cb0 <col:26, col:30> 'stbtt_vertex *' '+'
|   |   |     | | | |   |-ImplicitCastExpr 0x7fffd83a1c80 <col:26> 'stbtt_vertex *' <LValueToRValue>
|   |   |     | | | |   | `-DeclRefExpr 0x7fffd83a1c30 <col:26> 'stbtt_vertex *' lvalue Var 0x7fffd839ae20 'tmp' 'stbtt_vertex *'
|   |   |     | | | |   `-ImplicitCastExpr 0x7fffd83a1c98 <col:30> 'int' <LValueToRValue>
|   |   |     | | | |     `-DeclRefExpr 0x7fffd83a1c58 <col:30> 'int' lvalue Var 0x7fffd8392698 'num_vertices' 'int'
|   |   |     | | | |-ImplicitCastExpr 0x7fffd83a1e50 <col:44> 'const void *' <BitCast>
|   |   |     | | | | `-ImplicitCastExpr 0x7fffd83a1e38 <col:44> 'stbtt_vertex *' <LValueToRValue>
|   |   |     | | | |   `-DeclRefExpr 0x7fffd83a1cd8 <col:44> 'stbtt_vertex *' lvalue Var 0x7fffd839ad78 'comp_verts' 'stbtt_vertex *'
|   |   |     | | | `-BinaryOperator 0x7fffd83a1d88 <col:56, col:90> 'unsigned long' '*'
|   |   |     | | |   |-ImplicitCastExpr 0x7fffd83a1d70 <col:56> 'unsigned long' <IntegralCast>
|   |   |     | | |   | `-ImplicitCastExpr 0x7fffd83a1d58 <col:56> 'int' <LValueToRValue>
|   |   |     | | |   |   `-DeclRefExpr 0x7fffd83a1d00 <col:56> 'int' lvalue Var 0x7fffd839ac40 'comp_num_verts' 'int'
|   |   |     | | |   `-UnaryExprOrTypeTraitExpr 0x7fffd83a1d38 <col:71, col:90> 'unsigned long' sizeof 'stbtt_vertex':'stbtt_vertex'
|   |   |     | | |-IfStmt 0x7fffd83a20f0 <line:1876:13, line:468:49>
|   |   |     | | | |-<<<NULL>>>
|   |   |     | | | |-<<<NULL>>>
|   |   |     | | | |-ImplicitCastExpr 0x7fffd83a1e90 <line:1876:17> 'stbtt_vertex *' <LValueToRValue>
|   |   |     | | | | `-DeclRefExpr 0x7fffd83a1e68 <col:17> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   |   |     | | | |-ParenExpr 0x7fffd83a20d0 <line:468:31, col:49> 'void'
|   |   |     | | | | `-BinaryOperator 0x7fffd83a20a8 <col:32, col:48> 'void' ','
|   |   |     | | | |   |-CStyleCastExpr 0x7fffd83a1fb8 <col:32, col:40> 'void' <ToVoid>
|   |   |     | | | |   | `-ImplicitCastExpr 0x7fffd83a1fa0 <col:38, col:40> 'void *' <LValueToRValue>
|   |   |     | | | |   |   `-ParenExpr 0x7fffd83a1f80 <col:38, col:40> 'void *const' lvalue
|   |   |     | | | |   |     `-MemberExpr 0x7fffd83a1ee8 <line:1876:48, col:54> 'void *const' lvalue ->userdata 0x7fffd834cb78
|   |   |     | | | |   |       `-ImplicitCastExpr 0x7fffd83a1ed0 <col:48> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   |     | | | |   |         `-DeclRefExpr 0x7fffd83a1ea8 <col:48> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd8392150 'info' 'const stbtt_fontinfo *'
|   |   |     | | | |   `-CallExpr 0x7fffd83a2048 <line:468:42, col:48> 'void'
|   |   |     | | | |     |-ImplicitCastExpr 0x7fffd83a2030 <col:42> 'void (*)(void *)' <FunctionToPointerDecay>
|   |   |     | | | |     | `-DeclRefExpr 0x7fffd83a1fe0 <col:42> 'void (void *)' Function 0x7fffd831bec0 'free' 'void (void *)'
|   |   |     | | | |     `-ImplicitCastExpr 0x7fffd83a2090 <line:1876:38> 'void *' <BitCast>
|   |   |     | | | |       `-ImplicitCastExpr 0x7fffd83a2078 <col:38> 'stbtt_vertex *' <LValueToRValue>
|   |   |     | | | |         `-DeclRefExpr 0x7fffd83a2008 <col:38> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   |   |     | | | `-<<<NULL>>>
|   |   |     | | |-BinaryOperator 0x7fffd83a2190 <line:1877:13, col:24> 'stbtt_vertex *' '='
|   |   |     | | | |-DeclRefExpr 0x7fffd83a2128 <col:13> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   |   |     | | | `-ImplicitCastExpr 0x7fffd83a2178 <col:24> 'stbtt_vertex *' <LValueToRValue>
|   |   |     | | |   `-DeclRefExpr 0x7fffd83a2150 <col:24> 'stbtt_vertex *' lvalue Var 0x7fffd839ae20 'tmp' 'stbtt_vertex *'
|   |   |     | | |-ParenExpr 0x7fffd83a23c0 <line:468:31, col:49> 'void'
|   |   |     | | | `-BinaryOperator 0x7fffd83a2398 <col:32, col:48> 'void' ','
|   |   |     | | |   |-CStyleCastExpr 0x7fffd83a22a8 <col:32, col:40> 'void' <ToVoid>
|   |   |     | | |   | `-ImplicitCastExpr 0x7fffd83a2290 <col:38, col:40> 'void *' <LValueToRValue>
|   |   |     | | |   |   `-ParenExpr 0x7fffd83a2270 <col:38, col:40> 'void *const' lvalue
|   |   |     | | |   |     `-MemberExpr 0x7fffd83a21f8 <line:1878:36, col:42> 'void *const' lvalue ->userdata 0x7fffd834cb78
|   |   |     | | |   |       `-ImplicitCastExpr 0x7fffd83a21e0 <col:36> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   |     | | |   |         `-DeclRefExpr 0x7fffd83a21b8 <col:36> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd8392150 'info' 'const stbtt_fontinfo *'
|   |   |     | | |   `-CallExpr 0x7fffd83a2338 <line:468:42, col:48> 'void'
|   |   |     | | |     |-ImplicitCastExpr 0x7fffd83a2320 <col:42> 'void (*)(void *)' <FunctionToPointerDecay>
|   |   |     | | |     | `-DeclRefExpr 0x7fffd83a22d0 <col:42> 'void (void *)' Function 0x7fffd831bec0 'free' 'void (void *)'
|   |   |     | | |     `-ImplicitCastExpr 0x7fffd83a2380 <line:1878:24> 'void *' <BitCast>
|   |   |     | | |       `-ImplicitCastExpr 0x7fffd83a2368 <col:24> 'stbtt_vertex *' <LValueToRValue>
|   |   |     | | |         `-DeclRefExpr 0x7fffd83a22f8 <col:24> 'stbtt_vertex *' lvalue Var 0x7fffd839ad78 'comp_verts' 'stbtt_vertex *'
|   |   |     | | `-CompoundAssignOperator 0x7fffd83a2448 <line:1879:13, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |     | |   |-DeclRefExpr 0x7fffd83a23e0 <col:13> 'int' lvalue Var 0x7fffd8392698 'num_vertices' 'int'
|   |   |     | |   `-ImplicitCastExpr 0x7fffd83a2430 <col:29> 'int' <LValueToRValue>
|   |   |     | |     `-DeclRefExpr 0x7fffd83a2408 <col:29> 'int' lvalue Var 0x7fffd839ac40 'comp_num_verts' 'int'
|   |   |     | `-<<<NULL>>>
|   |   |     `-BinaryOperator 0x7fffd83a2640 <line:1882:10, col:30> 'int' '='
|   |   |       |-DeclRefExpr 0x7fffd83a2510 <col:10> 'int' lvalue Var 0x7fffd839a7d0 'more' 'int'
|   |   |       `-BinaryOperator 0x7fffd83a2618 <col:17, col:30> 'int' '&'
|   |   |         |-ImplicitCastExpr 0x7fffd83a2600 <col:17> 'int' <IntegralCast>
|   |   |         | `-ImplicitCastExpr 0x7fffd83a25e8 <col:17> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |         |   `-DeclRefExpr 0x7fffd83a2538 <col:17> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd839ab28 'flags' 'stbtt_uint16':'unsigned short'
|   |   |         `-ParenExpr 0x7fffd83a25c8 <col:25, col:30> 'int'
|   |   |           `-BinaryOperator 0x7fffd83a25a0 <col:26, col:29> 'int' '<<'
|   |   |             |-IntegerLiteral 0x7fffd83a2560 <col:26> 'int' 1
|   |   |             `-IntegerLiteral 0x7fffd83a2580 <col:29> 'int' 5
|   |   `-CompoundStmt 0x7fffd83a2748 <line:1884:11, line:1886:4>
|   |-BinaryOperator 0x7fffd83a2868 <line:1888:4, col:17> 'stbtt_vertex *' '='
|   | |-UnaryOperator 0x7fffd83a2808 <col:4, col:5> 'stbtt_vertex *' lvalue prefix '*'
|   | | `-ImplicitCastExpr 0x7fffd83a27f0 <col:5> 'stbtt_vertex **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83a27c8 <col:5> 'stbtt_vertex **' lvalue ParmVar 0x7fffd8392240 'pvertices' 'stbtt_vertex **'
|   | `-ImplicitCastExpr 0x7fffd83a2850 <col:17> 'stbtt_vertex *' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd83a2828 <col:17> 'stbtt_vertex *' lvalue Var 0x7fffd83925d0 'vertices' 'stbtt_vertex *'
|   `-ReturnStmt 0x7fffd83a28d0 <line:1889:4, col:11>
|     `-ImplicitCastExpr 0x7fffd83a28b8 <col:11> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd83a2890 <col:11> 'int' lvalue Var 0x7fffd8392698 'num_vertices' 'int'
|-RecordDecl 0x7fffd83a2958 <line:1892:9, line:1902:1> line:1892:9 struct definition
| |-FieldDecl 0x7fffd83a2a18 <line:1894:4, col:8> col:8 referenced bounds 'int'
| |-FieldDecl 0x7fffd83a2a78 <line:1895:4, col:8> col:8 referenced started 'int'
| |-FieldDecl 0x7fffd83a2ad8 <line:1896:4, col:10> col:10 referenced first_x 'float'
| |-FieldDecl 0x7fffd83a2b38 <col:4, col:19> col:19 referenced first_y 'float'
| |-FieldDecl 0x7fffd83a2b98 <line:1897:4, col:10> col:10 referenced x 'float'
| |-FieldDecl 0x7fffd83a2bf8 <col:4, col:13> col:13 referenced y 'float'
| |-FieldDecl 0x7fffd83a2c50 <line:1898:4, col:16> col:16 referenced min_x 'stbtt_int32':'int'
| |-FieldDecl 0x7fffd83a2ca8 <col:4, col:23> col:23 referenced max_x 'stbtt_int32':'int'
| |-FieldDecl 0x7fffd83a2d00 <col:4, col:30> col:30 referenced min_y 'stbtt_int32':'int'
| |-FieldDecl 0x7fffd83a2d58 <col:4, col:37> col:37 referenced max_y 'stbtt_int32':'int'
| |-FieldDecl 0x7fffd83a2db0 <line:1900:4, col:18> col:18 referenced pvertices 'stbtt_vertex *'
| `-FieldDecl 0x7fffd83a2e10 <line:1901:4, col:8> col:8 referenced num_vertices 'int'
|-TypedefDecl 0x7fffd83a2eb0 <line:1892:1, line:1902:3> col:3 referenced stbtt__csctx 'struct stbtt__csctx':'stbtt__csctx'
| `-ElaboratedType 0x7fffd83a2e60 'struct stbtt__csctx' sugar
|   `-RecordType 0x7fffd83a29e0 'stbtt__csctx'
|     `-Record 0x7fffd83a2958 ''
|-FunctionDecl 0x7fffd83a31c0 <line:1906:1, line:1913:1> line:1906:13 used stbtt__track_vertex 'void (stbtt__csctx *, stbtt_int32, stbtt_int32)' static
| |-ParmVarDecl 0x7fffd83a2fa8 <col:33, col:47> col:47 used c 'stbtt__csctx *'
| |-ParmVarDecl 0x7fffd83a3018 <col:50, col:62> col:62 used x 'stbtt_int32':'int'
| |-ParmVarDecl 0x7fffd83a3088 <col:65, col:77> col:77 used y 'stbtt_int32':'int'
| `-CompoundStmt 0x7fffd83a3ed8 <line:1907:1, line:1913:1>
|   |-IfStmt 0x7fffd83a3528 <line:1908:4, col:48>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83a3420 <col:8, col:28> 'int' '||'
|   | | |-BinaryOperator 0x7fffd83a3348 <col:8, col:15> 'int' '>'
|   | | | |-ImplicitCastExpr 0x7fffd83a3318 <col:8> 'stbtt_int32':'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x7fffd83a3278 <col:8> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd83a3018 'x' 'stbtt_int32':'int'
|   | | | `-ImplicitCastExpr 0x7fffd83a3330 <col:12, col:15> 'stbtt_int32':'int' <LValueToRValue>
|   | | |   `-MemberExpr 0x7fffd83a32e0 <col:12, col:15> 'stbtt_int32':'int' lvalue ->max_x 0x7fffd83a2ca8
|   | | |     `-ImplicitCastExpr 0x7fffd83a32c8 <col:12> 'stbtt__csctx *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x7fffd83a32a0 <col:12> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a2fa8 'c' 'stbtt__csctx *'
|   | | `-UnaryOperator 0x7fffd83a3400 <col:24, col:28> 'int' prefix '!'
|   | |   `-ImplicitCastExpr 0x7fffd83a33e8 <col:25, col:28> 'int' <LValueToRValue>
|   | |     `-MemberExpr 0x7fffd83a33b0 <col:25, col:28> 'int' lvalue ->started 0x7fffd83a2a78
|   | |       `-ImplicitCastExpr 0x7fffd83a3398 <col:25> 'stbtt__csctx *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x7fffd83a3370 <col:25> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a2fa8 'c' 'stbtt__csctx *'
|   | |-BinaryOperator 0x7fffd83a3500 <col:37, col:48> 'stbtt_int32':'int' '='
|   | | |-MemberExpr 0x7fffd83a3488 <col:37, col:40> 'stbtt_int32':'int' lvalue ->max_x 0x7fffd83a2ca8
|   | | | `-ImplicitCastExpr 0x7fffd83a3470 <col:37> 'stbtt__csctx *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd83a3448 <col:37> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a2fa8 'c' 'stbtt__csctx *'
|   | | `-ImplicitCastExpr 0x7fffd83a34e8 <col:48> 'stbtt_int32':'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83a34c0 <col:48> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd83a3018 'x' 'stbtt_int32':'int'
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd83a3810 <line:1909:4, col:48>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83a3708 <col:8, col:28> 'int' '||'
|   | | |-BinaryOperator 0x7fffd83a3630 <col:8, col:15> 'int' '>'
|   | | | |-ImplicitCastExpr 0x7fffd83a3600 <col:8> 'stbtt_int32':'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x7fffd83a3560 <col:8> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd83a3088 'y' 'stbtt_int32':'int'
|   | | | `-ImplicitCastExpr 0x7fffd83a3618 <col:12, col:15> 'stbtt_int32':'int' <LValueToRValue>
|   | | |   `-MemberExpr 0x7fffd83a35c8 <col:12, col:15> 'stbtt_int32':'int' lvalue ->max_y 0x7fffd83a2d58
|   | | |     `-ImplicitCastExpr 0x7fffd83a35b0 <col:12> 'stbtt__csctx *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x7fffd83a3588 <col:12> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a2fa8 'c' 'stbtt__csctx *'
|   | | `-UnaryOperator 0x7fffd83a36e8 <col:24, col:28> 'int' prefix '!'
|   | |   `-ImplicitCastExpr 0x7fffd83a36d0 <col:25, col:28> 'int' <LValueToRValue>
|   | |     `-MemberExpr 0x7fffd83a3698 <col:25, col:28> 'int' lvalue ->started 0x7fffd83a2a78
|   | |       `-ImplicitCastExpr 0x7fffd83a3680 <col:25> 'stbtt__csctx *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x7fffd83a3658 <col:25> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a2fa8 'c' 'stbtt__csctx *'
|   | |-BinaryOperator 0x7fffd83a37e8 <col:37, col:48> 'stbtt_int32':'int' '='
|   | | |-MemberExpr 0x7fffd83a3770 <col:37, col:40> 'stbtt_int32':'int' lvalue ->max_y 0x7fffd83a2d58
|   | | | `-ImplicitCastExpr 0x7fffd83a3758 <col:37> 'stbtt__csctx *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd83a3730 <col:37> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a2fa8 'c' 'stbtt__csctx *'
|   | | `-ImplicitCastExpr 0x7fffd83a37d0 <col:48> 'stbtt_int32':'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83a37a8 <col:48> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd83a3088 'y' 'stbtt_int32':'int'
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd83a3af8 <line:1910:4, col:48>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83a39f0 <col:8, col:28> 'int' '||'
|   | | |-BinaryOperator 0x7fffd83a3918 <col:8, col:15> 'int' '<'
|   | | | |-ImplicitCastExpr 0x7fffd83a38e8 <col:8> 'stbtt_int32':'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x7fffd83a3848 <col:8> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd83a3018 'x' 'stbtt_int32':'int'
|   | | | `-ImplicitCastExpr 0x7fffd83a3900 <col:12, col:15> 'stbtt_int32':'int' <LValueToRValue>
|   | | |   `-MemberExpr 0x7fffd83a38b0 <col:12, col:15> 'stbtt_int32':'int' lvalue ->min_x 0x7fffd83a2c50
|   | | |     `-ImplicitCastExpr 0x7fffd83a3898 <col:12> 'stbtt__csctx *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x7fffd83a3870 <col:12> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a2fa8 'c' 'stbtt__csctx *'
|   | | `-UnaryOperator 0x7fffd83a39d0 <col:24, col:28> 'int' prefix '!'
|   | |   `-ImplicitCastExpr 0x7fffd83a39b8 <col:25, col:28> 'int' <LValueToRValue>
|   | |     `-MemberExpr 0x7fffd83a3980 <col:25, col:28> 'int' lvalue ->started 0x7fffd83a2a78
|   | |       `-ImplicitCastExpr 0x7fffd83a3968 <col:25> 'stbtt__csctx *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x7fffd83a3940 <col:25> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a2fa8 'c' 'stbtt__csctx *'
|   | |-BinaryOperator 0x7fffd83a3ad0 <col:37, col:48> 'stbtt_int32':'int' '='
|   | | |-MemberExpr 0x7fffd83a3a58 <col:37, col:40> 'stbtt_int32':'int' lvalue ->min_x 0x7fffd83a2c50
|   | | | `-ImplicitCastExpr 0x7fffd83a3a40 <col:37> 'stbtt__csctx *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd83a3a18 <col:37> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a2fa8 'c' 'stbtt__csctx *'
|   | | `-ImplicitCastExpr 0x7fffd83a3ab8 <col:48> 'stbtt_int32':'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83a3a90 <col:48> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd83a3018 'x' 'stbtt_int32':'int'
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd83a3de0 <line:1911:4, col:48>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83a3cd8 <col:8, col:28> 'int' '||'
|   | | |-BinaryOperator 0x7fffd83a3c00 <col:8, col:15> 'int' '<'
|   | | | |-ImplicitCastExpr 0x7fffd83a3bd0 <col:8> 'stbtt_int32':'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x7fffd83a3b30 <col:8> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd83a3088 'y' 'stbtt_int32':'int'
|   | | | `-ImplicitCastExpr 0x7fffd83a3be8 <col:12, col:15> 'stbtt_int32':'int' <LValueToRValue>
|   | | |   `-MemberExpr 0x7fffd83a3b98 <col:12, col:15> 'stbtt_int32':'int' lvalue ->min_y 0x7fffd83a2d00
|   | | |     `-ImplicitCastExpr 0x7fffd83a3b80 <col:12> 'stbtt__csctx *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x7fffd83a3b58 <col:12> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a2fa8 'c' 'stbtt__csctx *'
|   | | `-UnaryOperator 0x7fffd83a3cb8 <col:24, col:28> 'int' prefix '!'
|   | |   `-ImplicitCastExpr 0x7fffd83a3ca0 <col:25, col:28> 'int' <LValueToRValue>
|   | |     `-MemberExpr 0x7fffd83a3c68 <col:25, col:28> 'int' lvalue ->started 0x7fffd83a2a78
|   | |       `-ImplicitCastExpr 0x7fffd83a3c50 <col:25> 'stbtt__csctx *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x7fffd83a3c28 <col:25> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a2fa8 'c' 'stbtt__csctx *'
|   | |-BinaryOperator 0x7fffd83a3db8 <col:37, col:48> 'stbtt_int32':'int' '='
|   | | |-MemberExpr 0x7fffd83a3d40 <col:37, col:40> 'stbtt_int32':'int' lvalue ->min_y 0x7fffd83a2d00
|   | | | `-ImplicitCastExpr 0x7fffd83a3d28 <col:37> 'stbtt__csctx *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd83a3d00 <col:37> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a2fa8 'c' 'stbtt__csctx *'
|   | | `-ImplicitCastExpr 0x7fffd83a3da0 <col:48> 'stbtt_int32':'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83a3d78 <col:48> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd83a3088 'y' 'stbtt_int32':'int'
|   | `-<<<NULL>>>
|   `-BinaryOperator 0x7fffd83a3eb0 <line:1912:4, col:17> 'int' '='
|     |-MemberExpr 0x7fffd83a3e58 <col:4, col:7> 'int' lvalue ->started 0x7fffd83a2a78
|     | `-ImplicitCastExpr 0x7fffd83a3e40 <col:4> 'stbtt__csctx *' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fffd83a3e18 <col:4> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a2fa8 'c' 'stbtt__csctx *'
|     `-IntegerLiteral 0x7fffd83a3e90 <col:17> 'int' 1
|-FunctionDecl 0x7fffd83a53f0 <line:1915:1, line:1929:1> line:1915:13 used stbtt__csctx_v 'void (stbtt__csctx *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' static
| |-ParmVarDecl 0x7fffd83a3f20 <col:28, col:42> col:42 used c 'stbtt__csctx *'
| |-ParmVarDecl 0x7fffd83a4fb0 <col:45, col:57> col:57 used type 'stbtt_uint8':'unsigned char'
| |-ParmVarDecl 0x7fffd83a5020 <col:63, col:75> col:75 used x 'stbtt_int32':'int'
| |-ParmVarDecl 0x7fffd83a5090 <col:78, col:90> col:90 used y 'stbtt_int32':'int'
| |-ParmVarDecl 0x7fffd83a5100 <col:93, col:105> col:105 used cx 'stbtt_int32':'int'
| |-ParmVarDecl 0x7fffd83a5170 <col:109, col:121> col:121 used cy 'stbtt_int32':'int'
| |-ParmVarDecl 0x7fffd83a51e0 <col:125, col:137> col:137 used cx1 'stbtt_int32':'int'
| |-ParmVarDecl 0x7fffd83a5250 <col:142, col:154> col:154 used cy1 'stbtt_int32':'int'
| `-CompoundStmt 0x7fffd83a6310 <line:1916:1, line:1929:1>
|   |-IfStmt 0x7fffd83a6240 <line:1917:4, line:1927:4>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd83a5548 <line:1917:8, col:11> 'int' <LValueToRValue>
|   | | `-MemberExpr 0x7fffd83a5510 <col:8, col:11> 'int' lvalue ->bounds 0x7fffd83a2a18
|   | |   `-ImplicitCastExpr 0x7fffd83a54f8 <col:8> 'stbtt__csctx *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x7fffd83a54d0 <col:8> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a3f20 'c' 'stbtt__csctx *'
|   | |-CompoundStmt 0x7fffd83a5a78 <col:19, line:1923:4>
|   | | |-CallExpr 0x7fffd83a5670 <line:1918:7, col:34> 'void'
|   | | | |-ImplicitCastExpr 0x7fffd83a5658 <col:7> 'void (*)(stbtt__csctx *, stbtt_int32, stbtt_int32)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x7fffd83a5560 <col:7> 'void (stbtt__csctx *, stbtt_int32, stbtt_int32)' Function 0x7fffd83a31c0 'stbtt__track_vertex' 'void (stbtt__csctx *, stbtt_int32, stbtt_int32)'
|   | | | |-ImplicitCastExpr 0x7fffd83a56b0 <col:27> 'stbtt__csctx *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x7fffd83a5588 <col:27> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a3f20 'c' 'stbtt__csctx *'
|   | | | |-ImplicitCastExpr 0x7fffd83a56c8 <col:30> 'stbtt_int32':'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x7fffd83a55b0 <col:30> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd83a5020 'x' 'stbtt_int32':'int'
|   | | | `-ImplicitCastExpr 0x7fffd83a56e0 <col:33> 'stbtt_int32':'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd83a55d8 <col:33> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd83a5090 'y' 'stbtt_int32':'int'
|   | | `-IfStmt 0x7fffd83a5a40 <line:1919:7, line:1922:7>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-BinaryOperator 0x7fffd83a5778 <line:1919:11, col:19> 'int' '=='
|   | |   | |-ImplicitCastExpr 0x7fffd83a5760 <col:11> 'int' <IntegralCast>
|   | |   | | `-ImplicitCastExpr 0x7fffd83a5748 <col:11> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x7fffd83a56f8 <col:11> 'stbtt_uint8':'unsigned char' lvalue ParmVar 0x7fffd83a4fb0 'type' 'stbtt_uint8':'unsigned char'
|   | |   | `-DeclRefExpr 0x7fffd83a5720 <col:19> 'int' EnumConstant 0x7fffd83516c8 'STBTT_vcubic' 'int'
|   | |   |-CompoundStmt 0x7fffd83a5a20 <col:33, line:1922:7>
|   | |   | |-CallExpr 0x7fffd83a5858 <line:1920:10, col:39> 'void'
|   | |   | | |-ImplicitCastExpr 0x7fffd83a5840 <col:10> 'void (*)(stbtt__csctx *, stbtt_int32, stbtt_int32)' <FunctionToPointerDecay>
|   | |   | | | `-DeclRefExpr 0x7fffd83a57a0 <col:10> 'void (stbtt__csctx *, stbtt_int32, stbtt_int32)' Function 0x7fffd83a31c0 'stbtt__track_vertex' 'void (stbtt__csctx *, stbtt_int32, stbtt_int32)'
|   | |   | | |-ImplicitCastExpr 0x7fffd83a5898 <col:30> 'stbtt__csctx *' <LValueToRValue>
|   | |   | | | `-DeclRefExpr 0x7fffd83a57c8 <col:30> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a3f20 'c' 'stbtt__csctx *'
|   | |   | | |-ImplicitCastExpr 0x7fffd83a58b0 <col:33> 'stbtt_int32':'int' <LValueToRValue>
|   | |   | | | `-DeclRefExpr 0x7fffd83a57f0 <col:33> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd83a5100 'cx' 'stbtt_int32':'int'
|   | |   | | `-ImplicitCastExpr 0x7fffd83a58c8 <col:37> 'stbtt_int32':'int' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x7fffd83a5818 <col:37> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd83a5170 'cy' 'stbtt_int32':'int'
|   | |   | `-CallExpr 0x7fffd83a5998 <line:1921:10, col:41> 'void'
|   | |   |   |-ImplicitCastExpr 0x7fffd83a5980 <col:10> 'void (*)(stbtt__csctx *, stbtt_int32, stbtt_int32)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x7fffd83a58e0 <col:10> 'void (stbtt__csctx *, stbtt_int32, stbtt_int32)' Function 0x7fffd83a31c0 'stbtt__track_vertex' 'void (stbtt__csctx *, stbtt_int32, stbtt_int32)'
|   | |   |   |-ImplicitCastExpr 0x7fffd83a59d8 <col:30> 'stbtt__csctx *' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x7fffd83a5908 <col:30> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a3f20 'c' 'stbtt__csctx *'
|   | |   |   |-ImplicitCastExpr 0x7fffd83a59f0 <col:33> 'stbtt_int32':'int' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x7fffd83a5930 <col:33> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd83a51e0 'cx1' 'stbtt_int32':'int'
|   | |   |   `-ImplicitCastExpr 0x7fffd83a5a08 <col:38> 'stbtt_int32':'int' <LValueToRValue>
|   | |   |     `-DeclRefExpr 0x7fffd83a5958 <col:38> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd83a5250 'cy1' 'stbtt_int32':'int'
|   | |   `-<<<NULL>>>
|   | `-CompoundStmt 0x7fffd83a6218 <line:1923:11, line:1927:4>
|   |   |-CallExpr 0x7fffd83a5d08 <line:1924:7, col:73> 'void'
|   |   | |-ImplicitCastExpr 0x7fffd83a5cf0 <col:7> 'void (*)(stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x7fffd83a5a98 <col:7> 'void (stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' Function 0x7fffd838b970 'stbtt_setvertex' 'void (stbtt_vertex *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)'
|   |   | |-UnaryOperator 0x7fffd83a5c08 <col:23, col:52> 'stbtt_vertex *' prefix '&'
|   |   | | `-ArraySubscriptExpr 0x7fffd83a5be0 <col:24, col:52> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   | |   |-ImplicitCastExpr 0x7fffd83a5bb0 <col:24, col:27> 'stbtt_vertex *' <LValueToRValue>
|   |   | |   | `-MemberExpr 0x7fffd83a5b00 <col:24, col:27> 'stbtt_vertex *' lvalue ->pvertices 0x7fffd83a2db0
|   |   | |   |   `-ImplicitCastExpr 0x7fffd83a5ae8 <col:24> 'stbtt__csctx *' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x7fffd83a5ac0 <col:24> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a3f20 'c' 'stbtt__csctx *'
|   |   | |   `-ImplicitCastExpr 0x7fffd83a5bc8 <col:37, col:40> 'int' <LValueToRValue>
|   |   | |     `-MemberExpr 0x7fffd83a5b78 <col:37, col:40> 'int' lvalue ->num_vertices 0x7fffd83a2e10
|   |   | |       `-ImplicitCastExpr 0x7fffd83a5b60 <col:37> 'stbtt__csctx *' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x7fffd83a5b38 <col:37> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a3f20 'c' 'stbtt__csctx *'
|   |   | |-ImplicitCastExpr 0x7fffd83a5d60 <col:55> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x7fffd83a5c28 <col:55> 'stbtt_uint8':'unsigned char' lvalue ParmVar 0x7fffd83a4fb0 'type' 'stbtt_uint8':'unsigned char'
|   |   | |-ImplicitCastExpr 0x7fffd83a5d78 <col:61> 'stbtt_int32':'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x7fffd83a5c50 <col:61> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd83a5020 'x' 'stbtt_int32':'int'
|   |   | |-ImplicitCastExpr 0x7fffd83a5d90 <col:64> 'stbtt_int32':'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x7fffd83a5c78 <col:64> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd83a5090 'y' 'stbtt_int32':'int'
|   |   | |-ImplicitCastExpr 0x7fffd83a5da8 <col:67> 'stbtt_int32':'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x7fffd83a5ca0 <col:67> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd83a5100 'cx' 'stbtt_int32':'int'
|   |   | `-ImplicitCastExpr 0x7fffd83a5dc0 <col:71> 'stbtt_int32':'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x7fffd83a5cc8 <col:71> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd83a5170 'cy' 'stbtt_int32':'int'
|   |   |-BinaryOperator 0x7fffd83a5fd0 <line:1925:7, col:57> 'short' '='
|   |   | |-MemberExpr 0x7fffd83a5f20 <col:7, col:37> 'short' lvalue .cx1 0x7fffd8351958
|   |   | | `-ArraySubscriptExpr 0x7fffd83a5ef8 <col:7, col:35> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   | |   |-ImplicitCastExpr 0x7fffd83a5ec8 <col:7, col:10> 'stbtt_vertex *' <LValueToRValue>
|   |   | |   | `-MemberExpr 0x7fffd83a5e18 <col:7, col:10> 'stbtt_vertex *' lvalue ->pvertices 0x7fffd83a2db0
|   |   | |   |   `-ImplicitCastExpr 0x7fffd83a5e00 <col:7> 'stbtt__csctx *' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x7fffd83a5dd8 <col:7> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a3f20 'c' 'stbtt__csctx *'
|   |   | |   `-ImplicitCastExpr 0x7fffd83a5ee0 <col:20, col:23> 'int' <LValueToRValue>
|   |   | |     `-MemberExpr 0x7fffd83a5e90 <col:20, col:23> 'int' lvalue ->num_vertices 0x7fffd83a2e10
|   |   | |       `-ImplicitCastExpr 0x7fffd83a5e78 <col:20> 'stbtt__csctx *' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x7fffd83a5e50 <col:20> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a3f20 'c' 'stbtt__csctx *'
|   |   | `-CStyleCastExpr 0x7fffd83a5fa8 <col:43, col:57> 'stbtt_int16':'short' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x7fffd83a5f90 <col:57> 'stbtt_int32':'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x7fffd83a5f58 <col:57> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd83a51e0 'cx1' 'stbtt_int32':'int'
|   |   `-BinaryOperator 0x7fffd83a61f0 <line:1926:7, col:57> 'short' '='
|   |     |-MemberExpr 0x7fffd83a6140 <col:7, col:37> 'short' lvalue .cy1 0x7fffd83519b8
|   |     | `-ArraySubscriptExpr 0x7fffd83a6118 <col:7, col:35> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |     |   |-ImplicitCastExpr 0x7fffd83a60e8 <col:7, col:10> 'stbtt_vertex *' <LValueToRValue>
|   |     |   | `-MemberExpr 0x7fffd83a6038 <col:7, col:10> 'stbtt_vertex *' lvalue ->pvertices 0x7fffd83a2db0
|   |     |   |   `-ImplicitCastExpr 0x7fffd83a6020 <col:7> 'stbtt__csctx *' <LValueToRValue>
|   |     |   |     `-DeclRefExpr 0x7fffd83a5ff8 <col:7> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a3f20 'c' 'stbtt__csctx *'
|   |     |   `-ImplicitCastExpr 0x7fffd83a6100 <col:20, col:23> 'int' <LValueToRValue>
|   |     |     `-MemberExpr 0x7fffd83a60b0 <col:20, col:23> 'int' lvalue ->num_vertices 0x7fffd83a2e10
|   |     |       `-ImplicitCastExpr 0x7fffd83a6098 <col:20> 'stbtt__csctx *' <LValueToRValue>
|   |     |         `-DeclRefExpr 0x7fffd83a6070 <col:20> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a3f20 'c' 'stbtt__csctx *'
|   |     `-CStyleCastExpr 0x7fffd83a61c8 <col:43, col:57> 'stbtt_int16':'short' <IntegralCast>
|   |       `-ImplicitCastExpr 0x7fffd83a61b0 <col:57> 'stbtt_int32':'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x7fffd83a6178 <col:57> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd83a5250 'cy1' 'stbtt_int32':'int'
|   `-UnaryOperator 0x7fffd83a62f0 <line:1928:4, col:19> 'int' postfix '++'
|     `-MemberExpr 0x7fffd83a62b8 <col:4, col:7> 'int' lvalue ->num_vertices 0x7fffd83a2e10
|       `-ImplicitCastExpr 0x7fffd83a62a0 <col:4> 'stbtt__csctx *' <LValueToRValue>
|         `-DeclRefExpr 0x7fffd83a6278 <col:4> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a3f20 'c' 'stbtt__csctx *'
|-FunctionDecl 0x7fffd83a6440 <line:1931:1, line:1935:1> line:1931:13 used stbtt__csctx_close_shape 'void (stbtt__csctx *)' static
| |-ParmVarDecl 0x7fffd83a6340 <col:38, col:52> col:52 used ctx 'stbtt__csctx *'
| `-CompoundStmt 0x7fffd83a6b80 <line:1932:1, line:1935:1>
|   `-IfStmt 0x7fffd83a6b48 <line:1933:4, line:1934:88>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fffd83a6778 <line:1933:8, col:55> 'int' '||'
|     | |-BinaryOperator 0x7fffd83a6608 <col:8, col:29> 'int' '!='
|     | | |-ImplicitCastExpr 0x7fffd83a65d8 <col:8, col:13> 'float' <LValueToRValue>
|     | | | `-MemberExpr 0x7fffd83a6528 <col:8, col:13> 'float' lvalue ->first_x 0x7fffd83a2ad8
|     | | |   `-ImplicitCastExpr 0x7fffd83a6510 <col:8> 'stbtt__csctx *' <LValueToRValue>
|     | | |     `-DeclRefExpr 0x7fffd83a64e8 <col:8> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a6340 'ctx' 'stbtt__csctx *'
|     | | `-ImplicitCastExpr 0x7fffd83a65f0 <col:24, col:29> 'float' <LValueToRValue>
|     | |   `-MemberExpr 0x7fffd83a65a0 <col:24, col:29> 'float' lvalue ->x 0x7fffd83a2b98
|     | |     `-ImplicitCastExpr 0x7fffd83a6588 <col:24> 'stbtt__csctx *' <LValueToRValue>
|     | |       `-DeclRefExpr 0x7fffd83a6560 <col:24> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a6340 'ctx' 'stbtt__csctx *'
|     | `-BinaryOperator 0x7fffd83a6750 <col:34, col:55> 'int' '!='
|     |   |-ImplicitCastExpr 0x7fffd83a6720 <col:34, col:39> 'float' <LValueToRValue>
|     |   | `-MemberExpr 0x7fffd83a6670 <col:34, col:39> 'float' lvalue ->first_y 0x7fffd83a2b38
|     |   |   `-ImplicitCastExpr 0x7fffd83a6658 <col:34> 'stbtt__csctx *' <LValueToRValue>
|     |   |     `-DeclRefExpr 0x7fffd83a6630 <col:34> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a6340 'ctx' 'stbtt__csctx *'
|     |   `-ImplicitCastExpr 0x7fffd83a6738 <col:50, col:55> 'float' <LValueToRValue>
|     |     `-MemberExpr 0x7fffd83a66e8 <col:50, col:55> 'float' lvalue ->y 0x7fffd83a2bf8
|     |       `-ImplicitCastExpr 0x7fffd83a66d0 <col:50> 'stbtt__csctx *' <LValueToRValue>
|     |         `-DeclRefExpr 0x7fffd83a66a8 <col:50> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a6340 'ctx' 'stbtt__csctx *'
|     |-CallExpr 0x7fffd83a6ab0 <line:1934:7, col:88> 'void'
|     | |-ImplicitCastExpr 0x7fffd83a6a98 <col:7> 'void (*)(stbtt__csctx *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x7fffd83a67a0 <col:7> 'void (stbtt__csctx *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' Function 0x7fffd83a53f0 'stbtt__csctx_v' 'void (stbtt__csctx *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)'
|     | |-ImplicitCastExpr 0x7fffd83a6b18 <col:22> 'stbtt__csctx *' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fffd83a67c8 <col:22> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a6340 'ctx' 'stbtt__csctx *'
|     | |-ImplicitCastExpr 0x7fffd83a6b30 <col:27> 'stbtt_uint8':'unsigned char' <IntegralCast>
|     | | `-DeclRefExpr 0x7fffd83a67f0 <col:27> 'int' EnumConstant 0x7fffd8351638 'STBTT_vline' 'int'
|     | |-CStyleCastExpr 0x7fffd83a68c0 <col:40, col:50> 'int' <FloatingToIntegral>
|     | | `-ImplicitCastExpr 0x7fffd83a68a8 <col:45, col:50> 'float' <LValueToRValue>
|     | |   `-MemberExpr 0x7fffd83a6858 <col:45, col:50> 'float' lvalue ->first_x 0x7fffd83a2ad8
|     | |     `-ImplicitCastExpr 0x7fffd83a6840 <col:45> 'stbtt__csctx *' <LValueToRValue>
|     | |       `-DeclRefExpr 0x7fffd83a6818 <col:45> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a6340 'ctx' 'stbtt__csctx *'
|     | |-CStyleCastExpr 0x7fffd83a6990 <col:59, col:69> 'int' <FloatingToIntegral>
|     | | `-ImplicitCastExpr 0x7fffd83a6978 <col:64, col:69> 'float' <LValueToRValue>
|     | |   `-MemberExpr 0x7fffd83a6928 <col:64, col:69> 'float' lvalue ->first_y 0x7fffd83a2b38
|     | |     `-ImplicitCastExpr 0x7fffd83a6910 <col:64> 'stbtt__csctx *' <LValueToRValue>
|     | |       `-DeclRefExpr 0x7fffd83a68e8 <col:64> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a6340 'ctx' 'stbtt__csctx *'
|     | |-IntegerLiteral 0x7fffd83a69b8 <col:78> 'int' 0
|     | |-IntegerLiteral 0x7fffd83a69d8 <col:81> 'int' 0
|     | |-IntegerLiteral 0x7fffd83a69f8 <col:84> 'int' 0
|     | `-IntegerLiteral 0x7fffd83a6a18 <col:87> 'int' 0
|     `-<<<NULL>>>
|-FunctionDecl 0x7fffd83a6dd0 <line:1937:1, line:1943:1> line:1937:13 used stbtt__csctx_rmove_to 'void (stbtt__csctx *, float, float)' static
| |-ParmVarDecl 0x7fffd83a6ba8 <col:35, col:49> col:49 used ctx 'stbtt__csctx *'
| |-ParmVarDecl 0x7fffd83a6c20 <col:54, col:60> col:60 used dx 'float'
| |-ParmVarDecl 0x7fffd83a6c98 <col:64, col:70> col:70 used dy 'float'
| `-CompoundStmt 0x7fffd83a8168 <line:1938:1, line:1943:1>
|   |-CallExpr 0x7fffd83a6f50 <line:1939:4, col:32> 'void'
|   | |-ImplicitCastExpr 0x7fffd83a6f38 <col:4> 'void (*)(stbtt__csctx *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fffd83a6e88 <col:4> 'void (stbtt__csctx *)' Function 0x7fffd83a6440 'stbtt__csctx_close_shape' 'void (stbtt__csctx *)'
|   | `-ImplicitCastExpr 0x7fffd83a6f80 <col:29> 'stbtt__csctx *' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd83a6eb0 <col:29> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a6ba8 'ctx' 'stbtt__csctx *'
|   |-BinaryOperator 0x7fffd83a7bc0 <line:1940:4, col:37> 'float' '='
|   | |-MemberExpr 0x7fffd83a79f0 <col:4, col:9> 'float' lvalue ->first_x 0x7fffd83a2ad8
|   | | `-ImplicitCastExpr 0x7fffd83a79d8 <col:4> 'stbtt__csctx *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83a79b0 <col:4> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a6ba8 'ctx' 'stbtt__csctx *'
|   | `-BinaryOperator 0x7fffd83a7b98 <col:19, col:37> 'float' '='
|   |   |-MemberExpr 0x7fffd83a7a68 <col:19, col:24> 'float' lvalue ->x 0x7fffd83a2b98
|   |   | `-ImplicitCastExpr 0x7fffd83a7a50 <col:19> 'stbtt__csctx *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x7fffd83a7a28 <col:19> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a6ba8 'ctx' 'stbtt__csctx *'
|   |   `-BinaryOperator 0x7fffd83a7b70 <col:28, col:37> 'float' '+'
|   |     |-ImplicitCastExpr 0x7fffd83a7b40 <col:28, col:33> 'float' <LValueToRValue>
|   |     | `-MemberExpr 0x7fffd83a7ae0 <col:28, col:33> 'float' lvalue ->x 0x7fffd83a2b98
|   |     |   `-ImplicitCastExpr 0x7fffd83a7ac8 <col:28> 'stbtt__csctx *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x7fffd83a7aa0 <col:28> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a6ba8 'ctx' 'stbtt__csctx *'
|   |     `-ImplicitCastExpr 0x7fffd83a7b58 <col:37> 'float' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd83a7b18 <col:37> 'float' lvalue ParmVar 0x7fffd83a6c20 'dx' 'float'
|   |-BinaryOperator 0x7fffd83a7df8 <line:1941:4, col:37> 'float' '='
|   | |-MemberExpr 0x7fffd83a7c28 <col:4, col:9> 'float' lvalue ->first_y 0x7fffd83a2b38
|   | | `-ImplicitCastExpr 0x7fffd83a7c10 <col:4> 'stbtt__csctx *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83a7be8 <col:4> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a6ba8 'ctx' 'stbtt__csctx *'
|   | `-BinaryOperator 0x7fffd83a7dd0 <col:19, col:37> 'float' '='
|   |   |-MemberExpr 0x7fffd83a7ca0 <col:19, col:24> 'float' lvalue ->y 0x7fffd83a2bf8
|   |   | `-ImplicitCastExpr 0x7fffd83a7c88 <col:19> 'stbtt__csctx *' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x7fffd83a7c60 <col:19> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a6ba8 'ctx' 'stbtt__csctx *'
|   |   `-BinaryOperator 0x7fffd83a7da8 <col:28, col:37> 'float' '+'
|   |     |-ImplicitCastExpr 0x7fffd83a7d78 <col:28, col:33> 'float' <LValueToRValue>
|   |     | `-MemberExpr 0x7fffd83a7d18 <col:28, col:33> 'float' lvalue ->y 0x7fffd83a2bf8
|   |     |   `-ImplicitCastExpr 0x7fffd83a7d00 <col:28> 'stbtt__csctx *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x7fffd83a7cd8 <col:28> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a6ba8 'ctx' 'stbtt__csctx *'
|   |     `-ImplicitCastExpr 0x7fffd83a7d90 <col:37> 'float' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd83a7d50 <col:37> 'float' lvalue ParmVar 0x7fffd83a6c98 'dy' 'float'
|   `-CallExpr 0x7fffd83a80d0 <line:1942:4, col:73> 'void'
|     |-ImplicitCastExpr 0x7fffd83a80b8 <col:4> 'void (*)(stbtt__csctx *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x7fffd83a7e20 <col:4> 'void (stbtt__csctx *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' Function 0x7fffd83a53f0 'stbtt__csctx_v' 'void (stbtt__csctx *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)'
|     |-ImplicitCastExpr 0x7fffd83a8138 <col:19> 'stbtt__csctx *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83a7e48 <col:19> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a6ba8 'ctx' 'stbtt__csctx *'
|     |-ImplicitCastExpr 0x7fffd83a8150 <col:24> 'stbtt_uint8':'unsigned char' <IntegralCast>
|     | `-DeclRefExpr 0x7fffd83a7e70 <col:24> 'int' EnumConstant 0x7fffd83515f0 'STBTT_vmove' 'int'
|     |-CStyleCastExpr 0x7fffd83a7f40 <col:37, col:47> 'int' <FloatingToIntegral>
|     | `-ImplicitCastExpr 0x7fffd83a7f28 <col:42, col:47> 'float' <LValueToRValue>
|     |   `-MemberExpr 0x7fffd83a7ed8 <col:42, col:47> 'float' lvalue ->x 0x7fffd83a2b98
|     |     `-ImplicitCastExpr 0x7fffd83a7ec0 <col:42> 'stbtt__csctx *' <LValueToRValue>
|     |       `-DeclRefExpr 0x7fffd83a7e98 <col:42> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a6ba8 'ctx' 'stbtt__csctx *'
|     |-CStyleCastExpr 0x7fffd83a8010 <col:50, col:60> 'int' <FloatingToIntegral>
|     | `-ImplicitCastExpr 0x7fffd83a7ff8 <col:55, col:60> 'float' <LValueToRValue>
|     |   `-MemberExpr 0x7fffd83a7fa8 <col:55, col:60> 'float' lvalue ->y 0x7fffd83a2bf8
|     |     `-ImplicitCastExpr 0x7fffd83a7f90 <col:55> 'stbtt__csctx *' <LValueToRValue>
|     |       `-DeclRefExpr 0x7fffd83a7f68 <col:55> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a6ba8 'ctx' 'stbtt__csctx *'
|     |-IntegerLiteral 0x7fffd83a8038 <col:63> 'int' 0
|     |-IntegerLiteral 0x7fffd83a8058 <col:66> 'int' 0
|     |-IntegerLiteral 0x7fffd83a8078 <col:69> 'int' 0
|     `-IntegerLiteral 0x7fffd83a8098 <col:72> 'int' 0
|-FunctionDecl 0x7fffd83a8330 <line:1945:1, line:1950:1> line:1945:13 used stbtt__csctx_rline_to 'void (stbtt__csctx *, float, float)' static
| |-ParmVarDecl 0x7fffd83a81a8 <col:35, col:49> col:49 used ctx 'stbtt__csctx *'
| |-ParmVarDecl 0x7fffd83a8220 <col:54, col:60> col:60 used dx 'float'
| |-ParmVarDecl 0x7fffd83a8298 <col:64, col:70> col:70 used dy 'float'
| `-CompoundStmt 0x7fffd83a8910 <line:1946:1, line:1950:1>
|   |-CompoundAssignOperator 0x7fffd83a84a0 <line:1947:4, col:14> 'float' '+=' ComputeLHSTy='float' ComputeResultTy='float'
|   | |-MemberExpr 0x7fffd83a8428 <col:4, col:9> 'float' lvalue ->x 0x7fffd83a2b98
|   | | `-ImplicitCastExpr 0x7fffd83a8410 <col:4> 'stbtt__csctx *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83a83e8 <col:4> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a81a8 'ctx' 'stbtt__csctx *'
|   | `-ImplicitCastExpr 0x7fffd83a8488 <col:14> 'float' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd83a8460 <col:14> 'float' lvalue ParmVar 0x7fffd83a8220 'dx' 'float'
|   |-CompoundAssignOperator 0x7fffd83a8590 <line:1948:4, col:14> 'float' '+=' ComputeLHSTy='float' ComputeResultTy='float'
|   | |-MemberExpr 0x7fffd83a8518 <col:4, col:9> 'float' lvalue ->y 0x7fffd83a2bf8
|   | | `-ImplicitCastExpr 0x7fffd83a8500 <col:4> 'stbtt__csctx *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83a84d8 <col:4> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a81a8 'ctx' 'stbtt__csctx *'
|   | `-ImplicitCastExpr 0x7fffd83a8578 <col:14> 'float' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd83a8550 <col:14> 'float' lvalue ParmVar 0x7fffd83a8298 'dy' 'float'
|   `-CallExpr 0x7fffd83a8878 <line:1949:4, col:73> 'void'
|     |-ImplicitCastExpr 0x7fffd83a8860 <col:4> 'void (*)(stbtt__csctx *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x7fffd83a85c8 <col:4> 'void (stbtt__csctx *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' Function 0x7fffd83a53f0 'stbtt__csctx_v' 'void (stbtt__csctx *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)'
|     |-ImplicitCastExpr 0x7fffd83a88e0 <col:19> 'stbtt__csctx *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83a85f0 <col:19> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a81a8 'ctx' 'stbtt__csctx *'
|     |-ImplicitCastExpr 0x7fffd83a88f8 <col:24> 'stbtt_uint8':'unsigned char' <IntegralCast>
|     | `-DeclRefExpr 0x7fffd83a8618 <col:24> 'int' EnumConstant 0x7fffd8351638 'STBTT_vline' 'int'
|     |-CStyleCastExpr 0x7fffd83a86e8 <col:37, col:47> 'int' <FloatingToIntegral>
|     | `-ImplicitCastExpr 0x7fffd83a86d0 <col:42, col:47> 'float' <LValueToRValue>
|     |   `-MemberExpr 0x7fffd83a8680 <col:42, col:47> 'float' lvalue ->x 0x7fffd83a2b98
|     |     `-ImplicitCastExpr 0x7fffd83a8668 <col:42> 'stbtt__csctx *' <LValueToRValue>
|     |       `-DeclRefExpr 0x7fffd83a8640 <col:42> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a81a8 'ctx' 'stbtt__csctx *'
|     |-CStyleCastExpr 0x7fffd83a87b8 <col:50, col:60> 'int' <FloatingToIntegral>
|     | `-ImplicitCastExpr 0x7fffd83a87a0 <col:55, col:60> 'float' <LValueToRValue>
|     |   `-MemberExpr 0x7fffd83a8750 <col:55, col:60> 'float' lvalue ->y 0x7fffd83a2bf8
|     |     `-ImplicitCastExpr 0x7fffd83a8738 <col:55> 'stbtt__csctx *' <LValueToRValue>
|     |       `-DeclRefExpr 0x7fffd83a8710 <col:55> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a81a8 'ctx' 'stbtt__csctx *'
|     |-IntegerLiteral 0x7fffd83a87e0 <col:63> 'int' 0
|     |-IntegerLiteral 0x7fffd83a8800 <col:66> 'int' 0
|     |-IntegerLiteral 0x7fffd83a8820 <col:69> 'int' 0
|     `-IntegerLiteral 0x7fffd83a8840 <col:72> 'int' 0
|-FunctionDecl 0x7fffd83a8db0 <line:1952:1, line:1961:1> line:1952:13 used stbtt__csctx_rccurve_to 'void (stbtt__csctx *, float, float, float, float, float, float)' static
| |-ParmVarDecl 0x7fffd83a8948 <col:37, col:51> col:51 used ctx 'stbtt__csctx *'
| |-ParmVarDecl 0x7fffd83a89c0 <col:56, col:62> col:62 used dx1 'float'
| |-ParmVarDecl 0x7fffd83a8a38 <col:67, col:73> col:73 used dy1 'float'
| |-ParmVarDecl 0x7fffd83a8ab0 <col:78, col:84> col:84 used dx2 'float'
| |-ParmVarDecl 0x7fffd83a8b28 <col:89, col:95> col:95 used dy2 'float'
| |-ParmVarDecl 0x7fffd83a8ba0 <col:100, col:106> col:106 used dx3 'float'
| |-ParmVarDecl 0x7fffd83a8c18 <col:111, col:117> col:117 used dy3 'float'
| `-CompoundStmt 0x7fffd83a9b70 <line:1953:1, line:1961:1>
|   |-DeclStmt 0x7fffd83a8ff8 <line:1954:4, col:28>
|   | `-VarDecl 0x7fffd83a8ea0 <col:4, col:25> col:10 used cx1 'float' cinit
|   |   `-BinaryOperator 0x7fffd83a8fd0 <col:16, col:25> 'float' '+'
|   |     |-ImplicitCastExpr 0x7fffd83a8fa0 <col:16, col:21> 'float' <LValueToRValue>
|   |     | `-MemberExpr 0x7fffd83a8f40 <col:16, col:21> 'float' lvalue ->x 0x7fffd83a2b98
|   |     |   `-ImplicitCastExpr 0x7fffd83a8f28 <col:16> 'stbtt__csctx *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x7fffd83a8f00 <col:16> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a8948 'ctx' 'stbtt__csctx *'
|   |     `-ImplicitCastExpr 0x7fffd83a8fb8 <col:25> 'float' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd83a8f78 <col:25> 'float' lvalue ParmVar 0x7fffd83a89c0 'dx1' 'float'
|   |-DeclStmt 0x7fffd83a9180 <line:1955:4, col:28>
|   | `-VarDecl 0x7fffd83a9028 <col:4, col:25> col:10 used cy1 'float' cinit
|   |   `-BinaryOperator 0x7fffd83a9158 <col:16, col:25> 'float' '+'
|   |     |-ImplicitCastExpr 0x7fffd83a9128 <col:16, col:21> 'float' <LValueToRValue>
|   |     | `-MemberExpr 0x7fffd83a90c8 <col:16, col:21> 'float' lvalue ->y 0x7fffd83a2bf8
|   |     |   `-ImplicitCastExpr 0x7fffd83a90b0 <col:16> 'stbtt__csctx *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x7fffd83a9088 <col:16> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a8948 'ctx' 'stbtt__csctx *'
|   |     `-ImplicitCastExpr 0x7fffd83a9140 <col:25> 'float' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd83a9100 <col:25> 'float' lvalue ParmVar 0x7fffd83a8a38 'dy1' 'float'
|   |-DeclStmt 0x7fffd83a92b8 <line:1956:4, col:25>
|   | `-VarDecl 0x7fffd83a91b0 <col:4, col:22> col:10 used cx2 'float' cinit
|   |   `-BinaryOperator 0x7fffd83a9290 <col:16, col:22> 'float' '+'
|   |     |-ImplicitCastExpr 0x7fffd83a9260 <col:16> 'float' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd83a9210 <col:16> 'float' lvalue Var 0x7fffd83a8ea0 'cx1' 'float'
|   |     `-ImplicitCastExpr 0x7fffd83a9278 <col:22> 'float' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd83a9238 <col:22> 'float' lvalue ParmVar 0x7fffd83a8ab0 'dx2' 'float'
|   |-DeclStmt 0x7fffd83a93f0 <line:1957:4, col:25>
|   | `-VarDecl 0x7fffd83a92e8 <col:4, col:22> col:10 used cy2 'float' cinit
|   |   `-BinaryOperator 0x7fffd83a93c8 <col:16, col:22> 'float' '+'
|   |     |-ImplicitCastExpr 0x7fffd83a9398 <col:16> 'float' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd83a9348 <col:16> 'float' lvalue Var 0x7fffd83a9028 'cy1' 'float'
|   |     `-ImplicitCastExpr 0x7fffd83a93b0 <col:22> 'float' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd83a9370 <col:22> 'float' lvalue ParmVar 0x7fffd83a8b28 'dy2' 'float'
|   |-BinaryOperator 0x7fffd83a9528 <line:1958:4, col:19> 'float' '='
|   | |-MemberExpr 0x7fffd83a9448 <col:4, col:9> 'float' lvalue ->x 0x7fffd83a2b98
|   | | `-ImplicitCastExpr 0x7fffd83a9430 <col:4> 'stbtt__csctx *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83a9408 <col:4> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a8948 'ctx' 'stbtt__csctx *'
|   | `-BinaryOperator 0x7fffd83a9500 <col:13, col:19> 'float' '+'
|   |   |-ImplicitCastExpr 0x7fffd83a94d0 <col:13> 'float' <LValueToRValue>
|   |   | `-DeclRefExpr 0x7fffd83a9480 <col:13> 'float' lvalue Var 0x7fffd83a91b0 'cx2' 'float'
|   |   `-ImplicitCastExpr 0x7fffd83a94e8 <col:19> 'float' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd83a94a8 <col:19> 'float' lvalue ParmVar 0x7fffd83a8ba0 'dx3' 'float'
|   |-BinaryOperator 0x7fffd83a9670 <line:1959:4, col:19> 'float' '='
|   | |-MemberExpr 0x7fffd83a9590 <col:4, col:9> 'float' lvalue ->y 0x7fffd83a2bf8
|   | | `-ImplicitCastExpr 0x7fffd83a9578 <col:4> 'stbtt__csctx *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83a9550 <col:4> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a8948 'ctx' 'stbtt__csctx *'
|   | `-BinaryOperator 0x7fffd83a9648 <col:13, col:19> 'float' '+'
|   |   |-ImplicitCastExpr 0x7fffd83a9618 <col:13> 'float' <LValueToRValue>
|   |   | `-DeclRefExpr 0x7fffd83a95c8 <col:13> 'float' lvalue Var 0x7fffd83a92e8 'cy2' 'float'
|   |   `-ImplicitCastExpr 0x7fffd83a9630 <col:19> 'float' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd83a95f0 <col:19> 'float' lvalue ParmVar 0x7fffd83a8c18 'dy3' 'float'
|   `-CallExpr 0x7fffd83a9ad8 <line:1960:4, col:102> 'void'
|     |-ImplicitCastExpr 0x7fffd83a9ac0 <col:4> 'void (*)(stbtt__csctx *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x7fffd83a9698 <col:4> 'void (stbtt__csctx *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)' Function 0x7fffd83a53f0 'stbtt__csctx_v' 'void (stbtt__csctx *, stbtt_uint8, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32, stbtt_int32)'
|     |-ImplicitCastExpr 0x7fffd83a9b40 <col:19> 'stbtt__csctx *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83a96c0 <col:19> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a8948 'ctx' 'stbtt__csctx *'
|     |-ImplicitCastExpr 0x7fffd83a9b58 <col:24> 'stbtt_uint8':'unsigned char' <IntegralCast>
|     | `-DeclRefExpr 0x7fffd83a96e8 <col:24> 'int' EnumConstant 0x7fffd83516c8 'STBTT_vcubic' 'int'
|     |-CStyleCastExpr 0x7fffd83a97b8 <col:38, col:48> 'int' <FloatingToIntegral>
|     | `-ImplicitCastExpr 0x7fffd83a97a0 <col:43, col:48> 'float' <LValueToRValue>
|     |   `-MemberExpr 0x7fffd83a9750 <col:43, col:48> 'float' lvalue ->x 0x7fffd83a2b98
|     |     `-ImplicitCastExpr 0x7fffd83a9738 <col:43> 'stbtt__csctx *' <LValueToRValue>
|     |       `-DeclRefExpr 0x7fffd83a9710 <col:43> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a8948 'ctx' 'stbtt__csctx *'
|     |-CStyleCastExpr 0x7fffd83a9888 <col:51, col:61> 'int' <FloatingToIntegral>
|     | `-ImplicitCastExpr 0x7fffd83a9870 <col:56, col:61> 'float' <LValueToRValue>
|     |   `-MemberExpr 0x7fffd83a9820 <col:56, col:61> 'float' lvalue ->y 0x7fffd83a2bf8
|     |     `-ImplicitCastExpr 0x7fffd83a9808 <col:56> 'stbtt__csctx *' <LValueToRValue>
|     |       `-DeclRefExpr 0x7fffd83a97e0 <col:56> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83a8948 'ctx' 'stbtt__csctx *'
|     |-CStyleCastExpr 0x7fffd83a9908 <col:64, col:69> 'int' <FloatingToIntegral>
|     | `-ImplicitCastExpr 0x7fffd83a98f0 <col:69> 'float' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fffd83a98b0 <col:69> 'float' lvalue Var 0x7fffd83a8ea0 'cx1' 'float'
|     |-CStyleCastExpr 0x7fffd83a9988 <col:74, col:79> 'int' <FloatingToIntegral>
|     | `-ImplicitCastExpr 0x7fffd83a9970 <col:79> 'float' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fffd83a9930 <col:79> 'float' lvalue Var 0x7fffd83a9028 'cy1' 'float'
|     |-CStyleCastExpr 0x7fffd83a9a18 <col:84, col:89> 'int' <FloatingToIntegral>
|     | `-ImplicitCastExpr 0x7fffd83a9a00 <col:89> 'float' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fffd83a99c0 <col:89> 'float' lvalue Var 0x7fffd83a91b0 'cx2' 'float'
|     `-CStyleCastExpr 0x7fffd83a9a98 <col:94, col:99> 'int' <FloatingToIntegral>
|       `-ImplicitCastExpr 0x7fffd83a9a80 <col:99> 'float' <LValueToRValue>
|         `-DeclRefExpr 0x7fffd83a9a40 <col:99> 'float' lvalue Var 0x7fffd83a92e8 'cy2' 'float'
|-FunctionDecl 0x7fffd83a9cd0 <line:1963:1, line:1975:1> line:1963:19 used stbtt__get_subr 'stbtt__buf (stbtt__buf, int)' static
| |-ParmVarDecl 0x7fffd83a9bc8 <col:35, col:46> col:46 used idx 'stbtt__buf':'stbtt__buf'
| |-ParmVarDecl 0x7fffd83a9c40 <col:51, col:55> col:55 used n 'int'
| `-CompoundStmt 0x7fffd83aa6d8 <line:1964:1, line:1975:1>
|   |-DeclStmt 0x7fffd83a9f10 <line:1965:4, col:44>
|   | `-VarDecl 0x7fffd83a9d98 <col:4, col:43> col:8 used count 'int' cinit
|   |   `-CallExpr 0x7fffd83a9ee0 <col:16, col:43> 'int'
|   |     |-ImplicitCastExpr 0x7fffd83a9ec8 <col:16> 'int (*)(stbtt__buf *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd83a9df8 <col:16> 'int (stbtt__buf *)' Function 0x7fffd836e858 'stbtt__cff_index_count' 'int (stbtt__buf *)'
|   |     `-UnaryOperator 0x7fffd83a9e48 <col:39, col:40> 'stbtt__buf *' prefix '&'
|   |       `-DeclRefExpr 0x7fffd83a9e20 <col:40> 'stbtt__buf':'stbtt__buf' lvalue ParmVar 0x7fffd83a9bc8 'idx' 'stbtt__buf':'stbtt__buf'
|   |-DeclStmt 0x7fffd83a9fc0 <line:1966:4, col:18>
|   | `-VarDecl 0x7fffd83a9f40 <col:4, col:15> col:8 used bias 'int' cinit
|   |   `-IntegerLiteral 0x7fffd83a9fa0 <col:15> 'int' 107
|   |-IfStmt 0x7fffd83aa200 <line:1967:4, line:1970:14>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83aa038 <line:1967:8, col:17> 'int' '>='
|   | | |-ImplicitCastExpr 0x7fffd83aa020 <col:8> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd83a9fd8 <col:8> 'int' lvalue Var 0x7fffd83a9d98 'count' 'int'
|   | | `-IntegerLiteral 0x7fffd83aa000 <col:17> 'int' 33900
|   | |-BinaryOperator 0x7fffd83aa0a8 <line:1968:7, col:14> 'int' '='
|   | | |-DeclRefExpr 0x7fffd83aa060 <col:7> 'int' lvalue Var 0x7fffd83a9f40 'bias' 'int'
|   | | `-IntegerLiteral 0x7fffd83aa088 <col:14> 'int' 32768
|   | `-IfStmt 0x7fffd83aa1c8 <line:1969:9, line:1970:14>
|   |   |-<<<NULL>>>
|   |   |-<<<NULL>>>
|   |   |-BinaryOperator 0x7fffd83aa130 <line:1969:13, col:22> 'int' '>='
|   |   | |-ImplicitCastExpr 0x7fffd83aa118 <col:13> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x7fffd83aa0d0 <col:13> 'int' lvalue Var 0x7fffd83a9d98 'count' 'int'
|   |   | `-IntegerLiteral 0x7fffd83aa0f8 <col:22> 'int' 1240
|   |   |-BinaryOperator 0x7fffd83aa1a0 <line:1970:7, col:14> 'int' '='
|   |   | |-DeclRefExpr 0x7fffd83aa158 <col:7> 'int' lvalue Var 0x7fffd83a9f40 'bias' 'int'
|   |   | `-IntegerLiteral 0x7fffd83aa180 <col:14> 'int' 1131
|   |   `-<<<NULL>>>
|   |-CompoundAssignOperator 0x7fffd83aa2a0 <line:1971:4, col:9> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x7fffd83aa238 <col:4> 'int' lvalue ParmVar 0x7fffd83a9c40 'n' 'int'
|   | `-ImplicitCastExpr 0x7fffd83aa288 <col:9> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd83aa260 <col:9> 'int' lvalue Var 0x7fffd83a9f40 'bias' 'int'
|   |-IfStmt 0x7fffd83aa590 <line:1972:4, line:1973:36>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83aa408 <line:1972:8, col:22> 'int' '||'
|   | | |-BinaryOperator 0x7fffd83aa338 <col:8, col:12> 'int' '<'
|   | | | |-ImplicitCastExpr 0x7fffd83aa320 <col:8> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x7fffd83aa2d8 <col:8> 'int' lvalue ParmVar 0x7fffd83a9c40 'n' 'int'
|   | | | `-IntegerLiteral 0x7fffd83aa300 <col:12> 'int' 0
|   | | `-BinaryOperator 0x7fffd83aa3e0 <col:17, col:22> 'int' '>='
|   | |   |-ImplicitCastExpr 0x7fffd83aa3b0 <col:17> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd83aa360 <col:17> 'int' lvalue ParmVar 0x7fffd83a9c40 'n' 'int'
|   | |   `-ImplicitCastExpr 0x7fffd83aa3c8 <col:22> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x7fffd83aa388 <col:22> 'int' lvalue Var 0x7fffd83a9d98 'count' 'int'
|   | |-ReturnStmt 0x7fffd83aa578 <line:1973:7, col:36>
|   | | `-CallExpr 0x7fffd83aa510 <col:14, col:36> 'stbtt__buf':'stbtt__buf'
|   | |   |-ImplicitCastExpr 0x7fffd83aa4f8 <col:14> 'stbtt__buf (*)(const void *, size_t)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x7fffd83aa430 <col:14> 'stbtt__buf (const void *, size_t)' Function 0x7fffd8362750 'stbtt__new_buf' 'stbtt__buf (const void *, size_t)'
|   | |   |-ImplicitCastExpr 0x7fffd83aa548 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'const void *' <NullToPointer>
|   | |   | `-ParenExpr 0x7fffd83aa4b8 <col:16, col:25> 'void *'
|   | |   |   `-CStyleCastExpr 0x7fffd83aa490 <col:17, col:24> 'void *' <NullToPointer>
|   | |   |     `-IntegerLiteral 0x7fffd83aa458 <col:24> 'int' 0
|   | |   `-ImplicitCastExpr 0x7fffd83aa560 <././stb/stb_truetype.h:1973:35> 'size_t':'unsigned long' <IntegralCast>
|   | |     `-IntegerLiteral 0x7fffd83aa4d8 <col:35> 'int' 0
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x7fffd83aa6c0 <line:1974:4, col:38>
|     `-CallExpr 0x7fffd83aa658 <col:11, col:38> 'stbtt__buf':'stbtt__buf'
|       |-ImplicitCastExpr 0x7fffd83aa640 <col:11> 'stbtt__buf (*)(stbtt__buf, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x7fffd83aa5c8 <col:11> 'stbtt__buf (stbtt__buf, int)' Function 0x7fffd836ecc0 'stbtt__cff_index_get' 'stbtt__buf (stbtt__buf, int)'
|       |-ImplicitCastExpr 0x7fffd83aa690 <col:32> 'stbtt__buf':'stbtt__buf' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd83aa5f0 <col:32> 'stbtt__buf':'stbtt__buf' lvalue ParmVar 0x7fffd83a9bc8 'idx' 'stbtt__buf':'stbtt__buf'
|       `-ImplicitCastExpr 0x7fffd83aa6a8 <col:37> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x7fffd83aa618 <col:37> 'int' lvalue ParmVar 0x7fffd83a9c40 'n' 'int'
|-FunctionDecl 0x7fffd83aa8b0 <line:1977:1, line:2003:1> line:1977:19 used stbtt__cid_get_glyph_subrs 'stbtt__buf (const stbtt_fontinfo *, int)' static
| |-ParmVarDecl 0x7fffd83aa728 <col:46, col:68> col:68 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83aa7a0 <col:74, col:78> col:78 used glyph_index 'int'
| `-CompoundStmt 0x7fffd83ac308 <line:1978:1, line:2003:1>
|   |-DeclStmt 0x7fffd83aaa60 <line:1979:4, col:40>
|   | `-VarDecl 0x7fffd83aa970 <col:4, col:32> col:15 used fdselect 'stbtt__buf':'stbtt__buf' cinit
|   |   `-ImplicitCastExpr 0x7fffd83aaa48 <col:26, col:32> 'stbtt__buf':'stbtt__buf' <LValueToRValue>
|   |     `-MemberExpr 0x7fffd83aaa10 <col:26, col:32> 'const stbtt__buf':'const stbtt__buf' lvalue ->fdselect 0x7fffd834d2c0
|   |       `-ImplicitCastExpr 0x7fffd83aa9f8 <col:26> 'const stbtt_fontinfo *' <LValueToRValue>
|   |         `-DeclRefExpr 0x7fffd83aa9d0 <col:26> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83aa728 'info' 'const stbtt_fontinfo *'
|   |-DeclStmt 0x7fffd83aae40 <line:1980:4, col:55>
|   | |-VarDecl 0x7fffd83aaa90 <col:4, col:8> col:8 used nranges 'int'
|   | |-VarDecl 0x7fffd83aab08 <col:4, col:17> col:17 used start 'int'
|   | |-VarDecl 0x7fffd83aab80 <col:4, col:24> col:24 used end 'int'
|   | |-VarDecl 0x7fffd83aabf8 <col:4, col:29> col:29 used v 'int'
|   | |-VarDecl 0x7fffd83aac70 <col:4, col:32> col:32 used fmt 'int'
|   | |-VarDecl 0x7fffd83aace8 <col:4, col:51> col:37 used fdselector 'int' cinit
|   | | `-UnaryOperator 0x7fffd83aad68 <col:50, col:51> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x7fffd83aad48 <col:51> 'int' 1
|   | `-VarDecl 0x7fffd83aada0 <col:4, col:54> col:54 used i 'int'
|   |-CallExpr 0x7fffd83aaf00 <line:1982:4, col:32> 'void'
|   | |-ImplicitCastExpr 0x7fffd83aaee8 <col:4> 'void (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fffd83aae58 <col:4> 'void (stbtt__buf *, int)' Function 0x7fffd8360530 'stbtt__buf_seek' 'void (stbtt__buf *, int)'
|   | |-UnaryOperator 0x7fffd83aaea8 <col:20, col:21> 'stbtt__buf *' prefix '&'
|   | | `-DeclRefExpr 0x7fffd83aae80 <col:21> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83aa970 'fdselect' 'stbtt__buf':'stbtt__buf'
|   | `-IntegerLiteral 0x7fffd83aaec8 <col:31> 'int' 0
|   |-BinaryOperator 0x7fffd83ab030 <line:1983:4, col:35> 'int' '='
|   | |-DeclRefExpr 0x7fffd83aaf38 <col:4> 'int' lvalue Var 0x7fffd83aac70 'fmt' 'int'
|   | `-ImplicitCastExpr 0x7fffd83ab018 <col:10, col:35> 'int' <IntegralCast>
|   |   `-CallExpr 0x7fffd83aafe8 <col:10, col:35> 'stbtt_uint8':'unsigned char'
|   |     |-ImplicitCastExpr 0x7fffd83aafd0 <col:10> 'stbtt_uint8 (*)(stbtt__buf *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd83aaf60 <col:10> 'stbtt_uint8 (stbtt__buf *)' Function 0x7fffd835fad0 'stbtt__buf_get8' 'stbtt_uint8 (stbtt__buf *)'
|   |     `-UnaryOperator 0x7fffd83aafb0 <col:26, col:27> 'stbtt__buf *' prefix '&'
|   |       `-DeclRefExpr 0x7fffd83aaf88 <col:27> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83aa970 'fdselect' 'stbtt__buf':'stbtt__buf'
|   |-IfStmt 0x7fffd83abe40 <line:1984:4, line:2000:4>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83ab0b8 <line:1984:8, col:15> 'int' '=='
|   | | |-ImplicitCastExpr 0x7fffd83ab0a0 <col:8> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd83ab058 <col:8> 'int' lvalue Var 0x7fffd83aac70 'fmt' 'int'
|   | | `-IntegerLiteral 0x7fffd83ab080 <col:15> 'int' 0
|   | |-CompoundStmt 0x7fffd83ab300 <col:18, line:1988:4>
|   | | |-CallExpr 0x7fffd83ab190 <line:1986:7, col:45> 'void'
|   | | | |-ImplicitCastExpr 0x7fffd83ab178 <col:7> 'void (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x7fffd83ab0e0 <col:7> 'void (stbtt__buf *, int)' Function 0x7fffd8361388 'stbtt__buf_skip' 'void (stbtt__buf *, int)'
|   | | | |-UnaryOperator 0x7fffd83ab130 <col:23, col:24> 'stbtt__buf *' prefix '&'
|   | | | | `-DeclRefExpr 0x7fffd83ab108 <col:24> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83aa970 'fdselect' 'stbtt__buf':'stbtt__buf'
|   | | | `-ImplicitCastExpr 0x7fffd83ab1c8 <col:34> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd83ab150 <col:34> 'int' lvalue ParmVar 0x7fffd83aa7a0 'glyph_index' 'int'
|   | | `-BinaryOperator 0x7fffd83ab2d8 <line:1987:7, col:45> 'int' '='
|   | |   |-DeclRefExpr 0x7fffd83ab1e0 <col:7> 'int' lvalue Var 0x7fffd83aace8 'fdselector' 'int'
|   | |   `-ImplicitCastExpr 0x7fffd83ab2c0 <col:20, col:45> 'int' <IntegralCast>
|   | |     `-CallExpr 0x7fffd83ab290 <col:20, col:45> 'stbtt_uint8':'unsigned char'
|   | |       |-ImplicitCastExpr 0x7fffd83ab278 <col:20> 'stbtt_uint8 (*)(stbtt__buf *)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x7fffd83ab208 <col:20> 'stbtt_uint8 (stbtt__buf *)' Function 0x7fffd835fad0 'stbtt__buf_get8' 'stbtt_uint8 (stbtt__buf *)'
|   | |       `-UnaryOperator 0x7fffd83ab258 <col:36, col:37> 'stbtt__buf *' prefix '&'
|   | |         `-DeclRefExpr 0x7fffd83ab230 <col:37> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83aa970 'fdselect' 'stbtt__buf':'stbtt__buf'
|   | `-IfStmt 0x7fffd83abe08 <line:1988:11, line:2000:4>
|   |   |-<<<NULL>>>
|   |   |-<<<NULL>>>
|   |   |-BinaryOperator 0x7fffd83ab380 <line:1988:15, col:22> 'int' '=='
|   |   | |-ImplicitCastExpr 0x7fffd83ab368 <col:15> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x7fffd83ab320 <col:15> 'int' lvalue Var 0x7fffd83aac70 'fmt' 'int'
|   |   | `-IntegerLiteral 0x7fffd83ab348 <col:22> 'int' 3
|   |   |-CompoundStmt 0x7fffd83abde0 <col:25, line:2000:4>
|   |   | |-BinaryOperator 0x7fffd83ab4e8 <line:1989:7, line:1173:51> 'int' '='
|   |   | | |-DeclRefExpr 0x7fffd83ab3a8 <line:1989:7> 'int' lvalue Var 0x7fffd83aaa90 'nranges' 'int'
|   |   | | `-ImplicitCastExpr 0x7fffd83ab4d0 <line:1173:30, col:51> 'int' <IntegralCast>
|   |   | |   `-CallExpr 0x7fffd83ab498 <col:30, col:51> 'stbtt_uint32':'unsigned int'
|   |   | |     |-ImplicitCastExpr 0x7fffd83ab480 <col:30> 'stbtt_uint32 (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   |   | |     | `-DeclRefExpr 0x7fffd83ab3d0 <col:30> 'stbtt_uint32 (stbtt__buf *, int)' Function 0x7fffd8361820 'stbtt__buf_get' 'stbtt_uint32 (stbtt__buf *, int)'
|   |   | |     |-ParenExpr 0x7fffd83ab440 <col:45, col:47> 'stbtt__buf *'
|   |   | |     | `-UnaryOperator 0x7fffd83ab420 <line:1989:34, col:35> 'stbtt__buf *' prefix '&'
|   |   | |     |   `-DeclRefExpr 0x7fffd83ab3f8 <col:35> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83aa970 'fdselect' 'stbtt__buf':'stbtt__buf'
|   |   | |     `-IntegerLiteral 0x7fffd83ab460 <line:1173:50> 'int' 2
|   |   | |-BinaryOperator 0x7fffd83ab650 <line:1990:7, line:1173:51> 'int' '='
|   |   | | |-DeclRefExpr 0x7fffd83ab510 <line:1990:7> 'int' lvalue Var 0x7fffd83aab08 'start' 'int'
|   |   | | `-ImplicitCastExpr 0x7fffd83ab638 <line:1173:30, col:51> 'int' <IntegralCast>
|   |   | |   `-CallExpr 0x7fffd83ab600 <col:30, col:51> 'stbtt_uint32':'unsigned int'
|   |   | |     |-ImplicitCastExpr 0x7fffd83ab5e8 <col:30> 'stbtt_uint32 (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   |   | |     | `-DeclRefExpr 0x7fffd83ab538 <col:30> 'stbtt_uint32 (stbtt__buf *, int)' Function 0x7fffd8361820 'stbtt__buf_get' 'stbtt_uint32 (stbtt__buf *, int)'
|   |   | |     |-ParenExpr 0x7fffd83ab5a8 <col:45, col:47> 'stbtt__buf *'
|   |   | |     | `-UnaryOperator 0x7fffd83ab588 <line:1990:32, col:33> 'stbtt__buf *' prefix '&'
|   |   | |     |   `-DeclRefExpr 0x7fffd83ab560 <col:33> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83aa970 'fdselect' 'stbtt__buf':'stbtt__buf'
|   |   | |     `-IntegerLiteral 0x7fffd83ab5c8 <line:1173:50> 'int' 2
|   |   | `-ForStmt 0x7fffd83abda8 <line:1991:7, line:1999:7>
|   |   |   |-BinaryOperator 0x7fffd83ab6c0 <line:1991:12, col:16> 'int' '='
|   |   |   | |-DeclRefExpr 0x7fffd83ab678 <col:12> 'int' lvalue Var 0x7fffd83aada0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x7fffd83ab6a0 <col:16> 'int' 0
|   |   |   |-<<<NULL>>>
|   |   |   |-BinaryOperator 0x7fffd83ab768 <col:19, col:23> 'int' '<'
|   |   |   | |-ImplicitCastExpr 0x7fffd83ab738 <col:19> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x7fffd83ab6e8 <col:19> 'int' lvalue Var 0x7fffd83aada0 'i' 'int'
|   |   |   | `-ImplicitCastExpr 0x7fffd83ab750 <col:23> 'int' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x7fffd83ab710 <col:23> 'int' lvalue Var 0x7fffd83aaa90 'nranges' 'int'
|   |   |   |-UnaryOperator 0x7fffd83ab7b8 <col:32, col:33> 'int' postfix '++'
|   |   |   | `-DeclRefExpr 0x7fffd83ab790 <col:32> 'int' lvalue Var 0x7fffd83aada0 'i' 'int'
|   |   |   `-CompoundStmt 0x7fffd83abd78 <col:37, line:1999:7>
|   |   |     |-BinaryOperator 0x7fffd83ab8d0 <line:1992:10, col:39> 'int' '='
|   |   |     | |-DeclRefExpr 0x7fffd83ab7d8 <col:10> 'int' lvalue Var 0x7fffd83aabf8 'v' 'int'
|   |   |     | `-ImplicitCastExpr 0x7fffd83ab8b8 <col:14, col:39> 'int' <IntegralCast>
|   |   |     |   `-CallExpr 0x7fffd83ab888 <col:14, col:39> 'stbtt_uint8':'unsigned char'
|   |   |     |     |-ImplicitCastExpr 0x7fffd83ab870 <col:14> 'stbtt_uint8 (*)(stbtt__buf *)' <FunctionToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x7fffd83ab800 <col:14> 'stbtt_uint8 (stbtt__buf *)' Function 0x7fffd835fad0 'stbtt__buf_get8' 'stbtt_uint8 (stbtt__buf *)'
|   |   |     |     `-UnaryOperator 0x7fffd83ab850 <col:30, col:31> 'stbtt__buf *' prefix '&'
|   |   |     |       `-DeclRefExpr 0x7fffd83ab828 <col:31> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83aa970 'fdselect' 'stbtt__buf':'stbtt__buf'
|   |   |     |-BinaryOperator 0x7fffd83aba58 <line:1993:10, line:1173:51> 'int' '='
|   |   |     | |-DeclRefExpr 0x7fffd83ab8f8 <line:1993:10> 'int' lvalue Var 0x7fffd83aab80 'end' 'int'
|   |   |     | `-ImplicitCastExpr 0x7fffd83aba40 <line:1173:30, col:51> 'int' <IntegralCast>
|   |   |     |   `-CallExpr 0x7fffd83aba08 <col:30, col:51> 'stbtt_uint32':'unsigned int'
|   |   |     |     |-ImplicitCastExpr 0x7fffd83ab9f0 <col:30> 'stbtt_uint32 (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   |   |     |     | `-DeclRefExpr 0x7fffd83ab920 <col:30> 'stbtt_uint32 (stbtt__buf *, int)' Function 0x7fffd8361820 'stbtt__buf_get' 'stbtt_uint32 (stbtt__buf *, int)'
|   |   |     |     |-ParenExpr 0x7fffd83ab990 <col:45, col:47> 'stbtt__buf *'
|   |   |     |     | `-UnaryOperator 0x7fffd83ab970 <line:1993:33, col:34> 'stbtt__buf *' prefix '&'
|   |   |     |     |   `-DeclRefExpr 0x7fffd83ab948 <col:34> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83aa970 'fdselect' 'stbtt__buf':'stbtt__buf'
|   |   |     |     `-IntegerLiteral 0x7fffd83ab9d0 <line:1173:50> 'int' 2
|   |   |     |-IfStmt 0x7fffd83abcb0 <line:1994:10, line:1997:10>
|   |   |     | |-<<<NULL>>>
|   |   |     | |-<<<NULL>>>
|   |   |     | |-BinaryOperator 0x7fffd83abbd0 <line:1994:14, col:52> 'int' '&&'
|   |   |     | | |-BinaryOperator 0x7fffd83abb00 <col:14, col:29> 'int' '>='
|   |   |     | | | |-ImplicitCastExpr 0x7fffd83abad0 <col:14> 'int' <LValueToRValue>
|   |   |     | | | | `-DeclRefExpr 0x7fffd83aba80 <col:14> 'int' lvalue ParmVar 0x7fffd83aa7a0 'glyph_index' 'int'
|   |   |     | | | `-ImplicitCastExpr 0x7fffd83abae8 <col:29> 'int' <LValueToRValue>
|   |   |     | | |   `-DeclRefExpr 0x7fffd83abaa8 <col:29> 'int' lvalue Var 0x7fffd83aab08 'start' 'int'
|   |   |     | | `-BinaryOperator 0x7fffd83abba8 <col:38, col:52> 'int' '<'
|   |   |     | |   |-ImplicitCastExpr 0x7fffd83abb78 <col:38> 'int' <LValueToRValue>
|   |   |     | |   | `-DeclRefExpr 0x7fffd83abb28 <col:38> 'int' lvalue ParmVar 0x7fffd83aa7a0 'glyph_index' 'int'
|   |   |     | |   `-ImplicitCastExpr 0x7fffd83abb90 <col:52> 'int' <LValueToRValue>
|   |   |     | |     `-DeclRefExpr 0x7fffd83abb50 <col:52> 'int' lvalue Var 0x7fffd83aab80 'end' 'int'
|   |   |     | |-CompoundStmt 0x7fffd83abc90 <col:57, line:1997:10>
|   |   |     | | |-BinaryOperator 0x7fffd83abc60 <line:1995:13, col:26> 'int' '='
|   |   |     | | | |-DeclRefExpr 0x7fffd83abbf8 <col:13> 'int' lvalue Var 0x7fffd83aace8 'fdselector' 'int'
|   |   |     | | | `-ImplicitCastExpr 0x7fffd83abc48 <col:26> 'int' <LValueToRValue>
|   |   |     | | |   `-DeclRefExpr 0x7fffd83abc20 <col:26> 'int' lvalue Var 0x7fffd83aabf8 'v' 'int'
|   |   |     | | `-BreakStmt 0x7fffd83abc88 <line:1996:13>
|   |   |     | `-<<<NULL>>>
|   |   |     `-BinaryOperator 0x7fffd83abd50 <line:1998:10, col:18> 'int' '='
|   |   |       |-DeclRefExpr 0x7fffd83abce8 <col:10> 'int' lvalue Var 0x7fffd83aab08 'start' 'int'
|   |   |       `-ImplicitCastExpr 0x7fffd83abd38 <col:18> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x7fffd83abd10 <col:18> 'int' lvalue Var 0x7fffd83aab80 'end' 'int'
|   |   `-<<<NULL>>>
|   |-IfStmt 0x7fffd83ac068 <line:2001:4, col:48>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83abef8 <col:8, col:23> 'int' '=='
|   | | |-ImplicitCastExpr 0x7fffd83abee0 <col:8> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd83abe78 <col:8> 'int' lvalue Var 0x7fffd83aace8 'fdselector' 'int'
|   | | `-UnaryOperator 0x7fffd83abec0 <col:22, col:23> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x7fffd83abea0 <col:23> 'int' 1
|   | |-CallExpr 0x7fffd83ac000 <col:26, col:48> 'stbtt__buf':'stbtt__buf'
|   | | |-ImplicitCastExpr 0x7fffd83abfe8 <col:26> 'stbtt__buf (*)(const void *, size_t)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x7fffd83abf20 <col:26> 'stbtt__buf (const void *, size_t)' Function 0x7fffd8362750 'stbtt__new_buf' 'stbtt__buf (const void *, size_t)'
|   | | |-ImplicitCastExpr 0x7fffd83ac038 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'const void *' <NullToPointer>
|   | | | `-ParenExpr 0x7fffd83abfa8 <col:16, col:25> 'void *'
|   | | |   `-CStyleCastExpr 0x7fffd83abf80 <col:17, col:24> 'void *' <NullToPointer>
|   | | |     `-IntegerLiteral 0x7fffd83abf48 <col:24> 'int' 0
|   | | `-ImplicitCastExpr 0x7fffd83ac050 <././stb/stb_truetype.h:2001:47> 'size_t':'unsigned long' <IntegralCast>
|   | |   `-IntegerLiteral 0x7fffd83abfc8 <col:47> 'int' 0
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x7fffd83ac2f0 <line:2002:4, col:88>
|     `-CallExpr 0x7fffd83ac2a0 <col:11, col:88> 'stbtt__buf':'stbtt__buf'
|       |-ImplicitCastExpr 0x7fffd83ac288 <col:11> 'stbtt__buf (*)(stbtt__buf, stbtt__buf)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x7fffd83ac0a0 <col:11> 'stbtt__buf (stbtt__buf, stbtt__buf)' Function 0x7fffd837a500 'stbtt__get_subrs' 'stbtt__buf (stbtt__buf, stbtt__buf)'
|       |-ImplicitCastExpr 0x7fffd83ac2d8 <col:28, col:34> 'stbtt__buf':'stbtt__buf' <LValueToRValue>
|       | `-MemberExpr 0x7fffd83ac108 <col:28, col:34> 'const stbtt__buf':'const stbtt__buf' lvalue ->cff 0x7fffd834d0d0
|       |   `-ImplicitCastExpr 0x7fffd83ac0f0 <col:28> 'const stbtt_fontinfo *' <LValueToRValue>
|       |     `-DeclRefExpr 0x7fffd83ac0c8 <col:28> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83aa728 'info' 'const stbtt_fontinfo *'
|       `-CallExpr 0x7fffd83ac220 <col:39, col:87> 'stbtt__buf':'stbtt__buf'
|         |-ImplicitCastExpr 0x7fffd83ac208 <col:39> 'stbtt__buf (*)(stbtt__buf, int)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x7fffd83ac140 <col:39> 'stbtt__buf (stbtt__buf, int)' Function 0x7fffd836ecc0 'stbtt__cff_index_get' 'stbtt__buf (stbtt__buf, int)'
|         |-ImplicitCastExpr 0x7fffd83ac258 <col:60, col:66> 'stbtt__buf':'stbtt__buf' <LValueToRValue>
|         | `-MemberExpr 0x7fffd83ac1a8 <col:60, col:66> 'const stbtt__buf':'const stbtt__buf' lvalue ->fontdicts 0x7fffd834d268
|         |   `-ImplicitCastExpr 0x7fffd83ac190 <col:60> 'const stbtt_fontinfo *' <LValueToRValue>
|         |     `-DeclRefExpr 0x7fffd83ac168 <col:60> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83aa728 'info' 'const stbtt_fontinfo *'
|         `-ImplicitCastExpr 0x7fffd83ac270 <col:77> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x7fffd83ac1e0 <col:77> 'int' lvalue Var 0x7fffd83aace8 'fdselector' 'int'
|-FunctionDecl 0x7fffd83ac588 <line:2005:1, line:2262:1> line:2005:12 used stbtt__run_charstring 'int (const stbtt_fontinfo *, int, stbtt__csctx *)' static
| |-ParmVarDecl 0x7fffd83ac360 <col:34, col:56> col:56 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83ac3d8 <col:62, col:66> col:66 used glyph_index 'int'
| |-ParmVarDecl 0x7fffd83ac448 <col:79, col:93> col:93 used c 'stbtt__csctx *'
| `-CompoundStmt 0x7fffd83bc680 <line:2006:1, line:2262:1>
|   |-DeclStmt 0x7fffd83aca48 <line:2007:4, col:76>
|   | |-VarDecl 0x7fffd83ac658 <col:4, col:20> col:8 used in_header 'int' cinit
|   | | `-IntegerLiteral 0x7fffd83ac6b8 <col:20> 'int' 1
|   | |-VarDecl 0x7fffd83ac6f0 <col:4, col:34> col:23 used maskbits 'int' cinit
|   | | `-IntegerLiteral 0x7fffd83ac750 <col:34> 'int' 0
|   | |-VarDecl 0x7fffd83ac788 <col:4, col:57> col:37 used subr_stack_height 'int' cinit
|   | | `-IntegerLiteral 0x7fffd83ac7e8 <col:57> 'int' 0
|   | |-VarDecl 0x7fffd83ac820 <col:4, col:65> col:60 used sp 'int' cinit
|   | | `-IntegerLiteral 0x7fffd83ac880 <col:65> 'int' 0
|   | |-VarDecl 0x7fffd83ac8b8 <col:4, col:68> col:68 used v 'int'
|   | |-VarDecl 0x7fffd83ac930 <col:4, col:71> col:71 used i 'int'
|   | `-VarDecl 0x7fffd83ac9a8 <col:4, col:74> col:74 used b0 'int'
|   |-DeclStmt 0x7fffd83acb88 <line:2008:4, col:34>
|   | |-VarDecl 0x7fffd83aca78 <col:4, col:20> col:8 used has_subrs 'int' cinit
|   | | `-IntegerLiteral 0x7fffd83acad8 <col:20> 'int' 0
|   | `-VarDecl 0x7fffd83acb10 <col:4, col:23> col:23 used clear_stack 'int'
|   |-DeclStmt 0x7fffd83acc80 <line:2009:4, col:15>
|   | `-VarDecl 0x7fffd83acc20 <col:4, col:14> col:10 used s 'float [48]'
|   |-DeclStmt 0x7fffd83acf48 <line:2010:4, col:53>
|   | |-VarDecl 0x7fffd83acd58 <col:4, col:28> col:15 used subr_stack 'stbtt__buf [10]'
|   | |-VarDecl 0x7fffd83acdc8 <col:4, col:45> col:31 used subrs 'stbtt__buf':'stbtt__buf' cinit
|   | | `-ImplicitCastExpr 0x7fffd83acea0 <col:39, col:45> 'stbtt__buf':'stbtt__buf' <LValueToRValue>
|   | |   `-MemberExpr 0x7fffd83ace68 <col:39, col:45> 'const stbtt__buf':'const stbtt__buf' lvalue ->subrs 0x7fffd834d210
|   | |     `-ImplicitCastExpr 0x7fffd83ace50 <col:39> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x7fffd83ace28 <col:39> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83ac360 'info' 'const stbtt_fontinfo *'
|   | `-VarDecl 0x7fffd83acec8 <col:4, col:52> col:52 used b 'stbtt__buf':'stbtt__buf'
|   |-DeclStmt 0x7fffd83acfd8 <line:2011:4, col:11>
|   | `-VarDecl 0x7fffd83acf78 <col:4, col:10> col:10 used f 'float'
|   |-BinaryOperator 0x7fffd83ad160 <line:2016:4, col:59> 'stbtt__buf':'stbtt__buf' '='
|   | |-DeclRefExpr 0x7fffd83acff0 <col:4> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83acec8 'b' 'stbtt__buf':'stbtt__buf'
|   | `-CallExpr 0x7fffd83ad0f8 <col:8, col:59> 'stbtt__buf':'stbtt__buf'
|   |   |-ImplicitCastExpr 0x7fffd83ad0e0 <col:8> 'stbtt__buf (*)(stbtt__buf, int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x7fffd83ad018 <col:8> 'stbtt__buf (stbtt__buf, int)' Function 0x7fffd836ecc0 'stbtt__cff_index_get' 'stbtt__buf (stbtt__buf, int)'
|   |   |-ImplicitCastExpr 0x7fffd83ad130 <col:29, col:35> 'stbtt__buf':'stbtt__buf' <LValueToRValue>
|   |   | `-MemberExpr 0x7fffd83ad080 <col:29, col:35> 'const stbtt__buf':'const stbtt__buf' lvalue ->charstrings 0x7fffd834d160
|   |   |   `-ImplicitCastExpr 0x7fffd83ad068 <col:29> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x7fffd83ad040 <col:29> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83ac360 'info' 'const stbtt_fontinfo *'
|   |   `-ImplicitCastExpr 0x7fffd83ad148 <col:48> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd83ad0b8 <col:48> 'int' lvalue ParmVar 0x7fffd83ac3d8 'glyph_index' 'int'
|   |-WhileStmt 0x7fffd83bc608 <line:2017:4, line:2258:4>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83ad278 <line:2017:11, col:24> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd83ad248 <col:11, col:13> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x7fffd83ad1b0 <col:11, col:13> 'int' lvalue .cursor 0x7fffd82a7460
|   | | |   `-DeclRefExpr 0x7fffd83ad188 <col:11> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83acec8 'b' 'stbtt__buf':'stbtt__buf'
|   | | `-ImplicitCastExpr 0x7fffd83ad260 <col:22, col:24> 'int' <LValueToRValue>
|   | |   `-MemberExpr 0x7fffd83ad210 <col:22, col:24> 'int' lvalue .size 0x7fffd82a74c0
|   | |     `-DeclRefExpr 0x7fffd83ad1e8 <col:22> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83acec8 'b' 'stbtt__buf':'stbtt__buf'
|   | `-CompoundStmt 0x7fffd83bc5d0 <col:30, line:2258:4>
|   |   |-BinaryOperator 0x7fffd83ad2e8 <line:2018:7, col:11> 'int' '='
|   |   | |-DeclRefExpr 0x7fffd83ad2a0 <col:7> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   | `-IntegerLiteral 0x7fffd83ad2c8 <col:11> 'int' 0
|   |   |-BinaryOperator 0x7fffd83ad358 <line:2019:7, col:21> 'int' '='
|   |   | |-DeclRefExpr 0x7fffd83ad310 <col:7> 'int' lvalue Var 0x7fffd83acb10 'clear_stack' 'int'
|   |   | `-IntegerLiteral 0x7fffd83ad338 <col:21> 'int' 1
|   |   |-BinaryOperator 0x7fffd83ad478 <line:2020:7, col:30> 'int' '='
|   |   | |-DeclRefExpr 0x7fffd83ad380 <col:7> 'int' lvalue Var 0x7fffd83ac9a8 'b0' 'int'
|   |   | `-ImplicitCastExpr 0x7fffd83ad460 <col:12, col:30> 'int' <IntegralCast>
|   |   |   `-CallExpr 0x7fffd83ad430 <col:12, col:30> 'stbtt_uint8':'unsigned char'
|   |   |     |-ImplicitCastExpr 0x7fffd83ad418 <col:12> 'stbtt_uint8 (*)(stbtt__buf *)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x7fffd83ad3a8 <col:12> 'stbtt_uint8 (stbtt__buf *)' Function 0x7fffd835fad0 'stbtt__buf_get8' 'stbtt_uint8 (stbtt__buf *)'
|   |   |     `-UnaryOperator 0x7fffd83ad3f8 <col:28, col:29> 'stbtt__buf *' prefix '&'
|   |   |       `-DeclRefExpr 0x7fffd83ad3d0 <col:29> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83acec8 'b' 'stbtt__buf':'stbtt__buf'
|   |   |-SwitchStmt 0x7fffd83ad4e0 <line:2021:7, line:2256:7>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-ImplicitCastExpr 0x7fffd83ad4c8 <line:2021:15> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x7fffd83ad4a0 <col:15> 'int' lvalue Var 0x7fffd83ac9a8 'b0' 'int'
|   |   | `-CompoundStmt 0x7fffd83bc290 <col:19, line:2256:7>
|   |   |   |-CaseStmt 0x7fffd83ad530 <line:2023:7, line:2026:32>
|   |   |   | |-IntegerLiteral 0x7fffd83ad510 <line:2023:12> 'int' 19
|   |   |   | |-<<<NULL>>>
|   |   |   | `-CaseStmt 0x7fffd83ad588 <line:2024:7, line:2026:32>
|   |   |   |   |-IntegerLiteral 0x7fffd83ad568 <line:2024:12> 'int' 20
|   |   |   |   |-<<<NULL>>>
|   |   |   |   `-IfStmt 0x7fffd83ad708 <line:2025:10, line:2026:32>
|   |   |   |     |-<<<NULL>>>
|   |   |   |     |-<<<NULL>>>
|   |   |   |     |-ImplicitCastExpr 0x7fffd83ad5e8 <line:2025:14> 'int' <LValueToRValue>
|   |   |   |     | `-DeclRefExpr 0x7fffd83ad5c0 <col:14> 'int' lvalue Var 0x7fffd83ac658 'in_header' 'int'
|   |   |   |     |-CompoundAssignOperator 0x7fffd83ad6d0 <line:2026:13, col:32> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |   |     | |-DeclRefExpr 0x7fffd83ad600 <col:13> 'int' lvalue Var 0x7fffd83ac6f0 'maskbits' 'int'
|   |   |   |     | `-ParenExpr 0x7fffd83ad6b0 <col:25, col:32> 'int'
|   |   |   |     |   `-BinaryOperator 0x7fffd83ad688 <col:26, col:31> 'int' '/'
|   |   |   |     |     |-ImplicitCastExpr 0x7fffd83ad670 <col:26> 'int' <LValueToRValue>
|   |   |   |     |     | `-DeclRefExpr 0x7fffd83ad628 <col:26> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   |     |     `-IntegerLiteral 0x7fffd83ad650 <col:31> 'int' 2
|   |   |   |     `-<<<NULL>>>
|   |   |   |-BinaryOperator 0x7fffd83ad788 <line:2027:10, col:22> 'int' '='
|   |   |   | |-DeclRefExpr 0x7fffd83ad740 <col:10> 'int' lvalue Var 0x7fffd83ac658 'in_header' 'int'
|   |   |   | `-IntegerLiteral 0x7fffd83ad768 <col:22> 'int' 0
|   |   |   |-CallExpr 0x7fffd83ad928 <line:2028:10, col:48> 'void'
|   |   |   | |-ImplicitCastExpr 0x7fffd83ad910 <col:10> 'void (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x7fffd83ad7b0 <col:10> 'void (stbtt__buf *, int)' Function 0x7fffd8361388 'stbtt__buf_skip' 'void (stbtt__buf *, int)'
|   |   |   | |-UnaryOperator 0x7fffd83ad800 <col:26, col:27> 'stbtt__buf *' prefix '&'
|   |   |   | | `-DeclRefExpr 0x7fffd83ad7d8 <col:27> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83acec8 'b' 'stbtt__buf':'stbtt__buf'
|   |   |   | `-BinaryOperator 0x7fffd83ad8e8 <col:30, col:47> 'int' '/'
|   |   |   |   |-ParenExpr 0x7fffd83ad8a8 <col:30, col:43> 'int'
|   |   |   |   | `-BinaryOperator 0x7fffd83ad880 <col:31, col:42> 'int' '+'
|   |   |   |   |   |-ImplicitCastExpr 0x7fffd83ad868 <col:31> 'int' <LValueToRValue>
|   |   |   |   |   | `-DeclRefExpr 0x7fffd83ad820 <col:31> 'int' lvalue Var 0x7fffd83ac6f0 'maskbits' 'int'
|   |   |   |   |   `-IntegerLiteral 0x7fffd83ad848 <col:42> 'int' 7
|   |   |   |   `-IntegerLiteral 0x7fffd83ad8c8 <col:47> 'int' 8
|   |   |   |-BreakStmt 0x7fffd83ad960 <line:2029:10>
|   |   |   |-CaseStmt 0x7fffd83ad988 <line:2031:7, line:2035:29>
|   |   |   | |-IntegerLiteral 0x7fffd83ad968 <line:2031:12> 'int' 1
|   |   |   | |-<<<NULL>>>
|   |   |   | `-CaseStmt 0x7fffd83ada00 <line:2032:7, line:2035:29>
|   |   |   |   |-IntegerLiteral 0x7fffd83ad9e0 <line:2032:12> 'int' 3
|   |   |   |   |-<<<NULL>>>
|   |   |   |   `-CaseStmt 0x7fffd83ada58 <line:2033:7, line:2035:29>
|   |   |   |     |-IntegerLiteral 0x7fffd83ada38 <line:2033:12> 'int' 18
|   |   |   |     |-<<<NULL>>>
|   |   |   |     `-CaseStmt 0x7fffd83adab0 <line:2034:7, line:2035:29>
|   |   |   |       |-IntegerLiteral 0x7fffd83ada90 <line:2034:12> 'int' 23
|   |   |   |       |-<<<NULL>>>
|   |   |   |       `-CompoundAssignOperator 0x7fffd83adbb8 <line:2035:10, col:29> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |   |         |-DeclRefExpr 0x7fffd83adae8 <col:10> 'int' lvalue Var 0x7fffd83ac6f0 'maskbits' 'int'
|   |   |   |         `-ParenExpr 0x7fffd83adb98 <col:22, col:29> 'int'
|   |   |   |           `-BinaryOperator 0x7fffd83adb70 <col:23, col:28> 'int' '/'
|   |   |   |             |-ImplicitCastExpr 0x7fffd83adb58 <col:23> 'int' <LValueToRValue>
|   |   |   |             | `-DeclRefExpr 0x7fffd83adb10 <col:23> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   |             `-IntegerLiteral 0x7fffd83adb38 <col:28> 'int' 2
|   |   |   |-BreakStmt 0x7fffd83adbf0 <line:2036:10>
|   |   |   |-CaseStmt 0x7fffd83adc18 <line:2038:7, line:2039:22>
|   |   |   | |-IntegerLiteral 0x7fffd83adbf8 <line:2038:12> 'int' 21
|   |   |   | |-<<<NULL>>>
|   |   |   | `-BinaryOperator 0x7fffd83adc98 <line:2039:10, col:22> 'int' '='
|   |   |   |   |-DeclRefExpr 0x7fffd83adc50 <col:10> 'int' lvalue Var 0x7fffd83ac658 'in_header' 'int'
|   |   |   |   `-IntegerLiteral 0x7fffd83adc78 <col:22> 'int' 0
|   |   |   |-IfStmt 0x7fffd83adda0 <line:2040:10, line:2013:27>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-BinaryOperator 0x7fffd83add20 <line:2040:14, col:19> 'int' '<'
|   |   |   | | |-ImplicitCastExpr 0x7fffd83add08 <col:14> 'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x7fffd83adcc0 <col:14> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   | | `-IntegerLiteral 0x7fffd83adce8 <col:19> 'int' 2
|   |   |   | |-ReturnStmt 0x7fffd83add88 <col:22, line:2013:27>
|   |   |   | | `-ParenExpr 0x7fffd83add68 <col:25, col:27> 'int'
|   |   |   | |   `-IntegerLiteral 0x7fffd83add48 <col:26> 'int' 0
|   |   |   | `-<<<NULL>>>
|   |   |   |-CallExpr 0x7fffd83ae080 <line:2041:10, col:51> 'void'
|   |   |   | |-ImplicitCastExpr 0x7fffd83ae068 <col:10> 'void (*)(stbtt__csctx *, float, float)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x7fffd83addd8 <col:10> 'void (stbtt__csctx *, float, float)' Function 0x7fffd83a6dd0 'stbtt__csctx_rmove_to' 'void (stbtt__csctx *, float, float)'
|   |   |   | |-ImplicitCastExpr 0x7fffd83ae0c0 <col:32> 'stbtt__csctx *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x7fffd83ade00 <col:32> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83ac448 'c' 'stbtt__csctx *'
|   |   |   | |-ImplicitCastExpr 0x7fffd83ae0d8 <col:35, col:41> 'float' <LValueToRValue>
|   |   |   | | `-ArraySubscriptExpr 0x7fffd83adef0 <col:35, col:41> 'float' lvalue
|   |   |   | |   |-ImplicitCastExpr 0x7fffd83aded8 <col:35> 'float *' <ArrayToPointerDecay>
|   |   |   | |   | `-DeclRefExpr 0x7fffd83ade28 <col:35> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   | |   `-BinaryOperator 0x7fffd83adeb0 <col:37, col:40> 'int' '-'
|   |   |   | |     |-ImplicitCastExpr 0x7fffd83ade98 <col:37> 'int' <LValueToRValue>
|   |   |   | |     | `-DeclRefExpr 0x7fffd83ade50 <col:37> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   | |     `-IntegerLiteral 0x7fffd83ade78 <col:40> 'int' 2
|   |   |   | `-ImplicitCastExpr 0x7fffd83ae0f0 <col:44, col:50> 'float' <LValueToRValue>
|   |   |   |   `-ArraySubscriptExpr 0x7fffd83adfe0 <col:44, col:50> 'float' lvalue
|   |   |   |     |-ImplicitCastExpr 0x7fffd83adfc8 <col:44> 'float *' <ArrayToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x7fffd83adf18 <col:44> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |     `-BinaryOperator 0x7fffd83adfa0 <col:46, col:49> 'int' '-'
|   |   |   |       |-ImplicitCastExpr 0x7fffd83adf88 <col:46> 'int' <LValueToRValue>
|   |   |   |       | `-DeclRefExpr 0x7fffd83adf40 <col:46> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   |       `-IntegerLiteral 0x7fffd83adf68 <col:49> 'int' 1
|   |   |   |-BreakStmt 0x7fffd83ae108 <line:2042:10>
|   |   |   |-CaseStmt 0x7fffd83ae130 <line:2043:7, line:2044:22>
|   |   |   | |-IntegerLiteral 0x7fffd83ae110 <line:2043:12> 'int' 4
|   |   |   | |-<<<NULL>>>
|   |   |   | `-BinaryOperator 0x7fffd83ae1b0 <line:2044:10, col:22> 'int' '='
|   |   |   |   |-DeclRefExpr 0x7fffd83ae168 <col:10> 'int' lvalue Var 0x7fffd83ac658 'in_header' 'int'
|   |   |   |   `-IntegerLiteral 0x7fffd83ae190 <col:22> 'int' 0
|   |   |   |-IfStmt 0x7fffd83ae2b8 <line:2045:10, line:2013:27>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-BinaryOperator 0x7fffd83ae238 <line:2045:14, col:19> 'int' '<'
|   |   |   | | |-ImplicitCastExpr 0x7fffd83ae220 <col:14> 'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x7fffd83ae1d8 <col:14> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   | | `-IntegerLiteral 0x7fffd83ae200 <col:19> 'int' 1
|   |   |   | |-ReturnStmt 0x7fffd83ae2a0 <col:22, line:2013:27>
|   |   |   | | `-ParenExpr 0x7fffd83ae280 <col:25, col:27> 'int'
|   |   |   | |   `-IntegerLiteral 0x7fffd83ae260 <col:26> 'int' 0
|   |   |   | `-<<<NULL>>>
|   |   |   |-CallExpr 0x7fffd83ae468 <line:2046:10, col:45> 'void'
|   |   |   | |-ImplicitCastExpr 0x7fffd83ae450 <col:10> 'void (*)(stbtt__csctx *, float, float)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x7fffd83ae2f0 <col:10> 'void (stbtt__csctx *, float, float)' Function 0x7fffd83a6dd0 'stbtt__csctx_rmove_to' 'void (stbtt__csctx *, float, float)'
|   |   |   | |-ImplicitCastExpr 0x7fffd83ae4a8 <col:32> 'stbtt__csctx *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x7fffd83ae318 <col:32> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83ac448 'c' 'stbtt__csctx *'
|   |   |   | |-ImplicitCastExpr 0x7fffd83ae4c0 <col:35> 'float' <IntegralToFloating>
|   |   |   | | `-IntegerLiteral 0x7fffd83ae340 <col:35> 'int' 0
|   |   |   | `-ImplicitCastExpr 0x7fffd83ae4d8 <col:38, col:44> 'float' <LValueToRValue>
|   |   |   |   `-ArraySubscriptExpr 0x7fffd83ae428 <col:38, col:44> 'float' lvalue
|   |   |   |     |-ImplicitCastExpr 0x7fffd83ae410 <col:38> 'float *' <ArrayToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x7fffd83ae360 <col:38> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |     `-BinaryOperator 0x7fffd83ae3e8 <col:40, col:43> 'int' '-'
|   |   |   |       |-ImplicitCastExpr 0x7fffd83ae3d0 <col:40> 'int' <LValueToRValue>
|   |   |   |       | `-DeclRefExpr 0x7fffd83ae388 <col:40> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   |       `-IntegerLiteral 0x7fffd83ae3b0 <col:43> 'int' 1
|   |   |   |-BreakStmt 0x7fffd83ae4f0 <line:2047:10>
|   |   |   |-CaseStmt 0x7fffd83ae518 <line:2048:7, line:2049:22>
|   |   |   | |-IntegerLiteral 0x7fffd83ae4f8 <line:2048:12> 'int' 22
|   |   |   | |-<<<NULL>>>
|   |   |   | `-BinaryOperator 0x7fffd83ae598 <line:2049:10, col:22> 'int' '='
|   |   |   |   |-DeclRefExpr 0x7fffd83ae550 <col:10> 'int' lvalue Var 0x7fffd83ac658 'in_header' 'int'
|   |   |   |   `-IntegerLiteral 0x7fffd83ae578 <col:22> 'int' 0
|   |   |   |-IfStmt 0x7fffd83ae6a0 <line:2050:10, line:2013:27>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-BinaryOperator 0x7fffd83ae620 <line:2050:14, col:19> 'int' '<'
|   |   |   | | |-ImplicitCastExpr 0x7fffd83ae608 <col:14> 'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x7fffd83ae5c0 <col:14> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   | | `-IntegerLiteral 0x7fffd83ae5e8 <col:19> 'int' 1
|   |   |   | |-ReturnStmt 0x7fffd83ae688 <col:22, line:2013:27>
|   |   |   | | `-ParenExpr 0x7fffd83ae668 <col:25, col:27> 'int'
|   |   |   | |   `-IntegerLiteral 0x7fffd83ae648 <col:26> 'int' 0
|   |   |   | `-<<<NULL>>>
|   |   |   |-CallExpr 0x7fffd83ae850 <line:2051:10, col:45> 'void'
|   |   |   | |-ImplicitCastExpr 0x7fffd83ae838 <col:10> 'void (*)(stbtt__csctx *, float, float)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x7fffd83ae6d8 <col:10> 'void (stbtt__csctx *, float, float)' Function 0x7fffd83a6dd0 'stbtt__csctx_rmove_to' 'void (stbtt__csctx *, float, float)'
|   |   |   | |-ImplicitCastExpr 0x7fffd83ae890 <col:32> 'stbtt__csctx *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x7fffd83ae700 <col:32> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83ac448 'c' 'stbtt__csctx *'
|   |   |   | |-ImplicitCastExpr 0x7fffd83ae8a8 <col:35, col:41> 'float' <LValueToRValue>
|   |   |   | | `-ArraySubscriptExpr 0x7fffd83ae7f0 <col:35, col:41> 'float' lvalue
|   |   |   | |   |-ImplicitCastExpr 0x7fffd83ae7d8 <col:35> 'float *' <ArrayToPointerDecay>
|   |   |   | |   | `-DeclRefExpr 0x7fffd83ae728 <col:35> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   | |   `-BinaryOperator 0x7fffd83ae7b0 <col:37, col:40> 'int' '-'
|   |   |   | |     |-ImplicitCastExpr 0x7fffd83ae798 <col:37> 'int' <LValueToRValue>
|   |   |   | |     | `-DeclRefExpr 0x7fffd83ae750 <col:37> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   | |     `-IntegerLiteral 0x7fffd83ae778 <col:40> 'int' 1
|   |   |   | `-ImplicitCastExpr 0x7fffd83ae8c0 <col:44> 'float' <IntegralToFloating>
|   |   |   |   `-IntegerLiteral 0x7fffd83ae818 <col:44> 'int' 0
|   |   |   |-BreakStmt 0x7fffd83ae8d8 <line:2052:10>
|   |   |   |-CaseStmt 0x7fffd83ae900 <line:2054:7, line:2013:27>
|   |   |   | |-IntegerLiteral 0x7fffd83ae8e0 <line:2054:12> 'int' 5
|   |   |   | |-<<<NULL>>>
|   |   |   | `-IfStmt 0x7fffd83aea18 <line:2055:10, line:2013:27>
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-BinaryOperator 0x7fffd83ae998 <line:2055:14, col:19> 'int' '<'
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83ae980 <col:14> 'int' <LValueToRValue>
|   |   |   |   | | `-DeclRefExpr 0x7fffd83ae938 <col:14> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   |   | `-IntegerLiteral 0x7fffd83ae960 <col:19> 'int' 2
|   |   |   |   |-ReturnStmt 0x7fffd83aea00 <col:22, line:2013:27>
|   |   |   |   | `-ParenExpr 0x7fffd83ae9e0 <col:25, col:27> 'int'
|   |   |   |   |   `-IntegerLiteral 0x7fffd83ae9c0 <col:26> 'int' 0
|   |   |   |   `-<<<NULL>>>
|   |   |   |-ForStmt 0x7fffd83aee48 <line:2056:10, line:2057:50>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-BinaryOperator 0x7fffd83aeb18 <line:2056:17, col:25> 'int' '<'
|   |   |   | | |-BinaryOperator 0x7fffd83aeab0 <col:17, col:21> 'int' '+'
|   |   |   | | | |-ImplicitCastExpr 0x7fffd83aea98 <col:17> 'int' <LValueToRValue>
|   |   |   | | | | `-DeclRefExpr 0x7fffd83aea50 <col:17> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   | | | `-IntegerLiteral 0x7fffd83aea78 <col:21> 'int' 1
|   |   |   | | `-ImplicitCastExpr 0x7fffd83aeb00 <col:25> 'int' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x7fffd83aead8 <col:25> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   | |-CompoundAssignOperator 0x7fffd83aeb88 <col:29, col:34> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |   | | |-DeclRefExpr 0x7fffd83aeb40 <col:29> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   | | `-IntegerLiteral 0x7fffd83aeb68 <col:34> 'int' 2
|   |   |   | `-CallExpr 0x7fffd83aedc0 <line:2057:13, col:50> 'void'
|   |   |   |   |-ImplicitCastExpr 0x7fffd83aeda8 <col:13> 'void (*)(stbtt__csctx *, float, float)' <FunctionToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x7fffd83aebc0 <col:13> 'void (stbtt__csctx *, float, float)' Function 0x7fffd83a8330 'stbtt__csctx_rline_to' 'void (stbtt__csctx *, float, float)'
|   |   |   |   |-ImplicitCastExpr 0x7fffd83aee00 <col:35> 'stbtt__csctx *' <LValueToRValue>
|   |   |   |   | `-DeclRefExpr 0x7fffd83aebe8 <col:35> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83ac448 'c' 'stbtt__csctx *'
|   |   |   |   |-ImplicitCastExpr 0x7fffd83aee18 <col:38, col:41> 'float' <LValueToRValue>
|   |   |   |   | `-ArraySubscriptExpr 0x7fffd83aec90 <col:38, col:41> 'float' lvalue
|   |   |   |   |   |-ImplicitCastExpr 0x7fffd83aec60 <col:38> 'float *' <ArrayToPointerDecay>
|   |   |   |   |   | `-DeclRefExpr 0x7fffd83aec10 <col:38> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   |   `-ImplicitCastExpr 0x7fffd83aec78 <col:40> 'int' <LValueToRValue>
|   |   |   |   |     `-DeclRefExpr 0x7fffd83aec38 <col:40> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   `-ImplicitCastExpr 0x7fffd83aee30 <col:44, col:49> 'float' <LValueToRValue>
|   |   |   |     `-ArraySubscriptExpr 0x7fffd83aed80 <col:44, col:49> 'float' lvalue
|   |   |   |       |-ImplicitCastExpr 0x7fffd83aed68 <col:44> 'float *' <ArrayToPointerDecay>
|   |   |   |       | `-DeclRefExpr 0x7fffd83aecb8 <col:44> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       `-BinaryOperator 0x7fffd83aed40 <col:46, col:48> 'int' '+'
|   |   |   |         |-ImplicitCastExpr 0x7fffd83aed28 <col:46> 'int' <LValueToRValue>
|   |   |   |         | `-DeclRefExpr 0x7fffd83aece0 <col:46> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |         `-IntegerLiteral 0x7fffd83aed08 <col:48> 'int' 1
|   |   |   |-BreakStmt 0x7fffd83aee80 <line:2058:10>
|   |   |   |-CaseStmt 0x7fffd83aeea8 <line:2063:7, line:2013:27>
|   |   |   | |-IntegerLiteral 0x7fffd83aee88 <line:2063:12> 'int' 7
|   |   |   | |-<<<NULL>>>
|   |   |   | `-IfStmt 0x7fffd83aefc0 <line:2064:10, line:2013:27>
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-BinaryOperator 0x7fffd83aef40 <line:2064:14, col:19> 'int' '<'
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83aef28 <col:14> 'int' <LValueToRValue>
|   |   |   |   | | `-DeclRefExpr 0x7fffd83aeee0 <col:14> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   |   | `-IntegerLiteral 0x7fffd83aef08 <col:19> 'int' 1
|   |   |   |   |-ReturnStmt 0x7fffd83aefa8 <col:22, line:2013:27>
|   |   |   |   | `-ParenExpr 0x7fffd83aef88 <col:25, col:27> 'int'
|   |   |   |   |   `-IntegerLiteral 0x7fffd83aef68 <col:26> 'int' 0
|   |   |   |   `-<<<NULL>>>
|   |   |   |-GotoStmt 0x7fffd83af040 <line:2065:10, col:15> 'vlineto' 0x7fffd83aeff8
|   |   |   |-CaseStmt 0x7fffd83af078 <line:2066:7, line:2013:27>
|   |   |   | |-IntegerLiteral 0x7fffd83af058 <line:2066:12> 'int' 6
|   |   |   | |-<<<NULL>>>
|   |   |   | `-IfStmt 0x7fffd83af190 <line:2067:10, line:2013:27>
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-BinaryOperator 0x7fffd83af110 <line:2067:14, col:19> 'int' '<'
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83af0f8 <col:14> 'int' <LValueToRValue>
|   |   |   |   | | `-DeclRefExpr 0x7fffd83af0b0 <col:14> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   |   | `-IntegerLiteral 0x7fffd83af0d8 <col:19> 'int' 1
|   |   |   |   |-ReturnStmt 0x7fffd83af178 <col:22, line:2013:27>
|   |   |   |   | `-ParenExpr 0x7fffd83af158 <col:25, col:27> 'int'
|   |   |   |   |   `-IntegerLiteral 0x7fffd83af138 <col:26> 'int' 0
|   |   |   |   `-<<<NULL>>>
|   |   |   |-ForStmt 0x7fffd83af7f0 <line:2068:10, line:2076:10>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-<<<NULL>>>
|   |   |   | `-CompoundStmt 0x7fffd83af7b0 <line:2068:19, line:2076:10>
|   |   |   |   |-IfStmt 0x7fffd83af278 <line:2069:13, col:26>
|   |   |   |   | |-<<<NULL>>>
|   |   |   |   | |-<<<NULL>>>
|   |   |   |   | |-BinaryOperator 0x7fffd83af248 <col:17, col:22> 'int' '>='
|   |   |   |   | | |-ImplicitCastExpr 0x7fffd83af218 <col:17> 'int' <LValueToRValue>
|   |   |   |   | | | `-DeclRefExpr 0x7fffd83af1c8 <col:17> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   | | `-ImplicitCastExpr 0x7fffd83af230 <col:22> 'int' <LValueToRValue>
|   |   |   |   | |   `-DeclRefExpr 0x7fffd83af1f0 <col:22> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   |   | |-BreakStmt 0x7fffd83af270 <col:26>
|   |   |   |   | `-<<<NULL>>>
|   |   |   |   |-CallExpr 0x7fffd83af3e0 <line:2070:13, col:45> 'void'
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83af3c8 <col:13> 'void (*)(stbtt__csctx *, float, float)' <FunctionToPointerDecay>
|   |   |   |   | | `-DeclRefExpr 0x7fffd83af2b0 <col:13> 'void (stbtt__csctx *, float, float)' Function 0x7fffd83a8330 'stbtt__csctx_rline_to' 'void (stbtt__csctx *, float, float)'
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83af420 <col:35> 'stbtt__csctx *' <LValueToRValue>
|   |   |   |   | | `-DeclRefExpr 0x7fffd83af2d8 <col:35> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83ac448 'c' 'stbtt__csctx *'
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83af438 <col:38, col:41> 'float' <LValueToRValue>
|   |   |   |   | | `-ArraySubscriptExpr 0x7fffd83af380 <col:38, col:41> 'float' lvalue
|   |   |   |   | |   |-ImplicitCastExpr 0x7fffd83af350 <col:38> 'float *' <ArrayToPointerDecay>
|   |   |   |   | |   | `-DeclRefExpr 0x7fffd83af300 <col:38> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   | |   `-ImplicitCastExpr 0x7fffd83af368 <col:40> 'int' <LValueToRValue>
|   |   |   |   | |     `-DeclRefExpr 0x7fffd83af328 <col:40> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   | `-ImplicitCastExpr 0x7fffd83af450 <col:44> 'float' <IntegralToFloating>
|   |   |   |   |   `-IntegerLiteral 0x7fffd83af3a8 <col:44> 'int' 0
|   |   |   |   |-UnaryOperator 0x7fffd83af490 <line:2071:13, col:14> 'int' postfix '++'
|   |   |   |   | `-DeclRefExpr 0x7fffd83af468 <col:13> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   |-LabelStmt 0x7fffd83af598 <line:2072:7, line:2073:26> 'vlineto'
|   |   |   |   | `-IfStmt 0x7fffd83af560 <col:13, col:26>
|   |   |   |   |   |-<<<NULL>>>
|   |   |   |   |   |-<<<NULL>>>
|   |   |   |   |   |-BinaryOperator 0x7fffd83af530 <col:17, col:22> 'int' '>='
|   |   |   |   |   | |-ImplicitCastExpr 0x7fffd83af500 <col:17> 'int' <LValueToRValue>
|   |   |   |   |   | | `-DeclRefExpr 0x7fffd83af4b0 <col:17> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   |   | `-ImplicitCastExpr 0x7fffd83af518 <col:22> 'int' <LValueToRValue>
|   |   |   |   |   |   `-DeclRefExpr 0x7fffd83af4d8 <col:22> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   |   |   |-BreakStmt 0x7fffd83af558 <col:26>
|   |   |   |   |   `-<<<NULL>>>
|   |   |   |   |-CallExpr 0x7fffd83af6e0 <line:2074:13, col:45> 'void'
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83af6c8 <col:13> 'void (*)(stbtt__csctx *, float, float)' <FunctionToPointerDecay>
|   |   |   |   | | `-DeclRefExpr 0x7fffd83af5b0 <col:13> 'void (stbtt__csctx *, float, float)' Function 0x7fffd83a8330 'stbtt__csctx_rline_to' 'void (stbtt__csctx *, float, float)'
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83af720 <col:35> 'stbtt__csctx *' <LValueToRValue>
|   |   |   |   | | `-DeclRefExpr 0x7fffd83af5d8 <col:35> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83ac448 'c' 'stbtt__csctx *'
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83af738 <col:38> 'float' <IntegralToFloating>
|   |   |   |   | | `-IntegerLiteral 0x7fffd83af600 <col:38> 'int' 0
|   |   |   |   | `-ImplicitCastExpr 0x7fffd83af750 <col:41, col:44> 'float' <LValueToRValue>
|   |   |   |   |   `-ArraySubscriptExpr 0x7fffd83af6a0 <col:41, col:44> 'float' lvalue
|   |   |   |   |     |-ImplicitCastExpr 0x7fffd83af670 <col:41> 'float *' <ArrayToPointerDecay>
|   |   |   |   |     | `-DeclRefExpr 0x7fffd83af620 <col:41> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   |     `-ImplicitCastExpr 0x7fffd83af688 <col:43> 'int' <LValueToRValue>
|   |   |   |   |       `-DeclRefExpr 0x7fffd83af648 <col:43> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   `-UnaryOperator 0x7fffd83af790 <line:2075:13, col:14> 'int' postfix '++'
|   |   |   |     `-DeclRefExpr 0x7fffd83af768 <col:13> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |-BreakStmt 0x7fffd83af828 <line:2077:10>
|   |   |   |-CaseStmt 0x7fffd83af850 <line:2079:7, line:2013:27>
|   |   |   | |-IntegerLiteral 0x7fffd83af830 <line:2079:12> 'int' 31
|   |   |   | |-<<<NULL>>>
|   |   |   | `-IfStmt 0x7fffd83af968 <line:2080:10, line:2013:27>
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-BinaryOperator 0x7fffd83af8e8 <line:2080:14, col:19> 'int' '<'
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83af8d0 <col:14> 'int' <LValueToRValue>
|   |   |   |   | | `-DeclRefExpr 0x7fffd83af888 <col:14> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   |   | `-IntegerLiteral 0x7fffd83af8b0 <col:19> 'int' 4
|   |   |   |   |-ReturnStmt 0x7fffd83af950 <col:22, line:2013:27>
|   |   |   |   | `-ParenExpr 0x7fffd83af930 <col:25, col:27> 'int'
|   |   |   |   |   `-IntegerLiteral 0x7fffd83af910 <col:26> 'int' 0
|   |   |   |   `-<<<NULL>>>
|   |   |   |-GotoStmt 0x7fffd83afe58 <line:2081:10, col:15> 'hvcurveto' 0x7fffd83afe10
|   |   |   |-CaseStmt 0x7fffd83afe90 <line:2082:7, line:2013:27>
|   |   |   | |-IntegerLiteral 0x7fffd83afe70 <line:2082:12> 'int' 30
|   |   |   | |-<<<NULL>>>
|   |   |   | `-IfStmt 0x7fffd83affa8 <line:2083:10, line:2013:27>
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-BinaryOperator 0x7fffd83aff28 <line:2083:14, col:19> 'int' '<'
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83aff10 <col:14> 'int' <LValueToRValue>
|   |   |   |   | | `-DeclRefExpr 0x7fffd83afec8 <col:14> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   |   | `-IntegerLiteral 0x7fffd83afef0 <col:19> 'int' 4
|   |   |   |   |-ReturnStmt 0x7fffd83aff90 <col:22, line:2013:27>
|   |   |   |   | `-ParenExpr 0x7fffd83aff70 <col:25, col:27> 'int'
|   |   |   |   |   `-IntegerLiteral 0x7fffd83aff50 <col:26> 'int' 0
|   |   |   |   `-<<<NULL>>>
|   |   |   |-ForStmt 0x7fffd83b12a0 <line:2084:10, line:2092:10>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-<<<NULL>>>
|   |   |   | `-CompoundStmt 0x7fffd83b1260 <line:2084:19, line:2092:10>
|   |   |   |   |-IfStmt 0x7fffd83b00d8 <line:2085:13, col:30>
|   |   |   |   | |-<<<NULL>>>
|   |   |   |   | |-<<<NULL>>>
|   |   |   |   | |-BinaryOperator 0x7fffd83b00a8 <col:17, col:26> 'int' '>='
|   |   |   |   | | |-BinaryOperator 0x7fffd83b0040 <col:17, col:21> 'int' '+'
|   |   |   |   | | | |-ImplicitCastExpr 0x7fffd83b0028 <col:17> 'int' <LValueToRValue>
|   |   |   |   | | | | `-DeclRefExpr 0x7fffd83affe0 <col:17> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   | | | `-IntegerLiteral 0x7fffd83b0008 <col:21> 'int' 3
|   |   |   |   | | `-ImplicitCastExpr 0x7fffd83b0090 <col:26> 'int' <LValueToRValue>
|   |   |   |   | |   `-DeclRefExpr 0x7fffd83b0068 <col:26> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   |   | |-BreakStmt 0x7fffd83b00d0 <col:30>
|   |   |   |   | `-<<<NULL>>>
|   |   |   |   |-CallExpr 0x7fffd83b07d0 <line:2086:13, col:104> 'void'
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83b07b8 <col:13> 'void (*)(stbtt__csctx *, float, float, float, float, float, float)' <FunctionToPointerDecay>
|   |   |   |   | | `-DeclRefExpr 0x7fffd83b0110 <col:13> 'void (stbtt__csctx *, float, float, float, float, float, float)' Function 0x7fffd83a8db0 'stbtt__csctx_rccurve_to' 'void (stbtt__csctx *, float, float, float, float, float, float)'
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83b0830 <col:37> 'stbtt__csctx *' <LValueToRValue>
|   |   |   |   | | `-DeclRefExpr 0x7fffd83b0138 <col:37> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83ac448 'c' 'stbtt__csctx *'
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83b0848 <col:40> 'float' <IntegralToFloating>
|   |   |   |   | | `-IntegerLiteral 0x7fffd83b0160 <col:40> 'int' 0
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83b0860 <col:43, col:46> 'float' <LValueToRValue>
|   |   |   |   | | `-ArraySubscriptExpr 0x7fffd83b0200 <col:43, col:46> 'float' lvalue
|   |   |   |   | |   |-ImplicitCastExpr 0x7fffd83b01d0 <col:43> 'float *' <ArrayToPointerDecay>
|   |   |   |   | |   | `-DeclRefExpr 0x7fffd83b0180 <col:43> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   | |   `-ImplicitCastExpr 0x7fffd83b01e8 <col:45> 'int' <LValueToRValue>
|   |   |   |   | |     `-DeclRefExpr 0x7fffd83b01a8 <col:45> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83b0878 <col:49, col:54> 'float' <LValueToRValue>
|   |   |   |   | | `-ArraySubscriptExpr 0x7fffd83b02f0 <col:49, col:54> 'float' lvalue
|   |   |   |   | |   |-ImplicitCastExpr 0x7fffd83b02d8 <col:49> 'float *' <ArrayToPointerDecay>
|   |   |   |   | |   | `-DeclRefExpr 0x7fffd83b0228 <col:49> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   | |   `-BinaryOperator 0x7fffd83b02b0 <col:51, col:53> 'int' '+'
|   |   |   |   | |     |-ImplicitCastExpr 0x7fffd83b0298 <col:51> 'int' <LValueToRValue>
|   |   |   |   | |     | `-DeclRefExpr 0x7fffd83b0250 <col:51> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   | |     `-IntegerLiteral 0x7fffd83b0278 <col:53> 'int' 1
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83b0890 <col:57, col:62> 'float' <LValueToRValue>
|   |   |   |   | | `-ArraySubscriptExpr 0x7fffd83b03e0 <col:57, col:62> 'float' lvalue
|   |   |   |   | |   |-ImplicitCastExpr 0x7fffd83b03c8 <col:57> 'float *' <ArrayToPointerDecay>
|   |   |   |   | |   | `-DeclRefExpr 0x7fffd83b0318 <col:57> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   | |   `-BinaryOperator 0x7fffd83b03a0 <col:59, col:61> 'int' '+'
|   |   |   |   | |     |-ImplicitCastExpr 0x7fffd83b0388 <col:59> 'int' <LValueToRValue>
|   |   |   |   | |     | `-DeclRefExpr 0x7fffd83b0340 <col:59> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   | |     `-IntegerLiteral 0x7fffd83b0368 <col:61> 'int' 2
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83b08a8 <col:65, col:70> 'float' <LValueToRValue>
|   |   |   |   | | `-ArraySubscriptExpr 0x7fffd83b04d0 <col:65, col:70> 'float' lvalue
|   |   |   |   | |   |-ImplicitCastExpr 0x7fffd83b04b8 <col:65> 'float *' <ArrayToPointerDecay>
|   |   |   |   | |   | `-DeclRefExpr 0x7fffd83b0408 <col:65> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   | |   `-BinaryOperator 0x7fffd83b0490 <col:67, col:69> 'int' '+'
|   |   |   |   | |     |-ImplicitCastExpr 0x7fffd83b0478 <col:67> 'int' <LValueToRValue>
|   |   |   |   | |     | `-DeclRefExpr 0x7fffd83b0430 <col:67> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   | |     `-IntegerLiteral 0x7fffd83b0458 <col:69> 'int' 3
|   |   |   |   | `-ConditionalOperator 0x7fffd83b0730 <col:73, col:100> 'float'
|   |   |   |   |   |-ParenExpr 0x7fffd83b05e8 <col:73, col:85> 'int'
|   |   |   |   |   | `-BinaryOperator 0x7fffd83b05c0 <col:74, col:84> 'int' '=='
|   |   |   |   |   |   |-BinaryOperator 0x7fffd83b0578 <col:74, col:79> 'int' '-'
|   |   |   |   |   |   | |-ImplicitCastExpr 0x7fffd83b0548 <col:74> 'int' <LValueToRValue>
|   |   |   |   |   |   | | `-DeclRefExpr 0x7fffd83b04f8 <col:74> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   |   |   |   | `-ImplicitCastExpr 0x7fffd83b0560 <col:79> 'int' <LValueToRValue>
|   |   |   |   |   |   |   `-DeclRefExpr 0x7fffd83b0520 <col:79> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   |   |   `-IntegerLiteral 0x7fffd83b05a0 <col:84> 'int' 5
|   |   |   |   |   |-ImplicitCastExpr 0x7fffd83b0718 <col:89, col:96> 'float' <LValueToRValue>
|   |   |   |   |   | `-ArraySubscriptExpr 0x7fffd83b06d0 <col:89, col:96> 'float' lvalue
|   |   |   |   |   |   |-ImplicitCastExpr 0x7fffd83b06b8 <col:89> 'float *' <ArrayToPointerDecay>
|   |   |   |   |   |   | `-DeclRefExpr 0x7fffd83b0608 <col:89> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   |   |   `-BinaryOperator 0x7fffd83b0690 <col:91, col:95> 'int' '+'
|   |   |   |   |   |     |-ImplicitCastExpr 0x7fffd83b0678 <col:91> 'int' <LValueToRValue>
|   |   |   |   |   |     | `-DeclRefExpr 0x7fffd83b0630 <col:91> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   |   |     `-IntegerLiteral 0x7fffd83b0658 <col:95> 'int' 4
|   |   |   |   |   `-FloatingLiteral 0x7fffd83b06f8 <col:100> 'float' 0.000000e+00
|   |   |   |   |-CompoundAssignOperator 0x7fffd83b0908 <line:2087:13, col:18> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |   |   | |-DeclRefExpr 0x7fffd83b08c0 <col:13> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   | `-IntegerLiteral 0x7fffd83b08e8 <col:18> 'int' 4
|   |   |   |   |-LabelStmt 0x7fffd83b0a70 <line:2088:7, line:2089:30> 'hvcurveto'
|   |   |   |   | `-IfStmt 0x7fffd83b0a38 <col:13, col:30>
|   |   |   |   |   |-<<<NULL>>>
|   |   |   |   |   |-<<<NULL>>>
|   |   |   |   |   |-BinaryOperator 0x7fffd83b0a08 <col:17, col:26> 'int' '>='
|   |   |   |   |   | |-BinaryOperator 0x7fffd83b09a0 <col:17, col:21> 'int' '+'
|   |   |   |   |   | | |-ImplicitCastExpr 0x7fffd83b0988 <col:17> 'int' <LValueToRValue>
|   |   |   |   |   | | | `-DeclRefExpr 0x7fffd83b0940 <col:17> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   |   | | `-IntegerLiteral 0x7fffd83b0968 <col:21> 'int' 3
|   |   |   |   |   | `-ImplicitCastExpr 0x7fffd83b09f0 <col:26> 'int' <LValueToRValue>
|   |   |   |   |   |   `-DeclRefExpr 0x7fffd83b09c8 <col:26> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   |   |   |-BreakStmt 0x7fffd83b0a30 <col:30>
|   |   |   |   |   `-<<<NULL>>>
|   |   |   |   |-CallExpr 0x7fffd83b10f0 <line:2090:13, col:102> 'void'
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83b10d8 <col:13> 'void (*)(stbtt__csctx *, float, float, float, float, float, float)' <FunctionToPointerDecay>
|   |   |   |   | | `-DeclRefExpr 0x7fffd83b0a88 <col:13> 'void (stbtt__csctx *, float, float, float, float, float, float)' Function 0x7fffd83a8db0 'stbtt__csctx_rccurve_to' 'void (stbtt__csctx *, float, float, float, float, float, float)'
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83b1150 <col:37> 'stbtt__csctx *' <LValueToRValue>
|   |   |   |   | | `-DeclRefExpr 0x7fffd83b0ab0 <col:37> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83ac448 'c' 'stbtt__csctx *'
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83b1168 <col:40, col:43> 'float' <LValueToRValue>
|   |   |   |   | | `-ArraySubscriptExpr 0x7fffd83b0b58 <col:40, col:43> 'float' lvalue
|   |   |   |   | |   |-ImplicitCastExpr 0x7fffd83b0b28 <col:40> 'float *' <ArrayToPointerDecay>
|   |   |   |   | |   | `-DeclRefExpr 0x7fffd83b0ad8 <col:40> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   | |   `-ImplicitCastExpr 0x7fffd83b0b40 <col:42> 'int' <LValueToRValue>
|   |   |   |   | |     `-DeclRefExpr 0x7fffd83b0b00 <col:42> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83b1180 <col:46> 'float' <IntegralToFloating>
|   |   |   |   | | `-IntegerLiteral 0x7fffd83b0b80 <col:46> 'int' 0
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83b1198 <col:49, col:54> 'float' <LValueToRValue>
|   |   |   |   | | `-ArraySubscriptExpr 0x7fffd83b0c68 <col:49, col:54> 'float' lvalue
|   |   |   |   | |   |-ImplicitCastExpr 0x7fffd83b0c50 <col:49> 'float *' <ArrayToPointerDecay>
|   |   |   |   | |   | `-DeclRefExpr 0x7fffd83b0ba0 <col:49> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   | |   `-BinaryOperator 0x7fffd83b0c28 <col:51, col:53> 'int' '+'
|   |   |   |   | |     |-ImplicitCastExpr 0x7fffd83b0c10 <col:51> 'int' <LValueToRValue>
|   |   |   |   | |     | `-DeclRefExpr 0x7fffd83b0bc8 <col:51> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   | |     `-IntegerLiteral 0x7fffd83b0bf0 <col:53> 'int' 1
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83b11b0 <col:57, col:62> 'float' <LValueToRValue>
|   |   |   |   | | `-ArraySubscriptExpr 0x7fffd83b0d58 <col:57, col:62> 'float' lvalue
|   |   |   |   | |   |-ImplicitCastExpr 0x7fffd83b0d40 <col:57> 'float *' <ArrayToPointerDecay>
|   |   |   |   | |   | `-DeclRefExpr 0x7fffd83b0c90 <col:57> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   | |   `-BinaryOperator 0x7fffd83b0d18 <col:59, col:61> 'int' '+'
|   |   |   |   | |     |-ImplicitCastExpr 0x7fffd83b0d00 <col:59> 'int' <LValueToRValue>
|   |   |   |   | |     | `-DeclRefExpr 0x7fffd83b0cb8 <col:59> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   | |     `-IntegerLiteral 0x7fffd83b0ce0 <col:61> 'int' 2
|   |   |   |   | |-ConditionalOperator 0x7fffd83b0fb8 <col:65, col:90> 'float'
|   |   |   |   | | |-ParenExpr 0x7fffd83b0e70 <col:65, col:77> 'int'
|   |   |   |   | | | `-BinaryOperator 0x7fffd83b0e48 <col:66, col:76> 'int' '=='
|   |   |   |   | | |   |-BinaryOperator 0x7fffd83b0e00 <col:66, col:71> 'int' '-'
|   |   |   |   | | |   | |-ImplicitCastExpr 0x7fffd83b0dd0 <col:66> 'int' <LValueToRValue>
|   |   |   |   | | |   | | `-DeclRefExpr 0x7fffd83b0d80 <col:66> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   |   | | |   | `-ImplicitCastExpr 0x7fffd83b0de8 <col:71> 'int' <LValueToRValue>
|   |   |   |   | | |   |   `-DeclRefExpr 0x7fffd83b0da8 <col:71> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   | | |   `-IntegerLiteral 0x7fffd83b0e28 <col:76> 'int' 5
|   |   |   |   | | |-ImplicitCastExpr 0x7fffd83b0fa0 <col:81, col:86> 'float' <LValueToRValue>
|   |   |   |   | | | `-ArraySubscriptExpr 0x7fffd83b0f58 <col:81, col:86> 'float' lvalue
|   |   |   |   | | |   |-ImplicitCastExpr 0x7fffd83b0f40 <col:81> 'float *' <ArrayToPointerDecay>
|   |   |   |   | | |   | `-DeclRefExpr 0x7fffd83b0e90 <col:81> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   | | |   `-BinaryOperator 0x7fffd83b0f18 <col:83, col:85> 'int' '+'
|   |   |   |   | | |     |-ImplicitCastExpr 0x7fffd83b0f00 <col:83> 'int' <LValueToRValue>
|   |   |   |   | | |     | `-DeclRefExpr 0x7fffd83b0eb8 <col:83> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   | | |     `-IntegerLiteral 0x7fffd83b0ee0 <col:85> 'int' 4
|   |   |   |   | | `-FloatingLiteral 0x7fffd83b0f80 <col:90> 'float' 0.000000e+00
|   |   |   |   | `-ImplicitCastExpr 0x7fffd83b11c8 <col:96, col:101> 'float' <LValueToRValue>
|   |   |   |   |   `-ArraySubscriptExpr 0x7fffd83b10b0 <col:96, col:101> 'float' lvalue
|   |   |   |   |     |-ImplicitCastExpr 0x7fffd83b1098 <col:96> 'float *' <ArrayToPointerDecay>
|   |   |   |   |     | `-DeclRefExpr 0x7fffd83b0fe8 <col:96> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   |     `-BinaryOperator 0x7fffd83b1070 <col:98, col:100> 'int' '+'
|   |   |   |   |       |-ImplicitCastExpr 0x7fffd83b1058 <col:98> 'int' <LValueToRValue>
|   |   |   |   |       | `-DeclRefExpr 0x7fffd83b1010 <col:98> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   |       `-IntegerLiteral 0x7fffd83b1038 <col:100> 'int' 3
|   |   |   |   `-CompoundAssignOperator 0x7fffd83b1228 <line:2091:13, col:18> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |   |     |-DeclRefExpr 0x7fffd83b11e0 <col:13> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |     `-IntegerLiteral 0x7fffd83b1208 <col:18> 'int' 4
|   |   |   |-BreakStmt 0x7fffd83b12d8 <line:2093:10>
|   |   |   |-CaseStmt 0x7fffd83b1300 <line:2095:7, line:2013:27>
|   |   |   | |-IntegerLiteral 0x7fffd83b12e0 <line:2095:12> 'int' 8
|   |   |   | |-<<<NULL>>>
|   |   |   | `-IfStmt 0x7fffd83b1418 <line:2096:10, line:2013:27>
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-BinaryOperator 0x7fffd83b1398 <line:2096:14, col:19> 'int' '<'
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83b1380 <col:14> 'int' <LValueToRValue>
|   |   |   |   | | `-DeclRefExpr 0x7fffd83b1338 <col:14> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   |   | `-IntegerLiteral 0x7fffd83b1360 <col:19> 'int' 6
|   |   |   |   |-ReturnStmt 0x7fffd83b1400 <col:22, line:2013:27>
|   |   |   |   | `-ParenExpr 0x7fffd83b13e0 <col:25, col:27> 'int'
|   |   |   |   |   `-IntegerLiteral 0x7fffd83b13c0 <col:26> 'int' 0
|   |   |   |   `-<<<NULL>>>
|   |   |   |-ForStmt 0x7fffd83b1c88 <line:2097:10, line:2098:84>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-BinaryOperator 0x7fffd83b1518 <line:2097:17, col:25> 'int' '<'
|   |   |   | | |-BinaryOperator 0x7fffd83b14b0 <col:17, col:21> 'int' '+'
|   |   |   | | | |-ImplicitCastExpr 0x7fffd83b1498 <col:17> 'int' <LValueToRValue>
|   |   |   | | | | `-DeclRefExpr 0x7fffd83b1450 <col:17> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   | | | `-IntegerLiteral 0x7fffd83b1478 <col:21> 'int' 5
|   |   |   | | `-ImplicitCastExpr 0x7fffd83b1500 <col:25> 'int' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x7fffd83b14d8 <col:25> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   | |-CompoundAssignOperator 0x7fffd83b1588 <col:29, col:34> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |   | | |-DeclRefExpr 0x7fffd83b1540 <col:29> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   | | `-IntegerLiteral 0x7fffd83b1568 <col:34> 'int' 6
|   |   |   | `-CallExpr 0x7fffd83b1b80 <line:2098:13, col:84> 'void'
|   |   |   |   |-ImplicitCastExpr 0x7fffd83b1b68 <col:13> 'void (*)(stbtt__csctx *, float, float, float, float, float, float)' <FunctionToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x7fffd83b15c0 <col:13> 'void (stbtt__csctx *, float, float, float, float, float, float)' Function 0x7fffd83a8db0 'stbtt__csctx_rccurve_to' 'void (stbtt__csctx *, float, float, float, float, float, float)'
|   |   |   |   |-ImplicitCastExpr 0x7fffd83b1be0 <col:37> 'stbtt__csctx *' <LValueToRValue>
|   |   |   |   | `-DeclRefExpr 0x7fffd83b15e8 <col:37> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83ac448 'c' 'stbtt__csctx *'
|   |   |   |   |-ImplicitCastExpr 0x7fffd83b1bf8 <col:40, col:43> 'float' <LValueToRValue>
|   |   |   |   | `-ArraySubscriptExpr 0x7fffd83b1690 <col:40, col:43> 'float' lvalue
|   |   |   |   |   |-ImplicitCastExpr 0x7fffd83b1660 <col:40> 'float *' <ArrayToPointerDecay>
|   |   |   |   |   | `-DeclRefExpr 0x7fffd83b1610 <col:40> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   |   `-ImplicitCastExpr 0x7fffd83b1678 <col:42> 'int' <LValueToRValue>
|   |   |   |   |     `-DeclRefExpr 0x7fffd83b1638 <col:42> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   |-ImplicitCastExpr 0x7fffd83b1c10 <col:46, col:51> 'float' <LValueToRValue>
|   |   |   |   | `-ArraySubscriptExpr 0x7fffd83b1780 <col:46, col:51> 'float' lvalue
|   |   |   |   |   |-ImplicitCastExpr 0x7fffd83b1768 <col:46> 'float *' <ArrayToPointerDecay>
|   |   |   |   |   | `-DeclRefExpr 0x7fffd83b16b8 <col:46> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   |   `-BinaryOperator 0x7fffd83b1740 <col:48, col:50> 'int' '+'
|   |   |   |   |     |-ImplicitCastExpr 0x7fffd83b1728 <col:48> 'int' <LValueToRValue>
|   |   |   |   |     | `-DeclRefExpr 0x7fffd83b16e0 <col:48> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   |     `-IntegerLiteral 0x7fffd83b1708 <col:50> 'int' 1
|   |   |   |   |-ImplicitCastExpr 0x7fffd83b1c28 <col:54, col:59> 'float' <LValueToRValue>
|   |   |   |   | `-ArraySubscriptExpr 0x7fffd83b1870 <col:54, col:59> 'float' lvalue
|   |   |   |   |   |-ImplicitCastExpr 0x7fffd83b1858 <col:54> 'float *' <ArrayToPointerDecay>
|   |   |   |   |   | `-DeclRefExpr 0x7fffd83b17a8 <col:54> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   |   `-BinaryOperator 0x7fffd83b1830 <col:56, col:58> 'int' '+'
|   |   |   |   |     |-ImplicitCastExpr 0x7fffd83b1818 <col:56> 'int' <LValueToRValue>
|   |   |   |   |     | `-DeclRefExpr 0x7fffd83b17d0 <col:56> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   |     `-IntegerLiteral 0x7fffd83b17f8 <col:58> 'int' 2
|   |   |   |   |-ImplicitCastExpr 0x7fffd83b1c40 <col:62, col:67> 'float' <LValueToRValue>
|   |   |   |   | `-ArraySubscriptExpr 0x7fffd83b1960 <col:62, col:67> 'float' lvalue
|   |   |   |   |   |-ImplicitCastExpr 0x7fffd83b1948 <col:62> 'float *' <ArrayToPointerDecay>
|   |   |   |   |   | `-DeclRefExpr 0x7fffd83b1898 <col:62> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   |   `-BinaryOperator 0x7fffd83b1920 <col:64, col:66> 'int' '+'
|   |   |   |   |     |-ImplicitCastExpr 0x7fffd83b1908 <col:64> 'int' <LValueToRValue>
|   |   |   |   |     | `-DeclRefExpr 0x7fffd83b18c0 <col:64> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   |     `-IntegerLiteral 0x7fffd83b18e8 <col:66> 'int' 3
|   |   |   |   |-ImplicitCastExpr 0x7fffd83b1c58 <col:70, col:75> 'float' <LValueToRValue>
|   |   |   |   | `-ArraySubscriptExpr 0x7fffd83b1a50 <col:70, col:75> 'float' lvalue
|   |   |   |   |   |-ImplicitCastExpr 0x7fffd83b1a38 <col:70> 'float *' <ArrayToPointerDecay>
|   |   |   |   |   | `-DeclRefExpr 0x7fffd83b1988 <col:70> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   |   `-BinaryOperator 0x7fffd83b1a10 <col:72, col:74> 'int' '+'
|   |   |   |   |     |-ImplicitCastExpr 0x7fffd83b19f8 <col:72> 'int' <LValueToRValue>
|   |   |   |   |     | `-DeclRefExpr 0x7fffd83b19b0 <col:72> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   |     `-IntegerLiteral 0x7fffd83b19d8 <col:74> 'int' 4
|   |   |   |   `-ImplicitCastExpr 0x7fffd83b1c70 <col:78, col:83> 'float' <LValueToRValue>
|   |   |   |     `-ArraySubscriptExpr 0x7fffd83b1b40 <col:78, col:83> 'float' lvalue
|   |   |   |       |-ImplicitCastExpr 0x7fffd83b1b28 <col:78> 'float *' <ArrayToPointerDecay>
|   |   |   |       | `-DeclRefExpr 0x7fffd83b1a78 <col:78> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       `-BinaryOperator 0x7fffd83b1b00 <col:80, col:82> 'int' '+'
|   |   |   |         |-ImplicitCastExpr 0x7fffd83b1ae8 <col:80> 'int' <LValueToRValue>
|   |   |   |         | `-DeclRefExpr 0x7fffd83b1aa0 <col:80> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |         `-IntegerLiteral 0x7fffd83b1ac8 <col:82> 'int' 5
|   |   |   |-BreakStmt 0x7fffd83b1cc0 <line:2099:10>
|   |   |   |-CaseStmt 0x7fffd83b1ce8 <line:2101:7, line:2013:27>
|   |   |   | |-IntegerLiteral 0x7fffd83b1cc8 <line:2101:12> 'int' 24
|   |   |   | |-<<<NULL>>>
|   |   |   | `-IfStmt 0x7fffd83b1e20 <line:2102:10, line:2013:27>
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-BinaryOperator 0x7fffd83b1d80 <line:2102:14, col:19> 'int' '<'
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83b1d68 <col:14> 'int' <LValueToRValue>
|   |   |   |   | | `-DeclRefExpr 0x7fffd83b1d20 <col:14> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   |   | `-IntegerLiteral 0x7fffd83b1d48 <col:19> 'int' 8
|   |   |   |   |-ReturnStmt 0x7fffd83b1de8 <col:22, line:2013:27>
|   |   |   |   | `-ParenExpr 0x7fffd83b1dc8 <col:25, col:27> 'int'
|   |   |   |   |   `-IntegerLiteral 0x7fffd83b1da8 <col:26> 'int' 0
|   |   |   |   `-<<<NULL>>>
|   |   |   |-ForStmt 0x7fffd83b26d8 <line:2103:10, line:2104:84>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-BinaryOperator 0x7fffd83b1f68 <line:2103:17, col:30> 'int' '<'
|   |   |   | | |-BinaryOperator 0x7fffd83b1eb8 <col:17, col:21> 'int' '+'
|   |   |   | | | |-ImplicitCastExpr 0x7fffd83b1ea0 <col:17> 'int' <LValueToRValue>
|   |   |   | | | | `-DeclRefExpr 0x7fffd83b1e58 <col:17> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   | | | `-IntegerLiteral 0x7fffd83b1e80 <col:21> 'int' 5
|   |   |   | | `-BinaryOperator 0x7fffd83b1f40 <col:25, col:30> 'int' '-'
|   |   |   | |   |-ImplicitCastExpr 0x7fffd83b1f28 <col:25> 'int' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x7fffd83b1ee0 <col:25> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   | |   `-IntegerLiteral 0x7fffd83b1f08 <col:30> 'int' 2
|   |   |   | |-CompoundAssignOperator 0x7fffd83b1fd8 <col:33, col:38> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |   | | |-DeclRefExpr 0x7fffd83b1f90 <col:33> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   | | `-IntegerLiteral 0x7fffd83b1fb8 <col:38> 'int' 6
|   |   |   | `-CallExpr 0x7fffd83b25d0 <line:2104:13, col:84> 'void'
|   |   |   |   |-ImplicitCastExpr 0x7fffd83b25b8 <col:13> 'void (*)(stbtt__csctx *, float, float, float, float, float, float)' <FunctionToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x7fffd83b2010 <col:13> 'void (stbtt__csctx *, float, float, float, float, float, float)' Function 0x7fffd83a8db0 'stbtt__csctx_rccurve_to' 'void (stbtt__csctx *, float, float, float, float, float, float)'
|   |   |   |   |-ImplicitCastExpr 0x7fffd83b2630 <col:37> 'stbtt__csctx *' <LValueToRValue>
|   |   |   |   | `-DeclRefExpr 0x7fffd83b2038 <col:37> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83ac448 'c' 'stbtt__csctx *'
|   |   |   |   |-ImplicitCastExpr 0x7fffd83b2648 <col:40, col:43> 'float' <LValueToRValue>
|   |   |   |   | `-ArraySubscriptExpr 0x7fffd83b20e0 <col:40, col:43> 'float' lvalue
|   |   |   |   |   |-ImplicitCastExpr 0x7fffd83b20b0 <col:40> 'float *' <ArrayToPointerDecay>
|   |   |   |   |   | `-DeclRefExpr 0x7fffd83b2060 <col:40> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   |   `-ImplicitCastExpr 0x7fffd83b20c8 <col:42> 'int' <LValueToRValue>
|   |   |   |   |     `-DeclRefExpr 0x7fffd83b2088 <col:42> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   |-ImplicitCastExpr 0x7fffd83b2660 <col:46, col:51> 'float' <LValueToRValue>
|   |   |   |   | `-ArraySubscriptExpr 0x7fffd83b21d0 <col:46, col:51> 'float' lvalue
|   |   |   |   |   |-ImplicitCastExpr 0x7fffd83b21b8 <col:46> 'float *' <ArrayToPointerDecay>
|   |   |   |   |   | `-DeclRefExpr 0x7fffd83b2108 <col:46> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   |   `-BinaryOperator 0x7fffd83b2190 <col:48, col:50> 'int' '+'
|   |   |   |   |     |-ImplicitCastExpr 0x7fffd83b2178 <col:48> 'int' <LValueToRValue>
|   |   |   |   |     | `-DeclRefExpr 0x7fffd83b2130 <col:48> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   |     `-IntegerLiteral 0x7fffd83b2158 <col:50> 'int' 1
|   |   |   |   |-ImplicitCastExpr 0x7fffd83b2678 <col:54, col:59> 'float' <LValueToRValue>
|   |   |   |   | `-ArraySubscriptExpr 0x7fffd83b22c0 <col:54, col:59> 'float' lvalue
|   |   |   |   |   |-ImplicitCastExpr 0x7fffd83b22a8 <col:54> 'float *' <ArrayToPointerDecay>
|   |   |   |   |   | `-DeclRefExpr 0x7fffd83b21f8 <col:54> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   |   `-BinaryOperator 0x7fffd83b2280 <col:56, col:58> 'int' '+'
|   |   |   |   |     |-ImplicitCastExpr 0x7fffd83b2268 <col:56> 'int' <LValueToRValue>
|   |   |   |   |     | `-DeclRefExpr 0x7fffd83b2220 <col:56> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   |     `-IntegerLiteral 0x7fffd83b2248 <col:58> 'int' 2
|   |   |   |   |-ImplicitCastExpr 0x7fffd83b2690 <col:62, col:67> 'float' <LValueToRValue>
|   |   |   |   | `-ArraySubscriptExpr 0x7fffd83b23b0 <col:62, col:67> 'float' lvalue
|   |   |   |   |   |-ImplicitCastExpr 0x7fffd83b2398 <col:62> 'float *' <ArrayToPointerDecay>
|   |   |   |   |   | `-DeclRefExpr 0x7fffd83b22e8 <col:62> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   |   `-BinaryOperator 0x7fffd83b2370 <col:64, col:66> 'int' '+'
|   |   |   |   |     |-ImplicitCastExpr 0x7fffd83b2358 <col:64> 'int' <LValueToRValue>
|   |   |   |   |     | `-DeclRefExpr 0x7fffd83b2310 <col:64> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   |     `-IntegerLiteral 0x7fffd83b2338 <col:66> 'int' 3
|   |   |   |   |-ImplicitCastExpr 0x7fffd83b26a8 <col:70, col:75> 'float' <LValueToRValue>
|   |   |   |   | `-ArraySubscriptExpr 0x7fffd83b24a0 <col:70, col:75> 'float' lvalue
|   |   |   |   |   |-ImplicitCastExpr 0x7fffd83b2488 <col:70> 'float *' <ArrayToPointerDecay>
|   |   |   |   |   | `-DeclRefExpr 0x7fffd83b23d8 <col:70> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   |   `-BinaryOperator 0x7fffd83b2460 <col:72, col:74> 'int' '+'
|   |   |   |   |     |-ImplicitCastExpr 0x7fffd83b2448 <col:72> 'int' <LValueToRValue>
|   |   |   |   |     | `-DeclRefExpr 0x7fffd83b2400 <col:72> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   |     `-IntegerLiteral 0x7fffd83b2428 <col:74> 'int' 4
|   |   |   |   `-ImplicitCastExpr 0x7fffd83b26c0 <col:78, col:83> 'float' <LValueToRValue>
|   |   |   |     `-ArraySubscriptExpr 0x7fffd83b2590 <col:78, col:83> 'float' lvalue
|   |   |   |       |-ImplicitCastExpr 0x7fffd83b2578 <col:78> 'float *' <ArrayToPointerDecay>
|   |   |   |       | `-DeclRefExpr 0x7fffd83b24c8 <col:78> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       `-BinaryOperator 0x7fffd83b2550 <col:80, col:82> 'int' '+'
|   |   |   |         |-ImplicitCastExpr 0x7fffd83b2538 <col:80> 'int' <LValueToRValue>
|   |   |   |         | `-DeclRefExpr 0x7fffd83b24f0 <col:80> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |         `-IntegerLiteral 0x7fffd83b2518 <col:82> 'int' 5
|   |   |   |-IfStmt 0x7fffd83b2858 <line:2105:10, line:2013:27>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-BinaryOperator 0x7fffd83b27d8 <line:2105:14, col:23> 'int' '>='
|   |   |   | | |-BinaryOperator 0x7fffd83b2770 <col:14, col:18> 'int' '+'
|   |   |   | | | |-ImplicitCastExpr 0x7fffd83b2758 <col:14> 'int' <LValueToRValue>
|   |   |   | | | | `-DeclRefExpr 0x7fffd83b2710 <col:14> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   | | | `-IntegerLiteral 0x7fffd83b2738 <col:18> 'int' 1
|   |   |   | | `-ImplicitCastExpr 0x7fffd83b27c0 <col:23> 'int' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x7fffd83b2798 <col:23> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   | |-ReturnStmt 0x7fffd83b2840 <col:27, line:2013:27>
|   |   |   | | `-ParenExpr 0x7fffd83b2820 <col:25, col:27> 'int'
|   |   |   | |   `-IntegerLiteral 0x7fffd83b2800 <col:26> 'int' 0
|   |   |   | `-<<<NULL>>>
|   |   |   |-CallExpr 0x7fffd83b2a90 <line:2106:10, col:47> 'void'
|   |   |   | |-ImplicitCastExpr 0x7fffd83b2a78 <col:10> 'void (*)(stbtt__csctx *, float, float)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x7fffd83b2890 <col:10> 'void (stbtt__csctx *, float, float)' Function 0x7fffd83a8330 'stbtt__csctx_rline_to' 'void (stbtt__csctx *, float, float)'
|   |   |   | |-ImplicitCastExpr 0x7fffd83b2ad0 <col:32> 'stbtt__csctx *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x7fffd83b28b8 <col:32> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83ac448 'c' 'stbtt__csctx *'
|   |   |   | |-ImplicitCastExpr 0x7fffd83b2ae8 <col:35, col:38> 'float' <LValueToRValue>
|   |   |   | | `-ArraySubscriptExpr 0x7fffd83b2960 <col:35, col:38> 'float' lvalue
|   |   |   | |   |-ImplicitCastExpr 0x7fffd83b2930 <col:35> 'float *' <ArrayToPointerDecay>
|   |   |   | |   | `-DeclRefExpr 0x7fffd83b28e0 <col:35> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   | |   `-ImplicitCastExpr 0x7fffd83b2948 <col:37> 'int' <LValueToRValue>
|   |   |   | |     `-DeclRefExpr 0x7fffd83b2908 <col:37> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   | `-ImplicitCastExpr 0x7fffd83b2b00 <col:41, col:46> 'float' <LValueToRValue>
|   |   |   |   `-ArraySubscriptExpr 0x7fffd83b2a50 <col:41, col:46> 'float' lvalue
|   |   |   |     |-ImplicitCastExpr 0x7fffd83b2a38 <col:41> 'float *' <ArrayToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x7fffd83b2988 <col:41> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |     `-BinaryOperator 0x7fffd83b2a10 <col:43, col:45> 'int' '+'
|   |   |   |       |-ImplicitCastExpr 0x7fffd83b29f8 <col:43> 'int' <LValueToRValue>
|   |   |   |       | `-DeclRefExpr 0x7fffd83b29b0 <col:43> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |       `-IntegerLiteral 0x7fffd83b29d8 <col:45> 'int' 1
|   |   |   |-BreakStmt 0x7fffd83b2b18 <line:2107:10>
|   |   |   |-CaseStmt 0x7fffd83b2b40 <line:2109:7, line:2013:27>
|   |   |   | |-IntegerLiteral 0x7fffd83b2b20 <line:2109:12> 'int' 25
|   |   |   | |-<<<NULL>>>
|   |   |   | `-IfStmt 0x7fffd83b2c58 <line:2110:10, line:2013:27>
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-BinaryOperator 0x7fffd83b2bd8 <line:2110:14, col:19> 'int' '<'
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83b2bc0 <col:14> 'int' <LValueToRValue>
|   |   |   |   | | `-DeclRefExpr 0x7fffd83b2b78 <col:14> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   |   | `-IntegerLiteral 0x7fffd83b2ba0 <col:19> 'int' 8
|   |   |   |   |-ReturnStmt 0x7fffd83b2c40 <col:22, line:2013:27>
|   |   |   |   | `-ParenExpr 0x7fffd83b2c20 <col:25, col:27> 'int'
|   |   |   |   |   `-IntegerLiteral 0x7fffd83b2c00 <col:26> 'int' 0
|   |   |   |   `-<<<NULL>>>
|   |   |   |-ForStmt 0x7fffd83b30d0 <line:2111:10, line:2112:50>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-BinaryOperator 0x7fffd83b2da0 <line:2111:17, col:30> 'int' '<'
|   |   |   | | |-BinaryOperator 0x7fffd83b2cf0 <col:17, col:21> 'int' '+'
|   |   |   | | | |-ImplicitCastExpr 0x7fffd83b2cd8 <col:17> 'int' <LValueToRValue>
|   |   |   | | | | `-DeclRefExpr 0x7fffd83b2c90 <col:17> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   | | | `-IntegerLiteral 0x7fffd83b2cb8 <col:21> 'int' 1
|   |   |   | | `-BinaryOperator 0x7fffd83b2d78 <col:25, col:30> 'int' '-'
|   |   |   | |   |-ImplicitCastExpr 0x7fffd83b2d60 <col:25> 'int' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x7fffd83b2d18 <col:25> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   | |   `-IntegerLiteral 0x7fffd83b2d40 <col:30> 'int' 6
|   |   |   | |-CompoundAssignOperator 0x7fffd83b2e10 <col:33, col:38> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |   | | |-DeclRefExpr 0x7fffd83b2dc8 <col:33> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   | | `-IntegerLiteral 0x7fffd83b2df0 <col:38> 'int' 2
|   |   |   | `-CallExpr 0x7fffd83b3048 <line:2112:13, col:50> 'void'
|   |   |   |   |-ImplicitCastExpr 0x7fffd83b3030 <col:13> 'void (*)(stbtt__csctx *, float, float)' <FunctionToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x7fffd83b2e48 <col:13> 'void (stbtt__csctx *, float, float)' Function 0x7fffd83a8330 'stbtt__csctx_rline_to' 'void (stbtt__csctx *, float, float)'
|   |   |   |   |-ImplicitCastExpr 0x7fffd83b3088 <col:35> 'stbtt__csctx *' <LValueToRValue>
|   |   |   |   | `-DeclRefExpr 0x7fffd83b2e70 <col:35> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83ac448 'c' 'stbtt__csctx *'
|   |   |   |   |-ImplicitCastExpr 0x7fffd83b30a0 <col:38, col:41> 'float' <LValueToRValue>
|   |   |   |   | `-ArraySubscriptExpr 0x7fffd83b2f18 <col:38, col:41> 'float' lvalue
|   |   |   |   |   |-ImplicitCastExpr 0x7fffd83b2ee8 <col:38> 'float *' <ArrayToPointerDecay>
|   |   |   |   |   | `-DeclRefExpr 0x7fffd83b2e98 <col:38> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   |   `-ImplicitCastExpr 0x7fffd83b2f00 <col:40> 'int' <LValueToRValue>
|   |   |   |   |     `-DeclRefExpr 0x7fffd83b2ec0 <col:40> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   `-ImplicitCastExpr 0x7fffd83b30b8 <col:44, col:49> 'float' <LValueToRValue>
|   |   |   |     `-ArraySubscriptExpr 0x7fffd83b3008 <col:44, col:49> 'float' lvalue
|   |   |   |       |-ImplicitCastExpr 0x7fffd83b2ff0 <col:44> 'float *' <ArrayToPointerDecay>
|   |   |   |       | `-DeclRefExpr 0x7fffd83b2f40 <col:44> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       `-BinaryOperator 0x7fffd83b2fc8 <col:46, col:48> 'int' '+'
|   |   |   |         |-ImplicitCastExpr 0x7fffd83b2fb0 <col:46> 'int' <LValueToRValue>
|   |   |   |         | `-DeclRefExpr 0x7fffd83b2f68 <col:46> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |         `-IntegerLiteral 0x7fffd83b2f90 <col:48> 'int' 1
|   |   |   |-IfStmt 0x7fffd83b3250 <line:2113:10, line:2013:27>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-BinaryOperator 0x7fffd83b31d0 <line:2113:14, col:23> 'int' '>='
|   |   |   | | |-BinaryOperator 0x7fffd83b3168 <col:14, col:18> 'int' '+'
|   |   |   | | | |-ImplicitCastExpr 0x7fffd83b3150 <col:14> 'int' <LValueToRValue>
|   |   |   | | | | `-DeclRefExpr 0x7fffd83b3108 <col:14> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   | | | `-IntegerLiteral 0x7fffd83b3130 <col:18> 'int' 5
|   |   |   | | `-ImplicitCastExpr 0x7fffd83b31b8 <col:23> 'int' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x7fffd83b3190 <col:23> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   | |-ReturnStmt 0x7fffd83b3238 <col:27, line:2013:27>
|   |   |   | | `-ParenExpr 0x7fffd83b3218 <col:25, col:27> 'int'
|   |   |   | |   `-IntegerLiteral 0x7fffd83b31f8 <col:26> 'int' 0
|   |   |   | `-<<<NULL>>>
|   |   |   |-CallExpr 0x7fffd83b3848 <line:2114:10, col:81> 'void'
|   |   |   | |-ImplicitCastExpr 0x7fffd83b3830 <col:10> 'void (*)(stbtt__csctx *, float, float, float, float, float, float)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x7fffd83b3288 <col:10> 'void (stbtt__csctx *, float, float, float, float, float, float)' Function 0x7fffd83a8db0 'stbtt__csctx_rccurve_to' 'void (stbtt__csctx *, float, float, float, float, float, float)'
|   |   |   | |-ImplicitCastExpr 0x7fffd83b38a8 <col:34> 'stbtt__csctx *' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x7fffd83b32b0 <col:34> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83ac448 'c' 'stbtt__csctx *'
|   |   |   | |-ImplicitCastExpr 0x7fffd83b38c0 <col:37, col:40> 'float' <LValueToRValue>
|   |   |   | | `-ArraySubscriptExpr 0x7fffd83b3358 <col:37, col:40> 'float' lvalue
|   |   |   | |   |-ImplicitCastExpr 0x7fffd83b3328 <col:37> 'float *' <ArrayToPointerDecay>
|   |   |   | |   | `-DeclRefExpr 0x7fffd83b32d8 <col:37> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   | |   `-ImplicitCastExpr 0x7fffd83b3340 <col:39> 'int' <LValueToRValue>
|   |   |   | |     `-DeclRefExpr 0x7fffd83b3300 <col:39> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   | |-ImplicitCastExpr 0x7fffd83b38d8 <col:43, col:48> 'float' <LValueToRValue>
|   |   |   | | `-ArraySubscriptExpr 0x7fffd83b3448 <col:43, col:48> 'float' lvalue
|   |   |   | |   |-ImplicitCastExpr 0x7fffd83b3430 <col:43> 'float *' <ArrayToPointerDecay>
|   |   |   | |   | `-DeclRefExpr 0x7fffd83b3380 <col:43> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   | |   `-BinaryOperator 0x7fffd83b3408 <col:45, col:47> 'int' '+'
|   |   |   | |     |-ImplicitCastExpr 0x7fffd83b33f0 <col:45> 'int' <LValueToRValue>
|   |   |   | |     | `-DeclRefExpr 0x7fffd83b33a8 <col:45> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   | |     `-IntegerLiteral 0x7fffd83b33d0 <col:47> 'int' 1
|   |   |   | |-ImplicitCastExpr 0x7fffd83b38f0 <col:51, col:56> 'float' <LValueToRValue>
|   |   |   | | `-ArraySubscriptExpr 0x7fffd83b3538 <col:51, col:56> 'float' lvalue
|   |   |   | |   |-ImplicitCastExpr 0x7fffd83b3520 <col:51> 'float *' <ArrayToPointerDecay>
|   |   |   | |   | `-DeclRefExpr 0x7fffd83b3470 <col:51> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   | |   `-BinaryOperator 0x7fffd83b34f8 <col:53, col:55> 'int' '+'
|   |   |   | |     |-ImplicitCastExpr 0x7fffd83b34e0 <col:53> 'int' <LValueToRValue>
|   |   |   | |     | `-DeclRefExpr 0x7fffd83b3498 <col:53> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   | |     `-IntegerLiteral 0x7fffd83b34c0 <col:55> 'int' 2
|   |   |   | |-ImplicitCastExpr 0x7fffd83b3908 <col:59, col:64> 'float' <LValueToRValue>
|   |   |   | | `-ArraySubscriptExpr 0x7fffd83b3628 <col:59, col:64> 'float' lvalue
|   |   |   | |   |-ImplicitCastExpr 0x7fffd83b3610 <col:59> 'float *' <ArrayToPointerDecay>
|   |   |   | |   | `-DeclRefExpr 0x7fffd83b3560 <col:59> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   | |   `-BinaryOperator 0x7fffd83b35e8 <col:61, col:63> 'int' '+'
|   |   |   | |     |-ImplicitCastExpr 0x7fffd83b35d0 <col:61> 'int' <LValueToRValue>
|   |   |   | |     | `-DeclRefExpr 0x7fffd83b3588 <col:61> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   | |     `-IntegerLiteral 0x7fffd83b35b0 <col:63> 'int' 3
|   |   |   | |-ImplicitCastExpr 0x7fffd83b3920 <col:67, col:72> 'float' <LValueToRValue>
|   |   |   | | `-ArraySubscriptExpr 0x7fffd83b3718 <col:67, col:72> 'float' lvalue
|   |   |   | |   |-ImplicitCastExpr 0x7fffd83b3700 <col:67> 'float *' <ArrayToPointerDecay>
|   |   |   | |   | `-DeclRefExpr 0x7fffd83b3650 <col:67> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   | |   `-BinaryOperator 0x7fffd83b36d8 <col:69, col:71> 'int' '+'
|   |   |   | |     |-ImplicitCastExpr 0x7fffd83b36c0 <col:69> 'int' <LValueToRValue>
|   |   |   | |     | `-DeclRefExpr 0x7fffd83b3678 <col:69> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   | |     `-IntegerLiteral 0x7fffd83b36a0 <col:71> 'int' 4
|   |   |   | `-ImplicitCastExpr 0x7fffd83b3938 <col:75, col:80> 'float' <LValueToRValue>
|   |   |   |   `-ArraySubscriptExpr 0x7fffd83b3808 <col:75, col:80> 'float' lvalue
|   |   |   |     |-ImplicitCastExpr 0x7fffd83b37f0 <col:75> 'float *' <ArrayToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x7fffd83b3740 <col:75> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |     `-BinaryOperator 0x7fffd83b37c8 <col:77, col:79> 'int' '+'
|   |   |   |       |-ImplicitCastExpr 0x7fffd83b37b0 <col:77> 'int' <LValueToRValue>
|   |   |   |       | `-DeclRefExpr 0x7fffd83b3768 <col:77> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |       `-IntegerLiteral 0x7fffd83b3790 <col:79> 'int' 5
|   |   |   |-BreakStmt 0x7fffd83b3950 <line:2115:10>
|   |   |   |-CaseStmt 0x7fffd83b3978 <line:2117:7, line:2013:27>
|   |   |   | |-IntegerLiteral 0x7fffd83b3958 <line:2117:12> 'int' 26
|   |   |   | |-<<<NULL>>>
|   |   |   | `-CaseStmt 0x7fffd83b39d0 <line:2118:7, line:2013:27>
|   |   |   |   |-IntegerLiteral 0x7fffd83b39b0 <line:2118:12> 'int' 27
|   |   |   |   |-<<<NULL>>>
|   |   |   |   `-IfStmt 0x7fffd83b3ae8 <line:2119:10, line:2013:27>
|   |   |   |     |-<<<NULL>>>
|   |   |   |     |-<<<NULL>>>
|   |   |   |     |-BinaryOperator 0x7fffd83b3a68 <line:2119:14, col:19> 'int' '<'
|   |   |   |     | |-ImplicitCastExpr 0x7fffd83b3a50 <col:14> 'int' <LValueToRValue>
|   |   |   |     | | `-DeclRefExpr 0x7fffd83b3a08 <col:14> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   |     | `-IntegerLiteral 0x7fffd83b3a30 <col:19> 'int' 4
|   |   |   |     |-ReturnStmt 0x7fffd83b3ad0 <col:22, line:2013:27>
|   |   |   |     | `-ParenExpr 0x7fffd83b3ab0 <col:25, col:27> 'int'
|   |   |   |     |   `-IntegerLiteral 0x7fffd83b3a90 <col:26> 'int' 0
|   |   |   |     `-<<<NULL>>>
|   |   |   |-BinaryOperator 0x7fffd83b3b80 <line:2120:10, col:14> 'float' '='
|   |   |   | |-DeclRefExpr 0x7fffd83b3b20 <col:10> 'float' lvalue Var 0x7fffd83acf78 'f' 'float'
|   |   |   | `-ImplicitCastExpr 0x7fffd83b3b68 <col:14> 'float' <FloatingCast>
|   |   |   |   `-FloatingLiteral 0x7fffd83b3b48 <col:14> 'double' 0.000000e+00
|   |   |   |-IfStmt 0x7fffd83b3da8 <line:2121:10, col:39>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-BinaryOperator 0x7fffd83b3c08 <col:14, col:19> 'int' '&'
|   |   |   | | |-ImplicitCastExpr 0x7fffd83b3bf0 <col:14> 'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x7fffd83b3ba8 <col:14> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   | | `-IntegerLiteral 0x7fffd83b3bd0 <col:19> 'int' 1
|   |   |   | |-CompoundStmt 0x7fffd83b3d88 <col:22, col:39>
|   |   |   | | |-BinaryOperator 0x7fffd83b3d18 <col:24, col:31> 'float' '='
|   |   |   | | | |-DeclRefExpr 0x7fffd83b3c30 <col:24> 'float' lvalue Var 0x7fffd83acf78 'f' 'float'
|   |   |   | | | `-ImplicitCastExpr 0x7fffd83b3d00 <col:28, col:31> 'float' <LValueToRValue>
|   |   |   | | |   `-ArraySubscriptExpr 0x7fffd83b3cd8 <col:28, col:31> 'float' lvalue
|   |   |   | | |     |-ImplicitCastExpr 0x7fffd83b3ca8 <col:28> 'float *' <ArrayToPointerDecay>
|   |   |   | | |     | `-DeclRefExpr 0x7fffd83b3c58 <col:28> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   | | |     `-ImplicitCastExpr 0x7fffd83b3cc0 <col:30> 'int' <LValueToRValue>
|   |   |   | | |       `-DeclRefExpr 0x7fffd83b3c80 <col:30> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   | | `-UnaryOperator 0x7fffd83b3d68 <col:34, col:35> 'int' postfix '++'
|   |   |   | |   `-DeclRefExpr 0x7fffd83b3d40 <col:34> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   | `-<<<NULL>>>
|   |   |   |-ForStmt 0x7fffd83b4b40 <line:2122:10, line:2128:10>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-BinaryOperator 0x7fffd83b3ed0 <line:2122:17, col:25> 'int' '<'
|   |   |   | | |-BinaryOperator 0x7fffd83b3e68 <col:17, col:21> 'int' '+'
|   |   |   | | | |-ImplicitCastExpr 0x7fffd83b3e50 <col:17> 'int' <LValueToRValue>
|   |   |   | | | | `-DeclRefExpr 0x7fffd83b3de0 <col:17> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   | | | `-IntegerLiteral 0x7fffd83b3e30 <col:21> 'int' 3
|   |   |   | | `-ImplicitCastExpr 0x7fffd83b3eb8 <col:25> 'int' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x7fffd83b3e90 <col:25> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   | |-CompoundAssignOperator 0x7fffd83b3f40 <col:29, col:34> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |   | | |-DeclRefExpr 0x7fffd83b3ef8 <col:29> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   | | `-IntegerLiteral 0x7fffd83b3f20 <col:34> 'int' 4
|   |   |   | `-CompoundStmt 0x7fffd83b4b20 <col:37, line:2128:10>
|   |   |   |   |-IfStmt 0x7fffd83b4a60 <line:2123:13, line:2126:79>
|   |   |   |   | |-<<<NULL>>>
|   |   |   |   | |-<<<NULL>>>
|   |   |   |   | |-BinaryOperator 0x7fffd83b3fd8 <line:2123:17, col:23> 'int' '=='
|   |   |   |   | | |-ImplicitCastExpr 0x7fffd83b3fc0 <col:17> 'int' <LValueToRValue>
|   |   |   |   | | | `-DeclRefExpr 0x7fffd83b3f78 <col:17> 'int' lvalue Var 0x7fffd83ac9a8 'b0' 'int'
|   |   |   |   | | `-IntegerLiteral 0x7fffd83b3fa0 <col:23> 'int' 27
|   |   |   |   | |-CallExpr 0x7fffd83b4428 <line:2124:16, col:79> 'void'
|   |   |   |   | | |-ImplicitCastExpr 0x7fffd83b4410 <col:16> 'void (*)(stbtt__csctx *, float, float, float, float, float, float)' <FunctionToPointerDecay>
|   |   |   |   | | | `-DeclRefExpr 0x7fffd83b4000 <col:16> 'void (stbtt__csctx *, float, float, float, float, float, float)' Function 0x7fffd83a8db0 'stbtt__csctx_rccurve_to' 'void (stbtt__csctx *, float, float, float, float, float, float)'
|   |   |   |   | | |-ImplicitCastExpr 0x7fffd83b4488 <col:40> 'stbtt__csctx *' <LValueToRValue>
|   |   |   |   | | | `-DeclRefExpr 0x7fffd83b4028 <col:40> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83ac448 'c' 'stbtt__csctx *'
|   |   |   |   | | |-ImplicitCastExpr 0x7fffd83b44a0 <col:43, col:46> 'float' <LValueToRValue>
|   |   |   |   | | | `-ArraySubscriptExpr 0x7fffd83b40d0 <col:43, col:46> 'float' lvalue
|   |   |   |   | | |   |-ImplicitCastExpr 0x7fffd83b40a0 <col:43> 'float *' <ArrayToPointerDecay>
|   |   |   |   | | |   | `-DeclRefExpr 0x7fffd83b4050 <col:43> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   | | |   `-ImplicitCastExpr 0x7fffd83b40b8 <col:45> 'int' <LValueToRValue>
|   |   |   |   | | |     `-DeclRefExpr 0x7fffd83b4078 <col:45> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   | | |-ImplicitCastExpr 0x7fffd83b44b8 <col:49> 'float' <LValueToRValue>
|   |   |   |   | | | `-DeclRefExpr 0x7fffd83b40f8 <col:49> 'float' lvalue Var 0x7fffd83acf78 'f' 'float'
|   |   |   |   | | |-ImplicitCastExpr 0x7fffd83b44d0 <col:52, col:57> 'float' <LValueToRValue>
|   |   |   |   | | | `-ArraySubscriptExpr 0x7fffd83b41e8 <col:52, col:57> 'float' lvalue
|   |   |   |   | | |   |-ImplicitCastExpr 0x7fffd83b41d0 <col:52> 'float *' <ArrayToPointerDecay>
|   |   |   |   | | |   | `-DeclRefExpr 0x7fffd83b4120 <col:52> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   | | |   `-BinaryOperator 0x7fffd83b41a8 <col:54, col:56> 'int' '+'
|   |   |   |   | | |     |-ImplicitCastExpr 0x7fffd83b4190 <col:54> 'int' <LValueToRValue>
|   |   |   |   | | |     | `-DeclRefExpr 0x7fffd83b4148 <col:54> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   | | |     `-IntegerLiteral 0x7fffd83b4170 <col:56> 'int' 1
|   |   |   |   | | |-ImplicitCastExpr 0x7fffd83b44e8 <col:60, col:65> 'float' <LValueToRValue>
|   |   |   |   | | | `-ArraySubscriptExpr 0x7fffd83b42d8 <col:60, col:65> 'float' lvalue
|   |   |   |   | | |   |-ImplicitCastExpr 0x7fffd83b42c0 <col:60> 'float *' <ArrayToPointerDecay>
|   |   |   |   | | |   | `-DeclRefExpr 0x7fffd83b4210 <col:60> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   | | |   `-BinaryOperator 0x7fffd83b4298 <col:62, col:64> 'int' '+'
|   |   |   |   | | |     |-ImplicitCastExpr 0x7fffd83b4280 <col:62> 'int' <LValueToRValue>
|   |   |   |   | | |     | `-DeclRefExpr 0x7fffd83b4238 <col:62> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   | | |     `-IntegerLiteral 0x7fffd83b4260 <col:64> 'int' 2
|   |   |   |   | | |-ImplicitCastExpr 0x7fffd83b4500 <col:68, col:73> 'float' <LValueToRValue>
|   |   |   |   | | | `-ArraySubscriptExpr 0x7fffd83b43c8 <col:68, col:73> 'float' lvalue
|   |   |   |   | | |   |-ImplicitCastExpr 0x7fffd83b43b0 <col:68> 'float *' <ArrayToPointerDecay>
|   |   |   |   | | |   | `-DeclRefExpr 0x7fffd83b4300 <col:68> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   | | |   `-BinaryOperator 0x7fffd83b4388 <col:70, col:72> 'int' '+'
|   |   |   |   | | |     |-ImplicitCastExpr 0x7fffd83b4370 <col:70> 'int' <LValueToRValue>
|   |   |   |   | | |     | `-DeclRefExpr 0x7fffd83b4328 <col:70> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   | | |     `-IntegerLiteral 0x7fffd83b4350 <col:72> 'int' 3
|   |   |   |   | | `-ImplicitCastExpr 0x7fffd83b4518 <col:76> 'float' <FloatingCast>
|   |   |   |   | |   `-FloatingLiteral 0x7fffd83b43f0 <col:76> 'double' 0.000000e+00
|   |   |   |   | `-CallExpr 0x7fffd83b4958 <line:2126:16, col:79> 'void'
|   |   |   |   |   |-ImplicitCastExpr 0x7fffd83b4940 <col:16> 'void (*)(stbtt__csctx *, float, float, float, float, float, float)' <FunctionToPointerDecay>
|   |   |   |   |   | `-DeclRefExpr 0x7fffd83b4530 <col:16> 'void (stbtt__csctx *, float, float, float, float, float, float)' Function 0x7fffd83a8db0 'stbtt__csctx_rccurve_to' 'void (stbtt__csctx *, float, float, float, float, float, float)'
|   |   |   |   |   |-ImplicitCastExpr 0x7fffd83b49b8 <col:40> 'stbtt__csctx *' <LValueToRValue>
|   |   |   |   |   | `-DeclRefExpr 0x7fffd83b4558 <col:40> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83ac448 'c' 'stbtt__csctx *'
|   |   |   |   |   |-ImplicitCastExpr 0x7fffd83b49d0 <col:43> 'float' <LValueToRValue>
|   |   |   |   |   | `-DeclRefExpr 0x7fffd83b4580 <col:43> 'float' lvalue Var 0x7fffd83acf78 'f' 'float'
|   |   |   |   |   |-ImplicitCastExpr 0x7fffd83b49e8 <col:46, col:49> 'float' <LValueToRValue>
|   |   |   |   |   | `-ArraySubscriptExpr 0x7fffd83b4628 <col:46, col:49> 'float' lvalue
|   |   |   |   |   |   |-ImplicitCastExpr 0x7fffd83b45f8 <col:46> 'float *' <ArrayToPointerDecay>
|   |   |   |   |   |   | `-DeclRefExpr 0x7fffd83b45a8 <col:46> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   |   |   `-ImplicitCastExpr 0x7fffd83b4610 <col:48> 'int' <LValueToRValue>
|   |   |   |   |   |     `-DeclRefExpr 0x7fffd83b45d0 <col:48> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   |   |-ImplicitCastExpr 0x7fffd83b4a00 <col:52, col:57> 'float' <LValueToRValue>
|   |   |   |   |   | `-ArraySubscriptExpr 0x7fffd83b4718 <col:52, col:57> 'float' lvalue
|   |   |   |   |   |   |-ImplicitCastExpr 0x7fffd83b4700 <col:52> 'float *' <ArrayToPointerDecay>
|   |   |   |   |   |   | `-DeclRefExpr 0x7fffd83b4650 <col:52> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   |   |   `-BinaryOperator 0x7fffd83b46d8 <col:54, col:56> 'int' '+'
|   |   |   |   |   |     |-ImplicitCastExpr 0x7fffd83b46c0 <col:54> 'int' <LValueToRValue>
|   |   |   |   |   |     | `-DeclRefExpr 0x7fffd83b4678 <col:54> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   |   |     `-IntegerLiteral 0x7fffd83b46a0 <col:56> 'int' 1
|   |   |   |   |   |-ImplicitCastExpr 0x7fffd83b4a18 <col:60, col:65> 'float' <LValueToRValue>
|   |   |   |   |   | `-ArraySubscriptExpr 0x7fffd83b4808 <col:60, col:65> 'float' lvalue
|   |   |   |   |   |   |-ImplicitCastExpr 0x7fffd83b47f0 <col:60> 'float *' <ArrayToPointerDecay>
|   |   |   |   |   |   | `-DeclRefExpr 0x7fffd83b4740 <col:60> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   |   |   `-BinaryOperator 0x7fffd83b47c8 <col:62, col:64> 'int' '+'
|   |   |   |   |   |     |-ImplicitCastExpr 0x7fffd83b47b0 <col:62> 'int' <LValueToRValue>
|   |   |   |   |   |     | `-DeclRefExpr 0x7fffd83b4768 <col:62> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   |   |     `-IntegerLiteral 0x7fffd83b4790 <col:64> 'int' 2
|   |   |   |   |   |-ImplicitCastExpr 0x7fffd83b4a30 <col:68> 'float' <FloatingCast>
|   |   |   |   |   | `-FloatingLiteral 0x7fffd83b4830 <col:68> 'double' 0.000000e+00
|   |   |   |   |   `-ImplicitCastExpr 0x7fffd83b4a48 <col:73, col:78> 'float' <LValueToRValue>
|   |   |   |   |     `-ArraySubscriptExpr 0x7fffd83b4918 <col:73, col:78> 'float' lvalue
|   |   |   |   |       |-ImplicitCastExpr 0x7fffd83b4900 <col:73> 'float *' <ArrayToPointerDecay>
|   |   |   |   |       | `-DeclRefExpr 0x7fffd83b4850 <col:73> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |   |       `-BinaryOperator 0x7fffd83b48d8 <col:75, col:77> 'int' '+'
|   |   |   |   |         |-ImplicitCastExpr 0x7fffd83b48c0 <col:75> 'int' <LValueToRValue>
|   |   |   |   |         | `-DeclRefExpr 0x7fffd83b4878 <col:75> 'int' lvalue Var 0x7fffd83ac930 'i' 'int'
|   |   |   |   |         `-IntegerLiteral 0x7fffd83b48a0 <col:77> 'int' 3
|   |   |   |   `-BinaryOperator 0x7fffd83b4af8 <line:2127:13, col:17> 'float' '='
|   |   |   |     |-DeclRefExpr 0x7fffd83b4a98 <col:13> 'float' lvalue Var 0x7fffd83acf78 'f' 'float'
|   |   |   |     `-ImplicitCastExpr 0x7fffd83b4ae0 <col:17> 'float' <FloatingCast>
|   |   |   |       `-FloatingLiteral 0x7fffd83b4ac0 <col:17> 'double' 0.000000e+00
|   |   |   |-BreakStmt 0x7fffd83b4b78 <line:2129:10>
|   |   |   |-CaseStmt 0x7fffd83b4ba0 <line:2131:7, line:2136:10>
|   |   |   | |-IntegerLiteral 0x7fffd83b4b80 <line:2131:12> 'int' 10
|   |   |   | |-<<<NULL>>>
|   |   |   | `-IfStmt 0x7fffd83b4f68 <line:2132:10, line:2136:10>
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-UnaryOperator 0x7fffd83b4c18 <line:2132:14, col:15> 'int' prefix '!'
|   |   |   |   | `-ImplicitCastExpr 0x7fffd83b4c00 <col:15> 'int' <LValueToRValue>
|   |   |   |   |   `-DeclRefExpr 0x7fffd83b4bd8 <col:15> 'int' lvalue Var 0x7fffd83aca78 'has_subrs' 'int'
|   |   |   |   |-CompoundStmt 0x7fffd83b4f48 <col:26, line:2136:10>
|   |   |   |   | |-IfStmt 0x7fffd83b4ea0 <line:2133:13, line:2134:68>
|   |   |   |   | | |-<<<NULL>>>
|   |   |   |   | | |-<<<NULL>>>
|   |   |   |   | | |-ImplicitCastExpr 0x7fffd83b4ce8 <line:2133:17, col:32> 'int' <LValueToRValue>
|   |   |   |   | | | `-MemberExpr 0x7fffd83b4cb0 <col:17, col:32> 'const int' lvalue .size 0x7fffd82a74c0
|   |   |   |   | | |   `-MemberExpr 0x7fffd83b4c78 <col:17, col:23> 'const stbtt__buf':'const stbtt__buf' lvalue ->fdselect 0x7fffd834d2c0
|   |   |   |   | | |     `-ImplicitCastExpr 0x7fffd83b4c60 <col:17> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   |   |   | | |       `-DeclRefExpr 0x7fffd83b4c38 <col:17> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83ac360 'info' 'const stbtt_fontinfo *'
|   |   |   |   | | |-BinaryOperator 0x7fffd83b4e78 <line:2134:16, col:68> 'stbtt__buf':'stbtt__buf' '='
|   |   |   |   | | | |-DeclRefExpr 0x7fffd83b4d00 <col:16> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83acdc8 'subrs' 'stbtt__buf':'stbtt__buf'
|   |   |   |   | | | `-CallExpr 0x7fffd83b4e10 <col:24, col:68> 'stbtt__buf':'stbtt__buf'
|   |   |   |   | | |   |-ImplicitCastExpr 0x7fffd83b4df8 <col:24> 'stbtt__buf (*)(const stbtt_fontinfo *, int)' <FunctionToPointerDecay>
|   |   |   |   | | |   | `-DeclRefExpr 0x7fffd83b4d28 <col:24> 'stbtt__buf (const stbtt_fontinfo *, int)' Function 0x7fffd83aa8b0 'stbtt__cid_get_glyph_subrs' 'stbtt__buf (const stbtt_fontinfo *, int)'
|   |   |   |   | | |   |-ImplicitCastExpr 0x7fffd83b4e48 <col:51> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   |   |   | | |   | `-DeclRefExpr 0x7fffd83b4d50 <col:51> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83ac360 'info' 'const stbtt_fontinfo *'
|   |   |   |   | | |   `-ImplicitCastExpr 0x7fffd83b4e60 <col:57> 'int' <LValueToRValue>
|   |   |   |   | | |     `-DeclRefExpr 0x7fffd83b4d78 <col:57> 'int' lvalue ParmVar 0x7fffd83ac3d8 'glyph_index' 'int'
|   |   |   |   | | `-<<<NULL>>>
|   |   |   |   | `-BinaryOperator 0x7fffd83b4f20 <line:2135:13, col:25> 'int' '='
|   |   |   |   |   |-DeclRefExpr 0x7fffd83b4ed8 <col:13> 'int' lvalue Var 0x7fffd83aca78 'has_subrs' 'int'
|   |   |   |   |   `-IntegerLiteral 0x7fffd83b4f00 <col:25> 'int' 1
|   |   |   |   `-<<<NULL>>>
|   |   |   |-CaseStmt 0x7fffd83b4fc0 <line:2138:7, line:2013:27>
|   |   |   | |-IntegerLiteral 0x7fffd83b4fa0 <line:2138:12> 'int' 29
|   |   |   | |-<<<NULL>>>
|   |   |   | `-IfStmt 0x7fffd83b50d8 <line:2139:10, line:2013:27>
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-BinaryOperator 0x7fffd83b5058 <line:2139:14, col:19> 'int' '<'
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83b5040 <col:14> 'int' <LValueToRValue>
|   |   |   |   | | `-DeclRefExpr 0x7fffd83b4ff8 <col:14> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   |   | `-IntegerLiteral 0x7fffd83b5020 <col:19> 'int' 1
|   |   |   |   |-ReturnStmt 0x7fffd83b50c0 <col:22, line:2013:27>
|   |   |   |   | `-ParenExpr 0x7fffd83b50a0 <col:25, col:27> 'int'
|   |   |   |   |   `-IntegerLiteral 0x7fffd83b5080 <col:26> 'int' 0
|   |   |   |   `-<<<NULL>>>
|   |   |   |-BinaryOperator 0x7fffd83b5240 <line:2140:10, col:26> 'int' '='
|   |   |   | |-DeclRefExpr 0x7fffd83b5110 <col:10> 'int' lvalue Var 0x7fffd83ac8b8 'v' 'int'
|   |   |   | `-CStyleCastExpr 0x7fffd83b5218 <col:14, col:26> 'int' <FloatingToIntegral>
|   |   |   |   `-ImplicitCastExpr 0x7fffd83b5200 <col:20, col:26> 'float' <LValueToRValue>
|   |   |   |     `-ArraySubscriptExpr 0x7fffd83b51c0 <col:20, col:26> 'float' lvalue
|   |   |   |       |-ImplicitCastExpr 0x7fffd83b51a8 <col:20> 'float *' <ArrayToPointerDecay>
|   |   |   |       | `-DeclRefExpr 0x7fffd83b5138 <col:20> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       `-UnaryOperator 0x7fffd83b5188 <col:22, col:24> 'int' prefix '--'
|   |   |   |         `-DeclRefExpr 0x7fffd83b5160 <col:24> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   |-IfStmt 0x7fffd83b5348 <line:2141:10, line:2013:27>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-BinaryOperator 0x7fffd83b52c8 <line:2141:14, col:35> 'int' '>='
|   |   |   | | |-ImplicitCastExpr 0x7fffd83b52b0 <col:14> 'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x7fffd83b5268 <col:14> 'int' lvalue Var 0x7fffd83ac788 'subr_stack_height' 'int'
|   |   |   | | `-IntegerLiteral 0x7fffd83b5290 <col:35> 'int' 10
|   |   |   | |-ReturnStmt 0x7fffd83b5330 <col:39, line:2013:27>
|   |   |   | | `-ParenExpr 0x7fffd83b5310 <col:25, col:27> 'int'
|   |   |   | |   `-IntegerLiteral 0x7fffd83b52f0 <col:26> 'int' 0
|   |   |   | `-<<<NULL>>>
|   |   |   |-BinaryOperator 0x7fffd83b5470 <line:2142:10, col:44> 'stbtt__buf':'stbtt__buf' '='
|   |   |   | |-ArraySubscriptExpr 0x7fffd83b5408 <col:10, col:40> 'stbtt__buf':'stbtt__buf' lvalue
|   |   |   | | |-ImplicitCastExpr 0x7fffd83b53f0 <col:10> 'stbtt__buf *' <ArrayToPointerDecay>
|   |   |   | | | `-DeclRefExpr 0x7fffd83b5380 <col:10> 'stbtt__buf [10]' lvalue Var 0x7fffd83acd58 'subr_stack' 'stbtt__buf [10]'
|   |   |   | | `-UnaryOperator 0x7fffd83b53d0 <col:21, col:38> 'int' postfix '++'
|   |   |   | |   `-DeclRefExpr 0x7fffd83b53a8 <col:21> 'int' lvalue Var 0x7fffd83ac788 'subr_stack_height' 'int'
|   |   |   | `-ImplicitCastExpr 0x7fffd83b5458 <col:44> 'stbtt__buf':'stbtt__buf' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x7fffd83b5430 <col:44> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83acec8 'b' 'stbtt__buf':'stbtt__buf'
|   |   |   |-BinaryOperator 0x7fffd83b5700 <line:2143:10, col:66> 'stbtt__buf':'stbtt__buf' '='
|   |   |   | |-DeclRefExpr 0x7fffd83b5498 <col:10> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83acec8 'b' 'stbtt__buf':'stbtt__buf'
|   |   |   | `-CallExpr 0x7fffd83b56b0 <col:14, col:66> 'stbtt__buf':'stbtt__buf'
|   |   |   |   |-ImplicitCastExpr 0x7fffd83b5698 <col:14> 'stbtt__buf (*)(stbtt__buf, int)' <FunctionToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x7fffd83b54c0 <col:14> 'stbtt__buf (stbtt__buf, int)' Function 0x7fffd83a9cd0 'stbtt__get_subr' 'stbtt__buf (stbtt__buf, int)'
|   |   |   |   |-ConditionalOperator 0x7fffd83b5640 <col:30, col:57> 'stbtt__buf':'stbtt__buf'
|   |   |   |   | |-BinaryOperator 0x7fffd83b5548 <col:30, col:36> 'int' '=='
|   |   |   |   | | |-ImplicitCastExpr 0x7fffd83b5530 <col:30> 'int' <LValueToRValue>
|   |   |   |   | | | `-DeclRefExpr 0x7fffd83b54e8 <col:30> 'int' lvalue Var 0x7fffd83ac9a8 'b0' 'int'
|   |   |   |   | | `-IntegerLiteral 0x7fffd83b5510 <col:36> 'int' 10
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83b5610 <col:43> 'stbtt__buf':'stbtt__buf' <LValueToRValue>
|   |   |   |   | | `-DeclRefExpr 0x7fffd83b5570 <col:43> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83acdc8 'subrs' 'stbtt__buf':'stbtt__buf'
|   |   |   |   | `-ImplicitCastExpr 0x7fffd83b5628 <col:51, col:57> 'stbtt__buf':'stbtt__buf' <LValueToRValue>
|   |   |   |   |   `-MemberExpr 0x7fffd83b55d8 <col:51, col:57> 'const stbtt__buf':'const stbtt__buf' lvalue ->gsubrs 0x7fffd834d1b8
|   |   |   |   |     `-ImplicitCastExpr 0x7fffd83b55c0 <col:51> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   |   |   |       `-DeclRefExpr 0x7fffd83b5598 <col:51> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83ac360 'info' 'const stbtt_fontinfo *'
|   |   |   |   `-ImplicitCastExpr 0x7fffd83b56e8 <col:65> 'int' <LValueToRValue>
|   |   |   |     `-DeclRefExpr 0x7fffd83b5670 <col:65> 'int' lvalue Var 0x7fffd83ac8b8 'v' 'int'
|   |   |   |-IfStmt 0x7fffd83b5840 <line:2144:10, line:2013:27>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-BinaryOperator 0x7fffd83b57c0 <line:2144:14, col:24> 'int' '=='
|   |   |   | | |-ImplicitCastExpr 0x7fffd83b57a8 <col:14, col:16> 'int' <LValueToRValue>
|   |   |   | | | `-MemberExpr 0x7fffd83b5750 <col:14, col:16> 'int' lvalue .size 0x7fffd82a74c0
|   |   |   | | |   `-DeclRefExpr 0x7fffd83b5728 <col:14> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83acec8 'b' 'stbtt__buf':'stbtt__buf'
|   |   |   | | `-IntegerLiteral 0x7fffd83b5788 <col:24> 'int' 0
|   |   |   | |-ReturnStmt 0x7fffd83b5828 <col:27, line:2013:27>
|   |   |   | | `-ParenExpr 0x7fffd83b5808 <col:25, col:27> 'int'
|   |   |   | |   `-IntegerLiteral 0x7fffd83b57e8 <col:26> 'int' 0
|   |   |   | `-<<<NULL>>>
|   |   |   |-BinaryOperator 0x7fffd83b58f8 <line:2145:10, col:21> 'int' '='
|   |   |   | |-MemberExpr 0x7fffd83b58a0 <col:10, col:12> 'int' lvalue .cursor 0x7fffd82a7460
|   |   |   | | `-DeclRefExpr 0x7fffd83b5878 <col:10> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83acec8 'b' 'stbtt__buf':'stbtt__buf'
|   |   |   | `-IntegerLiteral 0x7fffd83b58d8 <col:21> 'int' 0
|   |   |   |-BinaryOperator 0x7fffd83b5968 <line:2146:10, col:24> 'int' '='
|   |   |   | |-DeclRefExpr 0x7fffd83b5920 <col:10> 'int' lvalue Var 0x7fffd83acb10 'clear_stack' 'int'
|   |   |   | `-IntegerLiteral 0x7fffd83b5948 <col:24> 'int' 0
|   |   |   |-BreakStmt 0x7fffd83b5990 <line:2147:10>
|   |   |   |-CaseStmt 0x7fffd83b59b8 <line:2149:7, line:2013:27>
|   |   |   | |-IntegerLiteral 0x7fffd83b5998 <line:2149:12> 'int' 11
|   |   |   | |-<<<NULL>>>
|   |   |   | `-IfStmt 0x7fffd83b5ad0 <line:2150:10, line:2013:27>
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-BinaryOperator 0x7fffd83b5a50 <line:2150:14, col:35> 'int' '<='
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83b5a38 <col:14> 'int' <LValueToRValue>
|   |   |   |   | | `-DeclRefExpr 0x7fffd83b59f0 <col:14> 'int' lvalue Var 0x7fffd83ac788 'subr_stack_height' 'int'
|   |   |   |   | `-IntegerLiteral 0x7fffd83b5a18 <col:35> 'int' 0
|   |   |   |   |-ReturnStmt 0x7fffd83b5ab8 <col:38, line:2013:27>
|   |   |   |   | `-ParenExpr 0x7fffd83b5a98 <col:25, col:27> 'int'
|   |   |   |   |   `-IntegerLiteral 0x7fffd83b5a78 <col:26> 'int' 0
|   |   |   |   `-<<<NULL>>>
|   |   |   |-BinaryOperator 0x7fffd83b5bf8 <line:2151:10, col:44> 'stbtt__buf':'stbtt__buf' '='
|   |   |   | |-DeclRefExpr 0x7fffd83b5b08 <col:10> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83acec8 'b' 'stbtt__buf':'stbtt__buf'
|   |   |   | `-ImplicitCastExpr 0x7fffd83b5be0 <col:14, col:44> 'stbtt__buf':'stbtt__buf' <LValueToRValue>
|   |   |   |   `-ArraySubscriptExpr 0x7fffd83b5bb8 <col:14, col:44> 'stbtt__buf':'stbtt__buf' lvalue
|   |   |   |     |-ImplicitCastExpr 0x7fffd83b5ba0 <col:14> 'stbtt__buf *' <ArrayToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x7fffd83b5b30 <col:14> 'stbtt__buf [10]' lvalue Var 0x7fffd83acd58 'subr_stack' 'stbtt__buf [10]'
|   |   |   |     `-UnaryOperator 0x7fffd83b5b80 <col:25, col:27> 'int' prefix '--'
|   |   |   |       `-DeclRefExpr 0x7fffd83b5b58 <col:27> 'int' lvalue Var 0x7fffd83ac788 'subr_stack_height' 'int'
|   |   |   |-BinaryOperator 0x7fffd83b5c68 <line:2152:10, col:24> 'int' '='
|   |   |   | |-DeclRefExpr 0x7fffd83b5c20 <col:10> 'int' lvalue Var 0x7fffd83acb10 'clear_stack' 'int'
|   |   |   | `-IntegerLiteral 0x7fffd83b5c48 <col:24> 'int' 0
|   |   |   |-BreakStmt 0x7fffd83b5c90 <line:2153:10>
|   |   |   |-CaseStmt 0x7fffd83b5cb8 <line:2155:7, line:2156:36>
|   |   |   | |-IntegerLiteral 0x7fffd83b5c98 <line:2155:12> 'int' 14
|   |   |   | |-<<<NULL>>>
|   |   |   | `-CallExpr 0x7fffd83b5d58 <line:2156:10, col:36> 'void'
|   |   |   |   |-ImplicitCastExpr 0x7fffd83b5d40 <col:10> 'void (*)(stbtt__csctx *)' <FunctionToPointerDecay>
|   |   |   |   | `-DeclRefExpr 0x7fffd83b5cf0 <col:10> 'void (stbtt__csctx *)' Function 0x7fffd83a6440 'stbtt__csctx_close_shape' 'void (stbtt__csctx *)'
|   |   |   |   `-ImplicitCastExpr 0x7fffd83b5d88 <col:35> 'stbtt__csctx *' <LValueToRValue>
|   |   |   |     `-DeclRefExpr 0x7fffd83b5d18 <col:35> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83ac448 'c' 'stbtt__csctx *'
|   |   |   |-ReturnStmt 0x7fffd83b5dc0 <line:2157:10, col:17>
|   |   |   | `-IntegerLiteral 0x7fffd83b5da0 <col:17> 'int' 1
|   |   |   |-CaseStmt 0x7fffd83b5df8 <line:2159:7, line:2239:7>
|   |   |   | |-IntegerLiteral 0x7fffd83b5dd8 <line:2159:12> 'int' 12
|   |   |   | |-<<<NULL>>>
|   |   |   | `-CompoundStmt 0x7fffd83bb080 <col:18, line:2239:7>
|   |   |   |   |-DeclStmt 0x7fffd83b6448 <line:2160:10, col:74>
|   |   |   |   | |-VarDecl 0x7fffd83b5e58 <col:10, col:16> col:16 used dx1 'float'
|   |   |   |   | |-VarDecl 0x7fffd83b5ed0 <col:10, col:21> col:21 used dx2 'float'
|   |   |   |   | |-VarDecl 0x7fffd83b5f48 <col:10, col:26> col:26 used dx3 'float'
|   |   |   |   | |-VarDecl 0x7fffd83b5fc0 <col:10, col:31> col:31 used dx4 'float'
|   |   |   |   | |-VarDecl 0x7fffd83b6038 <col:10, col:36> col:36 used dx5 'float'
|   |   |   |   | |-VarDecl 0x7fffd83b60b0 <col:10, col:41> col:41 used dx6 'float'
|   |   |   |   | |-VarDecl 0x7fffd83b6128 <col:10, col:46> col:46 used dy1 'float'
|   |   |   |   | |-VarDecl 0x7fffd83b61a0 <col:10, col:51> col:51 used dy2 'float'
|   |   |   |   | |-VarDecl 0x7fffd83b6218 <col:10, col:56> col:56 used dy3 'float'
|   |   |   |   | |-VarDecl 0x7fffd83b6290 <col:10, col:61> col:61 used dy4 'float'
|   |   |   |   | |-VarDecl 0x7fffd83b6308 <col:10, col:66> col:66 used dy5 'float'
|   |   |   |   | `-VarDecl 0x7fffd83b6380 <col:10, col:71> col:71 used dy6 'float'
|   |   |   |   |-DeclStmt 0x7fffd83b6568 <line:2161:10, col:22>
|   |   |   |   | |-VarDecl 0x7fffd83b6478 <col:10, col:16> col:16 used dx 'float'
|   |   |   |   | `-VarDecl 0x7fffd83b64f0 <col:10, col:20> col:20 used dy 'float'
|   |   |   |   |-DeclStmt 0x7fffd83b66c8 <line:2162:10, col:38>
|   |   |   |   | `-VarDecl 0x7fffd83b6598 <col:10, col:37> col:14 used b1 'int' cinit
|   |   |   |   |   `-ImplicitCastExpr 0x7fffd83b66b0 <col:19, col:37> 'int' <IntegralCast>
|   |   |   |   |     `-CallExpr 0x7fffd83b6680 <col:19, col:37> 'stbtt_uint8':'unsigned char'
|   |   |   |   |       |-ImplicitCastExpr 0x7fffd83b6668 <col:19> 'stbtt_uint8 (*)(stbtt__buf *)' <FunctionToPointerDecay>
|   |   |   |   |       | `-DeclRefExpr 0x7fffd83b65f8 <col:19> 'stbtt_uint8 (stbtt__buf *)' Function 0x7fffd835fad0 'stbtt__buf_get8' 'stbtt_uint8 (stbtt__buf *)'
|   |   |   |   |       `-UnaryOperator 0x7fffd83b6648 <col:35, col:36> 'stbtt__buf *' prefix '&'
|   |   |   |   |         `-DeclRefExpr 0x7fffd83b6620 <col:36> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83acec8 'b' 'stbtt__buf':'stbtt__buf'
|   |   |   |   `-SwitchStmt 0x7fffd83b6720 <line:2163:10, line:2238:10>
|   |   |   |     |-<<<NULL>>>
|   |   |   |     |-<<<NULL>>>
|   |   |   |     |-ImplicitCastExpr 0x7fffd83b6708 <line:2163:18> 'int' <LValueToRValue>
|   |   |   |     | `-DeclRefExpr 0x7fffd83b66e0 <col:18> 'int' lvalue Var 0x7fffd83b6598 'b1' 'int'
|   |   |   |     `-CompoundStmt 0x7fffd83bae98 <col:22, line:2238:10>
|   |   |   |       |-CaseStmt 0x7fffd83b6770 <line:2166:10, line:2013:27>
|   |   |   |       | |-IntegerLiteral 0x7fffd83b6750 <line:2166:15> 'int' 34
|   |   |   |       | |-<<<NULL>>>
|   |   |   |       | `-IfStmt 0x7fffd83b6888 <line:2167:13, line:2013:27>
|   |   |   |       |   |-<<<NULL>>>
|   |   |   |       |   |-<<<NULL>>>
|   |   |   |       |   |-BinaryOperator 0x7fffd83b6808 <line:2167:17, col:22> 'int' '<'
|   |   |   |       |   | |-ImplicitCastExpr 0x7fffd83b67f0 <col:17> 'int' <LValueToRValue>
|   |   |   |       |   | | `-DeclRefExpr 0x7fffd83b67a8 <col:17> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   |       |   | `-IntegerLiteral 0x7fffd83b67d0 <col:22> 'int' 7
|   |   |   |       |   |-ReturnStmt 0x7fffd83b6870 <col:25, line:2013:27>
|   |   |   |       |   | `-ParenExpr 0x7fffd83b6850 <col:25, col:27> 'int'
|   |   |   |       |   |   `-IntegerLiteral 0x7fffd83b6830 <col:26> 'int' 0
|   |   |   |       |   `-<<<NULL>>>
|   |   |   |       |-BinaryOperator 0x7fffd83b6988 <line:2168:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b68c0 <col:13> 'float' lvalue Var 0x7fffd83b5e58 'dx1' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b6970 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b6948 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b6930 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b68e8 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b6910 <col:21> 'int' 0
|   |   |   |       |-BinaryOperator 0x7fffd83b6a78 <line:2169:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b69b0 <col:13> 'float' lvalue Var 0x7fffd83b5ed0 'dx2' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b6a60 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b6a38 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b6a20 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b69d8 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b6a00 <col:21> 'int' 1
|   |   |   |       |-BinaryOperator 0x7fffd83b6b68 <line:2170:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b6aa0 <col:13> 'float' lvalue Var 0x7fffd83b61a0 'dy2' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b6b50 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b6b28 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b6b10 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b6ac8 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b6af0 <col:21> 'int' 2
|   |   |   |       |-BinaryOperator 0x7fffd83b6c58 <line:2171:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b6b90 <col:13> 'float' lvalue Var 0x7fffd83b5f48 'dx3' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b6c40 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b6c18 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b6c00 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b6bb8 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b6be0 <col:21> 'int' 3
|   |   |   |       |-BinaryOperator 0x7fffd83b6d48 <line:2172:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b6c80 <col:13> 'float' lvalue Var 0x7fffd83b5fc0 'dx4' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b6d30 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b6d08 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b6cf0 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b6ca8 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b6cd0 <col:21> 'int' 4
|   |   |   |       |-BinaryOperator 0x7fffd83b6e38 <line:2173:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b6d70 <col:13> 'float' lvalue Var 0x7fffd83b6038 'dx5' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b6e20 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b6df8 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b6de0 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b6d98 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b6dc0 <col:21> 'int' 5
|   |   |   |       |-BinaryOperator 0x7fffd83b6f28 <line:2174:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b6e60 <col:13> 'float' lvalue Var 0x7fffd83b60b0 'dx6' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b6f10 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b6ee8 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b6ed0 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b6e88 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b6eb0 <col:21> 'int' 6
|   |   |   |       |-CallExpr 0x7fffd83b7098 <line:2175:13, col:64> 'void'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b7080 <col:13> 'void (*)(stbtt__csctx *, float, float, float, float, float, float)' <FunctionToPointerDecay>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b6f50 <col:13> 'void (stbtt__csctx *, float, float, float, float, float, float)' Function 0x7fffd83a8db0 'stbtt__csctx_rccurve_to' 'void (stbtt__csctx *, float, float, float, float, float, float)'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b70f8 <col:37> 'stbtt__csctx *' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b6f78 <col:37> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83ac448 'c' 'stbtt__csctx *'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b7110 <col:40> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b6fa0 <col:40> 'float' lvalue Var 0x7fffd83b5e58 'dx1' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b7128 <col:45> 'float' <IntegralToFloating>
|   |   |   |       | | `-IntegerLiteral 0x7fffd83b6fc8 <col:45> 'int' 0
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b7140 <col:48> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b6fe8 <col:48> 'float' lvalue Var 0x7fffd83b5ed0 'dx2' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b7158 <col:53> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b7010 <col:53> 'float' lvalue Var 0x7fffd83b61a0 'dy2' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b7170 <col:58> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b7038 <col:58> 'float' lvalue Var 0x7fffd83b5f48 'dx3' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b7188 <col:63> 'float' <IntegralToFloating>
|   |   |   |       |   `-IntegerLiteral 0x7fffd83b7060 <col:63> 'int' 0
|   |   |   |       |-CallExpr 0x7fffd83b7320 <line:2176:13, col:65> 'void'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b7308 <col:13> 'void (*)(stbtt__csctx *, float, float, float, float, float, float)' <FunctionToPointerDecay>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b71a0 <col:13> 'void (stbtt__csctx *, float, float, float, float, float, float)' Function 0x7fffd83a8db0 'stbtt__csctx_rccurve_to' 'void (stbtt__csctx *, float, float, float, float, float, float)'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b7380 <col:37> 'stbtt__csctx *' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b71c8 <col:37> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83ac448 'c' 'stbtt__csctx *'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b7398 <col:40> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b71f0 <col:40> 'float' lvalue Var 0x7fffd83b5fc0 'dx4' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b73b0 <col:45> 'float' <IntegralToFloating>
|   |   |   |       | | `-IntegerLiteral 0x7fffd83b7218 <col:45> 'int' 0
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b73c8 <col:48> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b7238 <col:48> 'float' lvalue Var 0x7fffd83b6038 'dx5' 'float'
|   |   |   |       | |-UnaryOperator 0x7fffd83b72a0 <col:53, col:54> 'float' prefix '-'
|   |   |   |       | | `-ImplicitCastExpr 0x7fffd83b7288 <col:54> 'float' <LValueToRValue>
|   |   |   |       | |   `-DeclRefExpr 0x7fffd83b7260 <col:54> 'float' lvalue Var 0x7fffd83b61a0 'dy2' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b73e0 <col:59> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b72c0 <col:59> 'float' lvalue Var 0x7fffd83b60b0 'dx6' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b73f8 <col:64> 'float' <IntegralToFloating>
|   |   |   |       |   `-IntegerLiteral 0x7fffd83b72e8 <col:64> 'int' 0
|   |   |   |       |-BreakStmt 0x7fffd83b7410 <line:2177:13>
|   |   |   |       |-CaseStmt 0x7fffd83b7438 <line:2179:10, line:2013:27>
|   |   |   |       | |-IntegerLiteral 0x7fffd83b7418 <line:2179:15> 'int' 35
|   |   |   |       | |-<<<NULL>>>
|   |   |   |       | `-IfStmt 0x7fffd83b7550 <line:2180:13, line:2013:27>
|   |   |   |       |   |-<<<NULL>>>
|   |   |   |       |   |-<<<NULL>>>
|   |   |   |       |   |-BinaryOperator 0x7fffd83b74d0 <line:2180:17, col:22> 'int' '<'
|   |   |   |       |   | |-ImplicitCastExpr 0x7fffd83b74b8 <col:17> 'int' <LValueToRValue>
|   |   |   |       |   | | `-DeclRefExpr 0x7fffd83b7470 <col:17> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   |       |   | `-IntegerLiteral 0x7fffd83b7498 <col:22> 'int' 13
|   |   |   |       |   |-ReturnStmt 0x7fffd83b7538 <col:26, line:2013:27>
|   |   |   |       |   | `-ParenExpr 0x7fffd83b7518 <col:25, col:27> 'int'
|   |   |   |       |   |   `-IntegerLiteral 0x7fffd83b74f8 <col:26> 'int' 0
|   |   |   |       |   `-<<<NULL>>>
|   |   |   |       |-BinaryOperator 0x7fffd83b7650 <line:2181:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b7588 <col:13> 'float' lvalue Var 0x7fffd83b5e58 'dx1' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b7638 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b7610 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b75f8 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b75b0 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b75d8 <col:21> 'int' 0
|   |   |   |       |-BinaryOperator 0x7fffd83b7740 <line:2182:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b7678 <col:13> 'float' lvalue Var 0x7fffd83b6128 'dy1' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b7728 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b7700 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b76e8 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b76a0 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b76c8 <col:21> 'int' 1
|   |   |   |       |-BinaryOperator 0x7fffd83b7830 <line:2183:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b7768 <col:13> 'float' lvalue Var 0x7fffd83b5ed0 'dx2' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b7818 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b77f0 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b77d8 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b7790 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b77b8 <col:21> 'int' 2
|   |   |   |       |-BinaryOperator 0x7fffd83b7920 <line:2184:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b7858 <col:13> 'float' lvalue Var 0x7fffd83b61a0 'dy2' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b7908 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b78e0 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b78c8 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b7880 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b78a8 <col:21> 'int' 3
|   |   |   |       |-BinaryOperator 0x7fffd83b7a10 <line:2185:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b7948 <col:13> 'float' lvalue Var 0x7fffd83b5f48 'dx3' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b79f8 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b79d0 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b79b8 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b7970 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b7998 <col:21> 'int' 4
|   |   |   |       |-BinaryOperator 0x7fffd83b7b00 <line:2186:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b7a38 <col:13> 'float' lvalue Var 0x7fffd83b6218 'dy3' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b7ae8 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b7ac0 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b7aa8 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b7a60 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b7a88 <col:21> 'int' 5
|   |   |   |       |-BinaryOperator 0x7fffd83b7bf0 <line:2187:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b7b28 <col:13> 'float' lvalue Var 0x7fffd83b5fc0 'dx4' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b7bd8 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b7bb0 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b7b98 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b7b50 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b7b78 <col:21> 'int' 6
|   |   |   |       |-BinaryOperator 0x7fffd83b7ce0 <line:2188:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b7c18 <col:13> 'float' lvalue Var 0x7fffd83b6290 'dy4' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b7cc8 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b7ca0 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b7c88 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b7c40 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b7c68 <col:21> 'int' 7
|   |   |   |       |-BinaryOperator 0x7fffd83b7dd0 <line:2189:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b7d08 <col:13> 'float' lvalue Var 0x7fffd83b6038 'dx5' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b7db8 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b7d90 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b7d78 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b7d30 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b7d58 <col:21> 'int' 8
|   |   |   |       |-BinaryOperator 0x7fffd83b7ef0 <line:2190:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b7df8 <col:13> 'float' lvalue Var 0x7fffd83b6308 'dy5' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b7ed8 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b7eb0 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b7e98 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b7e50 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b7e78 <col:21> 'int' 9
|   |   |   |       |-BinaryOperator 0x7fffd83b7fe0 <line:2191:13, col:23> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b7f18 <col:13> 'float' lvalue Var 0x7fffd83b60b0 'dx6' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b7fc8 <col:19, col:23> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b7fa0 <col:19, col:23> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b7f88 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b7f40 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b7f68 <col:21> 'int' 10
|   |   |   |       |-BinaryOperator 0x7fffd83b80d0 <line:2192:13, col:23> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b8008 <col:13> 'float' lvalue Var 0x7fffd83b6380 'dy6' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b80b8 <col:19, col:23> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b8090 <col:19, col:23> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b8078 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b8030 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b8058 <col:21> 'int' 11
|   |   |   |       |-CallExpr 0x7fffd83b8250 <line:2194:13, col:68> 'void'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b8238 <col:13> 'void (*)(stbtt__csctx *, float, float, float, float, float, float)' <FunctionToPointerDecay>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b80f8 <col:13> 'void (stbtt__csctx *, float, float, float, float, float, float)' Function 0x7fffd83a8db0 'stbtt__csctx_rccurve_to' 'void (stbtt__csctx *, float, float, float, float, float, float)'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b82b0 <col:37> 'stbtt__csctx *' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b8120 <col:37> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83ac448 'c' 'stbtt__csctx *'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b82c8 <col:40> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b8148 <col:40> 'float' lvalue Var 0x7fffd83b5e58 'dx1' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b82e0 <col:45> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b8170 <col:45> 'float' lvalue Var 0x7fffd83b6128 'dy1' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b82f8 <col:50> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b8198 <col:50> 'float' lvalue Var 0x7fffd83b5ed0 'dx2' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b8310 <col:55> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b81c0 <col:55> 'float' lvalue Var 0x7fffd83b61a0 'dy2' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b8328 <col:60> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b81e8 <col:60> 'float' lvalue Var 0x7fffd83b5f48 'dx3' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b8340 <col:65> 'float' <LValueToRValue>
|   |   |   |       |   `-DeclRefExpr 0x7fffd83b8210 <col:65> 'float' lvalue Var 0x7fffd83b6218 'dy3' 'float'
|   |   |   |       |-CallExpr 0x7fffd83b84b0 <line:2195:13, col:68> 'void'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b8498 <col:13> 'void (*)(stbtt__csctx *, float, float, float, float, float, float)' <FunctionToPointerDecay>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b8358 <col:13> 'void (stbtt__csctx *, float, float, float, float, float, float)' Function 0x7fffd83a8db0 'stbtt__csctx_rccurve_to' 'void (stbtt__csctx *, float, float, float, float, float, float)'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b8510 <col:37> 'stbtt__csctx *' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b8380 <col:37> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83ac448 'c' 'stbtt__csctx *'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b8528 <col:40> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b83a8 <col:40> 'float' lvalue Var 0x7fffd83b5fc0 'dx4' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b8540 <col:45> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b83d0 <col:45> 'float' lvalue Var 0x7fffd83b6290 'dy4' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b8558 <col:50> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b83f8 <col:50> 'float' lvalue Var 0x7fffd83b6038 'dx5' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b8570 <col:55> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b8420 <col:55> 'float' lvalue Var 0x7fffd83b6308 'dy5' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b8588 <col:60> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b8448 <col:60> 'float' lvalue Var 0x7fffd83b60b0 'dx6' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b85a0 <col:65> 'float' <LValueToRValue>
|   |   |   |       |   `-DeclRefExpr 0x7fffd83b8470 <col:65> 'float' lvalue Var 0x7fffd83b6380 'dy6' 'float'
|   |   |   |       |-BreakStmt 0x7fffd83b85b8 <line:2196:13>
|   |   |   |       |-CaseStmt 0x7fffd83b85e0 <line:2198:10, line:2013:27>
|   |   |   |       | |-IntegerLiteral 0x7fffd83b85c0 <line:2198:15> 'int' 36
|   |   |   |       | |-<<<NULL>>>
|   |   |   |       | `-IfStmt 0x7fffd83b86f8 <line:2199:13, line:2013:27>
|   |   |   |       |   |-<<<NULL>>>
|   |   |   |       |   |-<<<NULL>>>
|   |   |   |       |   |-BinaryOperator 0x7fffd83b8678 <line:2199:17, col:22> 'int' '<'
|   |   |   |       |   | |-ImplicitCastExpr 0x7fffd83b8660 <col:17> 'int' <LValueToRValue>
|   |   |   |       |   | | `-DeclRefExpr 0x7fffd83b8618 <col:17> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   |       |   | `-IntegerLiteral 0x7fffd83b8640 <col:22> 'int' 9
|   |   |   |       |   |-ReturnStmt 0x7fffd83b86e0 <col:25, line:2013:27>
|   |   |   |       |   | `-ParenExpr 0x7fffd83b86c0 <col:25, col:27> 'int'
|   |   |   |       |   |   `-IntegerLiteral 0x7fffd83b86a0 <col:26> 'int' 0
|   |   |   |       |   `-<<<NULL>>>
|   |   |   |       |-BinaryOperator 0x7fffd83b87f8 <line:2200:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b8730 <col:13> 'float' lvalue Var 0x7fffd83b5e58 'dx1' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b87e0 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b87b8 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b87a0 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b8758 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b8780 <col:21> 'int' 0
|   |   |   |       |-BinaryOperator 0x7fffd83b88e8 <line:2201:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b8820 <col:13> 'float' lvalue Var 0x7fffd83b6128 'dy1' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b88d0 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b88a8 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b8890 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b8848 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b8870 <col:21> 'int' 1
|   |   |   |       |-BinaryOperator 0x7fffd83b89d8 <line:2202:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b8910 <col:13> 'float' lvalue Var 0x7fffd83b5ed0 'dx2' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b89c0 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b8998 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b8980 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b8938 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b8960 <col:21> 'int' 2
|   |   |   |       |-BinaryOperator 0x7fffd83b8ac8 <line:2203:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b8a00 <col:13> 'float' lvalue Var 0x7fffd83b61a0 'dy2' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b8ab0 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b8a88 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b8a70 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b8a28 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b8a50 <col:21> 'int' 3
|   |   |   |       |-BinaryOperator 0x7fffd83b8bb8 <line:2204:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b8af0 <col:13> 'float' lvalue Var 0x7fffd83b5f48 'dx3' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b8ba0 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b8b78 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b8b60 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b8b18 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b8b40 <col:21> 'int' 4
|   |   |   |       |-BinaryOperator 0x7fffd83b8ca8 <line:2205:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b8be0 <col:13> 'float' lvalue Var 0x7fffd83b5fc0 'dx4' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b8c90 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b8c68 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b8c50 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b8c08 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b8c30 <col:21> 'int' 5
|   |   |   |       |-BinaryOperator 0x7fffd83b8d98 <line:2206:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b8cd0 <col:13> 'float' lvalue Var 0x7fffd83b6038 'dx5' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b8d80 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b8d58 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b8d40 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b8cf8 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b8d20 <col:21> 'int' 6
|   |   |   |       |-BinaryOperator 0x7fffd83b8e88 <line:2207:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b8dc0 <col:13> 'float' lvalue Var 0x7fffd83b6308 'dy5' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b8e70 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b8e48 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b8e30 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b8de8 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b8e10 <col:21> 'int' 7
|   |   |   |       |-BinaryOperator 0x7fffd83b8f78 <line:2208:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b8eb0 <col:13> 'float' lvalue Var 0x7fffd83b60b0 'dx6' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b8f60 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b8f38 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b8f20 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b8ed8 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b8f00 <col:21> 'int' 8
|   |   |   |       |-CallExpr 0x7fffd83b90f0 <line:2209:13, col:66> 'void'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b90d8 <col:13> 'void (*)(stbtt__csctx *, float, float, float, float, float, float)' <FunctionToPointerDecay>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b8fa0 <col:13> 'void (stbtt__csctx *, float, float, float, float, float, float)' Function 0x7fffd83a8db0 'stbtt__csctx_rccurve_to' 'void (stbtt__csctx *, float, float, float, float, float, float)'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b9150 <col:37> 'stbtt__csctx *' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b8fc8 <col:37> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83ac448 'c' 'stbtt__csctx *'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b9168 <col:40> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b8ff0 <col:40> 'float' lvalue Var 0x7fffd83b5e58 'dx1' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b9180 <col:45> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b9018 <col:45> 'float' lvalue Var 0x7fffd83b6128 'dy1' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b9198 <col:50> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b9040 <col:50> 'float' lvalue Var 0x7fffd83b5ed0 'dx2' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b91b0 <col:55> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b9068 <col:55> 'float' lvalue Var 0x7fffd83b61a0 'dy2' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b91c8 <col:60> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b9090 <col:60> 'float' lvalue Var 0x7fffd83b5f48 'dx3' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b91e0 <col:65> 'float' <IntegralToFloating>
|   |   |   |       |   `-IntegerLiteral 0x7fffd83b90b8 <col:65> 'int' 0
|   |   |   |       |-CallExpr 0x7fffd83b9470 <line:2210:13, col:77> 'void'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b9458 <col:13> 'void (*)(stbtt__csctx *, float, float, float, float, float, float)' <FunctionToPointerDecay>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b91f8 <col:13> 'void (stbtt__csctx *, float, float, float, float, float, float)' Function 0x7fffd83a8db0 'stbtt__csctx_rccurve_to' 'void (stbtt__csctx *, float, float, float, float, float, float)'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b94d0 <col:37> 'stbtt__csctx *' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b9220 <col:37> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83ac448 'c' 'stbtt__csctx *'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b94e8 <col:40> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b9248 <col:40> 'float' lvalue Var 0x7fffd83b5fc0 'dx4' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b9500 <col:45> 'float' <IntegralToFloating>
|   |   |   |       | | `-IntegerLiteral 0x7fffd83b9270 <col:45> 'int' 0
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b9518 <col:48> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b9290 <col:48> 'float' lvalue Var 0x7fffd83b6038 'dx5' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b9530 <col:53> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b92b8 <col:53> 'float' lvalue Var 0x7fffd83b6308 'dy5' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83b9548 <col:58> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83b92e0 <col:58> 'float' lvalue Var 0x7fffd83b60b0 'dx6' 'float'
|   |   |   |       | `-UnaryOperator 0x7fffd83b9438 <col:63, col:76> 'float' prefix '-'
|   |   |   |       |   `-ParenExpr 0x7fffd83b9418 <col:64, col:76> 'float'
|   |   |   |       |     `-BinaryOperator 0x7fffd83b93f0 <col:65, col:73> 'float' '+'
|   |   |   |       |       |-BinaryOperator 0x7fffd83b9388 <col:65, col:69> 'float' '+'
|   |   |   |       |       | |-ImplicitCastExpr 0x7fffd83b9358 <col:65> 'float' <LValueToRValue>
|   |   |   |       |       | | `-DeclRefExpr 0x7fffd83b9308 <col:65> 'float' lvalue Var 0x7fffd83b6128 'dy1' 'float'
|   |   |   |       |       | `-ImplicitCastExpr 0x7fffd83b9370 <col:69> 'float' <LValueToRValue>
|   |   |   |       |       |   `-DeclRefExpr 0x7fffd83b9330 <col:69> 'float' lvalue Var 0x7fffd83b61a0 'dy2' 'float'
|   |   |   |       |       `-ImplicitCastExpr 0x7fffd83b93d8 <col:73> 'float' <LValueToRValue>
|   |   |   |       |         `-DeclRefExpr 0x7fffd83b93b0 <col:73> 'float' lvalue Var 0x7fffd83b6308 'dy5' 'float'
|   |   |   |       |-BreakStmt 0x7fffd83b9560 <line:2211:13>
|   |   |   |       |-CaseStmt 0x7fffd83b9588 <line:2213:10, line:2013:27>
|   |   |   |       | |-IntegerLiteral 0x7fffd83b9568 <line:2213:15> 'int' 37
|   |   |   |       | |-<<<NULL>>>
|   |   |   |       | `-IfStmt 0x7fffd83b96a0 <line:2214:13, line:2013:27>
|   |   |   |       |   |-<<<NULL>>>
|   |   |   |       |   |-<<<NULL>>>
|   |   |   |       |   |-BinaryOperator 0x7fffd83b9620 <line:2214:17, col:22> 'int' '<'
|   |   |   |       |   | |-ImplicitCastExpr 0x7fffd83b9608 <col:17> 'int' <LValueToRValue>
|   |   |   |       |   | | `-DeclRefExpr 0x7fffd83b95c0 <col:17> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   |       |   | `-IntegerLiteral 0x7fffd83b95e8 <col:22> 'int' 11
|   |   |   |       |   |-ReturnStmt 0x7fffd83b9688 <col:26, line:2013:27>
|   |   |   |       |   | `-ParenExpr 0x7fffd83b9668 <col:25, col:27> 'int'
|   |   |   |       |   |   `-IntegerLiteral 0x7fffd83b9648 <col:26> 'int' 0
|   |   |   |       |   `-<<<NULL>>>
|   |   |   |       |-BinaryOperator 0x7fffd83b97a0 <line:2215:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b96d8 <col:13> 'float' lvalue Var 0x7fffd83b5e58 'dx1' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b9788 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b9760 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b9748 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b9700 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b9728 <col:21> 'int' 0
|   |   |   |       |-BinaryOperator 0x7fffd83b9890 <line:2216:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b97c8 <col:13> 'float' lvalue Var 0x7fffd83b6128 'dy1' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b9878 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b9850 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b9838 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b97f0 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b9818 <col:21> 'int' 1
|   |   |   |       |-BinaryOperator 0x7fffd83b9980 <line:2217:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b98b8 <col:13> 'float' lvalue Var 0x7fffd83b5ed0 'dx2' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b9968 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b9940 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b9928 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b98e0 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b9908 <col:21> 'int' 2
|   |   |   |       |-BinaryOperator 0x7fffd83b9a70 <line:2218:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b99a8 <col:13> 'float' lvalue Var 0x7fffd83b61a0 'dy2' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b9a58 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b9a30 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b9a18 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b99d0 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b99f8 <col:21> 'int' 3
|   |   |   |       |-BinaryOperator 0x7fffd83b9b60 <line:2219:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b9a98 <col:13> 'float' lvalue Var 0x7fffd83b5f48 'dx3' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b9b48 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b9b20 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b9b08 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b9ac0 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b9ae8 <col:21> 'int' 4
|   |   |   |       |-BinaryOperator 0x7fffd83b9c50 <line:2220:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b9b88 <col:13> 'float' lvalue Var 0x7fffd83b6218 'dy3' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b9c38 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b9c10 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b9bf8 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b9bb0 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b9bd8 <col:21> 'int' 5
|   |   |   |       |-BinaryOperator 0x7fffd83b9d40 <line:2221:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b9c78 <col:13> 'float' lvalue Var 0x7fffd83b5fc0 'dx4' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b9d28 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b9d00 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b9ce8 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b9ca0 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b9cc8 <col:21> 'int' 6
|   |   |   |       |-BinaryOperator 0x7fffd83b9e60 <line:2222:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b9d68 <col:13> 'float' lvalue Var 0x7fffd83b6290 'dy4' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b9e18 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b9df0 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b9dd8 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b9d90 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b9db8 <col:21> 'int' 7
|   |   |   |       |-BinaryOperator 0x7fffd83b9f50 <line:2223:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b9e88 <col:13> 'float' lvalue Var 0x7fffd83b6038 'dx5' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83b9f38 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83b9f10 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b9ef8 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b9eb0 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b9ed8 <col:21> 'int' 8
|   |   |   |       |-BinaryOperator 0x7fffd83ba040 <line:2224:13, col:22> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83b9f78 <col:13> 'float' lvalue Var 0x7fffd83b6308 'dy5' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83ba028 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |       |   `-ArraySubscriptExpr 0x7fffd83ba000 <col:19, col:22> 'float' lvalue
|   |   |   |       |     |-ImplicitCastExpr 0x7fffd83b9fe8 <col:19> 'float *' <ArrayToPointerDecay>
|   |   |   |       |     | `-DeclRefExpr 0x7fffd83b9fa0 <col:19> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |     `-IntegerLiteral 0x7fffd83b9fc8 <col:21> 'int' 9
|   |   |   |       |-BinaryOperator 0x7fffd83ba180 <line:2225:13, col:29> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83ba068 <col:13> 'float' lvalue Var 0x7fffd83b60b0 'dx6' 'float'
|   |   |   |       | `-BinaryOperator 0x7fffd83ba158 <col:19, col:29> 'float' '='
|   |   |   |       |   |-DeclRefExpr 0x7fffd83ba090 <col:19> 'float' lvalue Var 0x7fffd83b6380 'dy6' 'float'
|   |   |   |       |   `-ImplicitCastExpr 0x7fffd83ba140 <col:25, col:29> 'float' <LValueToRValue>
|   |   |   |       |     `-ArraySubscriptExpr 0x7fffd83ba118 <col:25, col:29> 'float' lvalue
|   |   |   |       |       |-ImplicitCastExpr 0x7fffd83ba100 <col:25> 'float *' <ArrayToPointerDecay>
|   |   |   |       |       | `-DeclRefExpr 0x7fffd83ba0b8 <col:25> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   |       |       `-IntegerLiteral 0x7fffd83ba0e0 <col:27> 'int' 10
|   |   |   |       |-BinaryOperator 0x7fffd83ba3b0 <line:2226:13, col:34> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83ba1a8 <col:13> 'float' lvalue Var 0x7fffd83b6478 'dx' 'float'
|   |   |   |       | `-BinaryOperator 0x7fffd83ba388 <col:18, col:34> 'float' '+'
|   |   |   |       |   |-BinaryOperator 0x7fffd83ba320 <col:18, col:30> 'float' '+'
|   |   |   |       |   | |-BinaryOperator 0x7fffd83ba2b8 <col:18, col:26> 'float' '+'
|   |   |   |       |   | | |-BinaryOperator 0x7fffd83ba250 <col:18, col:22> 'float' '+'
|   |   |   |       |   | | | |-ImplicitCastExpr 0x7fffd83ba220 <col:18> 'float' <LValueToRValue>
|   |   |   |       |   | | | | `-DeclRefExpr 0x7fffd83ba1d0 <col:18> 'float' lvalue Var 0x7fffd83b5e58 'dx1' 'float'
|   |   |   |       |   | | | `-ImplicitCastExpr 0x7fffd83ba238 <col:22> 'float' <LValueToRValue>
|   |   |   |       |   | | |   `-DeclRefExpr 0x7fffd83ba1f8 <col:22> 'float' lvalue Var 0x7fffd83b5ed0 'dx2' 'float'
|   |   |   |       |   | | `-ImplicitCastExpr 0x7fffd83ba2a0 <col:26> 'float' <LValueToRValue>
|   |   |   |       |   | |   `-DeclRefExpr 0x7fffd83ba278 <col:26> 'float' lvalue Var 0x7fffd83b5f48 'dx3' 'float'
|   |   |   |       |   | `-ImplicitCastExpr 0x7fffd83ba308 <col:30> 'float' <LValueToRValue>
|   |   |   |       |   |   `-DeclRefExpr 0x7fffd83ba2e0 <col:30> 'float' lvalue Var 0x7fffd83b5fc0 'dx4' 'float'
|   |   |   |       |   `-ImplicitCastExpr 0x7fffd83ba370 <col:34> 'float' <LValueToRValue>
|   |   |   |       |     `-DeclRefExpr 0x7fffd83ba348 <col:34> 'float' lvalue Var 0x7fffd83b6038 'dx5' 'float'
|   |   |   |       |-BinaryOperator 0x7fffd83ba5e0 <line:2227:13, col:34> 'float' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83ba3d8 <col:13> 'float' lvalue Var 0x7fffd83b64f0 'dy' 'float'
|   |   |   |       | `-BinaryOperator 0x7fffd83ba5b8 <col:18, col:34> 'float' '+'
|   |   |   |       |   |-BinaryOperator 0x7fffd83ba550 <col:18, col:30> 'float' '+'
|   |   |   |       |   | |-BinaryOperator 0x7fffd83ba4e8 <col:18, col:26> 'float' '+'
|   |   |   |       |   | | |-BinaryOperator 0x7fffd83ba480 <col:18, col:22> 'float' '+'
|   |   |   |       |   | | | |-ImplicitCastExpr 0x7fffd83ba450 <col:18> 'float' <LValueToRValue>
|   |   |   |       |   | | | | `-DeclRefExpr 0x7fffd83ba400 <col:18> 'float' lvalue Var 0x7fffd83b6128 'dy1' 'float'
|   |   |   |       |   | | | `-ImplicitCastExpr 0x7fffd83ba468 <col:22> 'float' <LValueToRValue>
|   |   |   |       |   | | |   `-DeclRefExpr 0x7fffd83ba428 <col:22> 'float' lvalue Var 0x7fffd83b61a0 'dy2' 'float'
|   |   |   |       |   | | `-ImplicitCastExpr 0x7fffd83ba4d0 <col:26> 'float' <LValueToRValue>
|   |   |   |       |   | |   `-DeclRefExpr 0x7fffd83ba4a8 <col:26> 'float' lvalue Var 0x7fffd83b6218 'dy3' 'float'
|   |   |   |       |   | `-ImplicitCastExpr 0x7fffd83ba538 <col:30> 'float' <LValueToRValue>
|   |   |   |       |   |   `-DeclRefExpr 0x7fffd83ba510 <col:30> 'float' lvalue Var 0x7fffd83b6290 'dy4' 'float'
|   |   |   |       |   `-ImplicitCastExpr 0x7fffd83ba5a0 <col:34> 'float' <LValueToRValue>
|   |   |   |       |     `-DeclRefExpr 0x7fffd83ba578 <col:34> 'float' lvalue Var 0x7fffd83b6308 'dy5' 'float'
|   |   |   |       |-IfStmt 0x7fffd83ba920 <line:2228:13, line:2231:23>
|   |   |   |       | |-<<<NULL>>>
|   |   |   |       | |-<<<NULL>>>
|   |   |   |       | |-BinaryOperator 0x7fffd83ba798 <line:461:31, col:37> 'int' '>'
|   |   |   |       | | |-CallExpr 0x7fffd83ba670 <col:31, col:37> 'double'
|   |   |   |       | | | |-ImplicitCastExpr 0x7fffd83ba658 <col:31> 'double (*)(double)' <FunctionToPointerDecay>
|   |   |   |       | | | | `-DeclRefExpr 0x7fffd83ba608 <col:31> 'double (double)' Function 0x7fffd82913a0 'fabs' 'double (double)'
|   |   |   |       | | | `-ImplicitCastExpr 0x7fffd83ba6b8 <line:2228:28> 'double' <FloatingCast>
|   |   |   |       | | |   `-ImplicitCastExpr 0x7fffd83ba6a0 <col:28> 'float' <LValueToRValue>
|   |   |   |       | | |     `-DeclRefExpr 0x7fffd83ba630 <col:28> 'float' lvalue Var 0x7fffd83b6478 'dx' 'float'
|   |   |   |       | | `-CallExpr 0x7fffd83ba738 <line:461:31, col:37> 'double'
|   |   |   |       | |   |-ImplicitCastExpr 0x7fffd83ba720 <col:31> 'double (*)(double)' <FunctionToPointerDecay>
|   |   |   |       | |   | `-DeclRefExpr 0x7fffd83ba6d0 <col:31> 'double (double)' Function 0x7fffd82913a0 'fabs' 'double (double)'
|   |   |   |       | |   `-ImplicitCastExpr 0x7fffd83ba780 <line:2228:45> 'double' <FloatingCast>
|   |   |   |       | |     `-ImplicitCastExpr 0x7fffd83ba768 <col:45> 'float' <LValueToRValue>
|   |   |   |       | |       `-DeclRefExpr 0x7fffd83ba6f8 <col:45> 'float' lvalue Var 0x7fffd83b64f0 'dy' 'float'
|   |   |   |       | |-BinaryOperator 0x7fffd83ba848 <line:2229:16, col:23> 'float' '='
|   |   |   |       | | |-DeclRefExpr 0x7fffd83ba7c0 <col:16> 'float' lvalue Var 0x7fffd83b6380 'dy6' 'float'
|   |   |   |       | | `-UnaryOperator 0x7fffd83ba828 <col:22, col:23> 'float' prefix '-'
|   |   |   |       | |   `-ImplicitCastExpr 0x7fffd83ba810 <col:23> 'float' <LValueToRValue>
|   |   |   |       | |     `-DeclRefExpr 0x7fffd83ba7e8 <col:23> 'float' lvalue Var 0x7fffd83b64f0 'dy' 'float'
|   |   |   |       | `-BinaryOperator 0x7fffd83ba8f8 <line:2231:16, col:23> 'float' '='
|   |   |   |       |   |-DeclRefExpr 0x7fffd83ba870 <col:16> 'float' lvalue Var 0x7fffd83b60b0 'dx6' 'float'
|   |   |   |       |   `-UnaryOperator 0x7fffd83ba8d8 <col:22, col:23> 'float' prefix '-'
|   |   |   |       |     `-ImplicitCastExpr 0x7fffd83ba8c0 <col:23> 'float' <LValueToRValue>
|   |   |   |       |       `-DeclRefExpr 0x7fffd83ba898 <col:23> 'float' lvalue Var 0x7fffd83b6478 'dx' 'float'
|   |   |   |       |-CallExpr 0x7fffd83baab0 <line:2232:13, col:68> 'void'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83baa98 <col:13> 'void (*)(stbtt__csctx *, float, float, float, float, float, float)' <FunctionToPointerDecay>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83ba958 <col:13> 'void (stbtt__csctx *, float, float, float, float, float, float)' Function 0x7fffd83a8db0 'stbtt__csctx_rccurve_to' 'void (stbtt__csctx *, float, float, float, float, float, float)'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83bab10 <col:37> 'stbtt__csctx *' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83ba980 <col:37> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83ac448 'c' 'stbtt__csctx *'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83bab28 <col:40> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83ba9a8 <col:40> 'float' lvalue Var 0x7fffd83b5e58 'dx1' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83bab40 <col:45> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83ba9d0 <col:45> 'float' lvalue Var 0x7fffd83b6128 'dy1' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83bab58 <col:50> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83ba9f8 <col:50> 'float' lvalue Var 0x7fffd83b5ed0 'dx2' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83bab70 <col:55> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83baa20 <col:55> 'float' lvalue Var 0x7fffd83b61a0 'dy2' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83bab88 <col:60> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83baa48 <col:60> 'float' lvalue Var 0x7fffd83b5f48 'dx3' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83baba0 <col:65> 'float' <LValueToRValue>
|   |   |   |       |   `-DeclRefExpr 0x7fffd83baa70 <col:65> 'float' lvalue Var 0x7fffd83b6218 'dy3' 'float'
|   |   |   |       |-CallExpr 0x7fffd83bad10 <line:2233:13, col:68> 'void'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83bacf8 <col:13> 'void (*)(stbtt__csctx *, float, float, float, float, float, float)' <FunctionToPointerDecay>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83babb8 <col:13> 'void (stbtt__csctx *, float, float, float, float, float, float)' Function 0x7fffd83a8db0 'stbtt__csctx_rccurve_to' 'void (stbtt__csctx *, float, float, float, float, float, float)'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83bad70 <col:37> 'stbtt__csctx *' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83babe0 <col:37> 'stbtt__csctx *' lvalue ParmVar 0x7fffd83ac448 'c' 'stbtt__csctx *'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83bad88 <col:40> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83bac08 <col:40> 'float' lvalue Var 0x7fffd83b5fc0 'dx4' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83bada0 <col:45> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83bac30 <col:45> 'float' lvalue Var 0x7fffd83b6290 'dy4' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83badb8 <col:50> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83bac58 <col:50> 'float' lvalue Var 0x7fffd83b6038 'dx5' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83badd0 <col:55> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83bac80 <col:55> 'float' lvalue Var 0x7fffd83b6308 'dy5' 'float'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83bade8 <col:60> 'float' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83baca8 <col:60> 'float' lvalue Var 0x7fffd83b60b0 'dx6' 'float'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83bae00 <col:65> 'float' <LValueToRValue>
|   |   |   |       |   `-DeclRefExpr 0x7fffd83bacd0 <col:65> 'float' lvalue Var 0x7fffd83b6380 'dy6' 'float'
|   |   |   |       |-BreakStmt 0x7fffd83bae18 <line:2234:13>
|   |   |   |       `-DefaultStmt 0x7fffd83bae78 <line:2236:10, line:2013:27>
|   |   |   |         `-ReturnStmt 0x7fffd83bae60 <line:2237:13, line:2013:27>
|   |   |   |           `-ParenExpr 0x7fffd83bae40 <col:25, col:27> 'int'
|   |   |   |             `-IntegerLiteral 0x7fffd83bae20 <col:26> 'int' 0
|   |   |   |-BreakStmt 0x7fffd83bb0b0 <line:2239:9>
|   |   |   |-DefaultStmt 0x7fffd83bb400 <line:2241:7, line:2013:27>
|   |   |   | `-IfStmt 0x7fffd83bb3c8 <line:2242:10, line:2013:27>
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-BinaryOperator 0x7fffd83bb348 <line:2242:14, col:59> 'int' '&&'
|   |   |   |   | |-BinaryOperator 0x7fffd83bb1c8 <col:14, col:33> 'int' '&&'
|   |   |   |   | | |-BinaryOperator 0x7fffd83bb118 <col:14, col:20> 'int' '!='
|   |   |   |   | | | |-ImplicitCastExpr 0x7fffd83bb100 <col:14> 'int' <LValueToRValue>
|   |   |   |   | | | | `-DeclRefExpr 0x7fffd83bb0b8 <col:14> 'int' lvalue Var 0x7fffd83ac9a8 'b0' 'int'
|   |   |   |   | | | `-IntegerLiteral 0x7fffd83bb0e0 <col:20> 'int' 255
|   |   |   |   | | `-BinaryOperator 0x7fffd83bb1a0 <col:27, col:33> 'int' '!='
|   |   |   |   | |   |-ImplicitCastExpr 0x7fffd83bb188 <col:27> 'int' <LValueToRValue>
|   |   |   |   | |   | `-DeclRefExpr 0x7fffd83bb140 <col:27> 'int' lvalue Var 0x7fffd83ac9a8 'b0' 'int'
|   |   |   |   | |   `-IntegerLiteral 0x7fffd83bb168 <col:33> 'int' 28
|   |   |   |   | `-ParenExpr 0x7fffd83bb328 <col:39, col:59> 'int'
|   |   |   |   |   `-BinaryOperator 0x7fffd83bb300 <col:40, col:56> 'int' '||'
|   |   |   |   |     |-BinaryOperator 0x7fffd83bb250 <col:40, col:45> 'int' '<'
|   |   |   |   |     | |-ImplicitCastExpr 0x7fffd83bb238 <col:40> 'int' <LValueToRValue>
|   |   |   |   |     | | `-DeclRefExpr 0x7fffd83bb1f0 <col:40> 'int' lvalue Var 0x7fffd83ac9a8 'b0' 'int'
|   |   |   |   |     | `-IntegerLiteral 0x7fffd83bb218 <col:45> 'int' 32
|   |   |   |   |     `-BinaryOperator 0x7fffd83bb2d8 <col:51, col:56> 'int' '>'
|   |   |   |   |       |-ImplicitCastExpr 0x7fffd83bb2c0 <col:51> 'int' <LValueToRValue>
|   |   |   |   |       | `-DeclRefExpr 0x7fffd83bb278 <col:51> 'int' lvalue Var 0x7fffd83ac9a8 'b0' 'int'
|   |   |   |   |       `-IntegerLiteral 0x7fffd83bb2a0 <col:56> 'int' 254
|   |   |   |   |-ReturnStmt 0x7fffd83bb3b0 <line:2243:13, line:2013:27>
|   |   |   |   | `-ParenExpr 0x7fffd83bb390 <col:25, col:27> 'int'
|   |   |   |   |   `-IntegerLiteral 0x7fffd83bb370 <col:26> 'int' 0
|   |   |   |   `-<<<NULL>>>
|   |   |   |-IfStmt 0x7fffd83bb988 <line:2246:10, line:2251:10>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-BinaryOperator 0x7fffd83bb480 <line:2246:14, col:20> 'int' '=='
|   |   |   | | |-ImplicitCastExpr 0x7fffd83bb468 <col:14> 'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x7fffd83bb420 <col:14> 'int' lvalue Var 0x7fffd83ac9a8 'b0' 'int'
|   |   |   | | `-IntegerLiteral 0x7fffd83bb448 <col:20> 'int' 255
|   |   |   | |-CompoundStmt 0x7fffd83bb6d0 <col:25, line:2248:10>
|   |   |   | | `-BinaryOperator 0x7fffd83bb6a8 <line:2247:13, col:60> 'float' '='
|   |   |   | |   |-DeclRefExpr 0x7fffd83bb4a8 <col:13> 'float' lvalue Var 0x7fffd83acf78 'f' 'float'
|   |   |   | |   `-BinaryOperator 0x7fffd83bb680 <col:17, col:60> 'float' '/'
|   |   |   | |     |-CStyleCastExpr 0x7fffd83bb620 <col:17, line:1174:51> 'float' <IntegralToFloating>
|   |   |   | |     | `-CStyleCastExpr 0x7fffd83bb5e0 <line:2247:24, line:1174:51> 'stbtt_int32':'int' <IntegralCast>
|   |   |   | |     |   `-CallExpr 0x7fffd83bb598 <col:30, col:51> 'stbtt_uint32':'unsigned int'
|   |   |   | |     |     |-ImplicitCastExpr 0x7fffd83bb580 <col:30> 'stbtt_uint32 (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   |   |   | |     |     | `-DeclRefExpr 0x7fffd83bb4d0 <col:30> 'stbtt_uint32 (stbtt__buf *, int)' Function 0x7fffd8361820 'stbtt__buf_get' 'stbtt_uint32 (stbtt__buf *, int)'
|   |   |   | |     |     |-ParenExpr 0x7fffd83bb540 <col:45, col:47> 'stbtt__buf *'
|   |   |   | |     |     | `-UnaryOperator 0x7fffd83bb520 <line:2247:54, col:55> 'stbtt__buf *' prefix '&'
|   |   |   | |     |     |   `-DeclRefExpr 0x7fffd83bb4f8 <col:55> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83acec8 'b' 'stbtt__buf':'stbtt__buf'
|   |   |   | |     |     `-IntegerLiteral 0x7fffd83bb560 <line:1174:50> 'int' 4
|   |   |   | |     `-ImplicitCastExpr 0x7fffd83bb668 <line:2247:60> 'float' <IntegralToFloating>
|   |   |   | |       `-IntegerLiteral 0x7fffd83bb648 <col:60> 'int' 65536
|   |   |   | `-CompoundStmt 0x7fffd83bb968 <line:2248:17, line:2251:10>
|   |   |   |   |-CallExpr 0x7fffd83bb7b0 <line:2249:13, col:35> 'void'
|   |   |   |   | |-ImplicitCastExpr 0x7fffd83bb798 <col:13> 'void (*)(stbtt__buf *, int)' <FunctionToPointerDecay>
|   |   |   |   | | `-DeclRefExpr 0x7fffd83bb6e8 <col:13> 'void (stbtt__buf *, int)' Function 0x7fffd8361388 'stbtt__buf_skip' 'void (stbtt__buf *, int)'
|   |   |   |   | |-UnaryOperator 0x7fffd83bb738 <col:29, col:30> 'stbtt__buf *' prefix '&'
|   |   |   |   | | `-DeclRefExpr 0x7fffd83bb710 <col:30> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83acec8 'b' 'stbtt__buf':'stbtt__buf'
|   |   |   |   | `-UnaryOperator 0x7fffd83bb778 <col:33, col:34> 'int' prefix '-'
|   |   |   |   |   `-IntegerLiteral 0x7fffd83bb758 <col:34> 'int' 1
|   |   |   |   `-BinaryOperator 0x7fffd83bb940 <line:2250:13, col:54> 'float' '='
|   |   |   |     |-DeclRefExpr 0x7fffd83bb7e8 <col:13> 'float' lvalue Var 0x7fffd83acf78 'f' 'float'
|   |   |   |     `-CStyleCastExpr 0x7fffd83bb918 <col:17, col:54> 'float' <IntegralToFloating>
|   |   |   |       `-CStyleCastExpr 0x7fffd83bb8d8 <col:24, col:54> 'stbtt_int16':'short' <IntegralCast>
|   |   |   |         `-CallExpr 0x7fffd83bb898 <col:37, col:54> 'stbtt_uint32':'unsigned int'
|   |   |   |           |-ImplicitCastExpr 0x7fffd83bb880 <col:37> 'stbtt_uint32 (*)(stbtt__buf *)' <FunctionToPointerDecay>
|   |   |   |           | `-DeclRefExpr 0x7fffd83bb810 <col:37> 'stbtt_uint32 (stbtt__buf *)' Function 0x7fffd83655c0 'stbtt__cff_int' 'stbtt_uint32 (stbtt__buf *)'
|   |   |   |           `-UnaryOperator 0x7fffd83bb860 <col:52, col:53> 'stbtt__buf *' prefix '&'
|   |   |   |             `-DeclRefExpr 0x7fffd83bb838 <col:53> 'stbtt__buf':'stbtt__buf' lvalue Var 0x7fffd83acec8 'b' 'stbtt__buf':'stbtt__buf'
|   |   |   |-IfStmt 0x7fffd83bbaa0 <line:2252:10, line:2013:27>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-BinaryOperator 0x7fffd83bba20 <line:2252:14, col:20> 'int' '>='
|   |   |   | | |-ImplicitCastExpr 0x7fffd83bba08 <col:14> 'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x7fffd83bb9c0 <col:14> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   | | `-IntegerLiteral 0x7fffd83bb9e8 <col:20> 'int' 48
|   |   |   | |-ReturnStmt 0x7fffd83bba88 <col:24, line:2013:27>
|   |   |   | | `-ParenExpr 0x7fffd83bba68 <col:25, col:27> 'int'
|   |   |   | |   `-IntegerLiteral 0x7fffd83bba48 <col:26> 'int' 0
|   |   |   | `-<<<NULL>>>
|   |   |   |-BinaryOperator 0x7fffd83bbbc8 <line:2253:10, col:20> 'float' '='
|   |   |   | |-ArraySubscriptExpr 0x7fffd83bbb60 <col:10, col:16> 'float' lvalue
|   |   |   | | |-ImplicitCastExpr 0x7fffd83bbb48 <col:10> 'float *' <ArrayToPointerDecay>
|   |   |   | | | `-DeclRefExpr 0x7fffd83bbad8 <col:10> 'float [48]' lvalue Var 0x7fffd83acc20 's' 'float [48]'
|   |   |   | | `-UnaryOperator 0x7fffd83bbb28 <col:12, col:14> 'int' postfix '++'
|   |   |   | |   `-DeclRefExpr 0x7fffd83bbb00 <col:12> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |   |   | `-ImplicitCastExpr 0x7fffd83bbbb0 <col:20> 'float' <LValueToRValue>
|   |   |   |   `-DeclRefExpr 0x7fffd83bbb88 <col:20> 'float' lvalue Var 0x7fffd83acf78 'f' 'float'
|   |   |   |-BinaryOperator 0x7fffd83bbc38 <line:2254:10, col:24> 'int' '='
|   |   |   | |-DeclRefExpr 0x7fffd83bbbf0 <col:10> 'int' lvalue Var 0x7fffd83acb10 'clear_stack' 'int'
|   |   |   | `-IntegerLiteral 0x7fffd83bbc18 <col:24> 'int' 0
|   |   |   `-BreakStmt 0x7fffd83bbc60 <line:2255:10>
|   |   `-IfStmt 0x7fffd83bc598 <line:2257:7, col:29>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-ImplicitCastExpr 0x7fffd83bc510 <col:11> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd83bc4e8 <col:11> 'int' lvalue Var 0x7fffd83acb10 'clear_stack' 'int'
|   |     |-BinaryOperator 0x7fffd83bc570 <col:24, col:29> 'int' '='
|   |     | |-DeclRefExpr 0x7fffd83bc528 <col:24> 'int' lvalue Var 0x7fffd83ac820 'sp' 'int'
|   |     | `-IntegerLiteral 0x7fffd83bc550 <col:29> 'int' 0
|   |     `-<<<NULL>>>
|   `-ReturnStmt 0x7fffd83bc668 <line:2259:4, line:2013:27>
|     `-ParenExpr 0x7fffd83bc648 <col:25, col:27> 'int'
|       `-IntegerLiteral 0x7fffd83bc628 <col:26> 'int' 0
|-FunctionDecl 0x7fffd83bc870 <line:2264:1, line:2279:1> line:2264:12 used stbtt__GetGlyphShapeT2 'int (const stbtt_fontinfo *, int, stbtt_vertex **)' static
| |-ParmVarDecl 0x7fffd83bc6e0 <col:35, col:57> col:57 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83bc758 <col:63, col:67> col:67 used glyph_index 'int'
| |-ParmVarDecl 0x7fffd83bc7d0 <col:80, col:95> col:95 used pvertices 'stbtt_vertex **'
| `-CompoundStmt 0x7fffd83be360 <line:2265:1, line:2279:1>
|   |-DeclStmt 0x7fffd83bcd30 <line:2267:4, col:49>
|   | `-VarDecl 0x7fffd83bc938 <col:4, line:1904:72> line:2267:17 used count_ctx 'stbtt__csctx':'stbtt__csctx' cinit
|   |   `-InitListExpr 0x7fffd83bcc18 <line:1904:35, col:72> 'stbtt__csctx':'stbtt__csctx'
|   |     |-IntegerLiteral 0x7fffd83bc998 <line:2267:47> 'int' 1
|   |     |-IntegerLiteral 0x7fffd83bc9b8 <line:1904:43> 'int' 0
|   |     |-ImplicitCastExpr 0x7fffd83bccb8 <col:46> 'float' <IntegralToFloating>
|   |     | `-IntegerLiteral 0x7fffd83bc9d8 <col:46> 'int' 0
|   |     |-ImplicitCastExpr 0x7fffd83bccd0 <col:48> 'float' <IntegralToFloating>
|   |     | `-IntegerLiteral 0x7fffd83bc9f8 <col:48> 'int' 0
|   |     |-ImplicitCastExpr 0x7fffd83bcce8 <col:51> 'float' <IntegralToFloating>
|   |     | `-IntegerLiteral 0x7fffd83bca18 <col:51> 'int' 0
|   |     |-ImplicitCastExpr 0x7fffd83bcd00 <col:53> 'float' <IntegralToFloating>
|   |     | `-IntegerLiteral 0x7fffd83bca38 <col:53> 'int' 0
|   |     |-IntegerLiteral 0x7fffd83bca58 <col:56> 'int' 0
|   |     |-IntegerLiteral 0x7fffd83bca78 <col:58> 'int' 0
|   |     |-IntegerLiteral 0x7fffd83bca98 <col:60> 'int' 0
|   |     |-IntegerLiteral 0x7fffd83bcab8 <col:62> 'int' 0
|   |     |-ImplicitCastExpr 0x7fffd83bcd18 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'stbtt_vertex *' <NullToPointer>
|   |     | `-ParenExpr 0x7fffd83bcb38 <col:16, col:25> 'void *'
|   |     |   `-CStyleCastExpr 0x7fffd83bcb10 <col:17, col:24> 'void *' <NullToPointer>
|   |     |     `-IntegerLiteral 0x7fffd83bcad8 <col:24> 'int' 0
|   |     `-IntegerLiteral 0x7fffd83bcb58 <././stb/stb_truetype.h:1904:71> 'int' 0
|   |-DeclStmt 0x7fffd83bd150 <line:2268:4, col:50>
|   | `-VarDecl 0x7fffd83bcd58 <col:4, line:1904:72> line:2268:17 used output_ctx 'stbtt__csctx':'stbtt__csctx' cinit
|   |   `-InitListExpr 0x7fffd83bd038 <line:1904:35, col:72> 'stbtt__csctx':'stbtt__csctx'
|   |     |-IntegerLiteral 0x7fffd83bcdb8 <line:2268:48> 'int' 0
|   |     |-IntegerLiteral 0x7fffd83bcdd8 <line:1904:43> 'int' 0
|   |     |-ImplicitCastExpr 0x7fffd83bd0d8 <col:46> 'float' <IntegralToFloating>
|   |     | `-IntegerLiteral 0x7fffd83bcdf8 <col:46> 'int' 0
|   |     |-ImplicitCastExpr 0x7fffd83bd0f0 <col:48> 'float' <IntegralToFloating>
|   |     | `-IntegerLiteral 0x7fffd83bce18 <col:48> 'int' 0
|   |     |-ImplicitCastExpr 0x7fffd83bd108 <col:51> 'float' <IntegralToFloating>
|   |     | `-IntegerLiteral 0x7fffd83bce38 <col:51> 'int' 0
|   |     |-ImplicitCastExpr 0x7fffd83bd120 <col:53> 'float' <IntegralToFloating>
|   |     | `-IntegerLiteral 0x7fffd83bce58 <col:53> 'int' 0
|   |     |-IntegerLiteral 0x7fffd83bce78 <col:56> 'int' 0
|   |     |-IntegerLiteral 0x7fffd83bce98 <col:58> 'int' 0
|   |     |-IntegerLiteral 0x7fffd83bceb8 <col:60> 'int' 0
|   |     |-IntegerLiteral 0x7fffd83bced8 <col:62> 'int' 0
|   |     |-ImplicitCastExpr 0x7fffd83bd138 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'stbtt_vertex *' <NullToPointer>
|   |     | `-ParenExpr 0x7fffd83bcf58 <col:16, col:25> 'void *'
|   |     |   `-CStyleCastExpr 0x7fffd83bcf30 <col:17, col:24> 'void *' <NullToPointer>
|   |     |     `-IntegerLiteral 0x7fffd83bcef8 <col:24> 'int' 0
|   |     `-IntegerLiteral 0x7fffd83bcf78 <././stb/stb_truetype.h:1904:71> 'int' 0
|   |-IfStmt 0x7fffd83be1a0 <line:2269:4, line:2276:4>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-CallExpr 0x7fffd83bd2a0 <line:2269:8, col:59> 'int'
|   | | |-ImplicitCastExpr 0x7fffd83bd288 <col:8> 'int (*)(const stbtt_fontinfo *, int, stbtt__csctx *)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x7fffd83bd168 <col:8> 'int (const stbtt_fontinfo *, int, stbtt__csctx *)' Function 0x7fffd83ac588 'stbtt__run_charstring' 'int (const stbtt_fontinfo *, int, stbtt__csctx *)'
|   | | |-ImplicitCastExpr 0x7fffd83bd2e0 <col:30> 'const stbtt_fontinfo *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd83bd190 <col:30> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83bc6e0 'info' 'const stbtt_fontinfo *'
|   | | |-ImplicitCastExpr 0x7fffd83bd2f8 <col:36> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd83bd1b8 <col:36> 'int' lvalue ParmVar 0x7fffd83bc758 'glyph_index' 'int'
|   | | `-UnaryOperator 0x7fffd83bd208 <col:49, col:50> 'stbtt__csctx *' prefix '&'
|   | |   `-DeclRefExpr 0x7fffd83bd1e0 <col:50> 'stbtt__csctx':'stbtt__csctx' lvalue Var 0x7fffd83bc938 'count_ctx' 'stbtt__csctx':'stbtt__csctx'
|   | |-CompoundStmt 0x7fffd83be178 <col:62, line:2276:4>
|   | | |-BinaryOperator 0x7fffd83bd698 <line:2270:7, line:467:51> 'stbtt_vertex *' '='
|   | | | |-UnaryOperator 0x7fffd83bd350 <line:2270:7, col:8> 'stbtt_vertex *' lvalue prefix '*'
|   | | | | `-ImplicitCastExpr 0x7fffd83bd338 <col:8> 'stbtt_vertex **' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x7fffd83bd310 <col:8> 'stbtt_vertex **' lvalue ParmVar 0x7fffd83bc7d0 'pvertices' 'stbtt_vertex **'
|   | | | `-CStyleCastExpr 0x7fffd83bd670 <col:20, line:467:51> 'stbtt_vertex *' <BitCast>
|   | | |   `-ParenExpr 0x7fffd83bd650 <col:31, col:51> 'void *'
|   | | |     `-BinaryOperator 0x7fffd83bd628 <col:32, col:50> 'void *' ','
|   | | |       |-CStyleCastExpr 0x7fffd83bd460 <col:32, col:40> 'void' <ToVoid>
|   | | |       | `-ImplicitCastExpr 0x7fffd83bd448 <col:38, col:40> 'void *' <LValueToRValue>
|   | | |       |   `-ParenExpr 0x7fffd83bd428 <col:38, col:40> 'void *const' lvalue
|   | | |       |     `-MemberExpr 0x7fffd83bd3b0 <line:2270:93, col:99> 'void *const' lvalue ->userdata 0x7fffd834cb78
|   | | |       |       `-ImplicitCastExpr 0x7fffd83bd398 <col:93> 'const stbtt_fontinfo *' <LValueToRValue>
|   | | |       |         `-DeclRefExpr 0x7fffd83bd370 <col:93> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83bc6e0 'info' 'const stbtt_fontinfo *'
|   | | |       `-CallExpr 0x7fffd83bd5b0 <line:467:42, col:50> 'void *'
|   | | |         |-ImplicitCastExpr 0x7fffd83bd598 <col:42> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|   | | |         | `-DeclRefExpr 0x7fffd83bd488 <col:42> 'void *(unsigned long)' Function 0x7fffd831b4b0 'malloc' 'void *(unsigned long)'
|   | | |         `-BinaryOperator 0x7fffd83bd570 <line:2270:48, col:90> 'unsigned long' '*'
|   | | |           |-ImplicitCastExpr 0x7fffd83bd558 <col:48, col:58> 'unsigned long' <IntegralCast>
|   | | |           | `-ImplicitCastExpr 0x7fffd83bd540 <col:48, col:58> 'int' <LValueToRValue>
|   | | |           |   `-MemberExpr 0x7fffd83bd4d8 <col:48, col:58> 'int' lvalue .num_vertices 0x7fffd83a2e10
|   | | |           |     `-DeclRefExpr 0x7fffd83bd4b0 <col:48> 'stbtt__csctx':'stbtt__csctx' lvalue Var 0x7fffd83bc938 'count_ctx' 'stbtt__csctx':'stbtt__csctx'
|   | | |           `-UnaryExprOrTypeTraitExpr 0x7fffd83bd520 <col:71, col:90> 'unsigned long' sizeof 'stbtt_vertex':'stbtt_vertex'
|   | | |-BinaryOperator 0x7fffd83bd838 <line:2271:7, col:31> 'stbtt_vertex *' '='
|   | | | |-MemberExpr 0x7fffd83bd788 <col:7, col:18> 'stbtt_vertex *' lvalue .pvertices 0x7fffd83a2db0
|   | | | | `-DeclRefExpr 0x7fffd83bd760 <col:7> 'stbtt__csctx':'stbtt__csctx' lvalue Var 0x7fffd83bcd58 'output_ctx' 'stbtt__csctx':'stbtt__csctx'
|   | | | `-ImplicitCastExpr 0x7fffd83bd820 <col:30, col:31> 'stbtt_vertex *' <LValueToRValue>
|   | | |   `-UnaryOperator 0x7fffd83bd800 <col:30, col:31> 'stbtt_vertex *' lvalue prefix '*'
|   | | |     `-ImplicitCastExpr 0x7fffd83bd7e8 <col:31> 'stbtt_vertex **' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x7fffd83bd7c0 <col:31> 'stbtt_vertex **' lvalue ParmVar 0x7fffd83bc7d0 'pvertices' 'stbtt_vertex **'
|   | | `-IfStmt 0x7fffd83be140 <line:2272:7, line:2275:7>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-CallExpr 0x7fffd83bd938 <line:2272:11, col:63> 'int'
|   | |   | |-ImplicitCastExpr 0x7fffd83bd920 <col:11> 'int (*)(const stbtt_fontinfo *, int, stbtt__csctx *)' <FunctionToPointerDecay>
|   | |   | | `-DeclRefExpr 0x7fffd83bd860 <col:11> 'int (const stbtt_fontinfo *, int, stbtt__csctx *)' Function 0x7fffd83ac588 'stbtt__run_charstring' 'int (const stbtt_fontinfo *, int, stbtt__csctx *)'
|   | |   | |-ImplicitCastExpr 0x7fffd83bd978 <col:33> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x7fffd83bd888 <col:33> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83bc6e0 'info' 'const stbtt_fontinfo *'
|   | |   | |-ImplicitCastExpr 0x7fffd83bd990 <col:39> 'int' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x7fffd83bd8b0 <col:39> 'int' lvalue ParmVar 0x7fffd83bc758 'glyph_index' 'int'
|   | |   | `-UnaryOperator 0x7fffd83bd900 <col:52, col:53> 'stbtt__csctx *' prefix '&'
|   | |   |   `-DeclRefExpr 0x7fffd83bd8d8 <col:53> 'stbtt__csctx':'stbtt__csctx' lvalue Var 0x7fffd83bcd58 'output_ctx' 'stbtt__csctx':'stbtt__csctx'
|   | |   |-CompoundStmt 0x7fffd83be120 <col:66, line:2275:7>
|   | |   | |-ParenExpr 0x7fffd83be070 </usr/include/assert.h:108:3, line:113:7> 'void'
|   | |   | | `-BinaryOperator 0x7fffd83be048 <line:108:4, line:113:6> 'void' ','
|   | |   | |   |-CStyleCastExpr 0x7fffd83bdba0 <line:108:4, col:33> 'void' <ToVoid>
|   | |   | |   | `-UnaryExprOrTypeTraitExpr 0x7fffd83bdb70 <col:11, col:33> 'unsigned long' sizeof
|   | |   | |   |   `-ParenExpr 0x7fffd83bdb50 <col:18, col:33> 'int'
|   | |   | |   |     `-ConditionalOperator 0x7fffd83bdb20 <col:19, col:32> 'int'
|   | |   | |   |       |-ParenExpr 0x7fffd83bdac0 <col:19, col:24> 'int'
|   | |   | |   |       | `-BinaryOperator 0x7fffd83bda98 <././stb/stb_truetype.h:2273:23, col:60> 'int' '=='
|   | |   | |   |       |   |-ImplicitCastExpr 0x7fffd83bda68 <col:23, col:34> 'int' <LValueToRValue>
|   | |   | |   |       |   | `-MemberExpr 0x7fffd83bd9d0 <col:23, col:34> 'int' lvalue .num_vertices 0x7fffd83a2e10
|   | |   | |   |       |   |   `-DeclRefExpr 0x7fffd83bd9a8 <col:23> 'stbtt__csctx':'stbtt__csctx' lvalue Var 0x7fffd83bcd58 'output_ctx' 'stbtt__csctx':'stbtt__csctx'
|   | |   | |   |       |   `-ImplicitCastExpr 0x7fffd83bda80 <col:50, col:60> 'int' <LValueToRValue>
|   | |   | |   |       |     `-MemberExpr 0x7fffd83bda30 <col:50, col:60> 'int' lvalue .num_vertices 0x7fffd83a2e10
|   | |   | |   |       |       `-DeclRefExpr 0x7fffd83bda08 <col:50> 'stbtt__csctx':'stbtt__csctx' lvalue Var 0x7fffd83bc938 'count_ctx' 'stbtt__csctx':'stbtt__csctx'
|   | |   | |   |       |-IntegerLiteral 0x7fffd83bdae0 </usr/include/assert.h:108:28> 'int' 1
|   | |   | |   |       `-IntegerLiteral 0x7fffd83bdb00 <col:32> 'int' 0
|   | |   | |   `-UnaryOperator 0x7fffd83be028 <col:36, line:113:6> 'void' prefix '__extension__'
|   | |   | |     `-StmtExpr 0x7fffd83be008 <line:108:50, line:113:6> 'void'
|   | |   | |       `-CompoundStmt 0x7fffd83bdff0 <line:108:51, line:113:5>
|   | |   | |         `-IfStmt 0x7fffd83bdfb8 <line:109:7, line:112:68>
|   | |   | |           |-<<<NULL>>>
|   | |   | |           |-<<<NULL>>>
|   | |   | |           |-BinaryOperator 0x7fffd83bdcb8 <././stb/stb_truetype.h:2273:23, col:60> 'int' '=='
|   | |   | |           | |-ImplicitCastExpr 0x7fffd83bdc88 <col:23, col:34> 'int' <LValueToRValue>
|   | |   | |           | | `-MemberExpr 0x7fffd83bdbf0 <col:23, col:34> 'int' lvalue .num_vertices 0x7fffd83a2e10
|   | |   | |           | |   `-DeclRefExpr 0x7fffd83bdbc8 <col:23> 'stbtt__csctx':'stbtt__csctx' lvalue Var 0x7fffd83bcd58 'output_ctx' 'stbtt__csctx':'stbtt__csctx'
|   | |   | |           | `-ImplicitCastExpr 0x7fffd83bdca0 <col:50, col:60> 'int' <LValueToRValue>
|   | |   | |           |   `-MemberExpr 0x7fffd83bdc50 <col:50, col:60> 'int' lvalue .num_vertices 0x7fffd83a2e10
|   | |   | |           |     `-DeclRefExpr 0x7fffd83bdc28 <col:50> 'stbtt__csctx':'stbtt__csctx' lvalue Var 0x7fffd83bc938 'count_ctx' 'stbtt__csctx':'stbtt__csctx'
|   | |   | |           |-NullStmt 0x7fffd83bdce0 </usr/include/assert.h:110:9>
|   | |   | |           `-CallExpr 0x7fffd83bdee0 <line:112:9, col:68> 'void'
|   | |   | |             |-ImplicitCastExpr 0x7fffd83bdec8 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   | |   | |             | `-DeclRefExpr 0x7fffd83bdcf0 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   | |   | |             |-ImplicitCastExpr 0x7fffd83bdf40 <<scratch space>:258:1> 'const char *' <BitCast>
|   | |   | |             | `-ImplicitCastExpr 0x7fffd83bdf28 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   | |             |   `-StringLiteral 0x7fffd83bdd58 <col:1> 'char [50]' lvalue "output_ctx.num_vertices == count_ctx.num_vertices"
|   | |   | |             |-ImplicitCastExpr 0x7fffd83bdf70 <line:259:1> 'const char *' <BitCast>
|   | |   | |             | `-ImplicitCastExpr 0x7fffd83bdf58 <col:1> 'char *' <ArrayToPointerDecay>
|   | |   | |             |   `-StringLiteral 0x7fffd83bddb8 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   | |   | |             |-ImplicitCastExpr 0x7fffd83bdf88 <line:260:1> 'unsigned int' <IntegralCast>
|   | |   | |             | `-IntegerLiteral 0x7fffd83bddf8 <col:1> 'int' 2273
|   | |   | |             `-ImplicitCastExpr 0x7fffd83bdfa0 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   | |   | |               `-UnaryOperator 0x7fffd83bdea8 <col:30, col:44> 'const char [73]' lvalue prefix '__extension__'
|   | |   | |                 `-PredefinedExpr 0x7fffd83bde88 <col:44> 'const char [73]' lvalue __PRETTY_FUNCTION__
|   | |   | |                   `-StringLiteral 0x7fffd83bde18 <col:44> 'const char [73]' lvalue "int stbtt__GetGlyphShapeT2(const stbtt_fontinfo *, int, stbtt_vertex **)"
|   | |   | `-ReturnStmt 0x7fffd83be108 <././stb/stb_truetype.h:2274:10, col:28>
|   | |   |   `-ImplicitCastExpr 0x7fffd83be0f0 <col:17, col:28> 'int' <LValueToRValue>
|   | |   |     `-MemberExpr 0x7fffd83be0b8 <col:17, col:28> 'int' lvalue .num_vertices 0x7fffd83a2e10
|   | |   |       `-DeclRefExpr 0x7fffd83be090 <col:17> 'stbtt__csctx':'stbtt__csctx' lvalue Var 0x7fffd83bcd58 'output_ctx' 'stbtt__csctx':'stbtt__csctx'
|   | |   `-<<<NULL>>>
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x7fffd83be300 <line:2277:4, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25> 'stbtt_vertex *' '='
|   | |-UnaryOperator 0x7fffd83be218 <././stb/stb_truetype.h:2277:4, col:5> 'stbtt_vertex *' lvalue prefix '*'
|   | | `-ImplicitCastExpr 0x7fffd83be200 <col:5> 'stbtt_vertex **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83be1d8 <col:5> 'stbtt_vertex **' lvalue ParmVar 0x7fffd83bc7d0 'pvertices' 'stbtt_vertex **'
|   | `-ImplicitCastExpr 0x7fffd83be2e8 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'stbtt_vertex *' <NullToPointer>
|   |   `-ParenExpr 0x7fffd83be2c8 <col:16, col:25> 'void *'
|   |     `-CStyleCastExpr 0x7fffd83be2a0 <col:17, col:24> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x7fffd83be238 <col:24> 'int' 0
|   `-ReturnStmt 0x7fffd83be348 <././stb/stb_truetype.h:2278:4, col:11>
|     `-IntegerLiteral 0x7fffd83be328 <col:11> 'int' 0
|-FunctionDecl 0x7fffd83be6b8 prev 0x7fffd838e188 <line:2281:1, line:2290:1> line:2281:12 used stbtt__GetGlyphInfoT2 'int (const stbtt_fontinfo *, int, int *, int *, int *, int *)' static
| |-ParmVarDecl 0x7fffd83be3a8 <col:34, col:56> col:56 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83be420 <col:62, col:66> col:66 used glyph_index 'int'
| |-ParmVarDecl 0x7fffd83be498 <col:79, col:84> col:84 used x0 'int *'
| |-ParmVarDecl 0x7fffd83be510 <col:88, col:93> col:93 used y0 'int *'
| |-ParmVarDecl 0x7fffd83be588 <col:97, col:102> col:102 used x1 'int *'
| |-ParmVarDecl 0x7fffd83be600 <col:106, col:111> col:111 used y1 'int *'
| `-CompoundStmt 0x7fffd83bf6c0 <line:2282:1, line:2290:1>
|   |-DeclStmt 0x7fffd83beb90 <line:2283:4, col:41>
|   | `-VarDecl 0x7fffd83be798 <col:4, line:1904:72> line:2283:17 used c 'stbtt__csctx':'stbtt__csctx' cinit
|   |   `-InitListExpr 0x7fffd83bea78 <line:1904:35, col:72> 'stbtt__csctx':'stbtt__csctx'
|   |     |-IntegerLiteral 0x7fffd83be7f8 <line:2283:39> 'int' 1
|   |     |-IntegerLiteral 0x7fffd83be818 <line:1904:43> 'int' 0
|   |     |-ImplicitCastExpr 0x7fffd83beb18 <col:46> 'float' <IntegralToFloating>
|   |     | `-IntegerLiteral 0x7fffd83be838 <col:46> 'int' 0
|   |     |-ImplicitCastExpr 0x7fffd83beb30 <col:48> 'float' <IntegralToFloating>
|   |     | `-IntegerLiteral 0x7fffd83be858 <col:48> 'int' 0
|   |     |-ImplicitCastExpr 0x7fffd83beb48 <col:51> 'float' <IntegralToFloating>
|   |     | `-IntegerLiteral 0x7fffd83be878 <col:51> 'int' 0
|   |     |-ImplicitCastExpr 0x7fffd83beb60 <col:53> 'float' <IntegralToFloating>
|   |     | `-IntegerLiteral 0x7fffd83be898 <col:53> 'int' 0
|   |     |-IntegerLiteral 0x7fffd83be8b8 <col:56> 'int' 0
|   |     |-IntegerLiteral 0x7fffd83be8d8 <col:58> 'int' 0
|   |     |-IntegerLiteral 0x7fffd83be8f8 <col:60> 'int' 0
|   |     |-IntegerLiteral 0x7fffd83be918 <col:62> 'int' 0
|   |     |-ImplicitCastExpr 0x7fffd83beb78 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'stbtt_vertex *' <NullToPointer>
|   |     | `-ParenExpr 0x7fffd83be998 <col:16, col:25> 'void *'
|   |     |   `-CStyleCastExpr 0x7fffd83be970 <col:17, col:24> 'void *' <NullToPointer>
|   |     |     `-IntegerLiteral 0x7fffd83be938 <col:24> 'int' 0
|   |     `-IntegerLiteral 0x7fffd83be9b8 <././stb/stb_truetype.h:1904:71> 'int' 0
|   |-DeclStmt 0x7fffd83bed68 <line:2284:4, col:56>
|   | `-VarDecl 0x7fffd83bebc0 <col:4, col:55> col:8 used r 'int' cinit
|   |   `-CallExpr 0x7fffd83becf8 <col:12, col:55> 'int'
|   |     |-ImplicitCastExpr 0x7fffd83bece0 <col:12> 'int (*)(const stbtt_fontinfo *, int, stbtt__csctx *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd83bec20 <col:12> 'int (const stbtt_fontinfo *, int, stbtt__csctx *)' Function 0x7fffd83ac588 'stbtt__run_charstring' 'int (const stbtt_fontinfo *, int, stbtt__csctx *)'
|   |     |-ImplicitCastExpr 0x7fffd83bed38 <col:34> 'const stbtt_fontinfo *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd83bec48 <col:34> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83be3a8 'info' 'const stbtt_fontinfo *'
|   |     |-ImplicitCastExpr 0x7fffd83bed50 <col:40> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd83bec70 <col:40> 'int' lvalue ParmVar 0x7fffd83be420 'glyph_index' 'int'
|   |     `-UnaryOperator 0x7fffd83becc0 <col:53, col:54> 'stbtt__csctx *' prefix '&'
|   |       `-DeclRefExpr 0x7fffd83bec98 <col:54> 'stbtt__csctx':'stbtt__csctx' lvalue Var 0x7fffd83be798 'c' 'stbtt__csctx':'stbtt__csctx'
|   |-IfStmt 0x7fffd83bef50 <line:2285:4, col:33>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd83beda8 <col:8> 'int *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd83bed80 <col:8> 'int *' lvalue ParmVar 0x7fffd83be498 'x0' 'int *'
|   | |-BinaryOperator 0x7fffd83bef28 <col:13, col:33> 'int' '='
|   | | |-UnaryOperator 0x7fffd83bee00 <col:13, col:14> 'int' lvalue prefix '*'
|   | | | `-ImplicitCastExpr 0x7fffd83bede8 <col:14> 'int *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd83bedc0 <col:14> 'int *' lvalue ParmVar 0x7fffd83be498 'x0' 'int *'
|   | | `-ConditionalOperator 0x7fffd83beef8 <col:19, col:33> 'int'
|   | |   |-ImplicitCastExpr 0x7fffd83beec8 <col:19> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd83bee20 <col:19> 'int' lvalue Var 0x7fffd83bebc0 'r' 'int'
|   | |   |-ImplicitCastExpr 0x7fffd83beee0 <col:23, col:25> 'stbtt_int32':'int' <LValueToRValue>
|   | |   | `-MemberExpr 0x7fffd83bee70 <col:23, col:25> 'stbtt_int32':'int' lvalue .min_x 0x7fffd83a2c50
|   | |   |   `-DeclRefExpr 0x7fffd83bee48 <col:23> 'stbtt__csctx':'stbtt__csctx' lvalue Var 0x7fffd83be798 'c' 'stbtt__csctx':'stbtt__csctx'
|   | |   `-IntegerLiteral 0x7fffd83beea8 <col:33> 'int' 0
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd83bf158 <line:2286:4, col:33>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd83befb0 <col:8> 'int *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd83bef88 <col:8> 'int *' lvalue ParmVar 0x7fffd83be510 'y0' 'int *'
|   | |-BinaryOperator 0x7fffd83bf130 <col:13, col:33> 'int' '='
|   | | |-UnaryOperator 0x7fffd83bf008 <col:13, col:14> 'int' lvalue prefix '*'
|   | | | `-ImplicitCastExpr 0x7fffd83beff0 <col:14> 'int *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd83befc8 <col:14> 'int *' lvalue ParmVar 0x7fffd83be510 'y0' 'int *'
|   | | `-ConditionalOperator 0x7fffd83bf100 <col:19, col:33> 'int'
|   | |   |-ImplicitCastExpr 0x7fffd83bf0d0 <col:19> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd83bf028 <col:19> 'int' lvalue Var 0x7fffd83bebc0 'r' 'int'
|   | |   |-ImplicitCastExpr 0x7fffd83bf0e8 <col:23, col:25> 'stbtt_int32':'int' <LValueToRValue>
|   | |   | `-MemberExpr 0x7fffd83bf078 <col:23, col:25> 'stbtt_int32':'int' lvalue .min_y 0x7fffd83a2d00
|   | |   |   `-DeclRefExpr 0x7fffd83bf050 <col:23> 'stbtt__csctx':'stbtt__csctx' lvalue Var 0x7fffd83be798 'c' 'stbtt__csctx':'stbtt__csctx'
|   | |   `-IntegerLiteral 0x7fffd83bf0b0 <col:33> 'int' 0
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd83bf360 <line:2287:4, col:33>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd83bf1b8 <col:8> 'int *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd83bf190 <col:8> 'int *' lvalue ParmVar 0x7fffd83be588 'x1' 'int *'
|   | |-BinaryOperator 0x7fffd83bf338 <col:13, col:33> 'int' '='
|   | | |-UnaryOperator 0x7fffd83bf210 <col:13, col:14> 'int' lvalue prefix '*'
|   | | | `-ImplicitCastExpr 0x7fffd83bf1f8 <col:14> 'int *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd83bf1d0 <col:14> 'int *' lvalue ParmVar 0x7fffd83be588 'x1' 'int *'
|   | | `-ConditionalOperator 0x7fffd83bf308 <col:19, col:33> 'int'
|   | |   |-ImplicitCastExpr 0x7fffd83bf2d8 <col:19> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd83bf230 <col:19> 'int' lvalue Var 0x7fffd83bebc0 'r' 'int'
|   | |   |-ImplicitCastExpr 0x7fffd83bf2f0 <col:23, col:25> 'stbtt_int32':'int' <LValueToRValue>
|   | |   | `-MemberExpr 0x7fffd83bf280 <col:23, col:25> 'stbtt_int32':'int' lvalue .max_x 0x7fffd83a2ca8
|   | |   |   `-DeclRefExpr 0x7fffd83bf258 <col:23> 'stbtt__csctx':'stbtt__csctx' lvalue Var 0x7fffd83be798 'c' 'stbtt__csctx':'stbtt__csctx'
|   | |   `-IntegerLiteral 0x7fffd83bf2b8 <col:33> 'int' 0
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd83bf568 <line:2288:4, col:33>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd83bf3c0 <col:8> 'int *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd83bf398 <col:8> 'int *' lvalue ParmVar 0x7fffd83be600 'y1' 'int *'
|   | |-BinaryOperator 0x7fffd83bf540 <col:13, col:33> 'int' '='
|   | | |-UnaryOperator 0x7fffd83bf418 <col:13, col:14> 'int' lvalue prefix '*'
|   | | | `-ImplicitCastExpr 0x7fffd83bf400 <col:14> 'int *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd83bf3d8 <col:14> 'int *' lvalue ParmVar 0x7fffd83be600 'y1' 'int *'
|   | | `-ConditionalOperator 0x7fffd83bf510 <col:19, col:33> 'int'
|   | |   |-ImplicitCastExpr 0x7fffd83bf4e0 <col:19> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd83bf438 <col:19> 'int' lvalue Var 0x7fffd83bebc0 'r' 'int'
|   | |   |-ImplicitCastExpr 0x7fffd83bf4f8 <col:23, col:25> 'stbtt_int32':'int' <LValueToRValue>
|   | |   | `-MemberExpr 0x7fffd83bf488 <col:23, col:25> 'stbtt_int32':'int' lvalue .max_y 0x7fffd83a2d58
|   | |   |   `-DeclRefExpr 0x7fffd83bf460 <col:23> 'stbtt__csctx':'stbtt__csctx' lvalue Var 0x7fffd83be798 'c' 'stbtt__csctx':'stbtt__csctx'
|   | |   `-IntegerLiteral 0x7fffd83bf4c0 <col:33> 'int' 0
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x7fffd83bf6a8 <line:2289:4, col:32>
|     `-ConditionalOperator 0x7fffd83bf678 <col:11, col:32> 'int'
|       |-ImplicitCastExpr 0x7fffd83bf648 <col:11> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd83bf5a0 <col:11> 'int' lvalue Var 0x7fffd83bebc0 'r' 'int'
|       |-ImplicitCastExpr 0x7fffd83bf660 <col:15, col:17> 'int' <LValueToRValue>
|       | `-MemberExpr 0x7fffd83bf5f0 <col:15, col:17> 'int' lvalue .num_vertices 0x7fffd83a2e10
|       |   `-DeclRefExpr 0x7fffd83bf5c8 <col:15> 'stbtt__csctx':'stbtt__csctx' lvalue Var 0x7fffd83be798 'c' 'stbtt__csctx':'stbtt__csctx'
|       `-IntegerLiteral 0x7fffd83bf628 <col:32> 'int' 0
|-FunctionDecl 0x7fffd83bf8a8 prev 0x7fffd83522e0 <line:501:19, line:2298:1> line:2292:15 used stbtt_GetGlyphShape 'int (const stbtt_fontinfo *, int, stbtt_vertex **)' extern
| |-ParmVarDecl 0x7fffd83bf718 <col:35, col:57> col:57 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83bf790 <col:63, col:67> col:67 used glyph_index 'int'
| |-ParmVarDecl 0x7fffd83bf808 <col:80, col:95> col:95 used pvertices 'stbtt_vertex **'
| `-CompoundStmt 0x7fffd83bfd30 <line:2293:1, line:2298:1>
|   `-IfStmt 0x7fffd83bfcf8 <line:2294:4, line:2297:65>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-UnaryOperator 0x7fffd83bfa28 <line:2294:8, col:19> 'int' prefix '!'
|     | `-ImplicitCastExpr 0x7fffd83bfa10 <col:9, col:19> 'int' <LValueToRValue>
|     |   `-MemberExpr 0x7fffd83bf9d8 <col:9, col:19> 'const int' lvalue .size 0x7fffd82a74c0
|     |     `-MemberExpr 0x7fffd83bf9a0 <col:9, col:15> 'const stbtt__buf':'const stbtt__buf' lvalue ->cff 0x7fffd834d0d0
|     |       `-ImplicitCastExpr 0x7fffd83bf988 <col:9> 'const stbtt_fontinfo *' <LValueToRValue>
|     |         `-DeclRefExpr 0x7fffd83bf960 <col:9> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83bf718 'info' 'const stbtt_fontinfo *'
|     |-ReturnStmt 0x7fffd83bfb88 <line:2295:7, col:65>
|     | `-CallExpr 0x7fffd83bfb00 <col:14, col:65> 'int'
|     |   |-ImplicitCastExpr 0x7fffd83bfae8 <col:14> 'int (*)(const stbtt_fontinfo *, int, stbtt_vertex **)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x7fffd83bfa48 <col:14> 'int (const stbtt_fontinfo *, int, stbtt_vertex **)' Function 0x7fffd83922e0 'stbtt__GetGlyphShapeTT' 'int (const stbtt_fontinfo *, int, stbtt_vertex **)'
|     |   |-ImplicitCastExpr 0x7fffd83bfb40 <col:37> 'const stbtt_fontinfo *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x7fffd83bfa70 <col:37> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83bf718 'info' 'const stbtt_fontinfo *'
|     |   |-ImplicitCastExpr 0x7fffd83bfb58 <col:43> 'int' <LValueToRValue>
|     |   | `-DeclRefExpr 0x7fffd83bfa98 <col:43> 'int' lvalue ParmVar 0x7fffd83bf790 'glyph_index' 'int'
|     |   `-ImplicitCastExpr 0x7fffd83bfb70 <col:56> 'stbtt_vertex **' <LValueToRValue>
|     |     `-DeclRefExpr 0x7fffd83bfac0 <col:56> 'stbtt_vertex **' lvalue ParmVar 0x7fffd83bf808 'pvertices' 'stbtt_vertex **'
|     `-ReturnStmt 0x7fffd83bfce0 <line:2297:7, col:65>
|       `-CallExpr 0x7fffd83bfc58 <col:14, col:65> 'int'
|         |-ImplicitCastExpr 0x7fffd83bfc40 <col:14> 'int (*)(const stbtt_fontinfo *, int, stbtt_vertex **)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x7fffd83bfba0 <col:14> 'int (const stbtt_fontinfo *, int, stbtt_vertex **)' Function 0x7fffd83bc870 'stbtt__GetGlyphShapeT2' 'int (const stbtt_fontinfo *, int, stbtt_vertex **)'
|         |-ImplicitCastExpr 0x7fffd83bfc98 <col:37> 'const stbtt_fontinfo *' <LValueToRValue>
|         | `-DeclRefExpr 0x7fffd83bfbc8 <col:37> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83bf718 'info' 'const stbtt_fontinfo *'
|         |-ImplicitCastExpr 0x7fffd83bfcb0 <col:43> 'int' <LValueToRValue>
|         | `-DeclRefExpr 0x7fffd83bfbf0 <col:43> 'int' lvalue ParmVar 0x7fffd83bf790 'glyph_index' 'int'
|         `-ImplicitCastExpr 0x7fffd83bfcc8 <col:56> 'stbtt_vertex **' <LValueToRValue>
|           `-DeclRefExpr 0x7fffd83bfc18 <col:56> 'stbtt_vertex **' lvalue ParmVar 0x7fffd83bf808 'pvertices' 'stbtt_vertex **'
|-FunctionDecl 0x7fffd83bff60 prev 0x7fffd83505f0 <line:501:19, line:2310:1> line:2300:16 used stbtt_GetGlyphHMetrics 'void (const stbtt_fontinfo *, int, int *, int *)' extern
| |-ParmVarDecl 0x7fffd83bfd58 <col:39, col:61> col:61 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83bfdd0 <col:67, col:71> col:71 used glyph_index 'int'
| |-ParmVarDecl 0x7fffd83bfe48 <col:84, col:89> col:89 used advanceWidth 'int *'
| |-ParmVarDecl 0x7fffd83bfec0 <col:103, col:108> col:108 used leftSideBearing 'int *'
| `-CompoundStmt 0x7fffd83c1430 <line:2301:1, line:2310:1>
|   |-DeclStmt 0x7fffd83c02b0 <line:2302:4, col:75>
|   | `-VarDecl 0x7fffd83c0030 <col:4, col:74> col:17 used numOfLongHorMetrics 'stbtt_uint16':'unsigned short' cinit
|   |   `-CallExpr 0x7fffd83c0260 <col:39, col:74> 'stbtt_uint16':'unsigned short'
|   |     |-ImplicitCastExpr 0x7fffd83c0248 <col:39> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd83c0090 <col:39> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     `-BinaryOperator 0x7fffd83c0220 <col:48, col:72> 'unsigned char *' '+'
|   |       |-BinaryOperator 0x7fffd83c01d8 <col:48, col:65> 'unsigned char *' '+'
|   |       | |-ImplicitCastExpr 0x7fffd83c01a8 <col:48, col:54> 'unsigned char *' <LValueToRValue>
|   |       | | `-MemberExpr 0x7fffd83c00f8 <col:48, col:54> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   |       | |   `-ImplicitCastExpr 0x7fffd83c00e0 <col:48> 'const stbtt_fontinfo *' <LValueToRValue>
|   |       | |     `-DeclRefExpr 0x7fffd83c00b8 <col:48> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83bfd58 'info' 'const stbtt_fontinfo *'
|   |       | `-ImplicitCastExpr 0x7fffd83c01c0 <col:59, col:65> 'int' <LValueToRValue>
|   |       |   `-MemberExpr 0x7fffd83c0170 <col:59, col:65> 'const int' lvalue ->hhea 0x7fffd834ce18
|   |       |     `-ImplicitCastExpr 0x7fffd83c0158 <col:59> 'const stbtt_fontinfo *' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x7fffd83c0130 <col:59> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83bfd58 'info' 'const stbtt_fontinfo *'
|   |       `-IntegerLiteral 0x7fffd83c0200 <col:72> 'int' 34
|   `-IfStmt 0x7fffd83c13f8 <line:2303:4, line:2309:4>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fffd83c0360 <line:2303:8, col:22> 'int' '<'
|     | |-ImplicitCastExpr 0x7fffd83c0318 <col:8> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fffd83c02c8 <col:8> 'int' lvalue ParmVar 0x7fffd83bfdd0 'glyph_index' 'int'
|     | `-ImplicitCastExpr 0x7fffd83c0348 <col:22> 'int' <IntegralCast>
|     |   `-ImplicitCastExpr 0x7fffd83c0330 <col:22> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|     |     `-DeclRefExpr 0x7fffd83c02f0 <col:22> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83c0030 'numOfLongHorMetrics' 'stbtt_uint16':'unsigned short'
|     |-CompoundStmt 0x7fffd83c0ad0 <col:43, line:2306:4>
|     | |-IfStmt 0x7fffd83c06d0 <line:2304:7, col:95>
|     | | |-<<<NULL>>>
|     | | |-<<<NULL>>>
|     | | |-ImplicitCastExpr 0x7fffd83c03b0 <col:11> 'int *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd83c0388 <col:11> 'int *' lvalue ParmVar 0x7fffd83bfe48 'advanceWidth' 'int *'
|     | | |-BinaryOperator 0x7fffd83c06a8 <col:29, col:95> 'int' '='
|     | | | |-UnaryOperator 0x7fffd83c0408 <col:29, col:30> 'int' lvalue prefix '*'
|     | | | | `-ImplicitCastExpr 0x7fffd83c03f0 <col:30> 'int *' <LValueToRValue>
|     | | | |   `-DeclRefExpr 0x7fffd83c03c8 <col:30> 'int *' lvalue ParmVar 0x7fffd83bfe48 'advanceWidth' 'int *'
|     | | | `-ImplicitCastExpr 0x7fffd83c0690 <col:48, col:95> 'int' <IntegralCast>
|     | | |   `-CallExpr 0x7fffd83c0660 <col:48, col:95> 'stbtt_int16':'short'
|     | | |     |-ImplicitCastExpr 0x7fffd83c0648 <col:48> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|     | | |     | `-DeclRefExpr 0x7fffd83c0428 <col:48> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|     | | |     `-BinaryOperator 0x7fffd83c0620 <col:56, col:84> 'unsigned char *' '+'
|     | | |       |-BinaryOperator 0x7fffd83c0570 <col:56, col:75> 'unsigned char *' '+'
|     | | |       | |-ImplicitCastExpr 0x7fffd83c0540 <col:56, col:62> 'unsigned char *' <LValueToRValue>
|     | | |       | | `-MemberExpr 0x7fffd83c0490 <col:56, col:62> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|     | | |       | |   `-ImplicitCastExpr 0x7fffd83c0478 <col:56> 'const stbtt_fontinfo *' <LValueToRValue>
|     | | |       | |     `-DeclRefExpr 0x7fffd83c0450 <col:56> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83bfd58 'info' 'const stbtt_fontinfo *'
|     | | |       | `-ImplicitCastExpr 0x7fffd83c0558 <col:69, col:75> 'int' <LValueToRValue>
|     | | |       |   `-MemberExpr 0x7fffd83c0508 <col:69, col:75> 'const int' lvalue ->hmtx 0x7fffd834ce78
|     | | |       |     `-ImplicitCastExpr 0x7fffd83c04f0 <col:69> 'const stbtt_fontinfo *' <LValueToRValue>
|     | | |       |       `-DeclRefExpr 0x7fffd83c04c8 <col:69> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83bfd58 'info' 'const stbtt_fontinfo *'
|     | | |       `-BinaryOperator 0x7fffd83c05f8 <col:82, col:84> 'int' '*'
|     | | |         |-IntegerLiteral 0x7fffd83c0598 <col:82> 'int' 4
|     | | |         `-ImplicitCastExpr 0x7fffd83c05e0 <col:84> 'int' <LValueToRValue>
|     | | |           `-DeclRefExpr 0x7fffd83c05b8 <col:84> 'int' lvalue ParmVar 0x7fffd83bfdd0 'glyph_index' 'int'
|     | | `-<<<NULL>>>
|     | `-IfStmt 0x7fffd83c0a98 <line:2305:7, col:99>
|     |   |-<<<NULL>>>
|     |   |-<<<NULL>>>
|     |   |-ImplicitCastExpr 0x7fffd83c0730 <col:11> 'int *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x7fffd83c0708 <col:11> 'int *' lvalue ParmVar 0x7fffd83bfec0 'leftSideBearing' 'int *'
|     |   |-BinaryOperator 0x7fffd83c0a70 <col:29, col:99> 'int' '='
|     |   | |-UnaryOperator 0x7fffd83c0788 <col:29, col:30> 'int' lvalue prefix '*'
|     |   | | `-ImplicitCastExpr 0x7fffd83c0770 <col:30> 'int *' <LValueToRValue>
|     |   | |   `-DeclRefExpr 0x7fffd83c0748 <col:30> 'int *' lvalue ParmVar 0x7fffd83bfec0 'leftSideBearing' 'int *'
|     |   | `-ImplicitCastExpr 0x7fffd83c0a58 <col:48, col:99> 'int' <IntegralCast>
|     |   |   `-CallExpr 0x7fffd83c0a28 <col:48, col:99> 'stbtt_int16':'short'
|     |   |     |-ImplicitCastExpr 0x7fffd83c0a10 <col:48> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|     |   |     | `-DeclRefExpr 0x7fffd83c07a8 <col:48> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|     |   |     `-BinaryOperator 0x7fffd83c09e8 <col:56, col:98> 'unsigned char *' '+'
|     |   |       |-BinaryOperator 0x7fffd83c09a0 <col:56, col:84> 'unsigned char *' '+'
|     |   |       | |-BinaryOperator 0x7fffd83c08f0 <col:56, col:75> 'unsigned char *' '+'
|     |   |       | | |-ImplicitCastExpr 0x7fffd83c08c0 <col:56, col:62> 'unsigned char *' <LValueToRValue>
|     |   |       | | | `-MemberExpr 0x7fffd83c0810 <col:56, col:62> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|     |   |       | | |   `-ImplicitCastExpr 0x7fffd83c07f8 <col:56> 'const stbtt_fontinfo *' <LValueToRValue>
|     |   |       | | |     `-DeclRefExpr 0x7fffd83c07d0 <col:56> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83bfd58 'info' 'const stbtt_fontinfo *'
|     |   |       | | `-ImplicitCastExpr 0x7fffd83c08d8 <col:69, col:75> 'int' <LValueToRValue>
|     |   |       | |   `-MemberExpr 0x7fffd83c0888 <col:69, col:75> 'const int' lvalue ->hmtx 0x7fffd834ce78
|     |   |       | |     `-ImplicitCastExpr 0x7fffd83c0870 <col:69> 'const stbtt_fontinfo *' <LValueToRValue>
|     |   |       | |       `-DeclRefExpr 0x7fffd83c0848 <col:69> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83bfd58 'info' 'const stbtt_fontinfo *'
|     |   |       | `-BinaryOperator 0x7fffd83c0978 <col:82, col:84> 'int' '*'
|     |   |       |   |-IntegerLiteral 0x7fffd83c0918 <col:82> 'int' 4
|     |   |       |   `-ImplicitCastExpr 0x7fffd83c0960 <col:84> 'int' <LValueToRValue>
|     |   |       |     `-DeclRefExpr 0x7fffd83c0938 <col:84> 'int' lvalue ParmVar 0x7fffd83bfdd0 'glyph_index' 'int'
|     |   |       `-IntegerLiteral 0x7fffd83c09c8 <col:98> 'int' 2
|     |   `-<<<NULL>>>
|     `-CompoundStmt 0x7fffd83c13d8 <line:2306:11, line:2309:4>
|       |-IfStmt 0x7fffd83c0eb8 <line:2307:7, col:107>
|       | |-<<<NULL>>>
|       | |-<<<NULL>>>
|       | |-ImplicitCastExpr 0x7fffd83c0b18 <col:11> 'int *' <LValueToRValue>
|       | | `-DeclRefExpr 0x7fffd83c0af0 <col:11> 'int *' lvalue ParmVar 0x7fffd83bfe48 'advanceWidth' 'int *'
|       | |-BinaryOperator 0x7fffd83c0e90 <col:29, col:107> 'int' '='
|       | | |-UnaryOperator 0x7fffd83c0b70 <col:29, col:30> 'int' lvalue prefix '*'
|       | | | `-ImplicitCastExpr 0x7fffd83c0b58 <col:30> 'int *' <LValueToRValue>
|       | | |   `-DeclRefExpr 0x7fffd83c0b30 <col:30> 'int *' lvalue ParmVar 0x7fffd83bfe48 'advanceWidth' 'int *'
|       | | `-ImplicitCastExpr 0x7fffd83c0e78 <col:48, col:107> 'int' <IntegralCast>
|       | |   `-CallExpr 0x7fffd83c0e48 <col:48, col:107> 'stbtt_int16':'short'
|       | |     |-ImplicitCastExpr 0x7fffd83c0e30 <col:48> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|       | |     | `-DeclRefExpr 0x7fffd83c0b90 <col:48> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|       | |     `-BinaryOperator 0x7fffd83c0e08 <col:56, col:106> 'unsigned char *' '+'
|       | |       |-BinaryOperator 0x7fffd83c0cd8 <col:56, col:75> 'unsigned char *' '+'
|       | |       | |-ImplicitCastExpr 0x7fffd83c0ca8 <col:56, col:62> 'unsigned char *' <LValueToRValue>
|       | |       | | `-MemberExpr 0x7fffd83c0bf8 <col:56, col:62> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|       | |       | |   `-ImplicitCastExpr 0x7fffd83c0be0 <col:56> 'const stbtt_fontinfo *' <LValueToRValue>
|       | |       | |     `-DeclRefExpr 0x7fffd83c0bb8 <col:56> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83bfd58 'info' 'const stbtt_fontinfo *'
|       | |       | `-ImplicitCastExpr 0x7fffd83c0cc0 <col:69, col:75> 'int' <LValueToRValue>
|       | |       |   `-MemberExpr 0x7fffd83c0c70 <col:69, col:75> 'const int' lvalue ->hmtx 0x7fffd834ce78
|       | |       |     `-ImplicitCastExpr 0x7fffd83c0c58 <col:69> 'const stbtt_fontinfo *' <LValueToRValue>
|       | |       |       `-DeclRefExpr 0x7fffd83c0c30 <col:69> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83bfd58 'info' 'const stbtt_fontinfo *'
|       | |       `-BinaryOperator 0x7fffd83c0de0 <col:82, col:106> 'int' '*'
|       | |         |-IntegerLiteral 0x7fffd83c0d00 <col:82> 'int' 4
|       | |         `-ParenExpr 0x7fffd83c0dc0 <col:84, col:106> 'int'
|       | |           `-BinaryOperator 0x7fffd83c0d98 <col:85, col:105> 'int' '-'
|       | |             |-ImplicitCastExpr 0x7fffd83c0d80 <col:85> 'int' <IntegralCast>
|       | |             | `-ImplicitCastExpr 0x7fffd83c0d68 <col:85> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|       | |             |   `-DeclRefExpr 0x7fffd83c0d20 <col:85> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83c0030 'numOfLongHorMetrics' 'stbtt_uint16':'unsigned short'
|       | |             `-IntegerLiteral 0x7fffd83c0d48 <col:105> 'int' 1
|       | `-<<<NULL>>>
|       `-IfStmt 0x7fffd83c13a0 <line:2308:7, col:143>
|         |-<<<NULL>>>
|         |-<<<NULL>>>
|         |-ImplicitCastExpr 0x7fffd83c0f18 <col:11> 'int *' <LValueToRValue>
|         | `-DeclRefExpr 0x7fffd83c0ef0 <col:11> 'int *' lvalue ParmVar 0x7fffd83bfec0 'leftSideBearing' 'int *'
|         |-BinaryOperator 0x7fffd83c1378 <col:29, col:143> 'int' '='
|         | |-UnaryOperator 0x7fffd83c0f70 <col:29, col:30> 'int' lvalue prefix '*'
|         | | `-ImplicitCastExpr 0x7fffd83c0f58 <col:30> 'int *' <LValueToRValue>
|         | |   `-DeclRefExpr 0x7fffd83c0f30 <col:30> 'int *' lvalue ParmVar 0x7fffd83bfec0 'leftSideBearing' 'int *'
|         | `-ImplicitCastExpr 0x7fffd83c1360 <col:48, col:143> 'int' <IntegralCast>
|         |   `-CallExpr 0x7fffd83c1330 <col:48, col:143> 'stbtt_int16':'short'
|         |     |-ImplicitCastExpr 0x7fffd83c1318 <col:48> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|         |     | `-DeclRefExpr 0x7fffd83c0f90 <col:48> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|         |     `-BinaryOperator 0x7fffd83c12f0 <col:56, col:142> 'unsigned char *' '+'
|         |       |-BinaryOperator 0x7fffd83c11a0 <col:56, col:84> 'unsigned char *' '+'
|         |       | |-BinaryOperator 0x7fffd83c10d8 <col:56, col:75> 'unsigned char *' '+'
|         |       | | |-ImplicitCastExpr 0x7fffd83c10a8 <col:56, col:62> 'unsigned char *' <LValueToRValue>
|         |       | | | `-MemberExpr 0x7fffd83c0ff8 <col:56, col:62> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|         |       | | |   `-ImplicitCastExpr 0x7fffd83c0fe0 <col:56> 'const stbtt_fontinfo *' <LValueToRValue>
|         |       | | |     `-DeclRefExpr 0x7fffd83c0fb8 <col:56> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83bfd58 'info' 'const stbtt_fontinfo *'
|         |       | | `-ImplicitCastExpr 0x7fffd83c10c0 <col:69, col:75> 'int' <LValueToRValue>
|         |       | |   `-MemberExpr 0x7fffd83c1070 <col:69, col:75> 'const int' lvalue ->hmtx 0x7fffd834ce78
|         |       | |     `-ImplicitCastExpr 0x7fffd83c1058 <col:69> 'const stbtt_fontinfo *' <LValueToRValue>
|         |       | |       `-DeclRefExpr 0x7fffd83c1030 <col:69> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83bfd58 'info' 'const stbtt_fontinfo *'
|         |       | `-BinaryOperator 0x7fffd83c1178 <col:82, col:84> 'int' '*'
|         |       |   |-IntegerLiteral 0x7fffd83c1100 <col:82> 'int' 4
|         |       |   `-ImplicitCastExpr 0x7fffd83c1160 <col:84> 'int' <IntegralCast>
|         |       |     `-ImplicitCastExpr 0x7fffd83c1148 <col:84> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|         |       |       `-DeclRefExpr 0x7fffd83c1120 <col:84> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83c0030 'numOfLongHorMetrics' 'stbtt_uint16':'unsigned short'
|         |       `-BinaryOperator 0x7fffd83c12c8 <col:106, col:142> 'int' '*'
|         |         |-IntegerLiteral 0x7fffd83c11c8 <col:106> 'int' 2
|         |         `-ParenExpr 0x7fffd83c12a8 <col:108, col:142> 'int'
|         |           `-BinaryOperator 0x7fffd83c1280 <col:109, col:123> 'int' '-'
|         |             |-ImplicitCastExpr 0x7fffd83c1238 <col:109> 'int' <LValueToRValue>
|         |             | `-DeclRefExpr 0x7fffd83c11e8 <col:109> 'int' lvalue ParmVar 0x7fffd83bfdd0 'glyph_index' 'int'
|         |             `-ImplicitCastExpr 0x7fffd83c1268 <col:123> 'int' <IntegralCast>
|         |               `-ImplicitCastExpr 0x7fffd83c1250 <col:123> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|         |                 `-DeclRefExpr 0x7fffd83c1210 <col:123> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83c0030 'numOfLongHorMetrics' 'stbtt_uint16':'unsigned short'
|         `-<<<NULL>>>
|-FunctionDecl 0x7fffd83c14f0 prev 0x7fffd8351098 <line:501:19, line:2325:1> line:2312:16 stbtt_GetKerningTableLength 'int (const stbtt_fontinfo *)' extern
| |-ParmVarDecl 0x7fffd83c1460 <col:44, col:66> col:66 used info 'const stbtt_fontinfo *'
| `-CompoundStmt 0x7fffd83c1d40 <line:2313:1, line:2325:1>
|   |-DeclStmt 0x7fffd83c1750 <line:2314:4, col:47>
|   | `-VarDecl 0x7fffd83c15a8 <col:4, col:43> col:17 used data 'stbtt_uint8 *' cinit
|   |   `-BinaryOperator 0x7fffd83c1728 <col:24, col:43> 'unsigned char *' '+'
|   |     |-ImplicitCastExpr 0x7fffd83c16f8 <col:24, col:30> 'unsigned char *' <LValueToRValue>
|   |     | `-MemberExpr 0x7fffd83c1648 <col:24, col:30> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   |     |   `-ImplicitCastExpr 0x7fffd83c1630 <col:24> 'const stbtt_fontinfo *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x7fffd83c1608 <col:24> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83c1460 'info' 'const stbtt_fontinfo *'
|   |     `-ImplicitCastExpr 0x7fffd83c1710 <col:37, col:43> 'int' <LValueToRValue>
|   |       `-MemberExpr 0x7fffd83c16c0 <col:37, col:43> 'const int' lvalue ->kern 0x7fffd834ced8
|   |         `-ImplicitCastExpr 0x7fffd83c16a8 <col:37> 'const stbtt_fontinfo *' <LValueToRValue>
|   |           `-DeclRefExpr 0x7fffd83c1680 <col:37> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83c1460 'info' 'const stbtt_fontinfo *'
|   |-IfStmt 0x7fffd83c1850 <line:2317:4, line:2318:14>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-UnaryOperator 0x7fffd83c17f8 <line:2317:8, col:15> 'int' prefix '!'
|   | | `-ImplicitCastExpr 0x7fffd83c17e0 <col:9, col:15> 'int' <LValueToRValue>
|   | |   `-MemberExpr 0x7fffd83c17a8 <col:9, col:15> 'const int' lvalue ->kern 0x7fffd834ced8
|   | |     `-ImplicitCastExpr 0x7fffd83c1790 <col:9> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x7fffd83c1768 <col:9> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83c1460 'info' 'const stbtt_fontinfo *'
|   | |-ReturnStmt 0x7fffd83c1838 <line:2318:7, col:14>
|   | | `-IntegerLiteral 0x7fffd83c1818 <col:14> 'int' 0
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd83c1a18 <line:2319:4, line:2320:14>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83c19b8 <line:2319:8, col:27> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd83c19a0 <col:8, col:23> 'int' <IntegralCast>
|   | | | `-CallExpr 0x7fffd83c1950 <col:8, col:23> 'stbtt_uint16':'unsigned short'
|   | | |   |-ImplicitCastExpr 0x7fffd83c1938 <col:8> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x7fffd83c1888 <col:8> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   | | |   `-BinaryOperator 0x7fffd83c1910 <col:17, col:22> 'stbtt_uint8 *' '+'
|   | | |     |-ImplicitCastExpr 0x7fffd83c18f8 <col:17> 'stbtt_uint8 *' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x7fffd83c18b0 <col:17> 'stbtt_uint8 *' lvalue Var 0x7fffd83c15a8 'data' 'stbtt_uint8 *'
|   | | |     `-IntegerLiteral 0x7fffd83c18d8 <col:22> 'int' 2
|   | | `-IntegerLiteral 0x7fffd83c1980 <col:27> 'int' 1
|   | |-ReturnStmt 0x7fffd83c1a00 <line:2320:7, col:14>
|   | | `-IntegerLiteral 0x7fffd83c19e0 <col:14> 'int' 0
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd83c1be0 <line:2321:4, line:2322:14>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83c1b80 <line:2321:8, col:28> 'int' '!='
|   | | |-ImplicitCastExpr 0x7fffd83c1b68 <col:8, col:23> 'int' <IntegralCast>
|   | | | `-CallExpr 0x7fffd83c1b18 <col:8, col:23> 'stbtt_uint16':'unsigned short'
|   | | |   |-ImplicitCastExpr 0x7fffd83c1b00 <col:8> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x7fffd83c1a50 <col:8> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   | | |   `-BinaryOperator 0x7fffd83c1ad8 <col:17, col:22> 'stbtt_uint8 *' '+'
|   | | |     |-ImplicitCastExpr 0x7fffd83c1ac0 <col:17> 'stbtt_uint8 *' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x7fffd83c1a78 <col:17> 'stbtt_uint8 *' lvalue Var 0x7fffd83c15a8 'data' 'stbtt_uint8 *'
|   | | |     `-IntegerLiteral 0x7fffd83c1aa0 <col:22> 'int' 8
|   | | `-IntegerLiteral 0x7fffd83c1b48 <col:28> 'int' 1
|   | |-ReturnStmt 0x7fffd83c1bc8 <line:2322:7, col:14>
|   | | `-IntegerLiteral 0x7fffd83c1ba8 <col:14> 'int' 0
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x7fffd83c1d28 <line:2324:4, col:27>
|     `-ImplicitCastExpr 0x7fffd83c1d10 <col:11, col:27> 'int' <IntegralCast>
|       `-CallExpr 0x7fffd83c1ce0 <col:11, col:27> 'stbtt_uint16':'unsigned short'
|         |-ImplicitCastExpr 0x7fffd83c1cc8 <col:11> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x7fffd83c1c18 <col:11> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|         `-BinaryOperator 0x7fffd83c1ca0 <col:20, col:25> 'stbtt_uint8 *' '+'
|           |-ImplicitCastExpr 0x7fffd83c1c88 <col:20> 'stbtt_uint8 *' <LValueToRValue>
|           | `-DeclRefExpr 0x7fffd83c1c40 <col:20> 'stbtt_uint8 *' lvalue Var 0x7fffd83c15a8 'data' 'stbtt_uint8 *'
|           `-IntegerLiteral 0x7fffd83c1c68 <col:25> 'int' 10
|-FunctionDecl 0x7fffd83c1f10 prev 0x7fffd8351438 <line:501:19, line:2352:1> line:2327:15 stbtt_GetKerningTable 'int (const stbtt_fontinfo *, stbtt_kerningentry *, int)' extern
| |-ParmVarDecl 0x7fffd83c1d88 <col:37, col:59> col:59 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83c1df8 <col:65, col:85> col:85 used table 'stbtt_kerningentry *'
| |-ParmVarDecl 0x7fffd83c1e70 <col:92, col:96> col:96 used table_length 'int'
| `-CompoundStmt 0x7fffd83c3528 <line:2328:1, line:2352:1>
|   |-DeclStmt 0x7fffd83c2180 <line:2329:4, col:47>
|   | `-VarDecl 0x7fffd83c1fd8 <col:4, col:43> col:17 used data 'stbtt_uint8 *' cinit
|   |   `-BinaryOperator 0x7fffd83c2158 <col:24, col:43> 'unsigned char *' '+'
|   |     |-ImplicitCastExpr 0x7fffd83c2128 <col:24, col:30> 'unsigned char *' <LValueToRValue>
|   |     | `-MemberExpr 0x7fffd83c2078 <col:24, col:30> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   |     |   `-ImplicitCastExpr 0x7fffd83c2060 <col:24> 'const stbtt_fontinfo *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x7fffd83c2038 <col:24> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83c1d88 'info' 'const stbtt_fontinfo *'
|   |     `-ImplicitCastExpr 0x7fffd83c2140 <col:37, col:43> 'int' <LValueToRValue>
|   |       `-MemberExpr 0x7fffd83c20f0 <col:37, col:43> 'const int' lvalue ->kern 0x7fffd834ced8
|   |         `-ImplicitCastExpr 0x7fffd83c20d8 <col:37> 'const stbtt_fontinfo *' <LValueToRValue>
|   |           `-DeclRefExpr 0x7fffd83c20b0 <col:37> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83c1d88 'info' 'const stbtt_fontinfo *'
|   |-DeclStmt 0x7fffd83c22c0 <line:2330:4, col:17>
|   | |-VarDecl 0x7fffd83c21b0 <col:4, col:8> col:8 used k 'int'
|   | `-VarDecl 0x7fffd83c2228 <col:4, col:11> col:11 used length 'int'
|   |-IfStmt 0x7fffd83c23c0 <line:2333:4, line:2334:14>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-UnaryOperator 0x7fffd83c2368 <line:2333:8, col:15> 'int' prefix '!'
|   | | `-ImplicitCastExpr 0x7fffd83c2350 <col:9, col:15> 'int' <LValueToRValue>
|   | |   `-MemberExpr 0x7fffd83c2318 <col:9, col:15> 'const int' lvalue ->kern 0x7fffd834ced8
|   | |     `-ImplicitCastExpr 0x7fffd83c2300 <col:9> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x7fffd83c22d8 <col:9> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83c1d88 'info' 'const stbtt_fontinfo *'
|   | |-ReturnStmt 0x7fffd83c23a8 <line:2334:7, col:14>
|   | | `-IntegerLiteral 0x7fffd83c2388 <col:14> 'int' 0
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd83c2588 <line:2335:4, line:2336:14>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83c2528 <line:2335:8, col:27> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd83c2510 <col:8, col:23> 'int' <IntegralCast>
|   | | | `-CallExpr 0x7fffd83c24c0 <col:8, col:23> 'stbtt_uint16':'unsigned short'
|   | | |   |-ImplicitCastExpr 0x7fffd83c24a8 <col:8> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x7fffd83c23f8 <col:8> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   | | |   `-BinaryOperator 0x7fffd83c2480 <col:17, col:22> 'stbtt_uint8 *' '+'
|   | | |     |-ImplicitCastExpr 0x7fffd83c2468 <col:17> 'stbtt_uint8 *' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x7fffd83c2420 <col:17> 'stbtt_uint8 *' lvalue Var 0x7fffd83c1fd8 'data' 'stbtt_uint8 *'
|   | | |     `-IntegerLiteral 0x7fffd83c2448 <col:22> 'int' 2
|   | | `-IntegerLiteral 0x7fffd83c24f0 <col:27> 'int' 1
|   | |-ReturnStmt 0x7fffd83c2570 <line:2336:7, col:14>
|   | | `-IntegerLiteral 0x7fffd83c2550 <col:14> 'int' 0
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd83c2750 <line:2337:4, line:2338:14>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83c26f0 <line:2337:8, col:28> 'int' '!='
|   | | |-ImplicitCastExpr 0x7fffd83c26d8 <col:8, col:23> 'int' <IntegralCast>
|   | | | `-CallExpr 0x7fffd83c2688 <col:8, col:23> 'stbtt_uint16':'unsigned short'
|   | | |   |-ImplicitCastExpr 0x7fffd83c2670 <col:8> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x7fffd83c25c0 <col:8> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   | | |   `-BinaryOperator 0x7fffd83c2648 <col:17, col:22> 'stbtt_uint8 *' '+'
|   | | |     |-ImplicitCastExpr 0x7fffd83c2630 <col:17> 'stbtt_uint8 *' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x7fffd83c25e8 <col:17> 'stbtt_uint8 *' lvalue Var 0x7fffd83c1fd8 'data' 'stbtt_uint8 *'
|   | | |     `-IntegerLiteral 0x7fffd83c2610 <col:22> 'int' 8
|   | | `-IntegerLiteral 0x7fffd83c26b8 <col:28> 'int' 1
|   | |-ReturnStmt 0x7fffd83c2738 <line:2338:7, col:14>
|   | | `-IntegerLiteral 0x7fffd83c2718 <col:14> 'int' 0
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x7fffd83c28c0 <line:2340:4, col:29> 'int' '='
|   | |-DeclRefExpr 0x7fffd83c2788 <col:4> 'int' lvalue Var 0x7fffd83c2228 'length' 'int'
|   | `-ImplicitCastExpr 0x7fffd83c28a8 <col:13, col:29> 'int' <IntegralCast>
|   |   `-CallExpr 0x7fffd83c2878 <col:13, col:29> 'stbtt_uint16':'unsigned short'
|   |     |-ImplicitCastExpr 0x7fffd83c2860 <col:13> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd83c27b0 <col:13> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     `-BinaryOperator 0x7fffd83c2838 <col:22, col:27> 'stbtt_uint8 *' '+'
|   |       |-ImplicitCastExpr 0x7fffd83c2820 <col:22> 'stbtt_uint8 *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x7fffd83c27d8 <col:22> 'stbtt_uint8 *' lvalue Var 0x7fffd83c1fd8 'data' 'stbtt_uint8 *'
|   |       `-IntegerLiteral 0x7fffd83c2800 <col:27> 'int' 10
|   |-IfStmt 0x7fffd83c2a20 <line:2341:4, line:2342:16>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83c2968 <line:2341:8, col:23> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd83c2938 <col:8> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd83c28e8 <col:8> 'int' lvalue ParmVar 0x7fffd83c1e70 'table_length' 'int'
|   | | `-ImplicitCastExpr 0x7fffd83c2950 <col:23> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83c2910 <col:23> 'int' lvalue Var 0x7fffd83c2228 'length' 'int'
|   | |-BinaryOperator 0x7fffd83c29f8 <line:2342:7, col:16> 'int' '='
|   | | |-DeclRefExpr 0x7fffd83c2990 <col:7> 'int' lvalue Var 0x7fffd83c2228 'length' 'int'
|   | | `-ImplicitCastExpr 0x7fffd83c29e0 <col:16> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83c29b8 <col:16> 'int' lvalue ParmVar 0x7fffd83c1e70 'table_length' 'int'
|   | `-<<<NULL>>>
|   |-ForStmt 0x7fffd83c3498 <line:2344:4, line:2349:4>
|   | |-BinaryOperator 0x7fffd83c2aa0 <line:2344:9, col:13> 'int' '='
|   | | |-DeclRefExpr 0x7fffd83c2a58 <col:9> 'int' lvalue Var 0x7fffd83c21b0 'k' 'int'
|   | | `-IntegerLiteral 0x7fffd83c2a80 <col:13> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83c2b48 <col:16, col:20> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd83c2b18 <col:16> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd83c2ac8 <col:16> 'int' lvalue Var 0x7fffd83c21b0 'k' 'int'
|   | | `-ImplicitCastExpr 0x7fffd83c2b30 <col:20> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83c2af0 <col:20> 'int' lvalue Var 0x7fffd83c2228 'length' 'int'
|   | |-UnaryOperator 0x7fffd83c2b98 <col:28, col:29> 'int' postfix '++'
|   | | `-DeclRefExpr 0x7fffd83c2b70 <col:28> 'int' lvalue Var 0x7fffd83c21b0 'k' 'int'
|   | `-CompoundStmt 0x7fffd83c3470 <line:2345:4, line:2349:4>
|   |   |-BinaryOperator 0x7fffd83c2e78 <line:2346:7, col:47> 'int' '='
|   |   | |-MemberExpr 0x7fffd83c2c60 <col:7, col:16> 'int' lvalue .glyph1 0x7fffd8350db8
|   |   | | `-ArraySubscriptExpr 0x7fffd83c2c38 <col:7, col:14> 'stbtt_kerningentry':'struct stbtt_kerningentry' lvalue
|   |   | |   |-ImplicitCastExpr 0x7fffd83c2c08 <col:7> 'stbtt_kerningentry *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x7fffd83c2bb8 <col:7> 'stbtt_kerningentry *' lvalue ParmVar 0x7fffd83c1df8 'table' 'stbtt_kerningentry *'
|   |   | |   `-ImplicitCastExpr 0x7fffd83c2c20 <col:13> 'int' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x7fffd83c2be0 <col:13> 'int' lvalue Var 0x7fffd83c21b0 'k' 'int'
|   |   | `-ImplicitCastExpr 0x7fffd83c2e60 <col:25, col:47> 'int' <IntegralCast>
|   |   |   `-CallExpr 0x7fffd83c2e30 <col:25, col:47> 'stbtt_uint16':'unsigned short'
|   |   |     |-ImplicitCastExpr 0x7fffd83c2e18 <col:25> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x7fffd83c2c98 <col:25> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |   |     `-BinaryOperator 0x7fffd83c2df0 <col:34, col:46> 'stbtt_uint8 *' '+'
|   |   |       |-BinaryOperator 0x7fffd83c2d20 <col:34, col:39> 'stbtt_uint8 *' '+'
|   |   |       | |-ImplicitCastExpr 0x7fffd83c2d08 <col:34> 'stbtt_uint8 *' <LValueToRValue>
|   |   |       | | `-DeclRefExpr 0x7fffd83c2cc0 <col:34> 'stbtt_uint8 *' lvalue Var 0x7fffd83c1fd8 'data' 'stbtt_uint8 *'
|   |   |       | `-IntegerLiteral 0x7fffd83c2ce8 <col:39> 'int' 18
|   |   |       `-ParenExpr 0x7fffd83c2dd0 <col:42, col:46> 'int'
|   |   |         `-BinaryOperator 0x7fffd83c2da8 <col:43, col:45> 'int' '*'
|   |   |           |-ImplicitCastExpr 0x7fffd83c2d90 <col:43> 'int' <LValueToRValue>
|   |   |           | `-DeclRefExpr 0x7fffd83c2d48 <col:43> 'int' lvalue Var 0x7fffd83c21b0 'k' 'int'
|   |   |           `-IntegerLiteral 0x7fffd83c2d70 <col:45> 'int' 6
|   |   |-BinaryOperator 0x7fffd83c3160 <line:2347:7, col:47> 'int' '='
|   |   | |-MemberExpr 0x7fffd83c2f48 <col:7, col:16> 'int' lvalue .glyph2 0x7fffd8350e18
|   |   | | `-ArraySubscriptExpr 0x7fffd83c2f20 <col:7, col:14> 'stbtt_kerningentry':'struct stbtt_kerningentry' lvalue
|   |   | |   |-ImplicitCastExpr 0x7fffd83c2ef0 <col:7> 'stbtt_kerningentry *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x7fffd83c2ea0 <col:7> 'stbtt_kerningentry *' lvalue ParmVar 0x7fffd83c1df8 'table' 'stbtt_kerningentry *'
|   |   | |   `-ImplicitCastExpr 0x7fffd83c2f08 <col:13> 'int' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x7fffd83c2ec8 <col:13> 'int' lvalue Var 0x7fffd83c21b0 'k' 'int'
|   |   | `-ImplicitCastExpr 0x7fffd83c3148 <col:25, col:47> 'int' <IntegralCast>
|   |   |   `-CallExpr 0x7fffd83c3118 <col:25, col:47> 'stbtt_uint16':'unsigned short'
|   |   |     |-ImplicitCastExpr 0x7fffd83c3100 <col:25> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x7fffd83c2f80 <col:25> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |   |     `-BinaryOperator 0x7fffd83c30d8 <col:34, col:46> 'stbtt_uint8 *' '+'
|   |   |       |-BinaryOperator 0x7fffd83c3008 <col:34, col:39> 'stbtt_uint8 *' '+'
|   |   |       | |-ImplicitCastExpr 0x7fffd83c2ff0 <col:34> 'stbtt_uint8 *' <LValueToRValue>
|   |   |       | | `-DeclRefExpr 0x7fffd83c2fa8 <col:34> 'stbtt_uint8 *' lvalue Var 0x7fffd83c1fd8 'data' 'stbtt_uint8 *'
|   |   |       | `-IntegerLiteral 0x7fffd83c2fd0 <col:39> 'int' 20
|   |   |       `-ParenExpr 0x7fffd83c30b8 <col:42, col:46> 'int'
|   |   |         `-BinaryOperator 0x7fffd83c3090 <col:43, col:45> 'int' '*'
|   |   |           |-ImplicitCastExpr 0x7fffd83c3078 <col:43> 'int' <LValueToRValue>
|   |   |           | `-DeclRefExpr 0x7fffd83c3030 <col:43> 'int' lvalue Var 0x7fffd83c21b0 'k' 'int'
|   |   |           `-IntegerLiteral 0x7fffd83c3058 <col:45> 'int' 6
|   |   `-BinaryOperator 0x7fffd83c3448 <line:2348:7, col:47> 'int' '='
|   |     |-MemberExpr 0x7fffd83c3230 <col:7, col:16> 'int' lvalue .advance 0x7fffd8350e78
|   |     | `-ArraySubscriptExpr 0x7fffd83c3208 <col:7, col:14> 'stbtt_kerningentry':'struct stbtt_kerningentry' lvalue
|   |     |   |-ImplicitCastExpr 0x7fffd83c31d8 <col:7> 'stbtt_kerningentry *' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x7fffd83c3188 <col:7> 'stbtt_kerningentry *' lvalue ParmVar 0x7fffd83c1df8 'table' 'stbtt_kerningentry *'
|   |     |   `-ImplicitCastExpr 0x7fffd83c31f0 <col:13> 'int' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x7fffd83c31b0 <col:13> 'int' lvalue Var 0x7fffd83c21b0 'k' 'int'
|   |     `-ImplicitCastExpr 0x7fffd83c3430 <col:26, col:47> 'int' <IntegralCast>
|   |       `-CallExpr 0x7fffd83c3400 <col:26, col:47> 'stbtt_int16':'short'
|   |         |-ImplicitCastExpr 0x7fffd83c33e8 <col:26> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x7fffd83c3268 <col:26> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |         `-BinaryOperator 0x7fffd83c33c0 <col:34, col:46> 'stbtt_uint8 *' '+'
|   |           |-BinaryOperator 0x7fffd83c32f0 <col:34, col:39> 'stbtt_uint8 *' '+'
|   |           | |-ImplicitCastExpr 0x7fffd83c32d8 <col:34> 'stbtt_uint8 *' <LValueToRValue>
|   |           | | `-DeclRefExpr 0x7fffd83c3290 <col:34> 'stbtt_uint8 *' lvalue Var 0x7fffd83c1fd8 'data' 'stbtt_uint8 *'
|   |           | `-IntegerLiteral 0x7fffd83c32b8 <col:39> 'int' 22
|   |           `-ParenExpr 0x7fffd83c33a0 <col:42, col:46> 'int'
|   |             `-BinaryOperator 0x7fffd83c3378 <col:43, col:45> 'int' '*'
|   |               |-ImplicitCastExpr 0x7fffd83c3360 <col:43> 'int' <LValueToRValue>
|   |               | `-DeclRefExpr 0x7fffd83c3318 <col:43> 'int' lvalue Var 0x7fffd83c21b0 'k' 'int'
|   |               `-IntegerLiteral 0x7fffd83c3340 <col:45> 'int' 6
|   `-ReturnStmt 0x7fffd83c3510 <line:2351:4, col:11>
|     `-ImplicitCastExpr 0x7fffd83c34f8 <col:11> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd83c34d0 <col:11> 'int' lvalue Var 0x7fffd83c2228 'length' 'int'
|-FunctionDecl 0x7fffd83c3720 <line:2354:1, line:2382:1> line:2354:13 used stbtt__GetGlyphKernInfoAdvance 'int (const stbtt_fontinfo *, int, int)' static
| |-ParmVarDecl 0x7fffd83c3590 <col:44, col:66> col:66 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83c3608 <col:72, col:76> col:76 used glyph1 'int'
| |-ParmVarDecl 0x7fffd83c3680 <col:84, col:88> col:88 used glyph2 'int'
| `-CompoundStmt 0x7fffd83c4e98 <line:2355:1, line:2382:1>
|   |-DeclStmt 0x7fffd83c3990 <line:2356:4, col:47>
|   | `-VarDecl 0x7fffd83c37e8 <col:4, col:43> col:17 used data 'stbtt_uint8 *' cinit
|   |   `-BinaryOperator 0x7fffd83c3968 <col:24, col:43> 'unsigned char *' '+'
|   |     |-ImplicitCastExpr 0x7fffd83c3938 <col:24, col:30> 'unsigned char *' <LValueToRValue>
|   |     | `-MemberExpr 0x7fffd83c3888 <col:24, col:30> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   |     |   `-ImplicitCastExpr 0x7fffd83c3870 <col:24> 'const stbtt_fontinfo *' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x7fffd83c3848 <col:24> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83c3590 'info' 'const stbtt_fontinfo *'
|   |     `-ImplicitCastExpr 0x7fffd83c3950 <col:37, col:43> 'int' <LValueToRValue>
|   |       `-MemberExpr 0x7fffd83c3900 <col:37, col:43> 'const int' lvalue ->kern 0x7fffd834ced8
|   |         `-ImplicitCastExpr 0x7fffd83c38e8 <col:37> 'const stbtt_fontinfo *' <LValueToRValue>
|   |           `-DeclRefExpr 0x7fffd83c38c0 <col:37> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83c3590 'info' 'const stbtt_fontinfo *'
|   |-DeclStmt 0x7fffd83c3aa0 <line:2357:4, col:30>
|   | |-VarDecl 0x7fffd83c39b8 <col:4, col:17> col:17 used needle 'stbtt_uint32':'unsigned int'
|   | `-VarDecl 0x7fffd83c3a28 <col:4, col:25> col:25 used straw 'stbtt_uint32':'unsigned int'
|   |-DeclStmt 0x7fffd83c3c40 <line:2358:4, col:15>
|   | |-VarDecl 0x7fffd83c3ad0 <col:4, col:8> col:8 used l 'int'
|   | |-VarDecl 0x7fffd83c3b48 <col:4, col:11> col:11 used r 'int'
|   | `-VarDecl 0x7fffd83c3bc0 <col:4, col:14> col:14 used m 'int'
|   |-IfStmt 0x7fffd83c3d40 <line:2361:4, line:2362:14>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-UnaryOperator 0x7fffd83c3ce8 <line:2361:8, col:15> 'int' prefix '!'
|   | | `-ImplicitCastExpr 0x7fffd83c3cd0 <col:9, col:15> 'int' <LValueToRValue>
|   | |   `-MemberExpr 0x7fffd83c3c98 <col:9, col:15> 'const int' lvalue ->kern 0x7fffd834ced8
|   | |     `-ImplicitCastExpr 0x7fffd83c3c80 <col:9> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x7fffd83c3c58 <col:9> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83c3590 'info' 'const stbtt_fontinfo *'
|   | |-ReturnStmt 0x7fffd83c3d28 <line:2362:7, col:14>
|   | | `-IntegerLiteral 0x7fffd83c3d08 <col:14> 'int' 0
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd83c3f08 <line:2363:4, line:2364:14>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83c3ea8 <line:2363:8, col:27> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd83c3e90 <col:8, col:23> 'int' <IntegralCast>
|   | | | `-CallExpr 0x7fffd83c3e40 <col:8, col:23> 'stbtt_uint16':'unsigned short'
|   | | |   |-ImplicitCastExpr 0x7fffd83c3e28 <col:8> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x7fffd83c3d78 <col:8> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   | | |   `-BinaryOperator 0x7fffd83c3e00 <col:17, col:22> 'stbtt_uint8 *' '+'
|   | | |     |-ImplicitCastExpr 0x7fffd83c3de8 <col:17> 'stbtt_uint8 *' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x7fffd83c3da0 <col:17> 'stbtt_uint8 *' lvalue Var 0x7fffd83c37e8 'data' 'stbtt_uint8 *'
|   | | |     `-IntegerLiteral 0x7fffd83c3dc8 <col:22> 'int' 2
|   | | `-IntegerLiteral 0x7fffd83c3e70 <col:27> 'int' 1
|   | |-ReturnStmt 0x7fffd83c3ef0 <line:2364:7, col:14>
|   | | `-IntegerLiteral 0x7fffd83c3ed0 <col:14> 'int' 0
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd83c40d0 <line:2365:4, line:2366:14>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83c4070 <line:2365:8, col:28> 'int' '!='
|   | | |-ImplicitCastExpr 0x7fffd83c4058 <col:8, col:23> 'int' <IntegralCast>
|   | | | `-CallExpr 0x7fffd83c4008 <col:8, col:23> 'stbtt_uint16':'unsigned short'
|   | | |   |-ImplicitCastExpr 0x7fffd83c3ff0 <col:8> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x7fffd83c3f40 <col:8> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   | | |   `-BinaryOperator 0x7fffd83c3fc8 <col:17, col:22> 'stbtt_uint8 *' '+'
|   | | |     |-ImplicitCastExpr 0x7fffd83c3fb0 <col:17> 'stbtt_uint8 *' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x7fffd83c3f68 <col:17> 'stbtt_uint8 *' lvalue Var 0x7fffd83c37e8 'data' 'stbtt_uint8 *'
|   | | |     `-IntegerLiteral 0x7fffd83c3f90 <col:22> 'int' 8
|   | | `-IntegerLiteral 0x7fffd83c4038 <col:28> 'int' 1
|   | |-ReturnStmt 0x7fffd83c40b8 <line:2366:7, col:14>
|   | | `-IntegerLiteral 0x7fffd83c4098 <col:14> 'int' 0
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x7fffd83c4150 <line:2368:4, col:8> 'int' '='
|   | |-DeclRefExpr 0x7fffd83c4108 <col:4> 'int' lvalue Var 0x7fffd83c3ad0 'l' 'int'
|   | `-IntegerLiteral 0x7fffd83c4130 <col:8> 'int' 0
|   |-BinaryOperator 0x7fffd83c4310 <line:2369:4, col:28> 'int' '='
|   | |-DeclRefExpr 0x7fffd83c4178 <col:4> 'int' lvalue Var 0x7fffd83c3b48 'r' 'int'
|   | `-BinaryOperator 0x7fffd83c42e8 <col:8, col:28> 'int' '-'
|   |   |-ImplicitCastExpr 0x7fffd83c42d0 <col:8, col:24> 'int' <IntegralCast>
|   |   | `-CallExpr 0x7fffd83c4268 <col:8, col:24> 'stbtt_uint16':'unsigned short'
|   |   |   |-ImplicitCastExpr 0x7fffd83c4250 <col:8> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x7fffd83c41a0 <col:8> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |   |   `-BinaryOperator 0x7fffd83c4228 <col:17, col:22> 'stbtt_uint8 *' '+'
|   |   |     |-ImplicitCastExpr 0x7fffd83c4210 <col:17> 'stbtt_uint8 *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x7fffd83c41c8 <col:17> 'stbtt_uint8 *' lvalue Var 0x7fffd83c37e8 'data' 'stbtt_uint8 *'
|   |   |     `-IntegerLiteral 0x7fffd83c41f0 <col:22> 'int' 10
|   |   `-IntegerLiteral 0x7fffd83c4298 <col:28> 'int' 1
|   |-BinaryOperator 0x7fffd83c4468 <line:2370:4, col:28> 'stbtt_uint32':'unsigned int' '='
|   | |-DeclRefExpr 0x7fffd83c4338 <col:4> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd83c39b8 'needle' 'stbtt_uint32':'unsigned int'
|   | `-ImplicitCastExpr 0x7fffd83c4450 <col:13, col:28> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |   `-BinaryOperator 0x7fffd83c4428 <col:13, col:28> 'int' '|'
|   |     |-BinaryOperator 0x7fffd83c43c0 <col:13, col:23> 'int' '<<'
|   |     | |-ImplicitCastExpr 0x7fffd83c43a8 <col:13> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x7fffd83c4360 <col:13> 'int' lvalue ParmVar 0x7fffd83c3608 'glyph1' 'int'
|   |     | `-IntegerLiteral 0x7fffd83c4388 <col:23> 'int' 16
|   |     `-ImplicitCastExpr 0x7fffd83c4410 <col:28> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd83c43e8 <col:28> 'int' lvalue ParmVar 0x7fffd83c3680 'glyph2' 'int'
|   |-WhileStmt 0x7fffd83c4e40 <line:2371:4, line:2380:4>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83c4510 <line:2371:11, col:16> 'int' '<='
|   | | |-ImplicitCastExpr 0x7fffd83c44e0 <col:11> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd83c4490 <col:11> 'int' lvalue Var 0x7fffd83c3ad0 'l' 'int'
|   | | `-ImplicitCastExpr 0x7fffd83c44f8 <col:16> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83c44b8 <col:16> 'int' lvalue Var 0x7fffd83c3b48 'r' 'int'
|   | `-CompoundStmt 0x7fffd83c4e18 <col:19, line:2380:4>
|   |   |-BinaryOperator 0x7fffd83c4670 <line:2372:7, col:22> 'int' '='
|   |   | |-DeclRefExpr 0x7fffd83c4538 <col:7> 'int' lvalue Var 0x7fffd83c3bc0 'm' 'int'
|   |   | `-BinaryOperator 0x7fffd83c4648 <col:11, col:22> 'int' '>>'
|   |   |   |-ParenExpr 0x7fffd83c4608 <col:11, col:17> 'int'
|   |   |   | `-BinaryOperator 0x7fffd83c45e0 <col:12, col:16> 'int' '+'
|   |   |   |   |-ImplicitCastExpr 0x7fffd83c45b0 <col:12> 'int' <LValueToRValue>
|   |   |   |   | `-DeclRefExpr 0x7fffd83c4560 <col:12> 'int' lvalue Var 0x7fffd83c3ad0 'l' 'int'
|   |   |   |   `-ImplicitCastExpr 0x7fffd83c45c8 <col:16> 'int' <LValueToRValue>
|   |   |   |     `-DeclRefExpr 0x7fffd83c4588 <col:16> 'int' lvalue Var 0x7fffd83c3b48 'r' 'int'
|   |   |   `-IntegerLiteral 0x7fffd83c4628 <col:22> 'int' 1
|   |   |-BinaryOperator 0x7fffd83c4888 <line:2373:7, col:36> 'stbtt_uint32':'unsigned int' '='
|   |   | |-DeclRefExpr 0x7fffd83c4698 <col:7> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd83c3a28 'straw' 'stbtt_uint32':'unsigned int'
|   |   | `-CallExpr 0x7fffd83c4858 <col:15, col:36> 'stbtt_uint32':'unsigned int'
|   |   |   |-ImplicitCastExpr 0x7fffd83c4840 <col:15> 'stbtt_uint32 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x7fffd83c46c0 <col:15> 'stbtt_uint32 (stbtt_uint8 *)' Function 0x7fffd83712a0 'ttULONG' 'stbtt_uint32 (stbtt_uint8 *)'
|   |   |   `-BinaryOperator 0x7fffd83c4818 <col:23, col:35> 'stbtt_uint8 *' '+'
|   |   |     |-BinaryOperator 0x7fffd83c4748 <col:23, col:28> 'stbtt_uint8 *' '+'
|   |   |     | |-ImplicitCastExpr 0x7fffd83c4730 <col:23> 'stbtt_uint8 *' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x7fffd83c46e8 <col:23> 'stbtt_uint8 *' lvalue Var 0x7fffd83c37e8 'data' 'stbtt_uint8 *'
|   |   |     | `-IntegerLiteral 0x7fffd83c4710 <col:28> 'int' 18
|   |   |     `-ParenExpr 0x7fffd83c47f8 <col:31, col:35> 'int'
|   |   |       `-BinaryOperator 0x7fffd83c47d0 <col:32, col:34> 'int' '*'
|   |   |         |-ImplicitCastExpr 0x7fffd83c47b8 <col:32> 'int' <LValueToRValue>
|   |   |         | `-DeclRefExpr 0x7fffd83c4770 <col:32> 'int' lvalue Var 0x7fffd83c3bc0 'm' 'int'
|   |   |         `-IntegerLiteral 0x7fffd83c4798 <col:34> 'int' 6
|   |   `-IfStmt 0x7fffd83c4de0 <line:2374:7, line:2379:38>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x7fffd83c4930 <line:2374:11, col:20> 'int' '<'
|   |     | |-ImplicitCastExpr 0x7fffd83c4900 <col:11> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x7fffd83c48b0 <col:11> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd83c39b8 'needle' 'stbtt_uint32':'unsigned int'
|   |     | `-ImplicitCastExpr 0x7fffd83c4918 <col:20> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fffd83c48d8 <col:20> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd83c3a28 'straw' 'stbtt_uint32':'unsigned int'
|   |     |-BinaryOperator 0x7fffd83c4a08 <line:2375:10, col:18> 'int' '='
|   |     | |-DeclRefExpr 0x7fffd83c4958 <col:10> 'int' lvalue Var 0x7fffd83c3b48 'r' 'int'
|   |     | `-BinaryOperator 0x7fffd83c49e0 <col:14, col:18> 'int' '-'
|   |     |   |-ImplicitCastExpr 0x7fffd83c49c8 <col:14> 'int' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x7fffd83c4980 <col:14> 'int' lvalue Var 0x7fffd83c3bc0 'm' 'int'
|   |     |   `-IntegerLiteral 0x7fffd83c49a8 <col:18> 'int' 1
|   |     `-IfStmt 0x7fffd83c4da8 <line:2376:12, line:2379:38>
|   |       |-<<<NULL>>>
|   |       |-<<<NULL>>>
|   |       |-BinaryOperator 0x7fffd83c4ab0 <line:2376:16, col:25> 'int' '>'
|   |       | |-ImplicitCastExpr 0x7fffd83c4a80 <col:16> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x7fffd83c4a30 <col:16> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd83c39b8 'needle' 'stbtt_uint32':'unsigned int'
|   |       | `-ImplicitCastExpr 0x7fffd83c4a98 <col:25> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x7fffd83c4a58 <col:25> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd83c3a28 'straw' 'stbtt_uint32':'unsigned int'
|   |       |-BinaryOperator 0x7fffd83c4b88 <line:2377:10, col:18> 'int' '='
|   |       | |-DeclRefExpr 0x7fffd83c4ad8 <col:10> 'int' lvalue Var 0x7fffd83c3ad0 'l' 'int'
|   |       | `-BinaryOperator 0x7fffd83c4b60 <col:14, col:18> 'int' '+'
|   |       |   |-ImplicitCastExpr 0x7fffd83c4b48 <col:14> 'int' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x7fffd83c4b00 <col:14> 'int' lvalue Var 0x7fffd83c3bc0 'm' 'int'
|   |       |   `-IntegerLiteral 0x7fffd83c4b28 <col:18> 'int' 1
|   |       `-ReturnStmt 0x7fffd83c4d90 <line:2379:10, col:38>
|   |         `-ImplicitCastExpr 0x7fffd83c4d78 <col:17, col:38> 'int' <IntegralCast>
|   |           `-CallExpr 0x7fffd83c4d48 <col:17, col:38> 'stbtt_int16':'short'
|   |             |-ImplicitCastExpr 0x7fffd83c4d30 <col:17> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |             | `-DeclRefExpr 0x7fffd83c4bb0 <col:17> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |             `-BinaryOperator 0x7fffd83c4d08 <col:25, col:37> 'stbtt_uint8 *' '+'
|   |               |-BinaryOperator 0x7fffd83c4c38 <col:25, col:30> 'stbtt_uint8 *' '+'
|   |               | |-ImplicitCastExpr 0x7fffd83c4c20 <col:25> 'stbtt_uint8 *' <LValueToRValue>
|   |               | | `-DeclRefExpr 0x7fffd83c4bd8 <col:25> 'stbtt_uint8 *' lvalue Var 0x7fffd83c37e8 'data' 'stbtt_uint8 *'
|   |               | `-IntegerLiteral 0x7fffd83c4c00 <col:30> 'int' 22
|   |               `-ParenExpr 0x7fffd83c4ce8 <col:33, col:37> 'int'
|   |                 `-BinaryOperator 0x7fffd83c4cc0 <col:34, col:36> 'int' '*'
|   |                   |-ImplicitCastExpr 0x7fffd83c4ca8 <col:34> 'int' <LValueToRValue>
|   |                   | `-DeclRefExpr 0x7fffd83c4c60 <col:34> 'int' lvalue Var 0x7fffd83c3bc0 'm' 'int'
|   |                   `-IntegerLiteral 0x7fffd83c4c88 <col:36> 'int' 6
|   `-ReturnStmt 0x7fffd83c4e80 <line:2381:4, col:11>
|     `-IntegerLiteral 0x7fffd83c4e60 <col:11> 'int' 0
|-FunctionDecl 0x7fffd83c5060 <line:2384:1, line:2441:1> line:2384:21 used stbtt__GetCoverageIndex 'stbtt_int32 (stbtt_uint8 *, int)' static
| |-ParmVarDecl 0x7fffd83c4f10 <col:45, col:58> col:58 used coverageTable 'stbtt_uint8 *'
| |-ParmVarDecl 0x7fffd83c4f88 <col:73, col:77> col:77 used glyph 'int'
| `-CompoundStmt 0x7fffd83c7cb8 <line:2385:1, line:2441:1>
|   |-DeclStmt 0x7fffd83c5230 <line:2386:5, col:58>
|   | `-VarDecl 0x7fffd83c5120 <col:5, col:57> col:18 used coverageFormat 'stbtt_uint16':'unsigned short' cinit
|   |   `-CallExpr 0x7fffd83c51e8 <col:35, col:57> 'stbtt_uint16':'unsigned short'
|   |     |-ImplicitCastExpr 0x7fffd83c51d0 <col:35> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd83c5180 <col:35> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     `-ImplicitCastExpr 0x7fffd83c5218 <col:44> 'stbtt_uint8 *' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd83c51a8 <col:44> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd83c4f10 'coverageTable' 'stbtt_uint8 *'
|   |-SwitchStmt 0x7fffd83c52a0 <line:2387:5, line:2438:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd83c5288 <line:2387:12> 'int' <IntegralCast>
|   | | `-ImplicitCastExpr 0x7fffd83c5270 <col:12> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83c5248 <col:12> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83c5120 'coverageFormat' 'stbtt_uint16':'unsigned short'
|   | `-CompoundStmt 0x7fffd83c7c20 <col:28, line:2438:5>
|   |   |-CaseStmt 0x7fffd83c52f0 <line:2388:9, line:2408:9>
|   |   | |-IntegerLiteral 0x7fffd83c52d0 <line:2388:14> 'int' 1
|   |   | |-<<<NULL>>>
|   |   | `-CompoundStmt 0x7fffd83c6288 <col:17, line:2408:9>
|   |   |   |-DeclStmt 0x7fffd83c5490 <line:2389:13, col:66>
|   |   |   | `-VarDecl 0x7fffd83c5338 <col:13, col:65> col:26 used glyphCount 'stbtt_uint16':'unsigned short' cinit
|   |   |   |   `-CallExpr 0x7fffd83c5460 <col:39, col:65> 'stbtt_uint16':'unsigned short'
|   |   |   |     |-ImplicitCastExpr 0x7fffd83c5448 <col:39> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x7fffd83c5398 <col:39> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |   |   |     `-BinaryOperator 0x7fffd83c5420 <col:48, col:64> 'stbtt_uint8 *' '+'
|   |   |   |       |-ImplicitCastExpr 0x7fffd83c5408 <col:48> 'stbtt_uint8 *' <LValueToRValue>
|   |   |   |       | `-DeclRefExpr 0x7fffd83c53c0 <col:48> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd83c4f10 'coverageTable' 'stbtt_uint8 *'
|   |   |   |       `-IntegerLiteral 0x7fffd83c53e8 <col:64> 'int' 2
|   |   |   |-DeclStmt 0x7fffd83c56d8 <line:2392:13, col:47>
|   |   |   | |-VarDecl 0x7fffd83c54b8 <col:13, col:27> col:25 used l 'stbtt_int32':'int' cinit
|   |   |   | | `-IntegerLiteral 0x7fffd83c5518 <col:27> 'int' 0
|   |   |   | |-VarDecl 0x7fffd83c5548 <col:13, col:43> col:30 used r 'stbtt_int32':'int' cinit
|   |   |   | | `-BinaryOperator 0x7fffd83c5620 <col:32, col:43> 'int' '-'
|   |   |   | |   |-ImplicitCastExpr 0x7fffd83c5608 <col:32> 'int' <IntegralCast>
|   |   |   | |   | `-ImplicitCastExpr 0x7fffd83c55f0 <col:32> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |   | |   |   `-DeclRefExpr 0x7fffd83c55a8 <col:32> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83c5338 'glyphCount' 'stbtt_uint16':'unsigned short'
|   |   |   | |   `-IntegerLiteral 0x7fffd83c55d0 <col:43> 'int' 1
|   |   |   | `-VarDecl 0x7fffd83c5658 <col:13, col:46> col:46 used m 'stbtt_int32':'int'
|   |   |   |-DeclStmt 0x7fffd83c5838 <line:2393:13, col:36>
|   |   |   | |-VarDecl 0x7fffd83c5708 <col:13, col:17> col:17 used straw 'int'
|   |   |   | `-VarDecl 0x7fffd83c5780 <col:13, col:31> col:24 used needle 'int' cinit
|   |   |   |   `-ImplicitCastExpr 0x7fffd83c5808 <col:31> 'int' <LValueToRValue>
|   |   |   |     `-DeclRefExpr 0x7fffd83c57e0 <col:31> 'int' lvalue ParmVar 0x7fffd83c4f88 'glyph' 'int'
|   |   |   `-WhileStmt 0x7fffd83c6268 <line:2394:13, line:2407:13>
|   |   |     |-<<<NULL>>>
|   |   |     |-BinaryOperator 0x7fffd83c58d0 <line:2394:20, col:25> 'int' '<='
|   |   |     | |-ImplicitCastExpr 0x7fffd83c58a0 <col:20> 'stbtt_int32':'int' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x7fffd83c5850 <col:20> 'stbtt_int32':'int' lvalue Var 0x7fffd83c54b8 'l' 'stbtt_int32':'int'
|   |   |     | `-ImplicitCastExpr 0x7fffd83c58b8 <col:25> 'stbtt_int32':'int' <LValueToRValue>
|   |   |     |   `-DeclRefExpr 0x7fffd83c5878 <col:25> 'stbtt_int32':'int' lvalue Var 0x7fffd83c5548 'r' 'stbtt_int32':'int'
|   |   |     `-CompoundStmt 0x7fffd83c6228 <col:28, line:2407:13>
|   |   |       |-DeclStmt 0x7fffd83c59f0 <line:2395:17, col:60>
|   |   |       | `-VarDecl 0x7fffd83c5908 <col:17, col:59> col:30 used glyphArray 'stbtt_uint8 *' cinit
|   |   |       |   `-BinaryOperator 0x7fffd83c59c8 <col:43, col:59> 'stbtt_uint8 *' '+'
|   |   |       |     |-ImplicitCastExpr 0x7fffd83c59b0 <col:43> 'stbtt_uint8 *' <LValueToRValue>
|   |   |       |     | `-DeclRefExpr 0x7fffd83c5968 <col:43> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd83c4f10 'coverageTable' 'stbtt_uint8 *'
|   |   |       |     `-IntegerLiteral 0x7fffd83c5990 <col:59> 'int' 4
|   |   |       |-DeclStmt 0x7fffd83c5a78 <line:2396:17, col:37>
|   |   |       | `-VarDecl 0x7fffd83c5a18 <col:17, col:30> col:30 used glyphID 'stbtt_uint16':'unsigned short'
|   |   |       |-BinaryOperator 0x7fffd83c5bc8 <line:2397:17, col:32> 'stbtt_int32':'int' '='
|   |   |       | |-DeclRefExpr 0x7fffd83c5a90 <col:17> 'stbtt_int32':'int' lvalue Var 0x7fffd83c5658 'm' 'stbtt_int32':'int'
|   |   |       | `-BinaryOperator 0x7fffd83c5ba0 <col:21, col:32> 'int' '>>'
|   |   |       |   |-ParenExpr 0x7fffd83c5b60 <col:21, col:27> 'int'
|   |   |       |   | `-BinaryOperator 0x7fffd83c5b38 <col:22, col:26> 'int' '+'
|   |   |       |   |   |-ImplicitCastExpr 0x7fffd83c5b08 <col:22> 'stbtt_int32':'int' <LValueToRValue>
|   |   |       |   |   | `-DeclRefExpr 0x7fffd83c5ab8 <col:22> 'stbtt_int32':'int' lvalue Var 0x7fffd83c54b8 'l' 'stbtt_int32':'int'
|   |   |       |   |   `-ImplicitCastExpr 0x7fffd83c5b20 <col:26> 'stbtt_int32':'int' <LValueToRValue>
|   |   |       |   |     `-DeclRefExpr 0x7fffd83c5ae0 <col:26> 'stbtt_int32':'int' lvalue Var 0x7fffd83c5548 'r' 'stbtt_int32':'int'
|   |   |       |   `-IntegerLiteral 0x7fffd83c5b80 <col:32> 'int' 1
|   |   |       |-BinaryOperator 0x7fffd83c5d78 <line:2398:17, col:54> 'stbtt_uint16':'unsigned short' '='
|   |   |       | |-DeclRefExpr 0x7fffd83c5bf0 <col:17> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83c5a18 'glyphID' 'stbtt_uint16':'unsigned short'
|   |   |       | `-CallExpr 0x7fffd83c5d48 <col:27, col:54> 'stbtt_uint16':'unsigned short'
|   |   |       |   |-ImplicitCastExpr 0x7fffd83c5d30 <col:27> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |       |   | `-DeclRefExpr 0x7fffd83c5c18 <col:27> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |   |       |   `-BinaryOperator 0x7fffd83c5d08 <col:36, col:53> 'stbtt_uint8 *' '+'
|   |   |       |     |-ImplicitCastExpr 0x7fffd83c5cf0 <col:36> 'stbtt_uint8 *' <LValueToRValue>
|   |   |       |     | `-DeclRefExpr 0x7fffd83c5c40 <col:36> 'stbtt_uint8 *' lvalue Var 0x7fffd83c5908 'glyphArray' 'stbtt_uint8 *'
|   |   |       |     `-BinaryOperator 0x7fffd83c5cc8 <col:49, col:53> 'int' '*'
|   |   |       |       |-IntegerLiteral 0x7fffd83c5c68 <col:49> 'int' 2
|   |   |       |       `-ImplicitCastExpr 0x7fffd83c5cb0 <col:53> 'stbtt_int32':'int' <LValueToRValue>
|   |   |       |         `-DeclRefExpr 0x7fffd83c5c88 <col:53> 'stbtt_int32':'int' lvalue Var 0x7fffd83c5658 'm' 'stbtt_int32':'int'
|   |   |       |-BinaryOperator 0x7fffd83c5e20 <line:2399:17, col:25> 'int' '='
|   |   |       | |-DeclRefExpr 0x7fffd83c5da0 <col:17> 'int' lvalue Var 0x7fffd83c5708 'straw' 'int'
|   |   |       | `-ImplicitCastExpr 0x7fffd83c5e08 <col:25> 'int' <IntegralCast>
|   |   |       |   `-ImplicitCastExpr 0x7fffd83c5df0 <col:25> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x7fffd83c5dc8 <col:25> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83c5a18 'glyphID' 'stbtt_uint16':'unsigned short'
|   |   |       `-IfStmt 0x7fffd83c61f0 <line:2400:17, line:2406:17>
|   |   |         |-<<<NULL>>>
|   |   |         |-<<<NULL>>>
|   |   |         |-BinaryOperator 0x7fffd83c5ec8 <line:2400:21, col:30> 'int' '<'
|   |   |         | |-ImplicitCastExpr 0x7fffd83c5e98 <col:21> 'int' <LValueToRValue>
|   |   |         | | `-DeclRefExpr 0x7fffd83c5e48 <col:21> 'int' lvalue Var 0x7fffd83c5780 'needle' 'int'
|   |   |         | `-ImplicitCastExpr 0x7fffd83c5eb0 <col:30> 'int' <LValueToRValue>
|   |   |         |   `-DeclRefExpr 0x7fffd83c5e70 <col:30> 'int' lvalue Var 0x7fffd83c5708 'straw' 'int'
|   |   |         |-BinaryOperator 0x7fffd83c5fa0 <line:2401:21, col:29> 'stbtt_int32':'int' '='
|   |   |         | |-DeclRefExpr 0x7fffd83c5ef0 <col:21> 'stbtt_int32':'int' lvalue Var 0x7fffd83c5548 'r' 'stbtt_int32':'int'
|   |   |         | `-BinaryOperator 0x7fffd83c5f78 <col:25, col:29> 'int' '-'
|   |   |         |   |-ImplicitCastExpr 0x7fffd83c5f60 <col:25> 'stbtt_int32':'int' <LValueToRValue>
|   |   |         |   | `-DeclRefExpr 0x7fffd83c5f18 <col:25> 'stbtt_int32':'int' lvalue Var 0x7fffd83c5658 'm' 'stbtt_int32':'int'
|   |   |         |   `-IntegerLiteral 0x7fffd83c5f40 <col:29> 'int' 1
|   |   |         `-IfStmt 0x7fffd83c61b8 <line:2402:22, line:2406:17>
|   |   |           |-<<<NULL>>>
|   |   |           |-<<<NULL>>>
|   |   |           |-BinaryOperator 0x7fffd83c6048 <line:2402:26, col:35> 'int' '>'
|   |   |           | |-ImplicitCastExpr 0x7fffd83c6018 <col:26> 'int' <LValueToRValue>
|   |   |           | | `-DeclRefExpr 0x7fffd83c5fc8 <col:26> 'int' lvalue Var 0x7fffd83c5780 'needle' 'int'
|   |   |           | `-ImplicitCastExpr 0x7fffd83c6030 <col:35> 'int' <LValueToRValue>
|   |   |           |   `-DeclRefExpr 0x7fffd83c5ff0 <col:35> 'int' lvalue Var 0x7fffd83c5708 'straw' 'int'
|   |   |           |-BinaryOperator 0x7fffd83c6120 <line:2403:21, col:29> 'stbtt_int32':'int' '='
|   |   |           | |-DeclRefExpr 0x7fffd83c6070 <col:21> 'stbtt_int32':'int' lvalue Var 0x7fffd83c54b8 'l' 'stbtt_int32':'int'
|   |   |           | `-BinaryOperator 0x7fffd83c60f8 <col:25, col:29> 'int' '+'
|   |   |           |   |-ImplicitCastExpr 0x7fffd83c60e0 <col:25> 'stbtt_int32':'int' <LValueToRValue>
|   |   |           |   | `-DeclRefExpr 0x7fffd83c6098 <col:25> 'stbtt_int32':'int' lvalue Var 0x7fffd83c5658 'm' 'stbtt_int32':'int'
|   |   |           |   `-IntegerLiteral 0x7fffd83c60c0 <col:29> 'int' 1
|   |   |           `-CompoundStmt 0x7fffd83c61a0 <line:2404:22, line:2406:17>
|   |   |             `-ReturnStmt 0x7fffd83c6188 <line:2405:22, col:29>
|   |   |               `-ImplicitCastExpr 0x7fffd83c6170 <col:29> 'stbtt_int32':'int' <LValueToRValue>
|   |   |                 `-DeclRefExpr 0x7fffd83c6148 <col:29> 'stbtt_int32':'int' lvalue Var 0x7fffd83c5658 'm' 'stbtt_int32':'int'
|   |   |-BreakStmt 0x7fffd83c62b8 <line:2408:11>
|   |   |-CaseStmt 0x7fffd83c6300 <line:2410:9, line:2432:9>
|   |   | |-IntegerLiteral 0x7fffd83c62e0 <line:2410:14> 'int' 2
|   |   | |-<<<NULL>>>
|   |   | `-CompoundStmt 0x7fffd83c76e8 <col:17, line:2432:9>
|   |   |   |-DeclStmt 0x7fffd83c64a0 <line:2411:13, col:66>
|   |   |   | `-VarDecl 0x7fffd83c6348 <col:13, col:65> col:26 used rangeCount 'stbtt_uint16':'unsigned short' cinit
|   |   |   |   `-CallExpr 0x7fffd83c6470 <col:39, col:65> 'stbtt_uint16':'unsigned short'
|   |   |   |     |-ImplicitCastExpr 0x7fffd83c6458 <col:39> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x7fffd83c63a8 <col:39> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |   |   |     `-BinaryOperator 0x7fffd83c6430 <col:48, col:64> 'stbtt_uint8 *' '+'
|   |   |   |       |-ImplicitCastExpr 0x7fffd83c6418 <col:48> 'stbtt_uint8 *' <LValueToRValue>
|   |   |   |       | `-DeclRefExpr 0x7fffd83c63d0 <col:48> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd83c4f10 'coverageTable' 'stbtt_uint8 *'
|   |   |   |       `-IntegerLiteral 0x7fffd83c63f8 <col:64> 'int' 2
|   |   |   |-DeclStmt 0x7fffd83c65b0 <line:2412:13, col:56>
|   |   |   | `-VarDecl 0x7fffd83c64c8 <col:13, col:55> col:26 used rangeArray 'stbtt_uint8 *' cinit
|   |   |   |   `-BinaryOperator 0x7fffd83c6588 <col:39, col:55> 'stbtt_uint8 *' '+'
|   |   |   |     |-ImplicitCastExpr 0x7fffd83c6570 <col:39> 'stbtt_uint8 *' <LValueToRValue>
|   |   |   |     | `-DeclRefExpr 0x7fffd83c6528 <col:39> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd83c4f10 'coverageTable' 'stbtt_uint8 *'
|   |   |   |     `-IntegerLiteral 0x7fffd83c6550 <col:55> 'int' 4
|   |   |   |-DeclStmt 0x7fffd83c67f8 <line:2415:13, col:47>
|   |   |   | |-VarDecl 0x7fffd83c65d8 <col:13, col:27> col:25 used l 'stbtt_int32':'int' cinit
|   |   |   | | `-IntegerLiteral 0x7fffd83c6638 <col:27> 'int' 0
|   |   |   | |-VarDecl 0x7fffd83c6668 <col:13, col:43> col:30 used r 'stbtt_int32':'int' cinit
|   |   |   | | `-BinaryOperator 0x7fffd83c6740 <col:32, col:43> 'int' '-'
|   |   |   | |   |-ImplicitCastExpr 0x7fffd83c6728 <col:32> 'int' <IntegralCast>
|   |   |   | |   | `-ImplicitCastExpr 0x7fffd83c6710 <col:32> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |   | |   |   `-DeclRefExpr 0x7fffd83c66c8 <col:32> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83c6348 'rangeCount' 'stbtt_uint16':'unsigned short'
|   |   |   | |   `-IntegerLiteral 0x7fffd83c66f0 <col:43> 'int' 1
|   |   |   | `-VarDecl 0x7fffd83c6778 <col:13, col:46> col:46 used m 'stbtt_int32':'int'
|   |   |   |-DeclStmt 0x7fffd83c69d8 <line:2416:13, col:51>
|   |   |   | |-VarDecl 0x7fffd83c6828 <col:13, col:17> col:17 used strawStart 'int'
|   |   |   | |-VarDecl 0x7fffd83c68a0 <col:13, col:29> col:29 used strawEnd 'int'
|   |   |   | `-VarDecl 0x7fffd83c6918 <col:13, col:46> col:39 used needle 'int' cinit
|   |   |   |   `-ImplicitCastExpr 0x7fffd83c69a0 <col:46> 'int' <LValueToRValue>
|   |   |   |     `-DeclRefExpr 0x7fffd83c6978 <col:46> 'int' lvalue ParmVar 0x7fffd83c4f88 'glyph' 'int'
|   |   |   `-WhileStmt 0x7fffd83c76c8 <line:2417:13, line:2431:13>
|   |   |     |-<<<NULL>>>
|   |   |     |-BinaryOperator 0x7fffd83c6a70 <line:2417:20, col:25> 'int' '<='
|   |   |     | |-ImplicitCastExpr 0x7fffd83c6a40 <col:20> 'stbtt_int32':'int' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x7fffd83c69f0 <col:20> 'stbtt_int32':'int' lvalue Var 0x7fffd83c65d8 'l' 'stbtt_int32':'int'
|   |   |     | `-ImplicitCastExpr 0x7fffd83c6a58 <col:25> 'stbtt_int32':'int' <LValueToRValue>
|   |   |     |   `-DeclRefExpr 0x7fffd83c6a18 <col:25> 'stbtt_int32':'int' lvalue Var 0x7fffd83c6668 'r' 'stbtt_int32':'int'
|   |   |     `-CompoundStmt 0x7fffd83c7688 <col:28, line:2431:13>
|   |   |       |-DeclStmt 0x7fffd83c6b08 <line:2418:17, col:41>
|   |   |       | `-VarDecl 0x7fffd83c6aa8 <col:17, col:30> col:30 used rangeRecord 'stbtt_uint8 *'
|   |   |       |-BinaryOperator 0x7fffd83c6c58 <line:2419:17, col:32> 'stbtt_int32':'int' '='
|   |   |       | |-DeclRefExpr 0x7fffd83c6b20 <col:17> 'stbtt_int32':'int' lvalue Var 0x7fffd83c6778 'm' 'stbtt_int32':'int'
|   |   |       | `-BinaryOperator 0x7fffd83c6c30 <col:21, col:32> 'int' '>>'
|   |   |       |   |-ParenExpr 0x7fffd83c6bf0 <col:21, col:27> 'int'
|   |   |       |   | `-BinaryOperator 0x7fffd83c6bc8 <col:22, col:26> 'int' '+'
|   |   |       |   |   |-ImplicitCastExpr 0x7fffd83c6b98 <col:22> 'stbtt_int32':'int' <LValueToRValue>
|   |   |       |   |   | `-DeclRefExpr 0x7fffd83c6b48 <col:22> 'stbtt_int32':'int' lvalue Var 0x7fffd83c65d8 'l' 'stbtt_int32':'int'
|   |   |       |   |   `-ImplicitCastExpr 0x7fffd83c6bb0 <col:26> 'stbtt_int32':'int' <LValueToRValue>
|   |   |       |   |     `-DeclRefExpr 0x7fffd83c6b70 <col:26> 'stbtt_int32':'int' lvalue Var 0x7fffd83c6668 'r' 'stbtt_int32':'int'
|   |   |       |   `-IntegerLiteral 0x7fffd83c6c10 <col:32> 'int' 1
|   |   |       |-BinaryOperator 0x7fffd83c6d98 <line:2420:17, col:48> 'stbtt_uint8 *' '='
|   |   |       | |-DeclRefExpr 0x7fffd83c6c80 <col:17> 'stbtt_uint8 *' lvalue Var 0x7fffd83c6aa8 'rangeRecord' 'stbtt_uint8 *'
|   |   |       | `-BinaryOperator 0x7fffd83c6d70 <col:31, col:48> 'stbtt_uint8 *' '+'
|   |   |       |   |-ImplicitCastExpr 0x7fffd83c6d58 <col:31> 'stbtt_uint8 *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x7fffd83c6ca8 <col:31> 'stbtt_uint8 *' lvalue Var 0x7fffd83c64c8 'rangeArray' 'stbtt_uint8 *'
|   |   |       |   `-BinaryOperator 0x7fffd83c6d30 <col:44, col:48> 'int' '*'
|   |   |       |     |-IntegerLiteral 0x7fffd83c6cd0 <col:44> 'int' 6
|   |   |       |     `-ImplicitCastExpr 0x7fffd83c6d18 <col:48> 'stbtt_int32':'int' <LValueToRValue>
|   |   |       |       `-DeclRefExpr 0x7fffd83c6cf0 <col:48> 'stbtt_int32':'int' lvalue Var 0x7fffd83c6778 'm' 'stbtt_int32':'int'
|   |   |       |-BinaryOperator 0x7fffd83c6eb0 <line:2421:17, col:50> 'int' '='
|   |   |       | |-DeclRefExpr 0x7fffd83c6dc0 <col:17> 'int' lvalue Var 0x7fffd83c6828 'strawStart' 'int'
|   |   |       | `-ImplicitCastExpr 0x7fffd83c6e98 <col:30, col:50> 'int' <IntegralCast>
|   |   |       |   `-CallExpr 0x7fffd83c6e50 <col:30, col:50> 'stbtt_uint16':'unsigned short'
|   |   |       |     |-ImplicitCastExpr 0x7fffd83c6e38 <col:30> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |       |     | `-DeclRefExpr 0x7fffd83c6de8 <col:30> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |   |       |     `-ImplicitCastExpr 0x7fffd83c6e80 <col:39> 'stbtt_uint8 *' <LValueToRValue>
|   |   |       |       `-DeclRefExpr 0x7fffd83c6e10 <col:39> 'stbtt_uint8 *' lvalue Var 0x7fffd83c6aa8 'rangeRecord' 'stbtt_uint8 *'
|   |   |       |-BinaryOperator 0x7fffd83c7010 <line:2422:17, col:52> 'int' '='
|   |   |       | |-DeclRefExpr 0x7fffd83c6ed8 <col:17> 'int' lvalue Var 0x7fffd83c68a0 'strawEnd' 'int'
|   |   |       | `-ImplicitCastExpr 0x7fffd83c6ff8 <col:28, col:52> 'int' <IntegralCast>
|   |   |       |   `-CallExpr 0x7fffd83c6fc8 <col:28, col:52> 'stbtt_uint16':'unsigned short'
|   |   |       |     |-ImplicitCastExpr 0x7fffd83c6fb0 <col:28> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |       |     | `-DeclRefExpr 0x7fffd83c6f00 <col:28> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |   |       |     `-BinaryOperator 0x7fffd83c6f88 <col:37, col:51> 'stbtt_uint8 *' '+'
|   |   |       |       |-ImplicitCastExpr 0x7fffd83c6f70 <col:37> 'stbtt_uint8 *' <LValueToRValue>
|   |   |       |       | `-DeclRefExpr 0x7fffd83c6f28 <col:37> 'stbtt_uint8 *' lvalue Var 0x7fffd83c6aa8 'rangeRecord' 'stbtt_uint8 *'
|   |   |       |       `-IntegerLiteral 0x7fffd83c6f50 <col:51> 'int' 2
|   |   |       `-IfStmt 0x7fffd83c7650 <line:2423:17, line:2430:17>
|   |   |         |-<<<NULL>>>
|   |   |         |-<<<NULL>>>
|   |   |         |-BinaryOperator 0x7fffd83c70b8 <line:2423:21, col:30> 'int' '<'
|   |   |         | |-ImplicitCastExpr 0x7fffd83c7088 <col:21> 'int' <LValueToRValue>
|   |   |         | | `-DeclRefExpr 0x7fffd83c7038 <col:21> 'int' lvalue Var 0x7fffd83c6918 'needle' 'int'
|   |   |         | `-ImplicitCastExpr 0x7fffd83c70a0 <col:30> 'int' <LValueToRValue>
|   |   |         |   `-DeclRefExpr 0x7fffd83c7060 <col:30> 'int' lvalue Var 0x7fffd83c6828 'strawStart' 'int'
|   |   |         |-BinaryOperator 0x7fffd83c7190 <line:2424:21, col:29> 'stbtt_int32':'int' '='
|   |   |         | |-DeclRefExpr 0x7fffd83c70e0 <col:21> 'stbtt_int32':'int' lvalue Var 0x7fffd83c6668 'r' 'stbtt_int32':'int'
|   |   |         | `-BinaryOperator 0x7fffd83c7168 <col:25, col:29> 'int' '-'
|   |   |         |   |-ImplicitCastExpr 0x7fffd83c7150 <col:25> 'stbtt_int32':'int' <LValueToRValue>
|   |   |         |   | `-DeclRefExpr 0x7fffd83c7108 <col:25> 'stbtt_int32':'int' lvalue Var 0x7fffd83c6778 'm' 'stbtt_int32':'int'
|   |   |         |   `-IntegerLiteral 0x7fffd83c7130 <col:29> 'int' 1
|   |   |         `-IfStmt 0x7fffd83c7618 <line:2425:22, line:2430:17>
|   |   |           |-<<<NULL>>>
|   |   |           |-<<<NULL>>>
|   |   |           |-BinaryOperator 0x7fffd83c7238 <line:2425:26, col:35> 'int' '>'
|   |   |           | |-ImplicitCastExpr 0x7fffd83c7208 <col:26> 'int' <LValueToRValue>
|   |   |           | | `-DeclRefExpr 0x7fffd83c71b8 <col:26> 'int' lvalue Var 0x7fffd83c6918 'needle' 'int'
|   |   |           | `-ImplicitCastExpr 0x7fffd83c7220 <col:35> 'int' <LValueToRValue>
|   |   |           |   `-DeclRefExpr 0x7fffd83c71e0 <col:35> 'int' lvalue Var 0x7fffd83c68a0 'strawEnd' 'int'
|   |   |           |-BinaryOperator 0x7fffd83c7310 <line:2426:21, col:29> 'stbtt_int32':'int' '='
|   |   |           | |-DeclRefExpr 0x7fffd83c7260 <col:21> 'stbtt_int32':'int' lvalue Var 0x7fffd83c65d8 'l' 'stbtt_int32':'int'
|   |   |           | `-BinaryOperator 0x7fffd83c72e8 <col:25, col:29> 'int' '+'
|   |   |           |   |-ImplicitCastExpr 0x7fffd83c72d0 <col:25> 'stbtt_int32':'int' <LValueToRValue>
|   |   |           |   | `-DeclRefExpr 0x7fffd83c7288 <col:25> 'stbtt_int32':'int' lvalue Var 0x7fffd83c6778 'm' 'stbtt_int32':'int'
|   |   |           |   `-IntegerLiteral 0x7fffd83c72b0 <col:29> 'int' 1
|   |   |           `-CompoundStmt 0x7fffd83c75f8 <line:2427:22, line:2430:17>
|   |   |             |-DeclStmt 0x7fffd83c74a0 <line:2428:21, col:80>
|   |   |             | `-VarDecl 0x7fffd83c7348 <col:21, col:79> col:34 used startCoverageIndex 'stbtt_uint16':'unsigned short' cinit
|   |   |             |   `-CallExpr 0x7fffd83c7470 <col:55, col:79> 'stbtt_uint16':'unsigned short'
|   |   |             |     |-ImplicitCastExpr 0x7fffd83c7458 <col:55> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |             |     | `-DeclRefExpr 0x7fffd83c73a8 <col:55> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |   |             |     `-BinaryOperator 0x7fffd83c7430 <col:64, col:78> 'stbtt_uint8 *' '+'
|   |   |             |       |-ImplicitCastExpr 0x7fffd83c7418 <col:64> 'stbtt_uint8 *' <LValueToRValue>
|   |   |             |       | `-DeclRefExpr 0x7fffd83c73d0 <col:64> 'stbtt_uint8 *' lvalue Var 0x7fffd83c6aa8 'rangeRecord' 'stbtt_uint8 *'
|   |   |             |       `-IntegerLiteral 0x7fffd83c73f8 <col:78> 'int' 4
|   |   |             `-ReturnStmt 0x7fffd83c75e0 <line:2429:21, col:57>
|   |   |               `-BinaryOperator 0x7fffd83c75b8 <col:28, col:57> 'int' '-'
|   |   |                 |-BinaryOperator 0x7fffd83c7550 <col:28, col:49> 'int' '+'
|   |   |                 | |-ImplicitCastExpr 0x7fffd83c7520 <col:28> 'int' <IntegralCast>
|   |   |                 | | `-ImplicitCastExpr 0x7fffd83c7508 <col:28> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |                 | |   `-DeclRefExpr 0x7fffd83c74b8 <col:28> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83c7348 'startCoverageIndex' 'stbtt_uint16':'unsigned short'
|   |   |                 | `-ImplicitCastExpr 0x7fffd83c7538 <col:49> 'int' <LValueToRValue>
|   |   |                 |   `-DeclRefExpr 0x7fffd83c74e0 <col:49> 'int' lvalue ParmVar 0x7fffd83c4f88 'glyph' 'int'
|   |   |                 `-ImplicitCastExpr 0x7fffd83c75a0 <col:57> 'int' <LValueToRValue>
|   |   |                   `-DeclRefExpr 0x7fffd83c7578 <col:57> 'int' lvalue Var 0x7fffd83c6828 'strawStart' 'int'
|   |   |-BreakStmt 0x7fffd83c7720 <line:2432:11>
|   |   |-DefaultStmt 0x7fffd83c7bf8 <line:2434:9, line:2437:9>
|   |   | `-CompoundStmt 0x7fffd83c7be0 <line:2434:18, line:2437:9>
|   |   |   `-ParenExpr 0x7fffd83c7bc0 </usr/include/assert.h:108:3, line:113:7> 'void'
|   |   |     `-BinaryOperator 0x7fffd83c7b98 <line:108:4, line:113:6> 'void' ','
|   |   |       |-CStyleCastExpr 0x7fffd83c7828 <line:108:4, col:33> 'void' <ToVoid>
|   |   |       | `-UnaryExprOrTypeTraitExpr 0x7fffd83c77f8 <col:11, col:33> 'unsigned long' sizeof
|   |   |       |   `-ParenExpr 0x7fffd83c77d8 <col:18, col:33> 'int'
|   |   |       |     `-ConditionalOperator 0x7fffd83c77a8 <col:19, col:32> 'int'
|   |   |       |       |-ParenExpr 0x7fffd83c7748 <col:19, col:24> 'int'
|   |   |       |       | `-IntegerLiteral 0x7fffd83c7728 <././stb/stb_truetype.h:2436:26> 'int' 0
|   |   |       |       |-IntegerLiteral 0x7fffd83c7768 </usr/include/assert.h:108:28> 'int' 1
|   |   |       |       `-IntegerLiteral 0x7fffd83c7788 <col:32> 'int' 0
|   |   |       `-UnaryOperator 0x7fffd83c7b78 <col:36, line:113:6> 'void' prefix '__extension__'
|   |   |         `-StmtExpr 0x7fffd83c7b58 <line:108:50, line:113:6> 'void'
|   |   |           `-CompoundStmt 0x7fffd83c7b40 <line:108:51, line:113:5>
|   |   |             `-IfStmt 0x7fffd83c7b08 <line:109:7, line:112:68>
|   |   |               |-<<<NULL>>>
|   |   |               |-<<<NULL>>>
|   |   |               |-IntegerLiteral 0x7fffd83c7850 <././stb/stb_truetype.h:2436:26> 'int' 0
|   |   |               |-NullStmt 0x7fffd83c7870 </usr/include/assert.h:110:9>
|   |   |               `-CallExpr 0x7fffd83c7a30 <line:112:9, col:68> 'void'
|   |   |                 |-ImplicitCastExpr 0x7fffd83c7a18 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x7fffd83c7880 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |   |                 |-ImplicitCastExpr 0x7fffd83c7a90 <<scratch space>:261:1> 'const char *' <BitCast>
|   |   |                 | `-ImplicitCastExpr 0x7fffd83c7a78 <col:1> 'char *' <ArrayToPointerDecay>
|   |   |                 |   `-StringLiteral 0x7fffd83c78a8 <col:1> 'char [2]' lvalue "0"
|   |   |                 |-ImplicitCastExpr 0x7fffd83c7ac0 <line:262:1> 'const char *' <BitCast>
|   |   |                 | `-ImplicitCastExpr 0x7fffd83c7aa8 <col:1> 'char *' <ArrayToPointerDecay>
|   |   |                 |   `-StringLiteral 0x7fffd83c78d8 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |   |                 |-ImplicitCastExpr 0x7fffd83c7ad8 <line:263:1> 'unsigned int' <IntegralCast>
|   |   |                 | `-IntegerLiteral 0x7fffd83c7918 <col:1> 'int' 2436
|   |   |                 `-ImplicitCastExpr 0x7fffd83c7af0 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |   |                   `-UnaryOperator 0x7fffd83c79f8 <col:30, col:44> 'const char [56]' lvalue prefix '__extension__'
|   |   |                     `-PredefinedExpr 0x7fffd83c79d8 <col:44> 'const char [56]' lvalue __PRETTY_FUNCTION__
|   |   |                       `-StringLiteral 0x7fffd83c7978 <col:44> 'const char [56]' lvalue "stbtt_int32 stbtt__GetCoverageIndex(stbtt_uint8 *, int)"
|   |   `-BreakStmt 0x7fffd83c7c18 <././stb/stb_truetype.h:2437:11>
|   `-ReturnStmt 0x7fffd83c7ca0 <line:2440:5, col:13>
|     `-UnaryOperator 0x7fffd83c7c80 <col:12, col:13> 'int' prefix '-'
|       `-IntegerLiteral 0x7fffd83c7c60 <col:13> 'int' 1
|-FunctionDecl 0x7fffd83c7df8 <line:2443:1, line:2490:1> line:2443:21 used stbtt__GetGlyphClass 'stbtt_int32 (stbtt_uint8 *, int)' static
| |-ParmVarDecl 0x7fffd83c7cf0 <col:42, col:55> col:55 used classDefTable 'stbtt_uint8 *'
| |-ParmVarDecl 0x7fffd83c7d68 <col:70, col:74> col:74 used glyph 'int'
| `-CompoundStmt 0x7fffd83ca528 <line:2444:1, line:2490:1>
|   |-DeclStmt 0x7fffd83c7fc8 <line:2445:5, col:58>
|   | `-VarDecl 0x7fffd83c7eb8 <col:5, col:57> col:18 used classDefFormat 'stbtt_uint16':'unsigned short' cinit
|   |   `-CallExpr 0x7fffd83c7f80 <col:35, col:57> 'stbtt_uint16':'unsigned short'
|   |     |-ImplicitCastExpr 0x7fffd83c7f68 <col:35> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd83c7f18 <col:35> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     `-ImplicitCastExpr 0x7fffd83c7fb0 <col:44> 'stbtt_uint8 *' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd83c7f40 <col:44> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd83c7cf0 'classDefTable' 'stbtt_uint8 *'
|   |-SwitchStmt 0x7fffd83c8038 <line:2446:5, line:2487:5>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd83c8020 <line:2446:12> 'int' <IntegralCast>
|   | | `-ImplicitCastExpr 0x7fffd83c8008 <col:12> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83c7fe0 <col:12> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83c7eb8 'classDefFormat' 'stbtt_uint16':'unsigned short'
|   | `-CompoundStmt 0x7fffd83ca490 <line:2447:5, line:2487:5>
|   |   |-CaseStmt 0x7fffd83c8088 <line:2448:9, line:2457:9>
|   |   | |-IntegerLiteral 0x7fffd83c8068 <line:2448:14> 'int' 1
|   |   | |-<<<NULL>>>
|   |   | `-CompoundStmt 0x7fffd83c8af0 <col:17, line:2457:9>
|   |   |   |-DeclStmt 0x7fffd83c8228 <line:2449:13, col:68>
|   |   |   | `-VarDecl 0x7fffd83c80d0 <col:13, col:67> col:26 used startGlyphID 'stbtt_uint16':'unsigned short' cinit
|   |   |   |   `-CallExpr 0x7fffd83c81f8 <col:41, col:67> 'stbtt_uint16':'unsigned short'
|   |   |   |     |-ImplicitCastExpr 0x7fffd83c81e0 <col:41> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x7fffd83c8130 <col:41> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |   |   |     `-BinaryOperator 0x7fffd83c81b8 <col:50, col:66> 'stbtt_uint8 *' '+'
|   |   |   |       |-ImplicitCastExpr 0x7fffd83c81a0 <col:50> 'stbtt_uint8 *' <LValueToRValue>
|   |   |   |       | `-DeclRefExpr 0x7fffd83c8158 <col:50> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd83c7cf0 'classDefTable' 'stbtt_uint8 *'
|   |   |   |       `-IntegerLiteral 0x7fffd83c8180 <col:66> 'int' 2
|   |   |   |-DeclStmt 0x7fffd83c83c0 <line:2450:13, col:66>
|   |   |   | `-VarDecl 0x7fffd83c8250 <col:13, col:65> col:26 used glyphCount 'stbtt_uint16':'unsigned short' cinit
|   |   |   |   `-CallExpr 0x7fffd83c8390 <col:39, col:65> 'stbtt_uint16':'unsigned short'
|   |   |   |     |-ImplicitCastExpr 0x7fffd83c8378 <col:39> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x7fffd83c82b0 <col:39> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |   |   |     `-BinaryOperator 0x7fffd83c8350 <col:48, col:64> 'stbtt_uint8 *' '+'
|   |   |   |       |-ImplicitCastExpr 0x7fffd83c8338 <col:48> 'stbtt_uint8 *' <LValueToRValue>
|   |   |   |       | `-DeclRefExpr 0x7fffd83c82f0 <col:48> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd83c7cf0 'classDefTable' 'stbtt_uint8 *'
|   |   |   |       `-IntegerLiteral 0x7fffd83c8318 <col:64> 'int' 4
|   |   |   |-DeclStmt 0x7fffd83c84d0 <line:2451:13, col:65>
|   |   |   | `-VarDecl 0x7fffd83c83e8 <col:13, col:64> col:26 used classDef1ValueArray 'stbtt_uint8 *' cinit
|   |   |   |   `-BinaryOperator 0x7fffd83c84a8 <col:48, col:64> 'stbtt_uint8 *' '+'
|   |   |   |     |-ImplicitCastExpr 0x7fffd83c8490 <col:48> 'stbtt_uint8 *' <LValueToRValue>
|   |   |   |     | `-DeclRefExpr 0x7fffd83c8448 <col:48> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd83c7cf0 'classDefTable' 'stbtt_uint8 *'
|   |   |   |     `-IntegerLiteral 0x7fffd83c8470 <col:64> 'int' 6
|   |   |   |-IfStmt 0x7fffd83c8960 <line:2453:13, line:2454:94>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-BinaryOperator 0x7fffd83c86e8 <line:2453:17, col:65> 'int' '&&'
|   |   |   | | |-BinaryOperator 0x7fffd83c8580 <col:17, col:26> 'int' '>='
|   |   |   | | | |-ImplicitCastExpr 0x7fffd83c8538 <col:17> 'int' <LValueToRValue>
|   |   |   | | | | `-DeclRefExpr 0x7fffd83c84e8 <col:17> 'int' lvalue ParmVar 0x7fffd83c7d68 'glyph' 'int'
|   |   |   | | | `-ImplicitCastExpr 0x7fffd83c8568 <col:26> 'int' <IntegralCast>
|   |   |   | | |   `-ImplicitCastExpr 0x7fffd83c8550 <col:26> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |   | | |     `-DeclRefExpr 0x7fffd83c8510 <col:26> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83c80d0 'startGlyphID' 'stbtt_uint16':'unsigned short'
|   |   |   | | `-BinaryOperator 0x7fffd83c86c0 <col:42, col:65> 'int' '<'
|   |   |   | |   |-ImplicitCastExpr 0x7fffd83c86a8 <col:42> 'int' <LValueToRValue>
|   |   |   | |   | `-DeclRefExpr 0x7fffd83c85a8 <col:42> 'int' lvalue ParmVar 0x7fffd83c7d68 'glyph' 'int'
|   |   |   | |   `-BinaryOperator 0x7fffd83c8680 <col:50, col:65> 'int' '+'
|   |   |   | |     |-ImplicitCastExpr 0x7fffd83c8638 <col:50> 'int' <IntegralCast>
|   |   |   | |     | `-ImplicitCastExpr 0x7fffd83c8620 <col:50> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |   | |     |   `-DeclRefExpr 0x7fffd83c85d0 <col:50> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83c80d0 'startGlyphID' 'stbtt_uint16':'unsigned short'
|   |   |   | |     `-ImplicitCastExpr 0x7fffd83c8668 <col:65> 'int' <IntegralCast>
|   |   |   | |       `-ImplicitCastExpr 0x7fffd83c8650 <col:65> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |   | |         `-DeclRefExpr 0x7fffd83c85f8 <col:65> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83c8250 'glyphCount' 'stbtt_uint16':'unsigned short'
|   |   |   | |-ReturnStmt 0x7fffd83c8948 <line:2454:17, col:94>
|   |   |   | | `-CStyleCastExpr 0x7fffd83c8920 <col:24, col:94> 'stbtt_int32':'int' <IntegralCast>
|   |   |   | |   `-CallExpr 0x7fffd83c88e0 <col:37, col:94> 'stbtt_uint16':'unsigned short'
|   |   |   | |     |-ImplicitCastExpr 0x7fffd83c88c8 <col:37> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |   | |     | `-DeclRefExpr 0x7fffd83c8710 <col:37> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |   |   | |     `-BinaryOperator 0x7fffd83c88a0 <col:46, col:93> 'stbtt_uint8 *' '+'
|   |   |   | |       |-ImplicitCastExpr 0x7fffd83c8888 <col:46> 'stbtt_uint8 *' <LValueToRValue>
|   |   |   | |       | `-DeclRefExpr 0x7fffd83c8738 <col:46> 'stbtt_uint8 *' lvalue Var 0x7fffd83c83e8 'classDef1ValueArray' 'stbtt_uint8 *'
|   |   |   | |       `-BinaryOperator 0x7fffd83c8860 <col:68, col:93> 'int' '*'
|   |   |   | |         |-IntegerLiteral 0x7fffd83c8760 <col:68> 'int' 2
|   |   |   | |         `-ParenExpr 0x7fffd83c8840 <col:72, col:93> 'int'
|   |   |   | |           `-BinaryOperator 0x7fffd83c8818 <col:73, col:81> 'int' '-'
|   |   |   | |             |-ImplicitCastExpr 0x7fffd83c87d0 <col:73> 'int' <LValueToRValue>
|   |   |   | |             | `-DeclRefExpr 0x7fffd83c8780 <col:73> 'int' lvalue ParmVar 0x7fffd83c7d68 'glyph' 'int'
|   |   |   | |             `-ImplicitCastExpr 0x7fffd83c8800 <col:81> 'int' <IntegralCast>
|   |   |   | |               `-ImplicitCastExpr 0x7fffd83c87e8 <col:81> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |   | |                 `-DeclRefExpr 0x7fffd83c87a8 <col:81> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83c80d0 'startGlyphID' 'stbtt_uint16':'unsigned short'
|   |   |   | `-<<<NULL>>>
|   |   |   `-BinaryOperator 0x7fffd83c8ac8 <line:2456:13, col:55> 'stbtt_uint8 *' '='
|   |   |     |-DeclRefExpr 0x7fffd83c8998 <col:13> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd83c7cf0 'classDefTable' 'stbtt_uint8 *'
|   |   |     `-BinaryOperator 0x7fffd83c8aa0 <col:29, col:55> 'stbtt_uint8 *' '+'
|   |   |       |-ImplicitCastExpr 0x7fffd83c8a88 <col:29> 'stbtt_uint8 *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x7fffd83c89c0 <col:29> 'stbtt_uint8 *' lvalue Var 0x7fffd83c83e8 'classDef1ValueArray' 'stbtt_uint8 *'
|   |   |       `-BinaryOperator 0x7fffd83c8a60 <col:51, col:55> 'int' '*'
|   |   |         |-IntegerLiteral 0x7fffd83c89e8 <col:51> 'int' 2
|   |   |         `-ImplicitCastExpr 0x7fffd83c8a48 <col:55> 'int' <IntegralCast>
|   |   |           `-ImplicitCastExpr 0x7fffd83c8a30 <col:55> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |             `-DeclRefExpr 0x7fffd83c8a08 <col:55> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83c8250 'glyphCount' 'stbtt_uint16':'unsigned short'
|   |   |-BreakStmt 0x7fffd83c8b28 <line:2457:11>
|   |   |-CaseStmt 0x7fffd83c8b50 <line:2459:9, line:2481:9>
|   |   | |-IntegerLiteral 0x7fffd83c8b30 <line:2459:14> 'int' 2
|   |   | |-<<<NULL>>>
|   |   | `-CompoundStmt 0x7fffd83c9ef8 <col:17, line:2481:9>
|   |   |   |-DeclStmt 0x7fffd83c8cf0 <line:2460:13, col:71>
|   |   |   | `-VarDecl 0x7fffd83c8b98 <col:13, col:70> col:26 used classRangeCount 'stbtt_uint16':'unsigned short' cinit
|   |   |   |   `-CallExpr 0x7fffd83c8cc0 <col:44, col:70> 'stbtt_uint16':'unsigned short'
|   |   |   |     |-ImplicitCastExpr 0x7fffd83c8ca8 <col:44> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |   |     | `-DeclRefExpr 0x7fffd83c8bf8 <col:44> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |   |   |     `-BinaryOperator 0x7fffd83c8c80 <col:53, col:69> 'stbtt_uint8 *' '+'
|   |   |   |       |-ImplicitCastExpr 0x7fffd83c8c68 <col:53> 'stbtt_uint8 *' <LValueToRValue>
|   |   |   |       | `-DeclRefExpr 0x7fffd83c8c20 <col:53> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd83c7cf0 'classDefTable' 'stbtt_uint8 *'
|   |   |   |       `-IntegerLiteral 0x7fffd83c8c48 <col:69> 'int' 2
|   |   |   |-DeclStmt 0x7fffd83c8e00 <line:2461:13, col:63>
|   |   |   | `-VarDecl 0x7fffd83c8d18 <col:13, col:62> col:26 used classRangeRecords 'stbtt_uint8 *' cinit
|   |   |   |   `-BinaryOperator 0x7fffd83c8dd8 <col:46, col:62> 'stbtt_uint8 *' '+'
|   |   |   |     |-ImplicitCastExpr 0x7fffd83c8dc0 <col:46> 'stbtt_uint8 *' <LValueToRValue>
|   |   |   |     | `-DeclRefExpr 0x7fffd83c8d78 <col:46> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd83c7cf0 'classDefTable' 'stbtt_uint8 *'
|   |   |   |     `-IntegerLiteral 0x7fffd83c8da0 <col:62> 'int' 4
|   |   |   |-DeclStmt 0x7fffd83c9048 <line:2464:13, col:52>
|   |   |   | |-VarDecl 0x7fffd83c8e28 <col:13, col:27> col:25 used l 'stbtt_int32':'int' cinit
|   |   |   | | `-IntegerLiteral 0x7fffd83c8e88 <col:27> 'int' 0
|   |   |   | |-VarDecl 0x7fffd83c8eb8 <col:13, col:48> col:30 used r 'stbtt_int32':'int' cinit
|   |   |   | | `-BinaryOperator 0x7fffd83c8f90 <col:32, col:48> 'int' '-'
|   |   |   | |   |-ImplicitCastExpr 0x7fffd83c8f78 <col:32> 'int' <IntegralCast>
|   |   |   | |   | `-ImplicitCastExpr 0x7fffd83c8f60 <col:32> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |   | |   |   `-DeclRefExpr 0x7fffd83c8f18 <col:32> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83c8b98 'classRangeCount' 'stbtt_uint16':'unsigned short'
|   |   |   | |   `-IntegerLiteral 0x7fffd83c8f40 <col:48> 'int' 1
|   |   |   | `-VarDecl 0x7fffd83c8fc8 <col:13, col:51> col:51 used m 'stbtt_int32':'int'
|   |   |   |-DeclStmt 0x7fffd83c9228 <line:2465:13, col:51>
|   |   |   | |-VarDecl 0x7fffd83c9078 <col:13, col:17> col:17 used strawStart 'int'
|   |   |   | |-VarDecl 0x7fffd83c90f0 <col:13, col:29> col:29 used strawEnd 'int'
|   |   |   | `-VarDecl 0x7fffd83c9168 <col:13, col:46> col:39 used needle 'int' cinit
|   |   |   |   `-ImplicitCastExpr 0x7fffd83c91f0 <col:46> 'int' <LValueToRValue>
|   |   |   |     `-DeclRefExpr 0x7fffd83c91c8 <col:46> 'int' lvalue ParmVar 0x7fffd83c7d68 'glyph' 'int'
|   |   |   |-WhileStmt 0x7fffd83c9d80 <line:2466:13, line:2478:13>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-BinaryOperator 0x7fffd83c92c0 <line:2466:20, col:25> 'int' '<='
|   |   |   | | |-ImplicitCastExpr 0x7fffd83c9290 <col:20> 'stbtt_int32':'int' <LValueToRValue>
|   |   |   | | | `-DeclRefExpr 0x7fffd83c9240 <col:20> 'stbtt_int32':'int' lvalue Var 0x7fffd83c8e28 'l' 'stbtt_int32':'int'
|   |   |   | | `-ImplicitCastExpr 0x7fffd83c92a8 <col:25> 'stbtt_int32':'int' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x7fffd83c9268 <col:25> 'stbtt_int32':'int' lvalue Var 0x7fffd83c8eb8 'r' 'stbtt_int32':'int'
|   |   |   | `-CompoundStmt 0x7fffd83c9d40 <col:28, line:2478:13>
|   |   |   |   |-DeclStmt 0x7fffd83c9358 <line:2467:17, col:46>
|   |   |   |   | `-VarDecl 0x7fffd83c92f8 <col:17, col:30> col:30 used classRangeRecord 'stbtt_uint8 *'
|   |   |   |   |-BinaryOperator 0x7fffd83c94a8 <line:2468:17, col:32> 'stbtt_int32':'int' '='
|   |   |   |   | |-DeclRefExpr 0x7fffd83c9370 <col:17> 'stbtt_int32':'int' lvalue Var 0x7fffd83c8fc8 'm' 'stbtt_int32':'int'
|   |   |   |   | `-BinaryOperator 0x7fffd83c9480 <col:21, col:32> 'int' '>>'
|   |   |   |   |   |-ParenExpr 0x7fffd83c9440 <col:21, col:27> 'int'
|   |   |   |   |   | `-BinaryOperator 0x7fffd83c9418 <col:22, col:26> 'int' '+'
|   |   |   |   |   |   |-ImplicitCastExpr 0x7fffd83c93e8 <col:22> 'stbtt_int32':'int' <LValueToRValue>
|   |   |   |   |   |   | `-DeclRefExpr 0x7fffd83c9398 <col:22> 'stbtt_int32':'int' lvalue Var 0x7fffd83c8e28 'l' 'stbtt_int32':'int'
|   |   |   |   |   |   `-ImplicitCastExpr 0x7fffd83c9400 <col:26> 'stbtt_int32':'int' <LValueToRValue>
|   |   |   |   |   |     `-DeclRefExpr 0x7fffd83c93c0 <col:26> 'stbtt_int32':'int' lvalue Var 0x7fffd83c8eb8 'r' 'stbtt_int32':'int'
|   |   |   |   |   `-IntegerLiteral 0x7fffd83c9460 <col:32> 'int' 1
|   |   |   |   |-BinaryOperator 0x7fffd83c95e8 <line:2469:17, col:60> 'stbtt_uint8 *' '='
|   |   |   |   | |-DeclRefExpr 0x7fffd83c94d0 <col:17> 'stbtt_uint8 *' lvalue Var 0x7fffd83c92f8 'classRangeRecord' 'stbtt_uint8 *'
|   |   |   |   | `-BinaryOperator 0x7fffd83c95c0 <col:36, col:60> 'stbtt_uint8 *' '+'
|   |   |   |   |   |-ImplicitCastExpr 0x7fffd83c95a8 <col:36> 'stbtt_uint8 *' <LValueToRValue>
|   |   |   |   |   | `-DeclRefExpr 0x7fffd83c94f8 <col:36> 'stbtt_uint8 *' lvalue Var 0x7fffd83c8d18 'classRangeRecords' 'stbtt_uint8 *'
|   |   |   |   |   `-BinaryOperator 0x7fffd83c9580 <col:56, col:60> 'int' '*'
|   |   |   |   |     |-IntegerLiteral 0x7fffd83c9520 <col:56> 'int' 6
|   |   |   |   |     `-ImplicitCastExpr 0x7fffd83c9568 <col:60> 'stbtt_int32':'int' <LValueToRValue>
|   |   |   |   |       `-DeclRefExpr 0x7fffd83c9540 <col:60> 'stbtt_int32':'int' lvalue Var 0x7fffd83c8fc8 'm' 'stbtt_int32':'int'
|   |   |   |   |-BinaryOperator 0x7fffd83c9700 <line:2470:17, col:55> 'int' '='
|   |   |   |   | |-DeclRefExpr 0x7fffd83c9610 <col:17> 'int' lvalue Var 0x7fffd83c9078 'strawStart' 'int'
|   |   |   |   | `-ImplicitCastExpr 0x7fffd83c96e8 <col:30, col:55> 'int' <IntegralCast>
|   |   |   |   |   `-CallExpr 0x7fffd83c96a0 <col:30, col:55> 'stbtt_uint16':'unsigned short'
|   |   |   |   |     |-ImplicitCastExpr 0x7fffd83c9688 <col:30> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |   |   |     | `-DeclRefExpr 0x7fffd83c9638 <col:30> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |   |   |   |     `-ImplicitCastExpr 0x7fffd83c96d0 <col:39> 'stbtt_uint8 *' <LValueToRValue>
|   |   |   |   |       `-DeclRefExpr 0x7fffd83c9660 <col:39> 'stbtt_uint8 *' lvalue Var 0x7fffd83c92f8 'classRangeRecord' 'stbtt_uint8 *'
|   |   |   |   |-BinaryOperator 0x7fffd83c9860 <line:2471:17, col:57> 'int' '='
|   |   |   |   | |-DeclRefExpr 0x7fffd83c9728 <col:17> 'int' lvalue Var 0x7fffd83c90f0 'strawEnd' 'int'
|   |   |   |   | `-ImplicitCastExpr 0x7fffd83c9848 <col:28, col:57> 'int' <IntegralCast>
|   |   |   |   |   `-CallExpr 0x7fffd83c9818 <col:28, col:57> 'stbtt_uint16':'unsigned short'
|   |   |   |   |     |-ImplicitCastExpr 0x7fffd83c9800 <col:28> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |   |   |     | `-DeclRefExpr 0x7fffd83c9750 <col:28> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |   |   |   |     `-BinaryOperator 0x7fffd83c97d8 <col:37, col:56> 'stbtt_uint8 *' '+'
|   |   |   |   |       |-ImplicitCastExpr 0x7fffd83c97c0 <col:37> 'stbtt_uint8 *' <LValueToRValue>
|   |   |   |   |       | `-DeclRefExpr 0x7fffd83c9778 <col:37> 'stbtt_uint8 *' lvalue Var 0x7fffd83c92f8 'classRangeRecord' 'stbtt_uint8 *'
|   |   |   |   |       `-IntegerLiteral 0x7fffd83c97a0 <col:56> 'int' 2
|   |   |   |   `-IfStmt 0x7fffd83c9d08 <line:2472:17, line:2477:70>
|   |   |   |     |-<<<NULL>>>
|   |   |   |     |-<<<NULL>>>
|   |   |   |     |-BinaryOperator 0x7fffd83c9908 <line:2472:21, col:30> 'int' '<'
|   |   |   |     | |-ImplicitCastExpr 0x7fffd83c98d8 <col:21> 'int' <LValueToRValue>
|   |   |   |     | | `-DeclRefExpr 0x7fffd83c9888 <col:21> 'int' lvalue Var 0x7fffd83c9168 'needle' 'int'
|   |   |   |     | `-ImplicitCastExpr 0x7fffd83c98f0 <col:30> 'int' <LValueToRValue>
|   |   |   |     |   `-DeclRefExpr 0x7fffd83c98b0 <col:30> 'int' lvalue Var 0x7fffd83c9078 'strawStart' 'int'
|   |   |   |     |-BinaryOperator 0x7fffd83c99e0 <line:2473:21, col:29> 'stbtt_int32':'int' '='
|   |   |   |     | |-DeclRefExpr 0x7fffd83c9930 <col:21> 'stbtt_int32':'int' lvalue Var 0x7fffd83c8eb8 'r' 'stbtt_int32':'int'
|   |   |   |     | `-BinaryOperator 0x7fffd83c99b8 <col:25, col:29> 'int' '-'
|   |   |   |     |   |-ImplicitCastExpr 0x7fffd83c99a0 <col:25> 'stbtt_int32':'int' <LValueToRValue>
|   |   |   |     |   | `-DeclRefExpr 0x7fffd83c9958 <col:25> 'stbtt_int32':'int' lvalue Var 0x7fffd83c8fc8 'm' 'stbtt_int32':'int'
|   |   |   |     |   `-IntegerLiteral 0x7fffd83c9980 <col:29> 'int' 1
|   |   |   |     `-IfStmt 0x7fffd83c9cd0 <line:2474:22, line:2477:70>
|   |   |   |       |-<<<NULL>>>
|   |   |   |       |-<<<NULL>>>
|   |   |   |       |-BinaryOperator 0x7fffd83c9a88 <line:2474:26, col:35> 'int' '>'
|   |   |   |       | |-ImplicitCastExpr 0x7fffd83c9a58 <col:26> 'int' <LValueToRValue>
|   |   |   |       | | `-DeclRefExpr 0x7fffd83c9a08 <col:26> 'int' lvalue Var 0x7fffd83c9168 'needle' 'int'
|   |   |   |       | `-ImplicitCastExpr 0x7fffd83c9a70 <col:35> 'int' <LValueToRValue>
|   |   |   |       |   `-DeclRefExpr 0x7fffd83c9a30 <col:35> 'int' lvalue Var 0x7fffd83c90f0 'strawEnd' 'int'
|   |   |   |       |-BinaryOperator 0x7fffd83c9b60 <line:2475:21, col:29> 'stbtt_int32':'int' '='
|   |   |   |       | |-DeclRefExpr 0x7fffd83c9ab0 <col:21> 'stbtt_int32':'int' lvalue Var 0x7fffd83c8e28 'l' 'stbtt_int32':'int'
|   |   |   |       | `-BinaryOperator 0x7fffd83c9b38 <col:25, col:29> 'int' '+'
|   |   |   |       |   |-ImplicitCastExpr 0x7fffd83c9b20 <col:25> 'stbtt_int32':'int' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x7fffd83c9ad8 <col:25> 'stbtt_int32':'int' lvalue Var 0x7fffd83c8fc8 'm' 'stbtt_int32':'int'
|   |   |   |       |   `-IntegerLiteral 0x7fffd83c9b00 <col:29> 'int' 1
|   |   |   |       `-ReturnStmt 0x7fffd83c9cb8 <line:2477:21, col:70>
|   |   |   |         `-CStyleCastExpr 0x7fffd83c9c90 <col:28, col:70> 'stbtt_int32':'int' <IntegralCast>
|   |   |   |           `-CallExpr 0x7fffd83c9c50 <col:41, col:70> 'stbtt_uint16':'unsigned short'
|   |   |   |             |-ImplicitCastExpr 0x7fffd83c9c38 <col:41> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |   |             | `-DeclRefExpr 0x7fffd83c9b88 <col:41> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |   |   |             `-BinaryOperator 0x7fffd83c9c10 <col:50, col:69> 'stbtt_uint8 *' '+'
|   |   |   |               |-ImplicitCastExpr 0x7fffd83c9bf8 <col:50> 'stbtt_uint8 *' <LValueToRValue>
|   |   |   |               | `-DeclRefExpr 0x7fffd83c9bb0 <col:50> 'stbtt_uint8 *' lvalue Var 0x7fffd83c92f8 'classRangeRecord' 'stbtt_uint8 *'
|   |   |   |               `-IntegerLiteral 0x7fffd83c9bd8 <col:69> 'int' 4
|   |   |   `-BinaryOperator 0x7fffd83c9ed0 <line:2480:13, col:53> 'stbtt_uint8 *' '='
|   |   |     |-DeclRefExpr 0x7fffd83c9da0 <col:13> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd83c7cf0 'classDefTable' 'stbtt_uint8 *'
|   |   |     `-BinaryOperator 0x7fffd83c9ea8 <col:29, col:53> 'stbtt_uint8 *' '+'
|   |   |       |-ImplicitCastExpr 0x7fffd83c9e90 <col:29> 'stbtt_uint8 *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x7fffd83c9dc8 <col:29> 'stbtt_uint8 *' lvalue Var 0x7fffd83c8d18 'classRangeRecords' 'stbtt_uint8 *'
|   |   |       `-BinaryOperator 0x7fffd83c9e68 <col:49, col:53> 'int' '*'
|   |   |         |-IntegerLiteral 0x7fffd83c9df0 <col:49> 'int' 6
|   |   |         `-ImplicitCastExpr 0x7fffd83c9e50 <col:53> 'int' <IntegralCast>
|   |   |           `-ImplicitCastExpr 0x7fffd83c9e38 <col:53> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |             `-DeclRefExpr 0x7fffd83c9e10 <col:53> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83c8b98 'classRangeCount' 'stbtt_uint16':'unsigned short'
|   |   |-BreakStmt 0x7fffd83c9f38 <line:2481:11>
|   |   |-DefaultStmt 0x7fffd83ca468 <line:2483:9, line:2486:9>
|   |   | `-CompoundStmt 0x7fffd83ca450 <line:2483:18, line:2486:9>
|   |   |   `-ParenExpr 0x7fffd83ca430 </usr/include/assert.h:108:3, line:113:7> 'void'
|   |   |     `-BinaryOperator 0x7fffd83ca408 <line:108:4, line:113:6> 'void' ','
|   |   |       |-CStyleCastExpr 0x7fffd83ca040 <line:108:4, col:33> 'void' <ToVoid>
|   |   |       | `-UnaryExprOrTypeTraitExpr 0x7fffd83ca010 <col:11, col:33> 'unsigned long' sizeof
|   |   |       |   `-ParenExpr 0x7fffd83c9ff0 <col:18, col:33> 'int'
|   |   |       |     `-ConditionalOperator 0x7fffd83c9fc0 <col:19, col:32> 'int'
|   |   |       |       |-ParenExpr 0x7fffd83c9f60 <col:19, col:24> 'int'
|   |   |       |       | `-IntegerLiteral 0x7fffd83c9f40 <././stb/stb_truetype.h:2485:26> 'int' 0
|   |   |       |       |-IntegerLiteral 0x7fffd83c9f80 </usr/include/assert.h:108:28> 'int' 1
|   |   |       |       `-IntegerLiteral 0x7fffd83c9fa0 <col:32> 'int' 0
|   |   |       `-UnaryOperator 0x7fffd83ca3e8 <col:36, line:113:6> 'void' prefix '__extension__'
|   |   |         `-StmtExpr 0x7fffd83ca3c8 <line:108:50, line:113:6> 'void'
|   |   |           `-CompoundStmt 0x7fffd83ca3b0 <line:108:51, line:113:5>
|   |   |             `-IfStmt 0x7fffd83ca378 <line:109:7, line:112:68>
|   |   |               |-<<<NULL>>>
|   |   |               |-<<<NULL>>>
|   |   |               |-IntegerLiteral 0x7fffd83ca068 <././stb/stb_truetype.h:2485:26> 'int' 0
|   |   |               |-NullStmt 0x7fffd83ca088 </usr/include/assert.h:110:9>
|   |   |               `-CallExpr 0x7fffd83ca280 <line:112:9, col:68> 'void'
|   |   |                 |-ImplicitCastExpr 0x7fffd83ca268 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |   |                 | `-DeclRefExpr 0x7fffd83ca098 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |   |                 |-ImplicitCastExpr 0x7fffd83ca300 <<scratch space>:264:1> 'const char *' <BitCast>
|   |   |                 | `-ImplicitCastExpr 0x7fffd83ca2c8 <col:1> 'char *' <ArrayToPointerDecay>
|   |   |                 |   `-StringLiteral 0x7fffd83ca0c0 <col:1> 'char [2]' lvalue "0"
|   |   |                 |-ImplicitCastExpr 0x7fffd83ca330 <line:265:1> 'const char *' <BitCast>
|   |   |                 | `-ImplicitCastExpr 0x7fffd83ca318 <col:1> 'char *' <ArrayToPointerDecay>
|   |   |                 |   `-StringLiteral 0x7fffd83ca0f0 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |   |                 |-ImplicitCastExpr 0x7fffd83ca348 <line:266:1> 'unsigned int' <IntegralCast>
|   |   |                 | `-IntegerLiteral 0x7fffd83ca130 <col:1> 'int' 2485
|   |   |                 `-ImplicitCastExpr 0x7fffd83ca360 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |   |                   `-UnaryOperator 0x7fffd83ca248 <col:30, col:44> 'const char [53]' lvalue prefix '__extension__'
|   |   |                     `-PredefinedExpr 0x7fffd83ca228 <col:44> 'const char [53]' lvalue __PRETTY_FUNCTION__
|   |   |                       `-StringLiteral 0x7fffd83ca1c8 <col:44> 'const char [53]' lvalue "stbtt_int32 stbtt__GetGlyphClass(stbtt_uint8 *, int)"
|   |   `-BreakStmt 0x7fffd83ca488 <././stb/stb_truetype.h:2486:11>
|   `-ReturnStmt 0x7fffd83ca510 <line:2489:5, col:13>
|     `-UnaryOperator 0x7fffd83ca4f0 <col:12, col:13> 'int' prefix '-'
|       `-IntegerLiteral 0x7fffd83ca4d0 <col:13> 'int' 1
|-FunctionDecl 0x7fffd83ca730 <line:2495:1, line:2621:1> line:2495:21 used stbtt__GetGlyphGPOSInfoAdvance 'stbtt_int32 (const stbtt_fontinfo *, int, int)' static
| |-ParmVarDecl 0x7fffd83ca560 <col:52, col:74> col:74 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83ca5d8 <col:80, col:84> col:84 used glyph1 'int'
| |-ParmVarDecl 0x7fffd83ca650 <col:92, col:96> col:96 used glyph2 'int'
| `-CompoundStmt 0x7fffd83d4088 <line:2496:1, line:2621:1>
|   |-DeclStmt 0x7fffd83ca858 <line:2497:5, col:34>
|   | `-VarDecl 0x7fffd83ca7f8 <col:5, col:18> col:18 used lookupListOffset 'stbtt_uint16':'unsigned short'
|   |-DeclStmt 0x7fffd83ca8e0 <line:2498:5, col:28>
|   | `-VarDecl 0x7fffd83ca880 <col:5, col:18> col:18 used lookupList 'stbtt_uint8 *'
|   |-DeclStmt 0x7fffd83ca968 <line:2499:5, col:29>
|   | `-VarDecl 0x7fffd83ca908 <col:5, col:18> col:18 used lookupCount 'stbtt_uint16':'unsigned short'
|   |-DeclStmt 0x7fffd83ca9f0 <line:2500:5, col:22>
|   | `-VarDecl 0x7fffd83ca990 <col:5, col:18> col:18 used data 'stbtt_uint8 *'
|   |-DeclStmt 0x7fffd83caa78 <line:2501:5, col:18>
|   | `-VarDecl 0x7fffd83caa18 <col:5, col:17> col:17 used i 'stbtt_int32':'int'
|   |-IfStmt 0x7fffd83cab78 <line:2503:5, col:29>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-UnaryOperator 0x7fffd83cab20 <col:9, col:16> 'int' prefix '!'
|   | | `-ImplicitCastExpr 0x7fffd83cab08 <col:10, col:16> 'int' <LValueToRValue>
|   | |   `-MemberExpr 0x7fffd83caad0 <col:10, col:16> 'const int' lvalue ->gpos 0x7fffd834cf38
|   | |     `-ImplicitCastExpr 0x7fffd83caab8 <col:10> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x7fffd83caa90 <col:10> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83ca560 'info' 'const stbtt_fontinfo *'
|   | |-ReturnStmt 0x7fffd83cab60 <col:22, col:29>
|   | | `-IntegerLiteral 0x7fffd83cab40 <col:29> 'int' 0
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x7fffd83cad20 <line:2505:5, col:31> 'stbtt_uint8 *' '='
|   | |-DeclRefExpr 0x7fffd83cabb0 <col:5> 'stbtt_uint8 *' lvalue Var 0x7fffd83ca990 'data' 'stbtt_uint8 *'
|   | `-BinaryOperator 0x7fffd83cacf8 <col:12, col:31> 'unsigned char *' '+'
|   |   |-ImplicitCastExpr 0x7fffd83cacc8 <col:12, col:18> 'unsigned char *' <LValueToRValue>
|   |   | `-MemberExpr 0x7fffd83cac18 <col:12, col:18> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   |   |   `-ImplicitCastExpr 0x7fffd83cac00 <col:12> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x7fffd83cabd8 <col:12> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83ca560 'info' 'const stbtt_fontinfo *'
|   |   `-ImplicitCastExpr 0x7fffd83cace0 <col:25, col:31> 'int' <LValueToRValue>
|   |     `-MemberExpr 0x7fffd83cac90 <col:25, col:31> 'const int' lvalue ->gpos 0x7fffd834cf38
|   |       `-ImplicitCastExpr 0x7fffd83cac78 <col:25> 'const stbtt_fontinfo *' <LValueToRValue>
|   |         `-DeclRefExpr 0x7fffd83cac50 <col:25> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83ca560 'info' 'const stbtt_fontinfo *'
|   |-IfStmt 0x7fffd83caed8 <line:2507:5, col:39>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83cae78 <col:9, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x7fffd83cae60 <col:9, col:24> 'int' <IntegralCast>
|   | | | `-CallExpr 0x7fffd83cae10 <col:9, col:24> 'stbtt_uint16':'unsigned short'
|   | | |   |-ImplicitCastExpr 0x7fffd83cadf8 <col:9> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x7fffd83cad48 <col:9> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   | | |   `-BinaryOperator 0x7fffd83cadd0 <col:18, col:23> 'stbtt_uint8 *' '+'
|   | | |     |-ImplicitCastExpr 0x7fffd83cadb8 <col:18> 'stbtt_uint8 *' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x7fffd83cad70 <col:18> 'stbtt_uint8 *' lvalue Var 0x7fffd83ca990 'data' 'stbtt_uint8 *'
|   | | |     `-IntegerLiteral 0x7fffd83cad98 <col:23> 'int' 0
|   | | `-IntegerLiteral 0x7fffd83cae40 <col:29> 'int' 1
|   | |-ReturnStmt 0x7fffd83caec0 <col:32, col:39>
|   | | `-IntegerLiteral 0x7fffd83caea0 <col:39> 'int' 0
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd83cb0a0 <line:2508:5, col:39>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83cb040 <col:9, col:29> 'int' '!='
|   | | |-ImplicitCastExpr 0x7fffd83cb028 <col:9, col:24> 'int' <IntegralCast>
|   | | | `-CallExpr 0x7fffd83cafd8 <col:9, col:24> 'stbtt_uint16':'unsigned short'
|   | | |   |-ImplicitCastExpr 0x7fffd83cafc0 <col:9> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x7fffd83caf10 <col:9> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   | | |   `-BinaryOperator 0x7fffd83caf98 <col:18, col:23> 'stbtt_uint8 *' '+'
|   | | |     |-ImplicitCastExpr 0x7fffd83caf80 <col:18> 'stbtt_uint8 *' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x7fffd83caf38 <col:18> 'stbtt_uint8 *' lvalue Var 0x7fffd83ca990 'data' 'stbtt_uint8 *'
|   | | |     `-IntegerLiteral 0x7fffd83caf60 <col:23> 'int' 2
|   | | `-IntegerLiteral 0x7fffd83cb008 <col:29> 'int' 0
|   | |-ReturnStmt 0x7fffd83cb088 <col:32, col:39>
|   | | `-IntegerLiteral 0x7fffd83cb068 <col:39> 'int' 0
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x7fffd83cb1f8 <line:2510:5, col:39> 'stbtt_uint16':'unsigned short' '='
|   | |-DeclRefExpr 0x7fffd83cb0d8 <col:5> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83ca7f8 'lookupListOffset' 'stbtt_uint16':'unsigned short'
|   | `-CallExpr 0x7fffd83cb1c8 <col:24, col:39> 'stbtt_uint16':'unsigned short'
|   |   |-ImplicitCastExpr 0x7fffd83cb1b0 <col:24> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x7fffd83cb100 <col:24> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |   `-BinaryOperator 0x7fffd83cb188 <col:33, col:38> 'stbtt_uint8 *' '+'
|   |     |-ImplicitCastExpr 0x7fffd83cb170 <col:33> 'stbtt_uint8 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd83cb128 <col:33> 'stbtt_uint8 *' lvalue Var 0x7fffd83ca990 'data' 'stbtt_uint8 *'
|   |     `-IntegerLiteral 0x7fffd83cb150 <col:38> 'int' 8
|   |-BinaryOperator 0x7fffd83cb308 <line:2511:5, col:25> 'stbtt_uint8 *' '='
|   | |-DeclRefExpr 0x7fffd83cb220 <col:5> 'stbtt_uint8 *' lvalue Var 0x7fffd83ca880 'lookupList' 'stbtt_uint8 *'
|   | `-BinaryOperator 0x7fffd83cb2e0 <col:18, col:25> 'stbtt_uint8 *' '+'
|   |   |-ImplicitCastExpr 0x7fffd83cb298 <col:18> 'stbtt_uint8 *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x7fffd83cb248 <col:18> 'stbtt_uint8 *' lvalue Var 0x7fffd83ca990 'data' 'stbtt_uint8 *'
|   |   `-ImplicitCastExpr 0x7fffd83cb2c8 <col:25> 'int' <IntegralCast>
|   |     `-ImplicitCastExpr 0x7fffd83cb2b0 <col:25> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd83cb270 <col:25> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83ca7f8 'lookupListOffset' 'stbtt_uint16':'unsigned short'
|   |-BinaryOperator 0x7fffd83cb408 <line:2512:5, col:38> 'stbtt_uint16':'unsigned short' '='
|   | |-DeclRefExpr 0x7fffd83cb330 <col:5> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83ca908 'lookupCount' 'stbtt_uint16':'unsigned short'
|   | `-CallExpr 0x7fffd83cb3c0 <col:19, col:38> 'stbtt_uint16':'unsigned short'
|   |   |-ImplicitCastExpr 0x7fffd83cb3a8 <col:19> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x7fffd83cb358 <col:19> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |   `-ImplicitCastExpr 0x7fffd83cb3f0 <col:28> 'stbtt_uint8 *' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd83cb380 <col:28> 'stbtt_uint8 *' lvalue Var 0x7fffd83ca880 'lookupList' 'stbtt_uint8 *'
|   |-ForStmt 0x7fffd83d4018 <line:2514:5, line:2618:5>
|   | |-BinaryOperator 0x7fffd83cb478 <line:2514:10, col:12> 'stbtt_int32':'int' '='
|   | | |-DeclRefExpr 0x7fffd83cb430 <col:10> 'stbtt_int32':'int' lvalue Var 0x7fffd83caa18 'i' 'stbtt_int32':'int'
|   | | `-IntegerLiteral 0x7fffd83cb458 <col:12> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83cb538 <col:15, col:17> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd83cb4f0 <col:15> 'stbtt_int32':'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd83cb4a0 <col:15> 'stbtt_int32':'int' lvalue Var 0x7fffd83caa18 'i' 'stbtt_int32':'int'
|   | | `-ImplicitCastExpr 0x7fffd83cb520 <col:17> 'int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x7fffd83cb508 <col:17> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   | |     `-DeclRefExpr 0x7fffd83cb4c8 <col:17> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83ca908 'lookupCount' 'stbtt_uint16':'unsigned short'
|   | |-UnaryOperator 0x7fffd83cb588 <col:30, col:32> 'stbtt_int32':'int' prefix '++'
|   | | `-DeclRefExpr 0x7fffd83cb560 <col:32> 'stbtt_int32':'int' lvalue Var 0x7fffd83caa18 'i' 'stbtt_int32':'int'
|   | `-CompoundStmt 0x7fffd83d3fd8 <col:35, line:2618:5>
|   |   |-DeclStmt 0x7fffd83cb7c0 <line:2515:9, col:69>
|   |   | `-VarDecl 0x7fffd83cb5b8 <col:9, col:68> col:22 used lookupOffset 'stbtt_uint16':'unsigned short' cinit
|   |   |   `-CallExpr 0x7fffd83cb790 <col:37, col:68> 'stbtt_uint16':'unsigned short'
|   |   |     |-ImplicitCastExpr 0x7fffd83cb778 <col:37> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x7fffd83cb618 <col:37> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |   |     `-BinaryOperator 0x7fffd83cb750 <col:46, col:67> 'stbtt_uint8 *' '+'
|   |   |       |-BinaryOperator 0x7fffd83cb6a0 <col:46, col:59> 'stbtt_uint8 *' '+'
|   |   |       | |-ImplicitCastExpr 0x7fffd83cb688 <col:46> 'stbtt_uint8 *' <LValueToRValue>
|   |   |       | | `-DeclRefExpr 0x7fffd83cb640 <col:46> 'stbtt_uint8 *' lvalue Var 0x7fffd83ca880 'lookupList' 'stbtt_uint8 *'
|   |   |       | `-IntegerLiteral 0x7fffd83cb668 <col:59> 'int' 2
|   |   |       `-BinaryOperator 0x7fffd83cb728 <col:63, col:67> 'int' '*'
|   |   |         |-IntegerLiteral 0x7fffd83cb6c8 <col:63> 'int' 2
|   |   |         `-ImplicitCastExpr 0x7fffd83cb710 <col:67> 'stbtt_int32':'int' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x7fffd83cb6e8 <col:67> 'stbtt_int32':'int' lvalue Var 0x7fffd83caa18 'i' 'stbtt_int32':'int'
|   |   |-DeclStmt 0x7fffd83cb908 <line:2516:9, col:61>
|   |   | `-VarDecl 0x7fffd83cb7e8 <col:9, col:49> col:22 used lookupTable 'stbtt_uint8 *' cinit
|   |   |   `-BinaryOperator 0x7fffd83cb8e0 <col:36, col:49> 'stbtt_uint8 *' '+'
|   |   |     |-ImplicitCastExpr 0x7fffd83cb898 <col:36> 'stbtt_uint8 *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x7fffd83cb848 <col:36> 'stbtt_uint8 *' lvalue Var 0x7fffd83ca880 'lookupList' 'stbtt_uint8 *'
|   |   |     `-ImplicitCastExpr 0x7fffd83cb8c8 <col:49> 'int' <IntegralCast>
|   |   |       `-ImplicitCastExpr 0x7fffd83cb8b0 <col:49> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x7fffd83cb870 <col:49> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83cb5b8 'lookupOffset' 'stbtt_uint16':'unsigned short'
|   |   |-DeclStmt 0x7fffd83cba40 <line:2518:9, col:56>
|   |   | `-VarDecl 0x7fffd83cb930 <col:9, col:55> col:22 used lookupType 'stbtt_uint16':'unsigned short' cinit
|   |   |   `-CallExpr 0x7fffd83cb9f8 <col:35, col:55> 'stbtt_uint16':'unsigned short'
|   |   |     |-ImplicitCastExpr 0x7fffd83cb9e0 <col:35> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x7fffd83cb990 <col:35> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |   |     `-ImplicitCastExpr 0x7fffd83cba28 <col:44> 'stbtt_uint8 *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x7fffd83cb9b8 <col:44> 'stbtt_uint8 *' lvalue Var 0x7fffd83cb7e8 'lookupTable' 'stbtt_uint8 *'
|   |   |-DeclStmt 0x7fffd83cbbc0 <line:2519:9, col:63>
|   |   | `-VarDecl 0x7fffd83cba68 <col:9, col:62> col:22 used subTableCount 'stbtt_uint16':'unsigned short' cinit
|   |   |   `-CallExpr 0x7fffd83cbb90 <col:38, col:62> 'stbtt_uint16':'unsigned short'
|   |   |     |-ImplicitCastExpr 0x7fffd83cbb78 <col:38> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |     | `-DeclRefExpr 0x7fffd83cbac8 <col:38> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |   |     `-BinaryOperator 0x7fffd83cbb50 <col:47, col:61> 'stbtt_uint8 *' '+'
|   |   |       |-ImplicitCastExpr 0x7fffd83cbb38 <col:47> 'stbtt_uint8 *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x7fffd83cbaf0 <col:47> 'stbtt_uint8 *' lvalue Var 0x7fffd83cb7e8 'lookupTable' 'stbtt_uint8 *'
|   |   |       `-IntegerLiteral 0x7fffd83cbb18 <col:61> 'int' 4
|   |   |-DeclStmt 0x7fffd83cbcd0 <line:2520:9, col:55>
|   |   | `-VarDecl 0x7fffd83cbbe8 <col:9, col:54> col:22 used subTableOffsets 'stbtt_uint8 *' cinit
|   |   |   `-BinaryOperator 0x7fffd83cbca8 <col:40, col:54> 'stbtt_uint8 *' '+'
|   |   |     |-ImplicitCastExpr 0x7fffd83cbc90 <col:40> 'stbtt_uint8 *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x7fffd83cbc48 <col:40> 'stbtt_uint8 *' lvalue Var 0x7fffd83cb7e8 'lookupTable' 'stbtt_uint8 *'
|   |   |     `-IntegerLiteral 0x7fffd83cbc70 <col:54> 'int' 6
|   |   `-SwitchStmt 0x7fffd83cbd40 <line:2521:9, line:2617:9>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-ImplicitCastExpr 0x7fffd83cbd28 <line:2521:16> 'int' <IntegralCast>
|   |     | `-ImplicitCastExpr 0x7fffd83cbd10 <col:16> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fffd83cbce8 <col:16> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83cb930 'lookupType' 'stbtt_uint16':'unsigned short'
|   |     `-CompoundStmt 0x7fffd83d3fb0 <col:28, line:2617:9>
|   |       |-CaseStmt 0x7fffd83cbd90 <line:2522:13, line:2612:13>
|   |       | |-IntegerLiteral 0x7fffd83cbd70 <line:2522:18> 'int' 2
|   |       | |-<<<NULL>>>
|   |       | `-CompoundStmt 0x7fffd83d3f50 <col:21, line:2612:13>
|   |       |   |-DeclStmt 0x7fffd83cbe38 <line:2523:17, col:32>
|   |       |   | `-VarDecl 0x7fffd83cbdd8 <col:17, col:29> col:29 used sti 'stbtt_int32':'int'
|   |       |   |-ForStmt 0x7fffd83d3f10 <line:2524:17, line:2610:17>
|   |       |   | |-BinaryOperator 0x7fffd83cbe98 <line:2524:22, col:26> 'stbtt_int32':'int' '='
|   |       |   | | |-DeclRefExpr 0x7fffd83cbe50 <col:22> 'stbtt_int32':'int' lvalue Var 0x7fffd83cbdd8 'sti' 'stbtt_int32':'int'
|   |       |   | | `-IntegerLiteral 0x7fffd83cbe78 <col:26> 'int' 0
|   |       |   | |-<<<NULL>>>
|   |       |   | |-BinaryOperator 0x7fffd83cbf58 <col:29, col:33> 'int' '<'
|   |       |   | | |-ImplicitCastExpr 0x7fffd83cbf10 <col:29> 'stbtt_int32':'int' <LValueToRValue>
|   |       |   | | | `-DeclRefExpr 0x7fffd83cbec0 <col:29> 'stbtt_int32':'int' lvalue Var 0x7fffd83cbdd8 'sti' 'stbtt_int32':'int'
|   |       |   | | `-ImplicitCastExpr 0x7fffd83cbf40 <col:33> 'int' <IntegralCast>
|   |       |   | |   `-ImplicitCastExpr 0x7fffd83cbf28 <col:33> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   | |     `-DeclRefExpr 0x7fffd83cbee8 <col:33> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83cba68 'subTableCount' 'stbtt_uint16':'unsigned short'
|   |       |   | |-UnaryOperator 0x7fffd83cbfa8 <col:48, col:51> 'stbtt_int32':'int' postfix '++'
|   |       |   | | `-DeclRefExpr 0x7fffd83cbf80 <col:48> 'stbtt_int32':'int' lvalue Var 0x7fffd83cbdd8 'sti' 'stbtt_int32':'int'
|   |       |   | `-CompoundStmt 0x7fffd83d3ec8 <col:55, line:2610:17>
|   |       |   |   |-DeclStmt 0x7fffd83cc198 <line:2525:21, col:86>
|   |       |   |   | `-VarDecl 0x7fffd83cbfd8 <col:21, col:85> col:34 used subtableOffset 'stbtt_uint16':'unsigned short' cinit
|   |       |   |   |   `-CallExpr 0x7fffd83cc168 <col:51, col:85> 'stbtt_uint16':'unsigned short'
|   |       |   |   |     |-ImplicitCastExpr 0x7fffd83cc150 <col:51> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       |   |   |     | `-DeclRefExpr 0x7fffd83cc038 <col:51> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       |   |   |     `-BinaryOperator 0x7fffd83cc128 <col:60, col:82> 'stbtt_uint8 *' '+'
|   |       |   |   |       |-ImplicitCastExpr 0x7fffd83cc110 <col:60> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |   |       | `-DeclRefExpr 0x7fffd83cc060 <col:60> 'stbtt_uint8 *' lvalue Var 0x7fffd83cbbe8 'subTableOffsets' 'stbtt_uint8 *'
|   |       |   |   |       `-BinaryOperator 0x7fffd83cc0e8 <col:78, col:82> 'int' '*'
|   |       |   |   |         |-IntegerLiteral 0x7fffd83cc088 <col:78> 'int' 2
|   |       |   |   |         `-ImplicitCastExpr 0x7fffd83cc0d0 <col:82> 'stbtt_int32':'int' <LValueToRValue>
|   |       |   |   |           `-DeclRefExpr 0x7fffd83cc0a8 <col:82> 'stbtt_int32':'int' lvalue Var 0x7fffd83cbdd8 'sti' 'stbtt_int32':'int'
|   |       |   |   |-DeclStmt 0x7fffd83cc2e0 <line:2526:21, col:70>
|   |       |   |   | `-VarDecl 0x7fffd83cc1c0 <col:21, col:56> col:34 used table 'stbtt_uint8 *' cinit
|   |       |   |   |   `-BinaryOperator 0x7fffd83cc2b8 <col:42, col:56> 'stbtt_uint8 *' '+'
|   |       |   |   |     |-ImplicitCastExpr 0x7fffd83cc270 <col:42> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |   |     | `-DeclRefExpr 0x7fffd83cc220 <col:42> 'stbtt_uint8 *' lvalue Var 0x7fffd83cb7e8 'lookupTable' 'stbtt_uint8 *'
|   |       |   |   |     `-ImplicitCastExpr 0x7fffd83cc2a0 <col:56> 'int' <IntegralCast>
|   |       |   |   |       `-ImplicitCastExpr 0x7fffd83cc288 <col:56> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |   |         `-DeclRefExpr 0x7fffd83cc248 <col:56> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83cbfd8 'subtableOffset' 'stbtt_uint16':'unsigned short'
|   |       |   |   |-DeclStmt 0x7fffd83cc430 <line:2527:21, col:61>
|   |       |   |   | `-VarDecl 0x7fffd83cc320 <col:21, col:60> col:34 used posFormat 'stbtt_uint16':'unsigned short' cinit
|   |       |   |   |   `-CallExpr 0x7fffd83cc3e8 <col:46, col:60> 'stbtt_uint16':'unsigned short'
|   |       |   |   |     |-ImplicitCastExpr 0x7fffd83cc3d0 <col:46> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       |   |   |     | `-DeclRefExpr 0x7fffd83cc380 <col:46> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       |   |   |     `-ImplicitCastExpr 0x7fffd83cc418 <col:55> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |   |       `-DeclRefExpr 0x7fffd83cc3a8 <col:55> 'stbtt_uint8 *' lvalue Var 0x7fffd83cc1c0 'table' 'stbtt_uint8 *'
|   |       |   |   |-DeclStmt 0x7fffd83cc5b0 <line:2528:21, col:70>
|   |       |   |   | `-VarDecl 0x7fffd83cc458 <col:21, col:69> col:34 used coverageOffset 'stbtt_uint16':'unsigned short' cinit
|   |       |   |   |   `-CallExpr 0x7fffd83cc580 <col:51, col:69> 'stbtt_uint16':'unsigned short'
|   |       |   |   |     |-ImplicitCastExpr 0x7fffd83cc568 <col:51> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       |   |   |     | `-DeclRefExpr 0x7fffd83cc4b8 <col:51> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       |   |   |     `-BinaryOperator 0x7fffd83cc540 <col:60, col:68> 'stbtt_uint8 *' '+'
|   |       |   |   |       |-ImplicitCastExpr 0x7fffd83cc528 <col:60> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |   |       | `-DeclRefExpr 0x7fffd83cc4e0 <col:60> 'stbtt_uint8 *' lvalue Var 0x7fffd83cc1c0 'table' 'stbtt_uint8 *'
|   |       |   |   |       `-IntegerLiteral 0x7fffd83cc508 <col:68> 'int' 2
|   |       |   |   |-DeclStmt 0x7fffd83cc810 <line:2529:21, col:104>
|   |       |   |   | `-VarDecl 0x7fffd83cc5d8 <col:21, col:103> col:33 used coverageIndex 'stbtt_int32':'int' cinit
|   |       |   |   |   `-CallExpr 0x7fffd83cc7c0 <col:49, col:103> 'stbtt_int32':'int'
|   |       |   |   |     |-ImplicitCastExpr 0x7fffd83cc7a8 <col:49> 'stbtt_int32 (*)(stbtt_uint8 *, int)' <FunctionToPointerDecay>
|   |       |   |   |     | `-DeclRefExpr 0x7fffd83cc638 <col:49> 'stbtt_int32 (stbtt_uint8 *, int)' Function 0x7fffd83c5060 'stbtt__GetCoverageIndex' 'stbtt_int32 (stbtt_uint8 *, int)'
|   |       |   |   |     |-BinaryOperator 0x7fffd83cc6f8 <col:73, col:81> 'stbtt_uint8 *' '+'
|   |       |   |   |     | |-ImplicitCastExpr 0x7fffd83cc6b0 <col:73> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |   |     | | `-DeclRefExpr 0x7fffd83cc660 <col:73> 'stbtt_uint8 *' lvalue Var 0x7fffd83cc1c0 'table' 'stbtt_uint8 *'
|   |       |   |   |     | `-ImplicitCastExpr 0x7fffd83cc6e0 <col:81> 'int' <IntegralCast>
|   |       |   |   |     |   `-ImplicitCastExpr 0x7fffd83cc6c8 <col:81> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |   |     |     `-DeclRefExpr 0x7fffd83cc688 <col:81> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83cc458 'coverageOffset' 'stbtt_uint16':'unsigned short'
|   |       |   |   |     `-ImplicitCastExpr 0x7fffd83cc7f8 <col:97> 'int' <LValueToRValue>
|   |       |   |   |       `-DeclRefExpr 0x7fffd83cc720 <col:97> 'int' lvalue ParmVar 0x7fffd83ca5d8 'glyph1' 'int'
|   |       |   |   |-IfStmt 0x7fffd83cc8d8 <line:2530:21, col:46>
|   |       |   |   | |-<<<NULL>>>
|   |       |   |   | |-<<<NULL>>>
|   |       |   |   | |-BinaryOperator 0x7fffd83cc8a8 <col:25, col:43> 'int' '=='
|   |       |   |   | | |-ImplicitCastExpr 0x7fffd83cc890 <col:25> 'stbtt_int32':'int' <LValueToRValue>
|   |       |   |   | | | `-DeclRefExpr 0x7fffd83cc828 <col:25> 'stbtt_int32':'int' lvalue Var 0x7fffd83cc5d8 'coverageIndex' 'stbtt_int32':'int'
|   |       |   |   | | `-UnaryOperator 0x7fffd83cc870 <col:42, col:43> 'int' prefix '-'
|   |       |   |   | |   `-IntegerLiteral 0x7fffd83cc850 <col:43> 'int' 1
|   |       |   |   | |-ContinueStmt 0x7fffd83cc8d0 <col:46>
|   |       |   |   | `-<<<NULL>>>
|   |       |   |   `-SwitchStmt 0x7fffd83cc968 <line:2532:21, line:2609:21>
|   |       |   |     |-<<<NULL>>>
|   |       |   |     |-<<<NULL>>>
|   |       |   |     |-ImplicitCastExpr 0x7fffd83cc950 <line:2532:29> 'int' <IntegralCast>
|   |       |   |     | `-ImplicitCastExpr 0x7fffd83cc938 <col:29> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |     |   `-DeclRefExpr 0x7fffd83cc910 <col:29> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83cc320 'posFormat' 'stbtt_uint16':'unsigned short'
|   |       |   |     `-CompoundStmt 0x7fffd83d3e88 <col:40, line:2609:21>
|   |       |   |       |-CaseStmt 0x7fffd83cc9b8 <line:2533:25, line:2574:25>
|   |       |   |       | |-IntegerLiteral 0x7fffd83cc998 <line:2533:30> 'int' 1
|   |       |   |       | |-<<<NULL>>>
|   |       |   |       | `-CompoundStmt 0x7fffd83d13a0 <col:33, line:2574:25>
|   |       |   |       |   |-DeclStmt 0x7fffd83ccb60 <line:2534:29, col:48>
|   |       |   |       |   | |-VarDecl 0x7fffd83cca00 <col:29, col:41> col:41 used l 'stbtt_int32':'int'
|   |       |   |       |   | |-VarDecl 0x7fffd83cca70 <col:29, col:44> col:44 used r 'stbtt_int32':'int'
|   |       |   |       |   | `-VarDecl 0x7fffd83ccae0 <col:29, col:47> col:47 used m 'stbtt_int32':'int'
|   |       |   |       |   |-DeclStmt 0x7fffd83ccc80 <line:2535:29, col:46>
|   |       |   |       |   | |-VarDecl 0x7fffd83ccb90 <col:29, col:33> col:33 used straw 'int'
|   |       |   |       |   | `-VarDecl 0x7fffd83ccc08 <col:29, col:40> col:40 used needle 'int'
|   |       |   |       |   |-DeclStmt 0x7fffd83cce00 <line:2536:29, col:76>
|   |       |   |       |   | `-VarDecl 0x7fffd83ccca8 <col:29, col:75> col:42 used valueFormat1 'stbtt_uint16':'unsigned short' cinit
|   |       |   |       |   |   `-CallExpr 0x7fffd83ccdd0 <col:57, col:75> 'stbtt_uint16':'unsigned short'
|   |       |   |       |   |     |-ImplicitCastExpr 0x7fffd83ccdb8 <col:57> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       |   |       |   |     | `-DeclRefExpr 0x7fffd83ccd08 <col:57> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       |   |       |   |     `-BinaryOperator 0x7fffd83ccd90 <col:66, col:74> 'stbtt_uint8 *' '+'
|   |       |   |       |   |       |-ImplicitCastExpr 0x7fffd83ccd78 <col:66> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |       |   |       | `-DeclRefExpr 0x7fffd83ccd30 <col:66> 'stbtt_uint8 *' lvalue Var 0x7fffd83cc1c0 'table' 'stbtt_uint8 *'
|   |       |   |       |   |       `-IntegerLiteral 0x7fffd83ccd58 <col:74> 'int' 4
|   |       |   |       |   |-DeclStmt 0x7fffd83ccf80 <line:2537:29, col:76>
|   |       |   |       |   | `-VarDecl 0x7fffd83cce28 <col:29, col:75> col:42 used valueFormat2 'stbtt_uint16':'unsigned short' cinit
|   |       |   |       |   |   `-CallExpr 0x7fffd83ccf50 <col:57, col:75> 'stbtt_uint16':'unsigned short'
|   |       |   |       |   |     |-ImplicitCastExpr 0x7fffd83ccf38 <col:57> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       |   |       |   |     | `-DeclRefExpr 0x7fffd83cce88 <col:57> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       |   |       |   |     `-BinaryOperator 0x7fffd83ccf10 <col:66, col:74> 'stbtt_uint8 *' '+'
|   |       |   |       |   |       |-ImplicitCastExpr 0x7fffd83ccef8 <col:66> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |       |   |       | `-DeclRefExpr 0x7fffd83cceb0 <col:66> 'stbtt_uint8 *' lvalue Var 0x7fffd83cc1c0 'table' 'stbtt_uint8 *'
|   |       |   |       |   |       `-IntegerLiteral 0x7fffd83cced8 <col:74> 'int' 6
|   |       |   |       |   |-DeclStmt 0x7fffd83cd028 <line:2538:29, col:71>
|   |       |   |       |   | `-VarDecl 0x7fffd83ccfa8 <col:29, col:70> col:41 used valueRecordPairSizeInBytes 'stbtt_int32':'int' cinit
|   |       |   |       |   |   `-IntegerLiteral 0x7fffd83cd008 <col:70> 'int' 2
|   |       |   |       |   |-DeclStmt 0x7fffd83cd1a8 <line:2539:29, col:76>
|   |       |   |       |   | `-VarDecl 0x7fffd83cd050 <col:29, col:75> col:42 used pairSetCount 'stbtt_uint16':'unsigned short' cinit
|   |       |   |       |   |   `-CallExpr 0x7fffd83cd178 <col:57, col:75> 'stbtt_uint16':'unsigned short'
|   |       |   |       |   |     |-ImplicitCastExpr 0x7fffd83cd160 <col:57> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       |   |       |   |     | `-DeclRefExpr 0x7fffd83cd0b0 <col:57> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       |   |       |   |     `-BinaryOperator 0x7fffd83cd138 <col:66, col:74> 'stbtt_uint8 *' '+'
|   |       |   |       |   |       |-ImplicitCastExpr 0x7fffd83cd120 <col:66> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |       |   |       | `-DeclRefExpr 0x7fffd83cd0d8 <col:66> 'stbtt_uint8 *' lvalue Var 0x7fffd83cc1c0 'table' 'stbtt_uint8 *'
|   |       |   |       |   |       `-IntegerLiteral 0x7fffd83cd100 <col:74> 'int' 8
|   |       |   |       |   |-DeclStmt 0x7fffd83cd3d8 <line:2540:29, col:98>
|   |       |   |       |   | `-VarDecl 0x7fffd83cd1d0 <col:29, col:97> col:42 used pairPosOffset 'stbtt_uint16':'unsigned short' cinit
|   |       |   |       |   |   `-CallExpr 0x7fffd83cd3a8 <col:58, col:97> 'stbtt_uint16':'unsigned short'
|   |       |   |       |   |     |-ImplicitCastExpr 0x7fffd83cd390 <col:58> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       |   |       |   |     | `-DeclRefExpr 0x7fffd83cd230 <col:58> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       |   |       |   |     `-BinaryOperator 0x7fffd83cd368 <col:67, col:84> 'stbtt_uint8 *' '+'
|   |       |   |       |   |       |-BinaryOperator 0x7fffd83cd2b8 <col:67, col:75> 'stbtt_uint8 *' '+'
|   |       |   |       |   |       | |-ImplicitCastExpr 0x7fffd83cd2a0 <col:67> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |       |   |       | | `-DeclRefExpr 0x7fffd83cd258 <col:67> 'stbtt_uint8 *' lvalue Var 0x7fffd83cc1c0 'table' 'stbtt_uint8 *'
|   |       |   |       |   |       | `-IntegerLiteral 0x7fffd83cd280 <col:75> 'int' 10
|   |       |   |       |   |       `-BinaryOperator 0x7fffd83cd340 <col:80, col:84> 'int' '*'
|   |       |   |       |   |         |-IntegerLiteral 0x7fffd83cd2e0 <col:80> 'int' 2
|   |       |   |       |   |         `-ImplicitCastExpr 0x7fffd83cd328 <col:84> 'stbtt_int32':'int' <LValueToRValue>
|   |       |   |       |   |           `-DeclRefExpr 0x7fffd83cd300 <col:84> 'stbtt_int32':'int' lvalue Var 0x7fffd83cc5d8 'coverageIndex' 'stbtt_int32':'int'
|   |       |   |       |   |-DeclStmt 0x7fffd83cd520 <line:2541:29, col:80>
|   |       |   |       |   | `-VarDecl 0x7fffd83cd400 <col:29, col:67> col:42 used pairValueTable 'stbtt_uint8 *' cinit
|   |       |   |       |   |   `-BinaryOperator 0x7fffd83cd4f8 <col:59, col:67> 'stbtt_uint8 *' '+'
|   |       |   |       |   |     |-ImplicitCastExpr 0x7fffd83cd4b0 <col:59> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |       |   |     | `-DeclRefExpr 0x7fffd83cd460 <col:59> 'stbtt_uint8 *' lvalue Var 0x7fffd83cc1c0 'table' 'stbtt_uint8 *'
|   |       |   |       |   |     `-ImplicitCastExpr 0x7fffd83cd4e0 <col:67> 'int' <IntegralCast>
|   |       |   |       |   |       `-ImplicitCastExpr 0x7fffd83cd4c8 <col:67> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |       |   |         `-DeclRefExpr 0x7fffd83cd488 <col:67> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83cd1d0 'pairPosOffset' 'stbtt_uint16':'unsigned short'
|   |       |   |       |   |-DeclStmt 0x7fffd83cd658 <line:2542:29, col:83>
|   |       |   |       |   | `-VarDecl 0x7fffd83cd548 <col:29, col:82> col:42 used pairValueCount 'stbtt_uint16':'unsigned short' cinit
|   |       |   |       |   |   `-CallExpr 0x7fffd83cd610 <col:59, col:82> 'stbtt_uint16':'unsigned short'
|   |       |   |       |   |     |-ImplicitCastExpr 0x7fffd83cd5f8 <col:59> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       |   |       |   |     | `-DeclRefExpr 0x7fffd83cd5a8 <col:59> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       |   |       |   |     `-ImplicitCastExpr 0x7fffd83cd640 <col:68> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |       |   |       `-DeclRefExpr 0x7fffd83cd5d0 <col:68> 'stbtt_uint8 *' lvalue Var 0x7fffd83cd400 'pairValueTable' 'stbtt_uint8 *'
|   |       |   |       |   |-DeclStmt 0x7fffd83cd768 <line:2543:29, col:77>
|   |       |   |       |   | `-VarDecl 0x7fffd83cd680 <col:29, col:76> col:42 used pairValueArray 'stbtt_uint8 *' cinit
|   |       |   |       |   |   `-BinaryOperator 0x7fffd83cd740 <col:59, col:76> 'stbtt_uint8 *' '+'
|   |       |   |       |   |     |-ImplicitCastExpr 0x7fffd83cd728 <col:59> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |       |   |     | `-DeclRefExpr 0x7fffd83cd6e0 <col:59> 'stbtt_uint8 *' lvalue Var 0x7fffd83cd400 'pairValueTable' 'stbtt_uint8 *'
|   |       |   |       |   |     `-IntegerLiteral 0x7fffd83cd708 <col:76> 'int' 2
|   |       |   |       |   |-NullStmt 0x7fffd83cd780 <line:2545:70>
|   |       |   |       |   |-IfStmt 0x7fffd83cd868 <line:2546:29, col:59>
|   |       |   |       |   | |-<<<NULL>>>
|   |       |   |       |   | |-<<<NULL>>>
|   |       |   |       |   | |-BinaryOperator 0x7fffd83cd808 <col:33, col:49> 'int' '!='
|   |       |   |       |   | | |-ImplicitCastExpr 0x7fffd83cd7f0 <col:33> 'int' <IntegralCast>
|   |       |   |       |   | | | `-ImplicitCastExpr 0x7fffd83cd7d8 <col:33> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |       |   | | |   `-DeclRefExpr 0x7fffd83cd790 <col:33> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83ccca8 'valueFormat1' 'stbtt_uint16':'unsigned short'
|   |       |   |       |   | | `-IntegerLiteral 0x7fffd83cd7b8 <col:49> 'int' 4
|   |       |   |       |   | |-ReturnStmt 0x7fffd83cd850 <col:52, col:59>
|   |       |   |       |   | | `-IntegerLiteral 0x7fffd83cd830 <col:59> 'int' 0
|   |       |   |       |   | `-<<<NULL>>>
|   |       |   |       |   |-NullStmt 0x7fffd83cd8a0 <line:2547:70>
|   |       |   |       |   |-IfStmt 0x7fffd83cd988 <line:2548:29, col:59>
|   |       |   |       |   | |-<<<NULL>>>
|   |       |   |       |   | |-<<<NULL>>>
|   |       |   |       |   | |-BinaryOperator 0x7fffd83cd928 <col:33, col:49> 'int' '!='
|   |       |   |       |   | | |-ImplicitCastExpr 0x7fffd83cd910 <col:33> 'int' <IntegralCast>
|   |       |   |       |   | | | `-ImplicitCastExpr 0x7fffd83cd8f8 <col:33> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |       |   | | |   `-DeclRefExpr 0x7fffd83cd8b0 <col:33> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83cce28 'valueFormat2' 'stbtt_uint16':'unsigned short'
|   |       |   |       |   | | `-IntegerLiteral 0x7fffd83cd8d8 <col:49> 'int' 0
|   |       |   |       |   | |-ReturnStmt 0x7fffd83cd970 <col:52, col:59>
|   |       |   |       |   | | `-IntegerLiteral 0x7fffd83cd950 <col:59> 'int' 0
|   |       |   |       |   | `-<<<NULL>>>
|   |       |   |       |   |-ParenExpr 0x7fffd83ce008 </usr/include/assert.h:108:3, line:113:7> 'void'
|   |       |   |       |   | `-BinaryOperator 0x7fffd83cdfe0 <line:108:4, line:113:6> 'void' ','
|   |       |   |       |   |   |-CStyleCastExpr 0x7fffd83cdb60 <line:108:4, col:33> 'void' <ToVoid>
|   |       |   |       |   |   | `-UnaryExprOrTypeTraitExpr 0x7fffd83cdb30 <col:11, col:33> 'unsigned long' sizeof
|   |       |   |       |   |   |   `-ParenExpr 0x7fffd83cdb10 <col:18, col:33> 'int'
|   |       |   |       |   |   |     `-ConditionalOperator 0x7fffd83cdae0 <col:19, col:32> 'int'
|   |       |   |       |   |   |       |-ParenExpr 0x7fffd83cda80 <col:19, col:24> 'int'
|   |       |   |       |   |   |       | `-BinaryOperator 0x7fffd83cda58 <././stb/stb_truetype.h:2550:42, col:58> 'int' '<'
|   |       |   |       |   |   |       |   |-ImplicitCastExpr 0x7fffd83cda10 <col:42> 'stbtt_int32':'int' <LValueToRValue>
|   |       |   |       |   |   |       |   | `-DeclRefExpr 0x7fffd83cd9c0 <col:42> 'stbtt_int32':'int' lvalue Var 0x7fffd83cc5d8 'coverageIndex' 'stbtt_int32':'int'
|   |       |   |       |   |   |       |   `-ImplicitCastExpr 0x7fffd83cda40 <col:58> 'int' <IntegralCast>
|   |       |   |       |   |   |       |     `-ImplicitCastExpr 0x7fffd83cda28 <col:58> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |       |   |   |       |       `-DeclRefExpr 0x7fffd83cd9e8 <col:58> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83cd050 'pairSetCount' 'stbtt_uint16':'unsigned short'
|   |       |   |       |   |   |       |-IntegerLiteral 0x7fffd83cdaa0 </usr/include/assert.h:108:28> 'int' 1
|   |       |   |       |   |   |       `-IntegerLiteral 0x7fffd83cdac0 <col:32> 'int' 0
|   |       |   |       |   |   `-UnaryOperator 0x7fffd83cdfc0 <col:36, line:113:6> 'void' prefix '__extension__'
|   |       |   |       |   |     `-StmtExpr 0x7fffd83cdfa0 <line:108:50, line:113:6> 'void'
|   |       |   |       |   |       `-CompoundStmt 0x7fffd83cdf88 <line:108:51, line:113:5>
|   |       |   |       |   |         `-IfStmt 0x7fffd83cdf50 <line:109:7, line:112:68>
|   |       |   |       |   |           |-<<<NULL>>>
|   |       |   |       |   |           |-<<<NULL>>>
|   |       |   |       |   |           |-BinaryOperator 0x7fffd83cdc20 <././stb/stb_truetype.h:2550:42, col:58> 'int' '<'
|   |       |   |       |   |           | |-ImplicitCastExpr 0x7fffd83cdbd8 <col:42> 'stbtt_int32':'int' <LValueToRValue>
|   |       |   |       |   |           | | `-DeclRefExpr 0x7fffd83cdb88 <col:42> 'stbtt_int32':'int' lvalue Var 0x7fffd83cc5d8 'coverageIndex' 'stbtt_int32':'int'
|   |       |   |       |   |           | `-ImplicitCastExpr 0x7fffd83cdc08 <col:58> 'int' <IntegralCast>
|   |       |   |       |   |           |   `-ImplicitCastExpr 0x7fffd83cdbf0 <col:58> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |       |   |           |     `-DeclRefExpr 0x7fffd83cdbb0 <col:58> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83cd050 'pairSetCount' 'stbtt_uint16':'unsigned short'
|   |       |   |       |   |           |-NullStmt 0x7fffd83cdc48 </usr/include/assert.h:110:9>
|   |       |   |       |   |           `-CallExpr 0x7fffd83cde78 <line:112:9, col:68> 'void'
|   |       |   |       |   |             |-ImplicitCastExpr 0x7fffd83cde60 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |       |   |       |   |             | `-DeclRefExpr 0x7fffd83cdc58 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |       |   |       |   |             |-ImplicitCastExpr 0x7fffd83cded8 <<scratch space>:267:1> 'const char *' <BitCast>
|   |       |   |       |   |             | `-ImplicitCastExpr 0x7fffd83cdec0 <col:1> 'char *' <ArrayToPointerDecay>
|   |       |   |       |   |             |   `-StringLiteral 0x7fffd83cdc80 <col:1> 'char [29]' lvalue "coverageIndex < pairSetCount"
|   |       |   |       |   |             |-ImplicitCastExpr 0x7fffd83cdf08 <line:268:1> 'const char *' <BitCast>
|   |       |   |       |   |             | `-ImplicitCastExpr 0x7fffd83cdef0 <col:1> 'char *' <ArrayToPointerDecay>
|   |       |   |       |   |             |   `-StringLiteral 0x7fffd83cdcc8 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |       |   |       |   |             |-ImplicitCastExpr 0x7fffd83cdf20 <line:269:1> 'unsigned int' <IntegralCast>
|   |       |   |       |   |             | `-IntegerLiteral 0x7fffd83cdd08 <col:1> 'int' 2550
|   |       |   |       |   |             `-ImplicitCastExpr 0x7fffd83cdf38 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |       |   |       |   |               `-UnaryOperator 0x7fffd83cde40 <col:30, col:44> 'const char [77]' lvalue prefix '__extension__'
|   |       |   |       |   |                 `-PredefinedExpr 0x7fffd83cde20 <col:44> 'const char [77]' lvalue __PRETTY_FUNCTION__
|   |       |   |       |   |                   `-StringLiteral 0x7fffd83cdda8 <col:44> 'const char [77]' lvalue "stbtt_int32 stbtt__GetGlyphGPOSInfoAdvance(const stbtt_fontinfo *, int, int)"
|   |       |   |       |   |-CStyleCastExpr 0x7fffd83ce0a0 <././stb/stb_truetype.h:1120:28, col:42> 'void' <ToVoid>
|   |       |   |       |   | `-UnaryExprOrTypeTraitExpr 0x7fffd83ce070 <col:34, col:42> 'unsigned long' sizeof
|   |       |   |       |   |   `-ParenExpr 0x7fffd83ce050 <col:40, col:42> 'stbtt_uint16':'unsigned short' lvalue
|   |       |   |       |   |     `-DeclRefExpr 0x7fffd83ce028 <line:2551:44> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83cd050 'pairSetCount' 'stbtt_uint16':'unsigned short'
|   |       |   |       |   |-BinaryOperator 0x7fffd83ce130 <line:2553:29, col:36> 'int' '='
|   |       |   |       |   | |-DeclRefExpr 0x7fffd83ce0c8 <col:29> 'int' lvalue Var 0x7fffd83ccc08 'needle' 'int'
|   |       |   |       |   | `-ImplicitCastExpr 0x7fffd83ce118 <col:36> 'int' <LValueToRValue>
|   |       |   |       |   |   `-DeclRefExpr 0x7fffd83ce0f0 <col:36> 'int' lvalue ParmVar 0x7fffd83ca650 'glyph2' 'int'
|   |       |   |       |   |-BinaryOperator 0x7fffd83ce220 <line:2554:29, col:46> 'stbtt_int32':'int' '='
|   |       |   |       |   | |-DeclRefExpr 0x7fffd83ce158 <col:29> 'stbtt_int32':'int' lvalue Var 0x7fffd83cca70 'r' 'stbtt_int32':'int'
|   |       |   |       |   | `-BinaryOperator 0x7fffd83ce1f8 <col:31, col:46> 'int' '-'
|   |       |   |       |   |   |-ImplicitCastExpr 0x7fffd83ce1e0 <col:31> 'int' <IntegralCast>
|   |       |   |       |   |   | `-ImplicitCastExpr 0x7fffd83ce1c8 <col:31> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |       |   |   |   `-DeclRefExpr 0x7fffd83ce180 <col:31> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83cd548 'pairValueCount' 'stbtt_uint16':'unsigned short'
|   |       |   |       |   |   `-IntegerLiteral 0x7fffd83ce1a8 <col:46> 'int' 1
|   |       |   |       |   |-BinaryOperator 0x7fffd83ce290 <line:2555:29, col:31> 'stbtt_int32':'int' '='
|   |       |   |       |   | |-DeclRefExpr 0x7fffd83ce248 <col:29> 'stbtt_int32':'int' lvalue Var 0x7fffd83cca00 'l' 'stbtt_int32':'int'
|   |       |   |       |   | `-IntegerLiteral 0x7fffd83ce270 <col:31> 'int' 0
|   |       |   |       |   `-WhileStmt 0x7fffd83d1380 <line:2558:29, line:2573:29>
|   |       |   |       |     |-<<<NULL>>>
|   |       |   |       |     |-BinaryOperator 0x7fffd83d07b0 <line:2558:36, col:41> 'int' '<='
|   |       |   |       |     | |-ImplicitCastExpr 0x7fffd83d0780 <col:36> 'stbtt_int32':'int' <LValueToRValue>
|   |       |   |       |     | | `-DeclRefExpr 0x7fffd83ce2b8 <col:36> 'stbtt_int32':'int' lvalue Var 0x7fffd83cca00 'l' 'stbtt_int32':'int'
|   |       |   |       |     | `-ImplicitCastExpr 0x7fffd83d0798 <col:41> 'stbtt_int32':'int' <LValueToRValue>
|   |       |   |       |     |   `-DeclRefExpr 0x7fffd83ce2e0 <col:41> 'stbtt_int32':'int' lvalue Var 0x7fffd83cca70 'r' 'stbtt_int32':'int'
|   |       |   |       |     `-CompoundStmt 0x7fffd83d1338 <col:44, line:2573:29>
|   |       |   |       |       |-DeclStmt 0x7fffd83d0848 <line:2559:33, col:57>
|   |       |   |       |       | `-VarDecl 0x7fffd83d07e8 <col:33, col:46> col:46 used secondGlyph 'stbtt_uint16':'unsigned short'
|   |       |   |       |       |-DeclStmt 0x7fffd83d08d0 <line:2560:33, col:55>
|   |       |   |       |       | `-VarDecl 0x7fffd83d0870 <col:33, col:46> col:46 used pairValue 'stbtt_uint8 *'
|   |       |   |       |       |-BinaryOperator 0x7fffd83d0a20 <line:2561:33, col:48> 'stbtt_int32':'int' '='
|   |       |   |       |       | |-DeclRefExpr 0x7fffd83d08e8 <col:33> 'stbtt_int32':'int' lvalue Var 0x7fffd83ccae0 'm' 'stbtt_int32':'int'
|   |       |   |       |       | `-BinaryOperator 0x7fffd83d09f8 <col:37, col:48> 'int' '>>'
|   |       |   |       |       |   |-ParenExpr 0x7fffd83d09b8 <col:37, col:43> 'int'
|   |       |   |       |       |   | `-BinaryOperator 0x7fffd83d0990 <col:38, col:42> 'int' '+'
|   |       |   |       |       |   |   |-ImplicitCastExpr 0x7fffd83d0960 <col:38> 'stbtt_int32':'int' <LValueToRValue>
|   |       |   |       |       |   |   | `-DeclRefExpr 0x7fffd83d0910 <col:38> 'stbtt_int32':'int' lvalue Var 0x7fffd83cca00 'l' 'stbtt_int32':'int'
|   |       |   |       |       |   |   `-ImplicitCastExpr 0x7fffd83d0978 <col:42> 'stbtt_int32':'int' <LValueToRValue>
|   |       |   |       |       |   |     `-DeclRefExpr 0x7fffd83d0938 <col:42> 'stbtt_int32':'int' lvalue Var 0x7fffd83cca70 'r' 'stbtt_int32':'int'
|   |       |   |       |       |   `-IntegerLiteral 0x7fffd83d09d8 <col:48> 'int' 1
|   |       |   |       |       |-BinaryOperator 0x7fffd83d0be8 <line:2562:33, col:97> 'stbtt_uint8 *' '='
|   |       |   |       |       | |-DeclRefExpr 0x7fffd83d0a48 <col:33> 'stbtt_uint8 *' lvalue Var 0x7fffd83d0870 'pairValue' 'stbtt_uint8 *'
|   |       |   |       |       | `-BinaryOperator 0x7fffd83d0bc0 <col:45, col:97> 'stbtt_uint8 *' '+'
|   |       |   |       |       |   |-ImplicitCastExpr 0x7fffd83d0ba8 <col:45> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |       |       |   | `-DeclRefExpr 0x7fffd83d0a70 <col:45> 'stbtt_uint8 *' lvalue Var 0x7fffd83cd680 'pairValueArray' 'stbtt_uint8 *'
|   |       |   |       |       |   `-BinaryOperator 0x7fffd83d0b80 <col:62, col:97> 'int' '*'
|   |       |   |       |       |     |-ParenExpr 0x7fffd83d0b20 <col:62, col:93> 'int'
|   |       |   |       |       |     | `-BinaryOperator 0x7fffd83d0af8 <col:63, col:67> 'int' '+'
|   |       |   |       |       |     |   |-IntegerLiteral 0x7fffd83d0a98 <col:63> 'int' 2
|   |       |   |       |       |     |   `-ImplicitCastExpr 0x7fffd83d0ae0 <col:67> 'stbtt_int32':'int' <LValueToRValue>
|   |       |   |       |       |     |     `-DeclRefExpr 0x7fffd83d0ab8 <col:67> 'stbtt_int32':'int' lvalue Var 0x7fffd83ccfa8 'valueRecordPairSizeInBytes' 'stbtt_int32':'int'
|   |       |   |       |       |     `-ImplicitCastExpr 0x7fffd83d0b68 <col:97> 'stbtt_int32':'int' <LValueToRValue>
|   |       |   |       |       |       `-DeclRefExpr 0x7fffd83d0b40 <col:97> 'stbtt_int32':'int' lvalue Var 0x7fffd83ccae0 'm' 'stbtt_int32':'int'
|   |       |   |       |       |-BinaryOperator 0x7fffd83d0ce8 <line:2563:33, col:65> 'stbtt_uint16':'unsigned short' '='
|   |       |   |       |       | |-DeclRefExpr 0x7fffd83d0c10 <col:33> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83d07e8 'secondGlyph' 'stbtt_uint16':'unsigned short'
|   |       |   |       |       | `-CallExpr 0x7fffd83d0ca0 <col:47, col:65> 'stbtt_uint16':'unsigned short'
|   |       |   |       |       |   |-ImplicitCastExpr 0x7fffd83d0c88 <col:47> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       |   |       |       |   | `-DeclRefExpr 0x7fffd83d0c38 <col:47> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       |   |       |       |   `-ImplicitCastExpr 0x7fffd83d0cd0 <col:56> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |       |       |     `-DeclRefExpr 0x7fffd83d0c60 <col:56> 'stbtt_uint8 *' lvalue Var 0x7fffd83d0870 'pairValue' 'stbtt_uint8 *'
|   |       |   |       |       |-BinaryOperator 0x7fffd83d0d90 <line:2564:33, col:41> 'int' '='
|   |       |   |       |       | |-DeclRefExpr 0x7fffd83d0d10 <col:33> 'int' lvalue Var 0x7fffd83ccb90 'straw' 'int'
|   |       |   |       |       | `-ImplicitCastExpr 0x7fffd83d0d78 <col:41> 'int' <IntegralCast>
|   |       |   |       |       |   `-ImplicitCastExpr 0x7fffd83d0d60 <col:41> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |       |       |     `-DeclRefExpr 0x7fffd83d0d38 <col:41> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83d07e8 'secondGlyph' 'stbtt_uint16':'unsigned short'
|   |       |   |       |       `-IfStmt 0x7fffd83d1300 <line:2565:33, line:2572:33>
|   |       |   |       |         |-<<<NULL>>>
|   |       |   |       |         |-<<<NULL>>>
|   |       |   |       |         |-BinaryOperator 0x7fffd83d0e38 <line:2565:37, col:46> 'int' '<'
|   |       |   |       |         | |-ImplicitCastExpr 0x7fffd83d0e08 <col:37> 'int' <LValueToRValue>
|   |       |   |       |         | | `-DeclRefExpr 0x7fffd83d0db8 <col:37> 'int' lvalue Var 0x7fffd83ccc08 'needle' 'int'
|   |       |   |       |         | `-ImplicitCastExpr 0x7fffd83d0e20 <col:46> 'int' <LValueToRValue>
|   |       |   |       |         |   `-DeclRefExpr 0x7fffd83d0de0 <col:46> 'int' lvalue Var 0x7fffd83ccb90 'straw' 'int'
|   |       |   |       |         |-BinaryOperator 0x7fffd83d0f10 <line:2566:37, col:45> 'stbtt_int32':'int' '='
|   |       |   |       |         | |-DeclRefExpr 0x7fffd83d0e60 <col:37> 'stbtt_int32':'int' lvalue Var 0x7fffd83cca70 'r' 'stbtt_int32':'int'
|   |       |   |       |         | `-BinaryOperator 0x7fffd83d0ee8 <col:41, col:45> 'int' '-'
|   |       |   |       |         |   |-ImplicitCastExpr 0x7fffd83d0ed0 <col:41> 'stbtt_int32':'int' <LValueToRValue>
|   |       |   |       |         |   | `-DeclRefExpr 0x7fffd83d0e88 <col:41> 'stbtt_int32':'int' lvalue Var 0x7fffd83ccae0 'm' 'stbtt_int32':'int'
|   |       |   |       |         |   `-IntegerLiteral 0x7fffd83d0eb0 <col:45> 'int' 1
|   |       |   |       |         `-IfStmt 0x7fffd83d12c8 <line:2567:38, line:2572:33>
|   |       |   |       |           |-<<<NULL>>>
|   |       |   |       |           |-<<<NULL>>>
|   |       |   |       |           |-BinaryOperator 0x7fffd83d0fb8 <line:2567:42, col:51> 'int' '>'
|   |       |   |       |           | |-ImplicitCastExpr 0x7fffd83d0f88 <col:42> 'int' <LValueToRValue>
|   |       |   |       |           | | `-DeclRefExpr 0x7fffd83d0f38 <col:42> 'int' lvalue Var 0x7fffd83ccc08 'needle' 'int'
|   |       |   |       |           | `-ImplicitCastExpr 0x7fffd83d0fa0 <col:51> 'int' <LValueToRValue>
|   |       |   |       |           |   `-DeclRefExpr 0x7fffd83d0f60 <col:51> 'int' lvalue Var 0x7fffd83ccb90 'straw' 'int'
|   |       |   |       |           |-BinaryOperator 0x7fffd83d1090 <line:2568:37, col:45> 'stbtt_int32':'int' '='
|   |       |   |       |           | |-DeclRefExpr 0x7fffd83d0fe0 <col:37> 'stbtt_int32':'int' lvalue Var 0x7fffd83cca00 'l' 'stbtt_int32':'int'
|   |       |   |       |           | `-BinaryOperator 0x7fffd83d1068 <col:41, col:45> 'int' '+'
|   |       |   |       |           |   |-ImplicitCastExpr 0x7fffd83d1050 <col:41> 'stbtt_int32':'int' <LValueToRValue>
|   |       |   |       |           |   | `-DeclRefExpr 0x7fffd83d1008 <col:41> 'stbtt_int32':'int' lvalue Var 0x7fffd83ccae0 'm' 'stbtt_int32':'int'
|   |       |   |       |           |   `-IntegerLiteral 0x7fffd83d1030 <col:45> 'int' 1
|   |       |   |       |           `-CompoundStmt 0x7fffd83d12a8 <line:2569:38, line:2572:33>
|   |       |   |       |             |-DeclStmt 0x7fffd83d1220 <line:2570:37, col:82>
|   |       |   |       |             | `-VarDecl 0x7fffd83d10c8 <col:37, col:81> col:49 used xAdvance 'stbtt_int16':'short' cinit
|   |       |   |       |             |   `-CallExpr 0x7fffd83d11f0 <col:60, col:81> 'stbtt_int16':'short'
|   |       |   |       |             |     |-ImplicitCastExpr 0x7fffd83d11d8 <col:60> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       |   |       |             |     | `-DeclRefExpr 0x7fffd83d1128 <col:60> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |       |   |       |             |     `-BinaryOperator 0x7fffd83d11b0 <col:68, col:80> 'stbtt_uint8 *' '+'
|   |       |   |       |             |       |-ImplicitCastExpr 0x7fffd83d1198 <col:68> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |       |             |       | `-DeclRefExpr 0x7fffd83d1150 <col:68> 'stbtt_uint8 *' lvalue Var 0x7fffd83d0870 'pairValue' 'stbtt_uint8 *'
|   |       |   |       |             |       `-IntegerLiteral 0x7fffd83d1178 <col:80> 'int' 2
|   |       |   |       |             `-ReturnStmt 0x7fffd83d1290 <line:2571:37, col:44>
|   |       |   |       |               `-ImplicitCastExpr 0x7fffd83d1278 <col:44> 'stbtt_int32':'int' <IntegralCast>
|   |       |   |       |                 `-ImplicitCastExpr 0x7fffd83d1260 <col:44> 'stbtt_int16':'short' <LValueToRValue>
|   |       |   |       |                   `-DeclRefExpr 0x7fffd83d1238 <col:44> 'stbtt_int16':'short' lvalue Var 0x7fffd83d10c8 'xAdvance' 'stbtt_int16':'short'
|   |       |   |       |-BreakStmt 0x7fffd83d1450 <line:2574:27>
|   |       |   |       |-CaseStmt 0x7fffd83d1478 <line:2576:25, line:2602:25>
|   |       |   |       | |-IntegerLiteral 0x7fffd83d1458 <line:2576:30> 'int' 2
|   |       |   |       | |-<<<NULL>>>
|   |       |   |       | `-CompoundStmt 0x7fffd83d3910 <col:33, line:2602:25>
|   |       |   |       |   |-DeclStmt 0x7fffd83d1618 <line:2577:29, col:76>
|   |       |   |       |   | `-VarDecl 0x7fffd83d14c0 <col:29, col:75> col:42 used valueFormat1 'stbtt_uint16':'unsigned short' cinit
|   |       |   |       |   |   `-CallExpr 0x7fffd83d15e8 <col:57, col:75> 'stbtt_uint16':'unsigned short'
|   |       |   |       |   |     |-ImplicitCastExpr 0x7fffd83d15d0 <col:57> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       |   |       |   |     | `-DeclRefExpr 0x7fffd83d1520 <col:57> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       |   |       |   |     `-BinaryOperator 0x7fffd83d15a8 <col:66, col:74> 'stbtt_uint8 *' '+'
|   |       |   |       |   |       |-ImplicitCastExpr 0x7fffd83d1590 <col:66> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |       |   |       | `-DeclRefExpr 0x7fffd83d1548 <col:66> 'stbtt_uint8 *' lvalue Var 0x7fffd83cc1c0 'table' 'stbtt_uint8 *'
|   |       |   |       |   |       `-IntegerLiteral 0x7fffd83d1570 <col:74> 'int' 4
|   |       |   |       |   |-DeclStmt 0x7fffd83d1798 <line:2578:29, col:76>
|   |       |   |       |   | `-VarDecl 0x7fffd83d1640 <col:29, col:75> col:42 used valueFormat2 'stbtt_uint16':'unsigned short' cinit
|   |       |   |       |   |   `-CallExpr 0x7fffd83d1768 <col:57, col:75> 'stbtt_uint16':'unsigned short'
|   |       |   |       |   |     |-ImplicitCastExpr 0x7fffd83d1750 <col:57> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       |   |       |   |     | `-DeclRefExpr 0x7fffd83d16a0 <col:57> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       |   |       |   |     `-BinaryOperator 0x7fffd83d1728 <col:66, col:74> 'stbtt_uint8 *' '+'
|   |       |   |       |   |       |-ImplicitCastExpr 0x7fffd83d1710 <col:66> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |       |   |       | `-DeclRefExpr 0x7fffd83d16c8 <col:66> 'stbtt_uint8 *' lvalue Var 0x7fffd83cc1c0 'table' 'stbtt_uint8 *'
|   |       |   |       |   |       `-IntegerLiteral 0x7fffd83d16f0 <col:74> 'int' 6
|   |       |   |       |   |-DeclStmt 0x7fffd83d1918 <line:2580:29, col:79>
|   |       |   |       |   | `-VarDecl 0x7fffd83d17c0 <col:29, col:78> col:42 used classDef1Offset 'stbtt_uint16':'unsigned short' cinit
|   |       |   |       |   |   `-CallExpr 0x7fffd83d18e8 <col:60, col:78> 'stbtt_uint16':'unsigned short'
|   |       |   |       |   |     |-ImplicitCastExpr 0x7fffd83d18d0 <col:60> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       |   |       |   |     | `-DeclRefExpr 0x7fffd83d1820 <col:60> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       |   |       |   |     `-BinaryOperator 0x7fffd83d18a8 <col:69, col:77> 'stbtt_uint8 *' '+'
|   |       |   |       |   |       |-ImplicitCastExpr 0x7fffd83d1890 <col:69> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |       |   |       | `-DeclRefExpr 0x7fffd83d1848 <col:69> 'stbtt_uint8 *' lvalue Var 0x7fffd83cc1c0 'table' 'stbtt_uint8 *'
|   |       |   |       |   |       `-IntegerLiteral 0x7fffd83d1870 <col:77> 'int' 8
|   |       |   |       |   |-DeclStmt 0x7fffd83d1a98 <line:2581:29, col:80>
|   |       |   |       |   | `-VarDecl 0x7fffd83d1940 <col:29, col:79> col:42 used classDef2Offset 'stbtt_uint16':'unsigned short' cinit
|   |       |   |       |   |   `-CallExpr 0x7fffd83d1a68 <col:60, col:79> 'stbtt_uint16':'unsigned short'
|   |       |   |       |   |     |-ImplicitCastExpr 0x7fffd83d1a50 <col:60> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       |   |       |   |     | `-DeclRefExpr 0x7fffd83d19a0 <col:60> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       |   |       |   |     `-BinaryOperator 0x7fffd83d1a28 <col:69, col:77> 'stbtt_uint8 *' '+'
|   |       |   |       |   |       |-ImplicitCastExpr 0x7fffd83d1a10 <col:69> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |       |   |       | `-DeclRefExpr 0x7fffd83d19c8 <col:69> 'stbtt_uint8 *' lvalue Var 0x7fffd83cc1c0 'table' 'stbtt_uint8 *'
|   |       |   |       |   |       `-IntegerLiteral 0x7fffd83d19f0 <col:77> 'int' 10
|   |       |   |       |   |-DeclStmt 0x7fffd83d1ca0 <line:2582:29, col:100>
|   |       |   |       |   | `-VarDecl 0x7fffd83d1ac8 <col:29, col:99> col:33 used glyph1class 'int' cinit
|   |       |   |       |   |   `-CallExpr 0x7fffd83d1c50 <col:47, col:99> 'stbtt_int32':'int'
|   |       |   |       |   |     |-ImplicitCastExpr 0x7fffd83d1c38 <col:47> 'stbtt_int32 (*)(stbtt_uint8 *, int)' <FunctionToPointerDecay>
|   |       |   |       |   |     | `-DeclRefExpr 0x7fffd83d1b28 <col:47> 'stbtt_int32 (stbtt_uint8 *, int)' Function 0x7fffd83c7df8 'stbtt__GetGlyphClass' 'stbtt_int32 (stbtt_uint8 *, int)'
|   |       |   |       |   |     |-BinaryOperator 0x7fffd83d1be8 <col:68, col:76> 'stbtt_uint8 *' '+'
|   |       |   |       |   |     | |-ImplicitCastExpr 0x7fffd83d1ba0 <col:68> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |       |   |     | | `-DeclRefExpr 0x7fffd83d1b50 <col:68> 'stbtt_uint8 *' lvalue Var 0x7fffd83cc1c0 'table' 'stbtt_uint8 *'
|   |       |   |       |   |     | `-ImplicitCastExpr 0x7fffd83d1bd0 <col:76> 'int' <IntegralCast>
|   |       |   |       |   |     |   `-ImplicitCastExpr 0x7fffd83d1bb8 <col:76> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |       |   |     |     `-DeclRefExpr 0x7fffd83d1b78 <col:76> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83d17c0 'classDef1Offset' 'stbtt_uint16':'unsigned short'
|   |       |   |       |   |     `-ImplicitCastExpr 0x7fffd83d1c88 <col:93> 'int' <LValueToRValue>
|   |       |   |       |   |       `-DeclRefExpr 0x7fffd83d1c10 <col:93> 'int' lvalue ParmVar 0x7fffd83ca5d8 'glyph1' 'int'
|   |       |   |       |   |-DeclStmt 0x7fffd83d1ea8 <line:2583:29, col:100>
|   |       |   |       |   | `-VarDecl 0x7fffd83d1cd0 <col:29, col:99> col:33 used glyph2class 'int' cinit
|   |       |   |       |   |   `-CallExpr 0x7fffd83d1e58 <col:47, col:99> 'stbtt_int32':'int'
|   |       |   |       |   |     |-ImplicitCastExpr 0x7fffd83d1e40 <col:47> 'stbtt_int32 (*)(stbtt_uint8 *, int)' <FunctionToPointerDecay>
|   |       |   |       |   |     | `-DeclRefExpr 0x7fffd83d1d30 <col:47> 'stbtt_int32 (stbtt_uint8 *, int)' Function 0x7fffd83c7df8 'stbtt__GetGlyphClass' 'stbtt_int32 (stbtt_uint8 *, int)'
|   |       |   |       |   |     |-BinaryOperator 0x7fffd83d1df0 <col:68, col:76> 'stbtt_uint8 *' '+'
|   |       |   |       |   |     | |-ImplicitCastExpr 0x7fffd83d1da8 <col:68> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |       |   |     | | `-DeclRefExpr 0x7fffd83d1d58 <col:68> 'stbtt_uint8 *' lvalue Var 0x7fffd83cc1c0 'table' 'stbtt_uint8 *'
|   |       |   |       |   |     | `-ImplicitCastExpr 0x7fffd83d1dd8 <col:76> 'int' <IntegralCast>
|   |       |   |       |   |     |   `-ImplicitCastExpr 0x7fffd83d1dc0 <col:76> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |       |   |     |     `-DeclRefExpr 0x7fffd83d1d80 <col:76> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83d1940 'classDef2Offset' 'stbtt_uint16':'unsigned short'
|   |       |   |       |   |     `-ImplicitCastExpr 0x7fffd83d1e90 <col:93> 'int' <LValueToRValue>
|   |       |   |       |   |       `-DeclRefExpr 0x7fffd83d1e18 <col:93> 'int' lvalue ParmVar 0x7fffd83ca650 'glyph2' 'int'
|   |       |   |       |   |-DeclStmt 0x7fffd83d2028 <line:2585:29, col:76>
|   |       |   |       |   | `-VarDecl 0x7fffd83d1ed0 <col:29, col:75> col:42 used class1Count 'stbtt_uint16':'unsigned short' cinit
|   |       |   |       |   |   `-CallExpr 0x7fffd83d1ff8 <col:56, col:75> 'stbtt_uint16':'unsigned short'
|   |       |   |       |   |     |-ImplicitCastExpr 0x7fffd83d1fe0 <col:56> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       |   |       |   |     | `-DeclRefExpr 0x7fffd83d1f30 <col:56> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       |   |       |   |     `-BinaryOperator 0x7fffd83d1fb8 <col:65, col:73> 'stbtt_uint8 *' '+'
|   |       |   |       |   |       |-ImplicitCastExpr 0x7fffd83d1fa0 <col:65> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |       |   |       | `-DeclRefExpr 0x7fffd83d1f58 <col:65> 'stbtt_uint8 *' lvalue Var 0x7fffd83cc1c0 'table' 'stbtt_uint8 *'
|   |       |   |       |   |       `-IntegerLiteral 0x7fffd83d1f80 <col:73> 'int' 12
|   |       |   |       |   |-DeclStmt 0x7fffd83d21a8 <line:2586:29, col:76>
|   |       |   |       |   | `-VarDecl 0x7fffd83d2050 <col:29, col:75> col:42 used class2Count 'stbtt_uint16':'unsigned short' cinit
|   |       |   |       |   |   `-CallExpr 0x7fffd83d2178 <col:56, col:75> 'stbtt_uint16':'unsigned short'
|   |       |   |       |   |     |-ImplicitCastExpr 0x7fffd83d2160 <col:56> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       |   |       |   |     | `-DeclRefExpr 0x7fffd83d20b0 <col:56> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       |   |       |   |     `-BinaryOperator 0x7fffd83d2138 <col:65, col:73> 'stbtt_uint8 *' '+'
|   |       |   |       |   |       |-ImplicitCastExpr 0x7fffd83d2120 <col:65> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |       |   |       | `-DeclRefExpr 0x7fffd83d20d8 <col:65> 'stbtt_uint8 *' lvalue Var 0x7fffd83cc1c0 'table' 'stbtt_uint8 *'
|   |       |   |       |   |       `-IntegerLiteral 0x7fffd83d2100 <col:73> 'int' 14
|   |       |   |       |   |-ParenExpr 0x7fffd83d27d8 </usr/include/assert.h:108:3, line:113:7> 'void'
|   |       |   |       |   | `-BinaryOperator 0x7fffd83d27b0 <line:108:4, line:113:6> 'void' ','
|   |       |   |       |   |   |-CStyleCastExpr 0x7fffd83d2360 <line:108:4, col:33> 'void' <ToVoid>
|   |       |   |       |   |   | `-UnaryExprOrTypeTraitExpr 0x7fffd83d2330 <col:11, col:33> 'unsigned long' sizeof
|   |       |   |       |   |   |   `-ParenExpr 0x7fffd83d2310 <col:18, col:33> 'int'
|   |       |   |       |   |   |     `-ConditionalOperator 0x7fffd83d22e0 <col:19, col:32> 'int'
|   |       |   |       |   |   |       |-ParenExpr 0x7fffd83d2280 <col:19, col:24> 'int'
|   |       |   |       |   |   |       | `-BinaryOperator 0x7fffd83d2258 <././stb/stb_truetype.h:2587:42, col:56> 'int' '<'
|   |       |   |       |   |   |       |   |-ImplicitCastExpr 0x7fffd83d2210 <col:42> 'int' <LValueToRValue>
|   |       |   |       |   |   |       |   | `-DeclRefExpr 0x7fffd83d21c0 <col:42> 'int' lvalue Var 0x7fffd83d1ac8 'glyph1class' 'int'
|   |       |   |       |   |   |       |   `-ImplicitCastExpr 0x7fffd83d2240 <col:56> 'int' <IntegralCast>
|   |       |   |       |   |   |       |     `-ImplicitCastExpr 0x7fffd83d2228 <col:56> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |       |   |   |       |       `-DeclRefExpr 0x7fffd83d21e8 <col:56> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83d1ed0 'class1Count' 'stbtt_uint16':'unsigned short'
|   |       |   |       |   |   |       |-IntegerLiteral 0x7fffd83d22a0 </usr/include/assert.h:108:28> 'int' 1
|   |       |   |       |   |   |       `-IntegerLiteral 0x7fffd83d22c0 <col:32> 'int' 0
|   |       |   |       |   |   `-UnaryOperator 0x7fffd83d2790 <col:36, line:113:6> 'void' prefix '__extension__'
|   |       |   |       |   |     `-StmtExpr 0x7fffd83d2758 <line:108:50, line:113:6> 'void'
|   |       |   |       |   |       `-CompoundStmt 0x7fffd83d2740 <line:108:51, line:113:5>
|   |       |   |       |   |         `-IfStmt 0x7fffd83d2708 <line:109:7, line:112:68>
|   |       |   |       |   |           |-<<<NULL>>>
|   |       |   |       |   |           |-<<<NULL>>>
|   |       |   |       |   |           |-BinaryOperator 0x7fffd83d2420 <././stb/stb_truetype.h:2587:42, col:56> 'int' '<'
|   |       |   |       |   |           | |-ImplicitCastExpr 0x7fffd83d23d8 <col:42> 'int' <LValueToRValue>
|   |       |   |       |   |           | | `-DeclRefExpr 0x7fffd83d2388 <col:42> 'int' lvalue Var 0x7fffd83d1ac8 'glyph1class' 'int'
|   |       |   |       |   |           | `-ImplicitCastExpr 0x7fffd83d2408 <col:56> 'int' <IntegralCast>
|   |       |   |       |   |           |   `-ImplicitCastExpr 0x7fffd83d23f0 <col:56> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |       |   |           |     `-DeclRefExpr 0x7fffd83d23b0 <col:56> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83d1ed0 'class1Count' 'stbtt_uint16':'unsigned short'
|   |       |   |       |   |           |-NullStmt 0x7fffd83d2448 </usr/include/assert.h:110:9>
|   |       |   |       |   |           `-CallExpr 0x7fffd83d2630 <line:112:9, col:68> 'void'
|   |       |   |       |   |             |-ImplicitCastExpr 0x7fffd83d2618 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |       |   |       |   |             | `-DeclRefExpr 0x7fffd83d2458 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |       |   |       |   |             |-ImplicitCastExpr 0x7fffd83d2690 <<scratch space>:270:1> 'const char *' <BitCast>
|   |       |   |       |   |             | `-ImplicitCastExpr 0x7fffd83d2678 <col:1> 'char *' <ArrayToPointerDecay>
|   |       |   |       |   |             |   `-StringLiteral 0x7fffd83d24b8 <col:1> 'char [26]' lvalue "glyph1class < class1Count"
|   |       |   |       |   |             |-ImplicitCastExpr 0x7fffd83d26c0 <line:271:1> 'const char *' <BitCast>
|   |       |   |       |   |             | `-ImplicitCastExpr 0x7fffd83d26a8 <col:1> 'char *' <ArrayToPointerDecay>
|   |       |   |       |   |             |   `-StringLiteral 0x7fffd83d2500 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |       |   |       |   |             |-ImplicitCastExpr 0x7fffd83d26d8 <line:272:1> 'unsigned int' <IntegralCast>
|   |       |   |       |   |             | `-IntegerLiteral 0x7fffd83d2540 <col:1> 'int' 2587
|   |       |   |       |   |             `-ImplicitCastExpr 0x7fffd83d26f0 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |       |   |       |   |               `-UnaryOperator 0x7fffd83d25f8 <col:30, col:44> 'const char [77]' lvalue prefix '__extension__'
|   |       |   |       |   |                 `-PredefinedExpr 0x7fffd83d25d8 <col:44> 'const char [77]' lvalue __PRETTY_FUNCTION__
|   |       |   |       |   |                   `-StringLiteral 0x7fffd83d2560 <col:44> 'const char [77]' lvalue "stbtt_int32 stbtt__GetGlyphGPOSInfoAdvance(const stbtt_fontinfo *, int, int)"
|   |       |   |       |   |-ParenExpr 0x7fffd83d2dc0 <line:108:3, line:113:7> 'void'
|   |       |   |       |   | `-BinaryOperator 0x7fffd83d2d98 <line:108:4, line:113:6> 'void' ','
|   |       |   |       |   |   |-CStyleCastExpr 0x7fffd83d2998 <line:108:4, col:33> 'void' <ToVoid>
|   |       |   |       |   |   | `-UnaryExprOrTypeTraitExpr 0x7fffd83d2968 <col:11, col:33> 'unsigned long' sizeof
|   |       |   |       |   |   |   `-ParenExpr 0x7fffd83d2948 <col:18, col:33> 'int'
|   |       |   |       |   |   |     `-ConditionalOperator 0x7fffd83d2918 <col:19, col:32> 'int'
|   |       |   |       |   |   |       |-ParenExpr 0x7fffd83d28b8 <col:19, col:24> 'int'
|   |       |   |       |   |   |       | `-BinaryOperator 0x7fffd83d2890 <././stb/stb_truetype.h:2588:42, col:56> 'int' '<'
|   |       |   |       |   |   |       |   |-ImplicitCastExpr 0x7fffd83d2848 <col:42> 'int' <LValueToRValue>
|   |       |   |       |   |   |       |   | `-DeclRefExpr 0x7fffd83d27f8 <col:42> 'int' lvalue Var 0x7fffd83d1cd0 'glyph2class' 'int'
|   |       |   |       |   |   |       |   `-ImplicitCastExpr 0x7fffd83d2878 <col:56> 'int' <IntegralCast>
|   |       |   |       |   |   |       |     `-ImplicitCastExpr 0x7fffd83d2860 <col:56> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |       |   |   |       |       `-DeclRefExpr 0x7fffd83d2820 <col:56> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83d2050 'class2Count' 'stbtt_uint16':'unsigned short'
|   |       |   |       |   |   |       |-IntegerLiteral 0x7fffd83d28d8 </usr/include/assert.h:108:28> 'int' 1
|   |       |   |       |   |   |       `-IntegerLiteral 0x7fffd83d28f8 <col:32> 'int' 0
|   |       |   |       |   |   `-UnaryOperator 0x7fffd83d2d78 <col:36, line:113:6> 'void' prefix '__extension__'
|   |       |   |       |   |     `-StmtExpr 0x7fffd83d2d58 <line:108:50, line:113:6> 'void'
|   |       |   |       |   |       `-CompoundStmt 0x7fffd83d2d40 <line:108:51, line:113:5>
|   |       |   |       |   |         `-IfStmt 0x7fffd83d2d08 <line:109:7, line:112:68>
|   |       |   |       |   |           |-<<<NULL>>>
|   |       |   |       |   |           |-<<<NULL>>>
|   |       |   |       |   |           |-BinaryOperator 0x7fffd83d2a58 <././stb/stb_truetype.h:2588:42, col:56> 'int' '<'
|   |       |   |       |   |           | |-ImplicitCastExpr 0x7fffd83d2a10 <col:42> 'int' <LValueToRValue>
|   |       |   |       |   |           | | `-DeclRefExpr 0x7fffd83d29c0 <col:42> 'int' lvalue Var 0x7fffd83d1cd0 'glyph2class' 'int'
|   |       |   |       |   |           | `-ImplicitCastExpr 0x7fffd83d2a40 <col:56> 'int' <IntegralCast>
|   |       |   |       |   |           |   `-ImplicitCastExpr 0x7fffd83d2a28 <col:56> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |       |   |           |     `-DeclRefExpr 0x7fffd83d29e8 <col:56> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83d2050 'class2Count' 'stbtt_uint16':'unsigned short'
|   |       |   |       |   |           |-NullStmt 0x7fffd83d2a80 </usr/include/assert.h:110:9>
|   |       |   |       |   |           `-CallExpr 0x7fffd83d2c30 <line:112:9, col:68> 'void'
|   |       |   |       |   |             |-ImplicitCastExpr 0x7fffd83d2c18 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |       |   |       |   |             | `-DeclRefExpr 0x7fffd83d2a90 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |       |   |       |   |             |-ImplicitCastExpr 0x7fffd83d2c90 <<scratch space>:273:1> 'const char *' <BitCast>
|   |       |   |       |   |             | `-ImplicitCastExpr 0x7fffd83d2c78 <col:1> 'char *' <ArrayToPointerDecay>
|   |       |   |       |   |             |   `-StringLiteral 0x7fffd83d2ab8 <col:1> 'char [26]' lvalue "glyph2class < class2Count"
|   |       |   |       |   |             |-ImplicitCastExpr 0x7fffd83d2cc0 <line:274:1> 'const char *' <BitCast>
|   |       |   |       |   |             | `-ImplicitCastExpr 0x7fffd83d2ca8 <col:1> 'char *' <ArrayToPointerDecay>
|   |       |   |       |   |             |   `-StringLiteral 0x7fffd83d2b00 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |       |   |       |   |             |-ImplicitCastExpr 0x7fffd83d2cd8 <line:275:1> 'unsigned int' <IntegralCast>
|   |       |   |       |   |             | `-IntegerLiteral 0x7fffd83d2b40 <col:1> 'int' 2588
|   |       |   |       |   |             `-ImplicitCastExpr 0x7fffd83d2cf0 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |       |   |       |   |               `-UnaryOperator 0x7fffd83d2bf8 <col:30, col:44> 'const char [77]' lvalue prefix '__extension__'
|   |       |   |       |   |                 `-PredefinedExpr 0x7fffd83d2bd8 <col:44> 'const char [77]' lvalue __PRETTY_FUNCTION__
|   |       |   |       |   |                   `-StringLiteral 0x7fffd83d2b60 <col:44> 'const char [77]' lvalue "stbtt_int32 stbtt__GetGlyphGPOSInfoAdvance(const stbtt_fontinfo *, int, int)"
|   |       |   |       |   |-NullStmt 0x7fffd83d2de0 <././stb/stb_truetype.h:2591:70>
|   |       |   |       |   |-IfStmt 0x7fffd83d2ec8 <line:2592:29, col:59>
|   |       |   |       |   | |-<<<NULL>>>
|   |       |   |       |   | |-<<<NULL>>>
|   |       |   |       |   | |-BinaryOperator 0x7fffd83d2e68 <col:33, col:49> 'int' '!='
|   |       |   |       |   | | |-ImplicitCastExpr 0x7fffd83d2e50 <col:33> 'int' <IntegralCast>
|   |       |   |       |   | | | `-ImplicitCastExpr 0x7fffd83d2e38 <col:33> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |       |   | | |   `-DeclRefExpr 0x7fffd83d2df0 <col:33> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83d14c0 'valueFormat1' 'stbtt_uint16':'unsigned short'
|   |       |   |       |   | | `-IntegerLiteral 0x7fffd83d2e18 <col:49> 'int' 4
|   |       |   |       |   | |-ReturnStmt 0x7fffd83d2eb0 <col:52, col:59>
|   |       |   |       |   | | `-IntegerLiteral 0x7fffd83d2e90 <col:59> 'int' 0
|   |       |   |       |   | `-<<<NULL>>>
|   |       |   |       |   |-NullStmt 0x7fffd83d2f00 <line:2593:70>
|   |       |   |       |   |-IfStmt 0x7fffd83d2fe8 <line:2594:29, col:59>
|   |       |   |       |   | |-<<<NULL>>>
|   |       |   |       |   | |-<<<NULL>>>
|   |       |   |       |   | |-BinaryOperator 0x7fffd83d2f88 <col:33, col:49> 'int' '!='
|   |       |   |       |   | | |-ImplicitCastExpr 0x7fffd83d2f70 <col:33> 'int' <IntegralCast>
|   |       |   |       |   | | | `-ImplicitCastExpr 0x7fffd83d2f58 <col:33> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |       |   | | |   `-DeclRefExpr 0x7fffd83d2f10 <col:33> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83d1640 'valueFormat2' 'stbtt_uint16':'unsigned short'
|   |       |   |       |   | | `-IntegerLiteral 0x7fffd83d2f38 <col:49> 'int' 0
|   |       |   |       |   | |-ReturnStmt 0x7fffd83d2fd0 <col:52, col:59>
|   |       |   |       |   | | `-IntegerLiteral 0x7fffd83d2fb0 <col:59> 'int' 0
|   |       |   |       |   | `-<<<NULL>>>
|   |       |   |       |   `-IfStmt 0x7fffd83d38d8 <line:2596:29, line:2601:29>
|   |       |   |       |     |-<<<NULL>>>
|   |       |   |       |     |-<<<NULL>>>
|   |       |   |       |     |-BinaryOperator 0x7fffd83d3300 <line:2596:33, col:116> 'int' '&&'
|   |       |   |       |     | |-BinaryOperator 0x7fffd83d3218 <col:33, col:97> 'int' '&&'
|   |       |   |       |     | | |-BinaryOperator 0x7fffd83d3168 <col:33, col:67> 'int' '&&'
|   |       |   |       |     | | | |-BinaryOperator 0x7fffd83d3080 <col:33, col:48> 'int' '>='
|   |       |   |       |     | | | | |-ImplicitCastExpr 0x7fffd83d3068 <col:33> 'int' <LValueToRValue>
|   |       |   |       |     | | | | | `-DeclRefExpr 0x7fffd83d3020 <col:33> 'int' lvalue Var 0x7fffd83d1ac8 'glyph1class' 'int'
|   |       |   |       |     | | | | `-IntegerLiteral 0x7fffd83d3048 <col:48> 'int' 0
|   |       |   |       |     | | | `-BinaryOperator 0x7fffd83d3140 <col:53, col:67> 'int' '<'
|   |       |   |       |     | | |   |-ImplicitCastExpr 0x7fffd83d30f8 <col:53> 'int' <LValueToRValue>
|   |       |   |       |     | | |   | `-DeclRefExpr 0x7fffd83d30a8 <col:53> 'int' lvalue Var 0x7fffd83d1ac8 'glyph1class' 'int'
|   |       |   |       |     | | |   `-ImplicitCastExpr 0x7fffd83d3128 <col:67> 'int' <IntegralCast>
|   |       |   |       |     | | |     `-ImplicitCastExpr 0x7fffd83d3110 <col:67> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |       |     | | |       `-DeclRefExpr 0x7fffd83d30d0 <col:67> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83d1ed0 'class1Count' 'stbtt_uint16':'unsigned short'
|   |       |   |       |     | | `-BinaryOperator 0x7fffd83d31f0 <col:82, col:97> 'int' '>='
|   |       |   |       |     | |   |-ImplicitCastExpr 0x7fffd83d31d8 <col:82> 'int' <LValueToRValue>
|   |       |   |       |     | |   | `-DeclRefExpr 0x7fffd83d3190 <col:82> 'int' lvalue Var 0x7fffd83d1cd0 'glyph2class' 'int'
|   |       |   |       |     | |   `-IntegerLiteral 0x7fffd83d31b8 <col:97> 'int' 0
|   |       |   |       |     | `-BinaryOperator 0x7fffd83d32d8 <col:102, col:116> 'int' '<'
|   |       |   |       |     |   |-ImplicitCastExpr 0x7fffd83d3290 <col:102> 'int' <LValueToRValue>
|   |       |   |       |     |   | `-DeclRefExpr 0x7fffd83d3240 <col:102> 'int' lvalue Var 0x7fffd83d1cd0 'glyph2class' 'int'
|   |       |   |       |     |   `-ImplicitCastExpr 0x7fffd83d32c0 <col:116> 'int' <IntegralCast>
|   |       |   |       |     |     `-ImplicitCastExpr 0x7fffd83d32a8 <col:116> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |       |     |       `-DeclRefExpr 0x7fffd83d3268 <col:116> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83d2050 'class2Count' 'stbtt_uint16':'unsigned short'
|   |       |   |       |     |-CompoundStmt 0x7fffd83d38a8 <col:129, line:2601:29>
|   |       |   |       |     | |-DeclStmt 0x7fffd83d3420 <line:2597:33, col:72>
|   |       |   |       |     | | `-VarDecl 0x7fffd83d3338 <col:33, col:70> col:46 used class1Records 'stbtt_uint8 *' cinit
|   |       |   |       |     | |   `-BinaryOperator 0x7fffd83d33f8 <col:62, col:70> 'stbtt_uint8 *' '+'
|   |       |   |       |     | |     |-ImplicitCastExpr 0x7fffd83d33e0 <col:62> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |       |     | |     | `-DeclRefExpr 0x7fffd83d3398 <col:62> 'stbtt_uint8 *' lvalue Var 0x7fffd83cc1c0 'table' 'stbtt_uint8 *'
|   |       |   |       |     | |     `-IntegerLiteral 0x7fffd83d33c0 <col:70> 'int' 16
|   |       |   |       |     | |-DeclStmt 0x7fffd83d3638 <line:2598:33, col:109>
|   |       |   |       |     | | `-VarDecl 0x7fffd83d3448 <col:33, col:108> col:46 used class2Records 'stbtt_uint8 *' cinit
|   |       |   |       |     | |   `-BinaryOperator 0x7fffd83d3610 <col:62, col:108> 'stbtt_uint8 *' '+'
|   |       |   |       |     | |     |-ImplicitCastExpr 0x7fffd83d35f8 <col:62> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |       |     | |     | `-DeclRefExpr 0x7fffd83d34a8 <col:62> 'stbtt_uint8 *' lvalue Var 0x7fffd83d3338 'class1Records' 'stbtt_uint8 *'
|   |       |   |       |     | |     `-BinaryOperator 0x7fffd83d35d0 <col:78, col:108> 'int' '*'
|   |       |   |       |     | |       |-IntegerLiteral 0x7fffd83d34d0 <col:78> 'int' 2
|   |       |   |       |     | |       `-ParenExpr 0x7fffd83d35b0 <col:82, col:108> 'int'
|   |       |   |       |     | |         `-BinaryOperator 0x7fffd83d3588 <col:83, col:97> 'int' '*'
|   |       |   |       |     | |           |-ImplicitCastExpr 0x7fffd83d3540 <col:83> 'int' <LValueToRValue>
|   |       |   |       |     | |           | `-DeclRefExpr 0x7fffd83d34f0 <col:83> 'int' lvalue Var 0x7fffd83d1ac8 'glyph1class' 'int'
|   |       |   |       |     | |           `-ImplicitCastExpr 0x7fffd83d3570 <col:97> 'int' <IntegralCast>
|   |       |   |       |     | |             `-ImplicitCastExpr 0x7fffd83d3558 <col:97> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |       |   |       |     | |               `-DeclRefExpr 0x7fffd83d3518 <col:97> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd83d2050 'class2Count' 'stbtt_uint16':'unsigned short'
|   |       |   |       |     | |-DeclStmt 0x7fffd83d3820 <line:2599:33, col:96>
|   |       |   |       |     | | `-VarDecl 0x7fffd83d3660 <col:33, col:95> col:45 used xAdvance 'stbtt_int16':'short' cinit
|   |       |   |       |     | |   `-CallExpr 0x7fffd83d37f0 <col:56, col:95> 'stbtt_int16':'short'
|   |       |   |       |     | |     |-ImplicitCastExpr 0x7fffd83d37d8 <col:56> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       |   |       |     | |     | `-DeclRefExpr 0x7fffd83d36c0 <col:56> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |       |   |       |     | |     `-BinaryOperator 0x7fffd83d37b0 <col:64, col:84> 'stbtt_uint8 *' '+'
|   |       |   |       |     | |       |-ImplicitCastExpr 0x7fffd83d3798 <col:64> 'stbtt_uint8 *' <LValueToRValue>
|   |       |   |       |     | |       | `-DeclRefExpr 0x7fffd83d36e8 <col:64> 'stbtt_uint8 *' lvalue Var 0x7fffd83d3448 'class2Records' 'stbtt_uint8 *'
|   |       |   |       |     | |       `-BinaryOperator 0x7fffd83d3770 <col:80, col:84> 'int' '*'
|   |       |   |       |     | |         |-IntegerLiteral 0x7fffd83d3710 <col:80> 'int' 2
|   |       |   |       |     | |         `-ImplicitCastExpr 0x7fffd83d3758 <col:84> 'int' <LValueToRValue>
|   |       |   |       |     | |           `-DeclRefExpr 0x7fffd83d3730 <col:84> 'int' lvalue Var 0x7fffd83d1cd0 'glyph2class' 'int'
|   |       |   |       |     | `-ReturnStmt 0x7fffd83d3890 <line:2600:33, col:40>
|   |       |   |       |     |   `-ImplicitCastExpr 0x7fffd83d3878 <col:40> 'stbtt_int32':'int' <IntegralCast>
|   |       |   |       |     |     `-ImplicitCastExpr 0x7fffd83d3860 <col:40> 'stbtt_int16':'short' <LValueToRValue>
|   |       |   |       |     |       `-DeclRefExpr 0x7fffd83d3838 <col:40> 'stbtt_int16':'short' lvalue Var 0x7fffd83d3660 'xAdvance' 'stbtt_int16':'short'
|   |       |   |       |     `-<<<NULL>>>
|   |       |   |       |-BreakStmt 0x7fffd83d3998 <line:2602:27>
|   |       |   |       |-DefaultStmt 0x7fffd83d3e58 <line:2604:25, line:2608:25>
|   |       |   |       | `-CompoundStmt 0x7fffd83d3e38 <line:2604:34, line:2608:25>
|   |       |   |       |   |-ParenExpr 0x7fffd83d3e10 </usr/include/assert.h:108:3, line:113:7> 'void'
|   |       |   |       |   | `-BinaryOperator 0x7fffd83d3de8 <line:108:4, line:113:6> 'void' ','
|   |       |   |       |   |   |-CStyleCastExpr 0x7fffd83d3aa0 <line:108:4, col:33> 'void' <ToVoid>
|   |       |   |       |   |   | `-UnaryExprOrTypeTraitExpr 0x7fffd83d3a70 <col:11, col:33> 'unsigned long' sizeof
|   |       |   |       |   |   |   `-ParenExpr 0x7fffd83d3a50 <col:18, col:33> 'int'
|   |       |   |       |   |   |     `-ConditionalOperator 0x7fffd83d3a20 <col:19, col:32> 'int'
|   |       |   |       |   |   |       |-ParenExpr 0x7fffd83d39c0 <col:19, col:24> 'int'
|   |       |   |       |   |   |       | `-IntegerLiteral 0x7fffd83d39a0 <././stb/stb_truetype.h:2606:42> 'int' 0
|   |       |   |       |   |   |       |-IntegerLiteral 0x7fffd83d39e0 </usr/include/assert.h:108:28> 'int' 1
|   |       |   |       |   |   |       `-IntegerLiteral 0x7fffd83d3a00 <col:32> 'int' 0
|   |       |   |       |   |   `-UnaryOperator 0x7fffd83d3dc8 <col:36, line:113:6> 'void' prefix '__extension__'
|   |       |   |       |   |     `-StmtExpr 0x7fffd83d3da8 <line:108:50, line:113:6> 'void'
|   |       |   |       |   |       `-CompoundStmt 0x7fffd83d3d90 <line:108:51, line:113:5>
|   |       |   |       |   |         `-IfStmt 0x7fffd83d3d58 <line:109:7, line:112:68>
|   |       |   |       |   |           |-<<<NULL>>>
|   |       |   |       |   |           |-<<<NULL>>>
|   |       |   |       |   |           |-IntegerLiteral 0x7fffd83d3ac8 <././stb/stb_truetype.h:2606:42> 'int' 0
|   |       |   |       |   |           |-NullStmt 0x7fffd83d3ae8 </usr/include/assert.h:110:9>
|   |       |   |       |   |           `-CallExpr 0x7fffd83d3c80 <line:112:9, col:68> 'void'
|   |       |   |       |   |             |-ImplicitCastExpr 0x7fffd83d3c68 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |       |   |       |   |             | `-DeclRefExpr 0x7fffd83d3af8 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |       |   |       |   |             |-ImplicitCastExpr 0x7fffd83d3ce0 <<scratch space>:276:1> 'const char *' <BitCast>
|   |       |   |       |   |             | `-ImplicitCastExpr 0x7fffd83d3cc8 <col:1> 'char *' <ArrayToPointerDecay>
|   |       |   |       |   |             |   `-StringLiteral 0x7fffd83d3b20 <col:1> 'char [2]' lvalue "0"
|   |       |   |       |   |             |-ImplicitCastExpr 0x7fffd83d3d10 <line:277:1> 'const char *' <BitCast>
|   |       |   |       |   |             | `-ImplicitCastExpr 0x7fffd83d3cf8 <col:1> 'char *' <ArrayToPointerDecay>
|   |       |   |       |   |             |   `-StringLiteral 0x7fffd83d3b50 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |       |   |       |   |             |-ImplicitCastExpr 0x7fffd83d3d28 <line:278:1> 'unsigned int' <IntegralCast>
|   |       |   |       |   |             | `-IntegerLiteral 0x7fffd83d3b90 <col:1> 'int' 2606
|   |       |   |       |   |             `-ImplicitCastExpr 0x7fffd83d3d40 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |       |   |       |   |               `-UnaryOperator 0x7fffd83d3c48 <col:30, col:44> 'const char [77]' lvalue prefix '__extension__'
|   |       |   |       |   |                 `-PredefinedExpr 0x7fffd83d3c28 <col:44> 'const char [77]' lvalue __PRETTY_FUNCTION__
|   |       |   |       |   |                   `-StringLiteral 0x7fffd83d3bb0 <col:44> 'const char [77]' lvalue "stbtt_int32 stbtt__GetGlyphGPOSInfoAdvance(const stbtt_fontinfo *, int, int)"
|   |       |   |       |   `-BreakStmt 0x7fffd83d3e30 <././stb/stb_truetype.h:2607:29>
|   |       |   |       `-NullStmt 0x7fffd83d3e78 <line:2608:26>
|   |       |   `-BreakStmt 0x7fffd83d3f48 <line:2611:17>
|   |       |-NullStmt 0x7fffd83d3f78 <line:2612:14>
|   |       `-DefaultStmt 0x7fffd83d3f90 <line:2614:13, line:2616:17>
|   |         `-BreakStmt 0x7fffd83d3f88 <col:17>
|   `-ReturnStmt 0x7fffd83d4070 <line:2620:5, col:12>
|     `-IntegerLiteral 0x7fffd83d4050 <col:12> 'int' 0
|-FunctionDecl 0x7fffd83d42a8 prev 0x7fffd8350850 <line:501:19, line:2633:1> line:2623:16 used stbtt_GetGlyphKernAdvance 'int (const stbtt_fontinfo *, int, int)' extern
| |-ParmVarDecl 0x7fffd83d4118 <col:42, col:64> col:64 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83d4190 <col:70, col:74> col:74 used g1 'int'
| |-ParmVarDecl 0x7fffd83d4208 <col:78, col:82> col:82 used g2 'int'
| `-CompoundStmt 0x7fffd83d49e8 <line:2624:1, line:2633:1>
|   |-DeclStmt 0x7fffd83d43f8 <line:2625:4, col:20>
|   | `-VarDecl 0x7fffd83d4378 <col:4, col:19> col:8 used xAdvance 'int' cinit
|   |   `-IntegerLiteral 0x7fffd83d43d8 <col:19> 'int' 0
|   |-IfStmt 0x7fffd83d4958 <line:2627:4, line:2630:62>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd83d4488 <line:2627:8, col:14> 'int' <LValueToRValue>
|   | | `-MemberExpr 0x7fffd83d4450 <col:8, col:14> 'const int' lvalue ->gpos 0x7fffd834cf38
|   | |   `-ImplicitCastExpr 0x7fffd83d4438 <col:8> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x7fffd83d4410 <col:8> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d4118 'info' 'const stbtt_fontinfo *'
|   | |-CompoundAssignOperator 0x7fffd83d4668 <line:2628:7, col:62> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | | |-DeclRefExpr 0x7fffd83d44a0 <col:7> 'int' lvalue Var 0x7fffd83d4378 'xAdvance' 'int'
|   | | `-CallExpr 0x7fffd83d45e0 <col:19, col:62> 'stbtt_int32':'int'
|   | |   |-ImplicitCastExpr 0x7fffd83d45c8 <col:19> 'stbtt_int32 (*)(const stbtt_fontinfo *, int, int)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x7fffd83d44c8 <col:19> 'stbtt_int32 (const stbtt_fontinfo *, int, int)' Function 0x7fffd83ca730 'stbtt__GetGlyphGPOSInfoAdvance' 'stbtt_int32 (const stbtt_fontinfo *, int, int)'
|   | |   |-ImplicitCastExpr 0x7fffd83d4620 <col:50> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd83d44f0 <col:50> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d4118 'info' 'const stbtt_fontinfo *'
|   | |   |-ImplicitCastExpr 0x7fffd83d4638 <col:56> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd83d4518 <col:56> 'int' lvalue ParmVar 0x7fffd83d4190 'g1' 'int'
|   | |   `-ImplicitCastExpr 0x7fffd83d4650 <col:60> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x7fffd83d4540 <col:60> 'int' lvalue ParmVar 0x7fffd83d4208 'g2' 'int'
|   | `-IfStmt 0x7fffd83d4920 <line:2629:9, line:2630:62>
|   |   |-<<<NULL>>>
|   |   |-<<<NULL>>>
|   |   |-ImplicitCastExpr 0x7fffd83d4718 <line:2629:13, col:19> 'int' <LValueToRValue>
|   |   | `-MemberExpr 0x7fffd83d46e0 <col:13, col:19> 'const int' lvalue ->kern 0x7fffd834ced8
|   |   |   `-ImplicitCastExpr 0x7fffd83d46c8 <col:13> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x7fffd83d46a0 <col:13> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d4118 'info' 'const stbtt_fontinfo *'
|   |   |-CompoundAssignOperator 0x7fffd83d48e8 <line:2630:7, col:62> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   | |-DeclRefExpr 0x7fffd83d4730 <col:7> 'int' lvalue Var 0x7fffd83d4378 'xAdvance' 'int'
|   |   | `-CallExpr 0x7fffd83d4860 <col:19, col:62> 'int'
|   |   |   |-ImplicitCastExpr 0x7fffd83d4848 <col:19> 'int (*)(const stbtt_fontinfo *, int, int)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x7fffd83d4758 <col:19> 'int (const stbtt_fontinfo *, int, int)' Function 0x7fffd83c3720 'stbtt__GetGlyphKernInfoAdvance' 'int (const stbtt_fontinfo *, int, int)'
|   |   |   |-ImplicitCastExpr 0x7fffd83d48a0 <col:50> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x7fffd83d47a0 <col:50> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d4118 'info' 'const stbtt_fontinfo *'
|   |   |   |-ImplicitCastExpr 0x7fffd83d48b8 <col:56> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x7fffd83d47c8 <col:56> 'int' lvalue ParmVar 0x7fffd83d4190 'g1' 'int'
|   |   |   `-ImplicitCastExpr 0x7fffd83d48d0 <col:60> 'int' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x7fffd83d47f0 <col:60> 'int' lvalue ParmVar 0x7fffd83d4208 'g2' 'int'
|   |   `-<<<NULL>>>
|   `-ReturnStmt 0x7fffd83d49d0 <line:2632:4, col:11>
|     `-ImplicitCastExpr 0x7fffd83d49b8 <col:11> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd83d4990 <col:11> 'int' lvalue Var 0x7fffd83d4378 'xAdvance' 'int'
|-FunctionDecl 0x7fffd83d4bb0 prev 0x7fffd834ee38 <line:501:19, line:2640:1> line:2635:16 stbtt_GetCodepointKernAdvance 'int (const stbtt_fontinfo *, int, int)' extern
| |-ParmVarDecl 0x7fffd83d4a20 <col:46, col:68> col:68 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83d4a98 <col:74, col:78> col:78 used ch1 'int'
| |-ParmVarDecl 0x7fffd83d4b10 <col:83, col:87> col:87 used ch2 'int'
| `-CompoundStmt 0x7fffd83d5128 <line:2636:1, line:2640:1>
|   |-IfStmt 0x7fffd83d4e28 <line:2637:4, line:2638:14>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83d4dc8 <line:2637:8, col:30> 'int' '&&'
|   | | |-UnaryOperator 0x7fffd83d4cf8 <col:8, col:15> 'int' prefix '!'
|   | | | `-ImplicitCastExpr 0x7fffd83d4ce0 <col:9, col:15> 'int' <LValueToRValue>
|   | | |   `-MemberExpr 0x7fffd83d4ca8 <col:9, col:15> 'const int' lvalue ->kern 0x7fffd834ced8
|   | | |     `-ImplicitCastExpr 0x7fffd83d4c90 <col:9> 'const stbtt_fontinfo *' <LValueToRValue>
|   | | |       `-DeclRefExpr 0x7fffd83d4c68 <col:9> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d4a20 'info' 'const stbtt_fontinfo *'
|   | | `-UnaryOperator 0x7fffd83d4da8 <col:23, col:30> 'int' prefix '!'
|   | |   `-ImplicitCastExpr 0x7fffd83d4d90 <col:24, col:30> 'int' <LValueToRValue>
|   | |     `-MemberExpr 0x7fffd83d4d58 <col:24, col:30> 'const int' lvalue ->gpos 0x7fffd834cf38
|   | |       `-ImplicitCastExpr 0x7fffd83d4d40 <col:24> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x7fffd83d4d18 <col:24> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d4a20 'info' 'const stbtt_fontinfo *'
|   | |-ReturnStmt 0x7fffd83d4e10 <line:2638:7, col:14>
|   | | `-IntegerLiteral 0x7fffd83d4df0 <col:14> 'int' 0
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x7fffd83d5110 <line:2639:4, col:105>
|     `-CallExpr 0x7fffd83d50b8 <col:11, col:105> 'int'
|       |-ImplicitCastExpr 0x7fffd83d50a0 <col:11> 'int (*)(const stbtt_fontinfo *, int, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x7fffd83d4e60 <col:11> 'int (const stbtt_fontinfo *, int, int)' Function 0x7fffd83d42a8 'stbtt_GetGlyphKernAdvance' 'int (const stbtt_fontinfo *, int, int)'
|       |-ImplicitCastExpr 0x7fffd83d50f8 <col:37> 'const stbtt_fontinfo *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd83d4e88 <col:37> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d4a20 'info' 'const stbtt_fontinfo *'
|       |-CallExpr 0x7fffd83d4f40 <col:43, col:72> 'int'
|       | |-ImplicitCastExpr 0x7fffd83d4f28 <col:43> 'int (*)(const stbtt_fontinfo *, int)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x7fffd83d4eb0 <col:43> 'int (const stbtt_fontinfo *, int)' Function 0x7fffd83829f0 'stbtt_FindGlyphIndex' 'int (const stbtt_fontinfo *, int)'
|       | |-ImplicitCastExpr 0x7fffd83d4f78 <col:64> 'const stbtt_fontinfo *' <LValueToRValue>
|       | | `-DeclRefExpr 0x7fffd83d4ed8 <col:64> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d4a20 'info' 'const stbtt_fontinfo *'
|       | `-ImplicitCastExpr 0x7fffd83d4f90 <col:69> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fffd83d4f00 <col:69> 'int' lvalue ParmVar 0x7fffd83d4a98 'ch1' 'int'
|       `-CallExpr 0x7fffd83d5038 <col:75, col:104> 'int'
|         |-ImplicitCastExpr 0x7fffd83d5020 <col:75> 'int (*)(const stbtt_fontinfo *, int)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x7fffd83d4fa8 <col:75> 'int (const stbtt_fontinfo *, int)' Function 0x7fffd83829f0 'stbtt_FindGlyphIndex' 'int (const stbtt_fontinfo *, int)'
|         |-ImplicitCastExpr 0x7fffd83d5070 <col:96> 'const stbtt_fontinfo *' <LValueToRValue>
|         | `-DeclRefExpr 0x7fffd83d4fd0 <col:96> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d4a20 'info' 'const stbtt_fontinfo *'
|         `-ImplicitCastExpr 0x7fffd83d5088 <col:101> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x7fffd83d4ff8 <col:101> 'int' lvalue ParmVar 0x7fffd83d4b10 'ch2' 'int'
|-FunctionDecl 0x7fffd83d5360 prev 0x7fffd834eb40 <line:501:19, line:2645:1> line:2642:16 stbtt_GetCodepointHMetrics 'void (const stbtt_fontinfo *, int, int *, int *)' extern
| |-ParmVarDecl 0x7fffd83d5158 <col:43, col:65> col:65 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83d51d0 <col:71, col:75> col:75 used codepoint 'int'
| |-ParmVarDecl 0x7fffd83d5248 <col:86, col:91> col:91 used advanceWidth 'int *'
| |-ParmVarDecl 0x7fffd83d52c0 <col:105, col:110> col:110 used leftSideBearing 'int *'
| `-CompoundStmt 0x7fffd83d56c0 <line:2643:1, line:2645:1>
|   `-CallExpr 0x7fffd83d5630 <line:2644:4, col:100> 'void'
|     |-ImplicitCastExpr 0x7fffd83d5618 <col:4> 'void (*)(const stbtt_fontinfo *, int, int *, int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x7fffd83d5420 <col:4> 'void (const stbtt_fontinfo *, int, int *, int *)' Function 0x7fffd83bff60 'stbtt_GetGlyphHMetrics' 'void (const stbtt_fontinfo *, int, int *, int *)'
|     |-ImplicitCastExpr 0x7fffd83d5678 <col:27> 'const stbtt_fontinfo *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83d5448 <col:27> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d5158 'info' 'const stbtt_fontinfo *'
|     |-CallExpr 0x7fffd83d5500 <col:33, col:68> 'int'
|     | |-ImplicitCastExpr 0x7fffd83d54e8 <col:33> 'int (*)(const stbtt_fontinfo *, int)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x7fffd83d5470 <col:33> 'int (const stbtt_fontinfo *, int)' Function 0x7fffd83829f0 'stbtt_FindGlyphIndex' 'int (const stbtt_fontinfo *, int)'
|     | |-ImplicitCastExpr 0x7fffd83d5538 <col:54> 'const stbtt_fontinfo *' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fffd83d5498 <col:54> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d5158 'info' 'const stbtt_fontinfo *'
|     | `-ImplicitCastExpr 0x7fffd83d5550 <col:59> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fffd83d54c0 <col:59> 'int' lvalue ParmVar 0x7fffd83d51d0 'codepoint' 'int'
|     |-ImplicitCastExpr 0x7fffd83d5690 <col:71> 'int *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83d5568 <col:71> 'int *' lvalue ParmVar 0x7fffd83d5248 'advanceWidth' 'int *'
|     `-ImplicitCastExpr 0x7fffd83d56a8 <col:85> 'int *' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd83d5590 <col:85> 'int *' lvalue ParmVar 0x7fffd83d52c0 'leftSideBearing' 'int *'
|-FunctionDecl 0x7fffd83d58f0 prev 0x7fffd834dfe0 <line:501:19, line:2652:1> line:2647:16 used stbtt_GetFontVMetrics 'void (const stbtt_fontinfo *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd83d56e8 <col:38, col:60> col:60 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83d5760 <col:66, col:71> col:71 used ascent 'int *'
| |-ParmVarDecl 0x7fffd83d57d8 <col:79, col:84> col:84 used descent 'int *'
| |-ParmVarDecl 0x7fffd83d5850 <col:93, col:98> col:98 used lineGap 'int *'
| `-CompoundStmt 0x7fffd83d62f8 <line:2648:1, line:2652:1>
|   |-IfStmt 0x7fffd83d5c90 <line:2649:4, col:61>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd83d59d8 <col:8> 'int *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd83d59b0 <col:8> 'int *' lvalue ParmVar 0x7fffd83d5760 'ascent' 'int *'
|   | |-BinaryOperator 0x7fffd83d5c68 <col:17, col:61> 'int' '='
|   | | |-UnaryOperator 0x7fffd83d5a30 <col:17, col:18> 'int' lvalue prefix '*'
|   | | | `-ImplicitCastExpr 0x7fffd83d5a18 <col:18> 'int *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd83d59f0 <col:18> 'int *' lvalue ParmVar 0x7fffd83d5760 'ascent' 'int *'
|   | | `-ImplicitCastExpr 0x7fffd83d5c50 <col:28, col:61> 'int' <IntegralCast>
|   | |   `-CallExpr 0x7fffd83d5c20 <col:28, col:61> 'stbtt_int16':'short'
|   | |     |-ImplicitCastExpr 0x7fffd83d5c08 <col:28> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x7fffd83d5a50 <col:28> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   | |     `-BinaryOperator 0x7fffd83d5be0 <col:36, col:60> 'unsigned char *' '+'
|   | |       |-BinaryOperator 0x7fffd83d5b98 <col:36, col:53> 'unsigned char *' '+'
|   | |       | |-ImplicitCastExpr 0x7fffd83d5b68 <col:36, col:42> 'unsigned char *' <LValueToRValue>
|   | |       | | `-MemberExpr 0x7fffd83d5ab8 <col:36, col:42> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   | |       | |   `-ImplicitCastExpr 0x7fffd83d5aa0 <col:36> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |       | |     `-DeclRefExpr 0x7fffd83d5a78 <col:36> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d56e8 'info' 'const stbtt_fontinfo *'
|   | |       | `-ImplicitCastExpr 0x7fffd83d5b80 <col:47, col:53> 'int' <LValueToRValue>
|   | |       |   `-MemberExpr 0x7fffd83d5b30 <col:47, col:53> 'const int' lvalue ->hhea 0x7fffd834ce18
|   | |       |     `-ImplicitCastExpr 0x7fffd83d5b18 <col:47> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |       |       `-DeclRefExpr 0x7fffd83d5af0 <col:47> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d56e8 'info' 'const stbtt_fontinfo *'
|   | |       `-IntegerLiteral 0x7fffd83d5bc0 <col:60> 'int' 4
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd83d5fa8 <line:2650:4, col:61>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd83d5cf0 <col:8> 'int *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd83d5cc8 <col:8> 'int *' lvalue ParmVar 0x7fffd83d57d8 'descent' 'int *'
|   | |-BinaryOperator 0x7fffd83d5f80 <col:17, col:61> 'int' '='
|   | | |-UnaryOperator 0x7fffd83d5d48 <col:17, col:18> 'int' lvalue prefix '*'
|   | | | `-ImplicitCastExpr 0x7fffd83d5d30 <col:18> 'int *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd83d5d08 <col:18> 'int *' lvalue ParmVar 0x7fffd83d57d8 'descent' 'int *'
|   | | `-ImplicitCastExpr 0x7fffd83d5f68 <col:28, col:61> 'int' <IntegralCast>
|   | |   `-CallExpr 0x7fffd83d5f38 <col:28, col:61> 'stbtt_int16':'short'
|   | |     |-ImplicitCastExpr 0x7fffd83d5f20 <col:28> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x7fffd83d5d68 <col:28> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   | |     `-BinaryOperator 0x7fffd83d5ef8 <col:36, col:60> 'unsigned char *' '+'
|   | |       |-BinaryOperator 0x7fffd83d5eb0 <col:36, col:53> 'unsigned char *' '+'
|   | |       | |-ImplicitCastExpr 0x7fffd83d5e80 <col:36, col:42> 'unsigned char *' <LValueToRValue>
|   | |       | | `-MemberExpr 0x7fffd83d5dd0 <col:36, col:42> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   | |       | |   `-ImplicitCastExpr 0x7fffd83d5db8 <col:36> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |       | |     `-DeclRefExpr 0x7fffd83d5d90 <col:36> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d56e8 'info' 'const stbtt_fontinfo *'
|   | |       | `-ImplicitCastExpr 0x7fffd83d5e98 <col:47, col:53> 'int' <LValueToRValue>
|   | |       |   `-MemberExpr 0x7fffd83d5e48 <col:47, col:53> 'const int' lvalue ->hhea 0x7fffd834ce18
|   | |       |     `-ImplicitCastExpr 0x7fffd83d5e30 <col:47> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |       |       `-DeclRefExpr 0x7fffd83d5e08 <col:47> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d56e8 'info' 'const stbtt_fontinfo *'
|   | |       `-IntegerLiteral 0x7fffd83d5ed8 <col:60> 'int' 6
|   | `-<<<NULL>>>
|   `-IfStmt 0x7fffd83d62c0 <line:2651:4, col:61>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-ImplicitCastExpr 0x7fffd83d6008 <col:8> 'int *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83d5fe0 <col:8> 'int *' lvalue ParmVar 0x7fffd83d5850 'lineGap' 'int *'
|     |-BinaryOperator 0x7fffd83d6298 <col:17, col:61> 'int' '='
|     | |-UnaryOperator 0x7fffd83d6060 <col:17, col:18> 'int' lvalue prefix '*'
|     | | `-ImplicitCastExpr 0x7fffd83d6048 <col:18> 'int *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x7fffd83d6020 <col:18> 'int *' lvalue ParmVar 0x7fffd83d5850 'lineGap' 'int *'
|     | `-ImplicitCastExpr 0x7fffd83d6280 <col:28, col:61> 'int' <IntegralCast>
|     |   `-CallExpr 0x7fffd83d6250 <col:28, col:61> 'stbtt_int16':'short'
|     |     |-ImplicitCastExpr 0x7fffd83d6238 <col:28> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x7fffd83d6080 <col:28> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|     |     `-BinaryOperator 0x7fffd83d6210 <col:36, col:60> 'unsigned char *' '+'
|     |       |-BinaryOperator 0x7fffd83d61c8 <col:36, col:53> 'unsigned char *' '+'
|     |       | |-ImplicitCastExpr 0x7fffd83d6198 <col:36, col:42> 'unsigned char *' <LValueToRValue>
|     |       | | `-MemberExpr 0x7fffd83d60e8 <col:36, col:42> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|     |       | |   `-ImplicitCastExpr 0x7fffd83d60d0 <col:36> 'const stbtt_fontinfo *' <LValueToRValue>
|     |       | |     `-DeclRefExpr 0x7fffd83d60a8 <col:36> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d56e8 'info' 'const stbtt_fontinfo *'
|     |       | `-ImplicitCastExpr 0x7fffd83d61b0 <col:47, col:53> 'int' <LValueToRValue>
|     |       |   `-MemberExpr 0x7fffd83d6160 <col:47, col:53> 'const int' lvalue ->hhea 0x7fffd834ce18
|     |       |     `-ImplicitCastExpr 0x7fffd83d6148 <col:47> 'const stbtt_fontinfo *' <LValueToRValue>
|     |       |       `-DeclRefExpr 0x7fffd83d6120 <col:47> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d56e8 'info' 'const stbtt_fontinfo *'
|     |       `-IntegerLiteral 0x7fffd83d61f0 <col:60> 'int' 8
|     `-<<<NULL>>>
|-FunctionDecl 0x7fffd83d6540 prev 0x7fffd834e3a8 <line:501:19, line:2663:1> line:2654:16 stbtt_GetFontVMetricsOS2 'int (const stbtt_fontinfo *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd83d6330 <col:41, col:63> col:63 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83d63a8 <col:69, col:74> col:74 used typoAscent 'int *'
| |-ParmVarDecl 0x7fffd83d6420 <col:86, col:91> col:91 used typoDescent 'int *'
| |-ParmVarDecl 0x7fffd83d6498 <col:104, col:109> col:109 used typoLineGap 'int *'
| `-CompoundStmt 0x7fffd83d7240 <line:2655:1, line:2663:1>
|   |-DeclStmt 0x7fffd83d68c8 <line:2656:4, col:68>
|   | `-VarDecl 0x7fffd83d6618 <col:4, col:67> col:8 used tab 'int' cinit
|   |   `-ImplicitCastExpr 0x7fffd83d68b0 <col:14, col:67> 'int' <IntegralCast>
|   |     `-CallExpr 0x7fffd83d67f8 <col:14, col:67> 'stbtt_uint32':'unsigned int'
|   |       |-ImplicitCastExpr 0x7fffd83d67e0 <col:14> 'stbtt_uint32 (*)(stbtt_uint8 *, stbtt_uint32, const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x7fffd83d6678 <col:14> 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)' Function 0x7fffd83758f0 'stbtt__find_table' 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)'
|   |       |-ImplicitCastExpr 0x7fffd83d6838 <col:32, col:38> 'unsigned char *' <LValueToRValue>
|   |       | `-MemberExpr 0x7fffd83d66e0 <col:32, col:38> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   |       |   `-ImplicitCastExpr 0x7fffd83d66c8 <col:32> 'const stbtt_fontinfo *' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x7fffd83d66a0 <col:32> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d6330 'info' 'const stbtt_fontinfo *'
|   |       |-ImplicitCastExpr 0x7fffd83d6868 <col:44, col:50> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x7fffd83d6850 <col:44, col:50> 'int' <LValueToRValue>
|   |       |   `-MemberExpr 0x7fffd83d6758 <col:44, col:50> 'const int' lvalue ->fontstart 0x7fffd834cc38
|   |       |     `-ImplicitCastExpr 0x7fffd83d6740 <col:44> 'const stbtt_fontinfo *' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x7fffd83d6718 <col:44> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d6330 'info' 'const stbtt_fontinfo *'
|   |       `-ImplicitCastExpr 0x7fffd83d6898 <col:61> 'const char *' <BitCast>
|   |         `-ImplicitCastExpr 0x7fffd83d6880 <col:61> 'char *' <ArrayToPointerDecay>
|   |           `-StringLiteral 0x7fffd83d67b0 <col:61> 'char [5]' lvalue "OS/2"
|   |-IfStmt 0x7fffd83d6978 <line:2657:4, line:2658:14>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-UnaryOperator 0x7fffd83d6920 <line:2657:8, col:9> 'int' prefix '!'
|   | | `-ImplicitCastExpr 0x7fffd83d6908 <col:9> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83d68e0 <col:9> 'int' lvalue Var 0x7fffd83d6618 'tab' 'int'
|   | |-ReturnStmt 0x7fffd83d6960 <line:2658:7, col:14>
|   | | `-IntegerLiteral 0x7fffd83d6940 <col:14> 'int' 0
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd83d6c40 <line:2659:4, col:63>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd83d69d8 <col:8> 'int *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd83d69b0 <col:8> 'int *' lvalue ParmVar 0x7fffd83d63a8 'typoAscent' 'int *'
|   | |-BinaryOperator 0x7fffd83d6c18 <col:21, col:63> 'int' '='
|   | | |-UnaryOperator 0x7fffd83d6a30 <col:21, col:22> 'int' lvalue prefix '*'
|   | | | `-ImplicitCastExpr 0x7fffd83d6a18 <col:22> 'int *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd83d69f0 <col:22> 'int *' lvalue ParmVar 0x7fffd83d63a8 'typoAscent' 'int *'
|   | | `-ImplicitCastExpr 0x7fffd83d6c00 <col:36, col:63> 'int' <IntegralCast>
|   | |   `-CallExpr 0x7fffd83d6bd0 <col:36, col:63> 'stbtt_int16':'short'
|   | |     |-ImplicitCastExpr 0x7fffd83d6bb8 <col:36> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x7fffd83d6a50 <col:36> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   | |     `-BinaryOperator 0x7fffd83d6b90 <col:44, col:61> 'unsigned char *' '+'
|   | |       |-BinaryOperator 0x7fffd83d6b48 <col:44, col:55> 'unsigned char *' '+'
|   | |       | |-ImplicitCastExpr 0x7fffd83d6b18 <col:44, col:50> 'unsigned char *' <LValueToRValue>
|   | |       | | `-MemberExpr 0x7fffd83d6ab8 <col:44, col:50> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   | |       | |   `-ImplicitCastExpr 0x7fffd83d6aa0 <col:44> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |       | |     `-DeclRefExpr 0x7fffd83d6a78 <col:44> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d6330 'info' 'const stbtt_fontinfo *'
|   | |       | `-ImplicitCastExpr 0x7fffd83d6b30 <col:55> 'int' <LValueToRValue>
|   | |       |   `-DeclRefExpr 0x7fffd83d6af0 <col:55> 'int' lvalue Var 0x7fffd83d6618 'tab' 'int'
|   | |       `-IntegerLiteral 0x7fffd83d6b70 <col:61> 'int' 68
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd83d6f08 <line:2660:4, col:63>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd83d6ca0 <col:8> 'int *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd83d6c78 <col:8> 'int *' lvalue ParmVar 0x7fffd83d6420 'typoDescent' 'int *'
|   | |-BinaryOperator 0x7fffd83d6ee0 <col:21, col:63> 'int' '='
|   | | |-UnaryOperator 0x7fffd83d6cf8 <col:21, col:22> 'int' lvalue prefix '*'
|   | | | `-ImplicitCastExpr 0x7fffd83d6ce0 <col:22> 'int *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd83d6cb8 <col:22> 'int *' lvalue ParmVar 0x7fffd83d6420 'typoDescent' 'int *'
|   | | `-ImplicitCastExpr 0x7fffd83d6ec8 <col:36, col:63> 'int' <IntegralCast>
|   | |   `-CallExpr 0x7fffd83d6e98 <col:36, col:63> 'stbtt_int16':'short'
|   | |     |-ImplicitCastExpr 0x7fffd83d6e80 <col:36> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x7fffd83d6d18 <col:36> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   | |     `-BinaryOperator 0x7fffd83d6e58 <col:44, col:61> 'unsigned char *' '+'
|   | |       |-BinaryOperator 0x7fffd83d6e10 <col:44, col:55> 'unsigned char *' '+'
|   | |       | |-ImplicitCastExpr 0x7fffd83d6de0 <col:44, col:50> 'unsigned char *' <LValueToRValue>
|   | |       | | `-MemberExpr 0x7fffd83d6d80 <col:44, col:50> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   | |       | |   `-ImplicitCastExpr 0x7fffd83d6d68 <col:44> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |       | |     `-DeclRefExpr 0x7fffd83d6d40 <col:44> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d6330 'info' 'const stbtt_fontinfo *'
|   | |       | `-ImplicitCastExpr 0x7fffd83d6df8 <col:55> 'int' <LValueToRValue>
|   | |       |   `-DeclRefExpr 0x7fffd83d6db8 <col:55> 'int' lvalue Var 0x7fffd83d6618 'tab' 'int'
|   | |       `-IntegerLiteral 0x7fffd83d6e38 <col:61> 'int' 70
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd83d71d0 <line:2661:4, col:63>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd83d6f68 <col:8> 'int *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd83d6f40 <col:8> 'int *' lvalue ParmVar 0x7fffd83d6498 'typoLineGap' 'int *'
|   | |-BinaryOperator 0x7fffd83d71a8 <col:21, col:63> 'int' '='
|   | | |-UnaryOperator 0x7fffd83d6fc0 <col:21, col:22> 'int' lvalue prefix '*'
|   | | | `-ImplicitCastExpr 0x7fffd83d6fa8 <col:22> 'int *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd83d6f80 <col:22> 'int *' lvalue ParmVar 0x7fffd83d6498 'typoLineGap' 'int *'
|   | | `-ImplicitCastExpr 0x7fffd83d7190 <col:36, col:63> 'int' <IntegralCast>
|   | |   `-CallExpr 0x7fffd83d7160 <col:36, col:63> 'stbtt_int16':'short'
|   | |     |-ImplicitCastExpr 0x7fffd83d7148 <col:36> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x7fffd83d6fe0 <col:36> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   | |     `-BinaryOperator 0x7fffd83d7120 <col:44, col:61> 'unsigned char *' '+'
|   | |       |-BinaryOperator 0x7fffd83d70d8 <col:44, col:55> 'unsigned char *' '+'
|   | |       | |-ImplicitCastExpr 0x7fffd83d70a8 <col:44, col:50> 'unsigned char *' <LValueToRValue>
|   | |       | | `-MemberExpr 0x7fffd83d7048 <col:44, col:50> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   | |       | |   `-ImplicitCastExpr 0x7fffd83d7030 <col:44> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |       | |     `-DeclRefExpr 0x7fffd83d7008 <col:44> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d6330 'info' 'const stbtt_fontinfo *'
|   | |       | `-ImplicitCastExpr 0x7fffd83d70c0 <col:55> 'int' <LValueToRValue>
|   | |       |   `-DeclRefExpr 0x7fffd83d7080 <col:55> 'int' lvalue Var 0x7fffd83d6618 'tab' 'int'
|   | |       `-IntegerLiteral 0x7fffd83d7100 <col:61> 'int' 72
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x7fffd83d7228 <line:2662:4, col:11>
|     `-IntegerLiteral 0x7fffd83d7208 <col:11> 'int' 1
|-FunctionDecl 0x7fffd83d7518 prev 0x7fffd834e7c0 <line:501:19, line:2671:1> line:2665:16 stbtt_GetFontBoundingBox 'void (const stbtt_fontinfo *, int *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd83d7290 <col:41, col:63> col:63 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83d7308 <col:69, col:74> col:74 used x0 'int *'
| |-ParmVarDecl 0x7fffd83d7380 <col:78, col:83> col:83 used y0 'int *'
| |-ParmVarDecl 0x7fffd83d73f8 <col:87, col:92> col:92 used x1 'int *'
| |-ParmVarDecl 0x7fffd83d7470 <col:96, col:101> col:101 used y1 'int *'
| `-CompoundStmt 0x7fffd83d8060 <line:2666:1, line:2671:1>
|   |-BinaryOperator 0x7fffd83d7858 <line:2667:4, col:46> 'int' '='
|   | |-UnaryOperator 0x7fffd83d7620 <col:4, col:5> 'int' lvalue prefix '*'
|   | | `-ImplicitCastExpr 0x7fffd83d7608 <col:5> 'int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83d75e0 <col:5> 'int *' lvalue ParmVar 0x7fffd83d7308 'x0' 'int *'
|   | `-ImplicitCastExpr 0x7fffd83d7840 <col:10, col:46> 'int' <IntegralCast>
|   |   `-CallExpr 0x7fffd83d7810 <col:10, col:46> 'stbtt_int16':'short'
|   |     |-ImplicitCastExpr 0x7fffd83d77f8 <col:10> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd83d7640 <col:10> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |     `-BinaryOperator 0x7fffd83d77d0 <col:18, col:44> 'unsigned char *' '+'
|   |       |-BinaryOperator 0x7fffd83d7788 <col:18, col:37> 'unsigned char *' '+'
|   |       | |-ImplicitCastExpr 0x7fffd83d7758 <col:18, col:24> 'unsigned char *' <LValueToRValue>
|   |       | | `-MemberExpr 0x7fffd83d76a8 <col:18, col:24> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   |       | |   `-ImplicitCastExpr 0x7fffd83d7690 <col:18> 'const stbtt_fontinfo *' <LValueToRValue>
|   |       | |     `-DeclRefExpr 0x7fffd83d7668 <col:18> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d7290 'info' 'const stbtt_fontinfo *'
|   |       | `-ImplicitCastExpr 0x7fffd83d7770 <col:31, col:37> 'int' <LValueToRValue>
|   |       |   `-MemberExpr 0x7fffd83d7720 <col:31, col:37> 'const int' lvalue ->head 0x7fffd834cd58
|   |       |     `-ImplicitCastExpr 0x7fffd83d7708 <col:31> 'const stbtt_fontinfo *' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x7fffd83d76e0 <col:31> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d7290 'info' 'const stbtt_fontinfo *'
|   |       `-IntegerLiteral 0x7fffd83d77b0 <col:44> 'int' 36
|   |-BinaryOperator 0x7fffd83d7af8 <line:2668:4, col:46> 'int' '='
|   | |-UnaryOperator 0x7fffd83d78c0 <col:4, col:5> 'int' lvalue prefix '*'
|   | | `-ImplicitCastExpr 0x7fffd83d78a8 <col:5> 'int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83d7880 <col:5> 'int *' lvalue ParmVar 0x7fffd83d7380 'y0' 'int *'
|   | `-ImplicitCastExpr 0x7fffd83d7ae0 <col:10, col:46> 'int' <IntegralCast>
|   |   `-CallExpr 0x7fffd83d7ab0 <col:10, col:46> 'stbtt_int16':'short'
|   |     |-ImplicitCastExpr 0x7fffd83d7a98 <col:10> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd83d78e0 <col:10> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |     `-BinaryOperator 0x7fffd83d7a70 <col:18, col:44> 'unsigned char *' '+'
|   |       |-BinaryOperator 0x7fffd83d7a28 <col:18, col:37> 'unsigned char *' '+'
|   |       | |-ImplicitCastExpr 0x7fffd83d79f8 <col:18, col:24> 'unsigned char *' <LValueToRValue>
|   |       | | `-MemberExpr 0x7fffd83d7948 <col:18, col:24> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   |       | |   `-ImplicitCastExpr 0x7fffd83d7930 <col:18> 'const stbtt_fontinfo *' <LValueToRValue>
|   |       | |     `-DeclRefExpr 0x7fffd83d7908 <col:18> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d7290 'info' 'const stbtt_fontinfo *'
|   |       | `-ImplicitCastExpr 0x7fffd83d7a10 <col:31, col:37> 'int' <LValueToRValue>
|   |       |   `-MemberExpr 0x7fffd83d79c0 <col:31, col:37> 'const int' lvalue ->head 0x7fffd834cd58
|   |       |     `-ImplicitCastExpr 0x7fffd83d79a8 <col:31> 'const stbtt_fontinfo *' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x7fffd83d7980 <col:31> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d7290 'info' 'const stbtt_fontinfo *'
|   |       `-IntegerLiteral 0x7fffd83d7a50 <col:44> 'int' 38
|   |-BinaryOperator 0x7fffd83d7d98 <line:2669:4, col:46> 'int' '='
|   | |-UnaryOperator 0x7fffd83d7b60 <col:4, col:5> 'int' lvalue prefix '*'
|   | | `-ImplicitCastExpr 0x7fffd83d7b48 <col:5> 'int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83d7b20 <col:5> 'int *' lvalue ParmVar 0x7fffd83d73f8 'x1' 'int *'
|   | `-ImplicitCastExpr 0x7fffd83d7d80 <col:10, col:46> 'int' <IntegralCast>
|   |   `-CallExpr 0x7fffd83d7d50 <col:10, col:46> 'stbtt_int16':'short'
|   |     |-ImplicitCastExpr 0x7fffd83d7d38 <col:10> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd83d7b80 <col:10> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |     `-BinaryOperator 0x7fffd83d7d10 <col:18, col:44> 'unsigned char *' '+'
|   |       |-BinaryOperator 0x7fffd83d7cc8 <col:18, col:37> 'unsigned char *' '+'
|   |       | |-ImplicitCastExpr 0x7fffd83d7c98 <col:18, col:24> 'unsigned char *' <LValueToRValue>
|   |       | | `-MemberExpr 0x7fffd83d7be8 <col:18, col:24> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   |       | |   `-ImplicitCastExpr 0x7fffd83d7bd0 <col:18> 'const stbtt_fontinfo *' <LValueToRValue>
|   |       | |     `-DeclRefExpr 0x7fffd83d7ba8 <col:18> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d7290 'info' 'const stbtt_fontinfo *'
|   |       | `-ImplicitCastExpr 0x7fffd83d7cb0 <col:31, col:37> 'int' <LValueToRValue>
|   |       |   `-MemberExpr 0x7fffd83d7c60 <col:31, col:37> 'const int' lvalue ->head 0x7fffd834cd58
|   |       |     `-ImplicitCastExpr 0x7fffd83d7c48 <col:31> 'const stbtt_fontinfo *' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x7fffd83d7c20 <col:31> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d7290 'info' 'const stbtt_fontinfo *'
|   |       `-IntegerLiteral 0x7fffd83d7cf0 <col:44> 'int' 40
|   `-BinaryOperator 0x7fffd83d8038 <line:2670:4, col:46> 'int' '='
|     |-UnaryOperator 0x7fffd83d7e00 <col:4, col:5> 'int' lvalue prefix '*'
|     | `-ImplicitCastExpr 0x7fffd83d7de8 <col:5> 'int *' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fffd83d7dc0 <col:5> 'int *' lvalue ParmVar 0x7fffd83d7470 'y1' 'int *'
|     `-ImplicitCastExpr 0x7fffd83d8020 <col:10, col:46> 'int' <IntegralCast>
|       `-CallExpr 0x7fffd83d7ff0 <col:10, col:46> 'stbtt_int16':'short'
|         |-ImplicitCastExpr 0x7fffd83d7fd8 <col:10> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x7fffd83d7e20 <col:10> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|         `-BinaryOperator 0x7fffd83d7fb0 <col:18, col:44> 'unsigned char *' '+'
|           |-BinaryOperator 0x7fffd83d7f68 <col:18, col:37> 'unsigned char *' '+'
|           | |-ImplicitCastExpr 0x7fffd83d7f38 <col:18, col:24> 'unsigned char *' <LValueToRValue>
|           | | `-MemberExpr 0x7fffd83d7e88 <col:18, col:24> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|           | |   `-ImplicitCastExpr 0x7fffd83d7e70 <col:18> 'const stbtt_fontinfo *' <LValueToRValue>
|           | |     `-DeclRefExpr 0x7fffd83d7e48 <col:18> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d7290 'info' 'const stbtt_fontinfo *'
|           | `-ImplicitCastExpr 0x7fffd83d7f50 <col:31, col:37> 'int' <LValueToRValue>
|           |   `-MemberExpr 0x7fffd83d7f00 <col:31, col:37> 'const int' lvalue ->head 0x7fffd834cd58
|           |     `-ImplicitCastExpr 0x7fffd83d7ee8 <col:31> 'const stbtt_fontinfo *' <LValueToRValue>
|           |       `-DeclRefExpr 0x7fffd83d7ec0 <col:31> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d7290 'info' 'const stbtt_fontinfo *'
|           `-IntegerLiteral 0x7fffd83d7f90 <col:44> 'int' 42
|-FunctionDecl 0x7fffd83d81b0 prev 0x7fffd834daa8 <line:501:19, line:2677:1> line:2673:17 used stbtt_ScaleForPixelHeight 'float (const stbtt_fontinfo *, float)' extern
| |-ParmVarDecl 0x7fffd83d80a0 <col:43, col:65> col:65 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83d8118 <col:71, col:77> col:77 used height 'float'
| `-CompoundStmt 0x7fffd83d8880 <line:2674:1, line:2677:1>
|   |-DeclStmt 0x7fffd83d8730 <line:2675:4, col:93>
|   | `-VarDecl 0x7fffd83d8278 <col:4, col:92> col:8 used fheight 'int' cinit
|   |   `-BinaryOperator 0x7fffd83d8708 <col:18, col:92> 'int' '-'
|   |     |-ImplicitCastExpr 0x7fffd83d86d8 <col:18, col:53> 'int' <IntegralCast>
|   |     | `-CallExpr 0x7fffd83d84a8 <col:18, col:53> 'stbtt_int16':'short'
|   |     |   |-ImplicitCastExpr 0x7fffd83d8490 <col:18> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     |   | `-DeclRefExpr 0x7fffd83d82d8 <col:18> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |     |   `-BinaryOperator 0x7fffd83d8468 <col:26, col:52> 'unsigned char *' '+'
|   |     |     |-BinaryOperator 0x7fffd83d8420 <col:26, col:45> 'unsigned char *' '+'
|   |     |     | |-ImplicitCastExpr 0x7fffd83d83f0 <col:26, col:32> 'unsigned char *' <LValueToRValue>
|   |     |     | | `-MemberExpr 0x7fffd83d8340 <col:26, col:32> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   |     |     | |   `-ImplicitCastExpr 0x7fffd83d8328 <col:26> 'const stbtt_fontinfo *' <LValueToRValue>
|   |     |     | |     `-DeclRefExpr 0x7fffd83d8300 <col:26> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d80a0 'info' 'const stbtt_fontinfo *'
|   |     |     | `-ImplicitCastExpr 0x7fffd83d8408 <col:39, col:45> 'int' <LValueToRValue>
|   |     |     |   `-MemberExpr 0x7fffd83d83b8 <col:39, col:45> 'const int' lvalue ->hhea 0x7fffd834ce18
|   |     |     |     `-ImplicitCastExpr 0x7fffd83d83a0 <col:39> 'const stbtt_fontinfo *' <LValueToRValue>
|   |     |     |       `-DeclRefExpr 0x7fffd83d8378 <col:39> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d80a0 'info' 'const stbtt_fontinfo *'
|   |     |     `-IntegerLiteral 0x7fffd83d8448 <col:52> 'int' 4
|   |     `-ImplicitCastExpr 0x7fffd83d86f0 <col:57, col:92> 'int' <IntegralCast>
|   |       `-CallExpr 0x7fffd83d86a8 <col:57, col:92> 'stbtt_int16':'short'
|   |         |-ImplicitCastExpr 0x7fffd83d8690 <col:57> 'stbtt_int16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x7fffd83d84d8 <col:57> 'stbtt_int16 (stbtt_uint8 *)' Function 0x7fffd8370ec0 'ttSHORT' 'stbtt_int16 (stbtt_uint8 *)'
|   |         `-BinaryOperator 0x7fffd83d8668 <col:65, col:91> 'unsigned char *' '+'
|   |           |-BinaryOperator 0x7fffd83d8620 <col:65, col:84> 'unsigned char *' '+'
|   |           | |-ImplicitCastExpr 0x7fffd83d85f0 <col:65, col:71> 'unsigned char *' <LValueToRValue>
|   |           | | `-MemberExpr 0x7fffd83d8540 <col:65, col:71> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   |           | |   `-ImplicitCastExpr 0x7fffd83d8528 <col:65> 'const stbtt_fontinfo *' <LValueToRValue>
|   |           | |     `-DeclRefExpr 0x7fffd83d8500 <col:65> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d80a0 'info' 'const stbtt_fontinfo *'
|   |           | `-ImplicitCastExpr 0x7fffd83d8608 <col:78, col:84> 'int' <LValueToRValue>
|   |           |   `-MemberExpr 0x7fffd83d85b8 <col:78, col:84> 'const int' lvalue ->hhea 0x7fffd834ce18
|   |           |     `-ImplicitCastExpr 0x7fffd83d85a0 <col:78> 'const stbtt_fontinfo *' <LValueToRValue>
|   |           |       `-DeclRefExpr 0x7fffd83d8578 <col:78> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d80a0 'info' 'const stbtt_fontinfo *'
|   |           `-IntegerLiteral 0x7fffd83d8648 <col:91> 'int' 6
|   `-ReturnStmt 0x7fffd83d8868 <line:2676:4, col:28>
|     `-BinaryOperator 0x7fffd83d8840 <col:11, col:28> 'float' '/'
|       |-CStyleCastExpr 0x7fffd83d87c0 <col:11, col:19> 'float' <NoOp>
|       | `-ImplicitCastExpr 0x7fffd83d8788 <col:19> 'float' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fffd83d8748 <col:19> 'float' lvalue ParmVar 0x7fffd83d8118 'height' 'float'
|       `-ImplicitCastExpr 0x7fffd83d8828 <col:28> 'float' <IntegralToFloating>
|         `-ImplicitCastExpr 0x7fffd83d8810 <col:28> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x7fffd83d87e8 <col:28> 'int' lvalue Var 0x7fffd83d8278 'fheight' 'int'
|-FunctionDecl 0x7fffd83d89c0 prev 0x7fffd834dc78 <line:501:19, line:2683:1> line:2679:17 used stbtt_ScaleForMappingEmToPixels 'float (const stbtt_fontinfo *, float)' extern
| |-ParmVarDecl 0x7fffd83d88b0 <col:49, col:71> col:71 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83d8928 <col:77, col:83> col:83 used pixels 'float'
| `-CompoundStmt 0x7fffd83d8df0 <line:2680:1, line:2683:1>
|   |-DeclStmt 0x7fffd83d8d00 <line:2681:4, col:59>
|   | `-VarDecl 0x7fffd83d8a88 <col:4, col:58> col:8 used unitsPerEm 'int' cinit
|   |   `-ImplicitCastExpr 0x7fffd83d8ce8 <col:21, col:58> 'int' <IntegralCast>
|   |     `-CallExpr 0x7fffd83d8cb8 <col:21, col:58> 'stbtt_uint16':'unsigned short'
|   |       |-ImplicitCastExpr 0x7fffd83d8ca0 <col:21> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x7fffd83d8ae8 <col:21> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       `-BinaryOperator 0x7fffd83d8c78 <col:30, col:56> 'unsigned char *' '+'
|   |         |-BinaryOperator 0x7fffd83d8c30 <col:30, col:49> 'unsigned char *' '+'
|   |         | |-ImplicitCastExpr 0x7fffd83d8c00 <col:30, col:36> 'unsigned char *' <LValueToRValue>
|   |         | | `-MemberExpr 0x7fffd83d8b50 <col:30, col:36> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   |         | |   `-ImplicitCastExpr 0x7fffd83d8b38 <col:30> 'const stbtt_fontinfo *' <LValueToRValue>
|   |         | |     `-DeclRefExpr 0x7fffd83d8b10 <col:30> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d88b0 'info' 'const stbtt_fontinfo *'
|   |         | `-ImplicitCastExpr 0x7fffd83d8c18 <col:43, col:49> 'int' <LValueToRValue>
|   |         |   `-MemberExpr 0x7fffd83d8bc8 <col:43, col:49> 'const int' lvalue ->head 0x7fffd834cd58
|   |         |     `-ImplicitCastExpr 0x7fffd83d8bb0 <col:43> 'const stbtt_fontinfo *' <LValueToRValue>
|   |         |       `-DeclRefExpr 0x7fffd83d8b88 <col:43> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d88b0 'info' 'const stbtt_fontinfo *'
|   |         `-IntegerLiteral 0x7fffd83d8c58 <col:56> 'int' 18
|   `-ReturnStmt 0x7fffd83d8dd8 <line:2682:4, col:20>
|     `-BinaryOperator 0x7fffd83d8db0 <col:11, col:20> 'float' '/'
|       |-ImplicitCastExpr 0x7fffd83d8d68 <col:11> 'float' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd83d8d18 <col:11> 'float' lvalue ParmVar 0x7fffd83d8928 'pixels' 'float'
|       `-ImplicitCastExpr 0x7fffd83d8d98 <col:20> 'float' <IntegralToFloating>
|         `-ImplicitCastExpr 0x7fffd83d8d80 <col:20> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x7fffd83d8d40 <col:20> 'int' lvalue Var 0x7fffd83d8a88 'unitsPerEm' 'int'
|-FunctionDecl 0x7fffd83d8f20 prev 0x7fffd8352530 <line:501:19, line:2688:1> line:2685:16 stbtt_FreeShape 'void (const stbtt_fontinfo *, stbtt_vertex *)' extern
| |-ParmVarDecl 0x7fffd83d8e20 <col:32, col:54> col:54 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83d8e90 <col:60, col:74> col:74 used v 'stbtt_vertex *'
| `-CompoundStmt 0x7fffd83d91f8 <line:2686:1, line:2688:1>
|   `-ParenExpr 0x7fffd83d91d8 <line:468:31, col:49> 'void'
|     `-BinaryOperator 0x7fffd83d91b0 <col:32, col:48> 'void' ','
|       |-CStyleCastExpr 0x7fffd83d90c0 <col:32, col:40> 'void' <ToVoid>
|       | `-ImplicitCastExpr 0x7fffd83d90a8 <col:38, col:40> 'void *' <LValueToRValue>
|       |   `-ParenExpr 0x7fffd83d9088 <col:38, col:40> 'void *const' lvalue
|       |     `-MemberExpr 0x7fffd83d9010 <line:2687:18, col:24> 'void *const' lvalue ->userdata 0x7fffd834cb78
|       |       `-ImplicitCastExpr 0x7fffd83d8ff8 <col:18> 'const stbtt_fontinfo *' <LValueToRValue>
|       |         `-DeclRefExpr 0x7fffd83d8fd0 <col:18> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d8e20 'info' 'const stbtt_fontinfo *'
|       `-CallExpr 0x7fffd83d9150 <line:468:42, col:48> 'void'
|         |-ImplicitCastExpr 0x7fffd83d9138 <col:42> 'void (*)(void *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x7fffd83d90e8 <col:42> 'void (void *)' Function 0x7fffd831bec0 'free' 'void (void *)'
|         `-ImplicitCastExpr 0x7fffd83d9198 <line:2687:15> 'void *' <BitCast>
|           `-ImplicitCastExpr 0x7fffd83d9180 <col:15> 'stbtt_vertex *' <LValueToRValue>
|             `-DeclRefExpr 0x7fffd83d9110 <col:15> 'stbtt_vertex *' lvalue ParmVar 0x7fffd83d8e90 'v' 'stbtt_vertex *'
|-FunctionDecl 0x7fffd83d93b0 <line:501:19, line:2705:1> line:2690:24 used stbtt_FindSVGDoc 'stbtt_uint8 *(const stbtt_fontinfo *, int)' extern
| |-ParmVarDecl 0x7fffd83d9220 <col:41, col:63> col:63 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83d9298 <col:69, col:73> col:73 used gl 'int'
| `-CompoundStmt 0x7fffd83da1e0 <line:2691:1, line:2705:1>
|   |-DeclStmt 0x7fffd83d94d8 <line:2692:4, col:9>
|   | `-VarDecl 0x7fffd83d9478 <col:4, col:8> col:8 used i 'int'
|   |-DeclStmt 0x7fffd83d95f0 <line:2693:4, col:34>
|   | `-VarDecl 0x7fffd83d9500 <col:4, col:30> col:17 used data 'stbtt_uint8 *' cinit
|   |   `-ImplicitCastExpr 0x7fffd83d95d8 <col:24, col:30> 'unsigned char *' <LValueToRValue>
|   |     `-MemberExpr 0x7fffd83d95a0 <col:24, col:30> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   |       `-ImplicitCastExpr 0x7fffd83d9588 <col:24> 'const stbtt_fontinfo *' <LValueToRValue>
|   |         `-DeclRefExpr 0x7fffd83d9560 <col:24> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d9220 'info' 'const stbtt_fontinfo *'
|   |-DeclStmt 0x7fffd83d9820 <line:2694:4, col:78>
|   | `-VarDecl 0x7fffd83d9618 <col:4, col:77> col:17 used svg_doc_list 'stbtt_uint8 *' cinit
|   |   `-BinaryOperator 0x7fffd83d97f8 <col:32, col:77> 'stbtt_uint8 *' '+'
|   |     |-ImplicitCastExpr 0x7fffd83d97e0 <col:32> 'stbtt_uint8 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd83d9678 <col:32> 'stbtt_uint8 *' lvalue Var 0x7fffd83d9500 'data' 'stbtt_uint8 *'
|   |     `-CallExpr 0x7fffd83d97b0 <col:39, col:77> 'int'
|   |       |-ImplicitCastExpr 0x7fffd83d9798 <col:39> 'int (*)(stbtt_fontinfo *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x7fffd83d96a0 <col:39> 'int (stbtt_fontinfo *)' Function 0x7fffd837b858 'stbtt__get_svg' 'int (stbtt_fontinfo *)'
|   |       `-CStyleCastExpr 0x7fffd83d9718 <col:54, col:73> 'stbtt_fontinfo *' <BitCast>
|   |         `-ImplicitCastExpr 0x7fffd83d9700 <col:73> 'const stbtt_fontinfo *' <LValueToRValue>
|   |           `-DeclRefExpr 0x7fffd83d96c8 <col:73> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83d9220 'info' 'const stbtt_fontinfo *'
|   |-DeclStmt 0x7fffd83d9978 <line:2696:4, col:43>
|   | `-VarDecl 0x7fffd83d9850 <col:4, col:42> col:8 used numEntries 'int' cinit
|   |   `-ImplicitCastExpr 0x7fffd83d9960 <col:21, col:42> 'int' <IntegralCast>
|   |     `-CallExpr 0x7fffd83d9918 <col:21, col:42> 'stbtt_uint16':'unsigned short'
|   |       |-ImplicitCastExpr 0x7fffd83d9900 <col:21> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x7fffd83d98b0 <col:21> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       `-ImplicitCastExpr 0x7fffd83d9948 <col:30> 'stbtt_uint8 *' <LValueToRValue>
|   |         `-DeclRefExpr 0x7fffd83d98d8 <col:30> 'stbtt_uint8 *' lvalue Var 0x7fffd83d9618 'svg_doc_list' 'stbtt_uint8 *'
|   |-DeclStmt 0x7fffd83d9a88 <line:2697:4, col:44>
|   | `-VarDecl 0x7fffd83d99a0 <col:4, col:43> col:17 used svg_docs 'stbtt_uint8 *' cinit
|   |   `-BinaryOperator 0x7fffd83d9a60 <col:28, col:43> 'stbtt_uint8 *' '+'
|   |     |-ImplicitCastExpr 0x7fffd83d9a48 <col:28> 'stbtt_uint8 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd83d9a00 <col:28> 'stbtt_uint8 *' lvalue Var 0x7fffd83d9618 'svg_doc_list' 'stbtt_uint8 *'
|   |     `-IntegerLiteral 0x7fffd83d9a28 <col:43> 'int' 2
|   |-ForStmt 0x7fffd83da158 <line:2699:4, line:2703:4>
|   | |-BinaryOperator 0x7fffd83d9ae8 <line:2699:8, col:10> 'int' '='
|   | | |-DeclRefExpr 0x7fffd83d9aa0 <col:8> 'int' lvalue Var 0x7fffd83d9478 'i' 'int'
|   | | `-IntegerLiteral 0x7fffd83d9ac8 <col:10> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83d9b90 <col:13, col:15> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd83d9b60 <col:13> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd83d9b10 <col:13> 'int' lvalue Var 0x7fffd83d9478 'i' 'int'
|   | | `-ImplicitCastExpr 0x7fffd83d9b78 <col:15> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83d9b38 <col:15> 'int' lvalue Var 0x7fffd83d9850 'numEntries' 'int'
|   | |-UnaryOperator 0x7fffd83d9be0 <col:27, col:28> 'int' postfix '++'
|   | | `-DeclRefExpr 0x7fffd83d9bb8 <col:27> 'int' lvalue Var 0x7fffd83d9478 'i' 'int'
|   | `-CompoundStmt 0x7fffd83da138 <col:32, line:2703:4>
|   |   |-DeclStmt 0x7fffd83d9d80 <line:2700:7, col:49>
|   |   | `-VarDecl 0x7fffd83d9c10 <col:7, col:48> col:20 used svg_doc 'stbtt_uint8 *' cinit
|   |   |   `-BinaryOperator 0x7fffd83d9d58 <col:30, col:48> 'stbtt_uint8 *' '+'
|   |   |     |-ImplicitCastExpr 0x7fffd83d9d40 <col:30> 'stbtt_uint8 *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x7fffd83d9c70 <col:30> 'stbtt_uint8 *' lvalue Var 0x7fffd83d99a0 'svg_docs' 'stbtt_uint8 *'
|   |   |     `-ParenExpr 0x7fffd83d9d20 <col:41, col:48> 'int'
|   |   |       `-BinaryOperator 0x7fffd83d9cf8 <col:42, col:47> 'int' '*'
|   |   |         |-IntegerLiteral 0x7fffd83d9c98 <col:42> 'int' 12
|   |   |         `-ImplicitCastExpr 0x7fffd83d9ce0 <col:47> 'int' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x7fffd83d9cb8 <col:47> 'int' lvalue Var 0x7fffd83d9478 'i' 'int'
|   |   `-IfStmt 0x7fffd83da100 <line:2701:7, line:2702:17>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x7fffd83da080 <line:2701:11, col:68> 'int' '&&'
|   |     | |-ParenExpr 0x7fffd83d9ec8 <col:11, col:35> 'int'
|   |     | | `-BinaryOperator 0x7fffd83d9ea0 <col:12, col:34> 'int' '>='
|   |     | |   |-ImplicitCastExpr 0x7fffd83d9e70 <col:12> 'int' <LValueToRValue>
|   |     | |   | `-DeclRefExpr 0x7fffd83d9d98 <col:12> 'int' lvalue ParmVar 0x7fffd83d9298 'gl' 'int'
|   |     | |   `-ImplicitCastExpr 0x7fffd83d9e88 <col:18, col:34> 'int' <IntegralCast>
|   |     | |     `-CallExpr 0x7fffd83d9e28 <col:18, col:34> 'stbtt_uint16':'unsigned short'
|   |     | |       |-ImplicitCastExpr 0x7fffd83d9e10 <col:18> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     | |       | `-DeclRefExpr 0x7fffd83d9dc0 <col:18> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     | |       `-ImplicitCastExpr 0x7fffd83d9e58 <col:27> 'stbtt_uint8 *' <LValueToRValue>
|   |     | |         `-DeclRefExpr 0x7fffd83d9de8 <col:27> 'stbtt_uint8 *' lvalue Var 0x7fffd83d9c10 'svg_doc' 'stbtt_uint8 *'
|   |     | `-ParenExpr 0x7fffd83da060 <col:40, col:68> 'int'
|   |     |   `-BinaryOperator 0x7fffd83da038 <col:41, col:67> 'int' '<='
|   |     |     |-ImplicitCastExpr 0x7fffd83da008 <col:41> 'int' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x7fffd83d9ee8 <col:41> 'int' lvalue ParmVar 0x7fffd83d9298 'gl' 'int'
|   |     |     `-ImplicitCastExpr 0x7fffd83da020 <col:47, col:67> 'int' <IntegralCast>
|   |     |       `-CallExpr 0x7fffd83d9fd8 <col:47, col:67> 'stbtt_uint16':'unsigned short'
|   |     |         |-ImplicitCastExpr 0x7fffd83d9fc0 <col:47> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     |         | `-DeclRefExpr 0x7fffd83d9f10 <col:47> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     |         `-BinaryOperator 0x7fffd83d9f98 <col:56, col:66> 'stbtt_uint8 *' '+'
|   |     |           |-ImplicitCastExpr 0x7fffd83d9f80 <col:56> 'stbtt_uint8 *' <LValueToRValue>
|   |     |           | `-DeclRefExpr 0x7fffd83d9f38 <col:56> 'stbtt_uint8 *' lvalue Var 0x7fffd83d9c10 'svg_doc' 'stbtt_uint8 *'
|   |     |           `-IntegerLiteral 0x7fffd83d9f60 <col:66> 'int' 2
|   |     |-ReturnStmt 0x7fffd83da0e8 <line:2702:10, col:17>
|   |     | `-ImplicitCastExpr 0x7fffd83da0d0 <col:17> 'stbtt_uint8 *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fffd83da0a8 <col:17> 'stbtt_uint8 *' lvalue Var 0x7fffd83d9c10 'svg_doc' 'stbtt_uint8 *'
|   |     `-<<<NULL>>>
|   `-ReturnStmt 0x7fffd83da1c8 <line:2704:4, col:11>
|     `-ImplicitCastExpr 0x7fffd83da1b0 <col:11> 'stbtt_uint8 *' <NullToPointer>
|       `-IntegerLiteral 0x7fffd83da190 <col:11> 'int' 0
|-FunctionDecl 0x7fffd83da3c8 prev 0x7fffd8352aa0 <line:501:19, line:2722:1> line:2707:15 used stbtt_GetGlyphSVG 'int (const stbtt_fontinfo *, int, const char **)' extern
| |-ParmVarDecl 0x7fffd83da238 <col:33, col:55> col:55 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83da2b0 <col:61, col:65> col:65 used gl 'int'
| |-ParmVarDecl 0x7fffd83da328 <col:69, col:82> col:82 used svg 'const char **'
| `-CompoundStmt 0x7fffd83daee8 <line:2708:1, line:2722:1>
|   |-DeclStmt 0x7fffd83da580 <line:2709:4, col:34>
|   | `-VarDecl 0x7fffd83da490 <col:4, col:30> col:17 used data 'stbtt_uint8 *' cinit
|   |   `-ImplicitCastExpr 0x7fffd83da568 <col:24, col:30> 'unsigned char *' <LValueToRValue>
|   |     `-MemberExpr 0x7fffd83da530 <col:24, col:30> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   |       `-ImplicitCastExpr 0x7fffd83da518 <col:24> 'const stbtt_fontinfo *' <LValueToRValue>
|   |         `-DeclRefExpr 0x7fffd83da4f0 <col:24> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83da238 'info' 'const stbtt_fontinfo *'
|   |-DeclStmt 0x7fffd83da608 <line:2710:4, col:24>
|   | `-VarDecl 0x7fffd83da5a8 <col:4, col:17> col:17 used svg_doc 'stbtt_uint8 *'
|   |-IfStmt 0x7fffd83da730 <line:2712:4, line:2713:14>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83da6d0 <line:2712:8, col:21> 'int' '=='
|   | | |-ImplicitCastExpr 0x7fffd83da6b8 <col:8, col:14> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x7fffd83da660 <col:8, col:14> 'const int' lvalue ->svg 0x7fffd834cf98
|   | | |   `-ImplicitCastExpr 0x7fffd83da648 <col:8> 'const stbtt_fontinfo *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x7fffd83da620 <col:8> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83da238 'info' 'const stbtt_fontinfo *'
|   | | `-IntegerLiteral 0x7fffd83da698 <col:21> 'int' 0
|   | |-ReturnStmt 0x7fffd83da718 <line:2713:7, col:14>
|   | | `-IntegerLiteral 0x7fffd83da6f8 <col:14> 'int' 0
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x7fffd83da8f8 <line:2715:4, col:39> 'stbtt_uint8 *' '='
|   | |-DeclRefExpr 0x7fffd83da768 <col:4> 'stbtt_uint8 *' lvalue Var 0x7fffd83da5a8 'svg_doc' 'stbtt_uint8 *'
|   | `-CallExpr 0x7fffd83da890 <col:14, col:39> 'stbtt_uint8 *'
|   |   |-ImplicitCastExpr 0x7fffd83da878 <col:14> 'stbtt_uint8 *(*)(const stbtt_fontinfo *, int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x7fffd83da790 <col:14> 'stbtt_uint8 *(const stbtt_fontinfo *, int)' Function 0x7fffd83d93b0 'stbtt_FindSVGDoc' 'stbtt_uint8 *(const stbtt_fontinfo *, int)'
|   |   |-ImplicitCastExpr 0x7fffd83da8c8 <col:31> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x7fffd83da7d0 <col:31> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83da238 'info' 'const stbtt_fontinfo *'
|   |   `-ImplicitCastExpr 0x7fffd83da8e0 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd83da7f8 <col:37> 'int' lvalue ParmVar 0x7fffd83da2b0 'gl' 'int'
|   `-IfStmt 0x7fffd83daeb0 <line:2716:4, line:2721:4>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fffd83da9f8 <line:2716:8, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25> 'int' '!='
|     | |-ImplicitCastExpr 0x7fffd83da9c8 <././stb/stb_truetype.h:2716:8> 'stbtt_uint8 *' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fffd83da920 <col:8> 'stbtt_uint8 *' lvalue Var 0x7fffd83da5a8 'svg_doc' 'stbtt_uint8 *'
|     | `-ImplicitCastExpr 0x7fffd83da9e0 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'stbtt_uint8 *' <BitCast>
|     |   `-ParenExpr 0x7fffd83da9a8 <col:16, col:25> 'void *'
|     |     `-CStyleCastExpr 0x7fffd83da980 <col:17, col:24> 'void *' <NullToPointer>
|     |       `-IntegerLiteral 0x7fffd83da948 <col:24> 'int' 0
|     |-CompoundStmt 0x7fffd83dae40 <././stb/stb_truetype.h:2716:25, line:2719:4>
|     | |-BinaryOperator 0x7fffd83dacf0 <line:2717:7, col:61> 'const char *' '='
|     | | |-UnaryOperator 0x7fffd83daa60 <col:7, col:8> 'const char *' lvalue prefix '*'
|     | | | `-ImplicitCastExpr 0x7fffd83daa48 <col:8> 'const char **' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x7fffd83daa20 <col:8> 'const char **' lvalue ParmVar 0x7fffd83da328 'svg' 'const char **'
|     | | `-ImplicitCastExpr 0x7fffd83dacd8 <col:14, col:61> 'const char *' <BitCast>
|     | |   `-BinaryOperator 0x7fffd83dacb0 <col:14, col:61> 'char *' '+'
|     | |     |-BinaryOperator 0x7fffd83dab90 <col:14, col:36> 'char *' '+'
|     | |     | |-CStyleCastExpr 0x7fffd83daad8 <col:14, col:23> 'char *' <BitCast>
|     | |     | | `-ImplicitCastExpr 0x7fffd83daac0 <col:23> 'stbtt_uint8 *' <LValueToRValue>
|     | |     | |   `-DeclRefExpr 0x7fffd83daa80 <col:23> 'stbtt_uint8 *' lvalue Var 0x7fffd83da490 'data' 'stbtt_uint8 *'
|     | |     | `-ImplicitCastExpr 0x7fffd83dab78 <col:30, col:36> 'int' <LValueToRValue>
|     | |     |   `-MemberExpr 0x7fffd83dab40 <col:30, col:36> 'const int' lvalue ->svg 0x7fffd834cf98
|     | |     |     `-ImplicitCastExpr 0x7fffd83dab28 <col:30> 'const stbtt_fontinfo *' <LValueToRValue>
|     | |     |       `-DeclRefExpr 0x7fffd83dab00 <col:30> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83da238 'info' 'const stbtt_fontinfo *'
|     | |     `-CallExpr 0x7fffd83dac80 <col:42, col:61> 'stbtt_uint32':'unsigned int'
|     | |       |-ImplicitCastExpr 0x7fffd83dac68 <col:42> 'stbtt_uint32 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|     | |       | `-DeclRefExpr 0x7fffd83dabb8 <col:42> 'stbtt_uint32 (stbtt_uint8 *)' Function 0x7fffd83712a0 'ttULONG' 'stbtt_uint32 (stbtt_uint8 *)'
|     | |       `-BinaryOperator 0x7fffd83dac40 <col:50, col:60> 'stbtt_uint8 *' '+'
|     | |         |-ImplicitCastExpr 0x7fffd83dac28 <col:50> 'stbtt_uint8 *' <LValueToRValue>
|     | |         | `-DeclRefExpr 0x7fffd83dabe0 <col:50> 'stbtt_uint8 *' lvalue Var 0x7fffd83da5a8 'svg_doc' 'stbtt_uint8 *'
|     | |         `-IntegerLiteral 0x7fffd83dac08 <col:60> 'int' 4
|     | `-ReturnStmt 0x7fffd83dae28 <line:2718:7, col:33>
|     |   `-ImplicitCastExpr 0x7fffd83dae10 <col:14, col:33> 'int' <IntegralCast>
|     |     `-CallExpr 0x7fffd83dade0 <col:14, col:33> 'stbtt_uint32':'unsigned int'
|     |       |-ImplicitCastExpr 0x7fffd83dadc8 <col:14> 'stbtt_uint32 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|     |       | `-DeclRefExpr 0x7fffd83dad18 <col:14> 'stbtt_uint32 (stbtt_uint8 *)' Function 0x7fffd83712a0 'ttULONG' 'stbtt_uint32 (stbtt_uint8 *)'
|     |       `-BinaryOperator 0x7fffd83dada0 <col:22, col:32> 'stbtt_uint8 *' '+'
|     |         |-ImplicitCastExpr 0x7fffd83dad88 <col:22> 'stbtt_uint8 *' <LValueToRValue>
|     |         | `-DeclRefExpr 0x7fffd83dad40 <col:22> 'stbtt_uint8 *' lvalue Var 0x7fffd83da5a8 'svg_doc' 'stbtt_uint8 *'
|     |         `-IntegerLiteral 0x7fffd83dad68 <col:32> 'int' 8
|     `-CompoundStmt 0x7fffd83dae98 <line:2719:11, line:2721:4>
|       `-ReturnStmt 0x7fffd83dae80 <line:2720:7, col:14>
|         `-IntegerLiteral 0x7fffd83dae60 <col:14> 'int' 0
|-FunctionDecl 0x7fffd83db0c0 prev 0x7fffd8352848 <line:501:19, line:2727:1> line:2724:15 stbtt_GetCodepointSVG 'int (const stbtt_fontinfo *, int, const char **)' extern
| |-ParmVarDecl 0x7fffd83daf30 <col:37, col:59> col:59 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83dafa8 <col:65, col:69> col:69 used unicode_codepoint 'int'
| |-ParmVarDecl 0x7fffd83db020 <col:88, col:101> col:101 used svg 'const char **'
| `-CompoundStmt 0x7fffd83db418 <line:2725:1, line:2727:1>
|   `-ReturnStmt 0x7fffd83db3d0 <line:2726:4, col:85>
|     `-CallExpr 0x7fffd83db360 <col:11, col:85> 'int'
|       |-ImplicitCastExpr 0x7fffd83db348 <col:11> 'int (*)(const stbtt_fontinfo *, int, const char **)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x7fffd83db178 <col:11> 'int (const stbtt_fontinfo *, int, const char **)' Function 0x7fffd83da3c8 'stbtt_GetGlyphSVG' 'int (const stbtt_fontinfo *, int, const char **)'
|       |-ImplicitCastExpr 0x7fffd83db3a0 <col:29> 'const stbtt_fontinfo *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd83db1a0 <col:29> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83daf30 'info' 'const stbtt_fontinfo *'
|       |-CallExpr 0x7fffd83db258 <col:35, col:79> 'int'
|       | |-ImplicitCastExpr 0x7fffd83db240 <col:35> 'int (*)(const stbtt_fontinfo *, int)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x7fffd83db1c8 <col:35> 'int (const stbtt_fontinfo *, int)' Function 0x7fffd83829f0 'stbtt_FindGlyphIndex' 'int (const stbtt_fontinfo *, int)'
|       | |-ImplicitCastExpr 0x7fffd83db290 <col:56> 'const stbtt_fontinfo *' <LValueToRValue>
|       | | `-DeclRefExpr 0x7fffd83db1f0 <col:56> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83daf30 'info' 'const stbtt_fontinfo *'
|       | `-ImplicitCastExpr 0x7fffd83db2a8 <col:62> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fffd83db218 <col:62> 'int' lvalue ParmVar 0x7fffd83dafa8 'unicode_codepoint' 'int'
|       `-ImplicitCastExpr 0x7fffd83db3b8 <col:82> 'const char **' <LValueToRValue>
|         `-DeclRefExpr 0x7fffd83db2c0 <col:82> 'const char **' lvalue ParmVar 0x7fffd83db020 'svg' 'const char **'
|-FunctionDecl 0x7fffd83db948 prev 0x7fffd8359728 <line:501:19, line:2750:1> line:2734:16 used stbtt_GetGlyphBitmapBoxSubpixel 'void (const stbtt_fontinfo *, int, float, float, float, float, int *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd83db440 <col:48, col:70> col:70 used font 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83db4b8 <col:76, col:80> col:80 used glyph 'int'
| |-ParmVarDecl 0x7fffd83db530 <col:87, col:93> col:93 used scale_x 'float'
| |-ParmVarDecl 0x7fffd83db5a8 <col:102, col:108> col:108 used scale_y 'float'
| |-ParmVarDecl 0x7fffd83db620 <col:116, col:122> col:122 used shift_x 'float'
| |-ParmVarDecl 0x7fffd83db698 <col:131, col:137> col:137 used shift_y 'float'
| |-ParmVarDecl 0x7fffd83db710 <col:146, col:151> col:151 used ix0 'int *'
| |-ParmVarDecl 0x7fffd83db788 <col:156, col:161> col:161 used iy0 'int *'
| |-ParmVarDecl 0x7fffd83db800 <col:166, col:171> col:171 used ix1 'int *'
| |-ParmVarDecl 0x7fffd83db878 <col:176, col:181> col:181 used iy1 'int *'
| |-CompoundStmt 0x7fffd83dd0b0 <line:2735:1, line:2750:1>
| | |-DeclStmt 0x7fffd83dbc80 <line:2736:4, col:23>
| | | |-VarDecl 0x7fffd83dba50 <col:4, col:11> col:8 used x0 'int' cinit
| | | | `-IntegerLiteral 0x7fffd83dbab0 <col:11> 'int' 0
| | | |-VarDecl 0x7fffd83dbae8 <col:4, col:16> col:13 used y0 'int' cinit
| | | | `-IntegerLiteral 0x7fffd83dbb48 <col:16> 'int' 0
| | | |-VarDecl 0x7fffd83dbb80 <col:4, col:18> col:18 used x1 'int'
| | | `-VarDecl 0x7fffd83dbbf8 <col:4, col:21> col:21 used y1 'int'
| | `-IfStmt 0x7fffd83dd078 <line:2737:4, line:2749:4>
| |   |-<<<NULL>>>
| |   |-<<<NULL>>>
| |   |-UnaryOperator 0x7fffd83dbed0 <line:2737:8, col:55> 'int' prefix '!'
| |   | `-CallExpr 0x7fffd83dbe48 <col:9, col:55> 'int'
| |   |   |-ImplicitCastExpr 0x7fffd83dbe30 <col:9> 'int (*)(const stbtt_fontinfo *, int, int *, int *, int *, int *)' <FunctionToPointerDecay>
| |   |   | `-DeclRefExpr 0x7fffd83dbc98 <col:9> 'int (const stbtt_fontinfo *, int, int *, int *, int *, int *)' Function 0x7fffd838e578 'stbtt_GetGlyphBox' 'int (const stbtt_fontinfo *, int, int *, int *, int *, int *)'
| |   |   |-ImplicitCastExpr 0x7fffd83dbea0 <col:27> 'const stbtt_fontinfo *' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x7fffd83dbcc0 <col:27> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83db440 'font' 'const stbtt_fontinfo *'
| |   |   |-ImplicitCastExpr 0x7fffd83dbeb8 <col:33> 'int' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x7fffd83dbce8 <col:33> 'int' lvalue ParmVar 0x7fffd83db4b8 'glyph' 'int'
| |   |   |-UnaryOperator 0x7fffd83dbd38 <col:40, col:41> 'int *' prefix '&'
| |   |   | `-DeclRefExpr 0x7fffd83dbd10 <col:41> 'int' lvalue Var 0x7fffd83dba50 'x0' 'int'
| |   |   |-UnaryOperator 0x7fffd83dbd80 <col:44, col:45> 'int *' prefix '&'
| |   |   | `-DeclRefExpr 0x7fffd83dbd58 <col:45> 'int' lvalue Var 0x7fffd83dbae8 'y0' 'int'
| |   |   |-UnaryOperator 0x7fffd83dbdc8 <col:48, col:49> 'int *' prefix '&'
| |   |   | `-DeclRefExpr 0x7fffd83dbda0 <col:49> 'int' lvalue Var 0x7fffd83dbb80 'x1' 'int'
| |   |   `-UnaryOperator 0x7fffd83dbe10 <col:52, col:53> 'int *' prefix '&'
| |   |     `-DeclRefExpr 0x7fffd83dbde8 <col:53> 'int' lvalue Var 0x7fffd83dbbf8 'y1' 'int'
| |   |-CompoundStmt 0x7fffd83dc370 <col:58, line:2743:4>
| |   | |-IfStmt 0x7fffd83dbfd8 <line:2739:7, col:23>
| |   | | |-<<<NULL>>>
| |   | | |-<<<NULL>>>
| |   | | |-ImplicitCastExpr 0x7fffd83dbf18 <col:11> 'int *' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x7fffd83dbef0 <col:11> 'int *' lvalue ParmVar 0x7fffd83db710 'ix0' 'int *'
| |   | | |-BinaryOperator 0x7fffd83dbfb0 <col:16, col:23> 'int' '='
| |   | | | |-UnaryOperator 0x7fffd83dbf70 <col:16, col:17> 'int' lvalue prefix '*'
| |   | | | | `-ImplicitCastExpr 0x7fffd83dbf58 <col:17> 'int *' <LValueToRValue>
| |   | | | |   `-DeclRefExpr 0x7fffd83dbf30 <col:17> 'int *' lvalue ParmVar 0x7fffd83db710 'ix0' 'int *'
| |   | | | `-IntegerLiteral 0x7fffd83dbf90 <col:23> 'int' 0
| |   | | `-<<<NULL>>>
| |   | |-IfStmt 0x7fffd83dc0f8 <line:2740:7, col:23>
| |   | | |-<<<NULL>>>
| |   | | |-<<<NULL>>>
| |   | | |-ImplicitCastExpr 0x7fffd83dc038 <col:11> 'int *' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x7fffd83dc010 <col:11> 'int *' lvalue ParmVar 0x7fffd83db788 'iy0' 'int *'
| |   | | |-BinaryOperator 0x7fffd83dc0d0 <col:16, col:23> 'int' '='
| |   | | | |-UnaryOperator 0x7fffd83dc090 <col:16, col:17> 'int' lvalue prefix '*'
| |   | | | | `-ImplicitCastExpr 0x7fffd83dc078 <col:17> 'int *' <LValueToRValue>
| |   | | | |   `-DeclRefExpr 0x7fffd83dc050 <col:17> 'int *' lvalue ParmVar 0x7fffd83db788 'iy0' 'int *'
| |   | | | `-IntegerLiteral 0x7fffd83dc0b0 <col:23> 'int' 0
| |   | | `-<<<NULL>>>
| |   | |-IfStmt 0x7fffd83dc218 <line:2741:7, col:23>
| |   | | |-<<<NULL>>>
| |   | | |-<<<NULL>>>
| |   | | |-ImplicitCastExpr 0x7fffd83dc158 <col:11> 'int *' <LValueToRValue>
| |   | | | `-DeclRefExpr 0x7fffd83dc130 <col:11> 'int *' lvalue ParmVar 0x7fffd83db800 'ix1' 'int *'
| |   | | |-BinaryOperator 0x7fffd83dc1f0 <col:16, col:23> 'int' '='
| |   | | | |-UnaryOperator 0x7fffd83dc1b0 <col:16, col:17> 'int' lvalue prefix '*'
| |   | | | | `-ImplicitCastExpr 0x7fffd83dc198 <col:17> 'int *' <LValueToRValue>
| |   | | | |   `-DeclRefExpr 0x7fffd83dc170 <col:17> 'int *' lvalue ParmVar 0x7fffd83db800 'ix1' 'int *'
| |   | | | `-IntegerLiteral 0x7fffd83dc1d0 <col:23> 'int' 0
| |   | | `-<<<NULL>>>
| |   | `-IfStmt 0x7fffd83dc338 <line:2742:7, col:23>
| |   |   |-<<<NULL>>>
| |   |   |-<<<NULL>>>
| |   |   |-ImplicitCastExpr 0x7fffd83dc278 <col:11> 'int *' <LValueToRValue>
| |   |   | `-DeclRefExpr 0x7fffd83dc250 <col:11> 'int *' lvalue ParmVar 0x7fffd83db878 'iy1' 'int *'
| |   |   |-BinaryOperator 0x7fffd83dc310 <col:16, col:23> 'int' '='
| |   |   | |-UnaryOperator 0x7fffd83dc2d0 <col:16, col:17> 'int' lvalue prefix '*'
| |   |   | | `-ImplicitCastExpr 0x7fffd83dc2b8 <col:17> 'int *' <LValueToRValue>
| |   |   | |   `-DeclRefExpr 0x7fffd83dc290 <col:17> 'int *' lvalue ParmVar 0x7fffd83db878 'iy1' 'int *'
| |   |   | `-IntegerLiteral 0x7fffd83dc2f0 <col:23> 'int' 0
| |   |   `-<<<NULL>>>
| |   `-CompoundStmt 0x7fffd83dd048 <line:2743:11, line:2749:4>
| |     |-IfStmt 0x7fffd83dc678 <line:2745:7, line:438:45>
| |     | |-<<<NULL>>>
| |     | |-<<<NULL>>>
| |     | |-ImplicitCastExpr 0x7fffd83dc3c8 <line:2745:11> 'int *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x7fffd83dc3a0 <col:11> 'int *' lvalue ParmVar 0x7fffd83db710 'ix0' 'int *'
| |     | |-BinaryOperator 0x7fffd83dc650 <col:16, line:438:45> 'int' '='
| |     | | |-UnaryOperator 0x7fffd83dc420 <line:2745:16, col:17> 'int' lvalue prefix '*'
| |     | | | `-ImplicitCastExpr 0x7fffd83dc408 <col:17> 'int *' <LValueToRValue>
| |     | | |   `-DeclRefExpr 0x7fffd83dc3e0 <col:17> 'int *' lvalue ParmVar 0x7fffd83db710 'ix0' 'int *'
| |     | | `-ParenExpr 0x7fffd83dc630 <line:438:30, col:45> 'int'
| |     | |   `-CStyleCastExpr 0x7fffd83dc608 <col:31, col:44> 'int' <FloatingToIntegral>
| |     | |     `-CallExpr 0x7fffd83dc5a8 <col:37, col:44> 'double'
| |     | |       |-ImplicitCastExpr 0x7fffd83dc590 <col:37> 'double (*)(double)' <FunctionToPointerDecay>
| |     | |       | `-DeclRefExpr 0x7fffd83dc440 <col:37> 'double (double)' Function 0x7fffd8291850 'floor' 'double (double)'
| |     | |       `-ImplicitCastExpr 0x7fffd83dc5d8 <line:2745:37, col:52> 'double' <FloatingCast>
| |     | |         `-BinaryOperator 0x7fffd83dc568 <col:37, col:52> 'float' '+'
| |     | |           |-BinaryOperator 0x7fffd83dc500 <col:37, col:42> 'float' '*'
| |     | |           | |-ImplicitCastExpr 0x7fffd83dc4e8 <col:37> 'float' <IntegralToFloating>
| |     | |           | | `-ImplicitCastExpr 0x7fffd83dc4b8 <col:37> 'int' <LValueToRValue>
| |     | |           | |   `-DeclRefExpr 0x7fffd83dc468 <col:37> 'int' lvalue Var 0x7fffd83dba50 'x0' 'int'
| |     | |           | `-ImplicitCastExpr 0x7fffd83dc4d0 <col:42> 'float' <LValueToRValue>
| |     | |           |   `-DeclRefExpr 0x7fffd83dc490 <col:42> 'float' lvalue ParmVar 0x7fffd83db530 'scale_x' 'float'
| |     | |           `-ImplicitCastExpr 0x7fffd83dc550 <col:52> 'float' <LValueToRValue>
| |     | |             `-DeclRefExpr 0x7fffd83dc528 <col:52> 'float' lvalue ParmVar 0x7fffd83db620 'shift_x' 'float'
| |     | `-<<<NULL>>>
| |     |-IfStmt 0x7fffd83dc9d0 <line:2746:7, line:438:45>
| |     | |-<<<NULL>>>
| |     | |-<<<NULL>>>
| |     | |-ImplicitCastExpr 0x7fffd83dc6d8 <line:2746:11> 'int *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x7fffd83dc6b0 <col:11> 'int *' lvalue ParmVar 0x7fffd83db788 'iy0' 'int *'
| |     | |-BinaryOperator 0x7fffd83dc9a8 <col:16, line:438:45> 'int' '='
| |     | | |-UnaryOperator 0x7fffd83dc730 <line:2746:16, col:17> 'int' lvalue prefix '*'
| |     | | | `-ImplicitCastExpr 0x7fffd83dc718 <col:17> 'int *' <LValueToRValue>
| |     | | |   `-DeclRefExpr 0x7fffd83dc6f0 <col:17> 'int *' lvalue ParmVar 0x7fffd83db788 'iy0' 'int *'
| |     | | `-ParenExpr 0x7fffd83dc988 <line:438:30, col:45> 'int'
| |     | |   `-CStyleCastExpr 0x7fffd83dc960 <col:31, col:44> 'int' <FloatingToIntegral>
| |     | |     `-CallExpr 0x7fffd83dc900 <col:37, col:44> 'double'
| |     | |       |-ImplicitCastExpr 0x7fffd83dc8e8 <col:37> 'double (*)(double)' <FunctionToPointerDecay>
| |     | |       | `-DeclRefExpr 0x7fffd83dc750 <col:37> 'double (double)' Function 0x7fffd8291850 'floor' 'double (double)'
| |     | |       `-ImplicitCastExpr 0x7fffd83dc930 <line:2746:36, col:52> 'double' <FloatingCast>
| |     | |         `-BinaryOperator 0x7fffd83dc8c0 <col:36, col:52> 'float' '+'
| |     | |           |-BinaryOperator 0x7fffd83dc858 <col:36, col:42> 'float' '*'
| |     | |           | |-ImplicitCastExpr 0x7fffd83dc840 <col:36, col:37> 'float' <IntegralToFloating>
| |     | |           | | `-UnaryOperator 0x7fffd83dc7e0 <col:36, col:37> 'int' prefix '-'
| |     | |           | |   `-ImplicitCastExpr 0x7fffd83dc7a0 <col:37> 'int' <LValueToRValue>
| |     | |           | |     `-DeclRefExpr 0x7fffd83dc778 <col:37> 'int' lvalue Var 0x7fffd83dbbf8 'y1' 'int'
| |     | |           | `-ImplicitCastExpr 0x7fffd83dc828 <col:42> 'float' <LValueToRValue>
| |     | |           |   `-DeclRefExpr 0x7fffd83dc800 <col:42> 'float' lvalue ParmVar 0x7fffd83db5a8 'scale_y' 'float'
| |     | |           `-ImplicitCastExpr 0x7fffd83dc8a8 <col:52> 'float' <LValueToRValue>
| |     | |             `-DeclRefExpr 0x7fffd83dc880 <col:52> 'float' lvalue ParmVar 0x7fffd83db698 'shift_y' 'float'
| |     | `-<<<NULL>>>
| |     |-IfStmt 0x7fffd83dcce0 <line:2747:7, line:439:44>
| |     | |-<<<NULL>>>
| |     | |-<<<NULL>>>
| |     | |-ImplicitCastExpr 0x7fffd83dca30 <line:2747:11> 'int *' <LValueToRValue>
| |     | | `-DeclRefExpr 0x7fffd83dca08 <col:11> 'int *' lvalue ParmVar 0x7fffd83db800 'ix1' 'int *'
| |     | |-BinaryOperator 0x7fffd83dccb8 <col:16, line:439:44> 'int' '='
| |     | | |-UnaryOperator 0x7fffd83dca88 <line:2747:16, col:17> 'int' lvalue prefix '*'
| |     | | | `-ImplicitCastExpr 0x7fffd83dca70 <col:17> 'int *' <LValueToRValue>
| |     | | |   `-DeclRefExpr 0x7fffd83dca48 <col:17> 'int *' lvalue ParmVar 0x7fffd83db800 'ix1' 'int *'
| |     | | `-ParenExpr 0x7fffd83dcc98 <line:439:30, col:44> 'int'
| |     | |   `-CStyleCastExpr 0x7fffd83dcc70 <col:31, col:43> 'int' <FloatingToIntegral>
| |     | |     `-CallExpr 0x7fffd83dcc10 <col:37, col:43> 'double'
| |     | |       |-ImplicitCastExpr 0x7fffd83dcbf8 <col:37> 'double (*)(double)' <FunctionToPointerDecay>
| |     | |       | `-DeclRefExpr 0x7fffd83dcaa8 <col:37> 'double (double)' Function 0x7fffd828fba0 'ceil' 'double (double)'
| |     | |       `-ImplicitCastExpr 0x7fffd83dcc40 <line:2747:37, col:52> 'double' <FloatingCast>
| |     | |         `-BinaryOperator 0x7fffd83dcbd0 <col:37, col:52> 'float' '+'
| |     | |           |-BinaryOperator 0x7fffd83dcb68 <col:37, col:42> 'float' '*'
| |     | |           | |-ImplicitCastExpr 0x7fffd83dcb50 <col:37> 'float' <IntegralToFloating>
| |     | |           | | `-ImplicitCastExpr 0x7fffd83dcb20 <col:37> 'int' <LValueToRValue>
| |     | |           | |   `-DeclRefExpr 0x7fffd83dcad0 <col:37> 'int' lvalue Var 0x7fffd83dbb80 'x1' 'int'
| |     | |           | `-ImplicitCastExpr 0x7fffd83dcb38 <col:42> 'float' <LValueToRValue>
| |     | |           |   `-DeclRefExpr 0x7fffd83dcaf8 <col:42> 'float' lvalue ParmVar 0x7fffd83db530 'scale_x' 'float'
| |     | |           `-ImplicitCastExpr 0x7fffd83dcbb8 <col:52> 'float' <LValueToRValue>
| |     | |             `-DeclRefExpr 0x7fffd83dcb90 <col:52> 'float' lvalue ParmVar 0x7fffd83db620 'shift_x' 'float'
| |     | `-<<<NULL>>>
| |     `-IfStmt 0x7fffd83dd010 <line:2748:7, line:439:44>
| |       |-<<<NULL>>>
| |       |-<<<NULL>>>
| |       |-ImplicitCastExpr 0x7fffd83dcd40 <line:2748:11> 'int *' <LValueToRValue>
| |       | `-DeclRefExpr 0x7fffd83dcd18 <col:11> 'int *' lvalue ParmVar 0x7fffd83db878 'iy1' 'int *'
| |       |-BinaryOperator 0x7fffd83dcfe8 <col:16, line:439:44> 'int' '='
| |       | |-UnaryOperator 0x7fffd83dcd98 <line:2748:16, col:17> 'int' lvalue prefix '*'
| |       | | `-ImplicitCastExpr 0x7fffd83dcd80 <col:17> 'int *' <LValueToRValue>
| |       | |   `-DeclRefExpr 0x7fffd83dcd58 <col:17> 'int *' lvalue ParmVar 0x7fffd83db878 'iy1' 'int *'
| |       | `-ParenExpr 0x7fffd83dcfc8 <line:439:30, col:44> 'int'
| |       |   `-CStyleCastExpr 0x7fffd83dcfa0 <col:31, col:43> 'int' <FloatingToIntegral>
| |       |     `-CallExpr 0x7fffd83dcf40 <col:37, col:43> 'double'
| |       |       |-ImplicitCastExpr 0x7fffd83dcf28 <col:37> 'double (*)(double)' <FunctionToPointerDecay>
| |       |       | `-DeclRefExpr 0x7fffd83dcdb8 <col:37> 'double (double)' Function 0x7fffd828fba0 'ceil' 'double (double)'
| |       |       `-ImplicitCastExpr 0x7fffd83dcf70 <line:2748:36, col:52> 'double' <FloatingCast>
| |       |         `-BinaryOperator 0x7fffd83dcf00 <col:36, col:52> 'float' '+'
| |       |           |-BinaryOperator 0x7fffd83dce98 <col:36, col:42> 'float' '*'
| |       |           | |-ImplicitCastExpr 0x7fffd83dce80 <col:36, col:37> 'float' <IntegralToFloating>
| |       |           | | `-UnaryOperator 0x7fffd83dce20 <col:36, col:37> 'int' prefix '-'
| |       |           | |   `-ImplicitCastExpr 0x7fffd83dce08 <col:37> 'int' <LValueToRValue>
| |       |           | |     `-DeclRefExpr 0x7fffd83dcde0 <col:37> 'int' lvalue Var 0x7fffd83dbae8 'y0' 'int'
| |       |           | `-ImplicitCastExpr 0x7fffd83dce68 <col:42> 'float' <LValueToRValue>
| |       |           |   `-DeclRefExpr 0x7fffd83dce40 <col:42> 'float' lvalue ParmVar 0x7fffd83db5a8 'scale_y' 'float'
| |       |           `-ImplicitCastExpr 0x7fffd83dcee8 <col:52> 'float' <LValueToRValue>
| |       |             `-DeclRefExpr 0x7fffd83dcec0 <col:52> 'float' lvalue ParmVar 0x7fffd83db698 'shift_y' 'float'
| |       `-<<<NULL>>>
| `-FullComment 0x7fffd8483520 <line:2729:4, col:78>
|   `-ParagraphComment 0x7fffd84834f0 <col:4, col:78>
|     `-TextComment 0x7fffd84834c0 <col:4, col:78> Text="///////////////////////////////////////////////////////////////////////////"
|-FunctionDecl 0x7fffd83dd4e8 prev 0x7fffd8358108 <line:501:19, line:2755:1> line:2752:16 used stbtt_GetGlyphBitmapBox 'void (const stbtt_fontinfo *, int, float, float, int *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd83dd0e0 <col:40, col:62> col:62 used font 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83dd158 <col:68, col:72> col:72 used glyph 'int'
| |-ParmVarDecl 0x7fffd83dd1d0 <col:79, col:85> col:85 used scale_x 'float'
| |-ParmVarDecl 0x7fffd83dd248 <col:94, col:100> col:100 used scale_y 'float'
| |-ParmVarDecl 0x7fffd83dd2c0 <col:109, col:114> col:114 used ix0 'int *'
| |-ParmVarDecl 0x7fffd83dd338 <col:119, col:124> col:124 used iy0 'int *'
| |-ParmVarDecl 0x7fffd83dd3b0 <col:129, col:134> col:134 used ix1 'int *'
| |-ParmVarDecl 0x7fffd83dd428 <col:139, col:144> col:144 used iy1 'int *'
| `-CompoundStmt 0x7fffd83dd918 <line:2753:1, line:2755:1>
|   `-CallExpr 0x7fffd83dd7e0 <line:2754:4, col:95> 'void'
|     |-ImplicitCastExpr 0x7fffd83dd7c8 <col:4> 'void (*)(const stbtt_fontinfo *, int, float, float, float, float, int *, int *, int *, int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x7fffd83dd5c8 <col:4> 'void (const stbtt_fontinfo *, int, float, float, float, float, int *, int *, int *, int *)' Function 0x7fffd83db948 'stbtt_GetGlyphBitmapBoxSubpixel' 'void (const stbtt_fontinfo *, int, float, float, float, float, int *, int *, int *, int *)'
|     |-ImplicitCastExpr 0x7fffd83dd858 <col:36> 'const stbtt_fontinfo *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83dd5f0 <col:36> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83dd0e0 'font' 'const stbtt_fontinfo *'
|     |-ImplicitCastExpr 0x7fffd83dd870 <col:42> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83dd618 <col:42> 'int' lvalue ParmVar 0x7fffd83dd158 'glyph' 'int'
|     |-ImplicitCastExpr 0x7fffd83dd888 <col:49> 'float' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83dd640 <col:49> 'float' lvalue ParmVar 0x7fffd83dd1d0 'scale_x' 'float'
|     |-ImplicitCastExpr 0x7fffd83dd8a0 <col:58> 'float' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83dd668 <col:58> 'float' lvalue ParmVar 0x7fffd83dd248 'scale_y' 'float'
|     |-FloatingLiteral 0x7fffd83dd690 <col:66> 'float' 0.000000e+00
|     |-FloatingLiteral 0x7fffd83dd6b0 <col:71> 'float' 0.000000e+00
|     |-ImplicitCastExpr 0x7fffd83dd8b8 <col:77> 'int *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83dd6d0 <col:77> 'int *' lvalue ParmVar 0x7fffd83dd2c0 'ix0' 'int *'
|     |-ImplicitCastExpr 0x7fffd83dd8d0 <col:82> 'int *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83dd6f8 <col:82> 'int *' lvalue ParmVar 0x7fffd83dd338 'iy0' 'int *'
|     |-ImplicitCastExpr 0x7fffd83dd8e8 <col:87> 'int *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83dd720 <col:87> 'int *' lvalue ParmVar 0x7fffd83dd3b0 'ix1' 'int *'
|     `-ImplicitCastExpr 0x7fffd83dd900 <col:92> 'int *' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd83dd748 <col:92> 'int *' lvalue ParmVar 0x7fffd83dd428 'iy1' 'int *'
|-FunctionDecl 0x7fffd83dde48 prev 0x7fffd8355d70 <line:501:19, line:2760:1> line:2757:16 used stbtt_GetCodepointBitmapBoxSubpixel 'void (const stbtt_fontinfo *, int, float, float, float, float, int *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd83dd940 <col:52, col:74> col:74 used font 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83dd9b8 <col:80, col:84> col:84 used codepoint 'int'
| |-ParmVarDecl 0x7fffd83dda30 <col:95, col:101> col:101 used scale_x 'float'
| |-ParmVarDecl 0x7fffd83ddaa8 <col:110, col:116> col:116 used scale_y 'float'
| |-ParmVarDecl 0x7fffd83ddb20 <col:125, col:131> col:131 used shift_x 'float'
| |-ParmVarDecl 0x7fffd83ddb98 <col:140, col:146> col:146 used shift_y 'float'
| |-ParmVarDecl 0x7fffd83ddc10 <col:155, col:160> col:160 used ix0 'int *'
| |-ParmVarDecl 0x7fffd83ddc88 <col:165, col:170> col:170 used iy0 'int *'
| |-ParmVarDecl 0x7fffd83ddd00 <col:175, col:180> col:180 used ix1 'int *'
| |-ParmVarDecl 0x7fffd83ddd78 <col:185, col:190> col:190 used iy1 'int *'
| `-CompoundStmt 0x7fffd83de328 <line:2758:1, line:2760:1>
|   `-CallExpr 0x7fffd83de1d8 <line:2759:4, col:129> 'void'
|     |-ImplicitCastExpr 0x7fffd83de1c0 <col:4> 'void (*)(const stbtt_fontinfo *, int, float, float, float, float, int *, int *, int *, int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x7fffd83ddf38 <col:4> 'void (const stbtt_fontinfo *, int, float, float, float, float, int *, int *, int *, int *)' Function 0x7fffd83db948 'stbtt_GetGlyphBitmapBoxSubpixel' 'void (const stbtt_fontinfo *, int, float, float, float, float, int *, int *, int *, int *)'
|     |-ImplicitCastExpr 0x7fffd83de250 <col:36> 'const stbtt_fontinfo *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83ddf60 <col:36> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83dd940 'font' 'const stbtt_fontinfo *'
|     |-CallExpr 0x7fffd83de018 <col:42, col:77> 'int'
|     | |-ImplicitCastExpr 0x7fffd83de000 <col:42> 'int (*)(const stbtt_fontinfo *, int)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x7fffd83ddf88 <col:42> 'int (const stbtt_fontinfo *, int)' Function 0x7fffd83829f0 'stbtt_FindGlyphIndex' 'int (const stbtt_fontinfo *, int)'
|     | |-ImplicitCastExpr 0x7fffd83de050 <col:63> 'const stbtt_fontinfo *' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fffd83ddfb0 <col:63> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83dd940 'font' 'const stbtt_fontinfo *'
|     | `-ImplicitCastExpr 0x7fffd83de068 <col:68> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fffd83ddfd8 <col:68> 'int' lvalue ParmVar 0x7fffd83dd9b8 'codepoint' 'int'
|     |-ImplicitCastExpr 0x7fffd83de268 <col:80> 'float' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83de080 <col:80> 'float' lvalue ParmVar 0x7fffd83dda30 'scale_x' 'float'
|     |-ImplicitCastExpr 0x7fffd83de280 <col:89> 'float' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83de0a8 <col:89> 'float' lvalue ParmVar 0x7fffd83ddaa8 'scale_y' 'float'
|     |-ImplicitCastExpr 0x7fffd83de298 <col:97> 'float' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83de0d0 <col:97> 'float' lvalue ParmVar 0x7fffd83ddb20 'shift_x' 'float'
|     |-ImplicitCastExpr 0x7fffd83de2b0 <col:105> 'float' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83de0f8 <col:105> 'float' lvalue ParmVar 0x7fffd83ddb98 'shift_y' 'float'
|     |-ImplicitCastExpr 0x7fffd83de2c8 <col:114> 'int *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83de120 <col:114> 'int *' lvalue ParmVar 0x7fffd83ddc10 'ix0' 'int *'
|     |-ImplicitCastExpr 0x7fffd83de2e0 <col:118> 'int *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83de148 <col:118> 'int *' lvalue ParmVar 0x7fffd83ddc88 'iy0' 'int *'
|     |-ImplicitCastExpr 0x7fffd83de2f8 <col:122> 'int *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83de170 <col:122> 'int *' lvalue ParmVar 0x7fffd83ddd00 'ix1' 'int *'
|     `-ImplicitCastExpr 0x7fffd83de310 <col:126> 'int *' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd83de198 <col:126> 'int *' lvalue ParmVar 0x7fffd83ddd78 'iy1' 'int *'
|-FunctionDecl 0x7fffd83de7f0 prev 0x7fffd8355670 <line:501:19, line:2765:1> line:2762:16 stbtt_GetCodepointBitmapBox 'void (const stbtt_fontinfo *, int, float, float, int *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd83de350 <col:44, col:66> col:66 used font 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd83de3c8 <col:72, col:76> col:76 used codepoint 'int'
| |-ParmVarDecl 0x7fffd83de440 <col:87, col:93> col:93 used scale_x 'float'
| |-ParmVarDecl 0x7fffd83de4b8 <col:102, col:108> col:108 used scale_y 'float'
| |-ParmVarDecl 0x7fffd83de530 <col:117, col:122> col:122 used ix0 'int *'
| |-ParmVarDecl 0x7fffd83de5a8 <col:127, col:132> col:132 used iy0 'int *'
| |-ParmVarDecl 0x7fffd83de620 <col:137, col:142> col:142 used ix1 'int *'
| |-ParmVarDecl 0x7fffd83de698 <col:147, col:152> col:152 used iy1 'int *'
| `-CompoundStmt 0x7fffd83debf8 <line:2763:1, line:2765:1>
|   `-CallExpr 0x7fffd83dea90 <line:2764:4, col:100> 'void'
|     |-ImplicitCastExpr 0x7fffd83dea78 <col:4> 'void (*)(const stbtt_fontinfo *, int, float, float, float, float, int *, int *, int *, int *)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x7fffd83de8d0 <col:4> 'void (const stbtt_fontinfo *, int, float, float, float, float, int *, int *, int *, int *)' Function 0x7fffd83dde48 'stbtt_GetCodepointBitmapBoxSubpixel' 'void (const stbtt_fontinfo *, int, float, float, float, float, int *, int *, int *, int *)'
|     |-ImplicitCastExpr 0x7fffd83deb08 <col:40> 'const stbtt_fontinfo *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83de8f8 <col:40> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd83de350 'font' 'const stbtt_fontinfo *'
|     |-ImplicitCastExpr 0x7fffd83deb20 <col:46> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83de920 <col:46> 'int' lvalue ParmVar 0x7fffd83de3c8 'codepoint' 'int'
|     |-ImplicitCastExpr 0x7fffd83deb38 <col:57> 'float' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83de948 <col:57> 'float' lvalue ParmVar 0x7fffd83de440 'scale_x' 'float'
|     |-ImplicitCastExpr 0x7fffd83deb50 <col:66> 'float' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83de970 <col:66> 'float' lvalue ParmVar 0x7fffd83de4b8 'scale_y' 'float'
|     |-FloatingLiteral 0x7fffd83de998 <col:74> 'float' 0.000000e+00
|     |-FloatingLiteral 0x7fffd83de9b8 <col:79> 'float' 0.000000e+00
|     |-ImplicitCastExpr 0x7fffd83deb68 <col:85> 'int *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83de9d8 <col:85> 'int *' lvalue ParmVar 0x7fffd83de530 'ix0' 'int *'
|     |-ImplicitCastExpr 0x7fffd83deb80 <col:89> 'int *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83dea00 <col:89> 'int *' lvalue ParmVar 0x7fffd83de5a8 'iy0' 'int *'
|     |-ImplicitCastExpr 0x7fffd83deb98 <col:93> 'int *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83dea28 <col:93> 'int *' lvalue ParmVar 0x7fffd83de620 'ix1' 'int *'
|     `-ImplicitCastExpr 0x7fffd83debb0 <col:97> 'int *' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd83dea50 <col:97> 'int *' lvalue ParmVar 0x7fffd83de698 'iy1' 'int *'
|-RecordDecl 0x7fffd83dec10 <line:2771:9, line:2774:1> line:2771:16 struct stbtt__hheap_chunk definition
| |-FullComment 0x7fffd84835f0 <line:2767:4, col:78>
| | `-ParagraphComment 0x7fffd84835c0 <col:4, col:78>
| |   `-TextComment 0x7fffd8483590 <col:4, col:78> Text="///////////////////////////////////////////////////////////////////////////"
| `-FieldDecl 0x7fffd83ded70 <line:2773:4, col:31> col:31 referenced next 'struct stbtt__hheap_chunk *'
|-TypedefDecl 0x7fffd83dedd8 <line:2771:1, line:2774:3> col:3 referenced stbtt__hheap_chunk 'struct stbtt__hheap_chunk':'struct stbtt__hheap_chunk'
| `-ElaboratedType 0x7fffd83decc0 'struct stbtt__hheap_chunk' sugar
|   `-RecordType 0x7fffd83deca0 'struct stbtt__hheap_chunk'
|     `-Record 0x7fffd83dec10 'stbtt__hheap_chunk'
|-RecordDecl 0x7fffd83dee48 <line:2776:9, line:2781:1> line:2776:16 struct stbtt__hheap definition
| |-FieldDecl 0x7fffd83def18 <line:2778:4, col:31> col:31 referenced head 'struct stbtt__hheap_chunk *'
| |-FieldDecl 0x7fffd83def78 <line:2779:4, col:12> col:12 referenced first_free 'void *'
| `-FieldDecl 0x7fffd83defd8 <line:2780:4, col:11> col:11 referenced num_remaining_in_head_chunk 'int'
|-TypedefDecl 0x7fffd83df070 <line:2776:1, line:2781:3> col:3 referenced stbtt__hheap 'struct stbtt__hheap':'struct stbtt__hheap'
| `-ElaboratedType 0x7fffd83df020 'struct stbtt__hheap' sugar
|   `-RecordType 0x7fffd83deed0 'struct stbtt__hheap'
|     `-Record 0x7fffd83dee48 'stbtt__hheap'
|-FunctionDecl 0x7fffd83df388 <line:2783:1, line:2802:1> line:2783:14 used stbtt__hheap_alloc 'void *(stbtt__hheap *, size_t, void *)' static
| |-ParmVarDecl 0x7fffd83df168 <col:33, col:47> col:47 used hh 'stbtt__hheap *'
| |-ParmVarDecl 0x7fffd83df1d8 <col:51, col:58> col:58 used size 'size_t':'unsigned long'
| |-ParmVarDecl 0x7fffd83df250 <col:64, col:70> col:70 used userdata 'void *'
| `-CompoundStmt 0x7fffd83e08c0 <line:2784:1, line:2802:1>
|   `-IfStmt 0x7fffd83e0888 <line:2785:4, line:2801:4>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-ImplicitCastExpr 0x7fffd83df4b8 <line:2785:8, col:12> 'void *' <LValueToRValue>
|     | `-MemberExpr 0x7fffd83df480 <col:8, col:12> 'void *' lvalue ->first_free 0x7fffd83def78
|     |   `-ImplicitCastExpr 0x7fffd83df468 <col:8> 'stbtt__hheap *' <LValueToRValue>
|     |     `-DeclRefExpr 0x7fffd83df440 <col:8> 'stbtt__hheap *' lvalue ParmVar 0x7fffd83df168 'hh' 'stbtt__hheap *'
|     |-CompoundStmt 0x7fffd83df7a0 <col:24, line:2789:4>
|     | |-DeclStmt 0x7fffd83df5d8 <line:2786:7, col:31>
|     | | `-VarDecl 0x7fffd83df4e8 <col:7, col:21> col:13 used p 'void *' cinit
|     | |   `-ImplicitCastExpr 0x7fffd83df5c0 <col:17, col:21> 'void *' <LValueToRValue>
|     | |     `-MemberExpr 0x7fffd83df588 <col:17, col:21> 'void *' lvalue ->first_free 0x7fffd83def78
|     | |       `-ImplicitCastExpr 0x7fffd83df570 <col:17> 'stbtt__hheap *' <LValueToRValue>
|     | |         `-DeclRefExpr 0x7fffd83df548 <col:17> 'stbtt__hheap *' lvalue ParmVar 0x7fffd83df168 'hh' 'stbtt__hheap *'
|     | |-BinaryOperator 0x7fffd83df720 <line:2787:7, col:36> 'void *' '='
|     | | |-MemberExpr 0x7fffd83df630 <col:7, col:11> 'void *' lvalue ->first_free 0x7fffd83def78
|     | | | `-ImplicitCastExpr 0x7fffd83df618 <col:7> 'stbtt__hheap *' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x7fffd83df5f0 <col:7> 'stbtt__hheap *' lvalue ParmVar 0x7fffd83df168 'hh' 'stbtt__hheap *'
|     | | `-ImplicitCastExpr 0x7fffd83df708 <col:24, col:36> 'void *' <LValueToRValue>
|     | |   `-UnaryOperator 0x7fffd83df6e8 <col:24, col:36> 'void *' lvalue prefix '*'
|     | |     `-CStyleCastExpr 0x7fffd83df6c0 <col:26, col:36> 'void **' <BitCast>
|     | |       `-ImplicitCastExpr 0x7fffd83df6a8 <col:36> 'void *' <LValueToRValue>
|     | |         `-DeclRefExpr 0x7fffd83df668 <col:36> 'void *' lvalue Var 0x7fffd83df4e8 'p' 'void *'
|     | `-ReturnStmt 0x7fffd83df788 <line:2788:7, col:14>
|     |   `-ImplicitCastExpr 0x7fffd83df770 <col:14> 'void *' <LValueToRValue>
|     |     `-DeclRefExpr 0x7fffd83df748 <col:14> 'void *' lvalue Var 0x7fffd83df4e8 'p' 'void *'
|     `-CompoundStmt 0x7fffd83e0860 <line:2789:11, line:2801:4>
|       |-IfStmt 0x7fffd83e0428 <line:2790:7, line:2798:7>
|       | |-<<<NULL>>>
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7fffd83df878 <line:2790:11, col:46> 'int' '=='
|       | | |-ImplicitCastExpr 0x7fffd83df860 <col:11, col:15> 'int' <LValueToRValue>
|       | | | `-MemberExpr 0x7fffd83df808 <col:11, col:15> 'int' lvalue ->num_remaining_in_head_chunk 0x7fffd83defd8
|       | | |   `-ImplicitCastExpr 0x7fffd83df7f0 <col:11> 'stbtt__hheap *' <LValueToRValue>
|       | | |     `-DeclRefExpr 0x7fffd83df7c8 <col:11> 'stbtt__hheap *' lvalue ParmVar 0x7fffd83df168 'hh' 'stbtt__hheap *'
|       | | `-IntegerLiteral 0x7fffd83df840 <col:46> 'int' 0
|       | |-CompoundStmt 0x7fffd83e03e8 <col:49, line:2798:7>
|       | | |-DeclStmt 0x7fffd83dfb38 <line:2791:10, col:65>
|       | | | `-VarDecl 0x7fffd83df8b8 <col:10, col:64> col:14 used count 'int' cinit
|       | | |   `-ParenExpr 0x7fffd83dfb18 <col:22, col:64> 'int'
|       | | |     `-ConditionalOperator 0x7fffd83dfae8 <col:23, col:61> 'int'
|       | | |       |-BinaryOperator 0x7fffd83df990 <col:23, col:30> 'int' '<'
|       | | |       | |-ImplicitCastExpr 0x7fffd83df960 <col:23> 'size_t':'unsigned long' <LValueToRValue>
|       | | |       | | `-DeclRefExpr 0x7fffd83df918 <col:23> 'size_t':'unsigned long' lvalue ParmVar 0x7fffd83df1d8 'size' 'size_t':'unsigned long'
|       | | |       | `-ImplicitCastExpr 0x7fffd83df978 <col:30> 'unsigned long' <IntegralCast>
|       | | |       |   `-IntegerLiteral 0x7fffd83df940 <col:30> 'int' 32
|       | | |       |-IntegerLiteral 0x7fffd83df9b8 <col:35> 'int' 2000
|       | | |       `-ConditionalOperator 0x7fffd83dfab8 <col:42, col:61> 'int'
|       | | |         |-BinaryOperator 0x7fffd83dfa50 <col:42, col:49> 'int' '<'
|       | | |         | |-ImplicitCastExpr 0x7fffd83dfa20 <col:42> 'size_t':'unsigned long' <LValueToRValue>
|       | | |         | | `-DeclRefExpr 0x7fffd83df9d8 <col:42> 'size_t':'unsigned long' lvalue ParmVar 0x7fffd83df1d8 'size' 'size_t':'unsigned long'
|       | | |         | `-ImplicitCastExpr 0x7fffd83dfa38 <col:49> 'unsigned long' <IntegralCast>
|       | | |         |   `-IntegerLiteral 0x7fffd83dfa00 <col:49> 'int' 128
|       | | |         |-IntegerLiteral 0x7fffd83dfa78 <col:55> 'int' 800
|       | | |         `-IntegerLiteral 0x7fffd83dfa98 <col:61> 'int' 100
|       | | |-DeclStmt 0x7fffd83dff10 <line:2792:10, col:122>
|       | | | `-VarDecl 0x7fffd83dfba8 <col:10, line:467:51> line:2792:30 used c 'stbtt__hheap_chunk *' cinit
|       | | |   `-CStyleCastExpr 0x7fffd83dfee8 <col:34, line:467:51> 'stbtt__hheap_chunk *' <BitCast>
|       | | |     `-ParenExpr 0x7fffd83dfec8 <col:31, col:51> 'void *'
|       | | |       `-BinaryOperator 0x7fffd83dfea0 <col:32, col:50> 'void *' ','
|       | | |         |-CStyleCastExpr 0x7fffd83dfca8 <col:32, col:40> 'void' <ToVoid>
|       | | |         | `-ImplicitCastExpr 0x7fffd83dfc90 <col:38, col:40> 'void *' <LValueToRValue>
|       | | |         |   `-ParenExpr 0x7fffd83dfc70 <col:38, col:40> 'void *' lvalue
|       | | |         |     `-DeclRefExpr 0x7fffd83dfc08 <line:2792:113> 'void *' lvalue ParmVar 0x7fffd83df250 'userdata' 'void *'
|       | | |         `-CallExpr 0x7fffd83dfe28 <line:467:42, col:50> 'void *'
|       | | |           |-ImplicitCastExpr 0x7fffd83dfe10 <col:42> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|       | | |           | `-DeclRefExpr 0x7fffd83dfcd0 <col:42> 'void *(unsigned long)' Function 0x7fffd831b4b0 'malloc' 'void *(unsigned long)'
|       | | |           `-BinaryOperator 0x7fffd83dfde8 <line:2792:70, col:106> 'unsigned long' '+'
|       | | |             |-UnaryExprOrTypeTraitExpr 0x7fffd83dfd08 <col:70, col:95> 'unsigned long' sizeof 'stbtt__hheap_chunk':'struct stbtt__hheap_chunk'
|       | | |             `-BinaryOperator 0x7fffd83dfdc0 <col:99, col:106> 'unsigned long' '*'
|       | | |               |-ImplicitCastExpr 0x7fffd83dfd78 <col:99> 'size_t':'unsigned long' <LValueToRValue>
|       | | |               | `-DeclRefExpr 0x7fffd83dfd28 <col:99> 'size_t':'unsigned long' lvalue ParmVar 0x7fffd83df1d8 'size' 'size_t':'unsigned long'
|       | | |               `-ImplicitCastExpr 0x7fffd83dfda8 <col:106> 'unsigned long' <IntegralCast>
|       | | |                 `-ImplicitCastExpr 0x7fffd83dfd90 <col:106> 'int' <LValueToRValue>
|       | | |                   `-DeclRefExpr 0x7fffd83dfd50 <col:106> 'int' lvalue Var 0x7fffd83df8b8 'count' 'int'
|       | | |-IfStmt 0x7fffd83e00c0 <line:2793:10, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25>
|       | | | |-<<<NULL>>>
|       | | | |-<<<NULL>>>
|       | | | |-BinaryOperator 0x7fffd83e0000 <././stb/stb_truetype.h:2793:14, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25> 'int' '=='
|       | | | | |-ImplicitCastExpr 0x7fffd83dffd0 <././stb/stb_truetype.h:2793:14> 'stbtt__hheap_chunk *' <LValueToRValue>
|       | | | | | `-DeclRefExpr 0x7fffd83dff28 <col:14> 'stbtt__hheap_chunk *' lvalue Var 0x7fffd83dfba8 'c' 'stbtt__hheap_chunk *'
|       | | | | `-ImplicitCastExpr 0x7fffd83dffe8 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'stbtt__hheap_chunk *' <BitCast>
|       | | | |   `-ParenExpr 0x7fffd83dffb0 <col:16, col:25> 'void *'
|       | | | |     `-CStyleCastExpr 0x7fffd83dff88 <col:17, col:24> 'void *' <NullToPointer>
|       | | | |       `-IntegerLiteral 0x7fffd83dff50 <col:24> 'int' 0
|       | | | |-ReturnStmt 0x7fffd83e00a8 <././stb/stb_truetype.h:2794:13, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25>
|       | | | | `-ParenExpr 0x7fffd83e0088 <col:16, col:25> 'void *'
|       | | | |   `-CStyleCastExpr 0x7fffd83e0060 <col:17, col:24> 'void *' <NullToPointer>
|       | | | |     `-IntegerLiteral 0x7fffd83e0028 <col:24> 'int' 0
|       | | | `-<<<NULL>>>
|       | | |-BinaryOperator 0x7fffd83e0200 <././stb/stb_truetype.h:2795:10, col:24> 'struct stbtt__hheap_chunk *' '='
|       | | | |-MemberExpr 0x7fffd83e0138 <col:10, col:13> 'struct stbtt__hheap_chunk *' lvalue ->next 0x7fffd83ded70
|       | | | | `-ImplicitCastExpr 0x7fffd83e0120 <col:10> 'stbtt__hheap_chunk *' <LValueToRValue>
|       | | | |   `-DeclRefExpr 0x7fffd83e00f8 <col:10> 'stbtt__hheap_chunk *' lvalue Var 0x7fffd83dfba8 'c' 'stbtt__hheap_chunk *'
|       | | | `-ImplicitCastExpr 0x7fffd83e01e8 <col:20, col:24> 'struct stbtt__hheap_chunk *' <LValueToRValue>
|       | | |   `-MemberExpr 0x7fffd83e01b0 <col:20, col:24> 'struct stbtt__hheap_chunk *' lvalue ->head 0x7fffd83def18
|       | | |     `-ImplicitCastExpr 0x7fffd83e0198 <col:20> 'stbtt__hheap *' <LValueToRValue>
|       | | |       `-DeclRefExpr 0x7fffd83e0170 <col:20> 'stbtt__hheap *' lvalue ParmVar 0x7fffd83df168 'hh' 'stbtt__hheap *'
|       | | |-BinaryOperator 0x7fffd83e02e0 <line:2796:10, col:21> 'struct stbtt__hheap_chunk *' '='
|       | | | |-MemberExpr 0x7fffd83e0268 <col:10, col:14> 'struct stbtt__hheap_chunk *' lvalue ->head 0x7fffd83def18
|       | | | | `-ImplicitCastExpr 0x7fffd83e0250 <col:10> 'stbtt__hheap *' <LValueToRValue>
|       | | | |   `-DeclRefExpr 0x7fffd83e0228 <col:10> 'stbtt__hheap *' lvalue ParmVar 0x7fffd83df168 'hh' 'stbtt__hheap *'
|       | | | `-ImplicitCastExpr 0x7fffd83e02c8 <col:21> 'stbtt__hheap_chunk *' <LValueToRValue>
|       | | |   `-DeclRefExpr 0x7fffd83e02a0 <col:21> 'stbtt__hheap_chunk *' lvalue Var 0x7fffd83dfba8 'c' 'stbtt__hheap_chunk *'
|       | | `-BinaryOperator 0x7fffd83e03c0 <line:2797:10, col:44> 'int' '='
|       | |   |-MemberExpr 0x7fffd83e0348 <col:10, col:14> 'int' lvalue ->num_remaining_in_head_chunk 0x7fffd83defd8
|       | |   | `-ImplicitCastExpr 0x7fffd83e0330 <col:10> 'stbtt__hheap *' <LValueToRValue>
|       | |   |   `-DeclRefExpr 0x7fffd83e0308 <col:10> 'stbtt__hheap *' lvalue ParmVar 0x7fffd83df168 'hh' 'stbtt__hheap *'
|       | |   `-ImplicitCastExpr 0x7fffd83e03a8 <col:44> 'int' <LValueToRValue>
|       | |     `-DeclRefExpr 0x7fffd83e0380 <col:44> 'int' lvalue Var 0x7fffd83df8b8 'count' 'int'
|       | `-<<<NULL>>>
|       |-UnaryOperator 0x7fffd83e04d8 <line:2799:7, col:13> 'int' prefix '--'
|       | `-MemberExpr 0x7fffd83e04a0 <col:9, col:13> 'int' lvalue ->num_remaining_in_head_chunk 0x7fffd83defd8
|       |   `-ImplicitCastExpr 0x7fffd83e0488 <col:9> 'stbtt__hheap *' <LValueToRValue>
|       |     `-DeclRefExpr 0x7fffd83e0460 <col:9> 'stbtt__hheap *' lvalue ParmVar 0x7fffd83df168 'hh' 'stbtt__hheap *'
|       `-ReturnStmt 0x7fffd83e0848 <line:2800:7, col:76>
|         `-ImplicitCastExpr 0x7fffd83e07a8 <col:14, col:76> 'void *' <BitCast>
|           `-BinaryOperator 0x7fffd83e0780 <col:14, col:76> 'char *' '+'
|             |-BinaryOperator 0x7fffd83e0648 <col:14, col:61> 'char *' '+'
|             | |-CStyleCastExpr 0x7fffd83e05f0 <col:14, col:32> 'char *' <BitCast>
|             | | `-ImplicitCastExpr 0x7fffd83e05d8 <col:23, col:32> 'struct stbtt__hheap_chunk *' <LValueToRValue>
|             | |   `-ParenExpr 0x7fffd83e05b8 <col:23, col:32> 'struct stbtt__hheap_chunk *' lvalue
|             | |     `-MemberExpr 0x7fffd83e0538 <col:24, col:28> 'struct stbtt__hheap_chunk *' lvalue ->head 0x7fffd83def18
|             | |       `-ImplicitCastExpr 0x7fffd83e0520 <col:24> 'stbtt__hheap *' <LValueToRValue>
|             | |         `-DeclRefExpr 0x7fffd83e04f8 <col:24> 'stbtt__hheap *' lvalue ParmVar 0x7fffd83df168 'hh' 'stbtt__hheap *'
|             | `-UnaryExprOrTypeTraitExpr 0x7fffd83e0628 <col:36, col:61> 'unsigned long' sizeof 'stbtt__hheap_chunk':'struct stbtt__hheap_chunk'
|             `-BinaryOperator 0x7fffd83e0758 <col:65, col:76> 'unsigned long' '*'
|               |-ImplicitCastExpr 0x7fffd83e0710 <col:65> 'size_t':'unsigned long' <LValueToRValue>
|               | `-DeclRefExpr 0x7fffd83e0670 <col:65> 'size_t':'unsigned long' lvalue ParmVar 0x7fffd83df1d8 'size' 'size_t':'unsigned long'
|               `-ImplicitCastExpr 0x7fffd83e0740 <col:72, col:76> 'unsigned long' <IntegralCast>
|                 `-ImplicitCastExpr 0x7fffd83e0728 <col:72, col:76> 'int' <LValueToRValue>
|                   `-MemberExpr 0x7fffd83e06d8 <col:72, col:76> 'int' lvalue ->num_remaining_in_head_chunk 0x7fffd83defd8
|                     `-ImplicitCastExpr 0x7fffd83e06c0 <col:72> 'stbtt__hheap *' <LValueToRValue>
|                       `-DeclRefExpr 0x7fffd83e0698 <col:72> 'stbtt__hheap *' lvalue ParmVar 0x7fffd83df168 'hh' 'stbtt__hheap *'
|-FunctionDecl 0x7fffd83e0a70 <line:2804:1, line:2808:1> line:2804:13 used stbtt__hheap_free 'void (stbtt__hheap *, void *)' static
| |-ParmVarDecl 0x7fffd83e08e8 <col:31, col:45> col:45 used hh 'stbtt__hheap *'
| |-ParmVarDecl 0x7fffd83e0960 <col:49, col:55> col:55 used p 'void *'
| `-CompoundStmt 0x7fffd83e0d58 <line:2805:1, line:2808:1>
|   |-BinaryOperator 0x7fffd83e0c50 <line:2806:4, col:23> 'void *' '='
|   | |-UnaryOperator 0x7fffd83e0ba0 <col:4, col:15> 'void *' lvalue prefix '*'
|   | | `-CStyleCastExpr 0x7fffd83e0b78 <col:5, col:15> 'void **' <BitCast>
|   | |   `-ImplicitCastExpr 0x7fffd83e0b60 <col:15> 'void *' <LValueToRValue>
|   | |     `-DeclRefExpr 0x7fffd83e0b20 <col:15> 'void *' lvalue ParmVar 0x7fffd83e0960 'p' 'void *'
|   | `-ImplicitCastExpr 0x7fffd83e0c38 <col:19, col:23> 'void *' <LValueToRValue>
|   |   `-MemberExpr 0x7fffd83e0c00 <col:19, col:23> 'void *' lvalue ->first_free 0x7fffd83def78
|   |     `-ImplicitCastExpr 0x7fffd83e0be8 <col:19> 'stbtt__hheap *' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd83e0bc0 <col:19> 'stbtt__hheap *' lvalue ParmVar 0x7fffd83e08e8 'hh' 'stbtt__hheap *'
|   `-BinaryOperator 0x7fffd83e0d30 <line:2807:4, col:21> 'void *' '='
|     |-MemberExpr 0x7fffd83e0cb8 <col:4, col:8> 'void *' lvalue ->first_free 0x7fffd83def78
|     | `-ImplicitCastExpr 0x7fffd83e0ca0 <col:4> 'stbtt__hheap *' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fffd83e0c78 <col:4> 'stbtt__hheap *' lvalue ParmVar 0x7fffd83e08e8 'hh' 'stbtt__hheap *'
|     `-ImplicitCastExpr 0x7fffd83e0d18 <col:21> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd83e0cf0 <col:21> 'void *' lvalue ParmVar 0x7fffd83e0960 'p' 'void *'
|-FunctionDecl 0x7fffd83e0e90 <line:2810:1, line:2818:1> line:2810:13 used stbtt__hheap_cleanup 'void (stbtt__hheap *, void *)' static
| |-ParmVarDecl 0x7fffd83e0d88 <col:34, col:48> col:48 used hh 'stbtt__hheap *'
| |-ParmVarDecl 0x7fffd83e0e00 <col:52, col:58> col:58 used userdata 'void *'
| `-CompoundStmt 0x7fffd83e1460 <line:2811:1, line:2818:1>
|   |-DeclStmt 0x7fffd83e1040 <line:2812:4, col:36>
|   | `-VarDecl 0x7fffd83e0f50 <col:4, col:32> col:24 used c 'stbtt__hheap_chunk *' cinit
|   |   `-ImplicitCastExpr 0x7fffd83e1028 <col:28, col:32> 'struct stbtt__hheap_chunk *' <LValueToRValue>
|   |     `-MemberExpr 0x7fffd83e0ff0 <col:28, col:32> 'struct stbtt__hheap_chunk *' lvalue ->head 0x7fffd83def18
|   |       `-ImplicitCastExpr 0x7fffd83e0fd8 <col:28> 'stbtt__hheap *' <LValueToRValue>
|   |         `-DeclRefExpr 0x7fffd83e0fb0 <col:28> 'stbtt__hheap *' lvalue ParmVar 0x7fffd83e0d88 'hh' 'stbtt__hheap *'
|   `-WhileStmt 0x7fffd83e1440 <line:2813:4, line:2817:4>
|     |-<<<NULL>>>
|     |-ImplicitCastExpr 0x7fffd83e1080 <line:2813:11> 'stbtt__hheap_chunk *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83e1058 <col:11> 'stbtt__hheap_chunk *' lvalue Var 0x7fffd83e0f50 'c' 'stbtt__hheap_chunk *'
|     `-CompoundStmt 0x7fffd83e1418 <col:14, line:2817:4>
|       |-DeclStmt 0x7fffd83e1198 <line:2814:7, col:38>
|       | `-VarDecl 0x7fffd83e10a8 <col:7, col:34> col:27 used n 'stbtt__hheap_chunk *' cinit
|       |   `-ImplicitCastExpr 0x7fffd83e1180 <col:31, col:34> 'struct stbtt__hheap_chunk *' <LValueToRValue>
|       |     `-MemberExpr 0x7fffd83e1148 <col:31, col:34> 'struct stbtt__hheap_chunk *' lvalue ->next 0x7fffd83ded70
|       |       `-ImplicitCastExpr 0x7fffd83e1130 <col:31> 'stbtt__hheap_chunk *' <LValueToRValue>
|       |         `-DeclRefExpr 0x7fffd83e1108 <col:31> 'stbtt__hheap_chunk *' lvalue Var 0x7fffd83e0f50 'c' 'stbtt__hheap_chunk *'
|       |-ParenExpr 0x7fffd83e1368 <line:468:31, col:49> 'void'
|       | `-BinaryOperator 0x7fffd83e1340 <col:32, col:48> 'void' ','
|       |   |-CStyleCastExpr 0x7fffd83e1250 <col:32, col:40> 'void' <ToVoid>
|       |   | `-ImplicitCastExpr 0x7fffd83e1238 <col:38, col:40> 'void *' <LValueToRValue>
|       |   |   `-ParenExpr 0x7fffd83e1218 <col:38, col:40> 'void *' lvalue
|       |   |     `-DeclRefExpr 0x7fffd83e11b0 <line:2815:21> 'void *' lvalue ParmVar 0x7fffd83e0e00 'userdata' 'void *'
|       |   `-CallExpr 0x7fffd83e12e0 <line:468:42, col:48> 'void'
|       |     |-ImplicitCastExpr 0x7fffd83e12c8 <col:42> 'void (*)(void *)' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x7fffd83e1278 <col:42> 'void (void *)' Function 0x7fffd831bec0 'free' 'void (void *)'
|       |     `-ImplicitCastExpr 0x7fffd83e1328 <line:2815:18> 'void *' <BitCast>
|       |       `-ImplicitCastExpr 0x7fffd83e1310 <col:18> 'stbtt__hheap_chunk *' <LValueToRValue>
|       |         `-DeclRefExpr 0x7fffd83e12a0 <col:18> 'stbtt__hheap_chunk *' lvalue Var 0x7fffd83e0f50 'c' 'stbtt__hheap_chunk *'
|       `-BinaryOperator 0x7fffd83e13f0 <line:2816:7, col:11> 'stbtt__hheap_chunk *' '='
|         |-DeclRefExpr 0x7fffd83e1388 <col:7> 'stbtt__hheap_chunk *' lvalue Var 0x7fffd83e0f50 'c' 'stbtt__hheap_chunk *'
|         `-ImplicitCastExpr 0x7fffd83e13d8 <col:11> 'stbtt__hheap_chunk *' <LValueToRValue>
|           `-DeclRefExpr 0x7fffd83e13b0 <col:11> 'stbtt__hheap_chunk *' lvalue Var 0x7fffd83e10a8 'n' 'stbtt__hheap_chunk *'
|-RecordDecl 0x7fffd83e1480 <line:2820:9, line:2823:1> line:2820:16 struct stbtt__edge definition
| |-FieldDecl 0x7fffd83e1548 <line:2821:4, col:10> col:10 referenced x0 'float'
| |-FieldDecl 0x7fffd83e15a8 <col:4, col:13> col:13 referenced y0 'float'
| |-FieldDecl 0x7fffd83e1608 <col:4, col:17> col:17 referenced x1 'float'
| |-FieldDecl 0x7fffd83e1668 <col:4, col:20> col:20 referenced y1 'float'
| `-FieldDecl 0x7fffd83e16c8 <line:2822:4, col:8> col:8 referenced invert 'int'
|-TypedefDecl 0x7fffd83e1760 <line:2820:1, line:2823:3> col:3 referenced stbtt__edge 'struct stbtt__edge':'struct stbtt__edge'
| `-ElaboratedType 0x7fffd83e1710 'struct stbtt__edge' sugar
|   `-RecordType 0x7fffd83e1510 'struct stbtt__edge'
|     `-Record 0x7fffd83e1480 'stbtt__edge'
|-RecordDecl 0x7fffd83e17d0 <line:2826:9, line:2841:1> line:2826:16 struct stbtt__active_edge definition
| |-FieldDecl 0x7fffd83e1930 <line:2828:4, col:31> col:31 referenced next 'struct stbtt__active_edge *'
| |-FieldDecl 0x7fffd83e1990 <line:2834:4, col:10> col:10 referenced fx 'float'
| |-FieldDecl 0x7fffd83e19f0 <col:4, col:13> col:13 referenced fdx 'float'
| |-FieldDecl 0x7fffd83e1a50 <col:4, col:17> col:17 referenced fdy 'float'
| |-FieldDecl 0x7fffd83e1ab0 <line:2835:4, col:10> col:10 referenced direction 'float'
| |-FieldDecl 0x7fffd83e1b10 <line:2836:4, col:10> col:10 referenced sy 'float'
| `-FieldDecl 0x7fffd83e1b70 <line:2837:4, col:10> col:10 referenced ey 'float'
|-TypedefDecl 0x7fffd83e1bd8 <line:2826:1, line:2841:3> col:3 referenced stbtt__active_edge 'struct stbtt__active_edge':'struct stbtt__active_edge'
| `-ElaboratedType 0x7fffd83e1880 'struct stbtt__active_edge' sugar
|   `-RecordType 0x7fffd83e1860 'struct stbtt__active_edge'
|     `-Record 0x7fffd83e17d0 'stbtt__active_edge'
|-FunctionDecl 0x7fffd83e2060 <line:2870:1, line:2886:1> line:2870:28 used stbtt__new_active 'stbtt__active_edge *(stbtt__hheap *, stbtt__edge *, int, float, void *)' static
| |-ParmVarDecl 0x7fffd83e1c80 <col:46, col:60> col:60 used hh 'stbtt__hheap *'
| |-ParmVarDecl 0x7fffd83e1d68 <col:64, col:77> col:77 used e 'stbtt__edge *'
| |-ParmVarDecl 0x7fffd83e1de0 <col:80, col:84> col:84 used off_x 'int'
| |-ParmVarDecl 0x7fffd83e1e58 <col:91, col:97> col:97 used start_point 'float'
| |-ParmVarDecl 0x7fffd83e1ed0 <col:110, col:116> col:116 used userdata 'void *'
| `-CompoundStmt 0x7fffd83e4b90 <line:2871:1, line:2886:1>
|   |-DeclStmt 0x7fffd83e23c8 <line:2872:4, col:95>
|   | `-VarDecl 0x7fffd83e2138 <col:4, col:94> col:24 used z 'stbtt__active_edge *' cinit
|   |   `-CStyleCastExpr 0x7fffd83e23a0 <col:28, col:94> 'stbtt__active_edge *' <BitCast>
|   |     `-CallExpr 0x7fffd83e2320 <col:51, col:94> 'void *'
|   |       |-ImplicitCastExpr 0x7fffd83e2308 <col:51> 'void *(*)(stbtt__hheap *, size_t, void *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x7fffd83e2198 <col:51> 'void *(stbtt__hheap *, size_t, void *)' Function 0x7fffd83df388 'stbtt__hheap_alloc' 'void *(stbtt__hheap *, size_t, void *)'
|   |       |-ImplicitCastExpr 0x7fffd83e2360 <col:70> 'stbtt__hheap *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x7fffd83e21c0 <col:70> 'stbtt__hheap *' lvalue ParmVar 0x7fffd83e1c80 'hh' 'stbtt__hheap *'
|   |       |-UnaryExprOrTypeTraitExpr 0x7fffd83e2268 <col:74, col:83> 'unsigned long' sizeof
|   |       | `-ParenExpr 0x7fffd83e2248 <col:80, col:83> 'stbtt__active_edge':'struct stbtt__active_edge' lvalue
|   |       |   `-UnaryOperator 0x7fffd83e2228 <col:81, col:82> 'stbtt__active_edge':'struct stbtt__active_edge' lvalue prefix '*'
|   |       |     `-ImplicitCastExpr 0x7fffd83e2210 <col:82> 'stbtt__active_edge *' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x7fffd83e21e8 <col:82> 'stbtt__active_edge *' lvalue Var 0x7fffd83e2138 'z' 'stbtt__active_edge *'
|   |       `-ImplicitCastExpr 0x7fffd83e2378 <col:86> 'void *' <LValueToRValue>
|   |         `-DeclRefExpr 0x7fffd83e2288 <col:86> 'void *' lvalue ParmVar 0x7fffd83e1ed0 'userdata' 'void *'
|   |-DeclStmt 0x7fffd83e2750 <line:2873:4, col:50>
|   | `-VarDecl 0x7fffd83e23f8 <col:4, col:49> col:10 used dxdy 'float' cinit
|   |   `-BinaryOperator 0x7fffd83e2728 <col:17, col:49> 'float' '/'
|   |     |-ParenExpr 0x7fffd83e25a0 <col:17, col:31> 'float'
|   |     | `-BinaryOperator 0x7fffd83e2578 <col:18, col:29> 'float' '-'
|   |     |   |-ImplicitCastExpr 0x7fffd83e2548 <col:18, col:21> 'float' <LValueToRValue>
|   |     |   | `-MemberExpr 0x7fffd83e2498 <col:18, col:21> 'float' lvalue ->x1 0x7fffd83e1608
|   |     |   |   `-ImplicitCastExpr 0x7fffd83e2480 <col:18> 'stbtt__edge *' <LValueToRValue>
|   |     |   |     `-DeclRefExpr 0x7fffd83e2458 <col:18> 'stbtt__edge *' lvalue ParmVar 0x7fffd83e1d68 'e' 'stbtt__edge *'
|   |     |   `-ImplicitCastExpr 0x7fffd83e2560 <col:26, col:29> 'float' <LValueToRValue>
|   |     |     `-MemberExpr 0x7fffd83e2510 <col:26, col:29> 'float' lvalue ->x0 0x7fffd83e1548
|   |     |       `-ImplicitCastExpr 0x7fffd83e24f8 <col:26> 'stbtt__edge *' <LValueToRValue>
|   |     |         `-DeclRefExpr 0x7fffd83e24d0 <col:26> 'stbtt__edge *' lvalue ParmVar 0x7fffd83e1d68 'e' 'stbtt__edge *'
|   |     `-ParenExpr 0x7fffd83e2708 <col:35, col:49> 'float'
|   |       `-BinaryOperator 0x7fffd83e26e0 <col:36, col:47> 'float' '-'
|   |         |-ImplicitCastExpr 0x7fffd83e26b0 <col:36, col:39> 'float' <LValueToRValue>
|   |         | `-MemberExpr 0x7fffd83e2600 <col:36, col:39> 'float' lvalue ->y1 0x7fffd83e1668
|   |         |   `-ImplicitCastExpr 0x7fffd83e25e8 <col:36> 'stbtt__edge *' <LValueToRValue>
|   |         |     `-DeclRefExpr 0x7fffd83e25c0 <col:36> 'stbtt__edge *' lvalue ParmVar 0x7fffd83e1d68 'e' 'stbtt__edge *'
|   |         `-ImplicitCastExpr 0x7fffd83e26c8 <col:44, col:47> 'float' <LValueToRValue>
|   |           `-MemberExpr 0x7fffd83e2678 <col:44, col:47> 'float' lvalue ->y0 0x7fffd83e15a8
|   |             `-ImplicitCastExpr 0x7fffd83e2660 <col:44> 'stbtt__edge *' <LValueToRValue>
|   |               `-DeclRefExpr 0x7fffd83e2638 <col:44> 'stbtt__edge *' lvalue ParmVar 0x7fffd83e1d68 'e' 'stbtt__edge *'
|   |-ParenExpr 0x7fffd83e3e50 </usr/include/assert.h:108:3, line:113:7> 'void'
|   | `-BinaryOperator 0x7fffd83e3e28 <line:108:4, line:113:6> 'void' ','
|   |   |-CStyleCastExpr 0x7fffd83e3978 <line:108:4, col:33> 'void' <ToVoid>
|   |   | `-UnaryExprOrTypeTraitExpr 0x7fffd83e3948 <col:11, col:33> 'unsigned long' sizeof
|   |   |   `-ParenExpr 0x7fffd83e3928 <col:18, col:33> 'int'
|   |   |     `-ConditionalOperator 0x7fffd83e38f8 <col:19, col:32> 'int'
|   |   |       |-ParenExpr 0x7fffd83e3898 <col:19, col:24> 'int'
|   |   |       | `-BinaryOperator 0x7fffd83e3870 <././stb/stb_truetype.h:2874:17, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25> 'int' '!='
|   |   |       |   |-ImplicitCastExpr 0x7fffd83e3840 <././stb/stb_truetype.h:2874:17> 'stbtt__active_edge *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x7fffd83e2768 <col:17> 'stbtt__active_edge *' lvalue Var 0x7fffd83e2138 'z' 'stbtt__active_edge *'
|   |   |       |   `-ImplicitCastExpr 0x7fffd83e3858 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'stbtt__active_edge *' <BitCast>
|   |   |       |     `-ParenExpr 0x7fffd83e3820 <col:16, col:25> 'void *'
|   |   |       |       `-CStyleCastExpr 0x7fffd83e27c8 <col:17, col:24> 'void *' <NullToPointer>
|   |   |       |         `-IntegerLiteral 0x7fffd83e2790 <col:24> 'int' 0
|   |   |       |-IntegerLiteral 0x7fffd83e38b8 </usr/include/assert.h:108:28> 'int' 1
|   |   |       `-IntegerLiteral 0x7fffd83e38d8 <col:32> 'int' 0
|   |   `-UnaryOperator 0x7fffd83e3e08 <col:36, line:113:6> 'void' prefix '__extension__'
|   |     `-StmtExpr 0x7fffd83e3de8 <line:108:50, line:113:6> 'void'
|   |       `-CompoundStmt 0x7fffd83e3dd0 <line:108:51, line:113:5>
|   |         `-IfStmt 0x7fffd83e3d98 <line:109:7, line:112:68>
|   |           |-<<<NULL>>>
|   |           |-<<<NULL>>>
|   |           |-BinaryOperator 0x7fffd83e3a78 <././stb/stb_truetype.h:2874:17, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25> 'int' '!='
|   |           | |-ImplicitCastExpr 0x7fffd83e3a48 <././stb/stb_truetype.h:2874:17> 'stbtt__active_edge *' <LValueToRValue>
|   |           | | `-DeclRefExpr 0x7fffd83e39a0 <col:17> 'stbtt__active_edge *' lvalue Var 0x7fffd83e2138 'z' 'stbtt__active_edge *'
|   |           | `-ImplicitCastExpr 0x7fffd83e3a60 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'stbtt__active_edge *' <BitCast>
|   |           |   `-ParenExpr 0x7fffd83e3a28 <col:16, col:25> 'void *'
|   |           |     `-CStyleCastExpr 0x7fffd83e3a00 <col:17, col:24> 'void *' <NullToPointer>
|   |           |       `-IntegerLiteral 0x7fffd83e39c8 <col:24> 'int' 0
|   |           |-NullStmt 0x7fffd83e3aa0 </usr/include/assert.h:110:9>
|   |           `-CallExpr 0x7fffd83e3cc0 <line:112:9, col:68> 'void'
|   |             |-ImplicitCastExpr 0x7fffd83e3ca8 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |             | `-DeclRefExpr 0x7fffd83e3ab0 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |             |-ImplicitCastExpr 0x7fffd83e3d20 <<scratch space>:279:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd83e3d08 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd83e3ad8 <col:1> 'char [16]' lvalue "z != ((void*)0)"
|   |             |-ImplicitCastExpr 0x7fffd83e3d50 <line:280:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd83e3d38 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd83e3b10 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |             |-ImplicitCastExpr 0x7fffd83e3d68 <line:281:1> 'unsigned int' <IntegralCast>
|   |             | `-IntegerLiteral 0x7fffd83e3b50 <col:1> 'int' 2874
|   |             `-ImplicitCastExpr 0x7fffd83e3d80 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |               `-UnaryOperator 0x7fffd83e3c88 <col:30, col:44> 'const char [89]' lvalue prefix '__extension__'
|   |                 `-PredefinedExpr 0x7fffd83e3c68 <col:44> 'const char [89]' lvalue __PRETTY_FUNCTION__
|   |                   `-StringLiteral 0x7fffd83e3be8 <col:44> 'const char [89]' lvalue "stbtt__active_edge *stbtt__new_active(stbtt__hheap *, stbtt__edge *, int, float, void *)"
|   |-IfStmt 0x7fffd83e3f28 <././stb/stb_truetype.h:2876:4, col:19>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-UnaryOperator 0x7fffd83e3eb0 <col:8, col:9> 'int' prefix '!'
|   | | `-ImplicitCastExpr 0x7fffd83e3e98 <col:9> 'stbtt__active_edge *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83e3e70 <col:9> 'stbtt__active_edge *' lvalue Var 0x7fffd83e2138 'z' 'stbtt__active_edge *'
|   | |-ReturnStmt 0x7fffd83e3f10 <col:12, col:19>
|   | | `-ImplicitCastExpr 0x7fffd83e3ef8 <col:19> 'stbtt__active_edge *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83e3ed0 <col:19> 'stbtt__active_edge *' lvalue Var 0x7fffd83e2138 'z' 'stbtt__active_edge *'
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x7fffd83e4018 <line:2877:4, col:13> 'float' '='
|   | |-MemberExpr 0x7fffd83e3fa0 <col:4, col:7> 'float' lvalue ->fdx 0x7fffd83e19f0
|   | | `-ImplicitCastExpr 0x7fffd83e3f88 <col:4> 'stbtt__active_edge *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83e3f60 <col:4> 'stbtt__active_edge *' lvalue Var 0x7fffd83e2138 'z' 'stbtt__active_edge *'
|   | `-ImplicitCastExpr 0x7fffd83e4000 <col:13> 'float' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd83e3fd8 <col:13> 'float' lvalue Var 0x7fffd83e23f8 'dxdy' 'float'
|   |-BinaryOperator 0x7fffd83e4238 <line:2878:4, col:42> 'float' '='
|   | |-MemberExpr 0x7fffd83e4080 <col:4, col:7> 'float' lvalue ->fdy 0x7fffd83e1a50
|   | | `-ImplicitCastExpr 0x7fffd83e4068 <col:4> 'stbtt__active_edge *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83e4040 <col:4> 'stbtt__active_edge *' lvalue Var 0x7fffd83e2138 'z' 'stbtt__active_edge *'
|   | `-ConditionalOperator 0x7fffd83e4208 <col:13, col:42> 'float'
|   |   |-BinaryOperator 0x7fffd83e4118 <col:13, col:21> 'int' '!='
|   |   | |-ImplicitCastExpr 0x7fffd83e4100 <col:13> 'float' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x7fffd83e40b8 <col:13> 'float' lvalue Var 0x7fffd83e23f8 'dxdy' 'float'
|   |   | `-FloatingLiteral 0x7fffd83e40e0 <col:21> 'float' 0.000000e+00
|   |   |-ParenExpr 0x7fffd83e41c8 <col:28, col:38> 'float'
|   |   | `-BinaryOperator 0x7fffd83e41a0 <col:29, col:34> 'float' '/'
|   |   |   |-FloatingLiteral 0x7fffd83e4140 <col:29> 'float' 1.000000e+00
|   |   |   `-ImplicitCastExpr 0x7fffd83e4188 <col:34> 'float' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x7fffd83e4160 <col:34> 'float' lvalue Var 0x7fffd83e23f8 'dxdy' 'float'
|   |   `-FloatingLiteral 0x7fffd83e41e8 <col:42> 'float' 0.000000e+00
|   |-BinaryOperator 0x7fffd83e4510 <line:2879:4, col:47> 'float' '='
|   | |-MemberExpr 0x7fffd83e42a0 <col:4, col:7> 'float' lvalue ->fx 0x7fffd83e1990
|   | | `-ImplicitCastExpr 0x7fffd83e4288 <col:4> 'stbtt__active_edge *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83e4260 <col:4> 'stbtt__active_edge *' lvalue Var 0x7fffd83e2138 'z' 'stbtt__active_edge *'
|   | `-BinaryOperator 0x7fffd83e44e8 <col:12, col:47> 'float' '+'
|   |   |-ImplicitCastExpr 0x7fffd83e44d0 <col:12, col:15> 'float' <LValueToRValue>
|   |   | `-MemberExpr 0x7fffd83e4318 <col:12, col:15> 'float' lvalue ->x0 0x7fffd83e1548
|   |   |   `-ImplicitCastExpr 0x7fffd83e4300 <col:12> 'stbtt__edge *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x7fffd83e42d8 <col:12> 'stbtt__edge *' lvalue ParmVar 0x7fffd83e1d68 'e' 'stbtt__edge *'
|   |   `-BinaryOperator 0x7fffd83e44a8 <col:20, col:47> 'float' '*'
|   |     |-ImplicitCastExpr 0x7fffd83e4490 <col:20> 'float' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd83e4350 <col:20> 'float' lvalue Var 0x7fffd83e23f8 'dxdy' 'float'
|   |     `-ParenExpr 0x7fffd83e4470 <col:27, col:47> 'float'
|   |       `-BinaryOperator 0x7fffd83e4448 <col:28, col:45> 'float' '-'
|   |         |-ImplicitCastExpr 0x7fffd83e4418 <col:28> 'float' <LValueToRValue>
|   |         | `-DeclRefExpr 0x7fffd83e4378 <col:28> 'float' lvalue ParmVar 0x7fffd83e1e58 'start_point' 'float'
|   |         `-ImplicitCastExpr 0x7fffd83e4430 <col:42, col:45> 'float' <LValueToRValue>
|   |           `-MemberExpr 0x7fffd83e43e0 <col:42, col:45> 'float' lvalue ->y0 0x7fffd83e15a8
|   |             `-ImplicitCastExpr 0x7fffd83e43c8 <col:42> 'stbtt__edge *' <LValueToRValue>
|   |               `-DeclRefExpr 0x7fffd83e43a0 <col:42> 'stbtt__edge *' lvalue ParmVar 0x7fffd83e1d68 'e' 'stbtt__edge *'
|   |-CompoundAssignOperator 0x7fffd83e4608 <line:2880:4, col:13> 'float' '-=' ComputeLHSTy='float' ComputeResultTy='float'
|   | |-MemberExpr 0x7fffd83e4578 <col:4, col:7> 'float' lvalue ->fx 0x7fffd83e1990
|   | | `-ImplicitCastExpr 0x7fffd83e4560 <col:4> 'stbtt__active_edge *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83e4538 <col:4> 'stbtt__active_edge *' lvalue Var 0x7fffd83e2138 'z' 'stbtt__active_edge *'
|   | `-ImplicitCastExpr 0x7fffd83e45f0 <col:13> 'float' <IntegralToFloating>
|   |   `-ImplicitCastExpr 0x7fffd83e45d8 <col:13> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd83e45b0 <col:13> 'int' lvalue ParmVar 0x7fffd83e1de0 'off_x' 'int'
|   |-BinaryOperator 0x7fffd83e47d8 <line:2881:4, col:39> 'float' '='
|   | |-MemberExpr 0x7fffd83e4680 <col:4, col:7> 'float' lvalue ->direction 0x7fffd83e1ab0
|   | | `-ImplicitCastExpr 0x7fffd83e4668 <col:4> 'stbtt__active_edge *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83e4640 <col:4> 'stbtt__active_edge *' lvalue Var 0x7fffd83e2138 'z' 'stbtt__active_edge *'
|   | `-ConditionalOperator 0x7fffd83e47a8 <col:19, col:39> 'float'
|   |   |-ImplicitCastExpr 0x7fffd83e4790 <col:19, col:22> 'int' <LValueToRValue>
|   |   | `-MemberExpr 0x7fffd83e46f8 <col:19, col:22> 'int' lvalue ->invert 0x7fffd83e16c8
|   |   |   `-ImplicitCastExpr 0x7fffd83e46e0 <col:19> 'stbtt__edge *' <LValueToRValue>
|   |   |     `-DeclRefExpr 0x7fffd83e46b8 <col:19> 'stbtt__edge *' lvalue ParmVar 0x7fffd83e1d68 'e' 'stbtt__edge *'
|   |   |-FloatingLiteral 0x7fffd83e4730 <col:31> 'float' 1.000000e+00
|   |   `-UnaryOperator 0x7fffd83e4770 <col:38, col:39> 'float' prefix '-'
|   |     `-FloatingLiteral 0x7fffd83e4750 <col:39> 'float' 1.000000e+00
|   |-BinaryOperator 0x7fffd83e4908 <line:2882:4, col:15> 'float' '='
|   | |-MemberExpr 0x7fffd83e4840 <col:4, col:7> 'float' lvalue ->sy 0x7fffd83e1b10
|   | | `-ImplicitCastExpr 0x7fffd83e4828 <col:4> 'stbtt__active_edge *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83e4800 <col:4> 'stbtt__active_edge *' lvalue Var 0x7fffd83e2138 'z' 'stbtt__active_edge *'
|   | `-ImplicitCastExpr 0x7fffd83e48f0 <col:12, col:15> 'float' <LValueToRValue>
|   |   `-MemberExpr 0x7fffd83e48b8 <col:12, col:15> 'float' lvalue ->y0 0x7fffd83e15a8
|   |     `-ImplicitCastExpr 0x7fffd83e48a0 <col:12> 'stbtt__edge *' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd83e4878 <col:12> 'stbtt__edge *' lvalue ParmVar 0x7fffd83e1d68 'e' 'stbtt__edge *'
|   |-BinaryOperator 0x7fffd83e4a38 <line:2883:4, col:15> 'float' '='
|   | |-MemberExpr 0x7fffd83e4970 <col:4, col:7> 'float' lvalue ->ey 0x7fffd83e1b70
|   | | `-ImplicitCastExpr 0x7fffd83e4958 <col:4> 'stbtt__active_edge *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83e4930 <col:4> 'stbtt__active_edge *' lvalue Var 0x7fffd83e2138 'z' 'stbtt__active_edge *'
|   | `-ImplicitCastExpr 0x7fffd83e4a20 <col:12, col:15> 'float' <LValueToRValue>
|   |   `-MemberExpr 0x7fffd83e49e8 <col:12, col:15> 'float' lvalue ->y1 0x7fffd83e1668
|   |     `-ImplicitCastExpr 0x7fffd83e49d0 <col:12> 'stbtt__edge *' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd83e49a8 <col:12> 'stbtt__edge *' lvalue ParmVar 0x7fffd83e1d68 'e' 'stbtt__edge *'
|   |-BinaryOperator 0x7fffd83e4b10 <line:2884:4, col:14> 'struct stbtt__active_edge *' '='
|   | |-MemberExpr 0x7fffd83e4aa0 <col:4, col:7> 'struct stbtt__active_edge *' lvalue ->next 0x7fffd83e1930
|   | | `-ImplicitCastExpr 0x7fffd83e4a88 <col:4> 'stbtt__active_edge *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83e4a60 <col:4> 'stbtt__active_edge *' lvalue Var 0x7fffd83e2138 'z' 'stbtt__active_edge *'
|   | `-ImplicitCastExpr 0x7fffd83e4af8 <col:14> 'struct stbtt__active_edge *' <NullToPointer>
|   |   `-IntegerLiteral 0x7fffd83e4ad8 <col:14> 'int' 0
|   `-ReturnStmt 0x7fffd83e4b78 <line:2885:4, col:11>
|     `-ImplicitCastExpr 0x7fffd83e4b60 <col:11> 'stbtt__active_edge *' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd83e4b38 <col:11> 'stbtt__active_edge *' lvalue Var 0x7fffd83e2138 'z' 'stbtt__active_edge *'
|-FunctionDecl 0x7fffd83e5080 <line:3041:1, line:3076:1> line:3041:13 used stbtt__handle_clipped_edge 'void (float *, int, stbtt__active_edge *, float, float, float, float)' static
| |-ParmVarDecl 0x7fffd83e4c20 <col:40, col:47> col:47 used scanline 'float *'
| |-ParmVarDecl 0x7fffd83e4c98 <col:57, col:61> col:61 used x 'int'
| |-ParmVarDecl 0x7fffd83e4d08 <col:64, col:84> col:84 used e 'stbtt__active_edge *'
| |-ParmVarDecl 0x7fffd83e4d80 <col:87, col:93> col:93 used x0 'float'
| |-ParmVarDecl 0x7fffd83e4df8 <col:97, col:103> col:103 used y0 'float'
| |-ParmVarDecl 0x7fffd83e4e70 <col:107, col:113> col:113 used x1 'float'
| |-ParmVarDecl 0x7fffd83e4ee8 <col:117, col:123> col:123 used y1 'float'
| `-CompoundStmt 0x7fffd83eb0b0 <line:3042:1, line:3076:1>
|   |-IfStmt 0x7fffd83e5218 <line:3043:4, col:18>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83e51d8 <col:8, col:14> 'int' '=='
|   | | |-ImplicitCastExpr 0x7fffd83e51a8 <col:8> 'float' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd83e5158 <col:8> 'float' lvalue ParmVar 0x7fffd83e4df8 'y0' 'float'
|   | | `-ImplicitCastExpr 0x7fffd83e51c0 <col:14> 'float' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd83e5180 <col:14> 'float' lvalue ParmVar 0x7fffd83e4ee8 'y1' 'float'
|   | |-ReturnStmt 0x7fffd83e5200 <col:18>
|   | `-<<<NULL>>>
|   |-ParenExpr 0x7fffd83e5c88 </usr/include/assert.h:108:3, line:113:7> 'void'
|   | `-BinaryOperator 0x7fffd83e5c60 <line:108:4, line:113:6> 'void' ','
|   |   |-CStyleCastExpr 0x7fffd83e53d8 <line:108:4, col:33> 'void' <ToVoid>
|   |   | `-UnaryExprOrTypeTraitExpr 0x7fffd83e53a8 <col:11, col:33> 'unsigned long' sizeof
|   |   |   `-ParenExpr 0x7fffd83e5388 <col:18, col:33> 'int'
|   |   |     `-ConditionalOperator 0x7fffd83e5358 <col:19, col:32> 'int'
|   |   |       |-ParenExpr 0x7fffd83e52f8 <col:19, col:24> 'int'
|   |   |       | `-BinaryOperator 0x7fffd83e52d0 <././stb/stb_truetype.h:3044:17, col:22> 'int' '<'
|   |   |       |   |-ImplicitCastExpr 0x7fffd83e52a0 <col:17> 'float' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x7fffd83e5250 <col:17> 'float' lvalue ParmVar 0x7fffd83e4df8 'y0' 'float'
|   |   |       |   `-ImplicitCastExpr 0x7fffd83e52b8 <col:22> 'float' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x7fffd83e5278 <col:22> 'float' lvalue ParmVar 0x7fffd83e4ee8 'y1' 'float'
|   |   |       |-IntegerLiteral 0x7fffd83e5318 </usr/include/assert.h:108:28> 'int' 1
|   |   |       `-IntegerLiteral 0x7fffd83e5338 <col:32> 'int' 0
|   |   `-UnaryOperator 0x7fffd83e5c40 <col:36, line:113:6> 'void' prefix '__extension__'
|   |     `-StmtExpr 0x7fffd83e57f0 <line:108:50, line:113:6> 'void'
|   |       `-CompoundStmt 0x7fffd83e57d8 <line:108:51, line:113:5>
|   |         `-IfStmt 0x7fffd83e57a0 <line:109:7, line:112:68>
|   |           |-<<<NULL>>>
|   |           |-<<<NULL>>>
|   |           |-BinaryOperator 0x7fffd83e5480 <././stb/stb_truetype.h:3044:17, col:22> 'int' '<'
|   |           | |-ImplicitCastExpr 0x7fffd83e5450 <col:17> 'float' <LValueToRValue>
|   |           | | `-DeclRefExpr 0x7fffd83e5400 <col:17> 'float' lvalue ParmVar 0x7fffd83e4df8 'y0' 'float'
|   |           | `-ImplicitCastExpr 0x7fffd83e5468 <col:22> 'float' <LValueToRValue>
|   |           |   `-DeclRefExpr 0x7fffd83e5428 <col:22> 'float' lvalue ParmVar 0x7fffd83e4ee8 'y1' 'float'
|   |           |-NullStmt 0x7fffd83e54a8 </usr/include/assert.h:110:9>
|   |           `-CallExpr 0x7fffd83e56c8 <line:112:9, col:68> 'void'
|   |             |-ImplicitCastExpr 0x7fffd83e56b0 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |             | `-DeclRefExpr 0x7fffd83e54b8 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |             |-ImplicitCastExpr 0x7fffd83e5728 <<scratch space>:282:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd83e5710 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd83e54e0 <col:1> 'char [8]' lvalue "y0 < y1"
|   |             |-ImplicitCastExpr 0x7fffd83e5758 <line:283:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd83e5740 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd83e5510 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |             |-ImplicitCastExpr 0x7fffd83e5770 <line:284:1> 'unsigned int' <IntegralCast>
|   |             | `-IntegerLiteral 0x7fffd83e5550 <col:1> 'int' 3044
|   |             `-ImplicitCastExpr 0x7fffd83e5788 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |               `-UnaryOperator 0x7fffd83e5690 <col:30, col:44> 'const char [96]' lvalue prefix '__extension__'
|   |                 `-PredefinedExpr 0x7fffd83e5670 <col:44> 'const char [96]' lvalue __PRETTY_FUNCTION__
|   |                   `-StringLiteral 0x7fffd83e55e8 <col:44> 'const char [96]' lvalue "void stbtt__handle_clipped_edge(float *, int, stbtt__active_edge *, float, float, float, float)"
|   |-ParenExpr 0x7fffd83e63c0 <line:108:3, line:113:7> 'void'
|   | `-BinaryOperator 0x7fffd83e6398 <line:108:4, line:113:6> 'void' ','
|   |   |-CStyleCastExpr 0x7fffd83e5ed0 <line:108:4, col:33> 'void' <ToVoid>
|   |   | `-UnaryExprOrTypeTraitExpr 0x7fffd83e5ea0 <col:11, col:33> 'unsigned long' sizeof
|   |   |   `-ParenExpr 0x7fffd83e5e80 <col:18, col:33> 'int'
|   |   |     `-ConditionalOperator 0x7fffd83e5e50 <col:19, col:32> 'int'
|   |   |       |-ParenExpr 0x7fffd83e5df0 <col:19, col:24> 'int'
|   |   |       | `-BinaryOperator 0x7fffd83e5dc8 <././stb/stb_truetype.h:3045:17, col:29> 'int' '<='
|   |   |       |   |-ImplicitCastExpr 0x7fffd83e5d98 <col:17, col:20> 'float' <LValueToRValue>
|   |   |       |   | `-MemberExpr 0x7fffd83e5ce8 <col:17, col:20> 'float' lvalue ->sy 0x7fffd83e1b10
|   |   |       |   |   `-ImplicitCastExpr 0x7fffd83e5cd0 <col:17> 'stbtt__active_edge *' <LValueToRValue>
|   |   |       |   |     `-DeclRefExpr 0x7fffd83e5ca8 <col:17> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83e4d08 'e' 'stbtt__active_edge *'
|   |   |       |   `-ImplicitCastExpr 0x7fffd83e5db0 <col:26, col:29> 'float' <LValueToRValue>
|   |   |       |     `-MemberExpr 0x7fffd83e5d60 <col:26, col:29> 'float' lvalue ->ey 0x7fffd83e1b70
|   |   |       |       `-ImplicitCastExpr 0x7fffd83e5d48 <col:26> 'stbtt__active_edge *' <LValueToRValue>
|   |   |       |         `-DeclRefExpr 0x7fffd83e5d20 <col:26> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83e4d08 'e' 'stbtt__active_edge *'
|   |   |       |-IntegerLiteral 0x7fffd83e5e10 </usr/include/assert.h:108:28> 'int' 1
|   |   |       `-IntegerLiteral 0x7fffd83e5e30 <col:32> 'int' 0
|   |   `-UnaryOperator 0x7fffd83e6378 <col:36, line:113:6> 'void' prefix '__extension__'
|   |     `-StmtExpr 0x7fffd83e6358 <line:108:50, line:113:6> 'void'
|   |       `-CompoundStmt 0x7fffd83e6340 <line:108:51, line:113:5>
|   |         `-IfStmt 0x7fffd83e6308 <line:109:7, line:112:68>
|   |           |-<<<NULL>>>
|   |           |-<<<NULL>>>
|   |           |-BinaryOperator 0x7fffd83e6018 <././stb/stb_truetype.h:3045:17, col:29> 'int' '<='
|   |           | |-ImplicitCastExpr 0x7fffd83e5fe8 <col:17, col:20> 'float' <LValueToRValue>
|   |           | | `-MemberExpr 0x7fffd83e5f38 <col:17, col:20> 'float' lvalue ->sy 0x7fffd83e1b10
|   |           | |   `-ImplicitCastExpr 0x7fffd83e5f20 <col:17> 'stbtt__active_edge *' <LValueToRValue>
|   |           | |     `-DeclRefExpr 0x7fffd83e5ef8 <col:17> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83e4d08 'e' 'stbtt__active_edge *'
|   |           | `-ImplicitCastExpr 0x7fffd83e6000 <col:26, col:29> 'float' <LValueToRValue>
|   |           |   `-MemberExpr 0x7fffd83e5fb0 <col:26, col:29> 'float' lvalue ->ey 0x7fffd83e1b70
|   |           |     `-ImplicitCastExpr 0x7fffd83e5f98 <col:26> 'stbtt__active_edge *' <LValueToRValue>
|   |           |       `-DeclRefExpr 0x7fffd83e5f70 <col:26> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83e4d08 'e' 'stbtt__active_edge *'
|   |           |-NullStmt 0x7fffd83e6040 </usr/include/assert.h:110:9>
|   |           `-CallExpr 0x7fffd83e6230 <line:112:9, col:68> 'void'
|   |             |-ImplicitCastExpr 0x7fffd83e6218 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |             | `-DeclRefExpr 0x7fffd83e6050 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |             |-ImplicitCastExpr 0x7fffd83e6290 <<scratch space>:285:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd83e6278 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd83e60b8 <col:1> 'char [15]' lvalue "e->sy <= e->ey"
|   |             |-ImplicitCastExpr 0x7fffd83e62c0 <line:286:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd83e62a8 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd83e60f0 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |             |-ImplicitCastExpr 0x7fffd83e62d8 <line:287:1> 'unsigned int' <IntegralCast>
|   |             | `-IntegerLiteral 0x7fffd83e6130 <col:1> 'int' 3045
|   |             `-ImplicitCastExpr 0x7fffd83e62f0 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |               `-UnaryOperator 0x7fffd83e61f8 <col:30, col:44> 'const char [96]' lvalue prefix '__extension__'
|   |                 `-PredefinedExpr 0x7fffd83e61d8 <col:44> 'const char [96]' lvalue __PRETTY_FUNCTION__
|   |                   `-StringLiteral 0x7fffd83e6150 <col:44> 'const char [96]' lvalue "void stbtt__handle_clipped_edge(float *, int, stbtt__active_edge *, float, float, float, float)"
|   |-IfStmt 0x7fffd83e64f0 <././stb/stb_truetype.h:3046:4, col:20>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83e64b0 <col:8, col:16> 'int' '>'
|   | | |-ImplicitCastExpr 0x7fffd83e6480 <col:8> 'float' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd83e63e0 <col:8> 'float' lvalue ParmVar 0x7fffd83e4df8 'y0' 'float'
|   | | `-ImplicitCastExpr 0x7fffd83e6498 <col:13, col:16> 'float' <LValueToRValue>
|   | |   `-MemberExpr 0x7fffd83e6448 <col:13, col:16> 'float' lvalue ->ey 0x7fffd83e1b70
|   | |     `-ImplicitCastExpr 0x7fffd83e6430 <col:13> 'stbtt__active_edge *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x7fffd83e6408 <col:13> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83e4d08 'e' 'stbtt__active_edge *'
|   | |-ReturnStmt 0x7fffd83e64d8 <col:20>
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd83e6638 <line:3047:4, col:20>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83e65f8 <col:8, col:16> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd83e65c8 <col:8> 'float' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd83e6528 <col:8> 'float' lvalue ParmVar 0x7fffd83e4ee8 'y1' 'float'
|   | | `-ImplicitCastExpr 0x7fffd83e65e0 <col:13, col:16> 'float' <LValueToRValue>
|   | |   `-MemberExpr 0x7fffd83e6590 <col:13, col:16> 'float' lvalue ->sy 0x7fffd83e1b10
|   | |     `-ImplicitCastExpr 0x7fffd83e6578 <col:13> 'stbtt__active_edge *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x7fffd83e6550 <col:13> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83e4d08 'e' 'stbtt__active_edge *'
|   | |-ReturnStmt 0x7fffd83e6620 <col:20>
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd83e6bc0 <line:3048:4, line:3051:4>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83e6740 <line:3048:8, col:16> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd83e6710 <col:8> 'float' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd83e6670 <col:8> 'float' lvalue ParmVar 0x7fffd83e4df8 'y0' 'float'
|   | | `-ImplicitCastExpr 0x7fffd83e6728 <col:13, col:16> 'float' <LValueToRValue>
|   | |   `-MemberExpr 0x7fffd83e66d8 <col:13, col:16> 'float' lvalue ->sy 0x7fffd83e1b10
|   | |     `-ImplicitCastExpr 0x7fffd83e66c0 <col:13> 'stbtt__active_edge *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x7fffd83e6698 <col:13> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83e4d08 'e' 'stbtt__active_edge *'
|   | |-CompoundStmt 0x7fffd83e6ba0 <col:20, line:3051:4>
|   | | |-CompoundAssignOperator 0x7fffd83e6a88 <line:3049:7, col:44> 'float' '+=' ComputeLHSTy='float' ComputeResultTy='float'
|   | | | |-DeclRefExpr 0x7fffd83e6768 <col:7> 'float' lvalue ParmVar 0x7fffd83e4d80 'x0' 'float'
|   | | | `-BinaryOperator 0x7fffd83e6a60 <col:13, col:44> 'float' '/'
|   | | |   |-BinaryOperator 0x7fffd83e6970 <col:13, col:34> 'float' '*'
|   | | |   | |-ParenExpr 0x7fffd83e6838 <col:13, col:19> 'float'
|   | | |   | | `-BinaryOperator 0x7fffd83e6810 <col:14, col:17> 'float' '-'
|   | | |   | |   |-ImplicitCastExpr 0x7fffd83e67e0 <col:14> 'float' <LValueToRValue>
|   | | |   | |   | `-DeclRefExpr 0x7fffd83e6790 <col:14> 'float' lvalue ParmVar 0x7fffd83e4e70 'x1' 'float'
|   | | |   | |   `-ImplicitCastExpr 0x7fffd83e67f8 <col:17> 'float' <LValueToRValue>
|   | | |   | |     `-DeclRefExpr 0x7fffd83e67b8 <col:17> 'float' lvalue ParmVar 0x7fffd83e4d80 'x0' 'float'
|   | | |   | `-ParenExpr 0x7fffd83e6950 <col:23, col:34> 'float'
|   | | |   |   `-BinaryOperator 0x7fffd83e6928 <col:24, col:32> 'float' '-'
|   | | |   |     |-ImplicitCastExpr 0x7fffd83e68f8 <col:24, col:27> 'float' <LValueToRValue>
|   | | |   |     | `-MemberExpr 0x7fffd83e6898 <col:24, col:27> 'float' lvalue ->sy 0x7fffd83e1b10
|   | | |   |     |   `-ImplicitCastExpr 0x7fffd83e6880 <col:24> 'stbtt__active_edge *' <LValueToRValue>
|   | | |   |     |     `-DeclRefExpr 0x7fffd83e6858 <col:24> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83e4d08 'e' 'stbtt__active_edge *'
|   | | |   |     `-ImplicitCastExpr 0x7fffd83e6910 <col:32> 'float' <LValueToRValue>
|   | | |   |       `-DeclRefExpr 0x7fffd83e68d0 <col:32> 'float' lvalue ParmVar 0x7fffd83e4df8 'y0' 'float'
|   | | |   `-ParenExpr 0x7fffd83e6a40 <col:38, col:44> 'float'
|   | | |     `-BinaryOperator 0x7fffd83e6a18 <col:39, col:42> 'float' '-'
|   | | |       |-ImplicitCastExpr 0x7fffd83e69e8 <col:39> 'float' <LValueToRValue>
|   | | |       | `-DeclRefExpr 0x7fffd83e6998 <col:39> 'float' lvalue ParmVar 0x7fffd83e4ee8 'y1' 'float'
|   | | |       `-ImplicitCastExpr 0x7fffd83e6a00 <col:42> 'float' <LValueToRValue>
|   | | |         `-DeclRefExpr 0x7fffd83e69c0 <col:42> 'float' lvalue ParmVar 0x7fffd83e4df8 'y0' 'float'
|   | | `-BinaryOperator 0x7fffd83e6b78 <line:3050:7, col:15> 'float' '='
|   | |   |-DeclRefExpr 0x7fffd83e6ac0 <col:7> 'float' lvalue ParmVar 0x7fffd83e4df8 'y0' 'float'
|   | |   `-ImplicitCastExpr 0x7fffd83e6b60 <col:12, col:15> 'float' <LValueToRValue>
|   | |     `-MemberExpr 0x7fffd83e6b28 <col:12, col:15> 'float' lvalue ->sy 0x7fffd83e1b10
|   | |       `-ImplicitCastExpr 0x7fffd83e6b10 <col:12> 'stbtt__active_edge *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x7fffd83e6ae8 <col:12> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83e4d08 'e' 'stbtt__active_edge *'
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd83e7148 <line:3052:4, line:3055:4>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83e6cc8 <line:3052:8, col:16> 'int' '>'
|   | | |-ImplicitCastExpr 0x7fffd83e6c98 <col:8> 'float' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd83e6bf8 <col:8> 'float' lvalue ParmVar 0x7fffd83e4ee8 'y1' 'float'
|   | | `-ImplicitCastExpr 0x7fffd83e6cb0 <col:13, col:16> 'float' <LValueToRValue>
|   | |   `-MemberExpr 0x7fffd83e6c60 <col:13, col:16> 'float' lvalue ->ey 0x7fffd83e1b70
|   | |     `-ImplicitCastExpr 0x7fffd83e6c48 <col:13> 'stbtt__active_edge *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x7fffd83e6c20 <col:13> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83e4d08 'e' 'stbtt__active_edge *'
|   | |-CompoundStmt 0x7fffd83e7128 <col:20, line:3055:4>
|   | | |-CompoundAssignOperator 0x7fffd83e7010 <line:3053:7, col:44> 'float' '+=' ComputeLHSTy='float' ComputeResultTy='float'
|   | | | |-DeclRefExpr 0x7fffd83e6cf0 <col:7> 'float' lvalue ParmVar 0x7fffd83e4e70 'x1' 'float'
|   | | | `-BinaryOperator 0x7fffd83e6fe8 <col:13, col:44> 'float' '/'
|   | | |   |-BinaryOperator 0x7fffd83e6ef8 <col:13, col:34> 'float' '*'
|   | | |   | |-ParenExpr 0x7fffd83e6dc0 <col:13, col:19> 'float'
|   | | |   | | `-BinaryOperator 0x7fffd83e6d98 <col:14, col:17> 'float' '-'
|   | | |   | |   |-ImplicitCastExpr 0x7fffd83e6d68 <col:14> 'float' <LValueToRValue>
|   | | |   | |   | `-DeclRefExpr 0x7fffd83e6d18 <col:14> 'float' lvalue ParmVar 0x7fffd83e4e70 'x1' 'float'
|   | | |   | |   `-ImplicitCastExpr 0x7fffd83e6d80 <col:17> 'float' <LValueToRValue>
|   | | |   | |     `-DeclRefExpr 0x7fffd83e6d40 <col:17> 'float' lvalue ParmVar 0x7fffd83e4d80 'x0' 'float'
|   | | |   | `-ParenExpr 0x7fffd83e6ed8 <col:23, col:34> 'float'
|   | | |   |   `-BinaryOperator 0x7fffd83e6eb0 <col:24, col:32> 'float' '-'
|   | | |   |     |-ImplicitCastExpr 0x7fffd83e6e80 <col:24, col:27> 'float' <LValueToRValue>
|   | | |   |     | `-MemberExpr 0x7fffd83e6e20 <col:24, col:27> 'float' lvalue ->ey 0x7fffd83e1b70
|   | | |   |     |   `-ImplicitCastExpr 0x7fffd83e6e08 <col:24> 'stbtt__active_edge *' <LValueToRValue>
|   | | |   |     |     `-DeclRefExpr 0x7fffd83e6de0 <col:24> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83e4d08 'e' 'stbtt__active_edge *'
|   | | |   |     `-ImplicitCastExpr 0x7fffd83e6e98 <col:32> 'float' <LValueToRValue>
|   | | |   |       `-DeclRefExpr 0x7fffd83e6e58 <col:32> 'float' lvalue ParmVar 0x7fffd83e4ee8 'y1' 'float'
|   | | |   `-ParenExpr 0x7fffd83e6fc8 <col:38, col:44> 'float'
|   | | |     `-BinaryOperator 0x7fffd83e6fa0 <col:39, col:42> 'float' '-'
|   | | |       |-ImplicitCastExpr 0x7fffd83e6f70 <col:39> 'float' <LValueToRValue>
|   | | |       | `-DeclRefExpr 0x7fffd83e6f20 <col:39> 'float' lvalue ParmVar 0x7fffd83e4ee8 'y1' 'float'
|   | | |       `-ImplicitCastExpr 0x7fffd83e6f88 <col:42> 'float' <LValueToRValue>
|   | | |         `-DeclRefExpr 0x7fffd83e6f48 <col:42> 'float' lvalue ParmVar 0x7fffd83e4df8 'y0' 'float'
|   | | `-BinaryOperator 0x7fffd83e7100 <line:3054:7, col:15> 'float' '='
|   | |   |-DeclRefExpr 0x7fffd83e7048 <col:7> 'float' lvalue ParmVar 0x7fffd83e4ee8 'y1' 'float'
|   | |   `-ImplicitCastExpr 0x7fffd83e70e8 <col:12, col:15> 'float' <LValueToRValue>
|   | |     `-MemberExpr 0x7fffd83e70b0 <col:12, col:15> 'float' lvalue ->ey 0x7fffd83e1b70
|   | |       `-ImplicitCastExpr 0x7fffd83e7098 <col:12> 'stbtt__active_edge *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x7fffd83e7070 <col:12> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83e4d08 'e' 'stbtt__active_edge *'
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd83e9740 <line:3057:4, /usr/include/assert.h:113:7>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83e7218 <././stb/stb_truetype.h:3057:8, col:14> 'int' '=='
|   | | |-ImplicitCastExpr 0x7fffd83e71d0 <col:8> 'float' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd83e7180 <col:8> 'float' lvalue ParmVar 0x7fffd83e4d80 'x0' 'float'
|   | | `-ImplicitCastExpr 0x7fffd83e7200 <col:14> 'float' <IntegralToFloating>
|   | |   `-ImplicitCastExpr 0x7fffd83e71e8 <col:14> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x7fffd83e71a8 <col:14> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|   | |-ParenExpr 0x7fffd83e78d0 </usr/include/assert.h:108:3, line:113:7> 'void'
|   | | `-BinaryOperator 0x7fffd83e78a8 <line:108:4, line:113:6> 'void' ','
|   | |   |-CStyleCastExpr 0x7fffd83e7428 <line:108:4, col:33> 'void' <ToVoid>
|   | |   | `-UnaryExprOrTypeTraitExpr 0x7fffd83e73f8 <col:11, col:33> 'unsigned long' sizeof
|   | |   |   `-ParenExpr 0x7fffd83e73d8 <col:18, col:33> 'int'
|   | |   |     `-ConditionalOperator 0x7fffd83e73a8 <col:19, col:32> 'int'
|   | |   |       |-ParenExpr 0x7fffd83e7348 <col:19, col:24> 'int'
|   | |   |       | `-BinaryOperator 0x7fffd83e7320 <././stb/stb_truetype.h:3058:20, col:28> 'int' '<='
|   | |   |       |   |-ImplicitCastExpr 0x7fffd83e72f0 <col:20> 'float' <LValueToRValue>
|   | |   |       |   | `-DeclRefExpr 0x7fffd83e7240 <col:20> 'float' lvalue ParmVar 0x7fffd83e4e70 'x1' 'float'
|   | |   |       |   `-ImplicitCastExpr 0x7fffd83e7308 <col:26, col:28> 'float' <IntegralToFloating>
|   | |   |       |     `-BinaryOperator 0x7fffd83e72c8 <col:26, col:28> 'int' '+'
|   | |   |       |       |-ImplicitCastExpr 0x7fffd83e72b0 <col:26> 'int' <LValueToRValue>
|   | |   |       |       | `-DeclRefExpr 0x7fffd83e7268 <col:26> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|   | |   |       |       `-IntegerLiteral 0x7fffd83e7290 <col:28> 'int' 1
|   | |   |       |-IntegerLiteral 0x7fffd83e7368 </usr/include/assert.h:108:28> 'int' 1
|   | |   |       `-IntegerLiteral 0x7fffd83e7388 <col:32> 'int' 0
|   | |   `-UnaryOperator 0x7fffd83e7888 <col:36, line:113:6> 'void' prefix '__extension__'
|   | |     `-StmtExpr 0x7fffd83e7868 <line:108:50, line:113:6> 'void'
|   | |       `-CompoundStmt 0x7fffd83e7850 <line:108:51, line:113:5>
|   | |         `-IfStmt 0x7fffd83e7818 <line:109:7, line:112:68>
|   | |           |-<<<NULL>>>
|   | |           |-<<<NULL>>>
|   | |           |-BinaryOperator 0x7fffd83e7530 <././stb/stb_truetype.h:3058:20, col:28> 'int' '<='
|   | |           | |-ImplicitCastExpr 0x7fffd83e7500 <col:20> 'float' <LValueToRValue>
|   | |           | | `-DeclRefExpr 0x7fffd83e7450 <col:20> 'float' lvalue ParmVar 0x7fffd83e4e70 'x1' 'float'
|   | |           | `-ImplicitCastExpr 0x7fffd83e7518 <col:26, col:28> 'float' <IntegralToFloating>
|   | |           |   `-BinaryOperator 0x7fffd83e74d8 <col:26, col:28> 'int' '+'
|   | |           |     |-ImplicitCastExpr 0x7fffd83e74c0 <col:26> 'int' <LValueToRValue>
|   | |           |     | `-DeclRefExpr 0x7fffd83e7478 <col:26> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|   | |           |     `-IntegerLiteral 0x7fffd83e74a0 <col:28> 'int' 1
|   | |           |-NullStmt 0x7fffd83e7558 </usr/include/assert.h:110:9>
|   | |           `-CallExpr 0x7fffd83e7740 <line:112:9, col:68> 'void'
|   | |             |-ImplicitCastExpr 0x7fffd83e7728 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   | |             | `-DeclRefExpr 0x7fffd83e7568 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   | |             |-ImplicitCastExpr 0x7fffd83e77a0 <<scratch space>:288:1> 'const char *' <BitCast>
|   | |             | `-ImplicitCastExpr 0x7fffd83e7788 <col:1> 'char *' <ArrayToPointerDecay>
|   | |             |   `-StringLiteral 0x7fffd83e75c8 <col:1> 'char [10]' lvalue "x1 <= x+1"
|   | |             |-ImplicitCastExpr 0x7fffd83e77d0 <line:289:1> 'const char *' <BitCast>
|   | |             | `-ImplicitCastExpr 0x7fffd83e77b8 <col:1> 'char *' <ArrayToPointerDecay>
|   | |             |   `-StringLiteral 0x7fffd83e7600 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   | |             |-ImplicitCastExpr 0x7fffd83e77e8 <line:290:1> 'unsigned int' <IntegralCast>
|   | |             | `-IntegerLiteral 0x7fffd83e7640 <col:1> 'int' 3058
|   | |             `-ImplicitCastExpr 0x7fffd83e7800 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   | |               `-UnaryOperator 0x7fffd83e7708 <col:30, col:44> 'const char [96]' lvalue prefix '__extension__'
|   | |                 `-PredefinedExpr 0x7fffd83e76e8 <col:44> 'const char [96]' lvalue __PRETTY_FUNCTION__
|   | |                   `-StringLiteral 0x7fffd83e7660 <col:44> 'const char [96]' lvalue "void stbtt__handle_clipped_edge(float *, int, stbtt__active_edge *, float, float, float, float)"
|   | `-IfStmt 0x7fffd83e9708 <././stb/stb_truetype.h:3059:9, /usr/include/assert.h:113:7>
|   |   |-<<<NULL>>>
|   |   |-<<<NULL>>>
|   |   |-BinaryOperator 0x7fffd83e79d0 <././stb/stb_truetype.h:3059:13, col:21> 'int' '=='
|   |   | |-ImplicitCastExpr 0x7fffd83e79a0 <col:13> 'float' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x7fffd83e78f0 <col:13> 'float' lvalue ParmVar 0x7fffd83e4d80 'x0' 'float'
|   |   | `-ImplicitCastExpr 0x7fffd83e79b8 <col:19, col:21> 'float' <IntegralToFloating>
|   |   |   `-BinaryOperator 0x7fffd83e7978 <col:19, col:21> 'int' '+'
|   |   |     |-ImplicitCastExpr 0x7fffd83e7960 <col:19> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x7fffd83e7918 <col:19> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|   |   |     `-IntegerLiteral 0x7fffd83e7940 <col:21> 'int' 1
|   |   |-ParenExpr 0x7fffd83e7fc8 </usr/include/assert.h:108:3, line:113:7> 'void'
|   |   | `-BinaryOperator 0x7fffd83e7fa0 <line:108:4, line:113:6> 'void' ','
|   |   |   |-CStyleCastExpr 0x7fffd83e7b98 <line:108:4, col:33> 'void' <ToVoid>
|   |   |   | `-UnaryExprOrTypeTraitExpr 0x7fffd83e7b68 <col:11, col:33> 'unsigned long' sizeof
|   |   |   |   `-ParenExpr 0x7fffd83e7b48 <col:18, col:33> 'int'
|   |   |   |     `-ConditionalOperator 0x7fffd83e7b18 <col:19, col:32> 'int'
|   |   |   |       |-ParenExpr 0x7fffd83e7ab8 <col:19, col:24> 'int'
|   |   |   |       | `-BinaryOperator 0x7fffd83e7a90 <././stb/stb_truetype.h:3060:20, col:26> 'int' '>='
|   |   |   |       |   |-ImplicitCastExpr 0x7fffd83e7a48 <col:20> 'float' <LValueToRValue>
|   |   |   |       |   | `-DeclRefExpr 0x7fffd83e79f8 <col:20> 'float' lvalue ParmVar 0x7fffd83e4e70 'x1' 'float'
|   |   |   |       |   `-ImplicitCastExpr 0x7fffd83e7a78 <col:26> 'float' <IntegralToFloating>
|   |   |   |       |     `-ImplicitCastExpr 0x7fffd83e7a60 <col:26> 'int' <LValueToRValue>
|   |   |   |       |       `-DeclRefExpr 0x7fffd83e7a20 <col:26> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|   |   |   |       |-IntegerLiteral 0x7fffd83e7ad8 </usr/include/assert.h:108:28> 'int' 1
|   |   |   |       `-IntegerLiteral 0x7fffd83e7af8 <col:32> 'int' 0
|   |   |   `-UnaryOperator 0x7fffd83e7f80 <col:36, line:113:6> 'void' prefix '__extension__'
|   |   |     `-StmtExpr 0x7fffd83e7f60 <line:108:50, line:113:6> 'void'
|   |   |       `-CompoundStmt 0x7fffd83e7f48 <line:108:51, line:113:5>
|   |   |         `-IfStmt 0x7fffd83e7f10 <line:109:7, line:112:68>
|   |   |           |-<<<NULL>>>
|   |   |           |-<<<NULL>>>
|   |   |           |-BinaryOperator 0x7fffd83e7c68 <././stb/stb_truetype.h:3060:20, col:26> 'int' '>='
|   |   |           | |-ImplicitCastExpr 0x7fffd83e7c10 <col:20> 'float' <LValueToRValue>
|   |   |           | | `-DeclRefExpr 0x7fffd83e7bc0 <col:20> 'float' lvalue ParmVar 0x7fffd83e4e70 'x1' 'float'
|   |   |           | `-ImplicitCastExpr 0x7fffd83e7c50 <col:26> 'float' <IntegralToFloating>
|   |   |           |   `-ImplicitCastExpr 0x7fffd83e7c28 <col:26> 'int' <LValueToRValue>
|   |   |           |     `-DeclRefExpr 0x7fffd83e7be8 <col:26> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|   |   |           |-NullStmt 0x7fffd83e7c90 </usr/include/assert.h:110:9>
|   |   |           `-CallExpr 0x7fffd83e7e38 <line:112:9, col:68> 'void'
|   |   |             |-ImplicitCastExpr 0x7fffd83e7e20 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |   |             | `-DeclRefExpr 0x7fffd83e7ca0 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |   |             |-ImplicitCastExpr 0x7fffd83e7e98 <<scratch space>:291:1> 'const char *' <BitCast>
|   |   |             | `-ImplicitCastExpr 0x7fffd83e7e80 <col:1> 'char *' <ArrayToPointerDecay>
|   |   |             |   `-StringLiteral 0x7fffd83e7cc8 <col:1> 'char [8]' lvalue "x1 >= x"
|   |   |             |-ImplicitCastExpr 0x7fffd83e7ec8 <line:292:1> 'const char *' <BitCast>
|   |   |             | `-ImplicitCastExpr 0x7fffd83e7eb0 <col:1> 'char *' <ArrayToPointerDecay>
|   |   |             |   `-StringLiteral 0x7fffd83e7cf8 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |   |             |-ImplicitCastExpr 0x7fffd83e7ee0 <line:293:1> 'unsigned int' <IntegralCast>
|   |   |             | `-IntegerLiteral 0x7fffd83e7d38 <col:1> 'int' 3060
|   |   |             `-ImplicitCastExpr 0x7fffd83e7ef8 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |   |               `-UnaryOperator 0x7fffd83e7e00 <col:30, col:44> 'const char [96]' lvalue prefix '__extension__'
|   |   |                 `-PredefinedExpr 0x7fffd83e7de0 <col:44> 'const char [96]' lvalue __PRETTY_FUNCTION__
|   |   |                   `-StringLiteral 0x7fffd83e7d58 <col:44> 'const char [96]' lvalue "void stbtt__handle_clipped_edge(float *, int, stbtt__active_edge *, float, float, float, float)"
|   |   `-IfStmt 0x7fffd83e96d0 <././stb/stb_truetype.h:3061:9, /usr/include/assert.h:113:7>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x7fffd83e8080 <././stb/stb_truetype.h:3061:13, col:19> 'int' '<='
|   |     | |-ImplicitCastExpr 0x7fffd83e8038 <col:13> 'float' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x7fffd83e7fe8 <col:13> 'float' lvalue ParmVar 0x7fffd83e4d80 'x0' 'float'
|   |     | `-ImplicitCastExpr 0x7fffd83e8068 <col:19> 'float' <IntegralToFloating>
|   |     |   `-ImplicitCastExpr 0x7fffd83e8050 <col:19> 'int' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x7fffd83e8010 <col:19> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|   |     |-ParenExpr 0x7fffd83e8668 </usr/include/assert.h:108:3, line:113:7> 'void'
|   |     | `-BinaryOperator 0x7fffd83e8640 <line:108:4, line:113:6> 'void' ','
|   |     |   |-CStyleCastExpr 0x7fffd83e8248 <line:108:4, col:33> 'void' <ToVoid>
|   |     |   | `-UnaryExprOrTypeTraitExpr 0x7fffd83e8218 <col:11, col:33> 'unsigned long' sizeof
|   |     |   |   `-ParenExpr 0x7fffd83e81f8 <col:18, col:33> 'int'
|   |     |   |     `-ConditionalOperator 0x7fffd83e81c8 <col:19, col:32> 'int'
|   |     |   |       |-ParenExpr 0x7fffd83e8168 <col:19, col:24> 'int'
|   |     |   |       | `-BinaryOperator 0x7fffd83e8140 <././stb/stb_truetype.h:3062:20, col:26> 'int' '<='
|   |     |   |       |   |-ImplicitCastExpr 0x7fffd83e80f8 <col:20> 'float' <LValueToRValue>
|   |     |   |       |   | `-DeclRefExpr 0x7fffd83e80a8 <col:20> 'float' lvalue ParmVar 0x7fffd83e4e70 'x1' 'float'
|   |     |   |       |   `-ImplicitCastExpr 0x7fffd83e8128 <col:26> 'float' <IntegralToFloating>
|   |     |   |       |     `-ImplicitCastExpr 0x7fffd83e8110 <col:26> 'int' <LValueToRValue>
|   |     |   |       |       `-DeclRefExpr 0x7fffd83e80d0 <col:26> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|   |     |   |       |-IntegerLiteral 0x7fffd83e8188 </usr/include/assert.h:108:28> 'int' 1
|   |     |   |       `-IntegerLiteral 0x7fffd83e81a8 <col:32> 'int' 0
|   |     |   `-UnaryOperator 0x7fffd83e8620 <col:36, line:113:6> 'void' prefix '__extension__'
|   |     |     `-StmtExpr 0x7fffd83e8600 <line:108:50, line:113:6> 'void'
|   |     |       `-CompoundStmt 0x7fffd83e85e8 <line:108:51, line:113:5>
|   |     |         `-IfStmt 0x7fffd83e85b0 <line:109:7, line:112:68>
|   |     |           |-<<<NULL>>>
|   |     |           |-<<<NULL>>>
|   |     |           |-BinaryOperator 0x7fffd83e8308 <././stb/stb_truetype.h:3062:20, col:26> 'int' '<='
|   |     |           | |-ImplicitCastExpr 0x7fffd83e82c0 <col:20> 'float' <LValueToRValue>
|   |     |           | | `-DeclRefExpr 0x7fffd83e8270 <col:20> 'float' lvalue ParmVar 0x7fffd83e4e70 'x1' 'float'
|   |     |           | `-ImplicitCastExpr 0x7fffd83e82f0 <col:26> 'float' <IntegralToFloating>
|   |     |           |   `-ImplicitCastExpr 0x7fffd83e82d8 <col:26> 'int' <LValueToRValue>
|   |     |           |     `-DeclRefExpr 0x7fffd83e8298 <col:26> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|   |     |           |-NullStmt 0x7fffd83e8330 </usr/include/assert.h:110:9>
|   |     |           `-CallExpr 0x7fffd83e84d8 <line:112:9, col:68> 'void'
|   |     |             |-ImplicitCastExpr 0x7fffd83e84c0 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |     |             | `-DeclRefExpr 0x7fffd83e8340 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |     |             |-ImplicitCastExpr 0x7fffd83e8538 <<scratch space>:294:1> 'const char *' <BitCast>
|   |     |             | `-ImplicitCastExpr 0x7fffd83e8520 <col:1> 'char *' <ArrayToPointerDecay>
|   |     |             |   `-StringLiteral 0x7fffd83e8368 <col:1> 'char [8]' lvalue "x1 <= x"
|   |     |             |-ImplicitCastExpr 0x7fffd83e8568 <line:295:1> 'const char *' <BitCast>
|   |     |             | `-ImplicitCastExpr 0x7fffd83e8550 <col:1> 'char *' <ArrayToPointerDecay>
|   |     |             |   `-StringLiteral 0x7fffd83e8398 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |     |             |-ImplicitCastExpr 0x7fffd83e8580 <line:296:1> 'unsigned int' <IntegralCast>
|   |     |             | `-IntegerLiteral 0x7fffd83e83d8 <col:1> 'int' 3062
|   |     |             `-ImplicitCastExpr 0x7fffd83e8598 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |     |               `-UnaryOperator 0x7fffd83e84a0 <col:30, col:44> 'const char [96]' lvalue prefix '__extension__'
|   |     |                 `-PredefinedExpr 0x7fffd83e8480 <col:44> 'const char [96]' lvalue __PRETTY_FUNCTION__
|   |     |                   `-StringLiteral 0x7fffd83e83f8 <col:44> 'const char [96]' lvalue "void stbtt__handle_clipped_edge(float *, int, stbtt__active_edge *, float, float, float, float)"
|   |     `-IfStmt 0x7fffd83e9698 <././stb/stb_truetype.h:3063:9, /usr/include/assert.h:113:7>
|   |       |-<<<NULL>>>
|   |       |-<<<NULL>>>
|   |       |-BinaryOperator 0x7fffd83e8768 <././stb/stb_truetype.h:3063:13, col:21> 'int' '>='
|   |       | |-ImplicitCastExpr 0x7fffd83e8738 <col:13> 'float' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x7fffd83e8688 <col:13> 'float' lvalue ParmVar 0x7fffd83e4d80 'x0' 'float'
|   |       | `-ImplicitCastExpr 0x7fffd83e8750 <col:19, col:21> 'float' <IntegralToFloating>
|   |       |   `-BinaryOperator 0x7fffd83e8710 <col:19, col:21> 'int' '+'
|   |       |     |-ImplicitCastExpr 0x7fffd83e86f8 <col:19> 'int' <LValueToRValue>
|   |       |     | `-DeclRefExpr 0x7fffd83e86b0 <col:19> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|   |       |     `-IntegerLiteral 0x7fffd83e86d8 <col:21> 'int' 1
|   |       |-ParenExpr 0x7fffd83e8de8 </usr/include/assert.h:108:3, line:113:7> 'void'
|   |       | `-BinaryOperator 0x7fffd83e8dc0 <line:108:4, line:113:6> 'void' ','
|   |       |   |-CStyleCastExpr 0x7fffd83e8978 <line:108:4, col:33> 'void' <ToVoid>
|   |       |   | `-UnaryExprOrTypeTraitExpr 0x7fffd83e8948 <col:11, col:33> 'unsigned long' sizeof
|   |       |   |   `-ParenExpr 0x7fffd83e8928 <col:18, col:33> 'int'
|   |       |   |     `-ConditionalOperator 0x7fffd83e88f8 <col:19, col:32> 'int'
|   |       |   |       |-ParenExpr 0x7fffd83e8898 <col:19, col:24> 'int'
|   |       |   |       | `-BinaryOperator 0x7fffd83e8870 <././stb/stb_truetype.h:3064:20, col:28> 'int' '>='
|   |       |   |       |   |-ImplicitCastExpr 0x7fffd83e8840 <col:20> 'float' <LValueToRValue>
|   |       |   |       |   | `-DeclRefExpr 0x7fffd83e8790 <col:20> 'float' lvalue ParmVar 0x7fffd83e4e70 'x1' 'float'
|   |       |   |       |   `-ImplicitCastExpr 0x7fffd83e8858 <col:26, col:28> 'float' <IntegralToFloating>
|   |       |   |       |     `-BinaryOperator 0x7fffd83e8818 <col:26, col:28> 'int' '+'
|   |       |   |       |       |-ImplicitCastExpr 0x7fffd83e8800 <col:26> 'int' <LValueToRValue>
|   |       |   |       |       | `-DeclRefExpr 0x7fffd83e87b8 <col:26> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|   |       |   |       |       `-IntegerLiteral 0x7fffd83e87e0 <col:28> 'int' 1
|   |       |   |       |-IntegerLiteral 0x7fffd83e88b8 </usr/include/assert.h:108:28> 'int' 1
|   |       |   |       `-IntegerLiteral 0x7fffd83e88d8 <col:32> 'int' 0
|   |       |   `-UnaryOperator 0x7fffd83e8da0 <col:36, line:113:6> 'void' prefix '__extension__'
|   |       |     `-StmtExpr 0x7fffd83e8d80 <line:108:50, line:113:6> 'void'
|   |       |       `-CompoundStmt 0x7fffd83e8d68 <line:108:51, line:113:5>
|   |       |         `-IfStmt 0x7fffd83e8d30 <line:109:7, line:112:68>
|   |       |           |-<<<NULL>>>
|   |       |           |-<<<NULL>>>
|   |       |           |-BinaryOperator 0x7fffd83e8a80 <././stb/stb_truetype.h:3064:20, col:28> 'int' '>='
|   |       |           | |-ImplicitCastExpr 0x7fffd83e8a50 <col:20> 'float' <LValueToRValue>
|   |       |           | | `-DeclRefExpr 0x7fffd83e89a0 <col:20> 'float' lvalue ParmVar 0x7fffd83e4e70 'x1' 'float'
|   |       |           | `-ImplicitCastExpr 0x7fffd83e8a68 <col:26, col:28> 'float' <IntegralToFloating>
|   |       |           |   `-BinaryOperator 0x7fffd83e8a28 <col:26, col:28> 'int' '+'
|   |       |           |     |-ImplicitCastExpr 0x7fffd83e8a10 <col:26> 'int' <LValueToRValue>
|   |       |           |     | `-DeclRefExpr 0x7fffd83e89c8 <col:26> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|   |       |           |     `-IntegerLiteral 0x7fffd83e89f0 <col:28> 'int' 1
|   |       |           |-NullStmt 0x7fffd83e8aa8 </usr/include/assert.h:110:9>
|   |       |           `-CallExpr 0x7fffd83e8c58 <line:112:9, col:68> 'void'
|   |       |             |-ImplicitCastExpr 0x7fffd83e8c40 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |       |             | `-DeclRefExpr 0x7fffd83e8ab8 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |       |             |-ImplicitCastExpr 0x7fffd83e8cb8 <<scratch space>:297:1> 'const char *' <BitCast>
|   |       |             | `-ImplicitCastExpr 0x7fffd83e8ca0 <col:1> 'char *' <ArrayToPointerDecay>
|   |       |             |   `-StringLiteral 0x7fffd83e8ae0 <col:1> 'char [10]' lvalue "x1 >= x+1"
|   |       |             |-ImplicitCastExpr 0x7fffd83e8ce8 <line:298:1> 'const char *' <BitCast>
|   |       |             | `-ImplicitCastExpr 0x7fffd83e8cd0 <col:1> 'char *' <ArrayToPointerDecay>
|   |       |             |   `-StringLiteral 0x7fffd83e8b18 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |       |             |-ImplicitCastExpr 0x7fffd83e8d00 <line:299:1> 'unsigned int' <IntegralCast>
|   |       |             | `-IntegerLiteral 0x7fffd83e8b58 <col:1> 'int' 3064
|   |       |             `-ImplicitCastExpr 0x7fffd83e8d18 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |       |               `-UnaryOperator 0x7fffd83e8c20 <col:30, col:44> 'const char [96]' lvalue prefix '__extension__'
|   |       |                 `-PredefinedExpr 0x7fffd83e8c00 <col:44> 'const char [96]' lvalue __PRETTY_FUNCTION__
|   |       |                   `-StringLiteral 0x7fffd83e8b78 <col:44> 'const char [96]' lvalue "void stbtt__handle_clipped_edge(float *, int, stbtt__active_edge *, float, float, float, float)"
|   |       `-ParenExpr 0x7fffd83e9678 <line:108:3, line:113:7> 'void'
|   |         `-BinaryOperator 0x7fffd83e9650 <line:108:4, line:113:6> 'void' ','
|   |           |-CStyleCastExpr 0x7fffd83e90d8 <line:108:4, col:33> 'void' <ToVoid>
|   |           | `-UnaryExprOrTypeTraitExpr 0x7fffd83e90a8 <col:11, col:33> 'unsigned long' sizeof
|   |           |   `-ParenExpr 0x7fffd83e9088 <col:18, col:33> 'int'
|   |           |     `-ConditionalOperator 0x7fffd83e9058 <col:19, col:32> 'int'
|   |           |       |-ParenExpr 0x7fffd83e8ff8 <col:19, col:24> 'int'
|   |           |       | `-BinaryOperator 0x7fffd83e8fd0 <././stb/stb_truetype.h:3066:20, col:39> 'int' '&&'
|   |           |       |   |-BinaryOperator 0x7fffd83e8ea0 <col:20, col:26> 'int' '>='
|   |           |       |   | |-ImplicitCastExpr 0x7fffd83e8e58 <col:20> 'float' <LValueToRValue>
|   |           |       |   | | `-DeclRefExpr 0x7fffd83e8e08 <col:20> 'float' lvalue ParmVar 0x7fffd83e4e70 'x1' 'float'
|   |           |       |   | `-ImplicitCastExpr 0x7fffd83e8e88 <col:26> 'float' <IntegralToFloating>
|   |           |       |   |   `-ImplicitCastExpr 0x7fffd83e8e70 <col:26> 'int' <LValueToRValue>
|   |           |       |   |     `-DeclRefExpr 0x7fffd83e8e30 <col:26> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|   |           |       |   `-BinaryOperator 0x7fffd83e8fa8 <col:31, col:39> 'int' '<='
|   |           |       |     |-ImplicitCastExpr 0x7fffd83e8f78 <col:31> 'float' <LValueToRValue>
|   |           |       |     | `-DeclRefExpr 0x7fffd83e8ec8 <col:31> 'float' lvalue ParmVar 0x7fffd83e4e70 'x1' 'float'
|   |           |       |     `-ImplicitCastExpr 0x7fffd83e8f90 <col:37, col:39> 'float' <IntegralToFloating>
|   |           |       |       `-BinaryOperator 0x7fffd83e8f50 <col:37, col:39> 'int' '+'
|   |           |       |         |-ImplicitCastExpr 0x7fffd83e8f38 <col:37> 'int' <LValueToRValue>
|   |           |       |         | `-DeclRefExpr 0x7fffd83e8ef0 <col:37> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|   |           |       |         `-IntegerLiteral 0x7fffd83e8f18 <col:39> 'int' 1
|   |           |       |-IntegerLiteral 0x7fffd83e9018 </usr/include/assert.h:108:28> 'int' 1
|   |           |       `-IntegerLiteral 0x7fffd83e9038 <col:32> 'int' 0
|   |           `-UnaryOperator 0x7fffd83e9630 <col:36, line:113:6> 'void' prefix '__extension__'
|   |             `-StmtExpr 0x7fffd83e9610 <line:108:50, line:113:6> 'void'
|   |               `-CompoundStmt 0x7fffd83e95f8 <line:108:51, line:113:5>
|   |                 `-IfStmt 0x7fffd83e95c0 <line:109:7, line:112:68>
|   |                   |-<<<NULL>>>
|   |                   |-<<<NULL>>>
|   |                   |-BinaryOperator 0x7fffd83e92c8 <././stb/stb_truetype.h:3066:20, col:39> 'int' '&&'
|   |                   | |-BinaryOperator 0x7fffd83e9198 <col:20, col:26> 'int' '>='
|   |                   | | |-ImplicitCastExpr 0x7fffd83e9150 <col:20> 'float' <LValueToRValue>
|   |                   | | | `-DeclRefExpr 0x7fffd83e9100 <col:20> 'float' lvalue ParmVar 0x7fffd83e4e70 'x1' 'float'
|   |                   | | `-ImplicitCastExpr 0x7fffd83e9180 <col:26> 'float' <IntegralToFloating>
|   |                   | |   `-ImplicitCastExpr 0x7fffd83e9168 <col:26> 'int' <LValueToRValue>
|   |                   | |     `-DeclRefExpr 0x7fffd83e9128 <col:26> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|   |                   | `-BinaryOperator 0x7fffd83e92a0 <col:31, col:39> 'int' '<='
|   |                   |   |-ImplicitCastExpr 0x7fffd83e9270 <col:31> 'float' <LValueToRValue>
|   |                   |   | `-DeclRefExpr 0x7fffd83e91c0 <col:31> 'float' lvalue ParmVar 0x7fffd83e4e70 'x1' 'float'
|   |                   |   `-ImplicitCastExpr 0x7fffd83e9288 <col:37, col:39> 'float' <IntegralToFloating>
|   |                   |     `-BinaryOperator 0x7fffd83e9248 <col:37, col:39> 'int' '+'
|   |                   |       |-ImplicitCastExpr 0x7fffd83e9230 <col:37> 'int' <LValueToRValue>
|   |                   |       | `-DeclRefExpr 0x7fffd83e91e8 <col:37> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|   |                   |       `-IntegerLiteral 0x7fffd83e9210 <col:39> 'int' 1
|   |                   |-NullStmt 0x7fffd83e92f0 </usr/include/assert.h:110:9>
|   |                   `-CallExpr 0x7fffd83e94e8 <line:112:9, col:68> 'void'
|   |                     |-ImplicitCastExpr 0x7fffd83e94d0 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |                     | `-DeclRefExpr 0x7fffd83e9300 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |                     |-ImplicitCastExpr 0x7fffd83e9548 <<scratch space>:300:1> 'const char *' <BitCast>
|   |                     | `-ImplicitCastExpr 0x7fffd83e9530 <col:1> 'char *' <ArrayToPointerDecay>
|   |                     |   `-StringLiteral 0x7fffd83e9368 <col:1> 'char [21]' lvalue "x1 >= x && x1 <= x+1"
|   |                     |-ImplicitCastExpr 0x7fffd83e9578 <line:301:1> 'const char *' <BitCast>
|   |                     | `-ImplicitCastExpr 0x7fffd83e9560 <col:1> 'char *' <ArrayToPointerDecay>
|   |                     |   `-StringLiteral 0x7fffd83e93a8 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |                     |-ImplicitCastExpr 0x7fffd83e9590 <line:302:1> 'unsigned int' <IntegralCast>
|   |                     | `-IntegerLiteral 0x7fffd83e93e8 <col:1> 'int' 3066
|   |                     `-ImplicitCastExpr 0x7fffd83e95a8 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |                       `-UnaryOperator 0x7fffd83e94b0 <col:30, col:44> 'const char [96]' lvalue prefix '__extension__'
|   |                         `-PredefinedExpr 0x7fffd83e9490 <col:44> 'const char [96]' lvalue __PRETTY_FUNCTION__
|   |                           `-StringLiteral 0x7fffd83e9408 <col:44> 'const char [96]' lvalue "void stbtt__handle_clipped_edge(float *, int, stbtt__active_edge *, float, float, float, float)"
|   `-IfStmt 0x7fffd83eb078 <././stb/stb_truetype.h:3068:4, line:3075:4>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fffd83e98f8 <line:3068:8, col:25> 'int' '&&'
|     | |-BinaryOperator 0x7fffd83e9810 <col:8, col:14> 'int' '<='
|     | | |-ImplicitCastExpr 0x7fffd83e97c8 <col:8> 'float' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd83e9778 <col:8> 'float' lvalue ParmVar 0x7fffd83e4d80 'x0' 'float'
|     | | `-ImplicitCastExpr 0x7fffd83e97f8 <col:14> 'float' <IntegralToFloating>
|     | |   `-ImplicitCastExpr 0x7fffd83e97e0 <col:14> 'int' <LValueToRValue>
|     | |     `-DeclRefExpr 0x7fffd83e97a0 <col:14> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|     | `-BinaryOperator 0x7fffd83e98d0 <col:19, col:25> 'int' '<='
|     |   |-ImplicitCastExpr 0x7fffd83e9888 <col:19> 'float' <LValueToRValue>
|     |   | `-DeclRefExpr 0x7fffd83e9838 <col:19> 'float' lvalue ParmVar 0x7fffd83e4e70 'x1' 'float'
|     |   `-ImplicitCastExpr 0x7fffd83e98b8 <col:25> 'float' <IntegralToFloating>
|     |     `-ImplicitCastExpr 0x7fffd83e98a0 <col:25> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x7fffd83e9860 <col:25> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|     |-CompoundAssignOperator 0x7fffd83e9b48 <line:3069:7, col:43> 'float' '+=' ComputeLHSTy='float' ComputeResultTy='float'
|     | |-ArraySubscriptExpr 0x7fffd83e99a0 <col:7, col:17> 'float' lvalue
|     | | |-ImplicitCastExpr 0x7fffd83e9970 <col:7> 'float *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd83e9920 <col:7> 'float *' lvalue ParmVar 0x7fffd83e4c20 'scanline' 'float *'
|     | | `-ImplicitCastExpr 0x7fffd83e9988 <col:16> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x7fffd83e9948 <col:16> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|     | `-BinaryOperator 0x7fffd83e9b20 <col:22, col:43> 'float' '*'
|     |   |-ImplicitCastExpr 0x7fffd83e9b08 <col:22, col:25> 'float' <LValueToRValue>
|     |   | `-MemberExpr 0x7fffd83e9a08 <col:22, col:25> 'float' lvalue ->direction 0x7fffd83e1ab0
|     |   |   `-ImplicitCastExpr 0x7fffd83e99f0 <col:22> 'stbtt__active_edge *' <LValueToRValue>
|     |   |     `-DeclRefExpr 0x7fffd83e99c8 <col:22> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83e4d08 'e' 'stbtt__active_edge *'
|     |   `-ParenExpr 0x7fffd83e9ae8 <col:37, col:43> 'float'
|     |     `-BinaryOperator 0x7fffd83e9ac0 <col:38, col:41> 'float' '-'
|     |       |-ImplicitCastExpr 0x7fffd83e9a90 <col:38> 'float' <LValueToRValue>
|     |       | `-DeclRefExpr 0x7fffd83e9a40 <col:38> 'float' lvalue ParmVar 0x7fffd83e4ee8 'y1' 'float'
|     |       `-ImplicitCastExpr 0x7fffd83e9aa8 <col:41> 'float' <LValueToRValue>
|     |         `-DeclRefExpr 0x7fffd83e9a68 <col:41> 'float' lvalue ParmVar 0x7fffd83e4df8 'y0' 'float'
|     `-IfStmt 0x7fffd83eb040 <line:3070:9, line:3075:4>
|       |-<<<NULL>>>
|       |-<<<NULL>>>
|       |-BinaryOperator 0x7fffd83e9da8 <line:3070:13, col:34> 'int' '&&'
|       | |-BinaryOperator 0x7fffd83e9c78 <col:13, col:21> 'int' '>='
|       | | |-ImplicitCastExpr 0x7fffd83e9c30 <col:13> 'float' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fffd83e9b80 <col:13> 'float' lvalue ParmVar 0x7fffd83e4d80 'x0' 'float'
|       | | `-ImplicitCastExpr 0x7fffd83e9c60 <col:19, col:21> 'float' <IntegralToFloating>
|       | |   `-BinaryOperator 0x7fffd83e9c08 <col:19, col:21> 'int' '+'
|       | |     |-ImplicitCastExpr 0x7fffd83e9bf0 <col:19> 'int' <LValueToRValue>
|       | |     | `-DeclRefExpr 0x7fffd83e9ba8 <col:19> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|       | |     `-IntegerLiteral 0x7fffd83e9bd0 <col:21> 'int' 1
|       | `-BinaryOperator 0x7fffd83e9d80 <col:26, col:34> 'int' '>='
|       |   |-ImplicitCastExpr 0x7fffd83e9d50 <col:26> 'float' <LValueToRValue>
|       |   | `-DeclRefExpr 0x7fffd83e9ca0 <col:26> 'float' lvalue ParmVar 0x7fffd83e4e70 'x1' 'float'
|       |   `-ImplicitCastExpr 0x7fffd83e9d68 <col:32, col:34> 'float' <IntegralToFloating>
|       |     `-BinaryOperator 0x7fffd83e9d28 <col:32, col:34> 'int' '+'
|       |       |-ImplicitCastExpr 0x7fffd83e9d10 <col:32> 'int' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7fffd83e9cc8 <col:32> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|       |       `-IntegerLiteral 0x7fffd83e9cf0 <col:34> 'int' 1
|       |-NullStmt 0x7fffd83e9dd0 <line:3071:7>
|       `-CompoundStmt 0x7fffd83eb020 <line:3072:9, line:3075:4>
|         |-ParenExpr 0x7fffd83eaa90 </usr/include/assert.h:108:3, line:113:7> 'void'
|         | `-BinaryOperator 0x7fffd83eaa68 <line:108:4, line:113:6> 'void' ','
|         |   |-CStyleCastExpr 0x7fffd83ea2c8 <line:108:4, col:33> 'void' <ToVoid>
|         |   | `-UnaryExprOrTypeTraitExpr 0x7fffd83ea298 <col:11, col:33> 'unsigned long' sizeof
|         |   |   `-ParenExpr 0x7fffd83ea278 <col:18, col:33> 'int'
|         |   |     `-ConditionalOperator 0x7fffd83ea248 <col:19, col:32> 'int'
|         |   |       |-ParenExpr 0x7fffd83ea1e8 <col:19, col:24> 'int'
|         |   |       | `-BinaryOperator 0x7fffd83ea1c0 <././stb/stb_truetype.h:3073:20, col:63> 'int' '&&'
|         |   |       |   |-BinaryOperator 0x7fffd83ea090 <col:20, col:50> 'int' '&&'
|         |   |       |   | |-BinaryOperator 0x7fffd83e9fa8 <col:20, col:39> 'int' '&&'
|         |   |       |   | | |-BinaryOperator 0x7fffd83e9e78 <col:20, col:26> 'int' '>='
|         |   |       |   | | | |-ImplicitCastExpr 0x7fffd83e9e30 <col:20> 'float' <LValueToRValue>
|         |   |       |   | | | | `-DeclRefExpr 0x7fffd83e9de0 <col:20> 'float' lvalue ParmVar 0x7fffd83e4d80 'x0' 'float'
|         |   |       |   | | | `-ImplicitCastExpr 0x7fffd83e9e60 <col:26> 'float' <IntegralToFloating>
|         |   |       |   | | |   `-ImplicitCastExpr 0x7fffd83e9e48 <col:26> 'int' <LValueToRValue>
|         |   |       |   | | |     `-DeclRefExpr 0x7fffd83e9e08 <col:26> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|         |   |       |   | | `-BinaryOperator 0x7fffd83e9f80 <col:31, col:39> 'int' '<='
|         |   |       |   | |   |-ImplicitCastExpr 0x7fffd83e9f50 <col:31> 'float' <LValueToRValue>
|         |   |       |   | |   | `-DeclRefExpr 0x7fffd83e9ea0 <col:31> 'float' lvalue ParmVar 0x7fffd83e4d80 'x0' 'float'
|         |   |       |   | |   `-ImplicitCastExpr 0x7fffd83e9f68 <col:37, col:39> 'float' <IntegralToFloating>
|         |   |       |   | |     `-BinaryOperator 0x7fffd83e9f28 <col:37, col:39> 'int' '+'
|         |   |       |   | |       |-ImplicitCastExpr 0x7fffd83e9f10 <col:37> 'int' <LValueToRValue>
|         |   |       |   | |       | `-DeclRefExpr 0x7fffd83e9ec8 <col:37> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|         |   |       |   | |       `-IntegerLiteral 0x7fffd83e9ef0 <col:39> 'int' 1
|         |   |       |   | `-BinaryOperator 0x7fffd83ea068 <col:44, col:50> 'int' '>='
|         |   |       |   |   |-ImplicitCastExpr 0x7fffd83ea020 <col:44> 'float' <LValueToRValue>
|         |   |       |   |   | `-DeclRefExpr 0x7fffd83e9fd0 <col:44> 'float' lvalue ParmVar 0x7fffd83e4e70 'x1' 'float'
|         |   |       |   |   `-ImplicitCastExpr 0x7fffd83ea050 <col:50> 'float' <IntegralToFloating>
|         |   |       |   |     `-ImplicitCastExpr 0x7fffd83ea038 <col:50> 'int' <LValueToRValue>
|         |   |       |   |       `-DeclRefExpr 0x7fffd83e9ff8 <col:50> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|         |   |       |   `-BinaryOperator 0x7fffd83ea198 <col:55, col:63> 'int' '<='
|         |   |       |     |-ImplicitCastExpr 0x7fffd83ea168 <col:55> 'float' <LValueToRValue>
|         |   |       |     | `-DeclRefExpr 0x7fffd83ea0b8 <col:55> 'float' lvalue ParmVar 0x7fffd83e4e70 'x1' 'float'
|         |   |       |     `-ImplicitCastExpr 0x7fffd83ea180 <col:61, col:63> 'float' <IntegralToFloating>
|         |   |       |       `-BinaryOperator 0x7fffd83ea140 <col:61, col:63> 'int' '+'
|         |   |       |         |-ImplicitCastExpr 0x7fffd83ea128 <col:61> 'int' <LValueToRValue>
|         |   |       |         | `-DeclRefExpr 0x7fffd83ea0e0 <col:61> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|         |   |       |         `-IntegerLiteral 0x7fffd83ea108 <col:63> 'int' 1
|         |   |       |-IntegerLiteral 0x7fffd83ea208 </usr/include/assert.h:108:28> 'int' 1
|         |   |       `-IntegerLiteral 0x7fffd83ea228 <col:32> 'int' 0
|         |   `-UnaryOperator 0x7fffd83eaa48 <col:36, line:113:6> 'void' prefix '__extension__'
|         |     `-StmtExpr 0x7fffd83eaa28 <line:108:50, line:113:6> 'void'
|         |       `-CompoundStmt 0x7fffd83eaa10 <line:108:51, line:113:5>
|         |         `-IfStmt 0x7fffd83ea9d8 <line:109:7, line:112:68>
|         |           |-<<<NULL>>>
|         |           |-<<<NULL>>>
|         |           |-BinaryOperator 0x7fffd83ea6d0 <././stb/stb_truetype.h:3073:20, col:63> 'int' '&&'
|         |           | |-BinaryOperator 0x7fffd83ea5a0 <col:20, col:50> 'int' '&&'
|         |           | | |-BinaryOperator 0x7fffd83ea4b8 <col:20, col:39> 'int' '&&'
|         |           | | | |-BinaryOperator 0x7fffd83ea388 <col:20, col:26> 'int' '>='
|         |           | | | | |-ImplicitCastExpr 0x7fffd83ea340 <col:20> 'float' <LValueToRValue>
|         |           | | | | | `-DeclRefExpr 0x7fffd83ea2f0 <col:20> 'float' lvalue ParmVar 0x7fffd83e4d80 'x0' 'float'
|         |           | | | | `-ImplicitCastExpr 0x7fffd83ea370 <col:26> 'float' <IntegralToFloating>
|         |           | | | |   `-ImplicitCastExpr 0x7fffd83ea358 <col:26> 'int' <LValueToRValue>
|         |           | | | |     `-DeclRefExpr 0x7fffd83ea318 <col:26> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|         |           | | | `-BinaryOperator 0x7fffd83ea490 <col:31, col:39> 'int' '<='
|         |           | | |   |-ImplicitCastExpr 0x7fffd83ea460 <col:31> 'float' <LValueToRValue>
|         |           | | |   | `-DeclRefExpr 0x7fffd83ea3b0 <col:31> 'float' lvalue ParmVar 0x7fffd83e4d80 'x0' 'float'
|         |           | | |   `-ImplicitCastExpr 0x7fffd83ea478 <col:37, col:39> 'float' <IntegralToFloating>
|         |           | | |     `-BinaryOperator 0x7fffd83ea438 <col:37, col:39> 'int' '+'
|         |           | | |       |-ImplicitCastExpr 0x7fffd83ea420 <col:37> 'int' <LValueToRValue>
|         |           | | |       | `-DeclRefExpr 0x7fffd83ea3d8 <col:37> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|         |           | | |       `-IntegerLiteral 0x7fffd83ea400 <col:39> 'int' 1
|         |           | | `-BinaryOperator 0x7fffd83ea578 <col:44, col:50> 'int' '>='
|         |           | |   |-ImplicitCastExpr 0x7fffd83ea530 <col:44> 'float' <LValueToRValue>
|         |           | |   | `-DeclRefExpr 0x7fffd83ea4e0 <col:44> 'float' lvalue ParmVar 0x7fffd83e4e70 'x1' 'float'
|         |           | |   `-ImplicitCastExpr 0x7fffd83ea560 <col:50> 'float' <IntegralToFloating>
|         |           | |     `-ImplicitCastExpr 0x7fffd83ea548 <col:50> 'int' <LValueToRValue>
|         |           | |       `-DeclRefExpr 0x7fffd83ea508 <col:50> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|         |           | `-BinaryOperator 0x7fffd83ea6a8 <col:55, col:63> 'int' '<='
|         |           |   |-ImplicitCastExpr 0x7fffd83ea678 <col:55> 'float' <LValueToRValue>
|         |           |   | `-DeclRefExpr 0x7fffd83ea5c8 <col:55> 'float' lvalue ParmVar 0x7fffd83e4e70 'x1' 'float'
|         |           |   `-ImplicitCastExpr 0x7fffd83ea690 <col:61, col:63> 'float' <IntegralToFloating>
|         |           |     `-BinaryOperator 0x7fffd83ea650 <col:61, col:63> 'int' '+'
|         |           |       |-ImplicitCastExpr 0x7fffd83ea638 <col:61> 'int' <LValueToRValue>
|         |           |       | `-DeclRefExpr 0x7fffd83ea5f0 <col:61> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|         |           |       `-IntegerLiteral 0x7fffd83ea618 <col:63> 'int' 1
|         |           |-NullStmt 0x7fffd83ea6f8 </usr/include/assert.h:110:9>
|         |           `-CallExpr 0x7fffd83ea900 <line:112:9, col:68> 'void'
|         |             |-ImplicitCastExpr 0x7fffd83ea8e8 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|         |             | `-DeclRefExpr 0x7fffd83ea708 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|         |             |-ImplicitCastExpr 0x7fffd83ea960 <<scratch space>:303:1> 'const char *' <BitCast>
|         |             | `-ImplicitCastExpr 0x7fffd83ea948 <col:1> 'char *' <ArrayToPointerDecay>
|         |             |   `-StringLiteral 0x7fffd83ea768 <col:1> 'char [45]' lvalue "x0 >= x && x0 <= x+1 && x1 >= x && x1 <= x+1"
|         |             |-ImplicitCastExpr 0x7fffd83ea990 <line:2:1> 'const char *' <BitCast>
|         |             | `-ImplicitCastExpr 0x7fffd83ea978 <col:1> 'char *' <ArrayToPointerDecay>
|         |             |   `-StringLiteral 0x7fffd83ea7c0 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|         |             |-ImplicitCastExpr 0x7fffd83ea9a8 <line:3:1> 'unsigned int' <IntegralCast>
|         |             | `-IntegerLiteral 0x7fffd83ea800 <col:1> 'int' 3073
|         |             `-ImplicitCastExpr 0x7fffd83ea9c0 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|         |               `-UnaryOperator 0x7fffd83ea8c8 <col:30, col:44> 'const char [96]' lvalue prefix '__extension__'
|         |                 `-PredefinedExpr 0x7fffd83ea8a8 <col:44> 'const char [96]' lvalue __PRETTY_FUNCTION__
|         |                   `-StringLiteral 0x7fffd83ea820 <col:44> 'const char [96]' lvalue "void stbtt__handle_clipped_edge(float *, int, stbtt__active_edge *, float, float, float, float)"
|         `-CompoundAssignOperator 0x7fffd83eafe8 <././stb/stb_truetype.h:3074:7, col:67> 'float' '+=' ComputeLHSTy='float' ComputeResultTy='float'
|           |-ArraySubscriptExpr 0x7fffd83eab30 <col:7, col:17> 'float' lvalue
|           | |-ImplicitCastExpr 0x7fffd83eab00 <col:7> 'float *' <LValueToRValue>
|           | | `-DeclRefExpr 0x7fffd83eaab0 <col:7> 'float *' lvalue ParmVar 0x7fffd83e4c20 'scanline' 'float *'
|           | `-ImplicitCastExpr 0x7fffd83eab18 <col:16> 'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x7fffd83eaad8 <col:16> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|           `-BinaryOperator 0x7fffd83eafc0 <col:22, col:67> 'float' '*'
|             |-BinaryOperator 0x7fffd83eacb0 <col:22, col:43> 'float' '*'
|             | |-ImplicitCastExpr 0x7fffd83eac98 <col:22, col:25> 'float' <LValueToRValue>
|             | | `-MemberExpr 0x7fffd83eab98 <col:22, col:25> 'float' lvalue ->direction 0x7fffd83e1ab0
|             | |   `-ImplicitCastExpr 0x7fffd83eab80 <col:22> 'stbtt__active_edge *' <LValueToRValue>
|             | |     `-DeclRefExpr 0x7fffd83eab58 <col:22> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83e4d08 'e' 'stbtt__active_edge *'
|             | `-ParenExpr 0x7fffd83eac78 <col:37, col:43> 'float'
|             |   `-BinaryOperator 0x7fffd83eac50 <col:38, col:41> 'float' '-'
|             |     |-ImplicitCastExpr 0x7fffd83eac20 <col:38> 'float' <LValueToRValue>
|             |     | `-DeclRefExpr 0x7fffd83eabd0 <col:38> 'float' lvalue ParmVar 0x7fffd83e4ee8 'y1' 'float'
|             |     `-ImplicitCastExpr 0x7fffd83eac38 <col:41> 'float' <LValueToRValue>
|             |       `-DeclRefExpr 0x7fffd83eabf8 <col:41> 'float' lvalue ParmVar 0x7fffd83e4df8 'y0' 'float'
|             `-ParenExpr 0x7fffd83eafa0 <col:47, col:67> 'float'
|               `-BinaryOperator 0x7fffd83eaf78 <col:48, col:66> 'float' '-'
|                 |-ImplicitCastExpr 0x7fffd83eaf60 <col:48> 'float' <IntegralToFloating>
|                 | `-IntegerLiteral 0x7fffd83eacd8 <col:48> 'int' 1
|                 `-BinaryOperator 0x7fffd83eaf38 <col:50, col:66> 'float' '/'
|                   |-ParenExpr 0x7fffd83eaee0 <col:50, col:64> 'float'
|                   | `-BinaryOperator 0x7fffd83eaeb8 <col:51, col:63> 'float' '+'
|                   |   |-ParenExpr 0x7fffd83eadb8 <col:51, col:56> 'float'
|                   |   | `-BinaryOperator 0x7fffd83ead90 <col:52, col:55> 'float' '-'
|                   |   |   |-ImplicitCastExpr 0x7fffd83ead48 <col:52> 'float' <LValueToRValue>
|                   |   |   | `-DeclRefExpr 0x7fffd83eacf8 <col:52> 'float' lvalue ParmVar 0x7fffd83e4d80 'x0' 'float'
|                   |   |   `-ImplicitCastExpr 0x7fffd83ead78 <col:55> 'float' <IntegralToFloating>
|                   |   |     `-ImplicitCastExpr 0x7fffd83ead60 <col:55> 'int' <LValueToRValue>
|                   |   |       `-DeclRefExpr 0x7fffd83ead20 <col:55> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|                   |   `-ParenExpr 0x7fffd83eae98 <col:58, col:63> 'float'
|                   |     `-BinaryOperator 0x7fffd83eae70 <col:59, col:62> 'float' '-'
|                   |       |-ImplicitCastExpr 0x7fffd83eae28 <col:59> 'float' <LValueToRValue>
|                   |       | `-DeclRefExpr 0x7fffd83eadd8 <col:59> 'float' lvalue ParmVar 0x7fffd83e4e70 'x1' 'float'
|                   |       `-ImplicitCastExpr 0x7fffd83eae58 <col:62> 'float' <IntegralToFloating>
|                   |         `-ImplicitCastExpr 0x7fffd83eae40 <col:62> 'int' <LValueToRValue>
|                   |           `-DeclRefExpr 0x7fffd83eae00 <col:62> 'int' lvalue ParmVar 0x7fffd83e4c98 'x' 'int'
|                   `-ImplicitCastExpr 0x7fffd83eaf20 <col:66> 'float' <IntegralToFloating>
|                     `-IntegerLiteral 0x7fffd83eaf00 <col:66> 'int' 2
|-FunctionDecl 0x7fffd83eb460 <line:3078:1, line:3237:1> line:3078:13 used stbtt__fill_active_edges_new 'void (float *, float *, int, stbtt__active_edge *, float)' static
| |-ParmVarDecl 0x7fffd83eb120 <col:42, col:49> col:49 used scanline 'float *'
| |-ParmVarDecl 0x7fffd83eb198 <col:59, col:66> col:66 used scanline_fill 'float *'
| |-ParmVarDecl 0x7fffd83eb210 <col:81, col:85> col:85 used len 'int'
| |-ParmVarDecl 0x7fffd83eb280 <col:90, col:110> col:110 used e 'stbtt__active_edge *'
| |-ParmVarDecl 0x7fffd83eb2f8 <col:113, col:119> col:119 used y_top 'float'
| `-CompoundStmt 0x7fffd83f8a60 <line:3079:1, line:3237:1>
|   |-DeclStmt 0x7fffd83eb640 <line:3080:4, col:28>
|   | `-VarDecl 0x7fffd83eb540 <col:4, col:27> col:10 used y_bottom 'float' cinit
|   |   `-BinaryOperator 0x7fffd83eb618 <col:21, col:27> 'float' '+'
|   |     |-ImplicitCastExpr 0x7fffd83eb5e8 <col:21> 'float' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd83eb5a0 <col:21> 'float' lvalue ParmVar 0x7fffd83eb2f8 'y_top' 'float'
|   |     `-ImplicitCastExpr 0x7fffd83eb600 <col:27> 'float' <IntegralToFloating>
|   |       `-IntegerLiteral 0x7fffd83eb5c8 <col:27> 'int' 1
|   `-WhileStmt 0x7fffd83f8a40 <line:3082:4, line:3236:4>
|     |-<<<NULL>>>
|     |-ImplicitCastExpr 0x7fffd83eb680 <line:3082:11> 'stbtt__active_edge *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd83eb658 <col:11> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|     `-CompoundStmt 0x7fffd83f8a18 <col:14, line:3236:4>
|       |-ParenExpr 0x7fffd83ecd78 </usr/include/assert.h:108:3, line:113:7> 'void'
|       | `-BinaryOperator 0x7fffd83ecd50 <line:108:4, line:113:6> 'void' ','
|       |   |-CStyleCastExpr 0x7fffd83eb870 <line:108:4, col:33> 'void' <ToVoid>
|       |   | `-UnaryExprOrTypeTraitExpr 0x7fffd83eb840 <col:11, col:33> 'unsigned long' sizeof
|       |   |   `-ParenExpr 0x7fffd83eb820 <col:18, col:33> 'int'
|       |   |     `-ConditionalOperator 0x7fffd83eb7f0 <col:19, col:32> 'int'
|       |   |       |-ParenExpr 0x7fffd83eb790 <col:19, col:24> 'int'
|       |   |       | `-BinaryOperator 0x7fffd83eb768 <././stb/stb_truetype.h:3086:20, col:29> 'int' '>='
|       |   |       |   |-ImplicitCastExpr 0x7fffd83eb738 <col:20, col:23> 'float' <LValueToRValue>
|       |   |       |   | `-MemberExpr 0x7fffd83eb6d8 <col:20, col:23> 'float' lvalue ->ey 0x7fffd83e1b70
|       |   |       |   |   `-ImplicitCastExpr 0x7fffd83eb6c0 <col:20> 'stbtt__active_edge *' <LValueToRValue>
|       |   |       |   |     `-DeclRefExpr 0x7fffd83eb698 <col:20> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |   |       |   `-ImplicitCastExpr 0x7fffd83eb750 <col:29> 'float' <LValueToRValue>
|       |   |       |     `-DeclRefExpr 0x7fffd83eb710 <col:29> 'float' lvalue ParmVar 0x7fffd83eb2f8 'y_top' 'float'
|       |   |       |-IntegerLiteral 0x7fffd83eb7b0 </usr/include/assert.h:108:28> 'int' 1
|       |   |       `-IntegerLiteral 0x7fffd83eb7d0 <col:32> 'int' 0
|       |   `-UnaryOperator 0x7fffd83ecd30 <col:36, line:113:6> 'void' prefix '__extension__'
|       |     `-StmtExpr 0x7fffd83ecd10 <line:108:50, line:113:6> 'void'
|       |       `-CompoundStmt 0x7fffd83eccf8 <line:108:51, line:113:5>
|       |         `-IfStmt 0x7fffd83eccc0 <line:109:7, line:112:68>
|       |           |-<<<NULL>>>
|       |           |-<<<NULL>>>
|       |           |-BinaryOperator 0x7fffd83eb968 <././stb/stb_truetype.h:3086:20, col:29> 'int' '>='
|       |           | |-ImplicitCastExpr 0x7fffd83eb938 <col:20, col:23> 'float' <LValueToRValue>
|       |           | | `-MemberExpr 0x7fffd83eb8d8 <col:20, col:23> 'float' lvalue ->ey 0x7fffd83e1b70
|       |           | |   `-ImplicitCastExpr 0x7fffd83eb8c0 <col:20> 'stbtt__active_edge *' <LValueToRValue>
|       |           | |     `-DeclRefExpr 0x7fffd83eb898 <col:20> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |           | `-ImplicitCastExpr 0x7fffd83eb950 <col:29> 'float' <LValueToRValue>
|       |           |   `-DeclRefExpr 0x7fffd83eb910 <col:29> 'float' lvalue ParmVar 0x7fffd83eb2f8 'y_top' 'float'
|       |           |-NullStmt 0x7fffd83eb990 </usr/include/assert.h:110:9>
|       |           `-CallExpr 0x7fffd83ebbb0 <line:112:9, col:68> 'void'
|       |             |-ImplicitCastExpr 0x7fffd83ebb98 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|       |             | `-DeclRefExpr 0x7fffd83eb9a0 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|       |             |-ImplicitCastExpr 0x7fffd83ebc10 <<scratch space>:4:1> 'const char *' <BitCast>
|       |             | `-ImplicitCastExpr 0x7fffd83ebbf8 <col:1> 'char *' <ArrayToPointerDecay>
|       |             |   `-StringLiteral 0x7fffd83eb9c8 <col:1> 'char [15]' lvalue "e->ey >= y_top"
|       |             |-ImplicitCastExpr 0x7fffd83ebc40 <line:5:1> 'const char *' <BitCast>
|       |             | `-ImplicitCastExpr 0x7fffd83ebc28 <col:1> 'char *' <ArrayToPointerDecay>
|       |             |   `-StringLiteral 0x7fffd83eba00 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|       |             |-ImplicitCastExpr 0x7fffd83ecc90 <line:6:1> 'unsigned int' <IntegralCast>
|       |             | `-IntegerLiteral 0x7fffd83eba40 <col:1> 'int' 3086
|       |             `-ImplicitCastExpr 0x7fffd83ecca8 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|       |               `-UnaryOperator 0x7fffd83ebb78 <col:30, col:44> 'const char [86]' lvalue prefix '__extension__'
|       |                 `-PredefinedExpr 0x7fffd83ebb58 <col:44> 'const char [86]' lvalue __PRETTY_FUNCTION__
|       |                   `-StringLiteral 0x7fffd83ebad8 <col:44> 'const char [86]' lvalue "void stbtt__fill_active_edges_new(float *, float *, int, stbtt__active_edge *, float)"
|       |-IfStmt 0x7fffd83f8900 <././stb/stb_truetype.h:3088:7, line:3234:7>
|       | |-<<<NULL>>>
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7fffd83ece60 <line:3088:11, col:21> 'int' '=='
|       | | |-ImplicitCastExpr 0x7fffd83ece30 <col:11, col:14> 'float' <LValueToRValue>
|       | | | `-MemberExpr 0x7fffd83ecdd8 <col:11, col:14> 'float' lvalue ->fdx 0x7fffd83e19f0
|       | | |   `-ImplicitCastExpr 0x7fffd83ecdc0 <col:11> 'stbtt__active_edge *' <LValueToRValue>
|       | | |     `-DeclRefExpr 0x7fffd83ecd98 <col:11> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       | | `-ImplicitCastExpr 0x7fffd83ece48 <col:21> 'float' <IntegralToFloating>
|       | |   `-IntegerLiteral 0x7fffd83ece10 <col:21> 'int' 0
|       | |-CompoundStmt 0x7fffd83eda78 <col:24, line:3098:7>
|       | | |-DeclStmt 0x7fffd83ecf90 <line:3089:10, col:26>
|       | | | `-VarDecl 0x7fffd83ecea0 <col:10, col:24> col:16 used x0 'float' cinit
|       | | |   `-ImplicitCastExpr 0x7fffd83ecf78 <col:21, col:24> 'float' <LValueToRValue>
|       | | |     `-MemberExpr 0x7fffd83ecf40 <col:21, col:24> 'float' lvalue ->fx 0x7fffd83e1990
|       | | |       `-ImplicitCastExpr 0x7fffd83ecf28 <col:21> 'stbtt__active_edge *' <LValueToRValue>
|       | | |         `-DeclRefExpr 0x7fffd83ecf00 <col:21> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       | | `-IfStmt 0x7fffd83eda40 <line:3090:10, line:3097:10>
|       | |   |-<<<NULL>>>
|       | |   |-<<<NULL>>>
|       | |   |-BinaryOperator 0x7fffd83ed040 <line:3090:14, col:19> 'int' '<'
|       | |   | |-ImplicitCastExpr 0x7fffd83ecff8 <col:14> 'float' <LValueToRValue>
|       | |   | | `-DeclRefExpr 0x7fffd83ecfa8 <col:14> 'float' lvalue Var 0x7fffd83ecea0 'x0' 'float'
|       | |   | `-ImplicitCastExpr 0x7fffd83ed028 <col:19> 'float' <IntegralToFloating>
|       | |   |   `-ImplicitCastExpr 0x7fffd83ed010 <col:19> 'int' <LValueToRValue>
|       | |   |     `-DeclRefExpr 0x7fffd83ecfd0 <col:19> 'int' lvalue ParmVar 0x7fffd83eb210 'len' 'int'
|       | |   |-CompoundStmt 0x7fffd83eda28 <col:24, line:3097:10>
|       | |   | `-IfStmt 0x7fffd83ed9f0 <line:3091:13, line:3096:13>
|       | |   |   |-<<<NULL>>>
|       | |   |   |-<<<NULL>>>
|       | |   |   |-BinaryOperator 0x7fffd83ed0e0 <line:3091:17, col:23> 'int' '>='
|       | |   |   | |-ImplicitCastExpr 0x7fffd83ed0b0 <col:17> 'float' <LValueToRValue>
|       | |   |   | | `-DeclRefExpr 0x7fffd83ed068 <col:17> 'float' lvalue Var 0x7fffd83ecea0 'x0' 'float'
|       | |   |   | `-ImplicitCastExpr 0x7fffd83ed0c8 <col:23> 'float' <IntegralToFloating>
|       | |   |   |   `-IntegerLiteral 0x7fffd83ed090 <col:23> 'int' 0
|       | |   |   |-CompoundStmt 0x7fffd83ed730 <col:26, line:3094:13>
|       | |   |   | |-CallExpr 0x7fffd83ed310 <line:3092:16, col:85> 'void'
|       | |   |   | | |-ImplicitCastExpr 0x7fffd83ed2f8 <col:16> 'void (*)(float *, int, stbtt__active_edge *, float, float, float, float)' <FunctionToPointerDecay>
|       | |   |   | | | `-DeclRefExpr 0x7fffd83ed108 <col:16> 'void (float *, int, stbtt__active_edge *, float, float, float, float)' Function 0x7fffd83e5080 'stbtt__handle_clipped_edge' 'void (float *, int, stbtt__active_edge *, float, float, float, float)'
|       | |   |   | | |-ImplicitCastExpr 0x7fffd83ed370 <col:43> 'float *' <LValueToRValue>
|       | |   |   | | | `-DeclRefExpr 0x7fffd83ed130 <col:43> 'float *' lvalue ParmVar 0x7fffd83eb120 'scanline' 'float *'
|       | |   |   | | |-CStyleCastExpr 0x7fffd83ed1b0 <col:52, col:58> 'int' <FloatingToIntegral>
|       | |   |   | | | `-ImplicitCastExpr 0x7fffd83ed198 <col:58> 'float' <LValueToRValue>
|       | |   |   | | |   `-DeclRefExpr 0x7fffd83ed158 <col:58> 'float' lvalue Var 0x7fffd83ecea0 'x0' 'float'
|       | |   |   | | |-ImplicitCastExpr 0x7fffd83ed388 <col:61> 'stbtt__active_edge *' <LValueToRValue>
|       | |   |   | | | `-DeclRefExpr 0x7fffd83ed1d8 <col:61> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       | |   |   | | |-ImplicitCastExpr 0x7fffd83ed3a0 <col:64> 'float' <LValueToRValue>
|       | |   |   | | | `-DeclRefExpr 0x7fffd83ed200 <col:64> 'float' lvalue Var 0x7fffd83ecea0 'x0' 'float'
|       | |   |   | | |-ImplicitCastExpr 0x7fffd83ed3b8 <col:67> 'float' <LValueToRValue>
|       | |   |   | | | `-DeclRefExpr 0x7fffd83ed228 <col:67> 'float' lvalue ParmVar 0x7fffd83eb2f8 'y_top' 'float'
|       | |   |   | | |-ImplicitCastExpr 0x7fffd83ed3d0 <col:74> 'float' <LValueToRValue>
|       | |   |   | | | `-DeclRefExpr 0x7fffd83ed250 <col:74> 'float' lvalue Var 0x7fffd83ecea0 'x0' 'float'
|       | |   |   | | `-ImplicitCastExpr 0x7fffd83ed3e8 <col:77> 'float' <LValueToRValue>
|       | |   |   | |   `-DeclRefExpr 0x7fffd83ed278 <col:77> 'float' lvalue Var 0x7fffd83eb540 'y_bottom' 'float'
|       | |   |   | `-CallExpr 0x7fffd83ed658 <line:3093:16, col:94> 'void'
|       | |   |   |   |-ImplicitCastExpr 0x7fffd83ed640 <col:16> 'void (*)(float *, int, stbtt__active_edge *, float, float, float, float)' <FunctionToPointerDecay>
|       | |   |   |   | `-DeclRefExpr 0x7fffd83ed400 <col:16> 'void (float *, int, stbtt__active_edge *, float, float, float, float)' Function 0x7fffd83e5080 'stbtt__handle_clipped_edge' 'void (float *, int, stbtt__active_edge *, float, float, float, float)'
|       | |   |   |   |-BinaryOperator 0x7fffd83ed488 <col:43, col:57> 'float *' '-'
|       | |   |   |   | |-ImplicitCastExpr 0x7fffd83ed470 <col:43> 'float *' <LValueToRValue>
|       | |   |   |   | | `-DeclRefExpr 0x7fffd83ed428 <col:43> 'float *' lvalue ParmVar 0x7fffd83eb198 'scanline_fill' 'float *'
|       | |   |   |   | `-IntegerLiteral 0x7fffd83ed450 <col:57> 'int' 1
|       | |   |   |   |-BinaryOperator 0x7fffd83ed550 <col:59, col:68> 'int' '+'
|       | |   |   |   | |-CStyleCastExpr 0x7fffd83ed508 <col:59, col:65> 'int' <FloatingToIntegral>
|       | |   |   |   | | `-ImplicitCastExpr 0x7fffd83ed4f0 <col:65> 'float' <LValueToRValue>
|       | |   |   |   | |   `-DeclRefExpr 0x7fffd83ed4b0 <col:65> 'float' lvalue Var 0x7fffd83ecea0 'x0' 'float'
|       | |   |   |   | `-IntegerLiteral 0x7fffd83ed530 <col:68> 'int' 1
|       | |   |   |   |-ImplicitCastExpr 0x7fffd83ed6b8 <col:70> 'stbtt__active_edge *' <LValueToRValue>
|       | |   |   |   | `-DeclRefExpr 0x7fffd83ed578 <col:70> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       | |   |   |   |-ImplicitCastExpr 0x7fffd83ed6d0 <col:73> 'float' <LValueToRValue>
|       | |   |   |   | `-DeclRefExpr 0x7fffd83ed5a0 <col:73> 'float' lvalue Var 0x7fffd83ecea0 'x0' 'float'
|       | |   |   |   |-ImplicitCastExpr 0x7fffd83ed6e8 <col:76> 'float' <LValueToRValue>
|       | |   |   |   | `-DeclRefExpr 0x7fffd83ed5c8 <col:76> 'float' lvalue ParmVar 0x7fffd83eb2f8 'y_top' 'float'
|       | |   |   |   |-ImplicitCastExpr 0x7fffd83ed700 <col:83> 'float' <LValueToRValue>
|       | |   |   |   | `-DeclRefExpr 0x7fffd83ed5f0 <col:83> 'float' lvalue Var 0x7fffd83ecea0 'x0' 'float'
|       | |   |   |   `-ImplicitCastExpr 0x7fffd83ed718 <col:86> 'float' <LValueToRValue>
|       | |   |   |     `-DeclRefExpr 0x7fffd83ed618 <col:86> 'float' lvalue Var 0x7fffd83eb540 'y_bottom' 'float'
|       | |   |   `-CompoundStmt 0x7fffd83ed9d8 <line:3094:20, line:3096:13>
|       | |   |     `-CallExpr 0x7fffd83ed900 <line:3095:16, col:85> 'void'
|       | |   |       |-ImplicitCastExpr 0x7fffd83ed8e8 <col:16> 'void (*)(float *, int, stbtt__active_edge *, float, float, float, float)' <FunctionToPointerDecay>
|       | |   |       | `-DeclRefExpr 0x7fffd83ed750 <col:16> 'void (float *, int, stbtt__active_edge *, float, float, float, float)' Function 0x7fffd83e5080 'stbtt__handle_clipped_edge' 'void (float *, int, stbtt__active_edge *, float, float, float, float)'
|       | |   |       |-BinaryOperator 0x7fffd83ed7d8 <col:43, col:57> 'float *' '-'
|       | |   |       | |-ImplicitCastExpr 0x7fffd83ed7c0 <col:43> 'float *' <LValueToRValue>
|       | |   |       | | `-DeclRefExpr 0x7fffd83ed778 <col:43> 'float *' lvalue ParmVar 0x7fffd83eb198 'scanline_fill' 'float *'
|       | |   |       | `-IntegerLiteral 0x7fffd83ed7a0 <col:57> 'int' 1
|       | |   |       |-IntegerLiteral 0x7fffd83ed800 <col:59> 'int' 0
|       | |   |       |-ImplicitCastExpr 0x7fffd83ed960 <col:61> 'stbtt__active_edge *' <LValueToRValue>
|       | |   |       | `-DeclRefExpr 0x7fffd83ed820 <col:61> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       | |   |       |-ImplicitCastExpr 0x7fffd83ed978 <col:64> 'float' <LValueToRValue>
|       | |   |       | `-DeclRefExpr 0x7fffd83ed848 <col:64> 'float' lvalue Var 0x7fffd83ecea0 'x0' 'float'
|       | |   |       |-ImplicitCastExpr 0x7fffd83ed990 <col:67> 'float' <LValueToRValue>
|       | |   |       | `-DeclRefExpr 0x7fffd83ed870 <col:67> 'float' lvalue ParmVar 0x7fffd83eb2f8 'y_top' 'float'
|       | |   |       |-ImplicitCastExpr 0x7fffd83ed9a8 <col:74> 'float' <LValueToRValue>
|       | |   |       | `-DeclRefExpr 0x7fffd83ed898 <col:74> 'float' lvalue Var 0x7fffd83ecea0 'x0' 'float'
|       | |   |       `-ImplicitCastExpr 0x7fffd83ed9c0 <col:77> 'float' <LValueToRValue>
|       | |   |         `-DeclRefExpr 0x7fffd83ed8c0 <col:77> 'float' lvalue Var 0x7fffd83eb540 'y_bottom' 'float'
|       | |   `-<<<NULL>>>
|       | `-CompoundStmt 0x7fffd83f88a0 <line:3098:14, line:3234:7>
|       |   |-DeclStmt 0x7fffd83edba0 <line:3099:10, col:26>
|       |   | `-VarDecl 0x7fffd83edab0 <col:10, col:24> col:16 used x0 'float' cinit
|       |   |   `-ImplicitCastExpr 0x7fffd83edb88 <col:21, col:24> 'float' <LValueToRValue>
|       |   |     `-MemberExpr 0x7fffd83edb50 <col:21, col:24> 'float' lvalue ->fx 0x7fffd83e1990
|       |   |       `-ImplicitCastExpr 0x7fffd83edb38 <col:21> 'stbtt__active_edge *' <LValueToRValue>
|       |   |         `-DeclRefExpr 0x7fffd83edb10 <col:21> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |   |-DeclStmt 0x7fffd83edcc0 <line:3100:10, col:27>
|       |   | `-VarDecl 0x7fffd83edbd0 <col:10, col:24> col:16 used dx 'float' cinit
|       |   |   `-ImplicitCastExpr 0x7fffd83edca8 <col:21, col:24> 'float' <LValueToRValue>
|       |   |     `-MemberExpr 0x7fffd83edc70 <col:21, col:24> 'float' lvalue ->fdx 0x7fffd83e19f0
|       |   |       `-ImplicitCastExpr 0x7fffd83edc58 <col:21> 'stbtt__active_edge *' <LValueToRValue>
|       |   |         `-DeclRefExpr 0x7fffd83edc30 <col:21> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |   |-DeclStmt 0x7fffd83eddf8 <line:3101:10, col:28>
|       |   | `-VarDecl 0x7fffd83edcf0 <col:10, col:26> col:16 used xb 'float' cinit
|       |   |   `-BinaryOperator 0x7fffd83eddd0 <col:21, col:26> 'float' '+'
|       |   |     |-ImplicitCastExpr 0x7fffd83edda0 <col:21> 'float' <LValueToRValue>
|       |   |     | `-DeclRefExpr 0x7fffd83edd50 <col:21> 'float' lvalue Var 0x7fffd83edab0 'x0' 'float'
|       |   |     `-ImplicitCastExpr 0x7fffd83eddb8 <col:26> 'float' <LValueToRValue>
|       |   |       `-DeclRefExpr 0x7fffd83edd78 <col:26> 'float' lvalue Var 0x7fffd83edbd0 'dx' 'float'
|       |   |-DeclStmt 0x7fffd83edf18 <line:3102:10, col:31>
|       |   | |-VarDecl 0x7fffd83ede28 <col:10, col:16> col:16 used x_top 'float'
|       |   | `-VarDecl 0x7fffd83edea0 <col:10, col:23> col:23 used x_bottom 'float'
|       |   |-DeclStmt 0x7fffd83ee038 <line:3103:10, col:23>
|       |   | |-VarDecl 0x7fffd83edf48 <col:10, col:16> col:16 used sy0 'float'
|       |   | `-VarDecl 0x7fffd83edfc0 <col:10, col:20> col:20 used sy1 'float'
|       |   |-DeclStmt 0x7fffd83ee158 <line:3104:10, col:27>
|       |   | `-VarDecl 0x7fffd83ee068 <col:10, col:24> col:16 used dy 'float' cinit
|       |   |   `-ImplicitCastExpr 0x7fffd83ee140 <col:21, col:24> 'float' <LValueToRValue>
|       |   |     `-MemberExpr 0x7fffd83ee108 <col:21, col:24> 'float' lvalue ->fdy 0x7fffd83e1a50
|       |   |       `-ImplicitCastExpr 0x7fffd83ee0f0 <col:21> 'stbtt__active_edge *' <LValueToRValue>
|       |   |         `-DeclRefExpr 0x7fffd83ee0c8 <col:21> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |   |-ParenExpr 0x7fffd83eea30 </usr/include/assert.h:108:3, line:113:7> 'void'
|       |   | `-BinaryOperator 0x7fffd83eea08 <line:108:4, line:113:6> 'void' ','
|       |   |   |-CStyleCastExpr 0x7fffd83ee468 <line:108:4, col:33> 'void' <ToVoid>
|       |   |   | `-UnaryExprOrTypeTraitExpr 0x7fffd83ee438 <col:11, col:33> 'unsigned long' sizeof
|       |   |   |   `-ParenExpr 0x7fffd83ee418 <col:18, col:33> 'int'
|       |   |   |     `-ConditionalOperator 0x7fffd83ee3e8 <col:19, col:32> 'int'
|       |   |   |       |-ParenExpr 0x7fffd83ee388 <col:19, col:24> 'int'
|       |   |   |       | `-BinaryOperator 0x7fffd83ee360 <././stb/stb_truetype.h:3105:23, col:53> 'int' '&&'
|       |   |   |       |   |-BinaryOperator 0x7fffd83ee240 <col:23, col:32> 'int' '<='
|       |   |   |       |   | |-ImplicitCastExpr 0x7fffd83ee210 <col:23, col:26> 'float' <LValueToRValue>
|       |   |   |       |   | | `-MemberExpr 0x7fffd83ee1b0 <col:23, col:26> 'float' lvalue ->sy 0x7fffd83e1b10
|       |   |   |       |   | |   `-ImplicitCastExpr 0x7fffd83ee198 <col:23> 'stbtt__active_edge *' <LValueToRValue>
|       |   |   |       |   | |     `-DeclRefExpr 0x7fffd83ee170 <col:23> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |   |   |       |   | `-ImplicitCastExpr 0x7fffd83ee228 <col:32> 'float' <LValueToRValue>
|       |   |   |       |   |   `-DeclRefExpr 0x7fffd83ee1e8 <col:32> 'float' lvalue Var 0x7fffd83eb540 'y_bottom' 'float'
|       |   |   |       |   `-BinaryOperator 0x7fffd83ee338 <col:44, col:53> 'int' '>='
|       |   |   |       |     |-ImplicitCastExpr 0x7fffd83ee308 <col:44, col:47> 'float' <LValueToRValue>
|       |   |   |       |     | `-MemberExpr 0x7fffd83ee2a8 <col:44, col:47> 'float' lvalue ->ey 0x7fffd83e1b70
|       |   |   |       |     |   `-ImplicitCastExpr 0x7fffd83ee290 <col:44> 'stbtt__active_edge *' <LValueToRValue>
|       |   |   |       |     |     `-DeclRefExpr 0x7fffd83ee268 <col:44> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |   |   |       |     `-ImplicitCastExpr 0x7fffd83ee320 <col:53> 'float' <LValueToRValue>
|       |   |   |       |       `-DeclRefExpr 0x7fffd83ee2e0 <col:53> 'float' lvalue ParmVar 0x7fffd83eb2f8 'y_top' 'float'
|       |   |   |       |-IntegerLiteral 0x7fffd83ee3a8 </usr/include/assert.h:108:28> 'int' 1
|       |   |   |       `-IntegerLiteral 0x7fffd83ee3c8 <col:32> 'int' 0
|       |   |   `-UnaryOperator 0x7fffd83ee9e8 <col:36, line:113:6> 'void' prefix '__extension__'
|       |   |     `-StmtExpr 0x7fffd83ee9c8 <line:108:50, line:113:6> 'void'
|       |   |       `-CompoundStmt 0x7fffd83ee9b0 <line:108:51, line:113:5>
|       |   |         `-IfStmt 0x7fffd83ee978 <line:109:7, line:112:68>
|       |   |           |-<<<NULL>>>
|       |   |           |-<<<NULL>>>
|       |   |           |-BinaryOperator 0x7fffd83ee680 <././stb/stb_truetype.h:3105:23, col:53> 'int' '&&'
|       |   |           | |-BinaryOperator 0x7fffd83ee560 <col:23, col:32> 'int' '<='
|       |   |           | | |-ImplicitCastExpr 0x7fffd83ee530 <col:23, col:26> 'float' <LValueToRValue>
|       |   |           | | | `-MemberExpr 0x7fffd83ee4d0 <col:23, col:26> 'float' lvalue ->sy 0x7fffd83e1b10
|       |   |           | | |   `-ImplicitCastExpr 0x7fffd83ee4b8 <col:23> 'stbtt__active_edge *' <LValueToRValue>
|       |   |           | | |     `-DeclRefExpr 0x7fffd83ee490 <col:23> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |   |           | | `-ImplicitCastExpr 0x7fffd83ee548 <col:32> 'float' <LValueToRValue>
|       |   |           | |   `-DeclRefExpr 0x7fffd83ee508 <col:32> 'float' lvalue Var 0x7fffd83eb540 'y_bottom' 'float'
|       |   |           | `-BinaryOperator 0x7fffd83ee658 <col:44, col:53> 'int' '>='
|       |   |           |   |-ImplicitCastExpr 0x7fffd83ee628 <col:44, col:47> 'float' <LValueToRValue>
|       |   |           |   | `-MemberExpr 0x7fffd83ee5c8 <col:44, col:47> 'float' lvalue ->ey 0x7fffd83e1b70
|       |   |           |   |   `-ImplicitCastExpr 0x7fffd83ee5b0 <col:44> 'stbtt__active_edge *' <LValueToRValue>
|       |   |           |   |     `-DeclRefExpr 0x7fffd83ee588 <col:44> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |   |           |   `-ImplicitCastExpr 0x7fffd83ee640 <col:53> 'float' <LValueToRValue>
|       |   |           |     `-DeclRefExpr 0x7fffd83ee600 <col:53> 'float' lvalue ParmVar 0x7fffd83eb2f8 'y_top' 'float'
|       |   |           |-NullStmt 0x7fffd83ee6a8 </usr/include/assert.h:110:9>
|       |   |           `-CallExpr 0x7fffd83ee8a0 <line:112:9, col:68> 'void'
|       |   |             |-ImplicitCastExpr 0x7fffd83ee888 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|       |   |             | `-DeclRefExpr 0x7fffd83ee6b8 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|       |   |             |-ImplicitCastExpr 0x7fffd83ee900 <<scratch space>:7:1> 'const char *' <BitCast>
|       |   |             | `-ImplicitCastExpr 0x7fffd83ee8e8 <col:1> 'char *' <ArrayToPointerDecay>
|       |   |             |   `-StringLiteral 0x7fffd83ee718 <col:1> 'char [36]' lvalue "e->sy <= y_bottom && e->ey >= y_top"
|       |   |             |-ImplicitCastExpr 0x7fffd83ee930 <line:8:1> 'const char *' <BitCast>
|       |   |             | `-ImplicitCastExpr 0x7fffd83ee918 <col:1> 'char *' <ArrayToPointerDecay>
|       |   |             |   `-StringLiteral 0x7fffd83ee768 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|       |   |             |-ImplicitCastExpr 0x7fffd83ee948 <line:9:1> 'unsigned int' <IntegralCast>
|       |   |             | `-IntegerLiteral 0x7fffd83ee7a8 <col:1> 'int' 3105
|       |   |             `-ImplicitCastExpr 0x7fffd83ee960 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|       |   |               `-UnaryOperator 0x7fffd83ee868 <col:30, col:44> 'const char [86]' lvalue prefix '__extension__'
|       |   |                 `-PredefinedExpr 0x7fffd83ee848 <col:44> 'const char [86]' lvalue __PRETTY_FUNCTION__
|       |   |                   `-StringLiteral 0x7fffd83ee7c8 <col:44> 'const char [86]' lvalue "void stbtt__fill_active_edges_new(float *, float *, int, stbtt__active_edge *, float)"
|       |   |-IfStmt 0x7fffd83eefd0 <././stb/stb_truetype.h:3110:10, line:3116:10>
|       |   | |-<<<NULL>>>
|       |   | |-<<<NULL>>>
|       |   | |-BinaryOperator 0x7fffd83eeb20 <line:3110:14, col:22> 'int' '>'
|       |   | | |-ImplicitCastExpr 0x7fffd83eeaf0 <col:14, col:17> 'float' <LValueToRValue>
|       |   | | | `-MemberExpr 0x7fffd83eea90 <col:14, col:17> 'float' lvalue ->sy 0x7fffd83e1b10
|       |   | | |   `-ImplicitCastExpr 0x7fffd83eea78 <col:14> 'stbtt__active_edge *' <LValueToRValue>
|       |   | | |     `-DeclRefExpr 0x7fffd83eea50 <col:14> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |   | | `-ImplicitCastExpr 0x7fffd83eeb08 <col:22> 'float' <LValueToRValue>
|       |   | |   `-DeclRefExpr 0x7fffd83eeac8 <col:22> 'float' lvalue ParmVar 0x7fffd83eb2f8 'y_top' 'float'
|       |   | |-CompoundStmt 0x7fffd83eee70 <col:29, line:3113:10>
|       |   | | |-BinaryOperator 0x7fffd83eed68 <line:3111:13, col:45> 'float' '='
|       |   | | | |-DeclRefExpr 0x7fffd83eeb48 <col:13> 'float' lvalue Var 0x7fffd83ede28 'x_top' 'float'
|       |   | | | `-BinaryOperator 0x7fffd83eed40 <col:21, col:45> 'float' '+'
|       |   | | |   |-ImplicitCastExpr 0x7fffd83eed28 <col:21> 'float' <LValueToRValue>
|       |   | | |   | `-DeclRefExpr 0x7fffd83eeb70 <col:21> 'float' lvalue Var 0x7fffd83edab0 'x0' 'float'
|       |   | | |   `-BinaryOperator 0x7fffd83eed00 <col:26, col:45> 'float' '*'
|       |   | | |     |-ImplicitCastExpr 0x7fffd83eece8 <col:26> 'float' <LValueToRValue>
|       |   | | |     | `-DeclRefExpr 0x7fffd83eeb98 <col:26> 'float' lvalue Var 0x7fffd83edbd0 'dx' 'float'
|       |   | | |     `-ParenExpr 0x7fffd83eecc8 <col:31, col:45> 'float'
|       |   | | |       `-BinaryOperator 0x7fffd83eeca0 <col:32, col:40> 'float' '-'
|       |   | | |         |-ImplicitCastExpr 0x7fffd83eec60 <col:32, col:35> 'float' <LValueToRValue>
|       |   | | |         | `-MemberExpr 0x7fffd83eec00 <col:32, col:35> 'float' lvalue ->sy 0x7fffd83e1b10
|       |   | | |         |   `-ImplicitCastExpr 0x7fffd83eebe8 <col:32> 'stbtt__active_edge *' <LValueToRValue>
|       |   | | |         |     `-DeclRefExpr 0x7fffd83eebc0 <col:32> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |   | | |         `-ImplicitCastExpr 0x7fffd83eec78 <col:40> 'float' <LValueToRValue>
|       |   | | |           `-DeclRefExpr 0x7fffd83eec38 <col:40> 'float' lvalue ParmVar 0x7fffd83eb2f8 'y_top' 'float'
|       |   | | `-BinaryOperator 0x7fffd83eee48 <line:3112:13, col:22> 'float' '='
|       |   | |   |-DeclRefExpr 0x7fffd83eed90 <col:13> 'float' lvalue Var 0x7fffd83edf48 'sy0' 'float'
|       |   | |   `-ImplicitCastExpr 0x7fffd83eee30 <col:19, col:22> 'float' <LValueToRValue>
|       |   | |     `-MemberExpr 0x7fffd83eedf8 <col:19, col:22> 'float' lvalue ->sy 0x7fffd83e1b10
|       |   | |       `-ImplicitCastExpr 0x7fffd83eede0 <col:19> 'stbtt__active_edge *' <LValueToRValue>
|       |   | |         `-DeclRefExpr 0x7fffd83eedb8 <col:19> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |   | `-CompoundStmt 0x7fffd83eefb0 <line:3113:17, line:3116:10>
|       |   |   |-BinaryOperator 0x7fffd83eeef8 <line:3114:13, col:21> 'float' '='
|       |   |   | |-DeclRefExpr 0x7fffd83eee90 <col:13> 'float' lvalue Var 0x7fffd83ede28 'x_top' 'float'
|       |   |   | `-ImplicitCastExpr 0x7fffd83eeee0 <col:21> 'float' <LValueToRValue>
|       |   |   |   `-DeclRefExpr 0x7fffd83eeeb8 <col:21> 'float' lvalue Var 0x7fffd83edab0 'x0' 'float'
|       |   |   `-BinaryOperator 0x7fffd83eef88 <line:3115:13, col:19> 'float' '='
|       |   |     |-DeclRefExpr 0x7fffd83eef20 <col:13> 'float' lvalue Var 0x7fffd83edf48 'sy0' 'float'
|       |   |     `-ImplicitCastExpr 0x7fffd83eef70 <col:19> 'float' <LValueToRValue>
|       |   |       `-DeclRefExpr 0x7fffd83eef48 <col:19> 'float' lvalue ParmVar 0x7fffd83eb2f8 'y_top' 'float'
|       |   |-IfStmt 0x7fffd83ef578 <line:3117:10, line:3123:10>
|       |   | |-<<<NULL>>>
|       |   | |-<<<NULL>>>
|       |   | |-BinaryOperator 0x7fffd83ef0d8 <line:3117:14, col:22> 'int' '<'
|       |   | | |-ImplicitCastExpr 0x7fffd83ef0a8 <col:14, col:17> 'float' <LValueToRValue>
|       |   | | | `-MemberExpr 0x7fffd83ef048 <col:14, col:17> 'float' lvalue ->ey 0x7fffd83e1b70
|       |   | | |   `-ImplicitCastExpr 0x7fffd83ef030 <col:14> 'stbtt__active_edge *' <LValueToRValue>
|       |   | | |     `-DeclRefExpr 0x7fffd83ef008 <col:14> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |   | | `-ImplicitCastExpr 0x7fffd83ef0c0 <col:22> 'float' <LValueToRValue>
|       |   | |   `-DeclRefExpr 0x7fffd83ef080 <col:22> 'float' lvalue Var 0x7fffd83eb540 'y_bottom' 'float'
|       |   | |-CompoundStmt 0x7fffd83ef418 <col:32, line:3120:10>
|       |   | | |-BinaryOperator 0x7fffd83ef310 <line:3118:13, col:48> 'float' '='
|       |   | | | |-DeclRefExpr 0x7fffd83ef100 <col:13> 'float' lvalue Var 0x7fffd83edea0 'x_bottom' 'float'
|       |   | | | `-BinaryOperator 0x7fffd83ef2e8 <col:24, col:48> 'float' '+'
|       |   | | |   |-ImplicitCastExpr 0x7fffd83ef2d0 <col:24> 'float' <LValueToRValue>
|       |   | | |   | `-DeclRefExpr 0x7fffd83ef128 <col:24> 'float' lvalue Var 0x7fffd83edab0 'x0' 'float'
|       |   | | |   `-BinaryOperator 0x7fffd83ef2a8 <col:29, col:48> 'float' '*'
|       |   | | |     |-ImplicitCastExpr 0x7fffd83ef290 <col:29> 'float' <LValueToRValue>
|       |   | | |     | `-DeclRefExpr 0x7fffd83ef150 <col:29> 'float' lvalue Var 0x7fffd83edbd0 'dx' 'float'
|       |   | | |     `-ParenExpr 0x7fffd83ef270 <col:34, col:48> 'float'
|       |   | | |       `-BinaryOperator 0x7fffd83ef248 <col:35, col:43> 'float' '-'
|       |   | | |         |-ImplicitCastExpr 0x7fffd83ef218 <col:35, col:38> 'float' <LValueToRValue>
|       |   | | |         | `-MemberExpr 0x7fffd83ef1b8 <col:35, col:38> 'float' lvalue ->ey 0x7fffd83e1b70
|       |   | | |         |   `-ImplicitCastExpr 0x7fffd83ef1a0 <col:35> 'stbtt__active_edge *' <LValueToRValue>
|       |   | | |         |     `-DeclRefExpr 0x7fffd83ef178 <col:35> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |   | | |         `-ImplicitCastExpr 0x7fffd83ef230 <col:43> 'float' <LValueToRValue>
|       |   | | |           `-DeclRefExpr 0x7fffd83ef1f0 <col:43> 'float' lvalue ParmVar 0x7fffd83eb2f8 'y_top' 'float'
|       |   | | `-BinaryOperator 0x7fffd83ef3f0 <line:3119:13, col:22> 'float' '='
|       |   | |   |-DeclRefExpr 0x7fffd83ef338 <col:13> 'float' lvalue Var 0x7fffd83edfc0 'sy1' 'float'
|       |   | |   `-ImplicitCastExpr 0x7fffd83ef3d8 <col:19, col:22> 'float' <LValueToRValue>
|       |   | |     `-MemberExpr 0x7fffd83ef3a0 <col:19, col:22> 'float' lvalue ->ey 0x7fffd83e1b70
|       |   | |       `-ImplicitCastExpr 0x7fffd83ef388 <col:19> 'stbtt__active_edge *' <LValueToRValue>
|       |   | |         `-DeclRefExpr 0x7fffd83ef360 <col:19> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |   | `-CompoundStmt 0x7fffd83ef558 <line:3120:17, line:3123:10>
|       |   |   |-BinaryOperator 0x7fffd83ef4a0 <line:3121:13, col:24> 'float' '='
|       |   |   | |-DeclRefExpr 0x7fffd83ef438 <col:13> 'float' lvalue Var 0x7fffd83edea0 'x_bottom' 'float'
|       |   |   | `-ImplicitCastExpr 0x7fffd83ef488 <col:24> 'float' <LValueToRValue>
|       |   |   |   `-DeclRefExpr 0x7fffd83ef460 <col:24> 'float' lvalue Var 0x7fffd83edcf0 'xb' 'float'
|       |   |   `-BinaryOperator 0x7fffd83ef530 <line:3122:13, col:19> 'float' '='
|       |   |     |-DeclRefExpr 0x7fffd83ef4c8 <col:13> 'float' lvalue Var 0x7fffd83edfc0 'sy1' 'float'
|       |   |     `-ImplicitCastExpr 0x7fffd83ef518 <col:19> 'float' <LValueToRValue>
|       |   |       `-DeclRefExpr 0x7fffd83ef4f0 <col:19> 'float' lvalue Var 0x7fffd83eb540 'y_bottom' 'float'
|       |   `-IfStmt 0x7fffd83f8868 <line:3125:10, line:3233:10>
|       |     |-<<<NULL>>>
|       |     |-<<<NULL>>>
|       |     |-BinaryOperator 0x7fffd83ef8c0 <line:3125:14, col:71> 'int' '&&'
|       |     | |-BinaryOperator 0x7fffd83ef7d8 <col:14, col:53> 'int' '&&'
|       |     | | |-BinaryOperator 0x7fffd83ef6f0 <col:14, col:40> 'int' '&&'
|       |     | | | |-BinaryOperator 0x7fffd83ef628 <col:14, col:23> 'int' '>='
|       |     | | | | |-ImplicitCastExpr 0x7fffd83ef5f8 <col:14> 'float' <LValueToRValue>
|       |     | | | | | `-DeclRefExpr 0x7fffd83ef5b0 <col:14> 'float' lvalue Var 0x7fffd83ede28 'x_top' 'float'
|       |     | | | | `-ImplicitCastExpr 0x7fffd83ef610 <col:23> 'float' <IntegralToFloating>
|       |     | | | |   `-IntegerLiteral 0x7fffd83ef5d8 <col:23> 'int' 0
|       |     | | | `-BinaryOperator 0x7fffd83ef6c8 <col:28, col:40> 'int' '>='
|       |     | | |   |-ImplicitCastExpr 0x7fffd83ef698 <col:28> 'float' <LValueToRValue>
|       |     | | |   | `-DeclRefExpr 0x7fffd83ef650 <col:28> 'float' lvalue Var 0x7fffd83edea0 'x_bottom' 'float'
|       |     | | |   `-ImplicitCastExpr 0x7fffd83ef6b0 <col:40> 'float' <IntegralToFloating>
|       |     | | |     `-IntegerLiteral 0x7fffd83ef678 <col:40> 'int' 0
|       |     | | `-BinaryOperator 0x7fffd83ef7b0 <col:45, col:53> 'int' '<'
|       |     | |   |-ImplicitCastExpr 0x7fffd83ef768 <col:45> 'float' <LValueToRValue>
|       |     | |   | `-DeclRefExpr 0x7fffd83ef718 <col:45> 'float' lvalue Var 0x7fffd83ede28 'x_top' 'float'
|       |     | |   `-ImplicitCastExpr 0x7fffd83ef798 <col:53> 'float' <IntegralToFloating>
|       |     | |     `-ImplicitCastExpr 0x7fffd83ef780 <col:53> 'int' <LValueToRValue>
|       |     | |       `-DeclRefExpr 0x7fffd83ef740 <col:53> 'int' lvalue ParmVar 0x7fffd83eb210 'len' 'int'
|       |     | `-BinaryOperator 0x7fffd83ef898 <col:60, col:71> 'int' '<'
|       |     |   |-ImplicitCastExpr 0x7fffd83ef850 <col:60> 'float' <LValueToRValue>
|       |     |   | `-DeclRefExpr 0x7fffd83ef800 <col:60> 'float' lvalue Var 0x7fffd83edea0 'x_bottom' 'float'
|       |     |   `-ImplicitCastExpr 0x7fffd83ef880 <col:71> 'float' <IntegralToFloating>
|       |     |     `-ImplicitCastExpr 0x7fffd83ef868 <col:71> 'int' <LValueToRValue>
|       |     |       `-DeclRefExpr 0x7fffd83ef828 <col:71> 'int' lvalue ParmVar 0x7fffd83eb210 'len' 'int'
|       |     |-CompoundStmt 0x7fffd83f4c90 <col:76, line:3176:10>
|       |     | `-IfStmt 0x7fffd83f4c58 <line:3128:13, line:3175:13>
|       |     |   |-<<<NULL>>>
|       |     |   |-<<<NULL>>>
|       |     |   |-BinaryOperator 0x7fffd83ef9e8 <line:3128:17, col:38> 'int' '=='
|       |     |   | |-CStyleCastExpr 0x7fffd83ef940 <col:17, col:23> 'int' <FloatingToIntegral>
|       |     |   | | `-ImplicitCastExpr 0x7fffd83ef928 <col:23> 'float' <LValueToRValue>
|       |     |   | |   `-DeclRefExpr 0x7fffd83ef8e8 <col:23> 'float' lvalue Var 0x7fffd83ede28 'x_top' 'float'
|       |     |   | `-CStyleCastExpr 0x7fffd83ef9c0 <col:32, col:38> 'int' <FloatingToIntegral>
|       |     |   |   `-ImplicitCastExpr 0x7fffd83ef9a8 <col:38> 'float' <LValueToRValue>
|       |     |   |     `-DeclRefExpr 0x7fffd83ef968 <col:38> 'float' lvalue Var 0x7fffd83edea0 'x_bottom' 'float'
|       |     |   |-CompoundStmt 0x7fffd83f0a80 <col:48, line:3136:13>
|       |     |   | |-DeclStmt 0x7fffd83efa88 <line:3129:16, col:28>
|       |     |   | | `-VarDecl 0x7fffd83efa28 <col:16, col:22> col:22 used height 'float'
|       |     |   | |-DeclStmt 0x7fffd83efb98 <line:3131:16, col:35>
|       |     |   | | `-VarDecl 0x7fffd83efab8 <col:16, col:30> col:20 used x 'int' cinit
|       |     |   | |   `-CStyleCastExpr 0x7fffd83efb70 <col:24, col:30> 'int' <FloatingToIntegral>
|       |     |   | |     `-ImplicitCastExpr 0x7fffd83efb58 <col:30> 'float' <LValueToRValue>
|       |     |   | |       `-DeclRefExpr 0x7fffd83efb18 <col:30> 'float' lvalue Var 0x7fffd83ede28 'x_top' 'float'
|       |     |   | |-BinaryOperator 0x7fffd83efc80 <line:3132:16, col:31> 'float' '='
|       |     |   | | |-DeclRefExpr 0x7fffd83efbb0 <col:16> 'float' lvalue Var 0x7fffd83efa28 'height' 'float'
|       |     |   | | `-BinaryOperator 0x7fffd83efc58 <col:25, col:31> 'float' '-'
|       |     |   | |   |-ImplicitCastExpr 0x7fffd83efc28 <col:25> 'float' <LValueToRValue>
|       |     |   | |   | `-DeclRefExpr 0x7fffd83efbd8 <col:25> 'float' lvalue Var 0x7fffd83edfc0 'sy1' 'float'
|       |     |   | |   `-ImplicitCastExpr 0x7fffd83efc40 <col:31> 'float' <LValueToRValue>
|       |     |   | |     `-DeclRefExpr 0x7fffd83efc00 <col:31> 'float' lvalue Var 0x7fffd83edf48 'sy0' 'float'
|       |     |   | |-ParenExpr 0x7fffd83f03a0 </usr/include/assert.h:108:3, line:113:7> 'void'
|       |     |   | | `-BinaryOperator 0x7fffd83f0378 <line:108:4, line:113:6> 'void' ','
|       |     |   | |   |-CStyleCastExpr 0x7fffd83efee0 <line:108:4, col:33> 'void' <ToVoid>
|       |     |   | |   | `-UnaryExprOrTypeTraitExpr 0x7fffd83efeb0 <col:11, col:33> 'unsigned long' sizeof
|       |     |   | |   |   `-ParenExpr 0x7fffd83efe90 <col:18, col:33> 'int'
|       |     |   | |   |     `-ConditionalOperator 0x7fffd83efe60 <col:19, col:32> 'int'
|       |     |   | |   |       |-ParenExpr 0x7fffd83efe00 <col:19, col:24> 'int'
|       |     |   | |   |       | `-BinaryOperator 0x7fffd83efdd8 <././stb/stb_truetype.h:3133:29, col:43> 'int' '&&'
|       |     |   | |   |       |   |-BinaryOperator 0x7fffd83efd08 <col:29, col:34> 'int' '>='
|       |     |   | |   |       |   | |-ImplicitCastExpr 0x7fffd83efcf0 <col:29> 'int' <LValueToRValue>
|       |     |   | |   |       |   | | `-DeclRefExpr 0x7fffd83efca8 <col:29> 'int' lvalue Var 0x7fffd83efab8 'x' 'int'
|       |     |   | |   |       |   | `-IntegerLiteral 0x7fffd83efcd0 <col:34> 'int' 0
|       |     |   | |   |       |   `-BinaryOperator 0x7fffd83efdb0 <col:39, col:43> 'int' '<'
|       |     |   | |   |       |     |-ImplicitCastExpr 0x7fffd83efd80 <col:39> 'int' <LValueToRValue>
|       |     |   | |   |       |     | `-DeclRefExpr 0x7fffd83efd30 <col:39> 'int' lvalue Var 0x7fffd83efab8 'x' 'int'
|       |     |   | |   |       |     `-ImplicitCastExpr 0x7fffd83efd98 <col:43> 'int' <LValueToRValue>
|       |     |   | |   |       |       `-DeclRefExpr 0x7fffd83efd58 <col:43> 'int' lvalue ParmVar 0x7fffd83eb210 'len' 'int'
|       |     |   | |   |       |-IntegerLiteral 0x7fffd83efe20 </usr/include/assert.h:108:28> 'int' 1
|       |     |   | |   |       `-IntegerLiteral 0x7fffd83efe40 <col:32> 'int' 0
|       |     |   | |   `-UnaryOperator 0x7fffd83f0358 <col:36, line:113:6> 'void' prefix '__extension__'
|       |     |   | |     `-StmtExpr 0x7fffd83f0338 <line:108:50, line:113:6> 'void'
|       |     |   | |       `-CompoundStmt 0x7fffd83f0320 <line:108:51, line:113:5>
|       |     |   | |         `-IfStmt 0x7fffd83f02e8 <line:109:7, line:112:68>
|       |     |   | |           |-<<<NULL>>>
|       |     |   | |           |-<<<NULL>>>
|       |     |   | |           |-BinaryOperator 0x7fffd83f0038 <././stb/stb_truetype.h:3133:29, col:43> 'int' '&&'
|       |     |   | |           | |-BinaryOperator 0x7fffd83eff68 <col:29, col:34> 'int' '>='
|       |     |   | |           | | |-ImplicitCastExpr 0x7fffd83eff50 <col:29> 'int' <LValueToRValue>
|       |     |   | |           | | | `-DeclRefExpr 0x7fffd83eff08 <col:29> 'int' lvalue Var 0x7fffd83efab8 'x' 'int'
|       |     |   | |           | | `-IntegerLiteral 0x7fffd83eff30 <col:34> 'int' 0
|       |     |   | |           | `-BinaryOperator 0x7fffd83f0010 <col:39, col:43> 'int' '<'
|       |     |   | |           |   |-ImplicitCastExpr 0x7fffd83effe0 <col:39> 'int' <LValueToRValue>
|       |     |   | |           |   | `-DeclRefExpr 0x7fffd83eff90 <col:39> 'int' lvalue Var 0x7fffd83efab8 'x' 'int'
|       |     |   | |           |   `-ImplicitCastExpr 0x7fffd83efff8 <col:43> 'int' <LValueToRValue>
|       |     |   | |           |     `-DeclRefExpr 0x7fffd83effb8 <col:43> 'int' lvalue ParmVar 0x7fffd83eb210 'len' 'int'
|       |     |   | |           |-NullStmt 0x7fffd83f0060 </usr/include/assert.h:110:9>
|       |     |   | |           `-CallExpr 0x7fffd83f0210 <line:112:9, col:68> 'void'
|       |     |   | |             |-ImplicitCastExpr 0x7fffd83f01f8 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|       |     |   | |             | `-DeclRefExpr 0x7fffd83f0070 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|       |     |   | |             |-ImplicitCastExpr 0x7fffd83f0270 <<scratch space>:10:1> 'const char *' <BitCast>
|       |     |   | |             | `-ImplicitCastExpr 0x7fffd83f0258 <col:1> 'char *' <ArrayToPointerDecay>
|       |     |   | |             |   `-StringLiteral 0x7fffd83f0098 <col:1> 'char [18]' lvalue "x >= 0 && x < len"
|       |     |   | |             |-ImplicitCastExpr 0x7fffd83f02a0 <line:11:1> 'const char *' <BitCast>
|       |     |   | |             | `-ImplicitCastExpr 0x7fffd83f0288 <col:1> 'char *' <ArrayToPointerDecay>
|       |     |   | |             |   `-StringLiteral 0x7fffd83f00d8 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|       |     |   | |             |-ImplicitCastExpr 0x7fffd83f02b8 <line:12:1> 'unsigned int' <IntegralCast>
|       |     |   | |             | `-IntegerLiteral 0x7fffd83f0118 <col:1> 'int' 3133
|       |     |   | |             `-ImplicitCastExpr 0x7fffd83f02d0 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|       |     |   | |               `-UnaryOperator 0x7fffd83f01d8 <col:30, col:44> 'const char [86]' lvalue prefix '__extension__'
|       |     |   | |                 `-PredefinedExpr 0x7fffd83f01b8 <col:44> 'const char [86]' lvalue __PRETTY_FUNCTION__
|       |     |   | |                   `-StringLiteral 0x7fffd83f0138 <col:44> 'const char [86]' lvalue "void stbtt__fill_active_edges_new(float *, float *, int, stbtt__active_edge *, float)"
|       |     |   | |-CompoundAssignOperator 0x7fffd83f0870 <././stb/stb_truetype.h:3134:16, col:84> 'float' '+=' ComputeLHSTy='float' ComputeResultTy='float'
|       |     |   | | |-ArraySubscriptExpr 0x7fffd83f0440 <col:16, col:26> 'float' lvalue
|       |     |   | | | |-ImplicitCastExpr 0x7fffd83f0410 <col:16> 'float *' <LValueToRValue>
|       |     |   | | | | `-DeclRefExpr 0x7fffd83f03c0 <col:16> 'float *' lvalue ParmVar 0x7fffd83eb120 'scanline' 'float *'
|       |     |   | | | `-ImplicitCastExpr 0x7fffd83f0428 <col:25> 'int' <LValueToRValue>
|       |     |   | | |   `-DeclRefExpr 0x7fffd83f03e8 <col:25> 'int' lvalue Var 0x7fffd83efab8 'x' 'int'
|       |     |   | | `-BinaryOperator 0x7fffd83f0848 <col:31, col:84> 'float' '*'
|       |     |   | |   |-BinaryOperator 0x7fffd83f07e0 <col:31, col:79> 'float' '*'
|       |     |   | |   | |-ImplicitCastExpr 0x7fffd83f07c8 <col:31, col:34> 'float' <LValueToRValue>
|       |     |   | |   | | `-MemberExpr 0x7fffd83f04a8 <col:31, col:34> 'float' lvalue ->direction 0x7fffd83e1ab0
|       |     |   | |   | |   `-ImplicitCastExpr 0x7fffd83f0490 <col:31> 'stbtt__active_edge *' <LValueToRValue>
|       |     |   | |   | |     `-DeclRefExpr 0x7fffd83f0468 <col:31> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |     |   | |   | `-ParenExpr 0x7fffd83f07a8 <col:46, col:79> 'float'
|       |     |   | |   |   `-BinaryOperator 0x7fffd83f0780 <col:47, col:78> 'float' '-'
|       |     |   | |   |     |-ImplicitCastExpr 0x7fffd83f0768 <col:47> 'float' <IntegralToFloating>
|       |     |   | |   |     | `-IntegerLiteral 0x7fffd83f04e0 <col:47> 'int' 1
|       |     |   | |   |     `-BinaryOperator 0x7fffd83f0740 <col:49, col:78> 'float' '/'
|       |     |   | |   |       |-ParenExpr 0x7fffd83f06e8 <col:49, col:76> 'float'
|       |     |   | |   |       | `-BinaryOperator 0x7fffd83f06c0 <col:50, col:75> 'float' '+'
|       |     |   | |   |       |   |-ParenExpr 0x7fffd83f05c0 <col:50, col:60> 'float'
|       |     |   | |   |       |   | `-BinaryOperator 0x7fffd83f0598 <col:51, col:59> 'float' '-'
|       |     |   | |   |       |   |   |-ImplicitCastExpr 0x7fffd83f0550 <col:51> 'float' <LValueToRValue>
|       |     |   | |   |       |   |   | `-DeclRefExpr 0x7fffd83f0500 <col:51> 'float' lvalue Var 0x7fffd83ede28 'x_top' 'float'
|       |     |   | |   |       |   |   `-ImplicitCastExpr 0x7fffd83f0580 <col:59> 'float' <IntegralToFloating>
|       |     |   | |   |       |   |     `-ImplicitCastExpr 0x7fffd83f0568 <col:59> 'int' <LValueToRValue>
|       |     |   | |   |       |   |       `-DeclRefExpr 0x7fffd83f0528 <col:59> 'int' lvalue Var 0x7fffd83efab8 'x' 'int'
|       |     |   | |   |       |   `-ParenExpr 0x7fffd83f06a0 <col:64, col:75> 'float'
|       |     |   | |   |       |     `-BinaryOperator 0x7fffd83f0678 <col:65, col:74> 'float' '-'
|       |     |   | |   |       |       |-ImplicitCastExpr 0x7fffd83f0630 <col:65> 'float' <LValueToRValue>
|       |     |   | |   |       |       | `-DeclRefExpr 0x7fffd83f05e0 <col:65> 'float' lvalue Var 0x7fffd83edea0 'x_bottom' 'float'
|       |     |   | |   |       |       `-ImplicitCastExpr 0x7fffd83f0660 <col:74> 'float' <IntegralToFloating>
|       |     |   | |   |       |         `-ImplicitCastExpr 0x7fffd83f0648 <col:74> 'int' <LValueToRValue>
|       |     |   | |   |       |           `-DeclRefExpr 0x7fffd83f0608 <col:74> 'int' lvalue Var 0x7fffd83efab8 'x' 'int'
|       |     |   | |   |       `-ImplicitCastExpr 0x7fffd83f0728 <col:78> 'float' <IntegralToFloating>
|       |     |   | |   |         `-IntegerLiteral 0x7fffd83f0708 <col:78> 'int' 2
|       |     |   | |   `-ImplicitCastExpr 0x7fffd83f0830 <col:84> 'float' <LValueToRValue>
|       |     |   | |     `-DeclRefExpr 0x7fffd83f0808 <col:84> 'float' lvalue Var 0x7fffd83efa28 'height' 'float'
|       |     |   | `-CompoundAssignOperator 0x7fffd83f0a48 <line:3135:16, col:51> 'float' '+=' ComputeLHSTy='float' ComputeResultTy='float'
|       |     |   |   |-ArraySubscriptExpr 0x7fffd83f0928 <col:16, col:31> 'float' lvalue
|       |     |   |   | |-ImplicitCastExpr 0x7fffd83f08f8 <col:16> 'float *' <LValueToRValue>
|       |     |   |   | | `-DeclRefExpr 0x7fffd83f08a8 <col:16> 'float *' lvalue ParmVar 0x7fffd83eb198 'scanline_fill' 'float *'
|       |     |   |   | `-ImplicitCastExpr 0x7fffd83f0910 <col:30> 'int' <LValueToRValue>
|       |     |   |   |   `-DeclRefExpr 0x7fffd83f08d0 <col:30> 'int' lvalue Var 0x7fffd83efab8 'x' 'int'
|       |     |   |   `-BinaryOperator 0x7fffd83f0a20 <col:36, col:51> 'float' '*'
|       |     |   |     |-ImplicitCastExpr 0x7fffd83f09f0 <col:36, col:39> 'float' <LValueToRValue>
|       |     |   |     | `-MemberExpr 0x7fffd83f0990 <col:36, col:39> 'float' lvalue ->direction 0x7fffd83e1ab0
|       |     |   |     |   `-ImplicitCastExpr 0x7fffd83f0978 <col:36> 'stbtt__active_edge *' <LValueToRValue>
|       |     |   |     |     `-DeclRefExpr 0x7fffd83f0950 <col:36> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |     |   |     `-ImplicitCastExpr 0x7fffd83f0a08 <col:51> 'float' <LValueToRValue>
|       |     |   |       `-DeclRefExpr 0x7fffd83f09c8 <col:51> 'float' lvalue Var 0x7fffd83efa28 'height' 'float'
|       |     |   `-CompoundStmt 0x7fffd83f4bd0 <line:3136:20, line:3175:13>
|       |     |     |-DeclStmt 0x7fffd83f0c48 <line:3137:16, col:27>
|       |     |     | |-VarDecl 0x7fffd83f0ad8 <col:16, col:20> col:20 used x 'int'
|       |     |     | |-VarDecl 0x7fffd83f0b50 <col:16, col:22> col:22 used x1 'int'
|       |     |     | `-VarDecl 0x7fffd83f0bc8 <col:16, col:25> col:25 used x2 'int'
|       |     |     |-DeclStmt 0x7fffd83f0ea0 <line:3138:16, col:50>
|       |     |     | |-VarDecl 0x7fffd83f0cb0 <col:16, col:22> col:22 used y_crossing 'float'
|       |     |     | |-VarDecl 0x7fffd83f0d28 <col:16, col:34> col:34 used step 'float'
|       |     |     | |-VarDecl 0x7fffd83f0da0 <col:16, col:40> col:40 used sign 'float'
|       |     |     | `-VarDecl 0x7fffd83f0e18 <col:16, col:46> col:46 used area 'float'
|       |     |     |-IfStmt 0x7fffd83f1aa0 <line:3140:16, line:3150:16>
|       |     |     | |-<<<NULL>>>
|       |     |     | |-<<<NULL>>>
|       |     |     | |-BinaryOperator 0x7fffd83f0f38 <line:3140:20, col:28> 'int' '>'
|       |     |     | | |-ImplicitCastExpr 0x7fffd83f0f08 <col:20> 'float' <LValueToRValue>
|       |     |     | | | `-DeclRefExpr 0x7fffd83f0eb8 <col:20> 'float' lvalue Var 0x7fffd83ede28 'x_top' 'float'
|       |     |     | | `-ImplicitCastExpr 0x7fffd83f0f20 <col:28> 'float' <LValueToRValue>
|       |     |     | |   `-DeclRefExpr 0x7fffd83f0ee0 <col:28> 'float' lvalue Var 0x7fffd83edea0 'x_bottom' 'float'
|       |     |     | |-CompoundStmt 0x7fffd83f1a50 <col:38, line:3150:16>
|       |     |     | | |-DeclStmt 0x7fffd83f0fd8 <line:3142:19, col:26>
|       |     |     | | | `-VarDecl 0x7fffd83f0f78 <col:19, col:25> col:25 used t 'float'
|       |     |     | | |-BinaryOperator 0x7fffd83f1148 <line:3143:19, col:48> 'float' '='
|       |     |     | | | |-DeclRefExpr 0x7fffd83f0ff0 <col:19> 'float' lvalue Var 0x7fffd83edf48 'sy0' 'float'
|       |     |     | | | `-BinaryOperator 0x7fffd83f1120 <col:25, col:48> 'float' '-'
|       |     |     | | |   |-ImplicitCastExpr 0x7fffd83f1108 <col:25> 'float' <LValueToRValue>
|       |     |     | | |   | `-DeclRefExpr 0x7fffd83f1018 <col:25> 'float' lvalue Var 0x7fffd83eb540 'y_bottom' 'float'
|       |     |     | | |   `-ParenExpr 0x7fffd83f10e8 <col:36, col:48> 'float'
|       |     |     | | |     `-BinaryOperator 0x7fffd83f10c0 <col:37, col:43> 'float' '-'
|       |     |     | | |       |-ImplicitCastExpr 0x7fffd83f1090 <col:37> 'float' <LValueToRValue>
|       |     |     | | |       | `-DeclRefExpr 0x7fffd83f1040 <col:37> 'float' lvalue Var 0x7fffd83edf48 'sy0' 'float'
|       |     |     | | |       `-ImplicitCastExpr 0x7fffd83f10a8 <col:43> 'float' <LValueToRValue>
|       |     |     | | |         `-DeclRefExpr 0x7fffd83f1068 <col:43> 'float' lvalue ParmVar 0x7fffd83eb2f8 'y_top' 'float'
|       |     |     | | |-BinaryOperator 0x7fffd83f12c8 <line:3144:19, col:48> 'float' '='
|       |     |     | | | |-DeclRefExpr 0x7fffd83f1170 <col:19> 'float' lvalue Var 0x7fffd83edfc0 'sy1' 'float'
|       |     |     | | | `-BinaryOperator 0x7fffd83f12a0 <col:25, col:48> 'float' '-'
|       |     |     | | |   |-ImplicitCastExpr 0x7fffd83f1288 <col:25> 'float' <LValueToRValue>
|       |     |     | | |   | `-DeclRefExpr 0x7fffd83f1198 <col:25> 'float' lvalue Var 0x7fffd83eb540 'y_bottom' 'float'
|       |     |     | | |   `-ParenExpr 0x7fffd83f1268 <col:36, col:48> 'float'
|       |     |     | | |     `-BinaryOperator 0x7fffd83f1240 <col:37, col:43> 'float' '-'
|       |     |     | | |       |-ImplicitCastExpr 0x7fffd83f1210 <col:37> 'float' <LValueToRValue>
|       |     |     | | |       | `-DeclRefExpr 0x7fffd83f11c0 <col:37> 'float' lvalue Var 0x7fffd83edfc0 'sy1' 'float'
|       |     |     | | |       `-ImplicitCastExpr 0x7fffd83f1228 <col:43> 'float' <LValueToRValue>
|       |     |     | | |         `-DeclRefExpr 0x7fffd83f11e8 <col:43> 'float' lvalue ParmVar 0x7fffd83eb2f8 'y_top' 'float'
|       |     |     | | |-BinaryOperator 0x7fffd83f14c8 <line:3145:19, col:45> 'float' ','
|       |     |     | | | |-BinaryOperator 0x7fffd83f1410 <col:19, col:34> 'float' ','
|       |     |     | | | | |-BinaryOperator 0x7fffd83f1358 <col:19, col:23> 'float' '='
|       |     |     | | | | | |-DeclRefExpr 0x7fffd83f12f0 <col:19> 'float' lvalue Var 0x7fffd83f0f78 't' 'float'
|       |     |     | | | | | `-ImplicitCastExpr 0x7fffd83f1340 <col:23> 'float' <LValueToRValue>
|       |     |     | | | | |   `-DeclRefExpr 0x7fffd83f1318 <col:23> 'float' lvalue Var 0x7fffd83edf48 'sy0' 'float'
|       |     |     | | | | `-BinaryOperator 0x7fffd83f13e8 <col:28, col:34> 'float' '='
|       |     |     | | | |   |-DeclRefExpr 0x7fffd83f1380 <col:28> 'float' lvalue Var 0x7fffd83edf48 'sy0' 'float'
|       |     |     | | | |   `-ImplicitCastExpr 0x7fffd83f13d0 <col:34> 'float' <LValueToRValue>
|       |     |     | | | |     `-DeclRefExpr 0x7fffd83f13a8 <col:34> 'float' lvalue Var 0x7fffd83edfc0 'sy1' 'float'
|       |     |     | | | `-BinaryOperator 0x7fffd83f14a0 <col:39, col:45> 'float' '='
|       |     |     | | |   |-DeclRefExpr 0x7fffd83f1438 <col:39> 'float' lvalue Var 0x7fffd83edfc0 'sy1' 'float'
|       |     |     | | |   `-ImplicitCastExpr 0x7fffd83f1488 <col:45> 'float' <LValueToRValue>
|       |     |     | | |     `-DeclRefExpr 0x7fffd83f1460 <col:45> 'float' lvalue Var 0x7fffd83f0f78 't' 'float'
|       |     |     | | |-BinaryOperator 0x7fffd83f16c8 <line:3146:19, col:59> 'float' ','
|       |     |     | | | |-BinaryOperator 0x7fffd83f1610 <col:19, col:44> 'float' ','
|       |     |     | | | | |-BinaryOperator 0x7fffd83f1558 <col:19, col:23> 'float' '='
|       |     |     | | | | | |-DeclRefExpr 0x7fffd83f14f0 <col:19> 'float' lvalue Var 0x7fffd83f0f78 't' 'float'
|       |     |     | | | | | `-ImplicitCastExpr 0x7fffd83f1540 <col:23> 'float' <LValueToRValue>
|       |     |     | | | | |   `-DeclRefExpr 0x7fffd83f1518 <col:23> 'float' lvalue Var 0x7fffd83edea0 'x_bottom' 'float'
|       |     |     | | | | `-BinaryOperator 0x7fffd83f15e8 <col:33, col:44> 'float' '='
|       |     |     | | | |   |-DeclRefExpr 0x7fffd83f1580 <col:33> 'float' lvalue Var 0x7fffd83edea0 'x_bottom' 'float'
|       |     |     | | | |   `-ImplicitCastExpr 0x7fffd83f15d0 <col:44> 'float' <LValueToRValue>
|       |     |     | | | |     `-DeclRefExpr 0x7fffd83f15a8 <col:44> 'float' lvalue Var 0x7fffd83ede28 'x_top' 'float'
|       |     |     | | | `-BinaryOperator 0x7fffd83f16a0 <col:51, col:59> 'float' '='
|       |     |     | | |   |-DeclRefExpr 0x7fffd83f1638 <col:51> 'float' lvalue Var 0x7fffd83ede28 'x_top' 'float'
|       |     |     | | |   `-ImplicitCastExpr 0x7fffd83f1688 <col:59> 'float' <LValueToRValue>
|       |     |     | | |     `-DeclRefExpr 0x7fffd83f1660 <col:59> 'float' lvalue Var 0x7fffd83f0f78 't' 'float'
|       |     |     | | |-BinaryOperator 0x7fffd83f1778 <line:3147:19, col:25> 'float' '='
|       |     |     | | | |-DeclRefExpr 0x7fffd83f16f0 <col:19> 'float' lvalue Var 0x7fffd83edbd0 'dx' 'float'
|       |     |     | | | `-UnaryOperator 0x7fffd83f1758 <col:24, col:25> 'float' prefix '-'
|       |     |     | | |   `-ImplicitCastExpr 0x7fffd83f1740 <col:25> 'float' <LValueToRValue>
|       |     |     | | |     `-DeclRefExpr 0x7fffd83f1718 <col:25> 'float' lvalue Var 0x7fffd83edbd0 'dx' 'float'
|       |     |     | | |-BinaryOperator 0x7fffd83f1828 <line:3148:19, col:25> 'float' '='
|       |     |     | | | |-DeclRefExpr 0x7fffd83f17a0 <col:19> 'float' lvalue Var 0x7fffd83ee068 'dy' 'float'
|       |     |     | | | `-UnaryOperator 0x7fffd83f1808 <col:24, col:25> 'float' prefix '-'
|       |     |     | | |   `-ImplicitCastExpr 0x7fffd83f17f0 <col:25> 'float' <LValueToRValue>
|       |     |     | | |     `-DeclRefExpr 0x7fffd83f17c8 <col:25> 'float' lvalue Var 0x7fffd83ee068 'dy' 'float'
|       |     |     | | `-BinaryOperator 0x7fffd83f1a28 <line:3149:19, col:41> 'float' ','
|       |     |     | |   |-BinaryOperator 0x7fffd83f1970 <col:19, col:32> 'float' ','
|       |     |     | |   | |-BinaryOperator 0x7fffd83f18b8 <col:19, col:23> 'float' '='
|       |     |     | |   | | |-DeclRefExpr 0x7fffd83f1850 <col:19> 'float' lvalue Var 0x7fffd83f0f78 't' 'float'
|       |     |     | |   | | `-ImplicitCastExpr 0x7fffd83f18a0 <col:23> 'float' <LValueToRValue>
|       |     |     | |   | |   `-DeclRefExpr 0x7fffd83f1878 <col:23> 'float' lvalue Var 0x7fffd83edab0 'x0' 'float'
|       |     |     | |   | `-BinaryOperator 0x7fffd83f1948 <col:27, col:32> 'float' '='
|       |     |     | |   |   |-DeclRefExpr 0x7fffd83f18e0 <col:27> 'float' lvalue Var 0x7fffd83edab0 'x0' 'float'
|       |     |     | |   |   `-ImplicitCastExpr 0x7fffd83f1930 <col:32> 'float' <LValueToRValue>
|       |     |     | |   |     `-DeclRefExpr 0x7fffd83f1908 <col:32> 'float' lvalue Var 0x7fffd83edcf0 'xb' 'float'
|       |     |     | |   `-BinaryOperator 0x7fffd83f1a00 <col:36, col:41> 'float' '='
|       |     |     | |     |-DeclRefExpr 0x7fffd83f1998 <col:36> 'float' lvalue Var 0x7fffd83edcf0 'xb' 'float'
|       |     |     | |     `-ImplicitCastExpr 0x7fffd83f19e8 <col:41> 'float' <LValueToRValue>
|       |     |     | |       `-DeclRefExpr 0x7fffd83f19c0 <col:41> 'float' lvalue Var 0x7fffd83f0f78 't' 'float'
|       |     |     | `-<<<NULL>>>
|       |     |     |-BinaryOperator 0x7fffd83f1b80 <line:3152:16, col:27> 'int' '='
|       |     |     | |-DeclRefExpr 0x7fffd83f1ad8 <col:16> 'int' lvalue Var 0x7fffd83f0b50 'x1' 'int'
|       |     |     | `-CStyleCastExpr 0x7fffd83f1b58 <col:21, col:27> 'int' <FloatingToIntegral>
|       |     |     |   `-ImplicitCastExpr 0x7fffd83f1b40 <col:27> 'float' <LValueToRValue>
|       |     |     |     `-DeclRefExpr 0x7fffd83f1b00 <col:27> 'float' lvalue Var 0x7fffd83ede28 'x_top' 'float'
|       |     |     |-BinaryOperator 0x7fffd83f1c50 <line:3153:16, col:27> 'int' '='
|       |     |     | |-DeclRefExpr 0x7fffd83f1ba8 <col:16> 'int' lvalue Var 0x7fffd83f0bc8 'x2' 'int'
|       |     |     | `-CStyleCastExpr 0x7fffd83f1c28 <col:21, col:27> 'int' <FloatingToIntegral>
|       |     |     |   `-ImplicitCastExpr 0x7fffd83f1c10 <col:27> 'float' <LValueToRValue>
|       |     |     |     `-DeclRefExpr 0x7fffd83f1bd0 <col:27> 'float' lvalue Var 0x7fffd83edea0 'x_bottom' 'float'
|       |     |     |-BinaryOperator 0x7fffd83f1e98 <line:3155:16, col:48> 'float' '='
|       |     |     | |-DeclRefExpr 0x7fffd83f1c78 <col:16> 'float' lvalue Var 0x7fffd83f0cb0 'y_crossing' 'float'
|       |     |     | `-BinaryOperator 0x7fffd83f1e70 <col:29, col:48> 'float' '+'
|       |     |     |   |-BinaryOperator 0x7fffd83f1e08 <col:29, col:43> 'float' '*'
|       |     |     |   | |-ParenExpr 0x7fffd83f1da8 <col:29, col:39> 'float'
|       |     |     |   | | `-BinaryOperator 0x7fffd83f1d80 <col:30, col:37> 'float' '-'
|       |     |     |   | |   |-ImplicitCastExpr 0x7fffd83f1d68 <col:30, col:33> 'float' <IntegralToFloating>
|       |     |     |   | |   | `-BinaryOperator 0x7fffd83f1d00 <col:30, col:33> 'int' '+'
|       |     |     |   | |   |   |-ImplicitCastExpr 0x7fffd83f1ce8 <col:30> 'int' <LValueToRValue>
|       |     |     |   | |   |   | `-DeclRefExpr 0x7fffd83f1ca0 <col:30> 'int' lvalue Var 0x7fffd83f0b50 'x1' 'int'
|       |     |     |   | |   |   `-IntegerLiteral 0x7fffd83f1cc8 <col:33> 'int' 1
|       |     |     |   | |   `-ImplicitCastExpr 0x7fffd83f1d50 <col:37> 'float' <LValueToRValue>
|       |     |     |   | |     `-DeclRefExpr 0x7fffd83f1d28 <col:37> 'float' lvalue Var 0x7fffd83edab0 'x0' 'float'
|       |     |     |   | `-ImplicitCastExpr 0x7fffd83f1df0 <col:43> 'float' <LValueToRValue>
|       |     |     |   |   `-DeclRefExpr 0x7fffd83f1dc8 <col:43> 'float' lvalue Var 0x7fffd83ee068 'dy' 'float'
|       |     |     |   `-ImplicitCastExpr 0x7fffd83f1e58 <col:48> 'float' <LValueToRValue>
|       |     |     |     `-DeclRefExpr 0x7fffd83f1e30 <col:48> 'float' lvalue ParmVar 0x7fffd83eb2f8 'y_top' 'float'
|       |     |     |-BinaryOperator 0x7fffd83f1f78 <line:3157:16, col:26> 'float' '='
|       |     |     | |-DeclRefExpr 0x7fffd83f1ec0 <col:16> 'float' lvalue Var 0x7fffd83f0da0 'sign' 'float'
|       |     |     | `-ImplicitCastExpr 0x7fffd83f1f60 <col:23, col:26> 'float' <LValueToRValue>
|       |     |     |   `-MemberExpr 0x7fffd83f1f28 <col:23, col:26> 'float' lvalue ->direction 0x7fffd83e1ab0
|       |     |     |     `-ImplicitCastExpr 0x7fffd83f1f10 <col:23> 'stbtt__active_edge *' <LValueToRValue>
|       |     |     |       `-DeclRefExpr 0x7fffd83f1ee8 <col:23> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |     |     |-BinaryOperator 0x7fffd83f20f8 <line:3159:16, col:45> 'float' '='
|       |     |     | |-DeclRefExpr 0x7fffd83f1fa0 <col:16> 'float' lvalue Var 0x7fffd83f0e18 'area' 'float'
|       |     |     | `-BinaryOperator 0x7fffd83f20d0 <col:23, col:45> 'float' '*'
|       |     |     |   |-ImplicitCastExpr 0x7fffd83f20b8 <col:23> 'float' <LValueToRValue>
|       |     |     |   | `-DeclRefExpr 0x7fffd83f1fc8 <col:23> 'float' lvalue Var 0x7fffd83f0da0 'sign' 'float'
|       |     |     |   `-ParenExpr 0x7fffd83f2098 <col:30, col:45> 'float'
|       |     |     |     `-BinaryOperator 0x7fffd83f2070 <col:31, col:42> 'float' '-'
|       |     |     |       |-ImplicitCastExpr 0x7fffd83f2040 <col:31> 'float' <LValueToRValue>
|       |     |     |       | `-DeclRefExpr 0x7fffd83f1ff0 <col:31> 'float' lvalue Var 0x7fffd83f0cb0 'y_crossing' 'float'
|       |     |     |       `-ImplicitCastExpr 0x7fffd83f2058 <col:42> 'float' <LValueToRValue>
|       |     |     |         `-DeclRefExpr 0x7fffd83f2018 <col:42> 'float' lvalue Var 0x7fffd83edf48 'sy0' 'float'
|       |     |     |-CompoundAssignOperator 0x7fffd83f2560 <line:3161:16, col:68> 'float' '+=' ComputeLHSTy='float' ComputeResultTy='float'
|       |     |     | |-ArraySubscriptExpr 0x7fffd83f21a0 <col:16, col:27> 'float' lvalue
|       |     |     | | |-ImplicitCastExpr 0x7fffd83f2170 <col:16> 'float *' <LValueToRValue>
|       |     |     | | | `-DeclRefExpr 0x7fffd83f2120 <col:16> 'float *' lvalue ParmVar 0x7fffd83eb120 'scanline' 'float *'
|       |     |     | | `-ImplicitCastExpr 0x7fffd83f2188 <col:25> 'int' <LValueToRValue>
|       |     |     | |   `-DeclRefExpr 0x7fffd83f2148 <col:25> 'int' lvalue Var 0x7fffd83f0b50 'x1' 'int'
|       |     |     | `-BinaryOperator 0x7fffd83f2538 <col:32, col:68> 'float' '*'
|       |     |     |   |-ImplicitCastExpr 0x7fffd83f2520 <col:32> 'float' <LValueToRValue>
|       |     |     |   | `-DeclRefExpr 0x7fffd83f21c8 <col:32> 'float' lvalue Var 0x7fffd83f0e18 'area' 'float'
|       |     |     |   `-ParenExpr 0x7fffd83f2500 <col:39, col:68> 'float'
|       |     |     |     `-BinaryOperator 0x7fffd83f24d8 <col:40, col:67> 'float' '-'
|       |     |     |       |-ImplicitCastExpr 0x7fffd83f24c0 <col:40> 'float' <IntegralToFloating>
|       |     |     |       | `-IntegerLiteral 0x7fffd83f21f0 <col:40> 'int' 1
|       |     |     |       `-BinaryOperator 0x7fffd83f2498 <col:42, col:67> 'float' '/'
|       |     |     |         |-ParenExpr 0x7fffd83f2440 <col:42, col:65> 'float'
|       |     |     |         | `-BinaryOperator 0x7fffd83f2418 <col:43, col:64> 'float' '+'
|       |     |     |         |   |-ParenExpr 0x7fffd83f22d0 <col:43, col:54> 'float'
|       |     |     |         |   | `-BinaryOperator 0x7fffd83f22a8 <col:44, col:52> 'float' '-'
|       |     |     |         |   |   |-ImplicitCastExpr 0x7fffd83f2260 <col:44> 'float' <LValueToRValue>
|       |     |     |         |   |   | `-DeclRefExpr 0x7fffd83f2210 <col:44> 'float' lvalue Var 0x7fffd83ede28 'x_top' 'float'
|       |     |     |         |   |   `-ImplicitCastExpr 0x7fffd83f2290 <col:52> 'float' <IntegralToFloating>
|       |     |     |         |   |     `-ImplicitCastExpr 0x7fffd83f2278 <col:52> 'int' <LValueToRValue>
|       |     |     |         |   |       `-DeclRefExpr 0x7fffd83f2238 <col:52> 'int' lvalue Var 0x7fffd83f0b50 'x1' 'int'
|       |     |     |         |   `-ImplicitCastExpr 0x7fffd83f2400 <col:56, col:64> 'float' <IntegralToFloating>
|       |     |     |         |     `-ParenExpr 0x7fffd83f23e0 <col:56, col:64> 'int'
|       |     |     |         |       `-BinaryOperator 0x7fffd83f23b8 <col:57, col:62> 'int' '-'
|       |     |     |         |         |-BinaryOperator 0x7fffd83f2350 <col:57, col:60> 'int' '+'
|       |     |     |         |         | |-ImplicitCastExpr 0x7fffd83f2338 <col:57> 'int' <LValueToRValue>
|       |     |     |         |         | | `-DeclRefExpr 0x7fffd83f22f0 <col:57> 'int' lvalue Var 0x7fffd83f0b50 'x1' 'int'
|       |     |     |         |         | `-IntegerLiteral 0x7fffd83f2318 <col:60> 'int' 1
|       |     |     |         |         `-ImplicitCastExpr 0x7fffd83f23a0 <col:62> 'int' <LValueToRValue>
|       |     |     |         |           `-DeclRefExpr 0x7fffd83f2378 <col:62> 'int' lvalue Var 0x7fffd83f0b50 'x1' 'int'
|       |     |     |         `-ImplicitCastExpr 0x7fffd83f2480 <col:67> 'float' <IntegralToFloating>
|       |     |     |           `-IntegerLiteral 0x7fffd83f2460 <col:67> 'int' 2
|       |     |     |-BinaryOperator 0x7fffd83f2668 <line:3163:16, col:30> 'float' '='
|       |     |     | |-DeclRefExpr 0x7fffd83f2598 <col:16> 'float' lvalue Var 0x7fffd83f0d28 'step' 'float'
|       |     |     | `-BinaryOperator 0x7fffd83f2640 <col:23, col:30> 'float' '*'
|       |     |     |   |-ImplicitCastExpr 0x7fffd83f2610 <col:23> 'float' <LValueToRValue>
|       |     |     |   | `-DeclRefExpr 0x7fffd83f25c0 <col:23> 'float' lvalue Var 0x7fffd83f0da0 'sign' 'float'
|       |     |     |   `-ImplicitCastExpr 0x7fffd83f2628 <col:30> 'float' <LValueToRValue>
|       |     |     |     `-DeclRefExpr 0x7fffd83f25e8 <col:30> 'float' lvalue Var 0x7fffd83ee068 'dy' 'float'
|       |     |     |-ForStmt 0x7fffd83f2b00 <line:3164:16, line:3167:16>
|       |     |     | |-BinaryOperator 0x7fffd83f2740 <line:3164:21, col:28> 'int' '='
|       |     |     | | |-DeclRefExpr 0x7fffd83f2690 <col:21> 'int' lvalue Var 0x7fffd83f0ad8 'x' 'int'
|       |     |     | | `-BinaryOperator 0x7fffd83f2718 <col:25, col:28> 'int' '+'
|       |     |     | |   |-ImplicitCastExpr 0x7fffd83f2700 <col:25> 'int' <LValueToRValue>
|       |     |     | |   | `-DeclRefExpr 0x7fffd83f26b8 <col:25> 'int' lvalue Var 0x7fffd83f0b50 'x1' 'int'
|       |     |     | |   `-IntegerLiteral 0x7fffd83f26e0 <col:28> 'int' 1
|       |     |     | |-<<<NULL>>>
|       |     |     | |-BinaryOperator 0x7fffd83f27e8 <col:31, col:35> 'int' '<'
|       |     |     | | |-ImplicitCastExpr 0x7fffd83f27b8 <col:31> 'int' <LValueToRValue>
|       |     |     | | | `-DeclRefExpr 0x7fffd83f2768 <col:31> 'int' lvalue Var 0x7fffd83f0ad8 'x' 'int'
|       |     |     | | `-ImplicitCastExpr 0x7fffd83f27d0 <col:35> 'int' <LValueToRValue>
|       |     |     | |   `-DeclRefExpr 0x7fffd83f2790 <col:35> 'int' lvalue Var 0x7fffd83f0bc8 'x2' 'int'
|       |     |     | |-UnaryOperator 0x7fffd83f2838 <col:39, col:41> 'int' prefix '++'
|       |     |     | | `-DeclRefExpr 0x7fffd83f2810 <col:41> 'int' lvalue Var 0x7fffd83f0ad8 'x' 'int'
|       |     |     | `-CompoundStmt 0x7fffd83f2ae0 <col:44, line:3167:16>
|       |     |     |   |-CompoundAssignOperator 0x7fffd83f2a08 <line:3165:19, col:46> 'float' '+=' ComputeLHSTy='float' ComputeResultTy='float'
|       |     |     |   | |-ArraySubscriptExpr 0x7fffd83f28d8 <col:19, col:29> 'float' lvalue
|       |     |     |   | | |-ImplicitCastExpr 0x7fffd83f28a8 <col:19> 'float *' <LValueToRValue>
|       |     |     |   | | | `-DeclRefExpr 0x7fffd83f2858 <col:19> 'float *' lvalue ParmVar 0x7fffd83eb120 'scanline' 'float *'
|       |     |     |   | | `-ImplicitCastExpr 0x7fffd83f28c0 <col:28> 'int' <LValueToRValue>
|       |     |     |   | |   `-DeclRefExpr 0x7fffd83f2880 <col:28> 'int' lvalue Var 0x7fffd83f0ad8 'x' 'int'
|       |     |     |   | `-BinaryOperator 0x7fffd83f29e0 <col:34, col:46> 'float' '+'
|       |     |     |   |   |-ImplicitCastExpr 0x7fffd83f29c8 <col:34> 'float' <LValueToRValue>
|       |     |     |   |   | `-DeclRefExpr 0x7fffd83f2900 <col:34> 'float' lvalue Var 0x7fffd83f0e18 'area' 'float'
|       |     |     |   |   `-BinaryOperator 0x7fffd83f29a0 <col:41, col:46> 'float' '/'
|       |     |     |   |     |-ImplicitCastExpr 0x7fffd83f2970 <col:41> 'float' <LValueToRValue>
|       |     |     |   |     | `-DeclRefExpr 0x7fffd83f2928 <col:41> 'float' lvalue Var 0x7fffd83f0d28 'step' 'float'
|       |     |     |   |     `-ImplicitCastExpr 0x7fffd83f2988 <col:46> 'float' <IntegralToFloating>
|       |     |     |   |       `-IntegerLiteral 0x7fffd83f2950 <col:46> 'int' 2
|       |     |     |   `-CompoundAssignOperator 0x7fffd83f2aa8 <line:3166:19, col:27> 'float' '+=' ComputeLHSTy='float' ComputeResultTy='float'
|       |     |     |     |-DeclRefExpr 0x7fffd83f2a40 <col:19> 'float' lvalue Var 0x7fffd83f0e18 'area' 'float'
|       |     |     |     `-ImplicitCastExpr 0x7fffd83f2a90 <col:27> 'float' <LValueToRValue>
|       |     |     |       `-DeclRefExpr 0x7fffd83f2a68 <col:27> 'float' lvalue Var 0x7fffd83f0d28 'step' 'float'
|       |     |     |-CompoundAssignOperator 0x7fffd83f3d48 <line:3168:16, col:47> 'float' '+=' ComputeLHSTy='float' ComputeResultTy='float'
|       |     |     | |-DeclRefExpr 0x7fffd83f2b38 <col:16> 'float' lvalue Var 0x7fffd83f0cb0 'y_crossing' 'float'
|       |     |     | `-BinaryOperator 0x7fffd83f3d20 <col:30, col:47> 'float' '*'
|       |     |     |   |-ImplicitCastExpr 0x7fffd83f3cf0 <col:30> 'float' <LValueToRValue>
|       |     |     |   | `-DeclRefExpr 0x7fffd83f2b60 <col:30> 'float' lvalue Var 0x7fffd83ee068 'dy' 'float'
|       |     |     |   `-ImplicitCastExpr 0x7fffd83f3d08 <col:35, col:47> 'float' <IntegralToFloating>
|       |     |     |     `-ParenExpr 0x7fffd83f3cd0 <col:35, col:47> 'int'
|       |     |     |       `-BinaryOperator 0x7fffd83f2c70 <col:36, col:46> 'int' '-'
|       |     |     |         |-ImplicitCastExpr 0x7fffd83f2c58 <col:36> 'int' <LValueToRValue>
|       |     |     |         | `-DeclRefExpr 0x7fffd83f2b88 <col:36> 'int' lvalue Var 0x7fffd83f0bc8 'x2' 'int'
|       |     |     |         `-ParenExpr 0x7fffd83f2c38 <col:41, col:46> 'int'
|       |     |     |           `-BinaryOperator 0x7fffd83f2c10 <col:42, col:45> 'int' '+'
|       |     |     |             |-ImplicitCastExpr 0x7fffd83f2bf8 <col:42> 'int' <LValueToRValue>
|       |     |     |             | `-DeclRefExpr 0x7fffd83f2bb0 <col:42> 'int' lvalue Var 0x7fffd83f0b50 'x1' 'int'
|       |     |     |             `-IntegerLiteral 0x7fffd83f2bd8 <col:45> 'int' 1
|       |     |     |-ParenExpr 0x7fffd83f4418 </usr/include/assert.h:108:3, line:113:7> 'void'
|       |     |     | `-BinaryOperator 0x7fffd83f43f0 <line:108:4, line:113:6> 'void' ','
|       |     |     |   |-CStyleCastExpr 0x7fffd83f3f88 <line:108:4, col:33> 'void' <ToVoid>
|       |     |     |   | `-UnaryExprOrTypeTraitExpr 0x7fffd83f3f58 <col:11, col:33> 'unsigned long' sizeof
|       |     |     |   |   `-ParenExpr 0x7fffd83f3f38 <col:18, col:33> 'int'
|       |     |     |   |     `-ConditionalOperator 0x7fffd83f3f08 <col:19, col:32> 'int'
|       |     |     |   |       |-ParenExpr 0x7fffd83f3ea8 <col:19, col:24> 'int'
|       |     |     |   |       | `-BinaryOperator 0x7fffd83f3e80 <././stb/stb_truetype.h:461:31, line:3170:49> 'int' '<='
|       |     |     |   |       |   |-CallExpr 0x7fffd83f3de8 <line:461:31, col:37> 'double'
|       |     |     |   |       |   | |-ImplicitCastExpr 0x7fffd83f3dd0 <col:31> 'double (*)(double)' <FunctionToPointerDecay>
|       |     |     |   |       |   | | `-DeclRefExpr 0x7fffd83f3d80 <col:31> 'double (double)' Function 0x7fffd82913a0 'fabs' 'double (double)'
|       |     |     |   |       |   | `-ImplicitCastExpr 0x7fffd83f3e30 <line:3170:40> 'double' <FloatingCast>
|       |     |     |   |       |   |   `-ImplicitCastExpr 0x7fffd83f3e18 <col:40> 'float' <LValueToRValue>
|       |     |     |   |       |   |     `-DeclRefExpr 0x7fffd83f3da8 <col:40> 'float' lvalue Var 0x7fffd83f0e18 'area' 'float'
|       |     |     |   |       |   `-ImplicitCastExpr 0x7fffd83f3e68 <col:49> 'double' <FloatingCast>
|       |     |     |   |       |     `-FloatingLiteral 0x7fffd83f3e48 <col:49> 'float' 1.010000e+00
|       |     |     |   |       |-IntegerLiteral 0x7fffd83f3ec8 </usr/include/assert.h:108:28> 'int' 1
|       |     |     |   |       `-IntegerLiteral 0x7fffd83f3ee8 <col:32> 'int' 0
|       |     |     |   `-UnaryOperator 0x7fffd83f43d0 <col:36, line:113:6> 'void' prefix '__extension__'
|       |     |     |     `-StmtExpr 0x7fffd83f43b0 <line:108:50, line:113:6> 'void'
|       |     |     |       `-CompoundStmt 0x7fffd83f4398 <line:108:51, line:113:5>
|       |     |     |         `-IfStmt 0x7fffd83f4360 <line:109:7, line:112:68>
|       |     |     |           |-<<<NULL>>>
|       |     |     |           |-<<<NULL>>>
|       |     |     |           |-BinaryOperator 0x7fffd83f40b0 <././stb/stb_truetype.h:461:31, line:3170:49> 'int' '<='
|       |     |     |           | |-CallExpr 0x7fffd83f4018 <line:461:31, col:37> 'double'
|       |     |     |           | | |-ImplicitCastExpr 0x7fffd83f4000 <col:31> 'double (*)(double)' <FunctionToPointerDecay>
|       |     |     |           | | | `-DeclRefExpr 0x7fffd83f3fb0 <col:31> 'double (double)' Function 0x7fffd82913a0 'fabs' 'double (double)'
|       |     |     |           | | `-ImplicitCastExpr 0x7fffd83f4060 <line:3170:40> 'double' <FloatingCast>
|       |     |     |           | |   `-ImplicitCastExpr 0x7fffd83f4048 <col:40> 'float' <LValueToRValue>
|       |     |     |           | |     `-DeclRefExpr 0x7fffd83f3fd8 <col:40> 'float' lvalue Var 0x7fffd83f0e18 'area' 'float'
|       |     |     |           | `-ImplicitCastExpr 0x7fffd83f4098 <col:49> 'double' <FloatingCast>
|       |     |     |           |   `-FloatingLiteral 0x7fffd83f4078 <col:49> 'float' 1.010000e+00
|       |     |     |           |-NullStmt 0x7fffd83f40d8 </usr/include/assert.h:110:9>
|       |     |     |           `-CallExpr 0x7fffd83f4288 <line:112:9, col:68> 'void'
|       |     |     |             |-ImplicitCastExpr 0x7fffd83f4270 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|       |     |     |             | `-DeclRefExpr 0x7fffd83f40e8 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|       |     |     |             |-ImplicitCastExpr 0x7fffd83f42e8 <<scratch space>:13:1> 'const char *' <BitCast>
|       |     |     |             | `-ImplicitCastExpr 0x7fffd83f42d0 <col:1> 'char *' <ArrayToPointerDecay>
|       |     |     |             |   `-StringLiteral 0x7fffd83f4110 <col:1> 'char [20]' lvalue "fabs(area) <= 1.01f"
|       |     |     |             |-ImplicitCastExpr 0x7fffd83f4318 <line:14:1> 'const char *' <BitCast>
|       |     |     |             | `-ImplicitCastExpr 0x7fffd83f4300 <col:1> 'char *' <ArrayToPointerDecay>
|       |     |     |             |   `-StringLiteral 0x7fffd83f4150 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|       |     |     |             |-ImplicitCastExpr 0x7fffd83f4330 <line:15:1> 'unsigned int' <IntegralCast>
|       |     |     |             | `-IntegerLiteral 0x7fffd83f4190 <col:1> 'int' 3170
|       |     |     |             `-ImplicitCastExpr 0x7fffd83f4348 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|       |     |     |               `-UnaryOperator 0x7fffd83f4250 <col:30, col:44> 'const char [86]' lvalue prefix '__extension__'
|       |     |     |                 `-PredefinedExpr 0x7fffd83f4230 <col:44> 'const char [86]' lvalue __PRETTY_FUNCTION__
|       |     |     |                   `-StringLiteral 0x7fffd83f41b0 <col:44> 'const char [86]' lvalue "void stbtt__fill_active_edges_new(float *, float *, int, stbtt__active_edge *, float)"
|       |     |     |-CompoundAssignOperator 0x7fffd83f4988 <././stb/stb_truetype.h:3172:16, col:93> 'float' '+=' ComputeLHSTy='float' ComputeResultTy='float'
|       |     |     | |-ArraySubscriptExpr 0x7fffd83f44b8 <col:16, col:27> 'float' lvalue
|       |     |     | | |-ImplicitCastExpr 0x7fffd83f4488 <col:16> 'float *' <LValueToRValue>
|       |     |     | | | `-DeclRefExpr 0x7fffd83f4438 <col:16> 'float *' lvalue ParmVar 0x7fffd83eb120 'scanline' 'float *'
|       |     |     | | `-ImplicitCastExpr 0x7fffd83f44a0 <col:25> 'int' <LValueToRValue>
|       |     |     | |   `-DeclRefExpr 0x7fffd83f4460 <col:25> 'int' lvalue Var 0x7fffd83f0bc8 'x2' 'int'
|       |     |     | `-BinaryOperator 0x7fffd83f4960 <col:32, col:93> 'float' '+'
|       |     |     |   |-ImplicitCastExpr 0x7fffd83f4948 <col:32> 'float' <LValueToRValue>
|       |     |     |   | `-DeclRefExpr 0x7fffd83f44e0 <col:32> 'float' lvalue Var 0x7fffd83f0e18 'area' 'float'
|       |     |     |   `-BinaryOperator 0x7fffd83f4920 <col:39, col:93> 'float' '*'
|       |     |     |     |-BinaryOperator 0x7fffd83f4830 <col:39, col:74> 'float' '*'
|       |     |     |     | |-ImplicitCastExpr 0x7fffd83f4818 <col:39> 'float' <LValueToRValue>
|       |     |     |     | | `-DeclRefExpr 0x7fffd83f4508 <col:39> 'float' lvalue Var 0x7fffd83f0da0 'sign' 'float'
|       |     |     |     | `-ParenExpr 0x7fffd83f47f8 <col:46, col:74> 'float'
|       |     |     |     |   `-BinaryOperator 0x7fffd83f47d0 <col:47, col:73> 'float' '-'
|       |     |     |     |     |-ImplicitCastExpr 0x7fffd83f47b8 <col:47> 'float' <IntegralToFloating>
|       |     |     |     |     | `-IntegerLiteral 0x7fffd83f4530 <col:47> 'int' 1
|       |     |     |     |     `-BinaryOperator 0x7fffd83f4790 <col:49, col:73> 'float' '/'
|       |     |     |     |       |-ParenExpr 0x7fffd83f4738 <col:49, col:71> 'float'
|       |     |     |     |       | `-BinaryOperator 0x7fffd83f4710 <col:50, col:70> 'float' '+'
|       |     |     |     |       |   |-ImplicitCastExpr 0x7fffd83f46f8 <col:50, col:56> 'float' <IntegralToFloating>
|       |     |     |     |       |   | `-ParenExpr 0x7fffd83f45f8 <col:50, col:56> 'int'
|       |     |     |     |       |   |   `-BinaryOperator 0x7fffd83f45d0 <col:51, col:54> 'int' '-'
|       |     |     |     |       |   |     |-ImplicitCastExpr 0x7fffd83f45a0 <col:51> 'int' <LValueToRValue>
|       |     |     |     |       |   |     | `-DeclRefExpr 0x7fffd83f4550 <col:51> 'int' lvalue Var 0x7fffd83f0bc8 'x2' 'int'
|       |     |     |     |       |   |     `-ImplicitCastExpr 0x7fffd83f45b8 <col:54> 'int' <LValueToRValue>
|       |     |     |     |       |   |       `-DeclRefExpr 0x7fffd83f4578 <col:54> 'int' lvalue Var 0x7fffd83f0bc8 'x2' 'int'
|       |     |     |     |       |   `-ParenExpr 0x7fffd83f46d8 <col:58, col:70> 'float'
|       |     |     |     |       |     `-BinaryOperator 0x7fffd83f46b0 <col:59, col:68> 'float' '-'
|       |     |     |     |       |       |-ImplicitCastExpr 0x7fffd83f4668 <col:59> 'float' <LValueToRValue>
|       |     |     |     |       |       | `-DeclRefExpr 0x7fffd83f4618 <col:59> 'float' lvalue Var 0x7fffd83edea0 'x_bottom' 'float'
|       |     |     |     |       |       `-ImplicitCastExpr 0x7fffd83f4698 <col:68> 'float' <IntegralToFloating>
|       |     |     |     |       |         `-ImplicitCastExpr 0x7fffd83f4680 <col:68> 'int' <LValueToRValue>
|       |     |     |     |       |           `-DeclRefExpr 0x7fffd83f4640 <col:68> 'int' lvalue Var 0x7fffd83f0bc8 'x2' 'int'
|       |     |     |     |       `-ImplicitCastExpr 0x7fffd83f4778 <col:73> 'float' <IntegralToFloating>
|       |     |     |     |         `-IntegerLiteral 0x7fffd83f4758 <col:73> 'int' 2
|       |     |     |     `-ParenExpr 0x7fffd83f4900 <col:78, col:93> 'float'
|       |     |     |       `-BinaryOperator 0x7fffd83f48d8 <col:79, col:83> 'float' '-'
|       |     |     |         |-ImplicitCastExpr 0x7fffd83f48a8 <col:79> 'float' <LValueToRValue>
|       |     |     |         | `-DeclRefExpr 0x7fffd83f4858 <col:79> 'float' lvalue Var 0x7fffd83edfc0 'sy1' 'float'
|       |     |     |         `-ImplicitCastExpr 0x7fffd83f48c0 <col:83> 'float' <LValueToRValue>
|       |     |     |           `-DeclRefExpr 0x7fffd83f4880 <col:83> 'float' lvalue Var 0x7fffd83f0cb0 'y_crossing' 'float'
|       |     |     `-CompoundAssignOperator 0x7fffd83f4b98 <line:3174:16, col:52> 'float' '+=' ComputeLHSTy='float' ComputeResultTy='float'
|       |     |       |-ArraySubscriptExpr 0x7fffd83f4a40 <col:16, col:32> 'float' lvalue
|       |     |       | |-ImplicitCastExpr 0x7fffd83f4a10 <col:16> 'float *' <LValueToRValue>
|       |     |       | | `-DeclRefExpr 0x7fffd83f49c0 <col:16> 'float *' lvalue ParmVar 0x7fffd83eb198 'scanline_fill' 'float *'
|       |     |       | `-ImplicitCastExpr 0x7fffd83f4a28 <col:30> 'int' <LValueToRValue>
|       |     |       |   `-DeclRefExpr 0x7fffd83f49e8 <col:30> 'int' lvalue Var 0x7fffd83f0bc8 'x2' 'int'
|       |     |       `-BinaryOperator 0x7fffd83f4b70 <col:37, col:52> 'float' '*'
|       |     |         |-ImplicitCastExpr 0x7fffd83f4b58 <col:37> 'float' <LValueToRValue>
|       |     |         | `-DeclRefExpr 0x7fffd83f4a68 <col:37> 'float' lvalue Var 0x7fffd83f0da0 'sign' 'float'
|       |     |         `-ParenExpr 0x7fffd83f4b38 <col:44, col:52> 'float'
|       |     |           `-BinaryOperator 0x7fffd83f4b10 <col:45, col:49> 'float' '-'
|       |     |             |-ImplicitCastExpr 0x7fffd83f4ae0 <col:45> 'float' <LValueToRValue>
|       |     |             | `-DeclRefExpr 0x7fffd83f4a90 <col:45> 'float' lvalue Var 0x7fffd83edfc0 'sy1' 'float'
|       |     |             `-ImplicitCastExpr 0x7fffd83f4af8 <col:49> 'float' <LValueToRValue>
|       |     |               `-DeclRefExpr 0x7fffd83f4ab8 <col:49> 'float' lvalue Var 0x7fffd83edf48 'sy0' 'float'
|       |     `-CompoundStmt 0x7fffd83f8848 <line:3176:17, line:3233:10>
|       |       |-DeclStmt 0x7fffd83f4d20 <line:3181:13, col:18>
|       |       | `-VarDecl 0x7fffd83f4cc0 <col:13, col:17> col:17 used x 'int'
|       |       `-ForStmt 0x7fffd83f8810 <line:3182:13, line:3232:13>
|       |         |-BinaryOperator 0x7fffd83f4d80 <line:3182:18, col:20> 'int' '='
|       |         | |-DeclRefExpr 0x7fffd83f4d38 <col:18> 'int' lvalue Var 0x7fffd83f4cc0 'x' 'int'
|       |         | `-IntegerLiteral 0x7fffd83f4d60 <col:20> 'int' 0
|       |         |-<<<NULL>>>
|       |         |-BinaryOperator 0x7fffd83f4e28 <col:23, col:27> 'int' '<'
|       |         | |-ImplicitCastExpr 0x7fffd83f4df8 <col:23> 'int' <LValueToRValue>
|       |         | | `-DeclRefExpr 0x7fffd83f4da8 <col:23> 'int' lvalue Var 0x7fffd83f4cc0 'x' 'int'
|       |         | `-ImplicitCastExpr 0x7fffd83f4e10 <col:27> 'int' <LValueToRValue>
|       |         |   `-DeclRefExpr 0x7fffd83f4dd0 <col:27> 'int' lvalue ParmVar 0x7fffd83eb210 'len' 'int'
|       |         |-UnaryOperator 0x7fffd83f4e78 <col:32, col:34> 'int' prefix '++'
|       |         | `-DeclRefExpr 0x7fffd83f4e50 <col:34> 'int' lvalue Var 0x7fffd83f4cc0 'x' 'int'
|       |         `-CompoundStmt 0x7fffd83f87c0 <col:37, line:3232:13>
|       |           |-DeclStmt 0x7fffd83f4f50 <line:3197:16, col:32>
|       |           | `-VarDecl 0x7fffd83f4eb0 <col:16, col:27> col:22 used y0 'float' cinit
|       |           |   `-ImplicitCastExpr 0x7fffd83f4f38 <col:27> 'float' <LValueToRValue>
|       |           |     `-DeclRefExpr 0x7fffd83f4f10 <col:27> 'float' lvalue ParmVar 0x7fffd83eb2f8 'y_top' 'float'
|       |           |-DeclStmt 0x7fffd83f50b0 <line:3198:16, col:38>
|       |           | `-VarDecl 0x7fffd83f4f80 <col:16, col:37> col:22 used x1 'float' cinit
|       |           |   `-CStyleCastExpr 0x7fffd83f5088 <col:27, col:37> 'float' <IntegralToFloating>
|       |           |     `-ImplicitCastExpr 0x7fffd83f5070 <col:35, col:37> 'int' <LValueToRValue>
|       |           |       `-ParenExpr 0x7fffd83f5050 <col:35, col:37> 'int' lvalue
|       |           |         `-DeclRefExpr 0x7fffd83f4fe0 <col:36> 'int' lvalue Var 0x7fffd83f4cc0 'x' 'int'
|       |           |-DeclStmt 0x7fffd83f5258 <line:3199:16, col:40>
|       |           | `-VarDecl 0x7fffd83f50e0 <col:16, col:39> col:22 used x2 'float' cinit
|       |           |   `-CStyleCastExpr 0x7fffd83f5230 <col:27, col:39> 'float' <IntegralToFloating>
|       |           |     `-ParenExpr 0x7fffd83f5210 <col:35, col:39> 'int'
|       |           |       `-BinaryOperator 0x7fffd83f51a0 <col:36, col:38> 'int' '+'
|       |           |         |-ImplicitCastExpr 0x7fffd83f5188 <col:36> 'int' <LValueToRValue>
|       |           |         | `-DeclRefExpr 0x7fffd83f5140 <col:36> 'int' lvalue Var 0x7fffd83f4cc0 'x' 'int'
|       |           |         `-IntegerLiteral 0x7fffd83f5168 <col:38> 'int' 1
|       |           |-DeclStmt 0x7fffd83f5328 <line:3200:16, col:29>
|       |           | `-VarDecl 0x7fffd83f5288 <col:16, col:27> col:22 used x3 'float' cinit
|       |           |   `-ImplicitCastExpr 0x7fffd83f5310 <col:27> 'float' <LValueToRValue>
|       |           |     `-DeclRefExpr 0x7fffd83f52e8 <col:27> 'float' lvalue Var 0x7fffd83edcf0 'xb' 'float'
|       |           |-DeclStmt 0x7fffd83f53f8 <line:3201:16, col:35>
|       |           | `-VarDecl 0x7fffd83f5358 <col:16, col:27> col:22 used y3 'float' cinit
|       |           |   `-ImplicitCastExpr 0x7fffd83f53e0 <col:27> 'float' <LValueToRValue>
|       |           |     `-DeclRefExpr 0x7fffd83f53b8 <col:27> 'float' lvalue Var 0x7fffd83eb540 'y_bottom' 'float'
|       |           |-DeclStmt 0x7fffd83f5638 <line:3206:16, col:48>
|       |           | `-VarDecl 0x7fffd83f5428 <col:16, col:43> col:22 used y1 'float' cinit
|       |           |   `-BinaryOperator 0x7fffd83f5610 <col:27, col:43> 'float' '+'
|       |           |     |-BinaryOperator 0x7fffd83f55a8 <col:27, col:38> 'float' '/'
|       |           |     | |-ParenExpr 0x7fffd83f5548 <col:27, col:34> 'float'
|       |           |     | | `-BinaryOperator 0x7fffd83f5520 <col:28, col:32> 'float' '-'
|       |           |     | |   |-ImplicitCastExpr 0x7fffd83f5508 <col:28> 'float' <IntegralToFloating>
|       |           |     | |   | `-ImplicitCastExpr 0x7fffd83f54d8 <col:28> 'int' <LValueToRValue>
|       |           |     | |   |   `-DeclRefExpr 0x7fffd83f5488 <col:28> 'int' lvalue Var 0x7fffd83f4cc0 'x' 'int'
|       |           |     | |   `-ImplicitCastExpr 0x7fffd83f54f0 <col:32> 'float' <LValueToRValue>
|       |           |     | |     `-DeclRefExpr 0x7fffd83f54b0 <col:32> 'float' lvalue Var 0x7fffd83edab0 'x0' 'float'
|       |           |     | `-ImplicitCastExpr 0x7fffd83f5590 <col:38> 'float' <LValueToRValue>
|       |           |     |   `-DeclRefExpr 0x7fffd83f5568 <col:38> 'float' lvalue Var 0x7fffd83edbd0 'dx' 'float'
|       |           |     `-ImplicitCastExpr 0x7fffd83f55f8 <col:43> 'float' <LValueToRValue>
|       |           |       `-DeclRefExpr 0x7fffd83f55d0 <col:43> 'float' lvalue ParmVar 0x7fffd83eb2f8 'y_top' 'float'
|       |           |-DeclStmt 0x7fffd83f58c0 <line:3207:16, col:50>
|       |           | `-VarDecl 0x7fffd83f5668 <col:16, col:45> col:22 used y2 'float' cinit
|       |           |   `-BinaryOperator 0x7fffd83f5898 <col:27, col:45> 'float' '+'
|       |           |     |-BinaryOperator 0x7fffd83f5830 <col:27, col:40> 'float' '/'
|       |           |     | |-ParenExpr 0x7fffd83f57d0 <col:27, col:36> 'float'
|       |           |     | | `-BinaryOperator 0x7fffd83f57a8 <col:28, col:34> 'float' '-'
|       |           |     | |   |-ImplicitCastExpr 0x7fffd83f5790 <col:28, col:30> 'float' <IntegralToFloating>
|       |           |     | |   | `-BinaryOperator 0x7fffd83f5728 <col:28, col:30> 'int' '+'
|       |           |     | |   |   |-ImplicitCastExpr 0x7fffd83f5710 <col:28> 'int' <LValueToRValue>
|       |           |     | |   |   | `-DeclRefExpr 0x7fffd83f56c8 <col:28> 'int' lvalue Var 0x7fffd83f4cc0 'x' 'int'
|       |           |     | |   |   `-IntegerLiteral 0x7fffd83f56f0 <col:30> 'int' 1
|       |           |     | |   `-ImplicitCastExpr 0x7fffd83f5778 <col:34> 'float' <LValueToRValue>
|       |           |     | |     `-DeclRefExpr 0x7fffd83f5750 <col:34> 'float' lvalue Var 0x7fffd83edab0 'x0' 'float'
|       |           |     | `-ImplicitCastExpr 0x7fffd83f5818 <col:40> 'float' <LValueToRValue>
|       |           |     |   `-DeclRefExpr 0x7fffd83f57f0 <col:40> 'float' lvalue Var 0x7fffd83edbd0 'dx' 'float'
|       |           |     `-ImplicitCastExpr 0x7fffd83f5880 <col:45> 'float' <LValueToRValue>
|       |           |       `-DeclRefExpr 0x7fffd83f5858 <col:45> 'float' lvalue ParmVar 0x7fffd83eb2f8 'y_top' 'float'
|       |           `-IfStmt 0x7fffd83f8788 <line:3209:16, line:3231:16>
|       |             |-<<<NULL>>>
|       |             |-<<<NULL>>>
|       |             |-BinaryOperator 0x7fffd83f5a28 <line:3209:20, col:36> 'int' '&&'
|       |             | |-BinaryOperator 0x7fffd83f5958 <col:20, col:25> 'int' '<'
|       |             | | |-ImplicitCastExpr 0x7fffd83f5928 <col:20> 'float' <LValueToRValue>
|       |             | | | `-DeclRefExpr 0x7fffd83f58d8 <col:20> 'float' lvalue Var 0x7fffd83edab0 'x0' 'float'
|       |             | | `-ImplicitCastExpr 0x7fffd83f5940 <col:25> 'float' <LValueToRValue>
|       |             | |   `-DeclRefExpr 0x7fffd83f5900 <col:25> 'float' lvalue Var 0x7fffd83f4f80 'x1' 'float'
|       |             | `-BinaryOperator 0x7fffd83f5a00 <col:31, col:36> 'int' '>'
|       |             |   |-ImplicitCastExpr 0x7fffd83f59d0 <col:31> 'float' <LValueToRValue>
|       |             |   | `-DeclRefExpr 0x7fffd83f5980 <col:31> 'float' lvalue Var 0x7fffd83f5288 'x3' 'float'
|       |             |   `-ImplicitCastExpr 0x7fffd83f59e8 <col:36> 'float' <LValueToRValue>
|       |             |     `-DeclRefExpr 0x7fffd83f59a8 <col:36> 'float' lvalue Var 0x7fffd83f50e0 'x2' 'float'
|       |             |-CompoundStmt 0x7fffd83f61a0 <col:40, line:3213:16>
|       |             | |-CallExpr 0x7fffd83f5ba8 <line:3210:19, col:72> 'void'
|       |             | | |-ImplicitCastExpr 0x7fffd83f5b90 <col:19> 'void (*)(float *, int, stbtt__active_edge *, float, float, float, float)' <FunctionToPointerDecay>
|       |             | | | `-DeclRefExpr 0x7fffd83f5a50 <col:19> 'void (float *, int, stbtt__active_edge *, float, float, float, float)' Function 0x7fffd83e5080 'stbtt__handle_clipped_edge' 'void (float *, int, stbtt__active_edge *, float, float, float, float)'
|       |             | | |-ImplicitCastExpr 0x7fffd83f5c08 <col:46> 'float *' <LValueToRValue>
|       |             | | | `-DeclRefExpr 0x7fffd83f5a78 <col:46> 'float *' lvalue ParmVar 0x7fffd83eb120 'scanline' 'float *'
|       |             | | |-ImplicitCastExpr 0x7fffd83f5c20 <col:55> 'int' <LValueToRValue>
|       |             | | | `-DeclRefExpr 0x7fffd83f5aa0 <col:55> 'int' lvalue Var 0x7fffd83f4cc0 'x' 'int'
|       |             | | |-ImplicitCastExpr 0x7fffd83f5c38 <col:57> 'stbtt__active_edge *' <LValueToRValue>
|       |             | | | `-DeclRefExpr 0x7fffd83f5ac8 <col:57> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |             | | |-ImplicitCastExpr 0x7fffd83f5c50 <col:60> 'float' <LValueToRValue>
|       |             | | | `-DeclRefExpr 0x7fffd83f5af0 <col:60> 'float' lvalue Var 0x7fffd83edab0 'x0' 'float'
|       |             | | |-ImplicitCastExpr 0x7fffd83f5c68 <col:63> 'float' <LValueToRValue>
|       |             | | | `-DeclRefExpr 0x7fffd83f5b18 <col:63> 'float' lvalue Var 0x7fffd83f4eb0 'y0' 'float'
|       |             | | |-ImplicitCastExpr 0x7fffd83f5c80 <col:67> 'float' <LValueToRValue>
|       |             | | | `-DeclRefExpr 0x7fffd83f5b40 <col:67> 'float' lvalue Var 0x7fffd83f4f80 'x1' 'float'
|       |             | | `-ImplicitCastExpr 0x7fffd83f5c98 <col:70> 'float' <LValueToRValue>
|       |             | |   `-DeclRefExpr 0x7fffd83f5b68 <col:70> 'float' lvalue Var 0x7fffd83f5428 'y1' 'float'
|       |             | |-CallExpr 0x7fffd83f5e38 <line:3211:19, col:72> 'void'
|       |             | | |-ImplicitCastExpr 0x7fffd83f5e20 <col:19> 'void (*)(float *, int, stbtt__active_edge *, float, float, float, float)' <FunctionToPointerDecay>
|       |             | | | `-DeclRefExpr 0x7fffd83f5ce0 <col:19> 'void (float *, int, stbtt__active_edge *, float, float, float, float)' Function 0x7fffd83e5080 'stbtt__handle_clipped_edge' 'void (float *, int, stbtt__active_edge *, float, float, float, float)'
|       |             | | |-ImplicitCastExpr 0x7fffd83f5e98 <col:46> 'float *' <LValueToRValue>
|       |             | | | `-DeclRefExpr 0x7fffd83f5d08 <col:46> 'float *' lvalue ParmVar 0x7fffd83eb120 'scanline' 'float *'
|       |             | | |-ImplicitCastExpr 0x7fffd83f5eb0 <col:55> 'int' <LValueToRValue>
|       |             | | | `-DeclRefExpr 0x7fffd83f5d30 <col:55> 'int' lvalue Var 0x7fffd83f4cc0 'x' 'int'
|       |             | | |-ImplicitCastExpr 0x7fffd83f5ec8 <col:57> 'stbtt__active_edge *' <LValueToRValue>
|       |             | | | `-DeclRefExpr 0x7fffd83f5d58 <col:57> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |             | | |-ImplicitCastExpr 0x7fffd83f5ee0 <col:60> 'float' <LValueToRValue>
|       |             | | | `-DeclRefExpr 0x7fffd83f5d80 <col:60> 'float' lvalue Var 0x7fffd83f4f80 'x1' 'float'
|       |             | | |-ImplicitCastExpr 0x7fffd83f5ef8 <col:63> 'float' <LValueToRValue>
|       |             | | | `-DeclRefExpr 0x7fffd83f5da8 <col:63> 'float' lvalue Var 0x7fffd83f5428 'y1' 'float'
|       |             | | |-ImplicitCastExpr 0x7fffd83f5f10 <col:67> 'float' <LValueToRValue>
|       |             | | | `-DeclRefExpr 0x7fffd83f5dd0 <col:67> 'float' lvalue Var 0x7fffd83f50e0 'x2' 'float'
|       |             | | `-ImplicitCastExpr 0x7fffd83f5f28 <col:70> 'float' <LValueToRValue>
|       |             | |   `-DeclRefExpr 0x7fffd83f5df8 <col:70> 'float' lvalue Var 0x7fffd83f5668 'y2' 'float'
|       |             | `-CallExpr 0x7fffd83f6098 <line:3212:19, col:72> 'void'
|       |             |   |-ImplicitCastExpr 0x7fffd83f6080 <col:19> 'void (*)(float *, int, stbtt__active_edge *, float, float, float, float)' <FunctionToPointerDecay>
|       |             |   | `-DeclRefExpr 0x7fffd83f5f40 <col:19> 'void (float *, int, stbtt__active_edge *, float, float, float, float)' Function 0x7fffd83e5080 'stbtt__handle_clipped_edge' 'void (float *, int, stbtt__active_edge *, float, float, float, float)'
|       |             |   |-ImplicitCastExpr 0x7fffd83f60f8 <col:46> 'float *' <LValueToRValue>
|       |             |   | `-DeclRefExpr 0x7fffd83f5f68 <col:46> 'float *' lvalue ParmVar 0x7fffd83eb120 'scanline' 'float *'
|       |             |   |-ImplicitCastExpr 0x7fffd83f6110 <col:55> 'int' <LValueToRValue>
|       |             |   | `-DeclRefExpr 0x7fffd83f5f90 <col:55> 'int' lvalue Var 0x7fffd83f4cc0 'x' 'int'
|       |             |   |-ImplicitCastExpr 0x7fffd83f6128 <col:57> 'stbtt__active_edge *' <LValueToRValue>
|       |             |   | `-DeclRefExpr 0x7fffd83f5fb8 <col:57> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |             |   |-ImplicitCastExpr 0x7fffd83f6140 <col:60> 'float' <LValueToRValue>
|       |             |   | `-DeclRefExpr 0x7fffd83f5fe0 <col:60> 'float' lvalue Var 0x7fffd83f50e0 'x2' 'float'
|       |             |   |-ImplicitCastExpr 0x7fffd83f6158 <col:63> 'float' <LValueToRValue>
|       |             |   | `-DeclRefExpr 0x7fffd83f6008 <col:63> 'float' lvalue Var 0x7fffd83f5668 'y2' 'float'
|       |             |   |-ImplicitCastExpr 0x7fffd83f6170 <col:67> 'float' <LValueToRValue>
|       |             |   | `-DeclRefExpr 0x7fffd83f6030 <col:67> 'float' lvalue Var 0x7fffd83f5288 'x3' 'float'
|       |             |   `-ImplicitCastExpr 0x7fffd83f6188 <col:70> 'float' <LValueToRValue>
|       |             |     `-DeclRefExpr 0x7fffd83f6058 <col:70> 'float' lvalue Var 0x7fffd83f5358 'y3' 'float'
|       |             `-IfStmt 0x7fffd83f8750 <line:3213:23, line:3231:16>
|       |               |-<<<NULL>>>
|       |               |-<<<NULL>>>
|       |               |-BinaryOperator 0x7fffd83f6318 <line:3213:27, col:43> 'int' '&&'
|       |               | |-BinaryOperator 0x7fffd83f6248 <col:27, col:32> 'int' '<'
|       |               | | |-ImplicitCastExpr 0x7fffd83f6218 <col:27> 'float' <LValueToRValue>
|       |               | | | `-DeclRefExpr 0x7fffd83f61c8 <col:27> 'float' lvalue Var 0x7fffd83f5288 'x3' 'float'
|       |               | | `-ImplicitCastExpr 0x7fffd83f6230 <col:32> 'float' <LValueToRValue>
|       |               | |   `-DeclRefExpr 0x7fffd83f61f0 <col:32> 'float' lvalue Var 0x7fffd83f4f80 'x1' 'float'
|       |               | `-BinaryOperator 0x7fffd83f62f0 <col:38, col:43> 'int' '>'
|       |               |   |-ImplicitCastExpr 0x7fffd83f62c0 <col:38> 'float' <LValueToRValue>
|       |               |   | `-DeclRefExpr 0x7fffd83f6270 <col:38> 'float' lvalue Var 0x7fffd83edab0 'x0' 'float'
|       |               |   `-ImplicitCastExpr 0x7fffd83f62d8 <col:43> 'float' <LValueToRValue>
|       |               |     `-DeclRefExpr 0x7fffd83f6298 <col:43> 'float' lvalue Var 0x7fffd83f50e0 'x2' 'float'
|       |               |-CompoundStmt 0x7fffd83f6a60 <col:47, line:3217:16>
|       |               | |-CallExpr 0x7fffd83f6498 <line:3214:19, col:72> 'void'
|       |               | | |-ImplicitCastExpr 0x7fffd83f6480 <col:19> 'void (*)(float *, int, stbtt__active_edge *, float, float, float, float)' <FunctionToPointerDecay>
|       |               | | | `-DeclRefExpr 0x7fffd83f6340 <col:19> 'void (float *, int, stbtt__active_edge *, float, float, float, float)' Function 0x7fffd83e5080 'stbtt__handle_clipped_edge' 'void (float *, int, stbtt__active_edge *, float, float, float, float)'
|       |               | | |-ImplicitCastExpr 0x7fffd83f64f8 <col:46> 'float *' <LValueToRValue>
|       |               | | | `-DeclRefExpr 0x7fffd83f6368 <col:46> 'float *' lvalue ParmVar 0x7fffd83eb120 'scanline' 'float *'
|       |               | | |-ImplicitCastExpr 0x7fffd83f6510 <col:55> 'int' <LValueToRValue>
|       |               | | | `-DeclRefExpr 0x7fffd83f6390 <col:55> 'int' lvalue Var 0x7fffd83f4cc0 'x' 'int'
|       |               | | |-ImplicitCastExpr 0x7fffd83f6528 <col:57> 'stbtt__active_edge *' <LValueToRValue>
|       |               | | | `-DeclRefExpr 0x7fffd83f63b8 <col:57> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |               | | |-ImplicitCastExpr 0x7fffd83f6540 <col:60> 'float' <LValueToRValue>
|       |               | | | `-DeclRefExpr 0x7fffd83f63e0 <col:60> 'float' lvalue Var 0x7fffd83edab0 'x0' 'float'
|       |               | | |-ImplicitCastExpr 0x7fffd83f6558 <col:63> 'float' <LValueToRValue>
|       |               | | | `-DeclRefExpr 0x7fffd83f6408 <col:63> 'float' lvalue Var 0x7fffd83f4eb0 'y0' 'float'
|       |               | | |-ImplicitCastExpr 0x7fffd83f6570 <col:67> 'float' <LValueToRValue>
|       |               | | | `-DeclRefExpr 0x7fffd83f6430 <col:67> 'float' lvalue Var 0x7fffd83f50e0 'x2' 'float'
|       |               | | `-ImplicitCastExpr 0x7fffd83f6588 <col:70> 'float' <LValueToRValue>
|       |               | |   `-DeclRefExpr 0x7fffd83f6458 <col:70> 'float' lvalue Var 0x7fffd83f5668 'y2' 'float'
|       |               | |-CallExpr 0x7fffd83f66f8 <line:3215:19, col:72> 'void'
|       |               | | |-ImplicitCastExpr 0x7fffd83f66e0 <col:19> 'void (*)(float *, int, stbtt__active_edge *, float, float, float, float)' <FunctionToPointerDecay>
|       |               | | | `-DeclRefExpr 0x7fffd83f65a0 <col:19> 'void (float *, int, stbtt__active_edge *, float, float, float, float)' Function 0x7fffd83e5080 'stbtt__handle_clipped_edge' 'void (float *, int, stbtt__active_edge *, float, float, float, float)'
|       |               | | |-ImplicitCastExpr 0x7fffd83f6758 <col:46> 'float *' <LValueToRValue>
|       |               | | | `-DeclRefExpr 0x7fffd83f65c8 <col:46> 'float *' lvalue ParmVar 0x7fffd83eb120 'scanline' 'float *'
|       |               | | |-ImplicitCastExpr 0x7fffd83f6770 <col:55> 'int' <LValueToRValue>
|       |               | | | `-DeclRefExpr 0x7fffd83f65f0 <col:55> 'int' lvalue Var 0x7fffd83f4cc0 'x' 'int'
|       |               | | |-ImplicitCastExpr 0x7fffd83f6788 <col:57> 'stbtt__active_edge *' <LValueToRValue>
|       |               | | | `-DeclRefExpr 0x7fffd83f6618 <col:57> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |               | | |-ImplicitCastExpr 0x7fffd83f67a0 <col:60> 'float' <LValueToRValue>
|       |               | | | `-DeclRefExpr 0x7fffd83f6640 <col:60> 'float' lvalue Var 0x7fffd83f50e0 'x2' 'float'
|       |               | | |-ImplicitCastExpr 0x7fffd83f67b8 <col:63> 'float' <LValueToRValue>
|       |               | | | `-DeclRefExpr 0x7fffd83f6668 <col:63> 'float' lvalue Var 0x7fffd83f5668 'y2' 'float'
|       |               | | |-ImplicitCastExpr 0x7fffd83f67d0 <col:67> 'float' <LValueToRValue>
|       |               | | | `-DeclRefExpr 0x7fffd83f6690 <col:67> 'float' lvalue Var 0x7fffd83f4f80 'x1' 'float'
|       |               | | `-ImplicitCastExpr 0x7fffd83f67e8 <col:70> 'float' <LValueToRValue>
|       |               | |   `-DeclRefExpr 0x7fffd83f66b8 <col:70> 'float' lvalue Var 0x7fffd83f5428 'y1' 'float'
|       |               | `-CallExpr 0x7fffd83f6958 <line:3216:19, col:72> 'void'
|       |               |   |-ImplicitCastExpr 0x7fffd83f6940 <col:19> 'void (*)(float *, int, stbtt__active_edge *, float, float, float, float)' <FunctionToPointerDecay>
|       |               |   | `-DeclRefExpr 0x7fffd83f6800 <col:19> 'void (float *, int, stbtt__active_edge *, float, float, float, float)' Function 0x7fffd83e5080 'stbtt__handle_clipped_edge' 'void (float *, int, stbtt__active_edge *, float, float, float, float)'
|       |               |   |-ImplicitCastExpr 0x7fffd83f69b8 <col:46> 'float *' <LValueToRValue>
|       |               |   | `-DeclRefExpr 0x7fffd83f6828 <col:46> 'float *' lvalue ParmVar 0x7fffd83eb120 'scanline' 'float *'
|       |               |   |-ImplicitCastExpr 0x7fffd83f69d0 <col:55> 'int' <LValueToRValue>
|       |               |   | `-DeclRefExpr 0x7fffd83f6850 <col:55> 'int' lvalue Var 0x7fffd83f4cc0 'x' 'int'
|       |               |   |-ImplicitCastExpr 0x7fffd83f69e8 <col:57> 'stbtt__active_edge *' <LValueToRValue>
|       |               |   | `-DeclRefExpr 0x7fffd83f6878 <col:57> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |               |   |-ImplicitCastExpr 0x7fffd83f6a00 <col:60> 'float' <LValueToRValue>
|       |               |   | `-DeclRefExpr 0x7fffd83f68a0 <col:60> 'float' lvalue Var 0x7fffd83f4f80 'x1' 'float'
|       |               |   |-ImplicitCastExpr 0x7fffd83f6a18 <col:63> 'float' <LValueToRValue>
|       |               |   | `-DeclRefExpr 0x7fffd83f68c8 <col:63> 'float' lvalue Var 0x7fffd83f5428 'y1' 'float'
|       |               |   |-ImplicitCastExpr 0x7fffd83f6a30 <col:67> 'float' <LValueToRValue>
|       |               |   | `-DeclRefExpr 0x7fffd83f68f0 <col:67> 'float' lvalue Var 0x7fffd83f5288 'x3' 'float'
|       |               |   `-ImplicitCastExpr 0x7fffd83f6a48 <col:70> 'float' <LValueToRValue>
|       |               |     `-DeclRefExpr 0x7fffd83f6918 <col:70> 'float' lvalue Var 0x7fffd83f5358 'y3' 'float'
|       |               `-IfStmt 0x7fffd83f8718 <line:3217:23, line:3231:16>
|       |                 |-<<<NULL>>>
|       |                 |-<<<NULL>>>
|       |                 |-BinaryOperator 0x7fffd83f6bd8 <line:3217:27, col:43> 'int' '&&'
|       |                 | |-BinaryOperator 0x7fffd83f6b08 <col:27, col:32> 'int' '<'
|       |                 | | |-ImplicitCastExpr 0x7fffd83f6ad8 <col:27> 'float' <LValueToRValue>
|       |                 | | | `-DeclRefExpr 0x7fffd83f6a88 <col:27> 'float' lvalue Var 0x7fffd83edab0 'x0' 'float'
|       |                 | | `-ImplicitCastExpr 0x7fffd83f6af0 <col:32> 'float' <LValueToRValue>
|       |                 | |   `-DeclRefExpr 0x7fffd83f6ab0 <col:32> 'float' lvalue Var 0x7fffd83f4f80 'x1' 'float'
|       |                 | `-BinaryOperator 0x7fffd83f6bb0 <col:38, col:43> 'int' '>'
|       |                 |   |-ImplicitCastExpr 0x7fffd83f6b80 <col:38> 'float' <LValueToRValue>
|       |                 |   | `-DeclRefExpr 0x7fffd83f6b30 <col:38> 'float' lvalue Var 0x7fffd83f5288 'x3' 'float'
|       |                 |   `-ImplicitCastExpr 0x7fffd83f6b98 <col:43> 'float' <LValueToRValue>
|       |                 |     `-DeclRefExpr 0x7fffd83f6b58 <col:43> 'float' lvalue Var 0x7fffd83f4f80 'x1' 'float'
|       |                 |-CompoundStmt 0x7fffd83f70c0 <col:47, line:3220:16>
|       |                 | |-CallExpr 0x7fffd83f6d58 <line:3218:19, col:72> 'void'
|       |                 | | |-ImplicitCastExpr 0x7fffd83f6d40 <col:19> 'void (*)(float *, int, stbtt__active_edge *, float, float, float, float)' <FunctionToPointerDecay>
|       |                 | | | `-DeclRefExpr 0x7fffd83f6c00 <col:19> 'void (float *, int, stbtt__active_edge *, float, float, float, float)' Function 0x7fffd83e5080 'stbtt__handle_clipped_edge' 'void (float *, int, stbtt__active_edge *, float, float, float, float)'
|       |                 | | |-ImplicitCastExpr 0x7fffd83f6db8 <col:46> 'float *' <LValueToRValue>
|       |                 | | | `-DeclRefExpr 0x7fffd83f6c28 <col:46> 'float *' lvalue ParmVar 0x7fffd83eb120 'scanline' 'float *'
|       |                 | | |-ImplicitCastExpr 0x7fffd83f6dd0 <col:55> 'int' <LValueToRValue>
|       |                 | | | `-DeclRefExpr 0x7fffd83f6c50 <col:55> 'int' lvalue Var 0x7fffd83f4cc0 'x' 'int'
|       |                 | | |-ImplicitCastExpr 0x7fffd83f6de8 <col:57> 'stbtt__active_edge *' <LValueToRValue>
|       |                 | | | `-DeclRefExpr 0x7fffd83f6c78 <col:57> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |                 | | |-ImplicitCastExpr 0x7fffd83f6e00 <col:60> 'float' <LValueToRValue>
|       |                 | | | `-DeclRefExpr 0x7fffd83f6ca0 <col:60> 'float' lvalue Var 0x7fffd83edab0 'x0' 'float'
|       |                 | | |-ImplicitCastExpr 0x7fffd83f6e18 <col:63> 'float' <LValueToRValue>
|       |                 | | | `-DeclRefExpr 0x7fffd83f6cc8 <col:63> 'float' lvalue Var 0x7fffd83f4eb0 'y0' 'float'
|       |                 | | |-ImplicitCastExpr 0x7fffd83f6e30 <col:67> 'float' <LValueToRValue>
|       |                 | | | `-DeclRefExpr 0x7fffd83f6cf0 <col:67> 'float' lvalue Var 0x7fffd83f4f80 'x1' 'float'
|       |                 | | `-ImplicitCastExpr 0x7fffd83f6e48 <col:70> 'float' <LValueToRValue>
|       |                 | |   `-DeclRefExpr 0x7fffd83f6d18 <col:70> 'float' lvalue Var 0x7fffd83f5428 'y1' 'float'
|       |                 | `-CallExpr 0x7fffd83f6fb8 <line:3219:19, col:72> 'void'
|       |                 |   |-ImplicitCastExpr 0x7fffd83f6fa0 <col:19> 'void (*)(float *, int, stbtt__active_edge *, float, float, float, float)' <FunctionToPointerDecay>
|       |                 |   | `-DeclRefExpr 0x7fffd83f6e60 <col:19> 'void (float *, int, stbtt__active_edge *, float, float, float, float)' Function 0x7fffd83e5080 'stbtt__handle_clipped_edge' 'void (float *, int, stbtt__active_edge *, float, float, float, float)'
|       |                 |   |-ImplicitCastExpr 0x7fffd83f7018 <col:46> 'float *' <LValueToRValue>
|       |                 |   | `-DeclRefExpr 0x7fffd83f6e88 <col:46> 'float *' lvalue ParmVar 0x7fffd83eb120 'scanline' 'float *'
|       |                 |   |-ImplicitCastExpr 0x7fffd83f7030 <col:55> 'int' <LValueToRValue>
|       |                 |   | `-DeclRefExpr 0x7fffd83f6eb0 <col:55> 'int' lvalue Var 0x7fffd83f4cc0 'x' 'int'
|       |                 |   |-ImplicitCastExpr 0x7fffd83f7048 <col:57> 'stbtt__active_edge *' <LValueToRValue>
|       |                 |   | `-DeclRefExpr 0x7fffd83f6ed8 <col:57> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |                 |   |-ImplicitCastExpr 0x7fffd83f7060 <col:60> 'float' <LValueToRValue>
|       |                 |   | `-DeclRefExpr 0x7fffd83f6f00 <col:60> 'float' lvalue Var 0x7fffd83f4f80 'x1' 'float'
|       |                 |   |-ImplicitCastExpr 0x7fffd83f7078 <col:63> 'float' <LValueToRValue>
|       |                 |   | `-DeclRefExpr 0x7fffd83f6f28 <col:63> 'float' lvalue Var 0x7fffd83f5428 'y1' 'float'
|       |                 |   |-ImplicitCastExpr 0x7fffd83f7090 <col:67> 'float' <LValueToRValue>
|       |                 |   | `-DeclRefExpr 0x7fffd83f6f50 <col:67> 'float' lvalue Var 0x7fffd83f5288 'x3' 'float'
|       |                 |   `-ImplicitCastExpr 0x7fffd83f70a8 <col:70> 'float' <LValueToRValue>
|       |                 |     `-DeclRefExpr 0x7fffd83f6f78 <col:70> 'float' lvalue Var 0x7fffd83f5358 'y3' 'float'
|       |                 `-IfStmt 0x7fffd83f86e0 <line:3220:23, line:3231:16>
|       |                   |-<<<NULL>>>
|       |                   |-<<<NULL>>>
|       |                   |-BinaryOperator 0x7fffd83f7230 <line:3220:27, col:43> 'int' '&&'
|       |                   | |-BinaryOperator 0x7fffd83f7160 <col:27, col:32> 'int' '<'
|       |                   | | |-ImplicitCastExpr 0x7fffd83f7130 <col:27> 'float' <LValueToRValue>
|       |                   | | | `-DeclRefExpr 0x7fffd83f70e0 <col:27> 'float' lvalue Var 0x7fffd83f5288 'x3' 'float'
|       |                   | | `-ImplicitCastExpr 0x7fffd83f7148 <col:32> 'float' <LValueToRValue>
|       |                   | |   `-DeclRefExpr 0x7fffd83f7108 <col:32> 'float' lvalue Var 0x7fffd83f4f80 'x1' 'float'
|       |                   | `-BinaryOperator 0x7fffd83f7208 <col:38, col:43> 'int' '>'
|       |                   |   |-ImplicitCastExpr 0x7fffd83f71d8 <col:38> 'float' <LValueToRValue>
|       |                   |   | `-DeclRefExpr 0x7fffd83f7188 <col:38> 'float' lvalue Var 0x7fffd83edab0 'x0' 'float'
|       |                   |   `-ImplicitCastExpr 0x7fffd83f71f0 <col:43> 'float' <LValueToRValue>
|       |                   |     `-DeclRefExpr 0x7fffd83f71b0 <col:43> 'float' lvalue Var 0x7fffd83f4f80 'x1' 'float'
|       |                   |-CompoundStmt 0x7fffd83f7718 <col:47, line:3223:16>
|       |                   | |-CallExpr 0x7fffd83f73b0 <line:3221:19, col:72> 'void'
|       |                   | | |-ImplicitCastExpr 0x7fffd83f7398 <col:19> 'void (*)(float *, int, stbtt__active_edge *, float, float, float, float)' <FunctionToPointerDecay>
|       |                   | | | `-DeclRefExpr 0x7fffd83f7258 <col:19> 'void (float *, int, stbtt__active_edge *, float, float, float, float)' Function 0x7fffd83e5080 'stbtt__handle_clipped_edge' 'void (float *, int, stbtt__active_edge *, float, float, float, float)'
|       |                   | | |-ImplicitCastExpr 0x7fffd83f7410 <col:46> 'float *' <LValueToRValue>
|       |                   | | | `-DeclRefExpr 0x7fffd83f7280 <col:46> 'float *' lvalue ParmVar 0x7fffd83eb120 'scanline' 'float *'
|       |                   | | |-ImplicitCastExpr 0x7fffd83f7428 <col:55> 'int' <LValueToRValue>
|       |                   | | | `-DeclRefExpr 0x7fffd83f72a8 <col:55> 'int' lvalue Var 0x7fffd83f4cc0 'x' 'int'
|       |                   | | |-ImplicitCastExpr 0x7fffd83f7440 <col:57> 'stbtt__active_edge *' <LValueToRValue>
|       |                   | | | `-DeclRefExpr 0x7fffd83f72d0 <col:57> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |                   | | |-ImplicitCastExpr 0x7fffd83f7458 <col:60> 'float' <LValueToRValue>
|       |                   | | | `-DeclRefExpr 0x7fffd83f72f8 <col:60> 'float' lvalue Var 0x7fffd83edab0 'x0' 'float'
|       |                   | | |-ImplicitCastExpr 0x7fffd83f7470 <col:63> 'float' <LValueToRValue>
|       |                   | | | `-DeclRefExpr 0x7fffd83f7320 <col:63> 'float' lvalue Var 0x7fffd83f4eb0 'y0' 'float'
|       |                   | | |-ImplicitCastExpr 0x7fffd83f7488 <col:67> 'float' <LValueToRValue>
|       |                   | | | `-DeclRefExpr 0x7fffd83f7348 <col:67> 'float' lvalue Var 0x7fffd83f4f80 'x1' 'float'
|       |                   | | `-ImplicitCastExpr 0x7fffd83f74a0 <col:70> 'float' <LValueToRValue>
|       |                   | |   `-DeclRefExpr 0x7fffd83f7370 <col:70> 'float' lvalue Var 0x7fffd83f5428 'y1' 'float'
|       |                   | `-CallExpr 0x7fffd83f7610 <line:3222:19, col:72> 'void'
|       |                   |   |-ImplicitCastExpr 0x7fffd83f75f8 <col:19> 'void (*)(float *, int, stbtt__active_edge *, float, float, float, float)' <FunctionToPointerDecay>
|       |                   |   | `-DeclRefExpr 0x7fffd83f74b8 <col:19> 'void (float *, int, stbtt__active_edge *, float, float, float, float)' Function 0x7fffd83e5080 'stbtt__handle_clipped_edge' 'void (float *, int, stbtt__active_edge *, float, float, float, float)'
|       |                   |   |-ImplicitCastExpr 0x7fffd83f7670 <col:46> 'float *' <LValueToRValue>
|       |                   |   | `-DeclRefExpr 0x7fffd83f74e0 <col:46> 'float *' lvalue ParmVar 0x7fffd83eb120 'scanline' 'float *'
|       |                   |   |-ImplicitCastExpr 0x7fffd83f7688 <col:55> 'int' <LValueToRValue>
|       |                   |   | `-DeclRefExpr 0x7fffd83f7508 <col:55> 'int' lvalue Var 0x7fffd83f4cc0 'x' 'int'
|       |                   |   |-ImplicitCastExpr 0x7fffd83f76a0 <col:57> 'stbtt__active_edge *' <LValueToRValue>
|       |                   |   | `-DeclRefExpr 0x7fffd83f7530 <col:57> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |                   |   |-ImplicitCastExpr 0x7fffd83f76b8 <col:60> 'float' <LValueToRValue>
|       |                   |   | `-DeclRefExpr 0x7fffd83f7558 <col:60> 'float' lvalue Var 0x7fffd83f4f80 'x1' 'float'
|       |                   |   |-ImplicitCastExpr 0x7fffd83f76d0 <col:63> 'float' <LValueToRValue>
|       |                   |   | `-DeclRefExpr 0x7fffd83f7580 <col:63> 'float' lvalue Var 0x7fffd83f5428 'y1' 'float'
|       |                   |   |-ImplicitCastExpr 0x7fffd83f76e8 <col:67> 'float' <LValueToRValue>
|       |                   |   | `-DeclRefExpr 0x7fffd83f75a8 <col:67> 'float' lvalue Var 0x7fffd83f5288 'x3' 'float'
|       |                   |   `-ImplicitCastExpr 0x7fffd83f7700 <col:70> 'float' <LValueToRValue>
|       |                   |     `-DeclRefExpr 0x7fffd83f75d0 <col:70> 'float' lvalue Var 0x7fffd83f5358 'y3' 'float'
|       |                   `-IfStmt 0x7fffd83f86a8 <line:3223:23, line:3231:16>
|       |                     |-<<<NULL>>>
|       |                     |-<<<NULL>>>
|       |                     |-BinaryOperator 0x7fffd83f7888 <line:3223:27, col:43> 'int' '&&'
|       |                     | |-BinaryOperator 0x7fffd83f77b8 <col:27, col:32> 'int' '<'
|       |                     | | |-ImplicitCastExpr 0x7fffd83f7788 <col:27> 'float' <LValueToRValue>
|       |                     | | | `-DeclRefExpr 0x7fffd83f7738 <col:27> 'float' lvalue Var 0x7fffd83edab0 'x0' 'float'
|       |                     | | `-ImplicitCastExpr 0x7fffd83f77a0 <col:32> 'float' <LValueToRValue>
|       |                     | |   `-DeclRefExpr 0x7fffd83f7760 <col:32> 'float' lvalue Var 0x7fffd83f50e0 'x2' 'float'
|       |                     | `-BinaryOperator 0x7fffd83f7860 <col:38, col:43> 'int' '>'
|       |                     |   |-ImplicitCastExpr 0x7fffd83f7830 <col:38> 'float' <LValueToRValue>
|       |                     |   | `-DeclRefExpr 0x7fffd83f77e0 <col:38> 'float' lvalue Var 0x7fffd83f5288 'x3' 'float'
|       |                     |   `-ImplicitCastExpr 0x7fffd83f7848 <col:43> 'float' <LValueToRValue>
|       |                     |     `-DeclRefExpr 0x7fffd83f7808 <col:43> 'float' lvalue Var 0x7fffd83f50e0 'x2' 'float'
|       |                     |-CompoundStmt 0x7fffd83f7d80 <col:47, line:3226:16>
|       |                     | |-CallExpr 0x7fffd83f7a08 <line:3224:19, col:72> 'void'
|       |                     | | |-ImplicitCastExpr 0x7fffd83f79f0 <col:19> 'void (*)(float *, int, stbtt__active_edge *, float, float, float, float)' <FunctionToPointerDecay>
|       |                     | | | `-DeclRefExpr 0x7fffd83f78b0 <col:19> 'void (float *, int, stbtt__active_edge *, float, float, float, float)' Function 0x7fffd83e5080 'stbtt__handle_clipped_edge' 'void (float *, int, stbtt__active_edge *, float, float, float, float)'
|       |                     | | |-ImplicitCastExpr 0x7fffd83f7a68 <col:46> 'float *' <LValueToRValue>
|       |                     | | | `-DeclRefExpr 0x7fffd83f78d8 <col:46> 'float *' lvalue ParmVar 0x7fffd83eb120 'scanline' 'float *'
|       |                     | | |-ImplicitCastExpr 0x7fffd83f7a80 <col:55> 'int' <LValueToRValue>
|       |                     | | | `-DeclRefExpr 0x7fffd83f7900 <col:55> 'int' lvalue Var 0x7fffd83f4cc0 'x' 'int'
|       |                     | | |-ImplicitCastExpr 0x7fffd83f7a98 <col:57> 'stbtt__active_edge *' <LValueToRValue>
|       |                     | | | `-DeclRefExpr 0x7fffd83f7928 <col:57> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |                     | | |-ImplicitCastExpr 0x7fffd83f7ab0 <col:60> 'float' <LValueToRValue>
|       |                     | | | `-DeclRefExpr 0x7fffd83f7950 <col:60> 'float' lvalue Var 0x7fffd83edab0 'x0' 'float'
|       |                     | | |-ImplicitCastExpr 0x7fffd83f7ac8 <col:63> 'float' <LValueToRValue>
|       |                     | | | `-DeclRefExpr 0x7fffd83f7978 <col:63> 'float' lvalue Var 0x7fffd83f4eb0 'y0' 'float'
|       |                     | | |-ImplicitCastExpr 0x7fffd83f7ae0 <col:67> 'float' <LValueToRValue>
|       |                     | | | `-DeclRefExpr 0x7fffd83f79a0 <col:67> 'float' lvalue Var 0x7fffd83f50e0 'x2' 'float'
|       |                     | | `-ImplicitCastExpr 0x7fffd83f7af8 <col:70> 'float' <LValueToRValue>
|       |                     | |   `-DeclRefExpr 0x7fffd83f79c8 <col:70> 'float' lvalue Var 0x7fffd83f5668 'y2' 'float'
|       |                     | `-CallExpr 0x7fffd83f7c68 <line:3225:19, col:72> 'void'
|       |                     |   |-ImplicitCastExpr 0x7fffd83f7c50 <col:19> 'void (*)(float *, int, stbtt__active_edge *, float, float, float, float)' <FunctionToPointerDecay>
|       |                     |   | `-DeclRefExpr 0x7fffd83f7b10 <col:19> 'void (float *, int, stbtt__active_edge *, float, float, float, float)' Function 0x7fffd83e5080 'stbtt__handle_clipped_edge' 'void (float *, int, stbtt__active_edge *, float, float, float, float)'
|       |                     |   |-ImplicitCastExpr 0x7fffd83f7cc8 <col:46> 'float *' <LValueToRValue>
|       |                     |   | `-DeclRefExpr 0x7fffd83f7b38 <col:46> 'float *' lvalue ParmVar 0x7fffd83eb120 'scanline' 'float *'
|       |                     |   |-ImplicitCastExpr 0x7fffd83f7cf0 <col:55> 'int' <LValueToRValue>
|       |                     |   | `-DeclRefExpr 0x7fffd83f7b60 <col:55> 'int' lvalue Var 0x7fffd83f4cc0 'x' 'int'
|       |                     |   |-ImplicitCastExpr 0x7fffd83f7d08 <col:57> 'stbtt__active_edge *' <LValueToRValue>
|       |                     |   | `-DeclRefExpr 0x7fffd83f7b88 <col:57> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |                     |   |-ImplicitCastExpr 0x7fffd83f7d20 <col:60> 'float' <LValueToRValue>
|       |                     |   | `-DeclRefExpr 0x7fffd83f7bb0 <col:60> 'float' lvalue Var 0x7fffd83f50e0 'x2' 'float'
|       |                     |   |-ImplicitCastExpr 0x7fffd83f7d38 <col:63> 'float' <LValueToRValue>
|       |                     |   | `-DeclRefExpr 0x7fffd83f7bd8 <col:63> 'float' lvalue Var 0x7fffd83f5668 'y2' 'float'
|       |                     |   |-ImplicitCastExpr 0x7fffd83f7d50 <col:67> 'float' <LValueToRValue>
|       |                     |   | `-DeclRefExpr 0x7fffd83f7c00 <col:67> 'float' lvalue Var 0x7fffd83f5288 'x3' 'float'
|       |                     |   `-ImplicitCastExpr 0x7fffd83f7d68 <col:70> 'float' <LValueToRValue>
|       |                     |     `-DeclRefExpr 0x7fffd83f7c28 <col:70> 'float' lvalue Var 0x7fffd83f5358 'y3' 'float'
|       |                     `-IfStmt 0x7fffd83f8670 <line:3226:23, line:3231:16>
|       |                       |-<<<NULL>>>
|       |                       |-<<<NULL>>>
|       |                       |-BinaryOperator 0x7fffd83f7ef0 <line:3226:27, col:43> 'int' '&&'
|       |                       | |-BinaryOperator 0x7fffd83f7e20 <col:27, col:32> 'int' '<'
|       |                       | | |-ImplicitCastExpr 0x7fffd83f7df0 <col:27> 'float' <LValueToRValue>
|       |                       | | | `-DeclRefExpr 0x7fffd83f7da0 <col:27> 'float' lvalue Var 0x7fffd83f5288 'x3' 'float'
|       |                       | | `-ImplicitCastExpr 0x7fffd83f7e08 <col:32> 'float' <LValueToRValue>
|       |                       | |   `-DeclRefExpr 0x7fffd83f7dc8 <col:32> 'float' lvalue Var 0x7fffd83f50e0 'x2' 'float'
|       |                       | `-BinaryOperator 0x7fffd83f7ec8 <col:38, col:43> 'int' '>'
|       |                       |   |-ImplicitCastExpr 0x7fffd83f7e98 <col:38> 'float' <LValueToRValue>
|       |                       |   | `-DeclRefExpr 0x7fffd83f7e48 <col:38> 'float' lvalue Var 0x7fffd83edab0 'x0' 'float'
|       |                       |   `-ImplicitCastExpr 0x7fffd83f7eb0 <col:43> 'float' <LValueToRValue>
|       |                       |     `-DeclRefExpr 0x7fffd83f7e70 <col:43> 'float' lvalue Var 0x7fffd83f50e0 'x2' 'float'
|       |                       |-CompoundStmt 0x7fffd83f83d8 <col:47, line:3229:16>
|       |                       | |-CallExpr 0x7fffd83f8070 <line:3227:19, col:72> 'void'
|       |                       | | |-ImplicitCastExpr 0x7fffd83f8058 <col:19> 'void (*)(float *, int, stbtt__active_edge *, float, float, float, float)' <FunctionToPointerDecay>
|       |                       | | | `-DeclRefExpr 0x7fffd83f7f18 <col:19> 'void (float *, int, stbtt__active_edge *, float, float, float, float)' Function 0x7fffd83e5080 'stbtt__handle_clipped_edge' 'void (float *, int, stbtt__active_edge *, float, float, float, float)'
|       |                       | | |-ImplicitCastExpr 0x7fffd83f80d0 <col:46> 'float *' <LValueToRValue>
|       |                       | | | `-DeclRefExpr 0x7fffd83f7f40 <col:46> 'float *' lvalue ParmVar 0x7fffd83eb120 'scanline' 'float *'
|       |                       | | |-ImplicitCastExpr 0x7fffd83f80e8 <col:55> 'int' <LValueToRValue>
|       |                       | | | `-DeclRefExpr 0x7fffd83f7f68 <col:55> 'int' lvalue Var 0x7fffd83f4cc0 'x' 'int'
|       |                       | | |-ImplicitCastExpr 0x7fffd83f8100 <col:57> 'stbtt__active_edge *' <LValueToRValue>
|       |                       | | | `-DeclRefExpr 0x7fffd83f7f90 <col:57> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |                       | | |-ImplicitCastExpr 0x7fffd83f8118 <col:60> 'float' <LValueToRValue>
|       |                       | | | `-DeclRefExpr 0x7fffd83f7fb8 <col:60> 'float' lvalue Var 0x7fffd83edab0 'x0' 'float'
|       |                       | | |-ImplicitCastExpr 0x7fffd83f8130 <col:63> 'float' <LValueToRValue>
|       |                       | | | `-DeclRefExpr 0x7fffd83f7fe0 <col:63> 'float' lvalue Var 0x7fffd83f4eb0 'y0' 'float'
|       |                       | | |-ImplicitCastExpr 0x7fffd83f8148 <col:67> 'float' <LValueToRValue>
|       |                       | | | `-DeclRefExpr 0x7fffd83f8008 <col:67> 'float' lvalue Var 0x7fffd83f50e0 'x2' 'float'
|       |                       | | `-ImplicitCastExpr 0x7fffd83f8160 <col:70> 'float' <LValueToRValue>
|       |                       | |   `-DeclRefExpr 0x7fffd83f8030 <col:70> 'float' lvalue Var 0x7fffd83f5668 'y2' 'float'
|       |                       | `-CallExpr 0x7fffd83f82d0 <line:3228:19, col:72> 'void'
|       |                       |   |-ImplicitCastExpr 0x7fffd83f82b8 <col:19> 'void (*)(float *, int, stbtt__active_edge *, float, float, float, float)' <FunctionToPointerDecay>
|       |                       |   | `-DeclRefExpr 0x7fffd83f8178 <col:19> 'void (float *, int, stbtt__active_edge *, float, float, float, float)' Function 0x7fffd83e5080 'stbtt__handle_clipped_edge' 'void (float *, int, stbtt__active_edge *, float, float, float, float)'
|       |                       |   |-ImplicitCastExpr 0x7fffd83f8330 <col:46> 'float *' <LValueToRValue>
|       |                       |   | `-DeclRefExpr 0x7fffd83f81a0 <col:46> 'float *' lvalue ParmVar 0x7fffd83eb120 'scanline' 'float *'
|       |                       |   |-ImplicitCastExpr 0x7fffd83f8348 <col:55> 'int' <LValueToRValue>
|       |                       |   | `-DeclRefExpr 0x7fffd83f81c8 <col:55> 'int' lvalue Var 0x7fffd83f4cc0 'x' 'int'
|       |                       |   |-ImplicitCastExpr 0x7fffd83f8360 <col:57> 'stbtt__active_edge *' <LValueToRValue>
|       |                       |   | `-DeclRefExpr 0x7fffd83f81f0 <col:57> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |                       |   |-ImplicitCastExpr 0x7fffd83f8378 <col:60> 'float' <LValueToRValue>
|       |                       |   | `-DeclRefExpr 0x7fffd83f8218 <col:60> 'float' lvalue Var 0x7fffd83f50e0 'x2' 'float'
|       |                       |   |-ImplicitCastExpr 0x7fffd83f8390 <col:63> 'float' <LValueToRValue>
|       |                       |   | `-DeclRefExpr 0x7fffd83f8240 <col:63> 'float' lvalue Var 0x7fffd83f5668 'y2' 'float'
|       |                       |   |-ImplicitCastExpr 0x7fffd83f83a8 <col:67> 'float' <LValueToRValue>
|       |                       |   | `-DeclRefExpr 0x7fffd83f8268 <col:67> 'float' lvalue Var 0x7fffd83f5288 'x3' 'float'
|       |                       |   `-ImplicitCastExpr 0x7fffd83f83c0 <col:70> 'float' <LValueToRValue>
|       |                       |     `-DeclRefExpr 0x7fffd83f8290 <col:70> 'float' lvalue Var 0x7fffd83f5358 'y3' 'float'
|       |                       `-CompoundStmt 0x7fffd83f8658 <line:3229:23, line:3231:16>
|       |                         `-CallExpr 0x7fffd83f8550 <line:3230:19, col:72> 'void'
|       |                           |-ImplicitCastExpr 0x7fffd83f8538 <col:19> 'void (*)(float *, int, stbtt__active_edge *, float, float, float, float)' <FunctionToPointerDecay>
|       |                           | `-DeclRefExpr 0x7fffd83f83f8 <col:19> 'void (float *, int, stbtt__active_edge *, float, float, float, float)' Function 0x7fffd83e5080 'stbtt__handle_clipped_edge' 'void (float *, int, stbtt__active_edge *, float, float, float, float)'
|       |                           |-ImplicitCastExpr 0x7fffd83f85b0 <col:46> 'float *' <LValueToRValue>
|       |                           | `-DeclRefExpr 0x7fffd83f8420 <col:46> 'float *' lvalue ParmVar 0x7fffd83eb120 'scanline' 'float *'
|       |                           |-ImplicitCastExpr 0x7fffd83f85c8 <col:55> 'int' <LValueToRValue>
|       |                           | `-DeclRefExpr 0x7fffd83f8448 <col:55> 'int' lvalue Var 0x7fffd83f4cc0 'x' 'int'
|       |                           |-ImplicitCastExpr 0x7fffd83f85e0 <col:57> 'stbtt__active_edge *' <LValueToRValue>
|       |                           | `-DeclRefExpr 0x7fffd83f8470 <col:57> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|       |                           |-ImplicitCastExpr 0x7fffd83f85f8 <col:60> 'float' <LValueToRValue>
|       |                           | `-DeclRefExpr 0x7fffd83f8498 <col:60> 'float' lvalue Var 0x7fffd83edab0 'x0' 'float'
|       |                           |-ImplicitCastExpr 0x7fffd83f8610 <col:63> 'float' <LValueToRValue>
|       |                           | `-DeclRefExpr 0x7fffd83f84c0 <col:63> 'float' lvalue Var 0x7fffd83f4eb0 'y0' 'float'
|       |                           |-ImplicitCastExpr 0x7fffd83f8628 <col:67> 'float' <LValueToRValue>
|       |                           | `-DeclRefExpr 0x7fffd83f84e8 <col:67> 'float' lvalue Var 0x7fffd83f5288 'x3' 'float'
|       |                           `-ImplicitCastExpr 0x7fffd83f8640 <col:70> 'float' <LValueToRValue>
|       |                             `-DeclRefExpr 0x7fffd83f8510 <col:70> 'float' lvalue Var 0x7fffd83f5358 'y3' 'float'
|       `-BinaryOperator 0x7fffd83f89f0 <line:3235:7, col:14> 'stbtt__active_edge *' '='
|         |-DeclRefExpr 0x7fffd83f8938 <col:7> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|         `-ImplicitCastExpr 0x7fffd83f89d8 <col:11, col:14> 'struct stbtt__active_edge *' <LValueToRValue>
|           `-MemberExpr 0x7fffd83f89a0 <col:11, col:14> 'struct stbtt__active_edge *' lvalue ->next 0x7fffd83e1930
|             `-ImplicitCastExpr 0x7fffd83f8988 <col:11> 'stbtt__active_edge *' <LValueToRValue>
|               `-DeclRefExpr 0x7fffd83f8960 <col:11> 'stbtt__active_edge *' lvalue ParmVar 0x7fffd83eb280 'e' 'stbtt__active_edge *'
|-FunctionDecl 0x7fffd83f8ef0 <line:3240:1, line:3335:1> line:3240:13 used stbtt__rasterize_sorted_edges 'void (stbtt__bitmap *, stbtt__edge *, int, int, int, int, void *)' static
| |-ParmVarDecl 0x7fffd83f8a90 <col:43, col:58> col:58 used result 'stbtt__bitmap *'
| |-ParmVarDecl 0x7fffd83f8b00 <col:66, col:79> col:79 used e 'stbtt__edge *'
| |-ParmVarDecl 0x7fffd83f8b78 <col:82, col:86> col:86 used n 'int'
| |-ParmVarDecl 0x7fffd83f8bf0 <col:89, col:93> col:93 referenced vsubsample 'int'
| |-ParmVarDecl 0x7fffd83f8c68 <col:105, col:109> col:109 used off_x 'int'
| |-ParmVarDecl 0x7fffd83f8ce0 <col:116, col:120> col:120 used off_y 'int'
| |-ParmVarDecl 0x7fffd83f8d58 <col:127, col:133> col:133 used userdata 'void *'
| `-CompoundStmt 0x7fffd83fee18 <line:3241:1, line:3335:1>
|   |-DeclStmt 0x7fffd83f9178 <line:3242:4, col:33>
|   | `-VarDecl 0x7fffd83f8fd8 <col:4, col:32> col:17 used hh 'stbtt__hheap':'struct stbtt__hheap' cinit
|   |   `-InitListExpr 0x7fffd83f90f0 <col:22, col:32> 'stbtt__hheap':'struct stbtt__hheap'
|   |     |-ImplicitCastExpr 0x7fffd83f9148 <col:24> 'struct stbtt__hheap_chunk *' <NullToPointer>
|   |     | `-IntegerLiteral 0x7fffd83f9038 <col:24> 'int' 0
|   |     |-ImplicitCastExpr 0x7fffd83f9160 <col:27> 'void *' <NullToPointer>
|   |     | `-IntegerLiteral 0x7fffd83f9058 <col:27> 'int' 0
|   |     `-IntegerLiteral 0x7fffd83f9078 <col:30> 'int' 0
|   |-DeclStmt 0x7fffd83f9298 <line:3243:4, col:37>
|   | `-VarDecl 0x7fffd83f91a0 <col:4, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25> ././stb/stb_truetype.h:3243:24 used active 'stbtt__active_edge *' cinit
|   |   `-ImplicitCastExpr 0x7fffd83f9280 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'stbtt__active_edge *' <NullToPointer>
|   |     `-ParenExpr 0x7fffd83f9260 <col:16, col:25> 'void *'
|   |       `-CStyleCastExpr 0x7fffd83f9238 <col:17, col:24> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x7fffd83f9200 <col:24> 'int' 0
|   |-DeclStmt 0x7fffd83f9458 <././stb/stb_truetype.h:3244:4, col:16>
|   | |-VarDecl 0x7fffd83f92c8 <col:4, col:8> col:8 used y 'int'
|   | |-VarDecl 0x7fffd83f9340 <col:4, col:12> col:10 used j 'int' cinit
|   | | `-IntegerLiteral 0x7fffd83f93a0 <col:12> 'int' 0
|   | `-VarDecl 0x7fffd83f93d8 <col:4, col:15> col:15 used i 'int'
|   |-DeclStmt 0x7fffd83f9660 <line:3245:4, col:51>
|   | |-VarDecl 0x7fffd83f94f0 <col:4, col:27> col:10 used scanline_data 'float [129]'
|   | |-VarDecl 0x7fffd83f9568 <col:4, col:31> col:31 used scanline 'float *'
|   | `-VarDecl 0x7fffd83f95e0 <col:4, col:42> col:42 used scanline2 'float *'
|   |-CStyleCastExpr 0x7fffd83f96f0 <line:1120:28, col:42> 'void' <ToVoid>
|   | `-UnaryExprOrTypeTraitExpr 0x7fffd83f96c0 <col:34, col:42> 'unsigned long' sizeof
|   |   `-ParenExpr 0x7fffd83f96a0 <col:40, col:42> 'int' lvalue
|   |     `-DeclRefExpr 0x7fffd83f9678 <line:3247:19> 'int' lvalue ParmVar 0x7fffd83f8bf0 'vsubsample' 'int'
|   |-IfStmt 0x7fffd83f9c80 <line:3249:4, line:3252:18>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83f97c8 <line:3249:8, col:20> 'int' '>'
|   | | |-ImplicitCastExpr 0x7fffd83f97b0 <col:8, col:16> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x7fffd83f9758 <col:8, col:16> 'int' lvalue ->w 0x7fffd83598d8
|   | | |   `-ImplicitCastExpr 0x7fffd83f9740 <col:8> 'stbtt__bitmap *' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x7fffd83f9718 <col:8> 'stbtt__bitmap *' lvalue ParmVar 0x7fffd83f8a90 'result' 'stbtt__bitmap *'
|   | | `-IntegerLiteral 0x7fffd83f9790 <col:20> 'int' 64
|   | |-BinaryOperator 0x7fffd83f9bc8 <line:3250:7, line:467:51> 'float *' '='
|   | | |-DeclRefExpr 0x7fffd83f97f0 <line:3250:7> 'float *' lvalue Var 0x7fffd83f9568 'scanline' 'float *'
|   | | `-CStyleCastExpr 0x7fffd83f9ba0 <col:18, line:467:51> 'float *' <BitCast>
|   | |   `-ParenExpr 0x7fffd83f9b80 <col:31, col:51> 'void *'
|   | |     `-BinaryOperator 0x7fffd83f9b58 <col:32, col:50> 'void *' ','
|   | |       |-CStyleCastExpr 0x7fffd83f98b8 <col:32, col:40> 'void' <ToVoid>
|   | |       | `-ImplicitCastExpr 0x7fffd83f98a0 <col:38, col:40> 'void *' <LValueToRValue>
|   | |       |   `-ParenExpr 0x7fffd83f9880 <col:38, col:40> 'void *' lvalue
|   | |       |     `-DeclRefExpr 0x7fffd83f9818 <line:3250:74> 'void *' lvalue ParmVar 0x7fffd83f8d58 'userdata' 'void *'
|   | |       `-CallExpr 0x7fffd83f9ad8 <line:467:42, col:50> 'void *'
|   | |         |-ImplicitCastExpr 0x7fffd83f9ac0 <col:42> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|   | |         | `-DeclRefExpr 0x7fffd83f98e0 <col:42> 'void *(unsigned long)' Function 0x7fffd831b4b0 'malloc' 'void *(unsigned long)'
|   | |         `-BinaryOperator 0x7fffd83f9a98 <line:3250:41, col:71> 'unsigned long' '*'
|   | |           |-ImplicitCastExpr 0x7fffd83f9a80 <col:41, col:55> 'unsigned long' <IntegralCast>
|   | |           | `-ParenExpr 0x7fffd83f9a28 <col:41, col:55> 'int'
|   | |           |   `-BinaryOperator 0x7fffd83f9a00 <col:42, col:54> 'int' '+'
|   | |           |     |-BinaryOperator 0x7fffd83f99b8 <col:42, col:52> 'int' '*'
|   | |           |     | |-ImplicitCastExpr 0x7fffd83f99a0 <col:42, col:50> 'int' <LValueToRValue>
|   | |           |     | | `-MemberExpr 0x7fffd83f9948 <col:42, col:50> 'int' lvalue ->w 0x7fffd83598d8
|   | |           |     | |   `-ImplicitCastExpr 0x7fffd83f9930 <col:42> 'stbtt__bitmap *' <LValueToRValue>
|   | |           |     | |     `-DeclRefExpr 0x7fffd83f9908 <col:42> 'stbtt__bitmap *' lvalue ParmVar 0x7fffd83f8a90 'result' 'stbtt__bitmap *'
|   | |           |     | `-IntegerLiteral 0x7fffd83f9980 <col:52> 'int' 2
|   | |           |     `-IntegerLiteral 0x7fffd83f99e0 <col:54> 'int' 1
|   | |           `-UnaryExprOrTypeTraitExpr 0x7fffd83f9a60 <col:59, col:71> 'unsigned long' sizeof 'float'
|   | `-BinaryOperator 0x7fffd83f9c58 <line:3252:7, col:18> 'float *' '='
|   |   |-DeclRefExpr 0x7fffd83f9bf0 <col:7> 'float *' lvalue Var 0x7fffd83f9568 'scanline' 'float *'
|   |   `-ImplicitCastExpr 0x7fffd83f9c40 <col:18> 'float *' <ArrayToPointerDecay>
|   |     `-DeclRefExpr 0x7fffd83f9c18 <col:18> 'float [129]' lvalue Var 0x7fffd83f94f0 'scanline_data' 'float [129]'
|   |-BinaryOperator 0x7fffd83fa3c8 <line:3254:4, col:35> 'float *' '='
|   | |-DeclRefExpr 0x7fffd83f9cb8 <col:4> 'float *' lvalue Var 0x7fffd83f95e0 'scanline2' 'float *'
|   | `-BinaryOperator 0x7fffd83fa3a0 <col:16, col:35> 'float *' '+'
|   |   |-ImplicitCastExpr 0x7fffd83fa370 <col:16> 'float *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x7fffd83fa2d0 <col:16> 'float *' lvalue Var 0x7fffd83f9568 'scanline' 'float *'
|   |   `-ImplicitCastExpr 0x7fffd83fa388 <col:27, col:35> 'int' <LValueToRValue>
|   |     `-MemberExpr 0x7fffd83fa338 <col:27, col:35> 'int' lvalue ->w 0x7fffd83598d8
|   |       `-ImplicitCastExpr 0x7fffd83fa320 <col:27> 'stbtt__bitmap *' <LValueToRValue>
|   |         `-DeclRefExpr 0x7fffd83fa2f8 <col:27> 'stbtt__bitmap *' lvalue ParmVar 0x7fffd83f8a90 'result' 'stbtt__bitmap *'
|   |-BinaryOperator 0x7fffd83fa458 <line:3256:4, col:8> 'int' '='
|   | |-DeclRefExpr 0x7fffd83fa3f0 <col:4> 'int' lvalue Var 0x7fffd83f92c8 'y' 'int'
|   | `-ImplicitCastExpr 0x7fffd83fa440 <col:8> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd83fa418 <col:8> 'int' lvalue ParmVar 0x7fffd83f8ce0 'off_y' 'int'
|   |-BinaryOperator 0x7fffd83fa748 <line:3257:4, col:44> 'float' '='
|   | |-MemberExpr 0x7fffd83fa528 <col:4, col:9> 'float' lvalue .y0 0x7fffd83e15a8
|   | | `-ArraySubscriptExpr 0x7fffd83fa500 <col:4, col:7> 'stbtt__edge':'struct stbtt__edge' lvalue
|   | |   |-ImplicitCastExpr 0x7fffd83fa4d0 <col:4> 'stbtt__edge *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd83fa480 <col:4> 'stbtt__edge *' lvalue ParmVar 0x7fffd83f8b00 'e' 'stbtt__edge *'
|   | |   `-ImplicitCastExpr 0x7fffd83fa4e8 <col:6> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x7fffd83fa4a8 <col:6> 'int' lvalue ParmVar 0x7fffd83f8b78 'n' 'int'
|   | `-BinaryOperator 0x7fffd83fa720 <col:14, col:44> 'float' '+'
|   |   |-CStyleCastExpr 0x7fffd83fa6c0 <col:14, col:40> 'float' <IntegralToFloating>
|   |   | `-ParenExpr 0x7fffd83fa6a0 <col:22, col:40> 'int'
|   |   |   `-BinaryOperator 0x7fffd83fa630 <col:23, col:39> 'int' '+'
|   |   |     |-ImplicitCastExpr 0x7fffd83fa600 <col:23> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x7fffd83fa560 <col:23> 'int' lvalue ParmVar 0x7fffd83f8ce0 'off_y' 'int'
|   |   |     `-ImplicitCastExpr 0x7fffd83fa618 <col:31, col:39> 'int' <LValueToRValue>
|   |   |       `-MemberExpr 0x7fffd83fa5c8 <col:31, col:39> 'int' lvalue ->h 0x7fffd8359938
|   |   |         `-ImplicitCastExpr 0x7fffd83fa5b0 <col:31> 'stbtt__bitmap *' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x7fffd83fa588 <col:31> 'stbtt__bitmap *' lvalue ParmVar 0x7fffd83f8a90 'result' 'stbtt__bitmap *'
|   |   `-ImplicitCastExpr 0x7fffd83fa708 <col:44> 'float' <IntegralToFloating>
|   |     `-IntegerLiteral 0x7fffd83fa6e8 <col:44> 'int' 1
|   |-WhileStmt 0x7fffd83fea40 <line:3259:4, line:3329:4>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd83fa840 <line:3259:11, col:23> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd83fa810 <col:11> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd83fa770 <col:11> 'int' lvalue Var 0x7fffd83f9340 'j' 'int'
|   | | `-ImplicitCastExpr 0x7fffd83fa828 <col:15, col:23> 'int' <LValueToRValue>
|   | |   `-MemberExpr 0x7fffd83fa7d8 <col:15, col:23> 'int' lvalue ->h 0x7fffd8359938
|   | |     `-ImplicitCastExpr 0x7fffd83fa7c0 <col:15> 'stbtt__bitmap *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x7fffd83fa798 <col:15> 'stbtt__bitmap *' lvalue ParmVar 0x7fffd83f8a90 'result' 'stbtt__bitmap *'
|   | `-CompoundStmt 0x7fffd83fe9c8 <col:26, line:3329:4>
|   |   |-DeclStmt 0x7fffd83fa980 <line:3261:7, col:37>
|   |   | `-VarDecl 0x7fffd83fa880 <col:7, col:33> col:13 used scan_y_top 'float' cinit
|   |   |   `-BinaryOperator 0x7fffd83fa958 <col:29, col:33> 'float' '+'
|   |   |     |-ImplicitCastExpr 0x7fffd83fa940 <col:29> 'float' <IntegralToFloating>
|   |   |     | `-ImplicitCastExpr 0x7fffd83fa928 <col:29> 'int' <LValueToRValue>
|   |   |     |   `-DeclRefExpr 0x7fffd83fa8e0 <col:29> 'int' lvalue Var 0x7fffd83f92c8 'y' 'int'
|   |   |     `-FloatingLiteral 0x7fffd83fa908 <col:33> 'float' 0.000000e+00
|   |   |-DeclStmt 0x7fffd83faab0 <line:3262:7, col:37>
|   |   | `-VarDecl 0x7fffd83fa9b0 <col:7, col:33> col:13 used scan_y_bottom 'float' cinit
|   |   |   `-BinaryOperator 0x7fffd83faa88 <col:29, col:33> 'float' '+'
|   |   |     |-ImplicitCastExpr 0x7fffd83faa70 <col:29> 'float' <IntegralToFloating>
|   |   |     | `-ImplicitCastExpr 0x7fffd83faa58 <col:29> 'int' <LValueToRValue>
|   |   |     |   `-DeclRefExpr 0x7fffd83faa10 <col:29> 'int' lvalue Var 0x7fffd83f92c8 'y' 'int'
|   |   |     `-FloatingLiteral 0x7fffd83faa38 <col:33> 'float' 1.000000e+00
|   |   |-DeclStmt 0x7fffd83fabe8 <line:3263:7, col:42>
|   |   | `-VarDecl 0x7fffd83fab40 <col:7, col:36> col:28 used step 'stbtt__active_edge **' cinit
|   |   |   `-UnaryOperator 0x7fffd83fabc8 <col:35, col:36> 'stbtt__active_edge **' prefix '&'
|   |   |     `-DeclRefExpr 0x7fffd83faba0 <col:36> 'stbtt__active_edge *' lvalue Var 0x7fffd83f91a0 'active' 'stbtt__active_edge *'
|   |   |-CallExpr 0x7fffd83fae60 <line:484:31, line:3265:63> 'void *'
|   |   | |-ImplicitCastExpr 0x7fffd83fae48 <line:484:31> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x7fffd83fac00 <col:31> 'void *(void *, int, unsigned long)' Function 0x7fffd832d138 'memset' 'void *(void *, int, unsigned long)'
|   |   | |-ImplicitCastExpr 0x7fffd83faeb8 <line:3265:20> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x7fffd83faea0 <col:20> 'float *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x7fffd83fac28 <col:20> 'float *' lvalue Var 0x7fffd83f9568 'scanline' 'float *'
|   |   | |-IntegerLiteral 0x7fffd83fac50 <col:31> 'int' 0
|   |   | `-BinaryOperator 0x7fffd83fade0 <col:34, col:62> 'unsigned long' '*'
|   |   |   |-ImplicitCastExpr 0x7fffd83fadc8 <col:34, col:42> 'unsigned long' <IntegralCast>
|   |   |   | `-ImplicitCastExpr 0x7fffd83fadb0 <col:34, col:42> 'int' <LValueToRValue>
|   |   |   |   `-MemberExpr 0x7fffd83facb0 <col:34, col:42> 'int' lvalue ->w 0x7fffd83598d8
|   |   |   |     `-ImplicitCastExpr 0x7fffd83fac98 <col:34> 'stbtt__bitmap *' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x7fffd83fac70 <col:34> 'stbtt__bitmap *' lvalue ParmVar 0x7fffd83f8a90 'result' 'stbtt__bitmap *'
|   |   |   `-UnaryExprOrTypeTraitExpr 0x7fffd83fad90 <col:44, col:62> 'unsigned long' sizeof
|   |   |     `-ParenExpr 0x7fffd83fad70 <col:50, col:62> 'float' lvalue
|   |   |       `-ArraySubscriptExpr 0x7fffd83fad48 <col:51, col:61> 'float' lvalue
|   |   |         |-ImplicitCastExpr 0x7fffd83fad30 <col:51> 'float *' <LValueToRValue>
|   |   |         | `-DeclRefExpr 0x7fffd83face8 <col:51> 'float *' lvalue Var 0x7fffd83f9568 'scanline' 'float *'
|   |   |         `-IntegerLiteral 0x7fffd83fad10 <col:60> 'int' 0
|   |   |-CallExpr 0x7fffd83fb170 <line:484:31, line:3266:67> 'void *'
|   |   | |-ImplicitCastExpr 0x7fffd83fb158 <line:484:31> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x7fffd83faed0 <col:31> 'void *(void *, int, unsigned long)' Function 0x7fffd832d138 'memset' 'void *(void *, int, unsigned long)'
|   |   | |-ImplicitCastExpr 0x7fffd83fb1c8 <line:3266:20> 'void *' <BitCast>
|   |   | | `-ImplicitCastExpr 0x7fffd83fb1b0 <col:20> 'float *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x7fffd83faef8 <col:20> 'float *' lvalue Var 0x7fffd83f95e0 'scanline2' 'float *'
|   |   | |-IntegerLiteral 0x7fffd83faf20 <col:31> 'int' 0
|   |   | `-BinaryOperator 0x7fffd83fb118 <col:34, col:66> 'unsigned long' '*'
|   |   |   |-ImplicitCastExpr 0x7fffd83fb100 <col:34, col:46> 'unsigned long' <IntegralCast>
|   |   |   | `-ParenExpr 0x7fffd83fb018 <col:34, col:46> 'int'
|   |   |   |   `-BinaryOperator 0x7fffd83faff0 <col:35, col:45> 'int' '+'
|   |   |   |     |-ImplicitCastExpr 0x7fffd83fafd8 <col:35, col:43> 'int' <LValueToRValue>
|   |   |   |     | `-MemberExpr 0x7fffd83faf80 <col:35, col:43> 'int' lvalue ->w 0x7fffd83598d8
|   |   |   |     |   `-ImplicitCastExpr 0x7fffd83faf68 <col:35> 'stbtt__bitmap *' <LValueToRValue>
|   |   |   |     |     `-DeclRefExpr 0x7fffd83faf40 <col:35> 'stbtt__bitmap *' lvalue ParmVar 0x7fffd83f8a90 'result' 'stbtt__bitmap *'
|   |   |   |     `-IntegerLiteral 0x7fffd83fafb8 <col:45> 'int' 1
|   |   |   `-UnaryExprOrTypeTraitExpr 0x7fffd83fb0e0 <col:48, col:66> 'unsigned long' sizeof
|   |   |     `-ParenExpr 0x7fffd83fb0c0 <col:54, col:66> 'float' lvalue
|   |   |       `-ArraySubscriptExpr 0x7fffd83fb098 <col:55, col:65> 'float' lvalue
|   |   |         |-ImplicitCastExpr 0x7fffd83fb080 <col:55> 'float *' <LValueToRValue>
|   |   |         | `-DeclRefExpr 0x7fffd83fb038 <col:55> 'float *' lvalue Var 0x7fffd83f9568 'scanline' 'float *'
|   |   |         `-IntegerLiteral 0x7fffd83fb060 <col:64> 'int' 0
|   |   |-WhileStmt 0x7fffd83fc020 <line:3270:7, line:3280:7>
|   |   | |-<<<NULL>>>
|   |   | |-ImplicitCastExpr 0x7fffd83fb240 <line:3270:14, col:15> 'stbtt__active_edge *' <LValueToRValue>
|   |   | | `-UnaryOperator 0x7fffd83fb220 <col:14, col:15> 'stbtt__active_edge *' lvalue prefix '*'
|   |   | |   `-ImplicitCastExpr 0x7fffd83fb208 <col:15> 'stbtt__active_edge **' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x7fffd83fb1e0 <col:15> 'stbtt__active_edge **' lvalue Var 0x7fffd83fab40 'step' 'stbtt__active_edge **'
|   |   | `-CompoundStmt 0x7fffd83fc000 <col:21, line:3280:7>
|   |   |   |-DeclStmt 0x7fffd83fb340 <line:3271:10, col:40>
|   |   |   | `-VarDecl 0x7fffd83fb268 <col:10, col:36> col:31 used z 'stbtt__active_edge *' cinit
|   |   |   |   `-ImplicitCastExpr 0x7fffd83fb328 <col:35, col:36> 'stbtt__active_edge *' <LValueToRValue>
|   |   |   |     `-UnaryOperator 0x7fffd83fb308 <col:35, col:36> 'stbtt__active_edge *' lvalue prefix '*'
|   |   |   |       `-ImplicitCastExpr 0x7fffd83fb2f0 <col:36> 'stbtt__active_edge **' <LValueToRValue>
|   |   |   |         `-DeclRefExpr 0x7fffd83fb2c8 <col:36> 'stbtt__active_edge **' lvalue Var 0x7fffd83fab40 'step' 'stbtt__active_edge **'
|   |   |   `-IfStmt 0x7fffd83fbfc8 <line:3272:10, line:3279:10>
|   |   |     |-<<<NULL>>>
|   |   |     |-<<<NULL>>>
|   |   |     |-BinaryOperator 0x7fffd83fb428 <line:3272:14, col:23> 'int' '<='
|   |   |     | |-ImplicitCastExpr 0x7fffd83fb3f8 <col:14, col:17> 'float' <LValueToRValue>
|   |   |     | | `-MemberExpr 0x7fffd83fb398 <col:14, col:17> 'float' lvalue ->ey 0x7fffd83e1b70
|   |   |     | |   `-ImplicitCastExpr 0x7fffd83fb380 <col:14> 'stbtt__active_edge *' <LValueToRValue>
|   |   |     | |     `-DeclRefExpr 0x7fffd83fb358 <col:14> 'stbtt__active_edge *' lvalue Var 0x7fffd83fb268 'z' 'stbtt__active_edge *'
|   |   |     | `-ImplicitCastExpr 0x7fffd83fb410 <col:23> 'float' <LValueToRValue>
|   |   |     |   `-DeclRefExpr 0x7fffd83fb3d0 <col:23> 'float' lvalue Var 0x7fffd83fa880 'scan_y_top' 'float'
|   |   |     |-CompoundStmt 0x7fffd83fbdf8 <col:35, line:3277:10>
|   |   |     | |-BinaryOperator 0x7fffd83fb540 <line:3273:13, col:24> 'stbtt__active_edge *' '='
|   |   |     | | |-UnaryOperator 0x7fffd83fb490 <col:13, col:14> 'stbtt__active_edge *' lvalue prefix '*'
|   |   |     | | | `-ImplicitCastExpr 0x7fffd83fb478 <col:14> 'stbtt__active_edge **' <LValueToRValue>
|   |   |     | | |   `-DeclRefExpr 0x7fffd83fb450 <col:14> 'stbtt__active_edge **' lvalue Var 0x7fffd83fab40 'step' 'stbtt__active_edge **'
|   |   |     | | `-ImplicitCastExpr 0x7fffd83fb528 <col:21, col:24> 'struct stbtt__active_edge *' <LValueToRValue>
|   |   |     | |   `-MemberExpr 0x7fffd83fb4f0 <col:21, col:24> 'struct stbtt__active_edge *' lvalue ->next 0x7fffd83e1930
|   |   |     | |     `-ImplicitCastExpr 0x7fffd83fb4d8 <col:21> 'stbtt__active_edge *' <LValueToRValue>
|   |   |     | |       `-DeclRefExpr 0x7fffd83fb4b0 <col:21> 'stbtt__active_edge *' lvalue Var 0x7fffd83fb268 'z' 'stbtt__active_edge *'
|   |   |     | |-ParenExpr 0x7fffd83fbb88 </usr/include/assert.h:108:3, line:113:7> 'void'
|   |   |     | | `-BinaryOperator 0x7fffd83fbb60 <line:108:4, line:113:6> 'void' ','
|   |   |     | |   |-CStyleCastExpr 0x7fffd83fb6d8 <line:108:4, col:33> 'void' <ToVoid>
|   |   |     | |   | `-UnaryExprOrTypeTraitExpr 0x7fffd83fb6a8 <col:11, col:33> 'unsigned long' sizeof
|   |   |     | |   |   `-ParenExpr 0x7fffd83fb688 <col:18, col:33> 'int'
|   |   |     | |   |     `-ConditionalOperator 0x7fffd83fb658 <col:19, col:32> 'int'
|   |   |     | |   |       |-ImplicitCastExpr 0x7fffd83fb640 <col:19, col:24> 'float' <LValueToRValue>
|   |   |     | |   |       | `-ParenExpr 0x7fffd83fb5e0 <col:19, col:24> 'float' lvalue
|   |   |     | |   |       |   `-MemberExpr 0x7fffd83fb5a8 <././stb/stb_truetype.h:3274:26, col:29> 'float' lvalue ->direction 0x7fffd83e1ab0
|   |   |     | |   |       |     `-ImplicitCastExpr 0x7fffd83fb590 <col:26> 'stbtt__active_edge *' <LValueToRValue>
|   |   |     | |   |       |       `-DeclRefExpr 0x7fffd83fb568 <col:26> 'stbtt__active_edge *' lvalue Var 0x7fffd83fb268 'z' 'stbtt__active_edge *'
|   |   |     | |   |       |-IntegerLiteral 0x7fffd83fb600 </usr/include/assert.h:108:28> 'int' 1
|   |   |     | |   |       `-IntegerLiteral 0x7fffd83fb620 <col:32> 'int' 0
|   |   |     | |   `-UnaryOperator 0x7fffd83fbb40 <col:36, line:113:6> 'void' prefix '__extension__'
|   |   |     | |     `-StmtExpr 0x7fffd83fbb20 <line:108:50, line:113:6> 'void'
|   |   |     | |       `-CompoundStmt 0x7fffd83fbb08 <line:108:51, line:113:5>
|   |   |     | |         `-IfStmt 0x7fffd83fbad0 <line:109:7, line:112:68>
|   |   |     | |           |-<<<NULL>>>
|   |   |     | |           |-<<<NULL>>>
|   |   |     | |           |-ImplicitCastExpr 0x7fffd83fb778 <././stb/stb_truetype.h:3274:26, col:29> 'float' <LValueToRValue>
|   |   |     | |           | `-MemberExpr 0x7fffd83fb740 <col:26, col:29> 'float' lvalue ->direction 0x7fffd83e1ab0
|   |   |     | |           |   `-ImplicitCastExpr 0x7fffd83fb728 <col:26> 'stbtt__active_edge *' <LValueToRValue>
|   |   |     | |           |     `-DeclRefExpr 0x7fffd83fb700 <col:26> 'stbtt__active_edge *' lvalue Var 0x7fffd83fb268 'z' 'stbtt__active_edge *'
|   |   |     | |           |-NullStmt 0x7fffd83fb790 </usr/include/assert.h:110:9>
|   |   |     | |           `-CallExpr 0x7fffd83fb9f8 <line:112:9, col:68> 'void'
|   |   |     | |             |-ImplicitCastExpr 0x7fffd83fb9e0 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |   |     | |             | `-DeclRefExpr 0x7fffd83fb7a0 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |   |     | |             |-ImplicitCastExpr 0x7fffd83fba58 <<scratch space>:16:1> 'const char *' <BitCast>
|   |   |     | |             | `-ImplicitCastExpr 0x7fffd83fba40 <col:1> 'char *' <ArrayToPointerDecay>
|   |   |     | |             |   `-StringLiteral 0x7fffd83fb808 <col:1> 'char [13]' lvalue "z->direction"
|   |   |     | |             |-ImplicitCastExpr 0x7fffd83fba88 <line:17:1> 'const char *' <BitCast>
|   |   |     | |             | `-ImplicitCastExpr 0x7fffd83fba70 <col:1> 'char *' <ArrayToPointerDecay>
|   |   |     | |             |   `-StringLiteral 0x7fffd83fb840 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |   |     | |             |-ImplicitCastExpr 0x7fffd83fbaa0 <line:18:1> 'unsigned int' <IntegralCast>
|   |   |     | |             | `-IntegerLiteral 0x7fffd83fb880 <col:1> 'int' 3274
|   |   |     | |             `-ImplicitCastExpr 0x7fffd83fbab8 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |   |     | |               `-UnaryOperator 0x7fffd83fb9c0 <col:30, col:44> 'const char [95]' lvalue prefix '__extension__'
|   |   |     | |                 `-PredefinedExpr 0x7fffd83fb9a0 <col:44> 'const char [95]' lvalue __PRETTY_FUNCTION__
|   |   |     | |                   `-StringLiteral 0x7fffd83fb918 <col:44> 'const char [95]' lvalue "void stbtt__rasterize_sorted_edges(stbtt__bitmap *, stbtt__edge *, int, int, int, int, void *)"
|   |   |     | |-BinaryOperator 0x7fffd83fbc58 <././stb/stb_truetype.h:3275:13, col:28> 'float' '='
|   |   |     | | |-MemberExpr 0x7fffd83fbbe8 <col:13, col:16> 'float' lvalue ->direction 0x7fffd83e1ab0
|   |   |     | | | `-ImplicitCastExpr 0x7fffd83fbbd0 <col:13> 'stbtt__active_edge *' <LValueToRValue>
|   |   |     | | |   `-DeclRefExpr 0x7fffd83fbba8 <col:13> 'stbtt__active_edge *' lvalue Var 0x7fffd83fb268 'z' 'stbtt__active_edge *'
|   |   |     | | `-ImplicitCastExpr 0x7fffd83fbc40 <col:28> 'float' <IntegralToFloating>
|   |   |     | |   `-IntegerLiteral 0x7fffd83fbc20 <col:28> 'int' 0
|   |   |     | `-CallExpr 0x7fffd83fbd90 <line:3276:13, col:37> 'void'
|   |   |     |   |-ImplicitCastExpr 0x7fffd83fbd78 <col:13> 'void (*)(stbtt__hheap *, void *)' <FunctionToPointerDecay>
|   |   |     |   | `-DeclRefExpr 0x7fffd83fbc80 <col:13> 'void (stbtt__hheap *, void *)' Function 0x7fffd83e0a70 'stbtt__hheap_free' 'void (stbtt__hheap *, void *)'
|   |   |     |   |-UnaryOperator 0x7fffd83fbcd0 <col:31, col:32> 'stbtt__hheap *' prefix '&'
|   |   |     |   | `-DeclRefExpr 0x7fffd83fbca8 <col:32> 'stbtt__hheap':'struct stbtt__hheap' lvalue Var 0x7fffd83f8fd8 'hh' 'stbtt__hheap':'struct stbtt__hheap'
|   |   |     |   `-ImplicitCastExpr 0x7fffd83fbde0 <col:36> 'void *' <BitCast>
|   |   |     |     `-ImplicitCastExpr 0x7fffd83fbdc8 <col:36> 'stbtt__active_edge *' <LValueToRValue>
|   |   |     |       `-DeclRefExpr 0x7fffd83fbcf0 <col:36> 'stbtt__active_edge *' lvalue Var 0x7fffd83fb268 'z' 'stbtt__active_edge *'
|   |   |     `-CompoundStmt 0x7fffd83fbfb0 <line:3277:17, line:3279:10>
|   |   |       `-BinaryOperator 0x7fffd83fbf88 <line:3278:13, col:35> 'stbtt__active_edge **' '='
|   |   |         |-DeclRefExpr 0x7fffd83fbe28 <col:13> 'stbtt__active_edge **' lvalue Var 0x7fffd83fab40 'step' 'stbtt__active_edge **'
|   |   |         `-UnaryOperator 0x7fffd83fbf68 <col:20, col:35> 'struct stbtt__active_edge **' prefix '&'
|   |   |           `-ParenExpr 0x7fffd83fbf20 <col:21, col:35> 'struct stbtt__active_edge *' lvalue
|   |   |             `-MemberExpr 0x7fffd83fbee8 <col:22, col:31> 'struct stbtt__active_edge *' lvalue ->next 0x7fffd83e1930
|   |   |               `-ImplicitCastExpr 0x7fffd83fbed0 <col:22, col:28> 'stbtt__active_edge *' <LValueToRValue>
|   |   |                 `-ParenExpr 0x7fffd83fbeb0 <col:22, col:28> 'stbtt__active_edge *' lvalue
|   |   |                   `-UnaryOperator 0x7fffd83fbe90 <col:23, col:24> 'stbtt__active_edge *' lvalue prefix '*'
|   |   |                     `-ImplicitCastExpr 0x7fffd83fbe78 <col:24> 'stbtt__active_edge **' <LValueToRValue>
|   |   |                       `-DeclRefExpr 0x7fffd83fbe50 <col:24> 'stbtt__active_edge **' lvalue Var 0x7fffd83fab40 'step' 'stbtt__active_edge **'
|   |   |-WhileStmt 0x7fffd83fd330 <line:3283:7, line:3300:7>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x7fffd83fc110 <line:3283:14, col:23> 'int' '<='
|   |   | | |-ImplicitCastExpr 0x7fffd83fc0e0 <col:14, col:17> 'float' <LValueToRValue>
|   |   | | | `-MemberExpr 0x7fffd83fc080 <col:14, col:17> 'float' lvalue ->y0 0x7fffd83e15a8
|   |   | | |   `-ImplicitCastExpr 0x7fffd83fc068 <col:14> 'stbtt__edge *' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x7fffd83fc040 <col:14> 'stbtt__edge *' lvalue ParmVar 0x7fffd83f8b00 'e' 'stbtt__edge *'
|   |   | | `-ImplicitCastExpr 0x7fffd83fc0f8 <col:23> 'float' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x7fffd83fc0b8 <col:23> 'float' lvalue Var 0x7fffd83fa9b0 'scan_y_bottom' 'float'
|   |   | `-CompoundStmt 0x7fffd83fd310 <col:38, line:3300:7>
|   |   |   |-IfStmt 0x7fffd83fd290 <line:3284:10, line:3298:10>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-<<<NULL>>>
|   |   |   | |-BinaryOperator 0x7fffd83fc258 <line:3284:14, col:26> 'int' '!='
|   |   |   | | |-ImplicitCastExpr 0x7fffd83fc228 <col:14, col:17> 'float' <LValueToRValue>
|   |   |   | | | `-MemberExpr 0x7fffd83fc178 <col:14, col:17> 'float' lvalue ->y0 0x7fffd83e15a8
|   |   |   | | |   `-ImplicitCastExpr 0x7fffd83fc160 <col:14> 'stbtt__edge *' <LValueToRValue>
|   |   |   | | |     `-DeclRefExpr 0x7fffd83fc138 <col:14> 'stbtt__edge *' lvalue ParmVar 0x7fffd83f8b00 'e' 'stbtt__edge *'
|   |   |   | | `-ImplicitCastExpr 0x7fffd83fc240 <col:23, col:26> 'float' <LValueToRValue>
|   |   |   | |   `-MemberExpr 0x7fffd83fc1f0 <col:23, col:26> 'float' lvalue ->y1 0x7fffd83e1668
|   |   |   | |     `-ImplicitCastExpr 0x7fffd83fc1d8 <col:23> 'stbtt__edge *' <LValueToRValue>
|   |   |   | |       `-DeclRefExpr 0x7fffd83fc1b0 <col:23> 'stbtt__edge *' lvalue ParmVar 0x7fffd83f8b00 'e' 'stbtt__edge *'
|   |   |   | |-CompoundStmt 0x7fffd83fd270 <col:30, line:3298:10>
|   |   |   | | |-DeclStmt 0x7fffd83fc570 <line:3285:13, col:91>
|   |   |   | | | `-VarDecl 0x7fffd83fc2e0 <col:13, col:90> col:33 used z 'stbtt__active_edge *' cinit
|   |   |   | | |   `-CallExpr 0x7fffd83fc4c0 <col:37, col:90> 'stbtt__active_edge *'
|   |   |   | | |     |-ImplicitCastExpr 0x7fffd83fc4a8 <col:37> 'stbtt__active_edge *(*)(stbtt__hheap *, stbtt__edge *, int, float, void *)' <FunctionToPointerDecay>
|   |   |   | | |     | `-DeclRefExpr 0x7fffd83fc340 <col:37> 'stbtt__active_edge *(stbtt__hheap *, stbtt__edge *, int, float, void *)' Function 0x7fffd83e2060 'stbtt__new_active' 'stbtt__active_edge *(stbtt__hheap *, stbtt__edge *, int, float, void *)'
|   |   |   | | |     |-UnaryOperator 0x7fffd83fc390 <col:55, col:56> 'stbtt__hheap *' prefix '&'
|   |   |   | | |     | `-DeclRefExpr 0x7fffd83fc368 <col:56> 'stbtt__hheap':'struct stbtt__hheap' lvalue Var 0x7fffd83f8fd8 'hh' 'stbtt__hheap':'struct stbtt__hheap'
|   |   |   | | |     |-ImplicitCastExpr 0x7fffd83fc510 <col:60> 'stbtt__edge *' <LValueToRValue>
|   |   |   | | |     | `-DeclRefExpr 0x7fffd83fc3b0 <col:60> 'stbtt__edge *' lvalue ParmVar 0x7fffd83f8b00 'e' 'stbtt__edge *'
|   |   |   | | |     |-ImplicitCastExpr 0x7fffd83fc528 <col:63> 'int' <LValueToRValue>
|   |   |   | | |     | `-DeclRefExpr 0x7fffd83fc3d8 <col:63> 'int' lvalue ParmVar 0x7fffd83f8c68 'off_x' 'int'
|   |   |   | | |     |-ImplicitCastExpr 0x7fffd83fc540 <col:70> 'float' <LValueToRValue>
|   |   |   | | |     | `-DeclRefExpr 0x7fffd83fc400 <col:70> 'float' lvalue Var 0x7fffd83fa880 'scan_y_top' 'float'
|   |   |   | | |     `-ImplicitCastExpr 0x7fffd83fc558 <col:82> 'void *' <LValueToRValue>
|   |   |   | | |       `-DeclRefExpr 0x7fffd83fc428 <col:82> 'void *' lvalue ParmVar 0x7fffd83f8d58 'userdata' 'void *'
|   |   |   | | `-IfStmt 0x7fffd83fd238 <line:3286:13, line:3297:13>
|   |   |   | |   |-<<<NULL>>>
|   |   |   | |   |-<<<NULL>>>
|   |   |   | |   |-BinaryOperator 0x7fffd83fc660 <line:3286:17, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25> 'int' '!='
|   |   |   | |   | |-ImplicitCastExpr 0x7fffd83fc630 <././stb/stb_truetype.h:3286:17> 'stbtt__active_edge *' <LValueToRValue>
|   |   |   | |   | | `-DeclRefExpr 0x7fffd83fc588 <col:17> 'stbtt__active_edge *' lvalue Var 0x7fffd83fc2e0 'z' 'stbtt__active_edge *'
|   |   |   | |   | `-ImplicitCastExpr 0x7fffd83fc648 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'stbtt__active_edge *' <BitCast>
|   |   |   | |   |   `-ParenExpr 0x7fffd83fc610 <col:16, col:25> 'void *'
|   |   |   | |   |     `-CStyleCastExpr 0x7fffd83fc5e8 <col:17, col:24> 'void *' <NullToPointer>
|   |   |   | |   |       `-IntegerLiteral 0x7fffd83fc5b0 <col:24> 'int' 0
|   |   |   | |   |-CompoundStmt 0x7fffd83fd208 <././stb/stb_truetype.h:3286:28, line:3297:13>
|   |   |   | |   | |-IfStmt 0x7fffd83fca00 <line:3287:16, line:3292:16>
|   |   |   | |   | | |-<<<NULL>>>
|   |   |   | |   | | |-<<<NULL>>>
|   |   |   | |   | | |-BinaryOperator 0x7fffd83fc798 <line:3287:20, col:39> 'int' '&&'
|   |   |   | |   | | | |-BinaryOperator 0x7fffd83fc6e8 <col:20, col:25> 'int' '=='
|   |   |   | |   | | | | |-ImplicitCastExpr 0x7fffd83fc6d0 <col:20> 'int' <LValueToRValue>
|   |   |   | |   | | | | | `-DeclRefExpr 0x7fffd83fc688 <col:20> 'int' lvalue Var 0x7fffd83f9340 'j' 'int'
|   |   |   | |   | | | | `-IntegerLiteral 0x7fffd83fc6b0 <col:25> 'int' 0
|   |   |   | |   | | | `-BinaryOperator 0x7fffd83fc770 <col:30, col:39> 'int' '!='
|   |   |   | |   | | |   |-ImplicitCastExpr 0x7fffd83fc758 <col:30> 'int' <LValueToRValue>
|   |   |   | |   | | |   | `-DeclRefExpr 0x7fffd83fc710 <col:30> 'int' lvalue ParmVar 0x7fffd83f8ce0 'off_y' 'int'
|   |   |   | |   | | |   `-IntegerLiteral 0x7fffd83fc738 <col:39> 'int' 0
|   |   |   | |   | | |-CompoundStmt 0x7fffd83fc9e8 <col:42, line:3292:16>
|   |   |   | |   | | | `-IfStmt 0x7fffd83fc9b0 <line:3288:19, line:3291:19>
|   |   |   | |   | | |   |-<<<NULL>>>
|   |   |   | |   | | |   |-<<<NULL>>>
|   |   |   | |   | | |   |-BinaryOperator 0x7fffd83fc890 <line:3288:23, col:31> 'int' '<'
|   |   |   | |   | | |   | |-ImplicitCastExpr 0x7fffd83fc860 <col:23, col:26> 'float' <LValueToRValue>
|   |   |   | |   | | |   | | `-MemberExpr 0x7fffd83fc800 <col:23, col:26> 'float' lvalue ->ey 0x7fffd83e1b70
|   |   |   | |   | | |   | |   `-ImplicitCastExpr 0x7fffd83fc7e8 <col:23> 'stbtt__active_edge *' <LValueToRValue>
|   |   |   | |   | | |   | |     `-DeclRefExpr 0x7fffd83fc7c0 <col:23> 'stbtt__active_edge *' lvalue Var 0x7fffd83fc2e0 'z' 'stbtt__active_edge *'
|   |   |   | |   | | |   | `-ImplicitCastExpr 0x7fffd83fc878 <col:31> 'float' <LValueToRValue>
|   |   |   | |   | | |   |   `-DeclRefExpr 0x7fffd83fc838 <col:31> 'float' lvalue Var 0x7fffd83fa880 'scan_y_top' 'float'
|   |   |   | |   | | |   |-CompoundStmt 0x7fffd83fc998 <col:43, line:3291:19>
|   |   |   | |   | | |   | `-BinaryOperator 0x7fffd83fc970 <line:3290:22, col:30> 'float' '='
|   |   |   | |   | | |   |   |-MemberExpr 0x7fffd83fc8f8 <col:22, col:25> 'float' lvalue ->ey 0x7fffd83e1b70
|   |   |   | |   | | |   |   | `-ImplicitCastExpr 0x7fffd83fc8e0 <col:22> 'stbtt__active_edge *' <LValueToRValue>
|   |   |   | |   | | |   |   |   `-DeclRefExpr 0x7fffd83fc8b8 <col:22> 'stbtt__active_edge *' lvalue Var 0x7fffd83fc2e0 'z' 'stbtt__active_edge *'
|   |   |   | |   | | |   |   `-ImplicitCastExpr 0x7fffd83fc958 <col:30> 'float' <LValueToRValue>
|   |   |   | |   | | |   |     `-DeclRefExpr 0x7fffd83fc930 <col:30> 'float' lvalue Var 0x7fffd83fa880 'scan_y_top' 'float'
|   |   |   | |   | | |   `-<<<NULL>>>
|   |   |   | |   | | `-<<<NULL>>>
|   |   |   | |   | |-ParenExpr 0x7fffd83fd078 </usr/include/assert.h:108:3, line:113:7> 'void'
|   |   |   | |   | | `-BinaryOperator 0x7fffd83fd050 <line:108:4, line:113:6> 'void' ','
|   |   |   | |   | |   |-CStyleCastExpr 0x7fffd83fcc10 <line:108:4, col:33> 'void' <ToVoid>
|   |   |   | |   | |   | `-UnaryExprOrTypeTraitExpr 0x7fffd83fcbe0 <col:11, col:33> 'unsigned long' sizeof
|   |   |   | |   | |   |   `-ParenExpr 0x7fffd83fcbc0 <col:18, col:33> 'int'
|   |   |   | |   | |   |     `-ConditionalOperator 0x7fffd83fcb90 <col:19, col:32> 'int'
|   |   |   | |   | |   |       |-ParenExpr 0x7fffd83fcb30 <col:19, col:24> 'int'
|   |   |   | |   | |   |       | `-BinaryOperator 0x7fffd83fcb08 <././stb/stb_truetype.h:3293:29, col:38> 'int' '>='
|   |   |   | |   | |   |       |   |-ImplicitCastExpr 0x7fffd83fcad8 <col:29, col:32> 'float' <LValueToRValue>
|   |   |   | |   | |   |       |   | `-MemberExpr 0x7fffd83fca78 <col:29, col:32> 'float' lvalue ->ey 0x7fffd83e1b70
|   |   |   | |   | |   |       |   |   `-ImplicitCastExpr 0x7fffd83fca60 <col:29> 'stbtt__active_edge *' <LValueToRValue>
|   |   |   | |   | |   |       |   |     `-DeclRefExpr 0x7fffd83fca38 <col:29> 'stbtt__active_edge *' lvalue Var 0x7fffd83fc2e0 'z' 'stbtt__active_edge *'
|   |   |   | |   | |   |       |   `-ImplicitCastExpr 0x7fffd83fcaf0 <col:38> 'float' <LValueToRValue>
|   |   |   | |   | |   |       |     `-DeclRefExpr 0x7fffd83fcab0 <col:38> 'float' lvalue Var 0x7fffd83fa880 'scan_y_top' 'float'
|   |   |   | |   | |   |       |-IntegerLiteral 0x7fffd83fcb50 </usr/include/assert.h:108:28> 'int' 1
|   |   |   | |   | |   |       `-IntegerLiteral 0x7fffd83fcb70 <col:32> 'int' 0
|   |   |   | |   | |   `-UnaryOperator 0x7fffd83fd030 <col:36, line:113:6> 'void' prefix '__extension__'
|   |   |   | |   | |     `-StmtExpr 0x7fffd83fd010 <line:108:50, line:113:6> 'void'
|   |   |   | |   | |       `-CompoundStmt 0x7fffd83fcff8 <line:108:51, line:113:5>
|   |   |   | |   | |         `-IfStmt 0x7fffd83fcfc0 <line:109:7, line:112:68>
|   |   |   | |   | |           |-<<<NULL>>>
|   |   |   | |   | |           |-<<<NULL>>>
|   |   |   | |   | |           |-BinaryOperator 0x7fffd83fcd08 <././stb/stb_truetype.h:3293:29, col:38> 'int' '>='
|   |   |   | |   | |           | |-ImplicitCastExpr 0x7fffd83fccd8 <col:29, col:32> 'float' <LValueToRValue>
|   |   |   | |   | |           | | `-MemberExpr 0x7fffd83fcc78 <col:29, col:32> 'float' lvalue ->ey 0x7fffd83e1b70
|   |   |   | |   | |           | |   `-ImplicitCastExpr 0x7fffd83fcc60 <col:29> 'stbtt__active_edge *' <LValueToRValue>
|   |   |   | |   | |           | |     `-DeclRefExpr 0x7fffd83fcc38 <col:29> 'stbtt__active_edge *' lvalue Var 0x7fffd83fc2e0 'z' 'stbtt__active_edge *'
|   |   |   | |   | |           | `-ImplicitCastExpr 0x7fffd83fccf0 <col:38> 'float' <LValueToRValue>
|   |   |   | |   | |           |   `-DeclRefExpr 0x7fffd83fccb0 <col:38> 'float' lvalue Var 0x7fffd83fa880 'scan_y_top' 'float'
|   |   |   | |   | |           |-NullStmt 0x7fffd83fcd30 </usr/include/assert.h:110:9>
|   |   |   | |   | |           `-CallExpr 0x7fffd83fcee8 <line:112:9, col:68> 'void'
|   |   |   | |   | |             |-ImplicitCastExpr 0x7fffd83fced0 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |   |   | |   | |             | `-DeclRefExpr 0x7fffd83fcd40 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |   |   | |   | |             |-ImplicitCastExpr 0x7fffd83fcf48 <<scratch space>:19:1> 'const char *' <BitCast>
|   |   |   | |   | |             | `-ImplicitCastExpr 0x7fffd83fcf30 <col:1> 'char *' <ArrayToPointerDecay>
|   |   |   | |   | |             |   `-StringLiteral 0x7fffd83fcd68 <col:1> 'char [20]' lvalue "z->ey >= scan_y_top"
|   |   |   | |   | |             |-ImplicitCastExpr 0x7fffd83fcf78 <line:20:1> 'const char *' <BitCast>
|   |   |   | |   | |             | `-ImplicitCastExpr 0x7fffd83fcf60 <col:1> 'char *' <ArrayToPointerDecay>
|   |   |   | |   | |             |   `-StringLiteral 0x7fffd83fcda8 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |   |   | |   | |             |-ImplicitCastExpr 0x7fffd83fcf90 <line:21:1> 'unsigned int' <IntegralCast>
|   |   |   | |   | |             | `-IntegerLiteral 0x7fffd83fcde8 <col:1> 'int' 3293
|   |   |   | |   | |             `-ImplicitCastExpr 0x7fffd83fcfa8 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |   |   | |   | |               `-UnaryOperator 0x7fffd83fceb0 <col:30, col:44> 'const char [95]' lvalue prefix '__extension__'
|   |   |   | |   | |                 `-PredefinedExpr 0x7fffd83fce90 <col:44> 'const char [95]' lvalue __PRETTY_FUNCTION__
|   |   |   | |   | |                   `-StringLiteral 0x7fffd83fce08 <col:44> 'const char [95]' lvalue "void stbtt__rasterize_sorted_edges(stbtt__bitmap *, stbtt__edge *, int, int, int, int, void *)"
|   |   |   | |   | |-BinaryOperator 0x7fffd83fd150 <././stb/stb_truetype.h:3295:16, col:26> 'struct stbtt__active_edge *' '='
|   |   |   | |   | | |-MemberExpr 0x7fffd83fd0d8 <col:16, col:19> 'struct stbtt__active_edge *' lvalue ->next 0x7fffd83e1930
|   |   |   | |   | | | `-ImplicitCastExpr 0x7fffd83fd0c0 <col:16> 'stbtt__active_edge *' <LValueToRValue>
|   |   |   | |   | | |   `-DeclRefExpr 0x7fffd83fd098 <col:16> 'stbtt__active_edge *' lvalue Var 0x7fffd83fc2e0 'z' 'stbtt__active_edge *'
|   |   |   | |   | | `-ImplicitCastExpr 0x7fffd83fd138 <col:26> 'stbtt__active_edge *' <LValueToRValue>
|   |   |   | |   | |   `-DeclRefExpr 0x7fffd83fd110 <col:26> 'stbtt__active_edge *' lvalue Var 0x7fffd83f91a0 'active' 'stbtt__active_edge *'
|   |   |   | |   | `-BinaryOperator 0x7fffd83fd1e0 <line:3296:16, col:25> 'stbtt__active_edge *' '='
|   |   |   | |   |   |-DeclRefExpr 0x7fffd83fd178 <col:16> 'stbtt__active_edge *' lvalue Var 0x7fffd83f91a0 'active' 'stbtt__active_edge *'
|   |   |   | |   |   `-ImplicitCastExpr 0x7fffd83fd1c8 <col:25> 'stbtt__active_edge *' <LValueToRValue>
|   |   |   | |   |     `-DeclRefExpr 0x7fffd83fd1a0 <col:25> 'stbtt__active_edge *' lvalue Var 0x7fffd83fc2e0 'z' 'stbtt__active_edge *'
|   |   |   | |   `-<<<NULL>>>
|   |   |   | `-<<<NULL>>>
|   |   |   `-UnaryOperator 0x7fffd83fd2f0 <line:3299:10, col:12> 'stbtt__edge *' prefix '++'
|   |   |     `-DeclRefExpr 0x7fffd83fd2c8 <col:12> 'stbtt__edge *' lvalue ParmVar 0x7fffd83f8b00 'e' 'stbtt__edge *'
|   |   |-IfStmt 0x7fffd83fd650 <line:3303:7, line:3304:91>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-ImplicitCastExpr 0x7fffd83fd378 <line:3303:11> 'stbtt__active_edge *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x7fffd83fd350 <col:11> 'stbtt__active_edge *' lvalue Var 0x7fffd83f91a0 'active' 'stbtt__active_edge *'
|   |   | |-CallExpr 0x7fffd83fd5a0 <line:3304:10, col:91> 'void'
|   |   | | |-ImplicitCastExpr 0x7fffd83fd588 <col:10> 'void (*)(float *, float *, int, stbtt__active_edge *, float)' <FunctionToPointerDecay>
|   |   | | | `-DeclRefExpr 0x7fffd83fd390 <col:10> 'void (float *, float *, int, stbtt__active_edge *, float)' Function 0x7fffd83eb460 'stbtt__fill_active_edges_new' 'void (float *, float *, int, stbtt__active_edge *, float)'
|   |   | | |-ImplicitCastExpr 0x7fffd83fd5f0 <col:39> 'float *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x7fffd83fd3b8 <col:39> 'float *' lvalue Var 0x7fffd83f9568 'scanline' 'float *'
|   |   | | |-BinaryOperator 0x7fffd83fd440 <col:49, col:59> 'float *' '+'
|   |   | | | |-ImplicitCastExpr 0x7fffd83fd428 <col:49> 'float *' <LValueToRValue>
|   |   | | | | `-DeclRefExpr 0x7fffd83fd3e0 <col:49> 'float *' lvalue Var 0x7fffd83f95e0 'scanline2' 'float *'
|   |   | | | `-IntegerLiteral 0x7fffd83fd408 <col:59> 'int' 1
|   |   | | |-ImplicitCastExpr 0x7fffd83fd608 <col:62, col:70> 'int' <LValueToRValue>
|   |   | | | `-MemberExpr 0x7fffd83fd4a8 <col:62, col:70> 'int' lvalue ->w 0x7fffd83598d8
|   |   | | |   `-ImplicitCastExpr 0x7fffd83fd490 <col:62> 'stbtt__bitmap *' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x7fffd83fd468 <col:62> 'stbtt__bitmap *' lvalue ParmVar 0x7fffd83f8a90 'result' 'stbtt__bitmap *'
|   |   | | |-ImplicitCastExpr 0x7fffd83fd620 <col:73> 'stbtt__active_edge *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x7fffd83fd4e0 <col:73> 'stbtt__active_edge *' lvalue Var 0x7fffd83f91a0 'active' 'stbtt__active_edge *'
|   |   | | `-ImplicitCastExpr 0x7fffd83fd638 <col:81> 'float' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x7fffd83fd508 <col:81> 'float' lvalue Var 0x7fffd83fa880 'scan_y_top' 'float'
|   |   | `-<<<NULL>>>
|   |   |-CompoundStmt 0x7fffd83fe420 <line:3306:7, line:3318:7>
|   |   | |-DeclStmt 0x7fffd83fd738 <line:3307:10, col:23>
|   |   | | `-VarDecl 0x7fffd83fd6a0 <col:10, col:22> col:16 used sum 'float' cinit
|   |   | |   `-ImplicitCastExpr 0x7fffd83fd720 <col:22> 'float' <IntegralToFloating>
|   |   | |     `-IntegerLiteral 0x7fffd83fd700 <col:22> 'int' 0
|   |   | `-ForStmt 0x7fffd83fe3e8 <line:3308:10, line:3317:10>
|   |   |   |-BinaryOperator 0x7fffd83fd798 <line:3308:15, col:17> 'int' '='
|   |   |   | |-DeclRefExpr 0x7fffd83fd750 <col:15> 'int' lvalue Var 0x7fffd83f93d8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x7fffd83fd778 <col:17> 'int' 0
|   |   |   |-<<<NULL>>>
|   |   |   |-BinaryOperator 0x7fffd83fd890 <col:20, col:32> 'int' '<'
|   |   |   | |-ImplicitCastExpr 0x7fffd83fd860 <col:20> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x7fffd83fd7c0 <col:20> 'int' lvalue Var 0x7fffd83f93d8 'i' 'int'
|   |   |   | `-ImplicitCastExpr 0x7fffd83fd878 <col:24, col:32> 'int' <LValueToRValue>
|   |   |   |   `-MemberExpr 0x7fffd83fd828 <col:24, col:32> 'int' lvalue ->w 0x7fffd83598d8
|   |   |   |     `-ImplicitCastExpr 0x7fffd83fd810 <col:24> 'stbtt__bitmap *' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x7fffd83fd7e8 <col:24> 'stbtt__bitmap *' lvalue ParmVar 0x7fffd83f8a90 'result' 'stbtt__bitmap *'
|   |   |   |-UnaryOperator 0x7fffd83fd8e0 <col:35, col:37> 'int' prefix '++'
|   |   |   | `-DeclRefExpr 0x7fffd83fd8b8 <col:37> 'int' lvalue Var 0x7fffd83f93d8 'i' 'int'
|   |   |   `-CompoundStmt 0x7fffd83fe398 <col:40, line:3317:10>
|   |   |     |-DeclStmt 0x7fffd83fd978 <line:3309:13, col:20>
|   |   |     | `-VarDecl 0x7fffd83fd918 <col:13, col:19> col:19 used k 'float'
|   |   |     |-DeclStmt 0x7fffd83fda08 <line:3310:13, col:18>
|   |   |     | `-VarDecl 0x7fffd83fd9a8 <col:13, col:17> col:17 used m 'int'
|   |   |     |-CompoundAssignOperator 0x7fffd83fdb08 <line:3311:13, col:31> 'float' '+=' ComputeLHSTy='float' ComputeResultTy='float'
|   |   |     | |-DeclRefExpr 0x7fffd83fda20 <col:13> 'float' lvalue Var 0x7fffd83fd6a0 'sum' 'float'
|   |   |     | `-ImplicitCastExpr 0x7fffd83fdaf0 <col:20, col:31> 'float' <LValueToRValue>
|   |   |     |   `-ArraySubscriptExpr 0x7fffd83fdac8 <col:20, col:31> 'float' lvalue
|   |   |     |     |-ImplicitCastExpr 0x7fffd83fda98 <col:20> 'float *' <LValueToRValue>
|   |   |     |     | `-DeclRefExpr 0x7fffd83fda48 <col:20> 'float *' lvalue Var 0x7fffd83f95e0 'scanline2' 'float *'
|   |   |     |     `-ImplicitCastExpr 0x7fffd83fdab0 <col:30> 'int' <LValueToRValue>
|   |   |     |       `-DeclRefExpr 0x7fffd83fda70 <col:30> 'int' lvalue Var 0x7fffd83f93d8 'i' 'int'
|   |   |     |-BinaryOperator 0x7fffd83fdc90 <line:3312:13, col:31> 'float' '='
|   |   |     | |-DeclRefExpr 0x7fffd83fdb40 <col:13> 'float' lvalue Var 0x7fffd83fd918 'k' 'float'
|   |   |     | `-BinaryOperator 0x7fffd83fdc68 <col:17, col:31> 'float' '+'
|   |   |     |   |-ImplicitCastExpr 0x7fffd83fdc38 <col:17, col:27> 'float' <LValueToRValue>
|   |   |     |   | `-ArraySubscriptExpr 0x7fffd83fdbe8 <col:17, col:27> 'float' lvalue
|   |   |     |   |   |-ImplicitCastExpr 0x7fffd83fdbb8 <col:17> 'float *' <LValueToRValue>
|   |   |     |   |   | `-DeclRefExpr 0x7fffd83fdb68 <col:17> 'float *' lvalue Var 0x7fffd83f9568 'scanline' 'float *'
|   |   |     |   |   `-ImplicitCastExpr 0x7fffd83fdbd0 <col:26> 'int' <LValueToRValue>
|   |   |     |   |     `-DeclRefExpr 0x7fffd83fdb90 <col:26> 'int' lvalue Var 0x7fffd83f93d8 'i' 'int'
|   |   |     |   `-ImplicitCastExpr 0x7fffd83fdc50 <col:31> 'float' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x7fffd83fdc10 <col:31> 'float' lvalue Var 0x7fffd83fd6a0 'sum' 'float'
|   |   |     |-BinaryOperator 0x7fffd83fde90 <line:3313:13, col:45> 'float' '='
|   |   |     | |-DeclRefExpr 0x7fffd83fdcb8 <col:13> 'float' lvalue Var 0x7fffd83fd918 'k' 'float'
|   |   |     | `-BinaryOperator 0x7fffd83fde68 <col:17, col:45> 'float' '+'
|   |   |     |   |-BinaryOperator 0x7fffd83fde20 <col:17, col:39> 'float' '*'
|   |   |     |   | |-CStyleCastExpr 0x7fffd83fddc0 <col:17, line:461:37> 'float' <FloatingCast>
|   |   |     |   | | `-CallExpr 0x7fffd83fdd48 <col:31, col:37> 'double'
|   |   |     |   | |   |-ImplicitCastExpr 0x7fffd83fdd30 <col:31> 'double (*)(double)' <FunctionToPointerDecay>
|   |   |     |   | |   | `-DeclRefExpr 0x7fffd83fdce0 <col:31> 'double (double)' Function 0x7fffd82913a0 'fabs' 'double (double)'
|   |   |     |   | |   `-ImplicitCastExpr 0x7fffd83fdd90 <line:3313:36> 'double' <FloatingCast>
|   |   |     |   | |     `-ImplicitCastExpr 0x7fffd83fdd78 <col:36> 'float' <LValueToRValue>
|   |   |     |   | |       `-DeclRefExpr 0x7fffd83fdd08 <col:36> 'float' lvalue Var 0x7fffd83fd918 'k' 'float'
|   |   |     |   | `-ImplicitCastExpr 0x7fffd83fde08 <col:39> 'float' <IntegralToFloating>
|   |   |     |   |   `-IntegerLiteral 0x7fffd83fdde8 <col:39> 'int' 255
|   |   |     |   `-FloatingLiteral 0x7fffd83fde48 <col:45> 'float' 5.000000e-01
|   |   |     |-BinaryOperator 0x7fffd83fdf60 <line:3314:13, col:23> 'int' '='
|   |   |     | |-DeclRefExpr 0x7fffd83fdeb8 <col:13> 'int' lvalue Var 0x7fffd83fd9a8 'm' 'int'
|   |   |     | `-CStyleCastExpr 0x7fffd83fdf38 <col:17, col:23> 'int' <FloatingToIntegral>
|   |   |     |   `-ImplicitCastExpr 0x7fffd83fdf20 <col:23> 'float' <LValueToRValue>
|   |   |     |     `-DeclRefExpr 0x7fffd83fdee0 <col:23> 'float' lvalue Var 0x7fffd83fd918 'k' 'float'
|   |   |     |-IfStmt 0x7fffd83fe080 <line:3315:13, col:30>
|   |   |     | |-<<<NULL>>>
|   |   |     | |-<<<NULL>>>
|   |   |     | |-BinaryOperator 0x7fffd83fdfe8 <col:17, col:21> 'int' '>'
|   |   |     | | |-ImplicitCastExpr 0x7fffd83fdfd0 <col:17> 'int' <LValueToRValue>
|   |   |     | | | `-DeclRefExpr 0x7fffd83fdf88 <col:17> 'int' lvalue Var 0x7fffd83fd9a8 'm' 'int'
|   |   |     | | `-IntegerLiteral 0x7fffd83fdfb0 <col:21> 'int' 255
|   |   |     | |-BinaryOperator 0x7fffd83fe058 <col:26, col:30> 'int' '='
|   |   |     | | |-DeclRefExpr 0x7fffd83fe010 <col:26> 'int' lvalue Var 0x7fffd83fd9a8 'm' 'int'
|   |   |     | | `-IntegerLiteral 0x7fffd83fe038 <col:30> 'int' 255
|   |   |     | `-<<<NULL>>>
|   |   |     `-BinaryOperator 0x7fffd83fe370 <line:3316:13, col:68> 'unsigned char' '='
|   |   |       |-ArraySubscriptExpr 0x7fffd83fe2a8 <col:13, col:48> 'unsigned char' lvalue
|   |   |       | |-ImplicitCastExpr 0x7fffd83fe290 <col:13, col:21> 'unsigned char *' <LValueToRValue>
|   |   |       | | `-MemberExpr 0x7fffd83fe0f8 <col:13, col:21> 'unsigned char *' lvalue ->pixels 0x7fffd83599f8
|   |   |       | |   `-ImplicitCastExpr 0x7fffd83fe0e0 <col:13> 'stbtt__bitmap *' <LValueToRValue>
|   |   |       | |     `-DeclRefExpr 0x7fffd83fe0b8 <col:13> 'stbtt__bitmap *' lvalue ParmVar 0x7fffd83f8a90 'result' 'stbtt__bitmap *'
|   |   |       | `-BinaryOperator 0x7fffd83fe268 <col:28, col:47> 'int' '+'
|   |   |       |   |-BinaryOperator 0x7fffd83fe200 <col:28, col:38> 'int' '*'
|   |   |       |   | |-ImplicitCastExpr 0x7fffd83fe1d0 <col:28> 'int' <LValueToRValue>
|   |   |       |   | | `-DeclRefExpr 0x7fffd83fe130 <col:28> 'int' lvalue Var 0x7fffd83f9340 'j' 'int'
|   |   |       |   | `-ImplicitCastExpr 0x7fffd83fe1e8 <col:30, col:38> 'int' <LValueToRValue>
|   |   |       |   |   `-MemberExpr 0x7fffd83fe198 <col:30, col:38> 'int' lvalue ->stride 0x7fffd8359998
|   |   |       |   |     `-ImplicitCastExpr 0x7fffd83fe180 <col:30> 'stbtt__bitmap *' <LValueToRValue>
|   |   |       |   |       `-DeclRefExpr 0x7fffd83fe158 <col:30> 'stbtt__bitmap *' lvalue ParmVar 0x7fffd83f8a90 'result' 'stbtt__bitmap *'
|   |   |       |   `-ImplicitCastExpr 0x7fffd83fe250 <col:47> 'int' <LValueToRValue>
|   |   |       |     `-DeclRefExpr 0x7fffd83fe228 <col:47> 'int' lvalue Var 0x7fffd83f93d8 'i' 'int'
|   |   |       `-CStyleCastExpr 0x7fffd83fe348 <col:52, col:68> 'unsigned char' <IntegralCast>
|   |   |         `-ImplicitCastExpr 0x7fffd83fe330 <col:68> 'int' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x7fffd83fe2f0 <col:68> 'int' lvalue Var 0x7fffd83fd9a8 'm' 'int'
|   |   |-BinaryOperator 0x7fffd83fe4b0 <line:3320:7, col:15> 'stbtt__active_edge **' '='
|   |   | |-DeclRefExpr 0x7fffd83fe440 <col:7> 'stbtt__active_edge **' lvalue Var 0x7fffd83fab40 'step' 'stbtt__active_edge **'
|   |   | `-UnaryOperator 0x7fffd83fe490 <col:14, col:15> 'stbtt__active_edge **' prefix '&'
|   |   |   `-DeclRefExpr 0x7fffd83fe468 <col:15> 'stbtt__active_edge *' lvalue Var 0x7fffd83f91a0 'active' 'stbtt__active_edge *'
|   |   |-WhileStmt 0x7fffd83fe918 <line:3321:7, line:3325:7>
|   |   | |-<<<NULL>>>
|   |   | |-ImplicitCastExpr 0x7fffd83fe538 <line:3321:14, col:15> 'stbtt__active_edge *' <LValueToRValue>
|   |   | | `-UnaryOperator 0x7fffd83fe518 <col:14, col:15> 'stbtt__active_edge *' lvalue prefix '*'
|   |   | |   `-ImplicitCastExpr 0x7fffd83fe500 <col:15> 'stbtt__active_edge **' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x7fffd83fe4d8 <col:15> 'stbtt__active_edge **' lvalue Var 0x7fffd83fab40 'step' 'stbtt__active_edge **'
|   |   | `-CompoundStmt 0x7fffd83fe8f0 <col:21, line:3325:7>
|   |   |   |-DeclStmt 0x7fffd83fe638 <line:3322:10, col:39>
|   |   |   | `-VarDecl 0x7fffd83fe560 <col:10, col:35> col:30 used z 'stbtt__active_edge *' cinit
|   |   |   |   `-ImplicitCastExpr 0x7fffd83fe620 <col:34, col:35> 'stbtt__active_edge *' <LValueToRValue>
|   |   |   |     `-UnaryOperator 0x7fffd83fe600 <col:34, col:35> 'stbtt__active_edge *' lvalue prefix '*'
|   |   |   |       `-ImplicitCastExpr 0x7fffd83fe5e8 <col:35> 'stbtt__active_edge **' <LValueToRValue>
|   |   |   |         `-DeclRefExpr 0x7fffd83fe5c0 <col:35> 'stbtt__active_edge **' lvalue Var 0x7fffd83fab40 'step' 'stbtt__active_edge **'
|   |   |   |-CompoundAssignOperator 0x7fffd83fe758 <line:3323:10, col:22> 'float' '+=' ComputeLHSTy='float' ComputeResultTy='float'
|   |   |   | |-MemberExpr 0x7fffd83fe690 <col:10, col:13> 'float' lvalue ->fx 0x7fffd83e1990
|   |   |   | | `-ImplicitCastExpr 0x7fffd83fe678 <col:10> 'stbtt__active_edge *' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x7fffd83fe650 <col:10> 'stbtt__active_edge *' lvalue Var 0x7fffd83fe560 'z' 'stbtt__active_edge *'
|   |   |   | `-ImplicitCastExpr 0x7fffd83fe740 <col:19, col:22> 'float' <LValueToRValue>
|   |   |   |   `-MemberExpr 0x7fffd83fe708 <col:19, col:22> 'float' lvalue ->fdx 0x7fffd83e19f0
|   |   |   |     `-ImplicitCastExpr 0x7fffd83fe6f0 <col:19> 'stbtt__active_edge *' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x7fffd83fe6c8 <col:19> 'stbtt__active_edge *' lvalue Var 0x7fffd83fe560 'z' 'stbtt__active_edge *'
|   |   |   `-BinaryOperator 0x7fffd83fe8c8 <line:3324:10, col:32> 'stbtt__active_edge **' '='
|   |   |     |-DeclRefExpr 0x7fffd83fe790 <col:10> 'stbtt__active_edge **' lvalue Var 0x7fffd83fab40 'step' 'stbtt__active_edge **'
|   |   |     `-UnaryOperator 0x7fffd83fe8a8 <col:17, col:32> 'struct stbtt__active_edge **' prefix '&'
|   |   |       `-ParenExpr 0x7fffd83fe888 <col:18, col:32> 'struct stbtt__active_edge *' lvalue
|   |   |         `-MemberExpr 0x7fffd83fe850 <col:19, col:28> 'struct stbtt__active_edge *' lvalue ->next 0x7fffd83e1930
|   |   |           `-ImplicitCastExpr 0x7fffd83fe838 <col:19, col:25> 'stbtt__active_edge *' <LValueToRValue>
|   |   |             `-ParenExpr 0x7fffd83fe818 <col:19, col:25> 'stbtt__active_edge *' lvalue
|   |   |               `-UnaryOperator 0x7fffd83fe7f8 <col:20, col:21> 'stbtt__active_edge *' lvalue prefix '*'
|   |   |                 `-ImplicitCastExpr 0x7fffd83fe7e0 <col:21> 'stbtt__active_edge **' <LValueToRValue>
|   |   |                   `-DeclRefExpr 0x7fffd83fe7b8 <col:21> 'stbtt__active_edge **' lvalue Var 0x7fffd83fab40 'step' 'stbtt__active_edge **'
|   |   |-UnaryOperator 0x7fffd83fe960 <line:3327:7, col:9> 'int' prefix '++'
|   |   | `-DeclRefExpr 0x7fffd83fe938 <col:9> 'int' lvalue Var 0x7fffd83f92c8 'y' 'int'
|   |   `-UnaryOperator 0x7fffd83fe9a8 <line:3328:7, col:9> 'int' prefix '++'
|   |     `-DeclRefExpr 0x7fffd83fe980 <col:9> 'int' lvalue Var 0x7fffd83f9340 'j' 'int'
|   |-CallExpr 0x7fffd83feb10 <line:3331:4, col:38> 'void'
|   | |-ImplicitCastExpr 0x7fffd83feaf8 <col:4> 'void (*)(stbtt__hheap *, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fffd83fea60 <col:4> 'void (stbtt__hheap *, void *)' Function 0x7fffd83e0e90 'stbtt__hheap_cleanup' 'void (stbtt__hheap *, void *)'
|   | |-UnaryOperator 0x7fffd83feab0 <col:25, col:26> 'stbtt__hheap *' prefix '&'
|   | | `-DeclRefExpr 0x7fffd83fea88 <col:26> 'stbtt__hheap':'struct stbtt__hheap' lvalue Var 0x7fffd83f8fd8 'hh' 'stbtt__hheap':'struct stbtt__hheap'
|   | `-ImplicitCastExpr 0x7fffd83feb48 <col:30> 'void *' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd83fead0 <col:30> 'void *' lvalue ParmVar 0x7fffd83f8d58 'userdata' 'void *'
|   `-IfStmt 0x7fffd83fede0 <line:3333:4, line:468:49>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fffd83febe0 <line:3333:8, col:20> 'int' '!='
|     | |-ImplicitCastExpr 0x7fffd83febb0 <col:8> 'float *' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fffd83feb60 <col:8> 'float *' lvalue Var 0x7fffd83f9568 'scanline' 'float *'
|     | `-ImplicitCastExpr 0x7fffd83febc8 <col:20> 'float *' <ArrayToPointerDecay>
|     |   `-DeclRefExpr 0x7fffd83feb88 <col:20> 'float [129]' lvalue Var 0x7fffd83f94f0 'scanline_data' 'float [129]'
|     |-ParenExpr 0x7fffd83fedc0 <line:468:31, col:49> 'void'
|     | `-BinaryOperator 0x7fffd83fed98 <col:32, col:48> 'void' ','
|     |   |-CStyleCastExpr 0x7fffd83feca8 <col:32, col:40> 'void' <ToVoid>
|     |   | `-ImplicitCastExpr 0x7fffd83fec90 <col:38, col:40> 'void *' <LValueToRValue>
|     |   |   `-ParenExpr 0x7fffd83fec70 <col:38, col:40> 'void *' lvalue
|     |   |     `-DeclRefExpr 0x7fffd83fec08 <line:3334:28> 'void *' lvalue ParmVar 0x7fffd83f8d58 'userdata' 'void *'
|     |   `-CallExpr 0x7fffd83fed38 <line:468:42, col:48> 'void'
|     |     |-ImplicitCastExpr 0x7fffd83fed20 <col:42> 'void (*)(void *)' <FunctionToPointerDecay>
|     |     | `-DeclRefExpr 0x7fffd83fecd0 <col:42> 'void (void *)' Function 0x7fffd831bec0 'free' 'void (void *)'
|     |     `-ImplicitCastExpr 0x7fffd83fed80 <line:3334:18> 'void *' <BitCast>
|     |       `-ImplicitCastExpr 0x7fffd83fed68 <col:18> 'float *' <LValueToRValue>
|     |         `-DeclRefExpr 0x7fffd83fecf8 <col:18> 'float *' lvalue Var 0x7fffd83f9568 'scanline' 'float *'
|     `-<<<NULL>>>
|-FunctionDecl 0x7fffd83ff020 <line:3342:1, line:3358:1> line:3342:13 used stbtt__sort_edges_ins_sort 'void (stbtt__edge *, int)' static
| |-ParmVarDecl 0x7fffd83fee98 <col:40, col:53> col:53 used p 'stbtt__edge *'
| |-ParmVarDecl 0x7fffd83fef10 <col:56, col:60> col:60 used n 'int'
| `-CompoundStmt 0x7fffd83fffc0 <line:3343:1, line:3358:1>
|   |-DeclStmt 0x7fffd83ff1d8 <line:3344:4, col:11>
|   | |-VarDecl 0x7fffd83ff0e8 <col:4, col:8> col:8 used i 'int'
|   | `-VarDecl 0x7fffd83ff160 <col:4, col:10> col:10 used j 'int'
|   `-ForStmt 0x7fffd83fff88 <line:3345:4, line:3357:4>
|     |-BinaryOperator 0x7fffd83ff238 <line:3345:9, col:11> 'int' '='
|     | |-DeclRefExpr 0x7fffd83ff1f0 <col:9> 'int' lvalue Var 0x7fffd83ff0e8 'i' 'int'
|     | `-IntegerLiteral 0x7fffd83ff218 <col:11> 'int' 1
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fffd83ff2e0 <col:14, col:18> 'int' '<'
|     | |-ImplicitCastExpr 0x7fffd83ff2b0 <col:14> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fffd83ff260 <col:14> 'int' lvalue Var 0x7fffd83ff0e8 'i' 'int'
|     | `-ImplicitCastExpr 0x7fffd83ff2c8 <col:18> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fffd83ff288 <col:18> 'int' lvalue ParmVar 0x7fffd83fef10 'n' 'int'
|     |-UnaryOperator 0x7fffd83ff330 <col:21, col:23> 'int' prefix '++'
|     | `-DeclRefExpr 0x7fffd83ff308 <col:23> 'int' lvalue Var 0x7fffd83ff0e8 'i' 'int'
|     `-CompoundStmt 0x7fffd83fff58 <col:26, line:3357:4>
|       |-DeclStmt 0x7fffd83ff550 <line:3346:7, col:36>
|       | |-VarDecl 0x7fffd83ff360 <col:7, col:26> col:19 used t 'stbtt__edge':'struct stbtt__edge' cinit
|       | | `-ImplicitCastExpr 0x7fffd83ff468 <col:23, col:26> 'stbtt__edge':'struct stbtt__edge' <LValueToRValue>
|       | |   `-ArraySubscriptExpr 0x7fffd83ff440 <col:23, col:26> 'stbtt__edge':'struct stbtt__edge' lvalue
|       | |     |-ImplicitCastExpr 0x7fffd83ff410 <col:23> 'stbtt__edge *' <LValueToRValue>
|       | |     | `-DeclRefExpr 0x7fffd83ff3c0 <col:23> 'stbtt__edge *' lvalue ParmVar 0x7fffd83fee98 'p' 'stbtt__edge *'
|       | |     `-ImplicitCastExpr 0x7fffd83ff428 <col:25> 'int' <LValueToRValue>
|       | |       `-DeclRefExpr 0x7fffd83ff3e8 <col:25> 'int' lvalue Var 0x7fffd83ff0e8 'i' 'int'
|       | `-VarDecl 0x7fffd83ff490 <col:7, col:35> col:30 used a 'stbtt__edge *' cinit
|       |   `-UnaryOperator 0x7fffd83ff518 <col:34, col:35> 'stbtt__edge *' prefix '&'
|       |     `-DeclRefExpr 0x7fffd83ff4f0 <col:35> 'stbtt__edge':'struct stbtt__edge' lvalue Var 0x7fffd83ff360 't' 'stbtt__edge':'struct stbtt__edge'
|       |-BinaryOperator 0x7fffd83ff5d0 <line:3347:7, col:11> 'int' '='
|       | |-DeclRefExpr 0x7fffd83ff568 <col:7> 'int' lvalue Var 0x7fffd83ff160 'j' 'int'
|       | `-ImplicitCastExpr 0x7fffd83ff5b8 <col:11> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fffd83ff590 <col:11> 'int' lvalue Var 0x7fffd83ff0e8 'i' 'int'
|       |-WhileStmt 0x7fffd83ffd48 <line:3348:7, line:3354:7>
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7fffd83ff658 <line:3348:14, col:18> 'int' '>'
|       | | |-ImplicitCastExpr 0x7fffd83ff640 <col:14> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fffd83ff5f8 <col:14> 'int' lvalue Var 0x7fffd83ff160 'j' 'int'
|       | | `-IntegerLiteral 0x7fffd83ff620 <col:18> 'int' 0
|       | `-CompoundStmt 0x7fffd83ffd10 <col:21, line:3354:7>
|       |   |-DeclStmt 0x7fffd83ff800 <line:3349:10, col:34>
|       |   | `-VarDecl 0x7fffd83ff690 <col:10, col:33> col:23 used b 'stbtt__edge *' cinit
|       |   |   `-UnaryOperator 0x7fffd83ff7e0 <col:27, col:33> 'stbtt__edge *' prefix '&'
|       |   |     `-ArraySubscriptExpr 0x7fffd83ff7b8 <col:28, col:33> 'stbtt__edge':'struct stbtt__edge' lvalue
|       |   |       |-ImplicitCastExpr 0x7fffd83ff7a0 <col:28> 'stbtt__edge *' <LValueToRValue>
|       |   |       | `-DeclRefExpr 0x7fffd83ff6f0 <col:28> 'stbtt__edge *' lvalue ParmVar 0x7fffd83fee98 'p' 'stbtt__edge *'
|       |   |       `-BinaryOperator 0x7fffd83ff778 <col:30, col:32> 'int' '-'
|       |   |         |-ImplicitCastExpr 0x7fffd83ff760 <col:30> 'int' <LValueToRValue>
|       |   |         | `-DeclRefExpr 0x7fffd83ff718 <col:30> 'int' lvalue Var 0x7fffd83ff160 'j' 'int'
|       |   |         `-IntegerLiteral 0x7fffd83ff740 <col:32> 'int' 1
|       |   |-DeclStmt 0x7fffd83ffa38 <line:3350:10, col:37>
|       |   | `-VarDecl 0x7fffd83ff830 <col:10, line:3340:48> line:3350:14 used c 'int' cinit
|       |   |   `-ParenExpr 0x7fffd83ffa18 <line:3340:30, col:48> 'int'
|       |   |     `-BinaryOperator 0x7fffd83ff9f0 <col:31, col:46> 'int' '<'
|       |   |       |-ImplicitCastExpr 0x7fffd83ff9c0 <col:31, col:36> 'float' <LValueToRValue>
|       |   |       | `-MemberExpr 0x7fffd83ff8f0 <col:31, col:36> 'float' lvalue ->y0 0x7fffd83e15a8
|       |   |       |   `-ImplicitCastExpr 0x7fffd83ff8d8 <col:31, col:33> 'stbtt__edge *' <LValueToRValue>
|       |   |       |     `-ParenExpr 0x7fffd83ff8b8 <col:31, col:33> 'stbtt__edge *' lvalue
|       |   |       |       `-DeclRefExpr 0x7fffd83ff890 <line:3350:33> 'stbtt__edge *' lvalue Var 0x7fffd83ff490 'a' 'stbtt__edge *'
|       |   |       `-ImplicitCastExpr 0x7fffd83ff9d8 <line:3340:41, col:46> 'float' <LValueToRValue>
|       |   |         `-MemberExpr 0x7fffd83ff988 <col:41, col:46> 'float' lvalue ->y0 0x7fffd83e15a8
|       |   |           `-ImplicitCastExpr 0x7fffd83ff970 <col:41, col:43> 'stbtt__edge *' <LValueToRValue>
|       |   |             `-ParenExpr 0x7fffd83ff950 <col:41, col:43> 'stbtt__edge *' lvalue
|       |   |               `-DeclRefExpr 0x7fffd83ff928 <line:3350:35> 'stbtt__edge *' lvalue Var 0x7fffd83ff690 'b' 'stbtt__edge *'
|       |   |-IfStmt 0x7fffd83ffab8 <line:3351:10, col:18>
|       |   | |-<<<NULL>>>
|       |   | |-<<<NULL>>>
|       |   | |-UnaryOperator 0x7fffd83ffa90 <col:14, col:15> 'int' prefix '!'
|       |   | | `-ImplicitCastExpr 0x7fffd83ffa78 <col:15> 'int' <LValueToRValue>
|       |   | |   `-DeclRefExpr 0x7fffd83ffa50 <col:15> 'int' lvalue Var 0x7fffd83ff830 'c' 'int'
|       |   | |-BreakStmt 0x7fffd83ffab0 <col:18>
|       |   | `-<<<NULL>>>
|       |   |-BinaryOperator 0x7fffd83ffca0 <line:3352:10, col:22> 'stbtt__edge':'struct stbtt__edge' '='
|       |   | |-ArraySubscriptExpr 0x7fffd83ffb70 <col:10, col:13> 'stbtt__edge':'struct stbtt__edge' lvalue
|       |   | | |-ImplicitCastExpr 0x7fffd83ffb40 <col:10> 'stbtt__edge *' <LValueToRValue>
|       |   | | | `-DeclRefExpr 0x7fffd83ffaf0 <col:10> 'stbtt__edge *' lvalue ParmVar 0x7fffd83fee98 'p' 'stbtt__edge *'
|       |   | | `-ImplicitCastExpr 0x7fffd83ffb58 <col:12> 'int' <LValueToRValue>
|       |   | |   `-DeclRefExpr 0x7fffd83ffb18 <col:12> 'int' lvalue Var 0x7fffd83ff160 'j' 'int'
|       |   | `-ImplicitCastExpr 0x7fffd83ffc88 <col:17, col:22> 'stbtt__edge':'struct stbtt__edge' <LValueToRValue>
|       |   |   `-ArraySubscriptExpr 0x7fffd83ffc60 <col:17, col:22> 'stbtt__edge':'struct stbtt__edge' lvalue
|       |   |     |-ImplicitCastExpr 0x7fffd83ffc48 <col:17> 'stbtt__edge *' <LValueToRValue>
|       |   |     | `-DeclRefExpr 0x7fffd83ffb98 <col:17> 'stbtt__edge *' lvalue ParmVar 0x7fffd83fee98 'p' 'stbtt__edge *'
|       |   |     `-BinaryOperator 0x7fffd83ffc20 <col:19, col:21> 'int' '-'
|       |   |       |-ImplicitCastExpr 0x7fffd83ffc08 <col:19> 'int' <LValueToRValue>
|       |   |       | `-DeclRefExpr 0x7fffd83ffbc0 <col:19> 'int' lvalue Var 0x7fffd83ff160 'j' 'int'
|       |   |       `-IntegerLiteral 0x7fffd83ffbe8 <col:21> 'int' 1
|       |   `-UnaryOperator 0x7fffd83ffcf0 <line:3353:10, col:12> 'int' prefix '--'
|       |     `-DeclRefExpr 0x7fffd83ffcc8 <col:12> 'int' lvalue Var 0x7fffd83ff160 'j' 'int'
|       `-IfStmt 0x7fffd83fff20 <line:3355:7, line:3356:17>
|         |-<<<NULL>>>
|         |-<<<NULL>>>
|         |-BinaryOperator 0x7fffd83ffde8 <line:3355:11, col:16> 'int' '!='
|         | |-ImplicitCastExpr 0x7fffd83ffdb8 <col:11> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x7fffd83ffd68 <col:11> 'int' lvalue Var 0x7fffd83ff0e8 'i' 'int'
|         | `-ImplicitCastExpr 0x7fffd83ffdd0 <col:16> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x7fffd83ffd90 <col:16> 'int' lvalue Var 0x7fffd83ff160 'j' 'int'
|         |-BinaryOperator 0x7fffd83ffef8 <line:3356:10, col:17> 'stbtt__edge':'struct stbtt__edge' '='
|         | |-ArraySubscriptExpr 0x7fffd83ffe90 <col:10, col:13> 'stbtt__edge':'struct stbtt__edge' lvalue
|         | | |-ImplicitCastExpr 0x7fffd83ffe60 <col:10> 'stbtt__edge *' <LValueToRValue>
|         | | | `-DeclRefExpr 0x7fffd83ffe10 <col:10> 'stbtt__edge *' lvalue ParmVar 0x7fffd83fee98 'p' 'stbtt__edge *'
|         | | `-ImplicitCastExpr 0x7fffd83ffe78 <col:12> 'int' <LValueToRValue>
|         | |   `-DeclRefExpr 0x7fffd83ffe38 <col:12> 'int' lvalue Var 0x7fffd83ff160 'j' 'int'
|         | `-ImplicitCastExpr 0x7fffd83ffee0 <col:17> 'stbtt__edge':'struct stbtt__edge' <LValueToRValue>
|         |   `-DeclRefExpr 0x7fffd83ffeb8 <col:17> 'stbtt__edge':'struct stbtt__edge' lvalue Var 0x7fffd83ff360 't' 'stbtt__edge':'struct stbtt__edge'
|         `-<<<NULL>>>
|-FunctionDecl 0x7fffd84000f8 <line:3360:1, line:3420:1> line:3360:13 used stbtt__sort_edges_quicksort 'void (stbtt__edge *, int)' static
| |-ParmVarDecl 0x7fffd83ffff0 <col:41, col:54> col:54 used p 'stbtt__edge *'
| |-ParmVarDecl 0x7fffd8400068 <col:57, col:61> col:61 used n 'int'
| `-CompoundStmt 0x7fffd84032c8 <line:3361:1, line:3420:1>
|   `-WhileStmt 0x7fffd84032a8 <line:3363:4, line:3419:4>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fffd8400208 <line:3363:11, col:15> 'int' '>'
|     | |-ImplicitCastExpr 0x7fffd84001f0 <col:11> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fffd84001a8 <col:11> 'int' lvalue ParmVar 0x7fffd8400068 'n' 'int'
|     | `-IntegerLiteral 0x7fffd84001d0 <col:15> 'int' 12
|     `-CompoundStmt 0x7fffd8403230 <col:19, line:3419:4>
|       |-DeclStmt 0x7fffd84002a0 <line:3364:7, col:20>
|       | `-VarDecl 0x7fffd8400240 <col:7, col:19> col:19 used t 'stbtt__edge':'struct stbtt__edge'
|       |-DeclStmt 0x7fffd8400790 <line:3365:7, col:26>
|       | |-VarDecl 0x7fffd84004a0 <col:7, col:11> col:11 used c01 'int'
|       | |-VarDecl 0x7fffd8400518 <col:7, col:15> col:15 used c12 'int'
|       | |-VarDecl 0x7fffd8400590 <col:7, col:19> col:19 used c 'int'
|       | |-VarDecl 0x7fffd8400608 <col:7, col:21> col:21 used m 'int'
|       | |-VarDecl 0x7fffd8400680 <col:7, col:23> col:23 used i 'int'
|       | `-VarDecl 0x7fffd84006f8 <col:7, col:25> col:25 used j 'int'
|       |-BinaryOperator 0x7fffd8400858 <line:3368:7, col:16> 'int' '='
|       | |-DeclRefExpr 0x7fffd84007a8 <col:7> 'int' lvalue Var 0x7fffd8400608 'm' 'int'
|       | `-BinaryOperator 0x7fffd8400830 <col:11, col:16> 'int' '>>'
|       |   |-ImplicitCastExpr 0x7fffd8400818 <col:11> 'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x7fffd84007d0 <col:11> 'int' lvalue ParmVar 0x7fffd8400068 'n' 'int'
|       |   `-IntegerLiteral 0x7fffd84007f8 <col:16> 'int' 1
|       |-BinaryOperator 0x7fffd8400b40 <line:3369:7, line:3340:48> 'int' '='
|       | |-DeclRefExpr 0x7fffd8400880 <line:3369:7> 'int' lvalue Var 0x7fffd84004a0 'c01' 'int'
|       | `-ParenExpr 0x7fffd8400b20 <line:3340:30, col:48> 'int'
|       |   `-BinaryOperator 0x7fffd8400af8 <col:31, col:46> 'int' '<'
|       |     |-ImplicitCastExpr 0x7fffd8400ac8 <col:31, col:36> 'float' <LValueToRValue>
|       |     | `-MemberExpr 0x7fffd8400970 <col:31, col:36> 'float' lvalue ->y0 0x7fffd83e15a8
|       |     |   `-ParenExpr 0x7fffd8400950 <col:31, col:33> 'stbtt__edge *'
|       |     |     `-UnaryOperator 0x7fffd8400930 <line:3369:28, col:32> 'stbtt__edge *' prefix '&'
|       |     |       `-ArraySubscriptExpr 0x7fffd8400908 <col:29, col:32> 'stbtt__edge':'struct stbtt__edge' lvalue
|       |     |         |-ImplicitCastExpr 0x7fffd84008f0 <col:29> 'stbtt__edge *' <LValueToRValue>
|       |     |         | `-DeclRefExpr 0x7fffd84008a8 <col:29> 'stbtt__edge *' lvalue ParmVar 0x7fffd83ffff0 'p' 'stbtt__edge *'
|       |     |         `-IntegerLiteral 0x7fffd84008d0 <col:31> 'int' 0
|       |     `-ImplicitCastExpr 0x7fffd8400ae0 <line:3340:41, col:46> 'float' <LValueToRValue>
|       |       `-MemberExpr 0x7fffd8400a90 <col:41, col:46> 'float' lvalue ->y0 0x7fffd83e15a8
|       |         `-ParenExpr 0x7fffd8400a70 <col:41, col:43> 'stbtt__edge *'
|       |           `-UnaryOperator 0x7fffd8400a50 <line:3369:34, col:38> 'stbtt__edge *' prefix '&'
|       |             `-ArraySubscriptExpr 0x7fffd8400a28 <col:35, col:38> 'stbtt__edge':'struct stbtt__edge' lvalue
|       |               |-ImplicitCastExpr 0x7fffd84009f8 <col:35> 'stbtt__edge *' <LValueToRValue>
|       |               | `-DeclRefExpr 0x7fffd84009a8 <col:35> 'stbtt__edge *' lvalue ParmVar 0x7fffd83ffff0 'p' 'stbtt__edge *'
|       |               `-ImplicitCastExpr 0x7fffd8400a10 <col:37> 'int' <LValueToRValue>
|       |                 `-DeclRefExpr 0x7fffd84009d0 <col:37> 'int' lvalue Var 0x7fffd8400608 'm' 'int'
|       |-BinaryOperator 0x7fffd8400e90 <line:3370:7, line:3340:48> 'int' '='
|       | |-DeclRefExpr 0x7fffd8400b68 <line:3370:7> 'int' lvalue Var 0x7fffd8400518 'c12' 'int'
|       | `-ParenExpr 0x7fffd8400e70 <line:3340:30, col:48> 'int'
|       |   `-BinaryOperator 0x7fffd8400e48 <col:31, col:46> 'int' '<'
|       |     |-ImplicitCastExpr 0x7fffd8400e18 <col:31, col:36> 'float' <LValueToRValue>
|       |     | `-MemberExpr 0x7fffd8400c78 <col:31, col:36> 'float' lvalue ->y0 0x7fffd83e15a8
|       |     |   `-ParenExpr 0x7fffd8400c58 <col:31, col:33> 'stbtt__edge *'
|       |     |     `-UnaryOperator 0x7fffd8400c38 <line:3370:28, col:32> 'stbtt__edge *' prefix '&'
|       |     |       `-ArraySubscriptExpr 0x7fffd8400c10 <col:29, col:32> 'stbtt__edge':'struct stbtt__edge' lvalue
|       |     |         |-ImplicitCastExpr 0x7fffd8400be0 <col:29> 'stbtt__edge *' <LValueToRValue>
|       |     |         | `-DeclRefExpr 0x7fffd8400b90 <col:29> 'stbtt__edge *' lvalue ParmVar 0x7fffd83ffff0 'p' 'stbtt__edge *'
|       |     |         `-ImplicitCastExpr 0x7fffd8400bf8 <col:31> 'int' <LValueToRValue>
|       |     |           `-DeclRefExpr 0x7fffd8400bb8 <col:31> 'int' lvalue Var 0x7fffd8400608 'm' 'int'
|       |     `-ImplicitCastExpr 0x7fffd8400e30 <line:3340:41, col:46> 'float' <LValueToRValue>
|       |       `-MemberExpr 0x7fffd8400de0 <col:41, col:46> 'float' lvalue ->y0 0x7fffd83e15a8
|       |         `-ParenExpr 0x7fffd8400dc0 <col:41, col:43> 'stbtt__edge *'
|       |           `-UnaryOperator 0x7fffd8400da0 <line:3370:34, col:40> 'stbtt__edge *' prefix '&'
|       |             `-ArraySubscriptExpr 0x7fffd8400d78 <col:35, col:40> 'stbtt__edge':'struct stbtt__edge' lvalue
|       |               |-ImplicitCastExpr 0x7fffd8400d60 <col:35> 'stbtt__edge *' <LValueToRValue>
|       |               | `-DeclRefExpr 0x7fffd8400cb0 <col:35> 'stbtt__edge *' lvalue ParmVar 0x7fffd83ffff0 'p' 'stbtt__edge *'
|       |               `-BinaryOperator 0x7fffd8400d38 <col:37, col:39> 'int' '-'
|       |                 |-ImplicitCastExpr 0x7fffd8400d20 <col:37> 'int' <LValueToRValue>
|       |                 | `-DeclRefExpr 0x7fffd8400cd8 <col:37> 'int' lvalue ParmVar 0x7fffd8400068 'n' 'int'
|       |                 `-IntegerLiteral 0x7fffd8400d00 <col:39> 'int' 1
|       |-IfStmt 0x7fffd8401900 <line:3372:7, line:3382:7>
|       | |-<<<NULL>>>
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7fffd8400f38 <line:3372:11, col:18> 'int' '!='
|       | | |-ImplicitCastExpr 0x7fffd8400f08 <col:11> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fffd8400eb8 <col:11> 'int' lvalue Var 0x7fffd84004a0 'c01' 'int'
|       | | `-ImplicitCastExpr 0x7fffd8400f20 <col:18> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fffd8400ee0 <col:18> 'int' lvalue Var 0x7fffd8400518 'c12' 'int'
|       | |-CompoundStmt 0x7fffd84018c0 <col:23, line:3382:7>
|       | | |-DeclStmt 0x7fffd8400fd8 <line:3374:10, col:15>
|       | | | `-VarDecl 0x7fffd8400f78 <col:10, col:14> col:14 used z 'int'
|       | | |-BinaryOperator 0x7fffd84012f8 <line:3375:10, line:3340:48> 'int' '='
|       | | | |-DeclRefExpr 0x7fffd8400ff0 <line:3375:10> 'int' lvalue Var 0x7fffd8400590 'c' 'int'
|       | | | `-ParenExpr 0x7fffd84012d8 <line:3340:30, col:48> 'int'
|       | | |   `-BinaryOperator 0x7fffd84012b0 <col:31, col:46> 'int' '<'
|       | | |     |-ImplicitCastExpr 0x7fffd8401280 <col:31, col:36> 'float' <LValueToRValue>
|       | | |     | `-MemberExpr 0x7fffd84010e0 <col:31, col:36> 'float' lvalue ->y0 0x7fffd83e15a8
|       | | |     |   `-ParenExpr 0x7fffd84010c0 <col:31, col:33> 'stbtt__edge *'
|       | | |     |     `-UnaryOperator 0x7fffd84010a0 <line:3375:29, col:33> 'stbtt__edge *' prefix '&'
|       | | |     |       `-ArraySubscriptExpr 0x7fffd8401078 <col:30, col:33> 'stbtt__edge':'struct stbtt__edge' lvalue
|       | | |     |         |-ImplicitCastExpr 0x7fffd8401060 <col:30> 'stbtt__edge *' <LValueToRValue>
|       | | |     |         | `-DeclRefExpr 0x7fffd8401018 <col:30> 'stbtt__edge *' lvalue ParmVar 0x7fffd83ffff0 'p' 'stbtt__edge *'
|       | | |     |         `-IntegerLiteral 0x7fffd8401040 <col:32> 'int' 0
|       | | |     `-ImplicitCastExpr 0x7fffd8401298 <line:3340:41, col:46> 'float' <LValueToRValue>
|       | | |       `-MemberExpr 0x7fffd8401248 <col:41, col:46> 'float' lvalue ->y0 0x7fffd83e15a8
|       | | |         `-ParenExpr 0x7fffd8401228 <col:41, col:43> 'stbtt__edge *'
|       | | |           `-UnaryOperator 0x7fffd8401208 <line:3375:35, col:41> 'stbtt__edge *' prefix '&'
|       | | |             `-ArraySubscriptExpr 0x7fffd84011e0 <col:36, col:41> 'stbtt__edge':'struct stbtt__edge' lvalue
|       | | |               |-ImplicitCastExpr 0x7fffd84011c8 <col:36> 'stbtt__edge *' <LValueToRValue>
|       | | |               | `-DeclRefExpr 0x7fffd8401118 <col:36> 'stbtt__edge *' lvalue ParmVar 0x7fffd83ffff0 'p' 'stbtt__edge *'
|       | | |               `-BinaryOperator 0x7fffd84011a0 <col:38, col:40> 'int' '-'
|       | | |                 |-ImplicitCastExpr 0x7fffd8401188 <col:38> 'int' <LValueToRValue>
|       | | |                 | `-DeclRefExpr 0x7fffd8401140 <col:38> 'int' lvalue ParmVar 0x7fffd8400068 'n' 'int'
|       | | |                 `-IntegerLiteral 0x7fffd8401168 <col:40> 'int' 1
|       | | |-BinaryOperator 0x7fffd84014e8 <line:3378:10, col:33> 'int' '='
|       | | | |-DeclRefExpr 0x7fffd8401320 <col:10> 'int' lvalue Var 0x7fffd8400f78 'z' 'int'
|       | | | `-ConditionalOperator 0x7fffd84014b8 <col:14, col:33> 'int'
|       | | |   |-ParenExpr 0x7fffd84013f0 <col:14, col:23> 'int'
|       | | |   | `-BinaryOperator 0x7fffd84013c8 <col:15, col:20> 'int' '=='
|       | | |   |   |-ImplicitCastExpr 0x7fffd8401398 <col:15> 'int' <LValueToRValue>
|       | | |   |   | `-DeclRefExpr 0x7fffd8401348 <col:15> 'int' lvalue Var 0x7fffd8400590 'c' 'int'
|       | | |   |   `-ImplicitCastExpr 0x7fffd84013b0 <col:20> 'int' <LValueToRValue>
|       | | |   |     `-DeclRefExpr 0x7fffd8401370 <col:20> 'int' lvalue Var 0x7fffd8400518 'c12' 'int'
|       | | |   |-IntegerLiteral 0x7fffd8401410 <col:27> 'int' 0
|       | | |   `-BinaryOperator 0x7fffd8401490 <col:31, col:33> 'int' '-'
|       | | |     |-ImplicitCastExpr 0x7fffd8401478 <col:31> 'int' <LValueToRValue>
|       | | |     | `-DeclRefExpr 0x7fffd8401430 <col:31> 'int' lvalue ParmVar 0x7fffd8400068 'n' 'int'
|       | | |     `-IntegerLiteral 0x7fffd8401458 <col:33> 'int' 1
|       | | |-BinaryOperator 0x7fffd84015f8 <line:3379:10, col:17> 'stbtt__edge':'struct stbtt__edge' '='
|       | | | |-DeclRefExpr 0x7fffd8401510 <col:10> 'stbtt__edge':'struct stbtt__edge' lvalue Var 0x7fffd8400240 't' 'stbtt__edge':'struct stbtt__edge'
|       | | | `-ImplicitCastExpr 0x7fffd84015e0 <col:14, col:17> 'stbtt__edge':'struct stbtt__edge' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x7fffd84015b8 <col:14, col:17> 'stbtt__edge':'struct stbtt__edge' lvalue
|       | | |     |-ImplicitCastExpr 0x7fffd8401588 <col:14> 'stbtt__edge *' <LValueToRValue>
|       | | |     | `-DeclRefExpr 0x7fffd8401538 <col:14> 'stbtt__edge *' lvalue ParmVar 0x7fffd83ffff0 'p' 'stbtt__edge *'
|       | | |     `-ImplicitCastExpr 0x7fffd84015a0 <col:16> 'int' <LValueToRValue>
|       | | |       `-DeclRefExpr 0x7fffd8401560 <col:16> 'int' lvalue Var 0x7fffd8400f78 'z' 'int'
|       | | |-BinaryOperator 0x7fffd8401788 <line:3380:10, col:20> 'stbtt__edge':'struct stbtt__edge' '='
|       | | | |-ArraySubscriptExpr 0x7fffd84016a0 <col:10, col:13> 'stbtt__edge':'struct stbtt__edge' lvalue
|       | | | | |-ImplicitCastExpr 0x7fffd8401670 <col:10> 'stbtt__edge *' <LValueToRValue>
|       | | | | | `-DeclRefExpr 0x7fffd8401620 <col:10> 'stbtt__edge *' lvalue ParmVar 0x7fffd83ffff0 'p' 'stbtt__edge *'
|       | | | | `-ImplicitCastExpr 0x7fffd8401688 <col:12> 'int' <LValueToRValue>
|       | | | |   `-DeclRefExpr 0x7fffd8401648 <col:12> 'int' lvalue Var 0x7fffd8400f78 'z' 'int'
|       | | | `-ImplicitCastExpr 0x7fffd8401770 <col:17, col:20> 'stbtt__edge':'struct stbtt__edge' <LValueToRValue>
|       | | |   `-ArraySubscriptExpr 0x7fffd8401748 <col:17, col:20> 'stbtt__edge':'struct stbtt__edge' lvalue
|       | | |     |-ImplicitCastExpr 0x7fffd8401718 <col:17> 'stbtt__edge *' <LValueToRValue>
|       | | |     | `-DeclRefExpr 0x7fffd84016c8 <col:17> 'stbtt__edge *' lvalue ParmVar 0x7fffd83ffff0 'p' 'stbtt__edge *'
|       | | |     `-ImplicitCastExpr 0x7fffd8401730 <col:19> 'int' <LValueToRValue>
|       | | |       `-DeclRefExpr 0x7fffd84016f0 <col:19> 'int' lvalue Var 0x7fffd8400608 'm' 'int'
|       | | `-BinaryOperator 0x7fffd8401898 <line:3381:10, col:17> 'stbtt__edge':'struct stbtt__edge' '='
|       | |   |-ArraySubscriptExpr 0x7fffd8401830 <col:10, col:13> 'stbtt__edge':'struct stbtt__edge' lvalue
|       | |   | |-ImplicitCastExpr 0x7fffd8401800 <col:10> 'stbtt__edge *' <LValueToRValue>
|       | |   | | `-DeclRefExpr 0x7fffd84017b0 <col:10> 'stbtt__edge *' lvalue ParmVar 0x7fffd83ffff0 'p' 'stbtt__edge *'
|       | |   | `-ImplicitCastExpr 0x7fffd8401818 <col:12> 'int' <LValueToRValue>
|       | |   |   `-DeclRefExpr 0x7fffd84017d8 <col:12> 'int' lvalue Var 0x7fffd8400608 'm' 'int'
|       | |   `-ImplicitCastExpr 0x7fffd8401880 <col:17> 'stbtt__edge':'struct stbtt__edge' <LValueToRValue>
|       | |     `-DeclRefExpr 0x7fffd8401858 <col:17> 'stbtt__edge':'struct stbtt__edge' lvalue Var 0x7fffd8400240 't' 'stbtt__edge':'struct stbtt__edge'
|       | `-<<<NULL>>>
|       |-BinaryOperator 0x7fffd8401a00 <line:3385:7, col:14> 'stbtt__edge':'struct stbtt__edge' '='
|       | |-DeclRefExpr 0x7fffd8401938 <col:7> 'stbtt__edge':'struct stbtt__edge' lvalue Var 0x7fffd8400240 't' 'stbtt__edge':'struct stbtt__edge'
|       | `-ImplicitCastExpr 0x7fffd84019e8 <col:11, col:14> 'stbtt__edge':'struct stbtt__edge' <LValueToRValue>
|       |   `-ArraySubscriptExpr 0x7fffd84019c0 <col:11, col:14> 'stbtt__edge':'struct stbtt__edge' lvalue
|       |     |-ImplicitCastExpr 0x7fffd84019a8 <col:11> 'stbtt__edge *' <LValueToRValue>
|       |     | `-DeclRefExpr 0x7fffd8401960 <col:11> 'stbtt__edge *' lvalue ParmVar 0x7fffd83ffff0 'p' 'stbtt__edge *'
|       |     `-IntegerLiteral 0x7fffd8401988 <col:13> 'int' 0
|       |-BinaryOperator 0x7fffd8401b70 <line:3386:7, col:17> 'stbtt__edge':'struct stbtt__edge' '='
|       | |-ArraySubscriptExpr 0x7fffd8401a88 <col:7, col:10> 'stbtt__edge':'struct stbtt__edge' lvalue
|       | | |-ImplicitCastExpr 0x7fffd8401a70 <col:7> 'stbtt__edge *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fffd8401a28 <col:7> 'stbtt__edge *' lvalue ParmVar 0x7fffd83ffff0 'p' 'stbtt__edge *'
|       | | `-IntegerLiteral 0x7fffd8401a50 <col:9> 'int' 0
|       | `-ImplicitCastExpr 0x7fffd8401b58 <col:14, col:17> 'stbtt__edge':'struct stbtt__edge' <LValueToRValue>
|       |   `-ArraySubscriptExpr 0x7fffd8401b30 <col:14, col:17> 'stbtt__edge':'struct stbtt__edge' lvalue
|       |     |-ImplicitCastExpr 0x7fffd8401b00 <col:14> 'stbtt__edge *' <LValueToRValue>
|       |     | `-DeclRefExpr 0x7fffd8401ab0 <col:14> 'stbtt__edge *' lvalue ParmVar 0x7fffd83ffff0 'p' 'stbtt__edge *'
|       |     `-ImplicitCastExpr 0x7fffd8401b18 <col:16> 'int' <LValueToRValue>
|       |       `-DeclRefExpr 0x7fffd8401ad8 <col:16> 'int' lvalue Var 0x7fffd8400608 'm' 'int'
|       |-BinaryOperator 0x7fffd8401c80 <line:3387:7, col:14> 'stbtt__edge':'struct stbtt__edge' '='
|       | |-ArraySubscriptExpr 0x7fffd8401c18 <col:7, col:10> 'stbtt__edge':'struct stbtt__edge' lvalue
|       | | |-ImplicitCastExpr 0x7fffd8401be8 <col:7> 'stbtt__edge *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fffd8401b98 <col:7> 'stbtt__edge *' lvalue ParmVar 0x7fffd83ffff0 'p' 'stbtt__edge *'
|       | | `-ImplicitCastExpr 0x7fffd8401c00 <col:9> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fffd8401bc0 <col:9> 'int' lvalue Var 0x7fffd8400608 'm' 'int'
|       | `-ImplicitCastExpr 0x7fffd8401c68 <col:14> 'stbtt__edge':'struct stbtt__edge' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fffd8401c40 <col:14> 'stbtt__edge':'struct stbtt__edge' lvalue Var 0x7fffd8400240 't' 'stbtt__edge':'struct stbtt__edge'
|       |-BinaryOperator 0x7fffd8401cf0 <line:3390:7, col:9> 'int' '='
|       | |-DeclRefExpr 0x7fffd8401ca8 <col:7> 'int' lvalue Var 0x7fffd8400680 'i' 'int'
|       | `-IntegerLiteral 0x7fffd8401cd0 <col:9> 'int' 1
|       |-BinaryOperator 0x7fffd8401dc8 <line:3391:7, col:11> 'int' '='
|       | |-DeclRefExpr 0x7fffd8401d18 <col:7> 'int' lvalue Var 0x7fffd84006f8 'j' 'int'
|       | `-BinaryOperator 0x7fffd8401da0 <col:9, col:11> 'int' '-'
|       |   |-ImplicitCastExpr 0x7fffd8401d88 <col:9> 'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x7fffd8401d40 <col:9> 'int' lvalue ParmVar 0x7fffd8400068 'n' 'int'
|       |   `-IntegerLiteral 0x7fffd8401d68 <col:11> 'int' 1
|       |-ForStmt 0x7fffd8402ab0 <line:3392:7, line:3409:7>
|       | |-<<<NULL>>>
|       | |-<<<NULL>>>
|       | |-<<<NULL>>>
|       | |-<<<NULL>>>
|       | `-CompoundStmt 0x7fffd8402a60 <line:3392:15, line:3409:7>
|       |   |-ForStmt 0x7fffd8402148 <line:3395:10, line:3397:10>
|       |   | |-<<<NULL>>>
|       |   | |-<<<NULL>>>
|       |   | |-<<<NULL>>>
|       |   | |-UnaryOperator 0x7fffd8401e18 <line:3395:17, col:19> 'int' prefix '++'
|       |   | | `-DeclRefExpr 0x7fffd8401df0 <col:19> 'int' lvalue Var 0x7fffd8400680 'i' 'int'
|       |   | `-CompoundStmt 0x7fffd8402130 <col:22, line:3397:10>
|       |   |   `-IfStmt 0x7fffd84020f8 <line:3396:13, col:48>
|       |   |     |-<<<NULL>>>
|       |   |     |-<<<NULL>>>
|       |   |     |-UnaryOperator 0x7fffd84020d0 <col:17, line:3340:48> 'int' prefix '!'
|       |   |     | `-ParenExpr 0x7fffd84020b0 <col:30, col:48> 'int'
|       |   |     |   `-BinaryOperator 0x7fffd8402088 <col:31, col:46> 'int' '<'
|       |   |     |     |-ImplicitCastExpr 0x7fffd8402058 <col:31, col:36> 'float' <LValueToRValue>
|       |   |     |     | `-MemberExpr 0x7fffd8401f20 <col:31, col:36> 'float' lvalue ->y0 0x7fffd83e15a8
|       |   |     |     |   `-ParenExpr 0x7fffd8401f00 <col:31, col:33> 'stbtt__edge *'
|       |   |     |     |     `-UnaryOperator 0x7fffd8401ee0 <line:3396:33, col:37> 'stbtt__edge *' prefix '&'
|       |   |     |     |       `-ArraySubscriptExpr 0x7fffd8401eb8 <col:34, col:37> 'stbtt__edge':'struct stbtt__edge' lvalue
|       |   |     |     |         |-ImplicitCastExpr 0x7fffd8401e88 <col:34> 'stbtt__edge *' <LValueToRValue>
|       |   |     |     |         | `-DeclRefExpr 0x7fffd8401e38 <col:34> 'stbtt__edge *' lvalue ParmVar 0x7fffd83ffff0 'p' 'stbtt__edge *'
|       |   |     |     |         `-ImplicitCastExpr 0x7fffd8401ea0 <col:36> 'int' <LValueToRValue>
|       |   |     |     |           `-DeclRefExpr 0x7fffd8401e60 <col:36> 'int' lvalue Var 0x7fffd8400680 'i' 'int'
|       |   |     |     `-ImplicitCastExpr 0x7fffd8402070 <line:3340:41, col:46> 'float' <LValueToRValue>
|       |   |     |       `-MemberExpr 0x7fffd8402020 <col:41, col:46> 'float' lvalue ->y0 0x7fffd83e15a8
|       |   |     |         `-ParenExpr 0x7fffd8402000 <col:41, col:43> 'stbtt__edge *'
|       |   |     |           `-UnaryOperator 0x7fffd8401fe0 <line:3396:40, col:44> 'stbtt__edge *' prefix '&'
|       |   |     |             `-ArraySubscriptExpr 0x7fffd8401fb8 <col:41, col:44> 'stbtt__edge':'struct stbtt__edge' lvalue
|       |   |     |               |-ImplicitCastExpr 0x7fffd8401fa0 <col:41> 'stbtt__edge *' <LValueToRValue>
|       |   |     |               | `-DeclRefExpr 0x7fffd8401f58 <col:41> 'stbtt__edge *' lvalue ParmVar 0x7fffd83ffff0 'p' 'stbtt__edge *'
|       |   |     |               `-IntegerLiteral 0x7fffd8401f80 <col:43> 'int' 0
|       |   |     |-BreakStmt 0x7fffd84020f0 <col:48>
|       |   |     `-<<<NULL>>>
|       |   |-ForStmt 0x7fffd8402500 <line:3398:10, line:3400:10>
|       |   | |-<<<NULL>>>
|       |   | |-<<<NULL>>>
|       |   | |-<<<NULL>>>
|       |   | |-UnaryOperator 0x7fffd84021a8 <line:3398:17, col:19> 'int' prefix '--'
|       |   | | `-DeclRefExpr 0x7fffd8402180 <col:19> 'int' lvalue Var 0x7fffd84006f8 'j' 'int'
|       |   | `-CompoundStmt 0x7fffd84024e8 <col:22, line:3400:10>
|       |   |   `-IfStmt 0x7fffd84024b0 <line:3399:13, col:48>
|       |   |     |-<<<NULL>>>
|       |   |     |-<<<NULL>>>
|       |   |     |-UnaryOperator 0x7fffd8402460 <col:17, line:3340:48> 'int' prefix '!'
|       |   |     | `-ParenExpr 0x7fffd8402440 <col:30, col:48> 'int'
|       |   |     |   `-BinaryOperator 0x7fffd8402418 <col:31, col:46> 'int' '<'
|       |   |     |     |-ImplicitCastExpr 0x7fffd84023e8 <col:31, col:36> 'float' <LValueToRValue>
|       |   |     |     | `-MemberExpr 0x7fffd8402290 <col:31, col:36> 'float' lvalue ->y0 0x7fffd83e15a8
|       |   |     |     |   `-ParenExpr 0x7fffd8402270 <col:31, col:33> 'stbtt__edge *'
|       |   |     |     |     `-UnaryOperator 0x7fffd8402250 <line:3399:33, col:37> 'stbtt__edge *' prefix '&'
|       |   |     |     |       `-ArraySubscriptExpr 0x7fffd8402228 <col:34, col:37> 'stbtt__edge':'struct stbtt__edge' lvalue
|       |   |     |     |         |-ImplicitCastExpr 0x7fffd8402210 <col:34> 'stbtt__edge *' <LValueToRValue>
|       |   |     |     |         | `-DeclRefExpr 0x7fffd84021c8 <col:34> 'stbtt__edge *' lvalue ParmVar 0x7fffd83ffff0 'p' 'stbtt__edge *'
|       |   |     |     |         `-IntegerLiteral 0x7fffd84021f0 <col:36> 'int' 0
|       |   |     |     `-ImplicitCastExpr 0x7fffd8402400 <line:3340:41, col:46> 'float' <LValueToRValue>
|       |   |     |       `-MemberExpr 0x7fffd84023b0 <col:41, col:46> 'float' lvalue ->y0 0x7fffd83e15a8
|       |   |     |         `-ParenExpr 0x7fffd8402390 <col:41, col:43> 'stbtt__edge *'
|       |   |     |           `-UnaryOperator 0x7fffd8402370 <line:3399:40, col:44> 'stbtt__edge *' prefix '&'
|       |   |     |             `-ArraySubscriptExpr 0x7fffd8402348 <col:41, col:44> 'stbtt__edge':'struct stbtt__edge' lvalue
|       |   |     |               |-ImplicitCastExpr 0x7fffd8402318 <col:41> 'stbtt__edge *' <LValueToRValue>
|       |   |     |               | `-DeclRefExpr 0x7fffd84022c8 <col:41> 'stbtt__edge *' lvalue ParmVar 0x7fffd83ffff0 'p' 'stbtt__edge *'
|       |   |     |               `-ImplicitCastExpr 0x7fffd8402330 <col:43> 'int' <LValueToRValue>
|       |   |     |                 `-DeclRefExpr 0x7fffd84022f0 <col:43> 'int' lvalue Var 0x7fffd84006f8 'j' 'int'
|       |   |     |-BreakStmt 0x7fffd8402480 <col:48>
|       |   |     `-<<<NULL>>>
|       |   |-IfStmt 0x7fffd84025e8 <line:3402:10, col:22>
|       |   | |-<<<NULL>>>
|       |   | |-<<<NULL>>>
|       |   | |-BinaryOperator 0x7fffd84025b8 <col:14, col:19> 'int' '>='
|       |   | | |-ImplicitCastExpr 0x7fffd8402588 <col:14> 'int' <LValueToRValue>
|       |   | | | `-DeclRefExpr 0x7fffd8402538 <col:14> 'int' lvalue Var 0x7fffd8400680 'i' 'int'
|       |   | | `-ImplicitCastExpr 0x7fffd84025a0 <col:19> 'int' <LValueToRValue>
|       |   | |   `-DeclRefExpr 0x7fffd8402560 <col:19> 'int' lvalue Var 0x7fffd84006f8 'j' 'int'
|       |   | |-BreakStmt 0x7fffd84025e0 <col:22>
|       |   | `-<<<NULL>>>
|       |   |-BinaryOperator 0x7fffd8402708 <line:3403:10, col:17> 'stbtt__edge':'struct stbtt__edge' '='
|       |   | |-DeclRefExpr 0x7fffd8402620 <col:10> 'stbtt__edge':'struct stbtt__edge' lvalue Var 0x7fffd8400240 't' 'stbtt__edge':'struct stbtt__edge'
|       |   | `-ImplicitCastExpr 0x7fffd84026f0 <col:14, col:17> 'stbtt__edge':'struct stbtt__edge' <LValueToRValue>
|       |   |   `-ArraySubscriptExpr 0x7fffd84026c8 <col:14, col:17> 'stbtt__edge':'struct stbtt__edge' lvalue
|       |   |     |-ImplicitCastExpr 0x7fffd8402698 <col:14> 'stbtt__edge *' <LValueToRValue>
|       |   |     | `-DeclRefExpr 0x7fffd8402648 <col:14> 'stbtt__edge *' lvalue ParmVar 0x7fffd83ffff0 'p' 'stbtt__edge *'
|       |   |     `-ImplicitCastExpr 0x7fffd84026b0 <col:16> 'int' <LValueToRValue>
|       |   |       `-DeclRefExpr 0x7fffd8402670 <col:16> 'int' lvalue Var 0x7fffd8400680 'i' 'int'
|       |   |-BinaryOperator 0x7fffd8402898 <line:3404:10, col:20> 'stbtt__edge':'struct stbtt__edge' '='
|       |   | |-ArraySubscriptExpr 0x7fffd84027b0 <col:10, col:13> 'stbtt__edge':'struct stbtt__edge' lvalue
|       |   | | |-ImplicitCastExpr 0x7fffd8402780 <col:10> 'stbtt__edge *' <LValueToRValue>
|       |   | | | `-DeclRefExpr 0x7fffd8402730 <col:10> 'stbtt__edge *' lvalue ParmVar 0x7fffd83ffff0 'p' 'stbtt__edge *'
|       |   | | `-ImplicitCastExpr 0x7fffd8402798 <col:12> 'int' <LValueToRValue>
|       |   | |   `-DeclRefExpr 0x7fffd8402758 <col:12> 'int' lvalue Var 0x7fffd8400680 'i' 'int'
|       |   | `-ImplicitCastExpr 0x7fffd8402880 <col:17, col:20> 'stbtt__edge':'struct stbtt__edge' <LValueToRValue>
|       |   |   `-ArraySubscriptExpr 0x7fffd8402858 <col:17, col:20> 'stbtt__edge':'struct stbtt__edge' lvalue
|       |   |     |-ImplicitCastExpr 0x7fffd8402828 <col:17> 'stbtt__edge *' <LValueToRValue>
|       |   |     | `-DeclRefExpr 0x7fffd84027d8 <col:17> 'stbtt__edge *' lvalue ParmVar 0x7fffd83ffff0 'p' 'stbtt__edge *'
|       |   |     `-ImplicitCastExpr 0x7fffd8402840 <col:19> 'int' <LValueToRValue>
|       |   |       `-DeclRefExpr 0x7fffd8402800 <col:19> 'int' lvalue Var 0x7fffd84006f8 'j' 'int'
|       |   |-BinaryOperator 0x7fffd84029a8 <line:3405:10, col:17> 'stbtt__edge':'struct stbtt__edge' '='
|       |   | |-ArraySubscriptExpr 0x7fffd8402940 <col:10, col:13> 'stbtt__edge':'struct stbtt__edge' lvalue
|       |   | | |-ImplicitCastExpr 0x7fffd8402910 <col:10> 'stbtt__edge *' <LValueToRValue>
|       |   | | | `-DeclRefExpr 0x7fffd84028c0 <col:10> 'stbtt__edge *' lvalue ParmVar 0x7fffd83ffff0 'p' 'stbtt__edge *'
|       |   | | `-ImplicitCastExpr 0x7fffd8402928 <col:12> 'int' <LValueToRValue>
|       |   | |   `-DeclRefExpr 0x7fffd84028e8 <col:12> 'int' lvalue Var 0x7fffd84006f8 'j' 'int'
|       |   | `-ImplicitCastExpr 0x7fffd8402990 <col:17> 'stbtt__edge':'struct stbtt__edge' <LValueToRValue>
|       |   |   `-DeclRefExpr 0x7fffd8402968 <col:17> 'stbtt__edge':'struct stbtt__edge' lvalue Var 0x7fffd8400240 't' 'stbtt__edge':'struct stbtt__edge'
|       |   |-UnaryOperator 0x7fffd84029f8 <line:3407:10, col:12> 'int' prefix '++'
|       |   | `-DeclRefExpr 0x7fffd84029d0 <col:12> 'int' lvalue Var 0x7fffd8400680 'i' 'int'
|       |   `-UnaryOperator 0x7fffd8402a40 <line:3408:10, col:12> 'int' prefix '--'
|       |     `-DeclRefExpr 0x7fffd8402a18 <col:12> 'int' lvalue Var 0x7fffd84006f8 'j' 'int'
|       `-IfStmt 0x7fffd84031f8 <line:3411:7, line:3418:7>
|         |-<<<NULL>>>
|         |-<<<NULL>>>
|         |-BinaryOperator 0x7fffd8402bf0 <line:3411:11, col:19> 'int' '<'
|         | |-ImplicitCastExpr 0x7fffd8402bd8 <col:11> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x7fffd8402ae8 <col:11> 'int' lvalue Var 0x7fffd84006f8 'j' 'int'
|         | `-ParenExpr 0x7fffd8402bb8 <col:15, col:19> 'int'
|         |   `-BinaryOperator 0x7fffd8402b90 <col:16, col:18> 'int' '-'
|         |     |-ImplicitCastExpr 0x7fffd8402b60 <col:16> 'int' <LValueToRValue>
|         |     | `-DeclRefExpr 0x7fffd8402b10 <col:16> 'int' lvalue ParmVar 0x7fffd8400068 'n' 'int'
|         |     `-ImplicitCastExpr 0x7fffd8402b78 <col:18> 'int' <LValueToRValue>
|         |       `-DeclRefExpr 0x7fffd8402b38 <col:18> 'int' lvalue Var 0x7fffd8400680 'i' 'int'
|         |-CompoundStmt 0x7fffd8402f58 <col:22, line:3415:7>
|         | |-CallExpr 0x7fffd8402d00 <line:3412:10, col:41> 'void'
|         | | |-ImplicitCastExpr 0x7fffd8402ce8 <col:10> 'void (*)(stbtt__edge *, int)' <FunctionToPointerDecay>
|         | | | `-DeclRefExpr 0x7fffd8402c18 <col:10> 'void (stbtt__edge *, int)' Function 0x7fffd84000f8 'stbtt__sort_edges_quicksort' 'void (stbtt__edge *, int)'
|         | | |-ImplicitCastExpr 0x7fffd8402d38 <col:38> 'stbtt__edge *' <LValueToRValue>
|         | | | `-DeclRefExpr 0x7fffd8402c40 <col:38> 'stbtt__edge *' lvalue ParmVar 0x7fffd83ffff0 'p' 'stbtt__edge *'
|         | | `-ImplicitCastExpr 0x7fffd8402d50 <col:40> 'int' <LValueToRValue>
|         | |   `-DeclRefExpr 0x7fffd8402c68 <col:40> 'int' lvalue Var 0x7fffd84006f8 'j' 'int'
|         | |-BinaryOperator 0x7fffd8402e38 <line:3413:10, col:16> 'stbtt__edge *' '='
|         | | |-DeclRefExpr 0x7fffd8402d68 <col:10> 'stbtt__edge *' lvalue ParmVar 0x7fffd83ffff0 'p' 'stbtt__edge *'
|         | | `-BinaryOperator 0x7fffd8402e10 <col:14, col:16> 'stbtt__edge *' '+'
|         | |   |-ImplicitCastExpr 0x7fffd8402de0 <col:14> 'stbtt__edge *' <LValueToRValue>
|         | |   | `-DeclRefExpr 0x7fffd8402d90 <col:14> 'stbtt__edge *' lvalue ParmVar 0x7fffd83ffff0 'p' 'stbtt__edge *'
|         | |   `-ImplicitCastExpr 0x7fffd8402df8 <col:16> 'int' <LValueToRValue>
|         | |     `-DeclRefExpr 0x7fffd8402db8 <col:16> 'int' lvalue Var 0x7fffd8400680 'i' 'int'
|         | `-BinaryOperator 0x7fffd8402f30 <line:3414:10, col:16> 'int' '='
|         |   |-DeclRefExpr 0x7fffd8402e60 <col:10> 'int' lvalue ParmVar 0x7fffd8400068 'n' 'int'
|         |   `-BinaryOperator 0x7fffd8402f08 <col:14, col:16> 'int' '-'
|         |     |-ImplicitCastExpr 0x7fffd8402ed8 <col:14> 'int' <LValueToRValue>
|         |     | `-DeclRefExpr 0x7fffd8402e88 <col:14> 'int' lvalue ParmVar 0x7fffd8400068 'n' 'int'
|         |     `-ImplicitCastExpr 0x7fffd8402ef0 <col:16> 'int' <LValueToRValue>
|         |       `-DeclRefExpr 0x7fffd8402eb0 <col:16> 'int' lvalue Var 0x7fffd8400680 'i' 'int'
|         `-CompoundStmt 0x7fffd84031d8 <line:3415:14, line:3418:7>
|           |-CallExpr 0x7fffd8403110 <line:3416:10, col:46> 'void'
|           | |-ImplicitCastExpr 0x7fffd84030f8 <col:10> 'void (*)(stbtt__edge *, int)' <FunctionToPointerDecay>
|           | | `-DeclRefExpr 0x7fffd8402f80 <col:10> 'void (stbtt__edge *, int)' Function 0x7fffd84000f8 'stbtt__sort_edges_quicksort' 'void (stbtt__edge *, int)'
|           | |-BinaryOperator 0x7fffd8403028 <col:38, col:40> 'stbtt__edge *' '+'
|           | | |-ImplicitCastExpr 0x7fffd8402ff8 <col:38> 'stbtt__edge *' <LValueToRValue>
|           | | | `-DeclRefExpr 0x7fffd8402fa8 <col:38> 'stbtt__edge *' lvalue ParmVar 0x7fffd83ffff0 'p' 'stbtt__edge *'
|           | | `-ImplicitCastExpr 0x7fffd8403010 <col:40> 'int' <LValueToRValue>
|           | |   `-DeclRefExpr 0x7fffd8402fd0 <col:40> 'int' lvalue Var 0x7fffd8400680 'i' 'int'
|           | `-BinaryOperator 0x7fffd84030d0 <col:43, col:45> 'int' '-'
|           |   |-ImplicitCastExpr 0x7fffd84030a0 <col:43> 'int' <LValueToRValue>
|           |   | `-DeclRefExpr 0x7fffd8403050 <col:43> 'int' lvalue ParmVar 0x7fffd8400068 'n' 'int'
|           |   `-ImplicitCastExpr 0x7fffd84030b8 <col:45> 'int' <LValueToRValue>
|           |     `-DeclRefExpr 0x7fffd8403078 <col:45> 'int' lvalue Var 0x7fffd8400680 'i' 'int'
|           `-BinaryOperator 0x7fffd84031b0 <line:3417:10, col:14> 'int' '='
|             |-DeclRefExpr 0x7fffd8403148 <col:10> 'int' lvalue ParmVar 0x7fffd8400068 'n' 'int'
|             `-ImplicitCastExpr 0x7fffd8403198 <col:14> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x7fffd8403170 <col:14> 'int' lvalue Var 0x7fffd84006f8 'j' 'int'
|-FunctionDecl 0x7fffd84033f8 <line:3422:1, line:3426:1> line:3422:13 used stbtt__sort_edges 'void (stbtt__edge *, int)' static
| |-ParmVarDecl 0x7fffd84032f0 <col:31, col:44> col:44 used p 'stbtt__edge *'
| |-ParmVarDecl 0x7fffd8403368 <col:47, col:51> col:51 used n 'int'
| `-CompoundStmt 0x7fffd8403698 <line:3423:1, line:3426:1>
|   |-CallExpr 0x7fffd8403538 <line:3424:4, col:36> 'void'
|   | |-ImplicitCastExpr 0x7fffd8403520 <col:4> 'void (*)(stbtt__edge *, int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fffd84034a8 <col:4> 'void (stbtt__edge *, int)' Function 0x7fffd84000f8 'stbtt__sort_edges_quicksort' 'void (stbtt__edge *, int)'
|   | |-ImplicitCastExpr 0x7fffd8403570 <col:32> 'stbtt__edge *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd84034d0 <col:32> 'stbtt__edge *' lvalue ParmVar 0x7fffd84032f0 'p' 'stbtt__edge *'
|   | `-ImplicitCastExpr 0x7fffd8403588 <col:35> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd84034f8 <col:35> 'int' lvalue ParmVar 0x7fffd8403368 'n' 'int'
|   `-CallExpr 0x7fffd8403630 <line:3425:4, col:35> 'void'
|     |-ImplicitCastExpr 0x7fffd8403618 <col:4> 'void (*)(stbtt__edge *, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x7fffd84035a0 <col:4> 'void (stbtt__edge *, int)' Function 0x7fffd83ff020 'stbtt__sort_edges_ins_sort' 'void (stbtt__edge *, int)'
|     |-ImplicitCastExpr 0x7fffd8403668 <col:31> 'stbtt__edge *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd84035c8 <col:31> 'stbtt__edge *' lvalue ParmVar 0x7fffd84032f0 'p' 'stbtt__edge *'
|     `-ImplicitCastExpr 0x7fffd8403680 <col:34> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd84035f0 <col:34> 'int' lvalue ParmVar 0x7fffd8403368 'n' 'int'
|-RecordDecl 0x7fffd84036b8 <line:3428:9, line:3431:1> line:3428:9 struct definition
| |-FieldDecl 0x7fffd8403778 <line:3430:4, col:10> col:10 referenced x 'float'
| `-FieldDecl 0x7fffd84037d8 <col:4, col:12> col:12 referenced y 'float'
|-TypedefDecl 0x7fffd8403870 <line:3428:1, line:3431:3> col:3 referenced stbtt__point 'struct stbtt__point':'stbtt__point'
| `-ElaboratedType 0x7fffd8403820 'struct stbtt__point' sugar
|   `-RecordType 0x7fffd8403740 'stbtt__point'
|     `-Record 0x7fffd84036b8 ''
|-FunctionDecl 0x7fffd8404090 <line:3433:1, line:3488:1> line:3433:13 used stbtt__rasterize 'void (stbtt__bitmap *, stbtt__point *, int *, int, float, float, float, float, int, int, int, void *)' static
| |-ParmVarDecl 0x7fffd84038f0 <col:30, col:45> col:45 used result 'stbtt__bitmap *'
| |-ParmVarDecl 0x7fffd84039d8 <col:53, col:67> col:67 used pts 'stbtt__point *'
| |-ParmVarDecl 0x7fffd8403a50 <col:72, col:77> col:77 used wcount 'int *'
| |-ParmVarDecl 0x7fffd8403ac8 <col:85, col:89> col:89 used windings 'int'
| |-ParmVarDecl 0x7fffd8403b40 <col:99, col:105> col:105 used scale_x 'float'
| |-ParmVarDecl 0x7fffd8403bb8 <col:114, col:120> col:120 used scale_y 'float'
| |-ParmVarDecl 0x7fffd8403c30 <col:129, col:135> col:135 used shift_x 'float'
| |-ParmVarDecl 0x7fffd8403ca8 <col:144, col:150> col:150 used shift_y 'float'
| |-ParmVarDecl 0x7fffd8403d20 <col:159, col:163> col:163 used off_x 'int'
| |-ParmVarDecl 0x7fffd8403d98 <col:170, col:174> col:174 used off_y 'int'
| |-ParmVarDecl 0x7fffd8403e10 <col:181, col:185> col:185 used invert 'int'
| |-ParmVarDecl 0x7fffd8403e88 <col:193, col:199> col:199 used userdata 'void *'
| `-CompoundStmt 0x7fffd8407710 <line:3434:1, line:3488:1>
|   |-DeclStmt 0x7fffd8404318 <line:3435:4, col:51>
|   | `-VarDecl 0x7fffd84041a8 <col:4, col:44> col:10 used y_scale_inv 'float' cinit
|   |   `-ConditionalOperator 0x7fffd84042e8 <col:24, col:44> 'float'
|   |     |-ImplicitCastExpr 0x7fffd84042b8 <col:24> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd8404208 <col:24> 'int' lvalue ParmVar 0x7fffd8403e10 'invert' 'int'
|   |     |-UnaryOperator 0x7fffd8404270 <col:33, col:34> 'float' prefix '-'
|   |     | `-ImplicitCastExpr 0x7fffd8404258 <col:34> 'float' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fffd8404230 <col:34> 'float' lvalue ParmVar 0x7fffd8403bb8 'scale_y' 'float'
|   |     `-ImplicitCastExpr 0x7fffd84042d0 <col:44> 'float' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd8404290 <col:44> 'float' lvalue ParmVar 0x7fffd8403bb8 'scale_y' 'float'
|   |-DeclStmt 0x7fffd84043a0 <line:3436:4, col:18>
|   | `-VarDecl 0x7fffd8404340 <col:4, col:17> col:17 used e 'stbtt__edge *'
|   |-DeclStmt 0x7fffd8404658 <line:3437:4, col:17>
|   | |-VarDecl 0x7fffd84043d0 <col:4, col:8> col:8 used n 'int'
|   | |-VarDecl 0x7fffd8404448 <col:4, col:10> col:10 used i 'int'
|   | |-VarDecl 0x7fffd84044d8 <col:4, col:12> col:12 used j 'int'
|   | |-VarDecl 0x7fffd8404550 <col:4, col:14> col:14 used k 'int'
|   | `-VarDecl 0x7fffd84045c8 <col:4, col:16> col:16 used m 'int'
|   |-DeclStmt 0x7fffd8404708 <line:3441:4, col:22>
|   | `-VarDecl 0x7fffd8404688 <col:4, col:21> col:8 used vsubsample 'int' cinit
|   |   `-IntegerLiteral 0x7fffd84046e8 <col:21> 'int' 1
|   |-BinaryOperator 0x7fffd8404768 <line:3448:4, col:8> 'int' '='
|   | |-DeclRefExpr 0x7fffd8404720 <col:4> 'int' lvalue Var 0x7fffd84043d0 'n' 'int'
|   | `-IntegerLiteral 0x7fffd8404748 <col:8> 'int' 0
|   |-ForStmt 0x7fffd8404a10 <line:3449:4, line:3450:20>
|   | |-BinaryOperator 0x7fffd84047d8 <line:3449:9, col:11> 'int' '='
|   | | |-DeclRefExpr 0x7fffd8404790 <col:9> 'int' lvalue Var 0x7fffd8404448 'i' 'int'
|   | | `-IntegerLiteral 0x7fffd84047b8 <col:11> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd8404880 <col:14, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd8404850 <col:14> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd8404800 <col:14> 'int' lvalue Var 0x7fffd8404448 'i' 'int'
|   | | `-ImplicitCastExpr 0x7fffd8404868 <col:18> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8404828 <col:18> 'int' lvalue ParmVar 0x7fffd8403ac8 'windings' 'int'
|   | |-UnaryOperator 0x7fffd84048d0 <col:28, col:30> 'int' prefix '++'
|   | | `-DeclRefExpr 0x7fffd84048a8 <col:30> 'int' lvalue Var 0x7fffd8404448 'i' 'int'
|   | `-CompoundAssignOperator 0x7fffd84049d8 <line:3450:7, col:20> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |-DeclRefExpr 0x7fffd84048f0 <col:7> 'int' lvalue Var 0x7fffd84043d0 'n' 'int'
|   |   `-ImplicitCastExpr 0x7fffd84049c0 <col:12, col:20> 'int' <LValueToRValue>
|   |     `-ArraySubscriptExpr 0x7fffd8404998 <col:12, col:20> 'int' lvalue
|   |       |-ImplicitCastExpr 0x7fffd8404968 <col:12> 'int *' <LValueToRValue>
|   |       | `-DeclRefExpr 0x7fffd8404918 <col:12> 'int *' lvalue ParmVar 0x7fffd8403a50 'wcount' 'int *'
|   |       `-ImplicitCastExpr 0x7fffd8404980 <col:19> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x7fffd8404940 <col:19> 'int' lvalue Var 0x7fffd8404448 'i' 'int'
|   |-BinaryOperator 0x7fffd8404de8 <line:3452:4, line:467:51> 'stbtt__edge *' '='
|   | |-DeclRefExpr 0x7fffd8404a48 <line:3452:4> 'stbtt__edge *' lvalue Var 0x7fffd8404340 'e' 'stbtt__edge *'
|   | `-CStyleCastExpr 0x7fffd8404dc0 <col:8, line:467:51> 'stbtt__edge *' <BitCast>
|   |   `-ParenExpr 0x7fffd8404da0 <col:31, col:51> 'void *'
|   |     `-BinaryOperator 0x7fffd8404d78 <col:32, col:50> 'void *' ','
|   |       |-CStyleCastExpr 0x7fffd8404b10 <col:32, col:40> 'void' <ToVoid>
|   |       | `-ImplicitCastExpr 0x7fffd8404af8 <col:38, col:40> 'void *' <LValueToRValue>
|   |       |   `-ParenExpr 0x7fffd8404ad8 <col:38, col:40> 'void *' lvalue
|   |       |     `-DeclRefExpr 0x7fffd8404a70 <line:3452:57> 'void *' lvalue ParmVar 0x7fffd8403e88 'userdata' 'void *'
|   |       `-CallExpr 0x7fffd8404d00 <line:467:42, col:50> 'void *'
|   |         |-ImplicitCastExpr 0x7fffd8404ce8 <col:42> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x7fffd8404b38 <col:42> 'void *(unsigned long)' Function 0x7fffd831b4b0 'malloc' 'void *(unsigned long)'
|   |         `-BinaryOperator 0x7fffd8404cc0 <line:3452:37, col:54> 'unsigned long' '*'
|   |           |-UnaryExprOrTypeTraitExpr 0x7fffd8404be0 <col:37, col:46> 'unsigned long' sizeof
|   |           | `-ParenExpr 0x7fffd8404bc0 <col:43, col:46> 'stbtt__edge':'struct stbtt__edge' lvalue
|   |           |   `-UnaryOperator 0x7fffd8404ba0 <col:44, col:45> 'stbtt__edge':'struct stbtt__edge' lvalue prefix '*'
|   |           |     `-ImplicitCastExpr 0x7fffd8404b88 <col:45> 'stbtt__edge *' <LValueToRValue>
|   |           |       `-DeclRefExpr 0x7fffd8404b60 <col:45> 'stbtt__edge *' lvalue Var 0x7fffd8404340 'e' 'stbtt__edge *'
|   |           `-ImplicitCastExpr 0x7fffd8404ca8 <col:50, col:54> 'unsigned long' <IntegralCast>
|   |             `-ParenExpr 0x7fffd8404c88 <col:50, col:54> 'int'
|   |               `-BinaryOperator 0x7fffd8404c60 <col:51, col:53> 'int' '+'
|   |                 |-ImplicitCastExpr 0x7fffd8404c48 <col:51> 'int' <LValueToRValue>
|   |                 | `-DeclRefExpr 0x7fffd8404c00 <col:51> 'int' lvalue Var 0x7fffd84043d0 'n' 'int'
|   |                 `-IntegerLiteral 0x7fffd8404c28 <col:53> 'int' 1
|   |-IfStmt 0x7fffd8404ec8 <line:3453:4, col:16>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd8404e88 <col:8, col:13> 'int' '=='
|   | | |-ImplicitCastExpr 0x7fffd8404e58 <col:8> 'stbtt__edge *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd8404e10 <col:8> 'stbtt__edge *' lvalue Var 0x7fffd8404340 'e' 'stbtt__edge *'
|   | | `-ImplicitCastExpr 0x7fffd8404e70 <col:13> 'stbtt__edge *' <NullToPointer>
|   | |   `-IntegerLiteral 0x7fffd8404e38 <col:13> 'int' 0
|   | |-ReturnStmt 0x7fffd8404eb0 <col:16>
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x7fffd8404f48 <line:3454:4, col:8> 'int' '='
|   | |-DeclRefExpr 0x7fffd8404f00 <col:4> 'int' lvalue Var 0x7fffd84043d0 'n' 'int'
|   | `-IntegerLiteral 0x7fffd8404f28 <col:8> 'int' 0
|   |-BinaryOperator 0x7fffd8404fb8 <line:3456:4, col:6> 'int' '='
|   | |-DeclRefExpr 0x7fffd8404f70 <col:4> 'int' lvalue Var 0x7fffd84045c8 'm' 'int'
|   | `-IntegerLiteral 0x7fffd8404f98 <col:6> 'int' 0
|   |-ForStmt 0x7fffd8407150 <line:3457:4, line:3478:4>
|   | |-BinaryOperator 0x7fffd8405028 <line:3457:9, col:11> 'int' '='
|   | | |-DeclRefExpr 0x7fffd8404fe0 <col:9> 'int' lvalue Var 0x7fffd8404448 'i' 'int'
|   | | `-IntegerLiteral 0x7fffd8405008 <col:11> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd84050d0 <col:14, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd84050a0 <col:14> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd8405050 <col:14> 'int' lvalue Var 0x7fffd8404448 'i' 'int'
|   | | `-ImplicitCastExpr 0x7fffd84050b8 <col:18> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8405078 <col:18> 'int' lvalue ParmVar 0x7fffd8403ac8 'windings' 'int'
|   | |-UnaryOperator 0x7fffd8405120 <col:28, col:30> 'int' prefix '++'
|   | | `-DeclRefExpr 0x7fffd84050f8 <col:30> 'int' lvalue Var 0x7fffd8404448 'i' 'int'
|   | `-CompoundStmt 0x7fffd8407120 <col:33, line:3478:4>
|   |   |-DeclStmt 0x7fffd8405258 <line:3458:7, col:32>
|   |   | `-VarDecl 0x7fffd8405150 <col:7, col:31> col:21 used p 'stbtt__point *' cinit
|   |   |   `-BinaryOperator 0x7fffd8405230 <col:25, col:31> 'stbtt__point *' '+'
|   |   |     |-ImplicitCastExpr 0x7fffd8405200 <col:25> 'stbtt__point *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x7fffd84051b0 <col:25> 'stbtt__point *' lvalue ParmVar 0x7fffd84039d8 'pts' 'stbtt__point *'
|   |   |     `-ImplicitCastExpr 0x7fffd8405218 <col:31> 'int' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x7fffd84051d8 <col:31> 'int' lvalue Var 0x7fffd84045c8 'm' 'int'
|   |   |-CompoundAssignOperator 0x7fffd8405358 <line:3459:7, col:20> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   | |-DeclRefExpr 0x7fffd8405270 <col:7> 'int' lvalue Var 0x7fffd84045c8 'm' 'int'
|   |   | `-ImplicitCastExpr 0x7fffd8405340 <col:12, col:20> 'int' <LValueToRValue>
|   |   |   `-ArraySubscriptExpr 0x7fffd8405318 <col:12, col:20> 'int' lvalue
|   |   |     |-ImplicitCastExpr 0x7fffd84052e8 <col:12> 'int *' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x7fffd8405298 <col:12> 'int *' lvalue ParmVar 0x7fffd8403a50 'wcount' 'int *'
|   |   |     `-ImplicitCastExpr 0x7fffd8405300 <col:19> 'int' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x7fffd84052c0 <col:19> 'int' lvalue Var 0x7fffd8404448 'i' 'int'
|   |   |-BinaryOperator 0x7fffd84054c0 <line:3460:7, col:21> 'int' '='
|   |   | |-DeclRefExpr 0x7fffd8405390 <col:7> 'int' lvalue Var 0x7fffd84044d8 'j' 'int'
|   |   | `-BinaryOperator 0x7fffd8405498 <col:11, col:21> 'int' '-'
|   |   |   |-ImplicitCastExpr 0x7fffd8405480 <col:11, col:19> 'int' <LValueToRValue>
|   |   |   | `-ArraySubscriptExpr 0x7fffd8405438 <col:11, col:19> 'int' lvalue
|   |   |   |   |-ImplicitCastExpr 0x7fffd8405408 <col:11> 'int *' <LValueToRValue>
|   |   |   |   | `-DeclRefExpr 0x7fffd84053b8 <col:11> 'int *' lvalue ParmVar 0x7fffd8403a50 'wcount' 'int *'
|   |   |   |   `-ImplicitCastExpr 0x7fffd8405420 <col:18> 'int' <LValueToRValue>
|   |   |   |     `-DeclRefExpr 0x7fffd84053e0 <col:18> 'int' lvalue Var 0x7fffd8404448 'i' 'int'
|   |   |   `-IntegerLiteral 0x7fffd8405460 <col:21> 'int' 1
|   |   `-ForStmt 0x7fffd84070e8 <line:3461:7, line:3477:7>
|   |     |-BinaryOperator 0x7fffd8405530 <line:3461:12, col:14> 'int' '='
|   |     | |-DeclRefExpr 0x7fffd84054e8 <col:12> 'int' lvalue Var 0x7fffd8404550 'k' 'int'
|   |     | `-IntegerLiteral 0x7fffd8405510 <col:14> 'int' 0
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x7fffd8405658 <col:17, col:29> 'int' '<'
|   |     | |-ImplicitCastExpr 0x7fffd8405628 <col:17> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x7fffd8405558 <col:17> 'int' lvalue Var 0x7fffd8404550 'k' 'int'
|   |     | `-ImplicitCastExpr 0x7fffd8405640 <col:21, col:29> 'int' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x7fffd8405600 <col:21, col:29> 'int' lvalue
|   |     |     |-ImplicitCastExpr 0x7fffd84055d0 <col:21> 'int *' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x7fffd8405580 <col:21> 'int *' lvalue ParmVar 0x7fffd8403a50 'wcount' 'int *'
|   |     |     `-ImplicitCastExpr 0x7fffd84055e8 <col:28> 'int' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x7fffd84055a8 <col:28> 'int' lvalue Var 0x7fffd8404448 'i' 'int'
|   |     |-BinaryOperator 0x7fffd84056f0 <col:32, col:35> 'int' '='
|   |     | |-DeclRefExpr 0x7fffd8405680 <col:32> 'int' lvalue Var 0x7fffd84044d8 'j' 'int'
|   |     | `-UnaryOperator 0x7fffd84056d0 <col:34, col:35> 'int' postfix '++'
|   |     |   `-DeclRefExpr 0x7fffd84056a8 <col:34> 'int' lvalue Var 0x7fffd8404550 'k' 'int'
|   |     `-CompoundStmt 0x7fffd8407090 <col:39, line:3477:7>
|   |       |-DeclStmt 0x7fffd84058a0 <line:3462:10, col:21>
|   |       | |-VarDecl 0x7fffd8405730 <col:10, col:16> col:14 used a 'int' cinit
|   |       | | `-ImplicitCastExpr 0x7fffd84057b8 <col:16> 'int' <LValueToRValue>
|   |       | |   `-DeclRefExpr 0x7fffd8405790 <col:16> 'int' lvalue Var 0x7fffd8404550 'k' 'int'
|   |       | `-VarDecl 0x7fffd84057e8 <col:10, col:20> col:18 used b 'int' cinit
|   |       |   `-ImplicitCastExpr 0x7fffd8405870 <col:20> 'int' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x7fffd8405848 <col:20> 'int' lvalue Var 0x7fffd84044d8 'j' 'int'
|   |       |-IfStmt 0x7fffd8405ad8 <line:3464:10, line:3465:13>
|   |       | |-<<<NULL>>>
|   |       | |-<<<NULL>>>
|   |       | |-BinaryOperator 0x7fffd8405aa8 <line:3464:14, col:29> 'int' '=='
|   |       | | |-ImplicitCastExpr 0x7fffd8405a78 <col:14, col:19> 'float' <LValueToRValue>
|   |       | | | `-MemberExpr 0x7fffd8405960 <col:14, col:19> 'float' lvalue .y 0x7fffd84037d8
|   |       | | |   `-ArraySubscriptExpr 0x7fffd8405938 <col:14, col:17> 'stbtt__point':'stbtt__point' lvalue
|   |       | | |     |-ImplicitCastExpr 0x7fffd8405908 <col:14> 'stbtt__point *' <LValueToRValue>
|   |       | | |     | `-DeclRefExpr 0x7fffd84058b8 <col:14> 'stbtt__point *' lvalue Var 0x7fffd8405150 'p' 'stbtt__point *'
|   |       | | |     `-ImplicitCastExpr 0x7fffd8405920 <col:16> 'int' <LValueToRValue>
|   |       | | |       `-DeclRefExpr 0x7fffd84058e0 <col:16> 'int' lvalue Var 0x7fffd84044d8 'j' 'int'
|   |       | | `-ImplicitCastExpr 0x7fffd8405a90 <col:24, col:29> 'float' <LValueToRValue>
|   |       | |   `-MemberExpr 0x7fffd8405a40 <col:24, col:29> 'float' lvalue .y 0x7fffd84037d8
|   |       | |     `-ArraySubscriptExpr 0x7fffd8405a18 <col:24, col:27> 'stbtt__point':'stbtt__point' lvalue
|   |       | |       |-ImplicitCastExpr 0x7fffd84059e8 <col:24> 'stbtt__point *' <LValueToRValue>
|   |       | |       | `-DeclRefExpr 0x7fffd8405998 <col:24> 'stbtt__point *' lvalue Var 0x7fffd8405150 'p' 'stbtt__point *'
|   |       | |       `-ImplicitCastExpr 0x7fffd8405a00 <col:26> 'int' <LValueToRValue>
|   |       | |         `-DeclRefExpr 0x7fffd84059c0 <col:26> 'int' lvalue Var 0x7fffd8404550 'k' 'int'
|   |       | |-ContinueStmt 0x7fffd8405ad0 <line:3465:13>
|   |       | `-<<<NULL>>>
|   |       |-BinaryOperator 0x7fffd8405c10 <line:3467:10, col:24> 'int' '='
|   |       | |-MemberExpr 0x7fffd8405bb8 <col:10, col:15> 'int' lvalue .invert 0x7fffd83e16c8
|   |       | | `-ArraySubscriptExpr 0x7fffd8405b90 <col:10, col:13> 'stbtt__edge':'struct stbtt__edge' lvalue
|   |       | |   |-ImplicitCastExpr 0x7fffd8405b60 <col:10> 'stbtt__edge *' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x7fffd8405b10 <col:10> 'stbtt__edge *' lvalue Var 0x7fffd8404340 'e' 'stbtt__edge *'
|   |       | |   `-ImplicitCastExpr 0x7fffd8405b78 <col:12> 'int' <LValueToRValue>
|   |       | |     `-DeclRefExpr 0x7fffd8405b38 <col:12> 'int' lvalue Var 0x7fffd84043d0 'n' 'int'
|   |       | `-IntegerLiteral 0x7fffd8405bf0 <col:24> 'int' 0
|   |       |-IfStmt 0x7fffd8406368 <line:3468:10, line:3471:10>
|   |       | |-<<<NULL>>>
|   |       | |-<<<NULL>>>
|   |       | |-ConditionalOperator 0x7fffd84060a8 <line:3468:14, col:55> 'int'
|   |       | | |-ImplicitCastExpr 0x7fffd8406090 <col:14> 'int' <LValueToRValue>
|   |       | | | `-DeclRefExpr 0x7fffd8405c38 <col:14> 'int' lvalue ParmVar 0x7fffd8403e10 'invert' 'int'
|   |       | | |-BinaryOperator 0x7fffd8405e50 <col:23, col:37> 'int' '>'
|   |       | | | |-ImplicitCastExpr 0x7fffd8405e20 <col:23, col:28> 'float' <LValueToRValue>
|   |       | | | | `-MemberExpr 0x7fffd8405d08 <col:23, col:28> 'float' lvalue .y 0x7fffd84037d8
|   |       | | | |   `-ArraySubscriptExpr 0x7fffd8405ce0 <col:23, col:26> 'stbtt__point':'stbtt__point' lvalue
|   |       | | | |     |-ImplicitCastExpr 0x7fffd8405cb0 <col:23> 'stbtt__point *' <LValueToRValue>
|   |       | | | |     | `-DeclRefExpr 0x7fffd8405c60 <col:23> 'stbtt__point *' lvalue Var 0x7fffd8405150 'p' 'stbtt__point *'
|   |       | | | |     `-ImplicitCastExpr 0x7fffd8405cc8 <col:25> 'int' <LValueToRValue>
|   |       | | | |       `-DeclRefExpr 0x7fffd8405c88 <col:25> 'int' lvalue Var 0x7fffd84044d8 'j' 'int'
|   |       | | | `-ImplicitCastExpr 0x7fffd8405e38 <col:32, col:37> 'float' <LValueToRValue>
|   |       | | |   `-MemberExpr 0x7fffd8405de8 <col:32, col:37> 'float' lvalue .y 0x7fffd84037d8
|   |       | | |     `-ArraySubscriptExpr 0x7fffd8405dc0 <col:32, col:35> 'stbtt__point':'stbtt__point' lvalue
|   |       | | |       |-ImplicitCastExpr 0x7fffd8405d90 <col:32> 'stbtt__point *' <LValueToRValue>
|   |       | | |       | `-DeclRefExpr 0x7fffd8405d40 <col:32> 'stbtt__point *' lvalue Var 0x7fffd8405150 'p' 'stbtt__point *'
|   |       | | |       `-ImplicitCastExpr 0x7fffd8405da8 <col:34> 'int' <LValueToRValue>
|   |       | | |         `-DeclRefExpr 0x7fffd8405d68 <col:34> 'int' lvalue Var 0x7fffd8404550 'k' 'int'
|   |       | | `-BinaryOperator 0x7fffd8406068 <col:41, col:55> 'int' '<'
|   |       | |   |-ImplicitCastExpr 0x7fffd8406038 <col:41, col:46> 'float' <LValueToRValue>
|   |       | |   | `-MemberExpr 0x7fffd8405f20 <col:41, col:46> 'float' lvalue .y 0x7fffd84037d8
|   |       | |   |   `-ArraySubscriptExpr 0x7fffd8405ef8 <col:41, col:44> 'stbtt__point':'stbtt__point' lvalue
|   |       | |   |     |-ImplicitCastExpr 0x7fffd8405ec8 <col:41> 'stbtt__point *' <LValueToRValue>
|   |       | |   |     | `-DeclRefExpr 0x7fffd8405e78 <col:41> 'stbtt__point *' lvalue Var 0x7fffd8405150 'p' 'stbtt__point *'
|   |       | |   |     `-ImplicitCastExpr 0x7fffd8405ee0 <col:43> 'int' <LValueToRValue>
|   |       | |   |       `-DeclRefExpr 0x7fffd8405ea0 <col:43> 'int' lvalue Var 0x7fffd84044d8 'j' 'int'
|   |       | |   `-ImplicitCastExpr 0x7fffd8406050 <col:50, col:55> 'float' <LValueToRValue>
|   |       | |     `-MemberExpr 0x7fffd8406000 <col:50, col:55> 'float' lvalue .y 0x7fffd84037d8
|   |       | |       `-ArraySubscriptExpr 0x7fffd8405fd8 <col:50, col:53> 'stbtt__point':'stbtt__point' lvalue
|   |       | |         |-ImplicitCastExpr 0x7fffd8405fa8 <col:50> 'stbtt__point *' <LValueToRValue>
|   |       | |         | `-DeclRefExpr 0x7fffd8405f58 <col:50> 'stbtt__point *' lvalue Var 0x7fffd8405150 'p' 'stbtt__point *'
|   |       | |         `-ImplicitCastExpr 0x7fffd8405fc0 <col:52> 'int' <LValueToRValue>
|   |       | |           `-DeclRefExpr 0x7fffd8405f80 <col:52> 'int' lvalue Var 0x7fffd8404550 'k' 'int'
|   |       | |-CompoundStmt 0x7fffd8406348 <col:58, line:3471:10>
|   |       | | |-BinaryOperator 0x7fffd84061d8 <line:3469:13, col:27> 'int' '='
|   |       | | | |-MemberExpr 0x7fffd8406180 <col:13, col:18> 'int' lvalue .invert 0x7fffd83e16c8
|   |       | | | | `-ArraySubscriptExpr 0x7fffd8406158 <col:13, col:16> 'stbtt__edge':'struct stbtt__edge' lvalue
|   |       | | | |   |-ImplicitCastExpr 0x7fffd8406128 <col:13> 'stbtt__edge *' <LValueToRValue>
|   |       | | | |   | `-DeclRefExpr 0x7fffd84060d8 <col:13> 'stbtt__edge *' lvalue Var 0x7fffd8404340 'e' 'stbtt__edge *'
|   |       | | | |   `-ImplicitCastExpr 0x7fffd8406140 <col:15> 'int' <LValueToRValue>
|   |       | | | |     `-DeclRefExpr 0x7fffd8406100 <col:15> 'int' lvalue Var 0x7fffd84043d0 'n' 'int'
|   |       | | | `-IntegerLiteral 0x7fffd84061b8 <col:27> 'int' 1
|   |       | | `-BinaryOperator 0x7fffd8406320 <line:3470:13, col:19> 'int' ','
|   |       | |   |-BinaryOperator 0x7fffd8406268 <col:13, col:15> 'int' '='
|   |       | |   | |-DeclRefExpr 0x7fffd8406200 <col:13> 'int' lvalue Var 0x7fffd8405730 'a' 'int'
|   |       | |   | `-ImplicitCastExpr 0x7fffd8406250 <col:15> 'int' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x7fffd8406228 <col:15> 'int' lvalue Var 0x7fffd84044d8 'j' 'int'
|   |       | |   `-BinaryOperator 0x7fffd84062f8 <col:17, col:19> 'int' '='
|   |       | |     |-DeclRefExpr 0x7fffd8406290 <col:17> 'int' lvalue Var 0x7fffd84057e8 'b' 'int'
|   |       | |     `-ImplicitCastExpr 0x7fffd84062e0 <col:19> 'int' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x7fffd84062b8 <col:19> 'int' lvalue Var 0x7fffd8404550 'k' 'int'
|   |       | `-<<<NULL>>>
|   |       |-BinaryOperator 0x7fffd8406670 <line:3472:10, col:39> 'float' '='
|   |       | |-MemberExpr 0x7fffd8406448 <col:10, col:15> 'float' lvalue .x0 0x7fffd83e1548
|   |       | | `-ArraySubscriptExpr 0x7fffd8406420 <col:10, col:13> 'stbtt__edge':'struct stbtt__edge' lvalue
|   |       | |   |-ImplicitCastExpr 0x7fffd84063f0 <col:10> 'stbtt__edge *' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x7fffd84063a0 <col:10> 'stbtt__edge *' lvalue Var 0x7fffd8404340 'e' 'stbtt__edge *'
|   |       | |   `-ImplicitCastExpr 0x7fffd8406408 <col:12> 'int' <LValueToRValue>
|   |       | |     `-DeclRefExpr 0x7fffd84063c8 <col:12> 'int' lvalue Var 0x7fffd84043d0 'n' 'int'
|   |       | `-BinaryOperator 0x7fffd8406648 <col:20, col:39> 'float' '+'
|   |       |   |-BinaryOperator 0x7fffd84065e0 <col:20, col:29> 'float' '*'
|   |       |   | |-ImplicitCastExpr 0x7fffd84065b0 <col:20, col:25> 'float' <LValueToRValue>
|   |       |   | | `-MemberExpr 0x7fffd8406550 <col:20, col:25> 'float' lvalue .x 0x7fffd8403778
|   |       |   | |   `-ArraySubscriptExpr 0x7fffd8406528 <col:20, col:23> 'stbtt__point':'stbtt__point' lvalue
|   |       |   | |     |-ImplicitCastExpr 0x7fffd84064f8 <col:20> 'stbtt__point *' <LValueToRValue>
|   |       |   | |     | `-DeclRefExpr 0x7fffd8406480 <col:20> 'stbtt__point *' lvalue Var 0x7fffd8405150 'p' 'stbtt__point *'
|   |       |   | |     `-ImplicitCastExpr 0x7fffd8406510 <col:22> 'int' <LValueToRValue>
|   |       |   | |       `-DeclRefExpr 0x7fffd84064d0 <col:22> 'int' lvalue Var 0x7fffd8405730 'a' 'int'
|   |       |   | `-ImplicitCastExpr 0x7fffd84065c8 <col:29> 'float' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x7fffd8406588 <col:29> 'float' lvalue ParmVar 0x7fffd8403b40 'scale_x' 'float'
|   |       |   `-ImplicitCastExpr 0x7fffd8406630 <col:39> 'float' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x7fffd8406608 <col:39> 'float' lvalue ParmVar 0x7fffd8403c30 'shift_x' 'float'
|   |       |-BinaryOperator 0x7fffd84069e0 <line:3473:10, col:55> 'float' '='
|   |       | |-MemberExpr 0x7fffd8406740 <col:10, col:15> 'float' lvalue .y0 0x7fffd83e15a8
|   |       | | `-ArraySubscriptExpr 0x7fffd8406718 <col:10, col:13> 'stbtt__edge':'struct stbtt__edge' lvalue
|   |       | |   |-ImplicitCastExpr 0x7fffd84066e8 <col:10> 'stbtt__edge *' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x7fffd8406698 <col:10> 'stbtt__edge *' lvalue Var 0x7fffd8404340 'e' 'stbtt__edge *'
|   |       | |   `-ImplicitCastExpr 0x7fffd8406700 <col:12> 'int' <LValueToRValue>
|   |       | |     `-DeclRefExpr 0x7fffd84066c0 <col:12> 'int' lvalue Var 0x7fffd84043d0 'n' 'int'
|   |       | `-BinaryOperator 0x7fffd84069b8 <col:20, col:55> 'float' '*'
|   |       |   |-ParenExpr 0x7fffd8406940 <col:20, col:51> 'float'
|   |       |   | `-BinaryOperator 0x7fffd8406918 <col:21, col:44> 'float' '+'
|   |       |   |   |-BinaryOperator 0x7fffd84068b0 <col:21, col:30> 'float' '*'
|   |       |   |   | |-ImplicitCastExpr 0x7fffd8406880 <col:21, col:26> 'float' <LValueToRValue>
|   |       |   |   | | `-MemberExpr 0x7fffd8406820 <col:21, col:26> 'float' lvalue .y 0x7fffd84037d8
|   |       |   |   | |   `-ArraySubscriptExpr 0x7fffd84067f8 <col:21, col:24> 'stbtt__point':'stbtt__point' lvalue
|   |       |   |   | |     |-ImplicitCastExpr 0x7fffd84067c8 <col:21> 'stbtt__point *' <LValueToRValue>
|   |       |   |   | |     | `-DeclRefExpr 0x7fffd8406778 <col:21> 'stbtt__point *' lvalue Var 0x7fffd8405150 'p' 'stbtt__point *'
|   |       |   |   | |     `-ImplicitCastExpr 0x7fffd84067e0 <col:23> 'int' <LValueToRValue>
|   |       |   |   | |       `-DeclRefExpr 0x7fffd84067a0 <col:23> 'int' lvalue Var 0x7fffd8405730 'a' 'int'
|   |       |   |   | `-ImplicitCastExpr 0x7fffd8406898 <col:30> 'float' <LValueToRValue>
|   |       |   |   |   `-DeclRefExpr 0x7fffd8406858 <col:30> 'float' lvalue Var 0x7fffd84041a8 'y_scale_inv' 'float'
|   |       |   |   `-ImplicitCastExpr 0x7fffd8406900 <col:44> 'float' <LValueToRValue>
|   |       |   |     `-DeclRefExpr 0x7fffd84068d8 <col:44> 'float' lvalue ParmVar 0x7fffd8403ca8 'shift_y' 'float'
|   |       |   `-ImplicitCastExpr 0x7fffd84069a0 <col:55> 'float' <IntegralToFloating>
|   |       |     `-ImplicitCastExpr 0x7fffd8406988 <col:55> 'int' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x7fffd8406960 <col:55> 'int' lvalue Var 0x7fffd8404688 'vsubsample' 'int'
|   |       |-BinaryOperator 0x7fffd8406cb0 <line:3474:10, col:39> 'float' '='
|   |       | |-MemberExpr 0x7fffd8406ab0 <col:10, col:15> 'float' lvalue .x1 0x7fffd83e1608
|   |       | | `-ArraySubscriptExpr 0x7fffd8406a88 <col:10, col:13> 'stbtt__edge':'struct stbtt__edge' lvalue
|   |       | |   |-ImplicitCastExpr 0x7fffd8406a58 <col:10> 'stbtt__edge *' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x7fffd8406a08 <col:10> 'stbtt__edge *' lvalue Var 0x7fffd8404340 'e' 'stbtt__edge *'
|   |       | |   `-ImplicitCastExpr 0x7fffd8406a70 <col:12> 'int' <LValueToRValue>
|   |       | |     `-DeclRefExpr 0x7fffd8406a30 <col:12> 'int' lvalue Var 0x7fffd84043d0 'n' 'int'
|   |       | `-BinaryOperator 0x7fffd8406c88 <col:20, col:39> 'float' '+'
|   |       |   |-BinaryOperator 0x7fffd8406c20 <col:20, col:29> 'float' '*'
|   |       |   | |-ImplicitCastExpr 0x7fffd8406bf0 <col:20, col:25> 'float' <LValueToRValue>
|   |       |   | | `-MemberExpr 0x7fffd8406b90 <col:20, col:25> 'float' lvalue .x 0x7fffd8403778
|   |       |   | |   `-ArraySubscriptExpr 0x7fffd8406b68 <col:20, col:23> 'stbtt__point':'stbtt__point' lvalue
|   |       |   | |     |-ImplicitCastExpr 0x7fffd8406b38 <col:20> 'stbtt__point *' <LValueToRValue>
|   |       |   | |     | `-DeclRefExpr 0x7fffd8406ae8 <col:20> 'stbtt__point *' lvalue Var 0x7fffd8405150 'p' 'stbtt__point *'
|   |       |   | |     `-ImplicitCastExpr 0x7fffd8406b50 <col:22> 'int' <LValueToRValue>
|   |       |   | |       `-DeclRefExpr 0x7fffd8406b10 <col:22> 'int' lvalue Var 0x7fffd84057e8 'b' 'int'
|   |       |   | `-ImplicitCastExpr 0x7fffd8406c08 <col:29> 'float' <LValueToRValue>
|   |       |   |   `-DeclRefExpr 0x7fffd8406bc8 <col:29> 'float' lvalue ParmVar 0x7fffd8403b40 'scale_x' 'float'
|   |       |   `-ImplicitCastExpr 0x7fffd8406c70 <col:39> 'float' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x7fffd8406c48 <col:39> 'float' lvalue ParmVar 0x7fffd8403c30 'shift_x' 'float'
|   |       |-BinaryOperator 0x7fffd8407020 <line:3475:10, col:55> 'float' '='
|   |       | |-MemberExpr 0x7fffd8406d80 <col:10, col:15> 'float' lvalue .y1 0x7fffd83e1668
|   |       | | `-ArraySubscriptExpr 0x7fffd8406d58 <col:10, col:13> 'stbtt__edge':'struct stbtt__edge' lvalue
|   |       | |   |-ImplicitCastExpr 0x7fffd8406d28 <col:10> 'stbtt__edge *' <LValueToRValue>
|   |       | |   | `-DeclRefExpr 0x7fffd8406cd8 <col:10> 'stbtt__edge *' lvalue Var 0x7fffd8404340 'e' 'stbtt__edge *'
|   |       | |   `-ImplicitCastExpr 0x7fffd8406d40 <col:12> 'int' <LValueToRValue>
|   |       | |     `-DeclRefExpr 0x7fffd8406d00 <col:12> 'int' lvalue Var 0x7fffd84043d0 'n' 'int'
|   |       | `-BinaryOperator 0x7fffd8406ff8 <col:20, col:55> 'float' '*'
|   |       |   |-ParenExpr 0x7fffd8406f80 <col:20, col:51> 'float'
|   |       |   | `-BinaryOperator 0x7fffd8406f58 <col:21, col:44> 'float' '+'
|   |       |   |   |-BinaryOperator 0x7fffd8406ef0 <col:21, col:30> 'float' '*'
|   |       |   |   | |-ImplicitCastExpr 0x7fffd8406ec0 <col:21, col:26> 'float' <LValueToRValue>
|   |       |   |   | | `-MemberExpr 0x7fffd8406e60 <col:21, col:26> 'float' lvalue .y 0x7fffd84037d8
|   |       |   |   | |   `-ArraySubscriptExpr 0x7fffd8406e38 <col:21, col:24> 'stbtt__point':'stbtt__point' lvalue
|   |       |   |   | |     |-ImplicitCastExpr 0x7fffd8406e08 <col:21> 'stbtt__point *' <LValueToRValue>
|   |       |   |   | |     | `-DeclRefExpr 0x7fffd8406db8 <col:21> 'stbtt__point *' lvalue Var 0x7fffd8405150 'p' 'stbtt__point *'
|   |       |   |   | |     `-ImplicitCastExpr 0x7fffd8406e20 <col:23> 'int' <LValueToRValue>
|   |       |   |   | |       `-DeclRefExpr 0x7fffd8406de0 <col:23> 'int' lvalue Var 0x7fffd84057e8 'b' 'int'
|   |       |   |   | `-ImplicitCastExpr 0x7fffd8406ed8 <col:30> 'float' <LValueToRValue>
|   |       |   |   |   `-DeclRefExpr 0x7fffd8406e98 <col:30> 'float' lvalue Var 0x7fffd84041a8 'y_scale_inv' 'float'
|   |       |   |   `-ImplicitCastExpr 0x7fffd8406f40 <col:44> 'float' <LValueToRValue>
|   |       |   |     `-DeclRefExpr 0x7fffd8406f18 <col:44> 'float' lvalue ParmVar 0x7fffd8403ca8 'shift_y' 'float'
|   |       |   `-ImplicitCastExpr 0x7fffd8406fe0 <col:55> 'float' <IntegralToFloating>
|   |       |     `-ImplicitCastExpr 0x7fffd8406fc8 <col:55> 'int' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x7fffd8406fa0 <col:55> 'int' lvalue Var 0x7fffd8404688 'vsubsample' 'int'
|   |       `-UnaryOperator 0x7fffd8407070 <line:3476:10, col:12> 'int' prefix '++'
|   |         `-DeclRefExpr 0x7fffd8407048 <col:12> 'int' lvalue Var 0x7fffd84043d0 'n' 'int'
|   |-CallExpr 0x7fffd8407218 <line:3482:4, col:26> 'void'
|   | |-ImplicitCastExpr 0x7fffd8407200 <col:4> 'void (*)(stbtt__edge *, int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fffd8407188 <col:4> 'void (stbtt__edge *, int)' Function 0x7fffd84033f8 'stbtt__sort_edges' 'void (stbtt__edge *, int)'
|   | |-ImplicitCastExpr 0x7fffd8407250 <col:22> 'stbtt__edge *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd84071b0 <col:22> 'stbtt__edge *' lvalue Var 0x7fffd8404340 'e' 'stbtt__edge *'
|   | `-ImplicitCastExpr 0x7fffd8407268 <col:25> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd84071d8 <col:25> 'int' lvalue Var 0x7fffd84043d0 'n' 'int'
|   |-CallExpr 0x7fffd8407430 <line:3485:4, col:82> 'void'
|   | |-ImplicitCastExpr 0x7fffd8407418 <col:4> 'void (*)(stbtt__bitmap *, stbtt__edge *, int, int, int, int, void *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fffd8407280 <col:4> 'void (stbtt__bitmap *, stbtt__edge *, int, int, int, int, void *)' Function 0x7fffd83f8ef0 'stbtt__rasterize_sorted_edges' 'void (stbtt__bitmap *, stbtt__edge *, int, int, int, int, void *)'
|   | |-ImplicitCastExpr 0x7fffd8407490 <col:34> 'stbtt__bitmap *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd84072a8 <col:34> 'stbtt__bitmap *' lvalue ParmVar 0x7fffd84038f0 'result' 'stbtt__bitmap *'
|   | |-ImplicitCastExpr 0x7fffd84074a8 <col:42> 'stbtt__edge *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd84072d0 <col:42> 'stbtt__edge *' lvalue Var 0x7fffd8404340 'e' 'stbtt__edge *'
|   | |-ImplicitCastExpr 0x7fffd84074c0 <col:45> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd84072f8 <col:45> 'int' lvalue Var 0x7fffd84043d0 'n' 'int'
|   | |-ImplicitCastExpr 0x7fffd84074d8 <col:48> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd8407320 <col:48> 'int' lvalue Var 0x7fffd8404688 'vsubsample' 'int'
|   | |-ImplicitCastExpr 0x7fffd84074f0 <col:60> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd8407348 <col:60> 'int' lvalue ParmVar 0x7fffd8403d20 'off_x' 'int'
|   | |-ImplicitCastExpr 0x7fffd8407508 <col:67> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd8407370 <col:67> 'int' lvalue ParmVar 0x7fffd8403d98 'off_y' 'int'
|   | `-ImplicitCastExpr 0x7fffd8407520 <col:74> 'void *' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd8407398 <col:74> 'void *' lvalue ParmVar 0x7fffd8403e88 'userdata' 'void *'
|   `-ParenExpr 0x7fffd84076f0 <line:468:31, col:49> 'void'
|     `-BinaryOperator 0x7fffd84076c8 <col:32, col:48> 'void' ','
|       |-CStyleCastExpr 0x7fffd84075d8 <col:32, col:40> 'void' <ToVoid>
|       | `-ImplicitCastExpr 0x7fffd84075c0 <col:38, col:40> 'void *' <LValueToRValue>
|       |   `-ParenExpr 0x7fffd84075a0 <col:38, col:40> 'void *' lvalue
|       |     `-DeclRefExpr 0x7fffd8407538 <line:3487:18> 'void *' lvalue ParmVar 0x7fffd8403e88 'userdata' 'void *'
|       `-CallExpr 0x7fffd8407668 <line:468:42, col:48> 'void'
|         |-ImplicitCastExpr 0x7fffd8407650 <col:42> 'void (*)(void *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x7fffd8407600 <col:42> 'void (void *)' Function 0x7fffd831bec0 'free' 'void (void *)'
|         `-ImplicitCastExpr 0x7fffd84076b0 <line:3487:15> 'void *' <BitCast>
|           `-ImplicitCastExpr 0x7fffd8407698 <col:15> 'stbtt__edge *' <LValueToRValue>
|             `-DeclRefExpr 0x7fffd8407628 <col:15> 'stbtt__edge *' lvalue Var 0x7fffd8404340 'e' 'stbtt__edge *'
|-FunctionDecl 0x7fffd8407a50 <line:3490:1, line:3495:1> line:3490:13 used stbtt__add_point 'void (stbtt__point *, int, float, float)' static
| |-ParmVarDecl 0x7fffd84077a0 <col:30, col:44> col:44 used points 'stbtt__point *'
| |-ParmVarDecl 0x7fffd8407818 <col:52, col:56> col:56 used n 'int'
| |-ParmVarDecl 0x7fffd8407890 <col:59, col:65> col:65 used x 'float'
| |-ParmVarDecl 0x7fffd8407908 <col:68, col:74> col:74 used y 'float'
| `-CompoundStmt 0x7fffd8407e50 <line:3491:1, line:3495:1>
|   |-IfStmt 0x7fffd8407b88 <line:3492:4, col:17>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-UnaryOperator 0x7fffd8407b50 <col:8, col:9> 'int' prefix '!'
|   | | `-ImplicitCastExpr 0x7fffd8407b38 <col:9> 'stbtt__point *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8407b10 <col:9> 'stbtt__point *' lvalue ParmVar 0x7fffd84077a0 'points' 'stbtt__point *'
|   | |-ReturnStmt 0x7fffd8407b70 <col:17>
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x7fffd8407ce0 <line:3493:4, col:18> 'float' '='
|   | |-MemberExpr 0x7fffd8407c68 <col:4, col:14> 'float' lvalue .x 0x7fffd8403778
|   | | `-ArraySubscriptExpr 0x7fffd8407c40 <col:4, col:12> 'stbtt__point':'stbtt__point' lvalue
|   | |   |-ImplicitCastExpr 0x7fffd8407c10 <col:4> 'stbtt__point *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd8407bc0 <col:4> 'stbtt__point *' lvalue ParmVar 0x7fffd84077a0 'points' 'stbtt__point *'
|   | |   `-ImplicitCastExpr 0x7fffd8407c28 <col:11> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x7fffd8407be8 <col:11> 'int' lvalue ParmVar 0x7fffd8407818 'n' 'int'
|   | `-ImplicitCastExpr 0x7fffd8407cc8 <col:18> 'float' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd8407ca0 <col:18> 'float' lvalue ParmVar 0x7fffd8407890 'x' 'float'
|   `-BinaryOperator 0x7fffd8407e28 <line:3494:4, col:18> 'float' '='
|     |-MemberExpr 0x7fffd8407db0 <col:4, col:14> 'float' lvalue .y 0x7fffd84037d8
|     | `-ArraySubscriptExpr 0x7fffd8407d88 <col:4, col:12> 'stbtt__point':'stbtt__point' lvalue
|     |   |-ImplicitCastExpr 0x7fffd8407d58 <col:4> 'stbtt__point *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x7fffd8407d08 <col:4> 'stbtt__point *' lvalue ParmVar 0x7fffd84077a0 'points' 'stbtt__point *'
|     |   `-ImplicitCastExpr 0x7fffd8407d70 <col:11> 'int' <LValueToRValue>
|     |     `-DeclRefExpr 0x7fffd8407d30 <col:11> 'int' lvalue ParmVar 0x7fffd8407818 'n' 'int'
|     `-ImplicitCastExpr 0x7fffd8407e10 <col:18> 'float' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd8407de8 <col:18> 'float' lvalue ParmVar 0x7fffd8407908 'y' 'float'
|-FunctionDecl 0x7fffd84084e0 <line:3498:1, line:3516:1> line:3498:12 used stbtt__tesselate_curve 'int (stbtt__point *, int *, float, float, float, float, float, float, float, int)' static
| |-ParmVarDecl 0x7fffd8407e88 <col:35, col:49> col:49 used points 'stbtt__point *'
| |-ParmVarDecl 0x7fffd8407f00 <col:57, col:62> col:62 used num_points 'int *'
| |-ParmVarDecl 0x7fffd8407f78 <col:74, col:80> col:80 used x0 'float'
| |-ParmVarDecl 0x7fffd8407ff0 <col:84, col:90> col:90 used y0 'float'
| |-ParmVarDecl 0x7fffd8408068 <col:94, col:100> col:100 used x1 'float'
| |-ParmVarDecl 0x7fffd84080e0 <col:104, col:110> col:110 used y1 'float'
| |-ParmVarDecl 0x7fffd8408158 <col:114, col:120> col:120 used x2 'float'
| |-ParmVarDecl 0x7fffd84081d0 <col:124, col:130> col:130 used y2 'float'
| |-ParmVarDecl 0x7fffd8408248 <col:134, col:140> col:140 used objspace_flatness_squared 'float'
| |-ParmVarDecl 0x7fffd84082c0 <col:167, col:171> col:171 used n 'int'
| `-CompoundStmt 0x7fffd840a090 <line:3499:1, line:3516:1>
|   |-DeclStmt 0x7fffd8408838 <line:3501:4, col:33>
|   | `-VarDecl 0x7fffd84085e8 <col:4, col:32> col:10 used mx 'float' cinit
|   |   `-BinaryOperator 0x7fffd8408810 <col:15, col:32> 'float' '/'
|   |     |-ParenExpr 0x7fffd84087b8 <col:15, col:30> 'float'
|   |     | `-BinaryOperator 0x7fffd8408790 <col:16, col:28> 'float' '+'
|   |     |   |-BinaryOperator 0x7fffd8408728 <col:16, col:23> 'float' '+'
|   |     |   | |-ImplicitCastExpr 0x7fffd8408710 <col:16> 'float' <LValueToRValue>
|   |     |   | | `-DeclRefExpr 0x7fffd8408648 <col:16> 'float' lvalue ParmVar 0x7fffd8407f78 'x0' 'float'
|   |     |   | `-BinaryOperator 0x7fffd84086e8 <col:21, col:23> 'float' '*'
|   |     |   |   |-ImplicitCastExpr 0x7fffd84086d0 <col:21> 'float' <IntegralToFloating>
|   |     |   |   | `-IntegerLiteral 0x7fffd8408670 <col:21> 'int' 2
|   |     |   |   `-ImplicitCastExpr 0x7fffd84086b8 <col:23> 'float' <LValueToRValue>
|   |     |   |     `-DeclRefExpr 0x7fffd8408690 <col:23> 'float' lvalue ParmVar 0x7fffd8408068 'x1' 'float'
|   |     |   `-ImplicitCastExpr 0x7fffd8408778 <col:28> 'float' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x7fffd8408750 <col:28> 'float' lvalue ParmVar 0x7fffd8408158 'x2' 'float'
|   |     `-ImplicitCastExpr 0x7fffd84087f8 <col:32> 'float' <IntegralToFloating>
|   |       `-IntegerLiteral 0x7fffd84087d8 <col:32> 'int' 4
|   |-DeclStmt 0x7fffd8408ab8 <line:3502:4, col:33>
|   | `-VarDecl 0x7fffd8408868 <col:4, col:32> col:10 used my 'float' cinit
|   |   `-BinaryOperator 0x7fffd8408a90 <col:15, col:32> 'float' '/'
|   |     |-ParenExpr 0x7fffd8408a38 <col:15, col:30> 'float'
|   |     | `-BinaryOperator 0x7fffd8408a10 <col:16, col:28> 'float' '+'
|   |     |   |-BinaryOperator 0x7fffd84089a8 <col:16, col:23> 'float' '+'
|   |     |   | |-ImplicitCastExpr 0x7fffd8408990 <col:16> 'float' <LValueToRValue>
|   |     |   | | `-DeclRefExpr 0x7fffd84088c8 <col:16> 'float' lvalue ParmVar 0x7fffd8407ff0 'y0' 'float'
|   |     |   | `-BinaryOperator 0x7fffd8408968 <col:21, col:23> 'float' '*'
|   |     |   |   |-ImplicitCastExpr 0x7fffd8408950 <col:21> 'float' <IntegralToFloating>
|   |     |   |   | `-IntegerLiteral 0x7fffd84088f0 <col:21> 'int' 2
|   |     |   |   `-ImplicitCastExpr 0x7fffd8408938 <col:23> 'float' <LValueToRValue>
|   |     |   |     `-DeclRefExpr 0x7fffd8408910 <col:23> 'float' lvalue ParmVar 0x7fffd84080e0 'y1' 'float'
|   |     |   `-ImplicitCastExpr 0x7fffd84089f8 <col:28> 'float' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x7fffd84089d0 <col:28> 'float' lvalue ParmVar 0x7fffd84081d0 'y2' 'float'
|   |     `-ImplicitCastExpr 0x7fffd8408a78 <col:32> 'float' <IntegralToFloating>
|   |       `-IntegerLiteral 0x7fffd8408a58 <col:32> 'int' 4
|   |-DeclStmt 0x7fffd8408cd8 <line:3504:4, col:29>
|   | `-VarDecl 0x7fffd8408ae8 <col:4, col:27> col:10 used dx 'float' cinit
|   |   `-BinaryOperator 0x7fffd8408cb0 <col:15, col:27> 'float' '-'
|   |     |-BinaryOperator 0x7fffd8408c48 <col:15, col:23> 'float' '/'
|   |     | |-ParenExpr 0x7fffd8408bf0 <col:15, col:21> 'float'
|   |     | | `-BinaryOperator 0x7fffd8408bc8 <col:16, col:19> 'float' '+'
|   |     | |   |-ImplicitCastExpr 0x7fffd8408b98 <col:16> 'float' <LValueToRValue>
|   |     | |   | `-DeclRefExpr 0x7fffd8408b48 <col:16> 'float' lvalue ParmVar 0x7fffd8407f78 'x0' 'float'
|   |     | |   `-ImplicitCastExpr 0x7fffd8408bb0 <col:19> 'float' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x7fffd8408b70 <col:19> 'float' lvalue ParmVar 0x7fffd8408158 'x2' 'float'
|   |     | `-ImplicitCastExpr 0x7fffd8408c30 <col:23> 'float' <IntegralToFloating>
|   |     |   `-IntegerLiteral 0x7fffd8408c10 <col:23> 'int' 2
|   |     `-ImplicitCastExpr 0x7fffd8408c98 <col:27> 'float' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd8408c70 <col:27> 'float' lvalue Var 0x7fffd84085e8 'mx' 'float'
|   |-DeclStmt 0x7fffd8408ef8 <line:3505:4, col:29>
|   | `-VarDecl 0x7fffd8408d08 <col:4, col:27> col:10 used dy 'float' cinit
|   |   `-BinaryOperator 0x7fffd8408ed0 <col:15, col:27> 'float' '-'
|   |     |-BinaryOperator 0x7fffd8408e68 <col:15, col:23> 'float' '/'
|   |     | |-ParenExpr 0x7fffd8408e10 <col:15, col:21> 'float'
|   |     | | `-BinaryOperator 0x7fffd8408de8 <col:16, col:19> 'float' '+'
|   |     | |   |-ImplicitCastExpr 0x7fffd8408db8 <col:16> 'float' <LValueToRValue>
|   |     | |   | `-DeclRefExpr 0x7fffd8408d68 <col:16> 'float' lvalue ParmVar 0x7fffd8407ff0 'y0' 'float'
|   |     | |   `-ImplicitCastExpr 0x7fffd8408dd0 <col:19> 'float' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x7fffd8408d90 <col:19> 'float' lvalue ParmVar 0x7fffd84081d0 'y2' 'float'
|   |     | `-ImplicitCastExpr 0x7fffd8408e50 <col:23> 'float' <IntegralToFloating>
|   |     |   `-IntegerLiteral 0x7fffd8408e30 <col:23> 'int' 2
|   |     `-ImplicitCastExpr 0x7fffd8408eb8 <col:27> 'float' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd8408e90 <col:27> 'float' lvalue Var 0x7fffd8408868 'my' 'float'
|   |-IfStmt 0x7fffd8408fd0 <line:3506:4, line:3507:14>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd8408f70 <line:3506:8, col:12> 'int' '>'
|   | | |-ImplicitCastExpr 0x7fffd8408f58 <col:8> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd8408f10 <col:8> 'int' lvalue ParmVar 0x7fffd84082c0 'n' 'int'
|   | | `-IntegerLiteral 0x7fffd8408f38 <col:12> 'int' 16
|   | |-ReturnStmt 0x7fffd8408fb8 <line:3507:7, col:14>
|   | | `-IntegerLiteral 0x7fffd8408f98 <col:14> 'int' 1
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd840a020 <line:3508:4, line:3514:4>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd84091c0 <line:3508:8, col:22> 'int' '>'
|   | | |-BinaryOperator 0x7fffd8409158 <col:8, col:17> 'float' '+'
|   | | | |-BinaryOperator 0x7fffd8409088 <col:8, col:11> 'float' '*'
|   | | | | |-ImplicitCastExpr 0x7fffd8409058 <col:8> 'float' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x7fffd8409008 <col:8> 'float' lvalue Var 0x7fffd8408ae8 'dx' 'float'
|   | | | | `-ImplicitCastExpr 0x7fffd8409070 <col:11> 'float' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x7fffd8409030 <col:11> 'float' lvalue Var 0x7fffd8408ae8 'dx' 'float'
|   | | | `-BinaryOperator 0x7fffd8409130 <col:14, col:17> 'float' '*'
|   | | |   |-ImplicitCastExpr 0x7fffd8409100 <col:14> 'float' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x7fffd84090b0 <col:14> 'float' lvalue Var 0x7fffd8408d08 'dy' 'float'
|   | | |   `-ImplicitCastExpr 0x7fffd8409118 <col:17> 'float' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x7fffd84090d8 <col:17> 'float' lvalue Var 0x7fffd8408d08 'dy' 'float'
|   | | `-ImplicitCastExpr 0x7fffd84091a8 <col:22> 'float' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8409180 <col:22> 'float' lvalue ParmVar 0x7fffd8408248 'objspace_flatness_squared' 'float'
|   | |-CompoundStmt 0x7fffd8409c80 <col:49, line:3511:4>
|   | | |-CallExpr 0x7fffd8409640 <line:3509:7, col:120> 'int'
|   | | | |-ImplicitCastExpr 0x7fffd8409628 <col:7> 'int (*)(stbtt__point *, int *, float, float, float, float, float, float, float, int)' <FunctionToPointerDecay>
|   | | | | `-DeclRefExpr 0x7fffd84091e8 <col:7> 'int (stbtt__point *, int *, float, float, float, float, float, float, float, int)' Function 0x7fffd84084e0 'stbtt__tesselate_curve' 'int (stbtt__point *, int *, float, float, float, float, float, float, float, int)'
|   | | | |-ImplicitCastExpr 0x7fffd84096b8 <col:30> 'stbtt__point *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x7fffd8409210 <col:30> 'stbtt__point *' lvalue ParmVar 0x7fffd8407e88 'points' 'stbtt__point *'
|   | | | |-ImplicitCastExpr 0x7fffd84096d0 <col:38> 'int *' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x7fffd8409238 <col:38> 'int *' lvalue ParmVar 0x7fffd8407f00 'num_points' 'int *'
|   | | | |-ImplicitCastExpr 0x7fffd84096e8 <col:50> 'float' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x7fffd8409260 <col:50> 'float' lvalue ParmVar 0x7fffd8407f78 'x0' 'float'
|   | | | |-ImplicitCastExpr 0x7fffd8409700 <col:53> 'float' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x7fffd8409288 <col:53> 'float' lvalue ParmVar 0x7fffd8407ff0 'y0' 'float'
|   | | | |-BinaryOperator 0x7fffd8409398 <col:57, col:65> 'float' '/'
|   | | | | |-ParenExpr 0x7fffd8409358 <col:57, col:63> 'float'
|   | | | | | `-BinaryOperator 0x7fffd8409330 <col:58, col:61> 'float' '+'
|   | | | | |   |-ImplicitCastExpr 0x7fffd8409300 <col:58> 'float' <LValueToRValue>
|   | | | | |   | `-DeclRefExpr 0x7fffd84092b0 <col:58> 'float' lvalue ParmVar 0x7fffd8407f78 'x0' 'float'
|   | | | | |   `-ImplicitCastExpr 0x7fffd8409318 <col:61> 'float' <LValueToRValue>
|   | | | | |     `-DeclRefExpr 0x7fffd84092d8 <col:61> 'float' lvalue ParmVar 0x7fffd8408068 'x1' 'float'
|   | | | | `-FloatingLiteral 0x7fffd8409378 <col:65> 'float' 2.000000e+00
|   | | | |-BinaryOperator 0x7fffd84094a8 <col:70, col:78> 'float' '/'
|   | | | | |-ParenExpr 0x7fffd8409468 <col:70, col:76> 'float'
|   | | | | | `-BinaryOperator 0x7fffd8409440 <col:71, col:74> 'float' '+'
|   | | | | |   |-ImplicitCastExpr 0x7fffd8409410 <col:71> 'float' <LValueToRValue>
|   | | | | |   | `-DeclRefExpr 0x7fffd84093c0 <col:71> 'float' lvalue ParmVar 0x7fffd8407ff0 'y0' 'float'
|   | | | | |   `-ImplicitCastExpr 0x7fffd8409428 <col:74> 'float' <LValueToRValue>
|   | | | | |     `-DeclRefExpr 0x7fffd84093e8 <col:74> 'float' lvalue ParmVar 0x7fffd84080e0 'y1' 'float'
|   | | | | `-FloatingLiteral 0x7fffd8409488 <col:78> 'float' 2.000000e+00
|   | | | |-ImplicitCastExpr 0x7fffd8409718 <col:84> 'float' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x7fffd84094d0 <col:84> 'float' lvalue Var 0x7fffd84085e8 'mx' 'float'
|   | | | |-ImplicitCastExpr 0x7fffd8409730 <col:87> 'float' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x7fffd84094f8 <col:87> 'float' lvalue Var 0x7fffd8408868 'my' 'float'
|   | | | |-ImplicitCastExpr 0x7fffd8409748 <col:91> 'float' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x7fffd8409520 <col:91> 'float' lvalue ParmVar 0x7fffd8408248 'objspace_flatness_squared' 'float'
|   | | | `-BinaryOperator 0x7fffd84095a8 <col:117, col:119> 'int' '+'
|   | | |   |-ImplicitCastExpr 0x7fffd8409590 <col:117> 'int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x7fffd8409548 <col:117> 'int' lvalue ParmVar 0x7fffd84082c0 'n' 'int'
|   | | |   `-IntegerLiteral 0x7fffd8409570 <col:119> 'int' 1
|   | | `-CallExpr 0x7fffd8409b60 <line:3510:7, col:120> 'int'
|   | |   |-ImplicitCastExpr 0x7fffd8409b48 <col:7> 'int (*)(stbtt__point *, int *, float, float, float, float, float, float, float, int)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x7fffd8409760 <col:7> 'int (stbtt__point *, int *, float, float, float, float, float, float, float, int)' Function 0x7fffd84084e0 'stbtt__tesselate_curve' 'int (stbtt__point *, int *, float, float, float, float, float, float, float, int)'
|   | |   |-ImplicitCastExpr 0x7fffd8409bd8 <col:30> 'stbtt__point *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd8409788 <col:30> 'stbtt__point *' lvalue ParmVar 0x7fffd8407e88 'points' 'stbtt__point *'
|   | |   |-ImplicitCastExpr 0x7fffd8409bf0 <col:38> 'int *' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd84097b0 <col:38> 'int *' lvalue ParmVar 0x7fffd8407f00 'num_points' 'int *'
|   | |   |-ImplicitCastExpr 0x7fffd8409c08 <col:50> 'float' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd84097d8 <col:50> 'float' lvalue Var 0x7fffd84085e8 'mx' 'float'
|   | |   |-ImplicitCastExpr 0x7fffd8409c20 <col:53> 'float' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd8409800 <col:53> 'float' lvalue Var 0x7fffd8408868 'my' 'float'
|   | |   |-BinaryOperator 0x7fffd8409910 <col:57, col:65> 'float' '/'
|   | |   | |-ParenExpr 0x7fffd84098d0 <col:57, col:63> 'float'
|   | |   | | `-BinaryOperator 0x7fffd84098a8 <col:58, col:61> 'float' '+'
|   | |   | |   |-ImplicitCastExpr 0x7fffd8409878 <col:58> 'float' <LValueToRValue>
|   | |   | |   | `-DeclRefExpr 0x7fffd8409828 <col:58> 'float' lvalue ParmVar 0x7fffd8408068 'x1' 'float'
|   | |   | |   `-ImplicitCastExpr 0x7fffd8409890 <col:61> 'float' <LValueToRValue>
|   | |   | |     `-DeclRefExpr 0x7fffd8409850 <col:61> 'float' lvalue ParmVar 0x7fffd8408158 'x2' 'float'
|   | |   | `-FloatingLiteral 0x7fffd84098f0 <col:65> 'float' 2.000000e+00
|   | |   |-BinaryOperator 0x7fffd8409a20 <col:70, col:78> 'float' '/'
|   | |   | |-ParenExpr 0x7fffd84099e0 <col:70, col:76> 'float'
|   | |   | | `-BinaryOperator 0x7fffd84099b8 <col:71, col:74> 'float' '+'
|   | |   | |   |-ImplicitCastExpr 0x7fffd8409988 <col:71> 'float' <LValueToRValue>
|   | |   | |   | `-DeclRefExpr 0x7fffd8409938 <col:71> 'float' lvalue ParmVar 0x7fffd84080e0 'y1' 'float'
|   | |   | |   `-ImplicitCastExpr 0x7fffd84099a0 <col:74> 'float' <LValueToRValue>
|   | |   | |     `-DeclRefExpr 0x7fffd8409960 <col:74> 'float' lvalue ParmVar 0x7fffd84081d0 'y2' 'float'
|   | |   | `-FloatingLiteral 0x7fffd8409a00 <col:78> 'float' 2.000000e+00
|   | |   |-ImplicitCastExpr 0x7fffd8409c38 <col:84> 'float' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd8409a48 <col:84> 'float' lvalue ParmVar 0x7fffd8408158 'x2' 'float'
|   | |   |-ImplicitCastExpr 0x7fffd8409c50 <col:87> 'float' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd8409a70 <col:87> 'float' lvalue ParmVar 0x7fffd84081d0 'y2' 'float'
|   | |   |-ImplicitCastExpr 0x7fffd8409c68 <col:91> 'float' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd8409a98 <col:91> 'float' lvalue ParmVar 0x7fffd8408248 'objspace_flatness_squared' 'float'
|   | |   `-BinaryOperator 0x7fffd8409b20 <col:117, col:119> 'int' '+'
|   | |     |-ImplicitCastExpr 0x7fffd8409b08 <col:117> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x7fffd8409ac0 <col:117> 'int' lvalue ParmVar 0x7fffd84082c0 'n' 'int'
|   | |     `-IntegerLiteral 0x7fffd8409ae8 <col:119> 'int' 1
|   | `-CompoundStmt 0x7fffd840a000 <line:3511:11, line:3514:4>
|   |   |-CallExpr 0x7fffd8409e10 <line:3512:7, col:49> 'void'
|   |   | |-ImplicitCastExpr 0x7fffd8409df8 <col:7> 'void (*)(stbtt__point *, int, float, float)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x7fffd8409ca0 <col:7> 'void (stbtt__point *, int, float, float)' Function 0x7fffd8407a50 'stbtt__add_point' 'void (stbtt__point *, int, float, float)'
|   |   | |-ImplicitCastExpr 0x7fffd8409e58 <col:24> 'stbtt__point *' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x7fffd8409cc8 <col:24> 'stbtt__point *' lvalue ParmVar 0x7fffd8407e88 'points' 'stbtt__point *'
|   |   | |-ImplicitCastExpr 0x7fffd8409e70 <col:32, col:33> 'int' <LValueToRValue>
|   |   | | `-UnaryOperator 0x7fffd8409d30 <col:32, col:33> 'int' lvalue prefix '*'
|   |   | |   `-ImplicitCastExpr 0x7fffd8409d18 <col:33> 'int *' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x7fffd8409cf0 <col:33> 'int *' lvalue ParmVar 0x7fffd8407f00 'num_points' 'int *'
|   |   | |-ImplicitCastExpr 0x7fffd8409e88 <col:44> 'float' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x7fffd8409d50 <col:44> 'float' lvalue ParmVar 0x7fffd8408158 'x2' 'float'
|   |   | `-ImplicitCastExpr 0x7fffd8409ea0 <col:47> 'float' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x7fffd8409d78 <col:47> 'float' lvalue ParmVar 0x7fffd84081d0 'y2' 'float'
|   |   `-BinaryOperator 0x7fffd8409fd8 <line:3513:7, col:33> 'int' '='
|   |     |-UnaryOperator 0x7fffd8409ef8 <col:7, col:8> 'int' lvalue prefix '*'
|   |     | `-ImplicitCastExpr 0x7fffd8409ee0 <col:8> 'int *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fffd8409eb8 <col:8> 'int *' lvalue ParmVar 0x7fffd8407f00 'num_points' 'int *'
|   |     `-BinaryOperator 0x7fffd8409fb0 <col:21, col:33> 'int' '+'
|   |       |-ImplicitCastExpr 0x7fffd8409f98 <col:21, col:22> 'int' <LValueToRValue>
|   |       | `-UnaryOperator 0x7fffd8409f58 <col:21, col:22> 'int' lvalue prefix '*'
|   |       |   `-ImplicitCastExpr 0x7fffd8409f40 <col:22> 'int *' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x7fffd8409f18 <col:22> 'int *' lvalue ParmVar 0x7fffd8407f00 'num_points' 'int *'
|   |       `-IntegerLiteral 0x7fffd8409f78 <col:33> 'int' 1
|   `-ReturnStmt 0x7fffd840a078 <line:3515:4, col:11>
|     `-IntegerLiteral 0x7fffd840a058 <col:11> 'int' 1
|-FunctionDecl 0x7fffd840a860 <line:3518:1, line:3558:1> line:3518:13 used stbtt__tesselate_cubic 'void (stbtt__point *, int *, float, float, float, float, float, float, float, float, float, int)' static
| |-ParmVarDecl 0x7fffd840a0e8 <col:36, col:50> col:50 used points 'stbtt__point *'
| |-ParmVarDecl 0x7fffd840a160 <col:58, col:63> col:63 used num_points 'int *'
| |-ParmVarDecl 0x7fffd840a1d8 <col:75, col:81> col:81 used x0 'float'
| |-ParmVarDecl 0x7fffd840a250 <col:85, col:91> col:91 used y0 'float'
| |-ParmVarDecl 0x7fffd840a2c8 <col:95, col:101> col:101 used x1 'float'
| |-ParmVarDecl 0x7fffd840a340 <col:105, col:111> col:111 used y1 'float'
| |-ParmVarDecl 0x7fffd840a3b8 <col:115, col:121> col:121 used x2 'float'
| |-ParmVarDecl 0x7fffd840a430 <col:125, col:131> col:131 used y2 'float'
| |-ParmVarDecl 0x7fffd840a4f0 <col:135, col:141> col:141 used x3 'float'
| |-ParmVarDecl 0x7fffd840a568 <col:145, col:151> col:151 used y3 'float'
| |-ParmVarDecl 0x7fffd840a5e0 <col:155, col:161> col:161 used objspace_flatness_squared 'float'
| |-ParmVarDecl 0x7fffd840a658 <col:188, col:192> col:192 used n 'int'
| `-CompoundStmt 0x7fffd840e210 <line:3519:1, line:3558:1>
|   |-DeclStmt 0x7fffd840aa80 <line:3521:4, col:21>
|   | `-VarDecl 0x7fffd840a978 <col:4, col:19> col:10 used dx0 'float' cinit
|   |   `-BinaryOperator 0x7fffd840aa58 <col:16, col:19> 'float' '-'
|   |     |-ImplicitCastExpr 0x7fffd840aa28 <col:16> 'float' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd840a9d8 <col:16> 'float' lvalue ParmVar 0x7fffd840a2c8 'x1' 'float'
|   |     `-ImplicitCastExpr 0x7fffd840aa40 <col:19> 'float' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd840aa00 <col:19> 'float' lvalue ParmVar 0x7fffd840a1d8 'x0' 'float'
|   |-DeclStmt 0x7fffd840abb8 <line:3522:4, col:21>
|   | `-VarDecl 0x7fffd840aab0 <col:4, col:19> col:10 used dy0 'float' cinit
|   |   `-BinaryOperator 0x7fffd840ab90 <col:16, col:19> 'float' '-'
|   |     |-ImplicitCastExpr 0x7fffd840ab60 <col:16> 'float' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd840ab10 <col:16> 'float' lvalue ParmVar 0x7fffd840a340 'y1' 'float'
|   |     `-ImplicitCastExpr 0x7fffd840ab78 <col:19> 'float' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd840ab38 <col:19> 'float' lvalue ParmVar 0x7fffd840a250 'y0' 'float'
|   |-DeclStmt 0x7fffd840acf0 <line:3523:4, col:21>
|   | `-VarDecl 0x7fffd840abe8 <col:4, col:19> col:10 used dx1 'float' cinit
|   |   `-BinaryOperator 0x7fffd840acc8 <col:16, col:19> 'float' '-'
|   |     |-ImplicitCastExpr 0x7fffd840ac98 <col:16> 'float' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd840ac48 <col:16> 'float' lvalue ParmVar 0x7fffd840a3b8 'x2' 'float'
|   |     `-ImplicitCastExpr 0x7fffd840acb0 <col:19> 'float' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd840ac70 <col:19> 'float' lvalue ParmVar 0x7fffd840a2c8 'x1' 'float'
|   |-DeclStmt 0x7fffd840ae28 <line:3524:4, col:21>
|   | `-VarDecl 0x7fffd840ad20 <col:4, col:19> col:10 used dy1 'float' cinit
|   |   `-BinaryOperator 0x7fffd840ae00 <col:16, col:19> 'float' '-'
|   |     |-ImplicitCastExpr 0x7fffd840add0 <col:16> 'float' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd840ad80 <col:16> 'float' lvalue ParmVar 0x7fffd840a430 'y2' 'float'
|   |     `-ImplicitCastExpr 0x7fffd840ade8 <col:19> 'float' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd840ada8 <col:19> 'float' lvalue ParmVar 0x7fffd840a340 'y1' 'float'
|   |-DeclStmt 0x7fffd840af60 <line:3525:4, col:21>
|   | `-VarDecl 0x7fffd840ae58 <col:4, col:19> col:10 used dx2 'float' cinit
|   |   `-BinaryOperator 0x7fffd840af38 <col:16, col:19> 'float' '-'
|   |     |-ImplicitCastExpr 0x7fffd840af08 <col:16> 'float' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd840aeb8 <col:16> 'float' lvalue ParmVar 0x7fffd840a4f0 'x3' 'float'
|   |     `-ImplicitCastExpr 0x7fffd840af20 <col:19> 'float' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd840aee0 <col:19> 'float' lvalue ParmVar 0x7fffd840a3b8 'x2' 'float'
|   |-DeclStmt 0x7fffd840b098 <line:3526:4, col:21>
|   | `-VarDecl 0x7fffd840af90 <col:4, col:19> col:10 used dy2 'float' cinit
|   |   `-BinaryOperator 0x7fffd840b070 <col:16, col:19> 'float' '-'
|   |     |-ImplicitCastExpr 0x7fffd840b040 <col:16> 'float' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd840aff0 <col:16> 'float' lvalue ParmVar 0x7fffd840a568 'y3' 'float'
|   |     `-ImplicitCastExpr 0x7fffd840b058 <col:19> 'float' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd840b018 <col:19> 'float' lvalue ParmVar 0x7fffd840a430 'y2' 'float'
|   |-DeclStmt 0x7fffd840b1d0 <line:3527:4, col:20>
|   | `-VarDecl 0x7fffd840b0c8 <col:4, col:18> col:10 used dx 'float' cinit
|   |   `-BinaryOperator 0x7fffd840b1a8 <col:15, col:18> 'float' '-'
|   |     |-ImplicitCastExpr 0x7fffd840b178 <col:15> 'float' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd840b128 <col:15> 'float' lvalue ParmVar 0x7fffd840a4f0 'x3' 'float'
|   |     `-ImplicitCastExpr 0x7fffd840b190 <col:18> 'float' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd840b150 <col:18> 'float' lvalue ParmVar 0x7fffd840a1d8 'x0' 'float'
|   |-DeclStmt 0x7fffd840b308 <line:3528:4, col:20>
|   | `-VarDecl 0x7fffd840b200 <col:4, col:18> col:10 used dy 'float' cinit
|   |   `-BinaryOperator 0x7fffd840b2e0 <col:15, col:18> 'float' '-'
|   |     |-ImplicitCastExpr 0x7fffd840b2b0 <col:15> 'float' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd840b260 <col:15> 'float' lvalue ParmVar 0x7fffd840a568 'y3' 'float'
|   |     `-ImplicitCastExpr 0x7fffd840b2c8 <col:18> 'float' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd840b288 <col:18> 'float' lvalue ParmVar 0x7fffd840a250 'y0' 'float'
|   |-DeclStmt 0x7fffd840ba78 <line:3529:4, col:113>
|   | `-VarDecl 0x7fffd840b338 <col:4, col:112> col:10 used longlen 'float' cinit
|   |   `-CStyleCastExpr 0x7fffd840ba50 <col:20, col:112> 'float' <FloatingCast>
|   |     `-ParenExpr 0x7fffd840ba30 <col:28, col:112> 'double'
|   |       `-BinaryOperator 0x7fffd840b9c0 <line:444:31, col:37> 'double' '+'
|   |         |-BinaryOperator 0x7fffd840b798 <col:31, col:37> 'double' '+'
|   |         | |-CallExpr 0x7fffd840b550 <col:31, col:37> 'double'
|   |         | | |-ImplicitCastExpr 0x7fffd840b538 <col:31> 'double (*)(double)' <FunctionToPointerDecay>
|   |         | | | `-DeclRefExpr 0x7fffd840b398 <col:31> 'double (double)' Function 0x7fffd828e9f0 'sqrt' 'double (double)'
|   |         | | `-ImplicitCastExpr 0x7fffd840b580 <line:3529:40, col:52> 'double' <FloatingCast>
|   |         | |   `-BinaryOperator 0x7fffd840b510 <col:40, col:52> 'float' '+'
|   |         | |     |-BinaryOperator 0x7fffd840b440 <col:40, col:44> 'float' '*'
|   |         | |     | |-ImplicitCastExpr 0x7fffd840b410 <col:40> 'float' <LValueToRValue>
|   |         | |     | | `-DeclRefExpr 0x7fffd840b3c0 <col:40> 'float' lvalue Var 0x7fffd840a978 'dx0' 'float'
|   |         | |     | `-ImplicitCastExpr 0x7fffd840b428 <col:44> 'float' <LValueToRValue>
|   |         | |     |   `-DeclRefExpr 0x7fffd840b3e8 <col:44> 'float' lvalue Var 0x7fffd840a978 'dx0' 'float'
|   |         | |     `-BinaryOperator 0x7fffd840b4e8 <col:48, col:52> 'float' '*'
|   |         | |       |-ImplicitCastExpr 0x7fffd840b4b8 <col:48> 'float' <LValueToRValue>
|   |         | |       | `-DeclRefExpr 0x7fffd840b468 <col:48> 'float' lvalue Var 0x7fffd840aab0 'dy0' 'float'
|   |         | |       `-ImplicitCastExpr 0x7fffd840b4d0 <col:52> 'float' <LValueToRValue>
|   |         | |         `-DeclRefExpr 0x7fffd840b490 <col:52> 'float' lvalue Var 0x7fffd840aab0 'dy0' 'float'
|   |         | `-CallExpr 0x7fffd840b750 <line:444:31, col:37> 'double'
|   |         |   |-ImplicitCastExpr 0x7fffd840b738 <col:31> 'double (*)(double)' <FunctionToPointerDecay>
|   |         |   | `-DeclRefExpr 0x7fffd840b598 <col:31> 'double (double)' Function 0x7fffd828e9f0 'sqrt' 'double (double)'
|   |         |   `-ImplicitCastExpr 0x7fffd840b780 <line:3529:68, col:80> 'double' <FloatingCast>
|   |         |     `-BinaryOperator 0x7fffd840b710 <col:68, col:80> 'float' '+'
|   |         |       |-BinaryOperator 0x7fffd840b640 <col:68, col:72> 'float' '*'
|   |         |       | |-ImplicitCastExpr 0x7fffd840b610 <col:68> 'float' <LValueToRValue>
|   |         |       | | `-DeclRefExpr 0x7fffd840b5c0 <col:68> 'float' lvalue Var 0x7fffd840abe8 'dx1' 'float'
|   |         |       | `-ImplicitCastExpr 0x7fffd840b628 <col:72> 'float' <LValueToRValue>
|   |         |       |   `-DeclRefExpr 0x7fffd840b5e8 <col:72> 'float' lvalue Var 0x7fffd840abe8 'dx1' 'float'
|   |         |       `-BinaryOperator 0x7fffd840b6e8 <col:76, col:80> 'float' '*'
|   |         |         |-ImplicitCastExpr 0x7fffd840b6b8 <col:76> 'float' <LValueToRValue>
|   |         |         | `-DeclRefExpr 0x7fffd840b668 <col:76> 'float' lvalue Var 0x7fffd840ad20 'dy1' 'float'
|   |         |         `-ImplicitCastExpr 0x7fffd840b6d0 <col:80> 'float' <LValueToRValue>
|   |         |           `-DeclRefExpr 0x7fffd840b690 <col:80> 'float' lvalue Var 0x7fffd840ad20 'dy1' 'float'
|   |         `-CallExpr 0x7fffd840b978 <line:444:31, col:37> 'double'
|   |           |-ImplicitCastExpr 0x7fffd840b960 <col:31> 'double (*)(double)' <FunctionToPointerDecay>
|   |           | `-DeclRefExpr 0x7fffd840b7c0 <col:31> 'double (double)' Function 0x7fffd828e9f0 'sqrt' 'double (double)'
|   |           `-ImplicitCastExpr 0x7fffd840b9a8 <line:3529:96, col:108> 'double' <FloatingCast>
|   |             `-BinaryOperator 0x7fffd840b938 <col:96, col:108> 'float' '+'
|   |               |-BinaryOperator 0x7fffd840b868 <col:96, col:100> 'float' '*'
|   |               | |-ImplicitCastExpr 0x7fffd840b838 <col:96> 'float' <LValueToRValue>
|   |               | | `-DeclRefExpr 0x7fffd840b7e8 <col:96> 'float' lvalue Var 0x7fffd840ae58 'dx2' 'float'
|   |               | `-ImplicitCastExpr 0x7fffd840b850 <col:100> 'float' <LValueToRValue>
|   |               |   `-DeclRefExpr 0x7fffd840b810 <col:100> 'float' lvalue Var 0x7fffd840ae58 'dx2' 'float'
|   |               `-BinaryOperator 0x7fffd840b910 <col:104, col:108> 'float' '*'
|   |                 |-ImplicitCastExpr 0x7fffd840b8e0 <col:104> 'float' <LValueToRValue>
|   |                 | `-DeclRefExpr 0x7fffd840b890 <col:104> 'float' lvalue Var 0x7fffd840af90 'dy2' 'float'
|   |                 `-ImplicitCastExpr 0x7fffd840b8f8 <col:108> 'float' <LValueToRValue>
|   |                   `-DeclRefExpr 0x7fffd840b8b8 <col:108> 'float' lvalue Var 0x7fffd840af90 'dy2' 'float'
|   |-DeclStmt 0x7fffd840bd48 <line:3530:4, col:52>
|   | `-VarDecl 0x7fffd840baa8 <col:4, line:444:37> line:3530:10 used shortlen 'float' cinit
|   |   `-CStyleCastExpr 0x7fffd840bd20 <col:21, line:444:37> 'float' <FloatingCast>
|   |     `-CallExpr 0x7fffd840bcc0 <col:31, col:37> 'double'
|   |       |-ImplicitCastExpr 0x7fffd840bca8 <col:31> 'double (*)(double)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x7fffd840bb08 <col:31> 'double (double)' Function 0x7fffd828e9f0 'sqrt' 'double (double)'
|   |       `-ImplicitCastExpr 0x7fffd840bcf0 <line:3530:40, col:49> 'double' <FloatingCast>
|   |         `-BinaryOperator 0x7fffd840bc80 <col:40, col:49> 'float' '+'
|   |           |-BinaryOperator 0x7fffd840bbb0 <col:40, col:43> 'float' '*'
|   |           | |-ImplicitCastExpr 0x7fffd840bb80 <col:40> 'float' <LValueToRValue>
|   |           | | `-DeclRefExpr 0x7fffd840bb30 <col:40> 'float' lvalue Var 0x7fffd840b0c8 'dx' 'float'
|   |           | `-ImplicitCastExpr 0x7fffd840bb98 <col:43> 'float' <LValueToRValue>
|   |           |   `-DeclRefExpr 0x7fffd840bb58 <col:43> 'float' lvalue Var 0x7fffd840b0c8 'dx' 'float'
|   |           `-BinaryOperator 0x7fffd840bc58 <col:46, col:49> 'float' '*'
|   |             |-ImplicitCastExpr 0x7fffd840bc28 <col:46> 'float' <LValueToRValue>
|   |             | `-DeclRefExpr 0x7fffd840bbd8 <col:46> 'float' lvalue Var 0x7fffd840b200 'dy' 'float'
|   |             `-ImplicitCastExpr 0x7fffd840bc40 <col:49> 'float' <LValueToRValue>
|   |               `-DeclRefExpr 0x7fffd840bc00 <col:49> 'float' lvalue Var 0x7fffd840b200 'dy' 'float'
|   |-DeclStmt 0x7fffd840bf50 <line:3531:4, col:62>
|   | `-VarDecl 0x7fffd840bd78 <col:4, col:54> col:10 used flatness_squared 'float' cinit
|   |   `-BinaryOperator 0x7fffd840bf28 <col:29, col:54> 'float' '-'
|   |     |-BinaryOperator 0x7fffd840be58 <col:29, col:37> 'float' '*'
|   |     | |-ImplicitCastExpr 0x7fffd840be28 <col:29> 'float' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x7fffd840bdd8 <col:29> 'float' lvalue Var 0x7fffd840b338 'longlen' 'float'
|   |     | `-ImplicitCastExpr 0x7fffd840be40 <col:37> 'float' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fffd840be00 <col:37> 'float' lvalue Var 0x7fffd840b338 'longlen' 'float'
|   |     `-BinaryOperator 0x7fffd840bf00 <col:45, col:54> 'float' '*'
|   |       |-ImplicitCastExpr 0x7fffd840bed0 <col:45> 'float' <LValueToRValue>
|   |       | `-DeclRefExpr 0x7fffd840be80 <col:45> 'float' lvalue Var 0x7fffd840baa8 'shortlen' 'float'
|   |       `-ImplicitCastExpr 0x7fffd840bee8 <col:54> 'float' <LValueToRValue>
|   |         `-DeclRefExpr 0x7fffd840bea8 <col:54> 'float' lvalue Var 0x7fffd840baa8 'shortlen' 'float'
|   |-IfStmt 0x7fffd840c008 <line:3533:4, line:3534:7>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd840bfc8 <line:3533:8, col:12> 'int' '>'
|   | | |-ImplicitCastExpr 0x7fffd840bfb0 <col:8> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd840bf68 <col:8> 'int' lvalue ParmVar 0x7fffd840a658 'n' 'int'
|   | | `-IntegerLiteral 0x7fffd840bf90 <col:12> 'int' 16
|   | |-ReturnStmt 0x7fffd840bff0 <line:3534:7>
|   | `-<<<NULL>>>
|   `-IfStmt 0x7fffd840e1d8 <line:3536:4, line:3557:4>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fffd840c0c0 <line:3536:8, col:27> 'int' '>'
|     | |-ImplicitCastExpr 0x7fffd840c090 <col:8> 'float' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fffd840c040 <col:8> 'float' lvalue Var 0x7fffd840bd78 'flatness_squared' 'float'
|     | `-ImplicitCastExpr 0x7fffd840c0a8 <col:27> 'float' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fffd840c068 <col:27> 'float' lvalue ParmVar 0x7fffd840a5e0 'objspace_flatness_squared' 'float'
|     |-CompoundStmt 0x7fffd840de30 <col:54, line:3554:4>
|     | |-DeclStmt 0x7fffd840c288 <line:3537:7, col:28>
|     | | `-VarDecl 0x7fffd840c100 <col:7, col:27> col:13 used x01 'float' cinit
|     | |   `-BinaryOperator 0x7fffd840c260 <col:19, col:27> 'float' '/'
|     | |     |-ParenExpr 0x7fffd840c208 <col:19, col:25> 'float'
|     | |     | `-BinaryOperator 0x7fffd840c1e0 <col:20, col:23> 'float' '+'
|     | |     |   |-ImplicitCastExpr 0x7fffd840c1b0 <col:20> 'float' <LValueToRValue>
|     | |     |   | `-DeclRefExpr 0x7fffd840c160 <col:20> 'float' lvalue ParmVar 0x7fffd840a1d8 'x0' 'float'
|     | |     |   `-ImplicitCastExpr 0x7fffd840c1c8 <col:23> 'float' <LValueToRValue>
|     | |     |     `-DeclRefExpr 0x7fffd840c188 <col:23> 'float' lvalue ParmVar 0x7fffd840a2c8 'x1' 'float'
|     | |     `-ImplicitCastExpr 0x7fffd840c248 <col:27> 'float' <IntegralToFloating>
|     | |       `-IntegerLiteral 0x7fffd840c228 <col:27> 'int' 2
|     | |-DeclStmt 0x7fffd840c440 <line:3538:7, col:28>
|     | | `-VarDecl 0x7fffd840c2b8 <col:7, col:27> col:13 used y01 'float' cinit
|     | |   `-BinaryOperator 0x7fffd840c418 <col:19, col:27> 'float' '/'
|     | |     |-ParenExpr 0x7fffd840c3c0 <col:19, col:25> 'float'
|     | |     | `-BinaryOperator 0x7fffd840c398 <col:20, col:23> 'float' '+'
|     | |     |   |-ImplicitCastExpr 0x7fffd840c368 <col:20> 'float' <LValueToRValue>
|     | |     |   | `-DeclRefExpr 0x7fffd840c318 <col:20> 'float' lvalue ParmVar 0x7fffd840a250 'y0' 'float'
|     | |     |   `-ImplicitCastExpr 0x7fffd840c380 <col:23> 'float' <LValueToRValue>
|     | |     |     `-DeclRefExpr 0x7fffd840c340 <col:23> 'float' lvalue ParmVar 0x7fffd840a340 'y1' 'float'
|     | |     `-ImplicitCastExpr 0x7fffd840c400 <col:27> 'float' <IntegralToFloating>
|     | |       `-IntegerLiteral 0x7fffd840c3e0 <col:27> 'int' 2
|     | |-DeclStmt 0x7fffd840c628 <line:3539:7, col:28>
|     | | `-VarDecl 0x7fffd840c470 <col:7, col:27> col:13 used x12 'float' cinit
|     | |   `-BinaryOperator 0x7fffd840c600 <col:19, col:27> 'float' '/'
|     | |     |-ParenExpr 0x7fffd840c5a8 <col:19, col:25> 'float'
|     | |     | `-BinaryOperator 0x7fffd840c580 <col:20, col:23> 'float' '+'
|     | |     |   |-ImplicitCastExpr 0x7fffd840c550 <col:20> 'float' <LValueToRValue>
|     | |     |   | `-DeclRefExpr 0x7fffd840c500 <col:20> 'float' lvalue ParmVar 0x7fffd840a2c8 'x1' 'float'
|     | |     |   `-ImplicitCastExpr 0x7fffd840c568 <col:23> 'float' <LValueToRValue>
|     | |     |     `-DeclRefExpr 0x7fffd840c528 <col:23> 'float' lvalue ParmVar 0x7fffd840a3b8 'x2' 'float'
|     | |     `-ImplicitCastExpr 0x7fffd840c5e8 <col:27> 'float' <IntegralToFloating>
|     | |       `-IntegerLiteral 0x7fffd840c5c8 <col:27> 'int' 2
|     | |-DeclStmt 0x7fffd840c7e0 <line:3540:7, col:28>
|     | | `-VarDecl 0x7fffd840c658 <col:7, col:27> col:13 used y12 'float' cinit
|     | |   `-BinaryOperator 0x7fffd840c7b8 <col:19, col:27> 'float' '/'
|     | |     |-ParenExpr 0x7fffd840c760 <col:19, col:25> 'float'
|     | |     | `-BinaryOperator 0x7fffd840c738 <col:20, col:23> 'float' '+'
|     | |     |   |-ImplicitCastExpr 0x7fffd840c708 <col:20> 'float' <LValueToRValue>
|     | |     |   | `-DeclRefExpr 0x7fffd840c6b8 <col:20> 'float' lvalue ParmVar 0x7fffd840a340 'y1' 'float'
|     | |     |   `-ImplicitCastExpr 0x7fffd840c720 <col:23> 'float' <LValueToRValue>
|     | |     |     `-DeclRefExpr 0x7fffd840c6e0 <col:23> 'float' lvalue ParmVar 0x7fffd840a430 'y2' 'float'
|     | |     `-ImplicitCastExpr 0x7fffd840c7a0 <col:27> 'float' <IntegralToFloating>
|     | |       `-IntegerLiteral 0x7fffd840c780 <col:27> 'int' 2
|     | |-DeclStmt 0x7fffd840c998 <line:3541:7, col:28>
|     | | `-VarDecl 0x7fffd840c810 <col:7, col:27> col:13 used x23 'float' cinit
|     | |   `-BinaryOperator 0x7fffd840c970 <col:19, col:27> 'float' '/'
|     | |     |-ParenExpr 0x7fffd840c918 <col:19, col:25> 'float'
|     | |     | `-BinaryOperator 0x7fffd840c8f0 <col:20, col:23> 'float' '+'
|     | |     |   |-ImplicitCastExpr 0x7fffd840c8c0 <col:20> 'float' <LValueToRValue>
|     | |     |   | `-DeclRefExpr 0x7fffd840c870 <col:20> 'float' lvalue ParmVar 0x7fffd840a3b8 'x2' 'float'
|     | |     |   `-ImplicitCastExpr 0x7fffd840c8d8 <col:23> 'float' <LValueToRValue>
|     | |     |     `-DeclRefExpr 0x7fffd840c898 <col:23> 'float' lvalue ParmVar 0x7fffd840a4f0 'x3' 'float'
|     | |     `-ImplicitCastExpr 0x7fffd840c958 <col:27> 'float' <IntegralToFloating>
|     | |       `-IntegerLiteral 0x7fffd840c938 <col:27> 'int' 2
|     | |-DeclStmt 0x7fffd840cb50 <line:3542:7, col:28>
|     | | `-VarDecl 0x7fffd840c9c8 <col:7, col:27> col:13 used y23 'float' cinit
|     | |   `-BinaryOperator 0x7fffd840cb28 <col:19, col:27> 'float' '/'
|     | |     |-ParenExpr 0x7fffd840cad0 <col:19, col:25> 'float'
|     | |     | `-BinaryOperator 0x7fffd840caa8 <col:20, col:23> 'float' '+'
|     | |     |   |-ImplicitCastExpr 0x7fffd840ca78 <col:20> 'float' <LValueToRValue>
|     | |     |   | `-DeclRefExpr 0x7fffd840ca28 <col:20> 'float' lvalue ParmVar 0x7fffd840a430 'y2' 'float'
|     | |     |   `-ImplicitCastExpr 0x7fffd840ca90 <col:23> 'float' <LValueToRValue>
|     | |     |     `-DeclRefExpr 0x7fffd840ca50 <col:23> 'float' lvalue ParmVar 0x7fffd840a568 'y3' 'float'
|     | |     `-ImplicitCastExpr 0x7fffd840cb10 <col:27> 'float' <IntegralToFloating>
|     | |       `-IntegerLiteral 0x7fffd840caf0 <col:27> 'int' 2
|     | |-DeclStmt 0x7fffd840cd08 <line:3544:7, col:29>
|     | | `-VarDecl 0x7fffd840cb80 <col:7, col:28> col:13 used xa 'float' cinit
|     | |   `-BinaryOperator 0x7fffd840cce0 <col:18, col:28> 'float' '/'
|     | |     |-ParenExpr 0x7fffd840cc88 <col:18, col:26> 'float'
|     | |     | `-BinaryOperator 0x7fffd840cc60 <col:19, col:23> 'float' '+'
|     | |     |   |-ImplicitCastExpr 0x7fffd840cc30 <col:19> 'float' <LValueToRValue>
|     | |     |   | `-DeclRefExpr 0x7fffd840cbe0 <col:19> 'float' lvalue Var 0x7fffd840c100 'x01' 'float'
|     | |     |   `-ImplicitCastExpr 0x7fffd840cc48 <col:23> 'float' <LValueToRValue>
|     | |     |     `-DeclRefExpr 0x7fffd840cc08 <col:23> 'float' lvalue Var 0x7fffd840c470 'x12' 'float'
|     | |     `-ImplicitCastExpr 0x7fffd840ccc8 <col:28> 'float' <IntegralToFloating>
|     | |       `-IntegerLiteral 0x7fffd840cca8 <col:28> 'int' 2
|     | |-DeclStmt 0x7fffd840cec0 <line:3545:7, col:29>
|     | | `-VarDecl 0x7fffd840cd38 <col:7, col:28> col:13 used ya 'float' cinit
|     | |   `-BinaryOperator 0x7fffd840ce98 <col:18, col:28> 'float' '/'
|     | |     |-ParenExpr 0x7fffd840ce40 <col:18, col:26> 'float'
|     | |     | `-BinaryOperator 0x7fffd840ce18 <col:19, col:23> 'float' '+'
|     | |     |   |-ImplicitCastExpr 0x7fffd840cde8 <col:19> 'float' <LValueToRValue>
|     | |     |   | `-DeclRefExpr 0x7fffd840cd98 <col:19> 'float' lvalue Var 0x7fffd840c2b8 'y01' 'float'
|     | |     |   `-ImplicitCastExpr 0x7fffd840ce00 <col:23> 'float' <LValueToRValue>
|     | |     |     `-DeclRefExpr 0x7fffd840cdc0 <col:23> 'float' lvalue Var 0x7fffd840c658 'y12' 'float'
|     | |     `-ImplicitCastExpr 0x7fffd840ce80 <col:28> 'float' <IntegralToFloating>
|     | |       `-IntegerLiteral 0x7fffd840ce60 <col:28> 'int' 2
|     | |-DeclStmt 0x7fffd840d078 <line:3546:7, col:29>
|     | | `-VarDecl 0x7fffd840cef0 <col:7, col:28> col:13 used xb 'float' cinit
|     | |   `-BinaryOperator 0x7fffd840d050 <col:18, col:28> 'float' '/'
|     | |     |-ParenExpr 0x7fffd840cff8 <col:18, col:26> 'float'
|     | |     | `-BinaryOperator 0x7fffd840cfd0 <col:19, col:23> 'float' '+'
|     | |     |   |-ImplicitCastExpr 0x7fffd840cfa0 <col:19> 'float' <LValueToRValue>
|     | |     |   | `-DeclRefExpr 0x7fffd840cf50 <col:19> 'float' lvalue Var 0x7fffd840c470 'x12' 'float'
|     | |     |   `-ImplicitCastExpr 0x7fffd840cfb8 <col:23> 'float' <LValueToRValue>
|     | |     |     `-DeclRefExpr 0x7fffd840cf78 <col:23> 'float' lvalue Var 0x7fffd840c810 'x23' 'float'
|     | |     `-ImplicitCastExpr 0x7fffd840d038 <col:28> 'float' <IntegralToFloating>
|     | |       `-IntegerLiteral 0x7fffd840d018 <col:28> 'int' 2
|     | |-DeclStmt 0x7fffd840d230 <line:3547:7, col:29>
|     | | `-VarDecl 0x7fffd840d0a8 <col:7, col:28> col:13 used yb 'float' cinit
|     | |   `-BinaryOperator 0x7fffd840d208 <col:18, col:28> 'float' '/'
|     | |     |-ParenExpr 0x7fffd840d1b0 <col:18, col:26> 'float'
|     | |     | `-BinaryOperator 0x7fffd840d188 <col:19, col:23> 'float' '+'
|     | |     |   |-ImplicitCastExpr 0x7fffd840d158 <col:19> 'float' <LValueToRValue>
|     | |     |   | `-DeclRefExpr 0x7fffd840d108 <col:19> 'float' lvalue Var 0x7fffd840c658 'y12' 'float'
|     | |     |   `-ImplicitCastExpr 0x7fffd840d170 <col:23> 'float' <LValueToRValue>
|     | |     |     `-DeclRefExpr 0x7fffd840d130 <col:23> 'float' lvalue Var 0x7fffd840c9c8 'y23' 'float'
|     | |     `-ImplicitCastExpr 0x7fffd840d1f0 <col:28> 'float' <IntegralToFloating>
|     | |       `-IntegerLiteral 0x7fffd840d1d0 <col:28> 'int' 2
|     | |-DeclStmt 0x7fffd840d3e8 <line:3549:7, col:27>
|     | | `-VarDecl 0x7fffd840d260 <col:7, col:26> col:13 used mx 'float' cinit
|     | |   `-BinaryOperator 0x7fffd840d3c0 <col:18, col:26> 'float' '/'
|     | |     |-ParenExpr 0x7fffd840d368 <col:18, col:24> 'float'
|     | |     | `-BinaryOperator 0x7fffd840d340 <col:19, col:22> 'float' '+'
|     | |     |   |-ImplicitCastExpr 0x7fffd840d310 <col:19> 'float' <LValueToRValue>
|     | |     |   | `-DeclRefExpr 0x7fffd840d2c0 <col:19> 'float' lvalue Var 0x7fffd840cb80 'xa' 'float'
|     | |     |   `-ImplicitCastExpr 0x7fffd840d328 <col:22> 'float' <LValueToRValue>
|     | |     |     `-DeclRefExpr 0x7fffd840d2e8 <col:22> 'float' lvalue Var 0x7fffd840cef0 'xb' 'float'
|     | |     `-ImplicitCastExpr 0x7fffd840d3a8 <col:26> 'float' <IntegralToFloating>
|     | |       `-IntegerLiteral 0x7fffd840d388 <col:26> 'int' 2
|     | |-DeclStmt 0x7fffd840d5a0 <line:3550:7, col:27>
|     | | `-VarDecl 0x7fffd840d418 <col:7, col:26> col:13 used my 'float' cinit
|     | |   `-BinaryOperator 0x7fffd840d578 <col:18, col:26> 'float' '/'
|     | |     |-ParenExpr 0x7fffd840d520 <col:18, col:24> 'float'
|     | |     | `-BinaryOperator 0x7fffd840d4f8 <col:19, col:22> 'float' '+'
|     | |     |   |-ImplicitCastExpr 0x7fffd840d4c8 <col:19> 'float' <LValueToRValue>
|     | |     |   | `-DeclRefExpr 0x7fffd840d478 <col:19> 'float' lvalue Var 0x7fffd840cd38 'ya' 'float'
|     | |     |   `-ImplicitCastExpr 0x7fffd840d4e0 <col:22> 'float' <LValueToRValue>
|     | |     |     `-DeclRefExpr 0x7fffd840d4a0 <col:22> 'float' lvalue Var 0x7fffd840d0a8 'yb' 'float'
|     | |     `-ImplicitCastExpr 0x7fffd840d560 <col:26> 'float' <IntegralToFloating>
|     | |       `-IntegerLiteral 0x7fffd840d540 <col:26> 'int' 2
|     | |-CallExpr 0x7fffd840d890 <line:3552:7, col:109> 'void'
|     | | |-ImplicitCastExpr 0x7fffd840d878 <col:7> 'void (*)(stbtt__point *, int *, float, float, float, float, float, float, float, float, float, int)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x7fffd840d5b8 <col:7> 'void (stbtt__point *, int *, float, float, float, float, float, float, float, float, float, int)' Function 0x7fffd840a860 'stbtt__tesselate_cubic' 'void (stbtt__point *, int *, float, float, float, float, float, float, float, float, float, int)'
|     | | |-ImplicitCastExpr 0x7fffd840d918 <col:30> 'stbtt__point *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd840d5e0 <col:30> 'stbtt__point *' lvalue ParmVar 0x7fffd840a0e8 'points' 'stbtt__point *'
|     | | |-ImplicitCastExpr 0x7fffd840d930 <col:38> 'int *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd840d608 <col:38> 'int *' lvalue ParmVar 0x7fffd840a160 'num_points' 'int *'
|     | | |-ImplicitCastExpr 0x7fffd840d948 <col:50> 'float' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd840d630 <col:50> 'float' lvalue ParmVar 0x7fffd840a1d8 'x0' 'float'
|     | | |-ImplicitCastExpr 0x7fffd840d960 <col:53> 'float' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd840d658 <col:53> 'float' lvalue ParmVar 0x7fffd840a250 'y0' 'float'
|     | | |-ImplicitCastExpr 0x7fffd840d978 <col:57> 'float' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd840d680 <col:57> 'float' lvalue Var 0x7fffd840c100 'x01' 'float'
|     | | |-ImplicitCastExpr 0x7fffd840d990 <col:61> 'float' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd840d6a8 <col:61> 'float' lvalue Var 0x7fffd840c2b8 'y01' 'float'
|     | | |-ImplicitCastExpr 0x7fffd840d9a8 <col:66> 'float' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd840d6d0 <col:66> 'float' lvalue Var 0x7fffd840cb80 'xa' 'float'
|     | | |-ImplicitCastExpr 0x7fffd840d9c0 <col:69> 'float' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd840d6f8 <col:69> 'float' lvalue Var 0x7fffd840cd38 'ya' 'float'
|     | | |-ImplicitCastExpr 0x7fffd840d9d8 <col:73> 'float' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd840d720 <col:73> 'float' lvalue Var 0x7fffd840d260 'mx' 'float'
|     | | |-ImplicitCastExpr 0x7fffd840d9f0 <col:76> 'float' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd840d748 <col:76> 'float' lvalue Var 0x7fffd840d418 'my' 'float'
|     | | |-ImplicitCastExpr 0x7fffd840da08 <col:80> 'float' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd840d770 <col:80> 'float' lvalue ParmVar 0x7fffd840a5e0 'objspace_flatness_squared' 'float'
|     | | `-BinaryOperator 0x7fffd840d7f8 <col:106, col:108> 'int' '+'
|     | |   |-ImplicitCastExpr 0x7fffd840d7e0 <col:106> 'int' <LValueToRValue>
|     | |   | `-DeclRefExpr 0x7fffd840d798 <col:106> 'int' lvalue ParmVar 0x7fffd840a658 'n' 'int'
|     | |   `-IntegerLiteral 0x7fffd840d7c0 <col:108> 'int' 1
|     | `-CallExpr 0x7fffd840dca0 <line:3553:7, col:109> 'void'
|     |   |-ImplicitCastExpr 0x7fffd840dc88 <col:7> 'void (*)(stbtt__point *, int *, float, float, float, float, float, float, float, float, float, int)' <FunctionToPointerDecay>
|     |   | `-DeclRefExpr 0x7fffd840da20 <col:7> 'void (stbtt__point *, int *, float, float, float, float, float, float, float, float, float, int)' Function 0x7fffd840a860 'stbtt__tesselate_cubic' 'void (stbtt__point *, int *, float, float, float, float, float, float, float, float, float, int)'
|     |   |-ImplicitCastExpr 0x7fffd840dd28 <col:30> 'stbtt__point *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x7fffd840da48 <col:30> 'stbtt__point *' lvalue ParmVar 0x7fffd840a0e8 'points' 'stbtt__point *'
|     |   |-ImplicitCastExpr 0x7fffd840dd40 <col:38> 'int *' <LValueToRValue>
|     |   | `-DeclRefExpr 0x7fffd840da70 <col:38> 'int *' lvalue ParmVar 0x7fffd840a160 'num_points' 'int *'
|     |   |-ImplicitCastExpr 0x7fffd840dd58 <col:50> 'float' <LValueToRValue>
|     |   | `-DeclRefExpr 0x7fffd840da98 <col:50> 'float' lvalue Var 0x7fffd840d260 'mx' 'float'
|     |   |-ImplicitCastExpr 0x7fffd840dd70 <col:53> 'float' <LValueToRValue>
|     |   | `-DeclRefExpr 0x7fffd840dac0 <col:53> 'float' lvalue Var 0x7fffd840d418 'my' 'float'
|     |   |-ImplicitCastExpr 0x7fffd840dd88 <col:57> 'float' <LValueToRValue>
|     |   | `-DeclRefExpr 0x7fffd840dae8 <col:57> 'float' lvalue Var 0x7fffd840cef0 'xb' 'float'
|     |   |-ImplicitCastExpr 0x7fffd840dda0 <col:60> 'float' <LValueToRValue>
|     |   | `-DeclRefExpr 0x7fffd840db10 <col:60> 'float' lvalue Var 0x7fffd840d0a8 'yb' 'float'
|     |   |-ImplicitCastExpr 0x7fffd840ddb8 <col:64> 'float' <LValueToRValue>
|     |   | `-DeclRefExpr 0x7fffd840db38 <col:64> 'float' lvalue Var 0x7fffd840c810 'x23' 'float'
|     |   |-ImplicitCastExpr 0x7fffd840ddd0 <col:68> 'float' <LValueToRValue>
|     |   | `-DeclRefExpr 0x7fffd840db60 <col:68> 'float' lvalue Var 0x7fffd840c9c8 'y23' 'float'
|     |   |-ImplicitCastExpr 0x7fffd840dde8 <col:73> 'float' <LValueToRValue>
|     |   | `-DeclRefExpr 0x7fffd840db88 <col:73> 'float' lvalue ParmVar 0x7fffd840a4f0 'x3' 'float'
|     |   |-ImplicitCastExpr 0x7fffd840de00 <col:76> 'float' <LValueToRValue>
|     |   | `-DeclRefExpr 0x7fffd840dbb0 <col:76> 'float' lvalue ParmVar 0x7fffd840a568 'y3' 'float'
|     |   |-ImplicitCastExpr 0x7fffd840de18 <col:80> 'float' <LValueToRValue>
|     |   | `-DeclRefExpr 0x7fffd840dbd8 <col:80> 'float' lvalue ParmVar 0x7fffd840a5e0 'objspace_flatness_squared' 'float'
|     |   `-BinaryOperator 0x7fffd840dc60 <col:106, col:108> 'int' '+'
|     |     |-ImplicitCastExpr 0x7fffd840dc48 <col:106> 'int' <LValueToRValue>
|     |     | `-DeclRefExpr 0x7fffd840dc00 <col:106> 'int' lvalue ParmVar 0x7fffd840a658 'n' 'int'
|     |     `-IntegerLiteral 0x7fffd840dc28 <col:108> 'int' 1
|     `-CompoundStmt 0x7fffd840e1b8 <line:3554:11, line:3557:4>
|       |-CallExpr 0x7fffd840dfc8 <line:3555:7, col:49> 'void'
|       | |-ImplicitCastExpr 0x7fffd840dfb0 <col:7> 'void (*)(stbtt__point *, int, float, float)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x7fffd840deb0 <col:7> 'void (stbtt__point *, int, float, float)' Function 0x7fffd8407a50 'stbtt__add_point' 'void (stbtt__point *, int, float, float)'
|       | |-ImplicitCastExpr 0x7fffd840e010 <col:24> 'stbtt__point *' <LValueToRValue>
|       | | `-DeclRefExpr 0x7fffd840ded8 <col:24> 'stbtt__point *' lvalue ParmVar 0x7fffd840a0e8 'points' 'stbtt__point *'
|       | |-ImplicitCastExpr 0x7fffd840e028 <col:32, col:33> 'int' <LValueToRValue>
|       | | `-UnaryOperator 0x7fffd840df40 <col:32, col:33> 'int' lvalue prefix '*'
|       | |   `-ImplicitCastExpr 0x7fffd840df28 <col:33> 'int *' <LValueToRValue>
|       | |     `-DeclRefExpr 0x7fffd840df00 <col:33> 'int *' lvalue ParmVar 0x7fffd840a160 'num_points' 'int *'
|       | |-ImplicitCastExpr 0x7fffd840e040 <col:44> 'float' <LValueToRValue>
|       | | `-DeclRefExpr 0x7fffd840df60 <col:44> 'float' lvalue ParmVar 0x7fffd840a4f0 'x3' 'float'
|       | `-ImplicitCastExpr 0x7fffd840e058 <col:47> 'float' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fffd840df88 <col:47> 'float' lvalue ParmVar 0x7fffd840a568 'y3' 'float'
|       `-BinaryOperator 0x7fffd840e190 <line:3556:7, col:33> 'int' '='
|         |-UnaryOperator 0x7fffd840e0b0 <col:7, col:8> 'int' lvalue prefix '*'
|         | `-ImplicitCastExpr 0x7fffd840e098 <col:8> 'int *' <LValueToRValue>
|         |   `-DeclRefExpr 0x7fffd840e070 <col:8> 'int *' lvalue ParmVar 0x7fffd840a160 'num_points' 'int *'
|         `-BinaryOperator 0x7fffd840e168 <col:21, col:33> 'int' '+'
|           |-ImplicitCastExpr 0x7fffd840e150 <col:21, col:22> 'int' <LValueToRValue>
|           | `-UnaryOperator 0x7fffd840e110 <col:21, col:22> 'int' lvalue prefix '*'
|           |   `-ImplicitCastExpr 0x7fffd840e0f8 <col:22> 'int *' <LValueToRValue>
|           |     `-DeclRefExpr 0x7fffd840e0d0 <col:22> 'int *' lvalue ParmVar 0x7fffd840a160 'num_points' 'int *'
|           `-IntegerLiteral 0x7fffd840e130 <col:33> 'int' 1
|-FunctionDecl 0x7fffd840e700 <line:3561:1, line:3636:1> line:3561:22 used stbtt_FlattenCurves 'stbtt__point *(stbtt_vertex *, int, float, int **, int *, void *)' static
| |-ParmVarDecl 0x7fffd840e298 <col:42, col:56> col:56 used vertices 'stbtt_vertex *'
| |-ParmVarDecl 0x7fffd840e310 <col:66, col:70> col:70 used num_verts 'int'
| |-ParmVarDecl 0x7fffd840e388 <col:81, col:87> col:87 used objspace_flatness 'float'
| |-ParmVarDecl 0x7fffd840e438 <col:106, col:112> col:112 used contour_lengths 'int **'
| |-ParmVarDecl 0x7fffd840e510 <col:129, col:134> col:134 used num_contours 'int *'
| |-ParmVarDecl 0x7fffd840e588 <col:148, col:154> col:154 used userdata 'void *'
| `-CompoundStmt 0x7fffd8413120 <line:3562:1, line:3636:1>
|   |-DeclStmt 0x7fffd840e878 <line:3563:4, col:26>
|   | `-VarDecl 0x7fffd840e7e0 <col:4, col:25> col:18 used points 'stbtt__point *' cinit
|   |   `-ImplicitCastExpr 0x7fffd840e860 <col:25> 'stbtt__point *' <NullToPointer>
|   |     `-IntegerLiteral 0x7fffd840e840 <col:25> 'int' 0
|   |-DeclStmt 0x7fffd840e928 <line:3564:4, col:20>
|   | `-VarDecl 0x7fffd840e8a8 <col:4, col:19> col:8 used num_points 'int' cinit
|   |   `-IntegerLiteral 0x7fffd840e908 <col:19> 'int' 0
|   |-DeclStmt 0x7fffd840ea60 <line:3566:4, col:75>
|   | `-VarDecl 0x7fffd840e958 <col:4, col:58> col:10 used objspace_flatness_squared 'float' cinit
|   |   `-BinaryOperator 0x7fffd840ea38 <col:38, col:58> 'float' '*'
|   |     |-ImplicitCastExpr 0x7fffd840ea08 <col:38> 'float' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd840e9b8 <col:38> 'float' lvalue ParmVar 0x7fffd840e388 'objspace_flatness' 'float'
|   |     `-ImplicitCastExpr 0x7fffd840ea20 <col:58> 'float' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd840e9e0 <col:58> 'float' lvalue ParmVar 0x7fffd840e388 'objspace_flatness' 'float'
|   |-DeclStmt 0x7fffd840ecc0 <line:3567:4, col:27>
|   | |-VarDecl 0x7fffd840ea90 <col:4, col:8> col:8 used i 'int'
|   | |-VarDecl 0x7fffd840eb08 <col:4, col:12> col:10 used n 'int' cinit
|   | | `-IntegerLiteral 0x7fffd840eb68 <col:12> 'int' 0
|   | |-VarDecl 0x7fffd840eba0 <col:4, col:20> col:14 used start 'int' cinit
|   | | `-IntegerLiteral 0x7fffd840ec00 <col:20> 'int' 0
|   | `-VarDecl 0x7fffd840ec38 <col:4, col:23> col:23 used pass 'int'
|   |-ForStmt 0x7fffd840f018 <line:3570:4, line:3572:12>
|   | |-BinaryOperator 0x7fffd840ed20 <line:3570:9, col:11> 'int' '='
|   | | |-DeclRefExpr 0x7fffd840ecd8 <col:9> 'int' lvalue Var 0x7fffd840ea90 'i' 'int'
|   | | `-IntegerLiteral 0x7fffd840ed00 <col:11> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd840edc8 <col:14, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd840ed98 <col:14> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd840ed48 <col:14> 'int' lvalue Var 0x7fffd840ea90 'i' 'int'
|   | | `-ImplicitCastExpr 0x7fffd840edb0 <col:18> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd840ed70 <col:18> 'int' lvalue ParmVar 0x7fffd840e310 'num_verts' 'int'
|   | |-UnaryOperator 0x7fffd840ee18 <col:29, col:31> 'int' prefix '++'
|   | | `-DeclRefExpr 0x7fffd840edf0 <col:31> 'int' lvalue Var 0x7fffd840ea90 'i' 'int'
|   | `-IfStmt 0x7fffd840efe0 <line:3571:7, line:3572:12>
|   |   |-<<<NULL>>>
|   |   |-<<<NULL>>>
|   |   |-BinaryOperator 0x7fffd840ef70 <line:3571:11, col:31> 'int' '=='
|   |   | |-ImplicitCastExpr 0x7fffd840ef58 <col:11, col:23> 'int' <IntegralCast>
|   |   | | `-ImplicitCastExpr 0x7fffd840ef40 <col:11, col:23> 'unsigned char' <LValueToRValue>
|   |   | |   `-MemberExpr 0x7fffd840eee0 <col:11, col:23> 'unsigned char' lvalue .type 0x7fffd8351a18
|   |   | |     `-ArraySubscriptExpr 0x7fffd840eeb8 <col:11, col:21> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   | |       |-ImplicitCastExpr 0x7fffd840ee88 <col:11> 'stbtt_vertex *' <LValueToRValue>
|   |   | |       | `-DeclRefExpr 0x7fffd840ee38 <col:11> 'stbtt_vertex *' lvalue ParmVar 0x7fffd840e298 'vertices' 'stbtt_vertex *'
|   |   | |       `-ImplicitCastExpr 0x7fffd840eea0 <col:20> 'int' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x7fffd840ee60 <col:20> 'int' lvalue Var 0x7fffd840ea90 'i' 'int'
|   |   | `-DeclRefExpr 0x7fffd840ef18 <col:31> 'int' EnumConstant 0x7fffd83515f0 'STBTT_vmove' 'int'
|   |   |-UnaryOperator 0x7fffd840efc0 <line:3572:10, col:12> 'int' prefix '++'
|   |   | `-DeclRefExpr 0x7fffd840ef98 <col:12> 'int' lvalue Var 0x7fffd840eb08 'n' 'int'
|   |   `-<<<NULL>>>
|   |-BinaryOperator 0x7fffd840f0f0 <line:3574:4, col:20> 'int' '='
|   | |-UnaryOperator 0x7fffd840f090 <col:4, col:5> 'int' lvalue prefix '*'
|   | | `-ImplicitCastExpr 0x7fffd840f078 <col:5> 'int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd840f050 <col:5> 'int *' lvalue ParmVar 0x7fffd840e510 'num_contours' 'int *'
|   | `-ImplicitCastExpr 0x7fffd840f0d8 <col:20> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd840f0b0 <col:20> 'int' lvalue Var 0x7fffd840eb08 'n' 'int'
|   |-IfStmt 0x7fffd840f1f0 <line:3575:4, col:23>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd840f178 <col:8, col:13> 'int' '=='
|   | | |-ImplicitCastExpr 0x7fffd840f160 <col:8> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd840f118 <col:8> 'int' lvalue Var 0x7fffd840eb08 'n' 'int'
|   | | `-IntegerLiteral 0x7fffd840f140 <col:13> 'int' 0
|   | |-ReturnStmt 0x7fffd840f1d8 <col:16, col:23>
|   | | `-ImplicitCastExpr 0x7fffd840f1c0 <col:23> 'stbtt__point *' <NullToPointer>
|   | |   `-IntegerLiteral 0x7fffd840f1a0 <col:23> 'int' 0
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x7fffd840f5d8 <line:3577:4, line:467:51> 'int *' '='
|   | |-UnaryOperator 0x7fffd840f268 <line:3577:4, col:5> 'int *' lvalue prefix '*'
|   | | `-ImplicitCastExpr 0x7fffd840f250 <col:5> 'int **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd840f228 <col:5> 'int **' lvalue ParmVar 0x7fffd840e438 'contour_lengths' 'int **'
|   | `-CStyleCastExpr 0x7fffd840f5b0 <col:23, line:467:51> 'int *' <BitCast>
|   |   `-ParenExpr 0x7fffd840f590 <col:31, col:51> 'void *'
|   |     `-BinaryOperator 0x7fffd840f568 <col:32, col:50> 'void *' ','
|   |       |-CStyleCastExpr 0x7fffd840f328 <col:32, col:40> 'void' <ToVoid>
|   |       | `-ImplicitCastExpr 0x7fffd840f310 <col:38, col:40> 'void *' <LValueToRValue>
|   |       |   `-ParenExpr 0x7fffd840f2f0 <col:38, col:40> 'void *' lvalue
|   |       |     `-DeclRefExpr 0x7fffd840f288 <line:3577:75> 'void *' lvalue ParmVar 0x7fffd840e588 'userdata' 'void *'
|   |       `-CallExpr 0x7fffd840f4e8 <line:467:42, col:50> 'void *'
|   |         |-ImplicitCastExpr 0x7fffd840f4d0 <col:42> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x7fffd840f350 <col:42> 'void *(unsigned long)' Function 0x7fffd831b4b0 'malloc' 'void *(unsigned long)'
|   |         `-BinaryOperator 0x7fffd840f4a8 <line:3577:44, col:72> 'unsigned long' '*'
|   |           |-UnaryExprOrTypeTraitExpr 0x7fffd840f430 <col:44, col:68> 'unsigned long' sizeof
|   |           | `-ParenExpr 0x7fffd840f410 <col:50, col:68> 'int' lvalue
|   |           |   `-UnaryOperator 0x7fffd840f3f0 <col:51, col:53> 'int' lvalue prefix '*'
|   |           |     `-ImplicitCastExpr 0x7fffd840f3d8 <col:52, col:53> 'int *' <LValueToRValue>
|   |           |       `-UnaryOperator 0x7fffd840f3b8 <col:52, col:53> 'int *' lvalue prefix '*'
|   |           |         `-ImplicitCastExpr 0x7fffd840f3a0 <col:53> 'int **' <LValueToRValue>
|   |           |           `-DeclRefExpr 0x7fffd840f378 <col:53> 'int **' lvalue ParmVar 0x7fffd840e438 'contour_lengths' 'int **'
|   |           `-ImplicitCastExpr 0x7fffd840f490 <col:72> 'unsigned long' <IntegralCast>
|   |             `-ImplicitCastExpr 0x7fffd840f478 <col:72> 'int' <LValueToRValue>
|   |               `-DeclRefExpr 0x7fffd840f450 <col:72> 'int' lvalue Var 0x7fffd840eb08 'n' 'int'
|   |-IfStmt 0x7fffd840f7f0 <line:3579:4, line:3582:4>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd840f6b0 <line:3579:8, col:28> 'int' '=='
|   | | |-ImplicitCastExpr 0x7fffd840f680 <col:8, col:9> 'int *' <LValueToRValue>
|   | | | `-UnaryOperator 0x7fffd840f640 <col:8, col:9> 'int *' lvalue prefix '*'
|   | | |   `-ImplicitCastExpr 0x7fffd840f628 <col:9> 'int **' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x7fffd840f600 <col:9> 'int **' lvalue ParmVar 0x7fffd840e438 'contour_lengths' 'int **'
|   | | `-ImplicitCastExpr 0x7fffd840f698 <col:28> 'int *' <NullToPointer>
|   | |   `-IntegerLiteral 0x7fffd840f660 <col:28> 'int' 0
|   | |-CompoundStmt 0x7fffd840f7d0 <col:31, line:3582:4>
|   | | |-BinaryOperator 0x7fffd840f758 <line:3580:7, col:23> 'int' '='
|   | | | |-UnaryOperator 0x7fffd840f718 <col:7, col:8> 'int' lvalue prefix '*'
|   | | | | `-ImplicitCastExpr 0x7fffd840f700 <col:8> 'int *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x7fffd840f6d8 <col:8> 'int *' lvalue ParmVar 0x7fffd840e510 'num_contours' 'int *'
|   | | | `-IntegerLiteral 0x7fffd840f738 <col:23> 'int' 0
|   | | `-ReturnStmt 0x7fffd840f7b8 <line:3581:7, col:14>
|   | |   `-ImplicitCastExpr 0x7fffd840f7a0 <col:14> 'stbtt__point *' <NullToPointer>
|   | |     `-IntegerLiteral 0x7fffd840f780 <col:14> 'int' 0
|   | `-<<<NULL>>>
|   |-ForStmt 0x7fffd8412a78 <line:3585:4, line:3627:4>
|   | |-BinaryOperator 0x7fffd840f870 <line:3585:9, col:14> 'int' '='
|   | | |-DeclRefExpr 0x7fffd840f828 <col:9> 'int' lvalue Var 0x7fffd840ec38 'pass' 'int'
|   | | `-IntegerLiteral 0x7fffd840f850 <col:14> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd840f8f8 <col:17, col:24> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd840f8e0 <col:17> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd840f898 <col:17> 'int' lvalue Var 0x7fffd840ec38 'pass' 'int'
|   | | `-IntegerLiteral 0x7fffd840f8c0 <col:24> 'int' 2
|   | |-UnaryOperator 0x7fffd840f948 <col:27, col:29> 'int' prefix '++'
|   | | `-DeclRefExpr 0x7fffd840f920 <col:29> 'int' lvalue Var 0x7fffd840ec38 'pass' 'int'
|   | `-CompoundStmt 0x7fffd8412a38 <col:35, line:3627:4>
|   |   |-DeclStmt 0x7fffd840fae0 <line:3586:7, col:20>
|   |   | |-VarDecl 0x7fffd840f980 <col:7, col:15> col:13 used x 'float' cinit
|   |   | | `-ImplicitCastExpr 0x7fffd840fa00 <col:15> 'float' <IntegralToFloating>
|   |   | |   `-IntegerLiteral 0x7fffd840f9e0 <col:15> 'int' 0
|   |   | `-VarDecl 0x7fffd840fa30 <col:7, col:19> col:17 used y 'float' cinit
|   |   |   `-ImplicitCastExpr 0x7fffd840fab0 <col:19> 'float' <IntegralToFloating>
|   |   |     `-IntegerLiteral 0x7fffd840fa90 <col:19> 'int' 0
|   |   |-IfStmt 0x7fffd84100c0 <line:3587:7, line:3590:7>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x7fffd840fb58 <line:3587:11, col:19> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x7fffd840fb40 <col:11> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x7fffd840faf8 <col:11> 'int' lvalue Var 0x7fffd840ec38 'pass' 'int'
|   |   | | `-IntegerLiteral 0x7fffd840fb20 <col:19> 'int' 1
|   |   | |-CompoundStmt 0x7fffd84100a0 <col:22, line:3590:7>
|   |   | | |-BinaryOperator 0x7fffd840fee0 <line:3588:10, line:467:51> 'stbtt__point *' '='
|   |   | | | |-DeclRefExpr 0x7fffd840fb80 <line:3588:10> 'stbtt__point *' lvalue Var 0x7fffd840e7e0 'points' 'stbtt__point *'
|   |   | | | `-CStyleCastExpr 0x7fffd840feb8 <col:19, line:467:51> 'stbtt__point *' <BitCast>
|   |   | | |   `-ParenExpr 0x7fffd840fe98 <col:31, col:51> 'void *'
|   |   | | |     `-BinaryOperator 0x7fffd840fe70 <col:32, col:50> 'void *' ','
|   |   | | |       |-CStyleCastExpr 0x7fffd840fc48 <col:32, col:40> 'void' <ToVoid>
|   |   | | |       | `-ImplicitCastExpr 0x7fffd840fc30 <col:38, col:40> 'void *' <LValueToRValue>
|   |   | | |       |   `-ParenExpr 0x7fffd840fc10 <col:38, col:40> 'void *' lvalue
|   |   | | |       |     `-DeclRefExpr 0x7fffd840fba8 <line:3588:81> 'void *' lvalue ParmVar 0x7fffd840e588 'userdata' 'void *'
|   |   | | |       `-CallExpr 0x7fffd840fdf8 <line:467:42, col:50> 'void *'
|   |   | | |         |-ImplicitCastExpr 0x7fffd840fde0 <col:42> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|   |   | | |         | `-DeclRefExpr 0x7fffd840fc70 <col:42> 'void *(unsigned long)' Function 0x7fffd831b4b0 'malloc' 'void *(unsigned long)'
|   |   | | |         `-BinaryOperator 0x7fffd840fdb8 <line:3588:49, col:78> 'unsigned long' '*'
|   |   | | |           |-ImplicitCastExpr 0x7fffd840fda0 <col:49> 'unsigned long' <IntegralCast>
|   |   | | |           | `-ImplicitCastExpr 0x7fffd840fd88 <col:49> 'int' <LValueToRValue>
|   |   | | |           |   `-DeclRefExpr 0x7fffd840fc98 <col:49> 'int' lvalue Var 0x7fffd840e8a8 'num_points' 'int'
|   |   | | |           `-UnaryExprOrTypeTraitExpr 0x7fffd840fd68 <col:62, col:78> 'unsigned long' sizeof
|   |   | | |             `-ParenExpr 0x7fffd840fd48 <col:68, col:78> 'stbtt__point':'stbtt__point' lvalue
|   |   | | |               `-ArraySubscriptExpr 0x7fffd840fd20 <col:69, col:77> 'stbtt__point':'stbtt__point' lvalue
|   |   | | |                 |-ImplicitCastExpr 0x7fffd840fd08 <col:69> 'stbtt__point *' <LValueToRValue>
|   |   | | |                 | `-DeclRefExpr 0x7fffd840fcc0 <col:69> 'stbtt__point *' lvalue Var 0x7fffd840e7e0 'points' 'stbtt__point *'
|   |   | | |                 `-IntegerLiteral 0x7fffd840fce8 <col:76> 'int' 0
|   |   | | `-IfStmt 0x7fffd8410068 <line:3589:10, col:35>
|   |   | |   |-<<<NULL>>>
|   |   | |   |-<<<NULL>>>
|   |   | |   |-BinaryOperator 0x7fffd840ffe0 <col:14, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25> 'int' '=='
|   |   | |   | |-ImplicitCastExpr 0x7fffd840ffb0 <././stb/stb_truetype.h:3589:14> 'stbtt__point *' <LValueToRValue>
|   |   | |   | | `-DeclRefExpr 0x7fffd840ff08 <col:14> 'stbtt__point *' lvalue Var 0x7fffd840e7e0 'points' 'stbtt__point *'
|   |   | |   | `-ImplicitCastExpr 0x7fffd840ffc8 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'stbtt__point *' <BitCast>
|   |   | |   |   `-ParenExpr 0x7fffd840ff90 <col:16, col:25> 'void *'
|   |   | |   |     `-CStyleCastExpr 0x7fffd840ff68 <col:17, col:24> 'void *' <NullToPointer>
|   |   | |   |       `-IntegerLiteral 0x7fffd840ff30 <col:24> 'int' 0
|   |   | |   |-GotoStmt 0x7fffd8410050 <././stb/stb_truetype.h:3589:30, col:35> 'error' 0x7fffd8410008
|   |   | |   `-<<<NULL>>>
|   |   | `-<<<NULL>>>
|   |   |-BinaryOperator 0x7fffd8410140 <line:3591:7, col:20> 'int' '='
|   |   | |-DeclRefExpr 0x7fffd84100f8 <col:7> 'int' lvalue Var 0x7fffd840e8a8 'num_points' 'int'
|   |   | `-IntegerLiteral 0x7fffd8410120 <col:20> 'int' 0
|   |   |-BinaryOperator 0x7fffd84101d0 <line:3592:7, col:11> 'int' '='
|   |   | |-DeclRefExpr 0x7fffd8410168 <col:7> 'int' lvalue Var 0x7fffd840eb08 'n' 'int'
|   |   | `-UnaryOperator 0x7fffd84101b0 <col:10, col:11> 'int' prefix '-'
|   |   |   `-IntegerLiteral 0x7fffd8410190 <col:11> 'int' 1
|   |   |-ForStmt 0x7fffd8412830 <line:3593:7, line:3625:7>
|   |   | |-BinaryOperator 0x7fffd8410240 <line:3593:12, col:14> 'int' '='
|   |   | | |-DeclRefExpr 0x7fffd84101f8 <col:12> 'int' lvalue Var 0x7fffd840ea90 'i' 'int'
|   |   | | `-IntegerLiteral 0x7fffd8410220 <col:14> 'int' 0
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x7fffd84102e8 <col:17, col:21> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x7fffd84102b8 <col:17> 'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x7fffd8410268 <col:17> 'int' lvalue Var 0x7fffd840ea90 'i' 'int'
|   |   | | `-ImplicitCastExpr 0x7fffd84102d0 <col:21> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x7fffd8410290 <col:21> 'int' lvalue ParmVar 0x7fffd840e310 'num_verts' 'int'
|   |   | |-UnaryOperator 0x7fffd8410338 <col:32, col:34> 'int' prefix '++'
|   |   | | `-DeclRefExpr 0x7fffd8410310 <col:34> 'int' lvalue Var 0x7fffd840ea90 'i' 'int'
|   |   | `-CompoundStmt 0x7fffd8412818 <col:37, line:3625:7>
|   |   |   `-SwitchStmt 0x7fffd8410468 <line:3594:10, line:3624:10>
|   |   |     |-<<<NULL>>>
|   |   |     |-<<<NULL>>>
|   |   |     |-ImplicitCastExpr 0x7fffd8410450 <line:3594:18, col:30> 'int' <IntegralCast>
|   |   |     | `-ImplicitCastExpr 0x7fffd8410438 <col:18, col:30> 'unsigned char' <LValueToRValue>
|   |   |     |   `-MemberExpr 0x7fffd8410400 <col:18, col:30> 'unsigned char' lvalue .type 0x7fffd8351a18
|   |   |     |     `-ArraySubscriptExpr 0x7fffd84103d8 <col:18, col:28> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   |     |       |-ImplicitCastExpr 0x7fffd84103a8 <col:18> 'stbtt_vertex *' <LValueToRValue>
|   |   |     |       | `-DeclRefExpr 0x7fffd8410358 <col:18> 'stbtt_vertex *' lvalue ParmVar 0x7fffd840e298 'vertices' 'stbtt_vertex *'
|   |   |     |       `-ImplicitCastExpr 0x7fffd84103c0 <col:27> 'int' <LValueToRValue>
|   |   |     |         `-DeclRefExpr 0x7fffd8410380 <col:27> 'int' lvalue Var 0x7fffd840ea90 'i' 'int'
|   |   |     `-CompoundStmt 0x7fffd8412790 <col:36, line:3624:10>
|   |   |       |-CaseStmt 0x7fffd84104c0 <line:3595:13, line:3598:56>
|   |   |       | |-DeclRefExpr 0x7fffd8410498 <line:3595:18> 'int' EnumConstant 0x7fffd83515f0 'STBTT_vmove' 'int'
|   |   |       | |-<<<NULL>>>
|   |   |       | `-IfStmt 0x7fffd8410778 <line:3597:16, line:3598:56>
|   |   |       |   |-<<<NULL>>>
|   |   |       |   |-<<<NULL>>>
|   |   |       |   |-BinaryOperator 0x7fffd8410580 <line:3597:20, col:25> 'int' '>='
|   |   |       |   | |-ImplicitCastExpr 0x7fffd8410568 <col:20> 'int' <LValueToRValue>
|   |   |       |   | | `-DeclRefExpr 0x7fffd8410520 <col:20> 'int' lvalue Var 0x7fffd840eb08 'n' 'int'
|   |   |       |   | `-IntegerLiteral 0x7fffd8410548 <col:25> 'int' 0
|   |   |       |   |-BinaryOperator 0x7fffd8410750 <line:3598:19, col:56> 'int' '='
|   |   |       |   | |-ArraySubscriptExpr 0x7fffd8410680 <col:19, col:39> 'int' lvalue
|   |   |       |   | | |-ImplicitCastExpr 0x7fffd8410650 <col:19, col:36> 'int *' <LValueToRValue>
|   |   |       |   | | | `-ParenExpr 0x7fffd8410608 <col:19, col:36> 'int *' lvalue
|   |   |       |   | | |   `-UnaryOperator 0x7fffd84105e8 <col:20, col:21> 'int *' lvalue prefix '*'
|   |   |       |   | | |     `-ImplicitCastExpr 0x7fffd84105d0 <col:21> 'int **' <LValueToRValue>
|   |   |       |   | | |       `-DeclRefExpr 0x7fffd84105a8 <col:21> 'int **' lvalue ParmVar 0x7fffd840e438 'contour_lengths' 'int **'
|   |   |       |   | | `-ImplicitCastExpr 0x7fffd8410668 <col:38> 'int' <LValueToRValue>
|   |   |       |   | |   `-DeclRefExpr 0x7fffd8410628 <col:38> 'int' lvalue Var 0x7fffd840eb08 'n' 'int'
|   |   |       |   | `-BinaryOperator 0x7fffd8410728 <col:43, col:56> 'int' '-'
|   |   |       |   |   |-ImplicitCastExpr 0x7fffd84106f8 <col:43> 'int' <LValueToRValue>
|   |   |       |   |   | `-DeclRefExpr 0x7fffd84106a8 <col:43> 'int' lvalue Var 0x7fffd840e8a8 'num_points' 'int'
|   |   |       |   |   `-ImplicitCastExpr 0x7fffd8410710 <col:56> 'int' <LValueToRValue>
|   |   |       |   |     `-DeclRefExpr 0x7fffd84106d0 <col:56> 'int' lvalue Var 0x7fffd840eba0 'start' 'int'
|   |   |       |   `-<<<NULL>>>
|   |   |       |-UnaryOperator 0x7fffd84107d8 <line:3599:16, col:18> 'int' prefix '++'
|   |   |       | `-DeclRefExpr 0x7fffd84107b0 <col:18> 'int' lvalue Var 0x7fffd840eb08 'n' 'int'
|   |   |       |-BinaryOperator 0x7fffd8410860 <line:3600:16, col:24> 'int' '='
|   |   |       | |-DeclRefExpr 0x7fffd84107f8 <col:16> 'int' lvalue Var 0x7fffd840eba0 'start' 'int'
|   |   |       | `-ImplicitCastExpr 0x7fffd8410848 <col:24> 'int' <LValueToRValue>
|   |   |       |   `-DeclRefExpr 0x7fffd8410820 <col:24> 'int' lvalue Var 0x7fffd840e8a8 'num_points' 'int'
|   |   |       |-BinaryOperator 0x7fffd8410b48 <line:3602:16, col:51> 'float' ','
|   |   |       | |-BinaryOperator 0x7fffd84109c0 <col:16, col:32> 'float' '='
|   |   |       | | |-DeclRefExpr 0x7fffd8410888 <col:16> 'float' lvalue Var 0x7fffd840f980 'x' 'float'
|   |   |       | | `-ImplicitCastExpr 0x7fffd84109a8 <col:20, col:32> 'float' <IntegralToFloating>
|   |   |       | |   `-ImplicitCastExpr 0x7fffd8410990 <col:20, col:32> 'short' <LValueToRValue>
|   |   |       | |     `-MemberExpr 0x7fffd8410958 <col:20, col:32> 'short' lvalue .x 0x7fffd83517d8
|   |   |       | |       `-ArraySubscriptExpr 0x7fffd8410930 <col:20, col:30> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   |       | |         |-ImplicitCastExpr 0x7fffd8410900 <col:20> 'stbtt_vertex *' <LValueToRValue>
|   |   |       | |         | `-DeclRefExpr 0x7fffd84108b0 <col:20> 'stbtt_vertex *' lvalue ParmVar 0x7fffd840e298 'vertices' 'stbtt_vertex *'
|   |   |       | |         `-ImplicitCastExpr 0x7fffd8410918 <col:29> 'int' <LValueToRValue>
|   |   |       | |           `-DeclRefExpr 0x7fffd84108d8 <col:29> 'int' lvalue Var 0x7fffd840ea90 'i' 'int'
|   |   |       | `-BinaryOperator 0x7fffd8410b20 <col:35, col:51> 'float' '='
|   |   |       |   |-DeclRefExpr 0x7fffd84109e8 <col:35> 'float' lvalue Var 0x7fffd840fa30 'y' 'float'
|   |   |       |   `-ImplicitCastExpr 0x7fffd8410b08 <col:39, col:51> 'float' <IntegralToFloating>
|   |   |       |     `-ImplicitCastExpr 0x7fffd8410af0 <col:39, col:51> 'short' <LValueToRValue>
|   |   |       |       `-MemberExpr 0x7fffd8410ab8 <col:39, col:51> 'short' lvalue .y 0x7fffd8351838
|   |   |       |         `-ArraySubscriptExpr 0x7fffd8410a90 <col:39, col:49> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   |       |           |-ImplicitCastExpr 0x7fffd8410a60 <col:39> 'stbtt_vertex *' <LValueToRValue>
|   |   |       |           | `-DeclRefExpr 0x7fffd8410a10 <col:39> 'stbtt_vertex *' lvalue ParmVar 0x7fffd840e298 'vertices' 'stbtt_vertex *'
|   |   |       |           `-ImplicitCastExpr 0x7fffd8410a78 <col:48> 'int' <LValueToRValue>
|   |   |       |             `-DeclRefExpr 0x7fffd8410a38 <col:48> 'int' lvalue Var 0x7fffd840ea90 'i' 'int'
|   |   |       |-CallExpr 0x7fffd8410c70 <line:3603:16, col:58> 'void'
|   |   |       | |-ImplicitCastExpr 0x7fffd8410c58 <col:16> 'void (*)(stbtt__point *, int, float, float)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x7fffd8410b70 <col:16> 'void (stbtt__point *, int, float, float)' Function 0x7fffd8407a50 'stbtt__add_point' 'void (stbtt__point *, int, float, float)'
|   |   |       | |-ImplicitCastExpr 0x7fffd8410cb8 <col:33> 'stbtt__point *' <LValueToRValue>
|   |   |       | | `-DeclRefExpr 0x7fffd8410b98 <col:33> 'stbtt__point *' lvalue Var 0x7fffd840e7e0 'points' 'stbtt__point *'
|   |   |       | |-UnaryOperator 0x7fffd8410be8 <col:41, col:51> 'int' postfix '++'
|   |   |       | | `-DeclRefExpr 0x7fffd8410bc0 <col:41> 'int' lvalue Var 0x7fffd840e8a8 'num_points' 'int'
|   |   |       | |-ImplicitCastExpr 0x7fffd8410cd0 <col:55> 'float' <LValueToRValue>
|   |   |       | | `-DeclRefExpr 0x7fffd8410c08 <col:55> 'float' lvalue Var 0x7fffd840f980 'x' 'float'
|   |   |       | `-ImplicitCastExpr 0x7fffd8410ce8 <col:57> 'float' <LValueToRValue>
|   |   |       |   `-DeclRefExpr 0x7fffd8410c30 <col:57> 'float' lvalue Var 0x7fffd840fa30 'y' 'float'
|   |   |       |-BreakStmt 0x7fffd8410d00 <line:3604:16>
|   |   |       |-CaseStmt 0x7fffd8410d30 <line:3605:13, line:3606:51>
|   |   |       | |-DeclRefExpr 0x7fffd8410d08 <line:3605:18> 'int' EnumConstant 0x7fffd8351638 'STBTT_vline' 'int'
|   |   |       | |-<<<NULL>>>
|   |   |       | `-BinaryOperator 0x7fffd8411028 <line:3606:16, col:51> 'float' ','
|   |   |       |   |-BinaryOperator 0x7fffd8410ea0 <col:16, col:32> 'float' '='
|   |   |       |   | |-DeclRefExpr 0x7fffd8410d68 <col:16> 'float' lvalue Var 0x7fffd840f980 'x' 'float'
|   |   |       |   | `-ImplicitCastExpr 0x7fffd8410e88 <col:20, col:32> 'float' <IntegralToFloating>
|   |   |       |   |   `-ImplicitCastExpr 0x7fffd8410e70 <col:20, col:32> 'short' <LValueToRValue>
|   |   |       |   |     `-MemberExpr 0x7fffd8410e38 <col:20, col:32> 'short' lvalue .x 0x7fffd83517d8
|   |   |       |   |       `-ArraySubscriptExpr 0x7fffd8410e10 <col:20, col:30> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   |       |   |         |-ImplicitCastExpr 0x7fffd8410de0 <col:20> 'stbtt_vertex *' <LValueToRValue>
|   |   |       |   |         | `-DeclRefExpr 0x7fffd8410d90 <col:20> 'stbtt_vertex *' lvalue ParmVar 0x7fffd840e298 'vertices' 'stbtt_vertex *'
|   |   |       |   |         `-ImplicitCastExpr 0x7fffd8410df8 <col:29> 'int' <LValueToRValue>
|   |   |       |   |           `-DeclRefExpr 0x7fffd8410db8 <col:29> 'int' lvalue Var 0x7fffd840ea90 'i' 'int'
|   |   |       |   `-BinaryOperator 0x7fffd8411000 <col:35, col:51> 'float' '='
|   |   |       |     |-DeclRefExpr 0x7fffd8410ec8 <col:35> 'float' lvalue Var 0x7fffd840fa30 'y' 'float'
|   |   |       |     `-ImplicitCastExpr 0x7fffd8410fe8 <col:39, col:51> 'float' <IntegralToFloating>
|   |   |       |       `-ImplicitCastExpr 0x7fffd8410fd0 <col:39, col:51> 'short' <LValueToRValue>
|   |   |       |         `-MemberExpr 0x7fffd8410f98 <col:39, col:51> 'short' lvalue .y 0x7fffd8351838
|   |   |       |           `-ArraySubscriptExpr 0x7fffd8410f70 <col:39, col:49> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   |       |             |-ImplicitCastExpr 0x7fffd8410f40 <col:39> 'stbtt_vertex *' <LValueToRValue>
|   |   |       |             | `-DeclRefExpr 0x7fffd8410ef0 <col:39> 'stbtt_vertex *' lvalue ParmVar 0x7fffd840e298 'vertices' 'stbtt_vertex *'
|   |   |       |             `-ImplicitCastExpr 0x7fffd8410f58 <col:48> 'int' <LValueToRValue>
|   |   |       |               `-DeclRefExpr 0x7fffd8410f18 <col:48> 'int' lvalue Var 0x7fffd840ea90 'i' 'int'
|   |   |       |-CallExpr 0x7fffd8411150 <line:3607:16, col:59> 'void'
|   |   |       | |-ImplicitCastExpr 0x7fffd8411138 <col:16> 'void (*)(stbtt__point *, int, float, float)' <FunctionToPointerDecay>
|   |   |       | | `-DeclRefExpr 0x7fffd8411050 <col:16> 'void (stbtt__point *, int, float, float)' Function 0x7fffd8407a50 'stbtt__add_point' 'void (stbtt__point *, int, float, float)'
|   |   |       | |-ImplicitCastExpr 0x7fffd8411198 <col:33> 'stbtt__point *' <LValueToRValue>
|   |   |       | | `-DeclRefExpr 0x7fffd8411078 <col:33> 'stbtt__point *' lvalue Var 0x7fffd840e7e0 'points' 'stbtt__point *'
|   |   |       | |-UnaryOperator 0x7fffd84110c8 <col:41, col:51> 'int' postfix '++'
|   |   |       | | `-DeclRefExpr 0x7fffd84110a0 <col:41> 'int' lvalue Var 0x7fffd840e8a8 'num_points' 'int'
|   |   |       | |-ImplicitCastExpr 0x7fffd84111b0 <col:55> 'float' <LValueToRValue>
|   |   |       | | `-DeclRefExpr 0x7fffd84110e8 <col:55> 'float' lvalue Var 0x7fffd840f980 'x' 'float'
|   |   |       | `-ImplicitCastExpr 0x7fffd84111c8 <col:58> 'float' <LValueToRValue>
|   |   |       |   `-DeclRefExpr 0x7fffd8411110 <col:58> 'float' lvalue Var 0x7fffd840fa30 'y' 'float'
|   |   |       |-BreakStmt 0x7fffd84111e0 <line:3608:16>
|   |   |       |-CaseStmt 0x7fffd8411210 <line:3609:13, line:3613:69>
|   |   |       | |-DeclRefExpr 0x7fffd84111e8 <line:3609:18> 'int' EnumConstant 0x7fffd8351680 'STBTT_vcurve' 'int'
|   |   |       | |-<<<NULL>>>
|   |   |       | `-CallExpr 0x7fffd8411710 <line:3610:16, line:3613:69> 'int'
|   |   |       |   |-ImplicitCastExpr 0x7fffd84116f8 <line:3610:16> 'int (*)(stbtt__point *, int *, float, float, float, float, float, float, float, int)' <FunctionToPointerDecay>
|   |   |       |   | `-DeclRefExpr 0x7fffd8411248 <col:16> 'int (stbtt__point *, int *, float, float, float, float, float, float, float, int)' Function 0x7fffd84084e0 'stbtt__tesselate_curve' 'int (stbtt__point *, int *, float, float, float, float, float, float, float, int)'
|   |   |       |   |-ImplicitCastExpr 0x7fffd8411788 <col:39> 'stbtt__point *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x7fffd8411270 <col:39> 'stbtt__point *' lvalue Var 0x7fffd840e7e0 'points' 'stbtt__point *'
|   |   |       |   |-UnaryOperator 0x7fffd84112c0 <col:47, col:48> 'int *' prefix '&'
|   |   |       |   | `-DeclRefExpr 0x7fffd8411298 <col:48> 'int' lvalue Var 0x7fffd840e8a8 'num_points' 'int'
|   |   |       |   |-ImplicitCastExpr 0x7fffd84117a0 <col:60> 'float' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x7fffd84112e0 <col:60> 'float' lvalue Var 0x7fffd840f980 'x' 'float'
|   |   |       |   |-ImplicitCastExpr 0x7fffd84117b8 <col:62> 'float' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x7fffd8411308 <col:62> 'float' lvalue Var 0x7fffd840fa30 'y' 'float'
|   |   |       |   |-ImplicitCastExpr 0x7fffd84117e8 <line:3611:41, col:53> 'float' <IntegralToFloating>
|   |   |       |   | `-ImplicitCastExpr 0x7fffd84117d0 <col:41, col:53> 'short' <LValueToRValue>
|   |   |       |   |   `-MemberExpr 0x7fffd84113d8 <col:41, col:53> 'short' lvalue .cx 0x7fffd8351898
|   |   |       |   |     `-ArraySubscriptExpr 0x7fffd84113b0 <col:41, col:51> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   |       |   |       |-ImplicitCastExpr 0x7fffd8411380 <col:41> 'stbtt_vertex *' <LValueToRValue>
|   |   |       |   |       | `-DeclRefExpr 0x7fffd8411330 <col:41> 'stbtt_vertex *' lvalue ParmVar 0x7fffd840e298 'vertices' 'stbtt_vertex *'
|   |   |       |   |       `-ImplicitCastExpr 0x7fffd8411398 <col:50> 'int' <LValueToRValue>
|   |   |       |   |         `-DeclRefExpr 0x7fffd8411358 <col:50> 'int' lvalue Var 0x7fffd840ea90 'i' 'int'
|   |   |       |   |-ImplicitCastExpr 0x7fffd8411818 <col:57, col:69> 'float' <IntegralToFloating>
|   |   |       |   | `-ImplicitCastExpr 0x7fffd8411800 <col:57, col:69> 'short' <LValueToRValue>
|   |   |       |   |   `-MemberExpr 0x7fffd84114b8 <col:57, col:69> 'short' lvalue .cy 0x7fffd83518f8
|   |   |       |   |     `-ArraySubscriptExpr 0x7fffd8411490 <col:57, col:67> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   |       |   |       |-ImplicitCastExpr 0x7fffd8411460 <col:57> 'stbtt_vertex *' <LValueToRValue>
|   |   |       |   |       | `-DeclRefExpr 0x7fffd8411410 <col:57> 'stbtt_vertex *' lvalue ParmVar 0x7fffd840e298 'vertices' 'stbtt_vertex *'
|   |   |       |   |       `-ImplicitCastExpr 0x7fffd8411478 <col:66> 'int' <LValueToRValue>
|   |   |       |   |         `-DeclRefExpr 0x7fffd8411438 <col:66> 'int' lvalue Var 0x7fffd840ea90 'i' 'int'
|   |   |       |   |-ImplicitCastExpr 0x7fffd8411848 <line:3612:41, col:53> 'float' <IntegralToFloating>
|   |   |       |   | `-ImplicitCastExpr 0x7fffd8411830 <col:41, col:53> 'short' <LValueToRValue>
|   |   |       |   |   `-MemberExpr 0x7fffd8411598 <col:41, col:53> 'short' lvalue .x 0x7fffd83517d8
|   |   |       |   |     `-ArraySubscriptExpr 0x7fffd8411570 <col:41, col:51> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   |       |   |       |-ImplicitCastExpr 0x7fffd8411540 <col:41> 'stbtt_vertex *' <LValueToRValue>
|   |   |       |   |       | `-DeclRefExpr 0x7fffd84114f0 <col:41> 'stbtt_vertex *' lvalue ParmVar 0x7fffd840e298 'vertices' 'stbtt_vertex *'
|   |   |       |   |       `-ImplicitCastExpr 0x7fffd8411558 <col:50> 'int' <LValueToRValue>
|   |   |       |   |         `-DeclRefExpr 0x7fffd8411518 <col:50> 'int' lvalue Var 0x7fffd840ea90 'i' 'int'
|   |   |       |   |-ImplicitCastExpr 0x7fffd8411878 <col:57, col:69> 'float' <IntegralToFloating>
|   |   |       |   | `-ImplicitCastExpr 0x7fffd8411860 <col:57, col:69> 'short' <LValueToRValue>
|   |   |       |   |   `-MemberExpr 0x7fffd8411678 <col:57, col:69> 'short' lvalue .y 0x7fffd8351838
|   |   |       |   |     `-ArraySubscriptExpr 0x7fffd8411650 <col:57, col:67> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   |       |   |       |-ImplicitCastExpr 0x7fffd8411620 <col:57> 'stbtt_vertex *' <LValueToRValue>
|   |   |       |   |       | `-DeclRefExpr 0x7fffd84115d0 <col:57> 'stbtt_vertex *' lvalue ParmVar 0x7fffd840e298 'vertices' 'stbtt_vertex *'
|   |   |       |   |       `-ImplicitCastExpr 0x7fffd8411638 <col:66> 'int' <LValueToRValue>
|   |   |       |   |         `-DeclRefExpr 0x7fffd84115f8 <col:66> 'int' lvalue Var 0x7fffd840ea90 'i' 'int'
|   |   |       |   |-ImplicitCastExpr 0x7fffd8411890 <line:3613:41> 'float' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x7fffd84116b0 <col:41> 'float' lvalue Var 0x7fffd840e958 'objspace_flatness_squared' 'float'
|   |   |       |   `-IntegerLiteral 0x7fffd84116d8 <col:68> 'int' 0
|   |   |       |-BinaryOperator 0x7fffd8411b68 <line:3614:16, col:51> 'float' ','
|   |   |       | |-BinaryOperator 0x7fffd84119e0 <col:16, col:32> 'float' '='
|   |   |       | | |-DeclRefExpr 0x7fffd84118a8 <col:16> 'float' lvalue Var 0x7fffd840f980 'x' 'float'
|   |   |       | | `-ImplicitCastExpr 0x7fffd84119c8 <col:20, col:32> 'float' <IntegralToFloating>
|   |   |       | |   `-ImplicitCastExpr 0x7fffd84119b0 <col:20, col:32> 'short' <LValueToRValue>
|   |   |       | |     `-MemberExpr 0x7fffd8411978 <col:20, col:32> 'short' lvalue .x 0x7fffd83517d8
|   |   |       | |       `-ArraySubscriptExpr 0x7fffd8411950 <col:20, col:30> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   |       | |         |-ImplicitCastExpr 0x7fffd8411920 <col:20> 'stbtt_vertex *' <LValueToRValue>
|   |   |       | |         | `-DeclRefExpr 0x7fffd84118d0 <col:20> 'stbtt_vertex *' lvalue ParmVar 0x7fffd840e298 'vertices' 'stbtt_vertex *'
|   |   |       | |         `-ImplicitCastExpr 0x7fffd8411938 <col:29> 'int' <LValueToRValue>
|   |   |       | |           `-DeclRefExpr 0x7fffd84118f8 <col:29> 'int' lvalue Var 0x7fffd840ea90 'i' 'int'
|   |   |       | `-BinaryOperator 0x7fffd8411b40 <col:35, col:51> 'float' '='
|   |   |       |   |-DeclRefExpr 0x7fffd8411a08 <col:35> 'float' lvalue Var 0x7fffd840fa30 'y' 'float'
|   |   |       |   `-ImplicitCastExpr 0x7fffd8411b28 <col:39, col:51> 'float' <IntegralToFloating>
|   |   |       |     `-ImplicitCastExpr 0x7fffd8411b10 <col:39, col:51> 'short' <LValueToRValue>
|   |   |       |       `-MemberExpr 0x7fffd8411ad8 <col:39, col:51> 'short' lvalue .y 0x7fffd8351838
|   |   |       |         `-ArraySubscriptExpr 0x7fffd8411ab0 <col:39, col:49> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   |       |           |-ImplicitCastExpr 0x7fffd8411a80 <col:39> 'stbtt_vertex *' <LValueToRValue>
|   |   |       |           | `-DeclRefExpr 0x7fffd8411a30 <col:39> 'stbtt_vertex *' lvalue ParmVar 0x7fffd840e298 'vertices' 'stbtt_vertex *'
|   |   |       |           `-ImplicitCastExpr 0x7fffd8411a98 <col:48> 'int' <LValueToRValue>
|   |   |       |             `-DeclRefExpr 0x7fffd8411a58 <col:48> 'int' lvalue Var 0x7fffd840ea90 'i' 'int'
|   |   |       |-BreakStmt 0x7fffd8411b90 <line:3615:16>
|   |   |       |-CaseStmt 0x7fffd8411bc0 <line:3616:13, line:3621:69>
|   |   |       | |-DeclRefExpr 0x7fffd8411b98 <line:3616:18> 'int' EnumConstant 0x7fffd83516c8 'STBTT_vcubic' 'int'
|   |   |       | |-<<<NULL>>>
|   |   |       | `-CallExpr 0x7fffd8412280 <line:3617:16, line:3621:69> 'void'
|   |   |       |   |-ImplicitCastExpr 0x7fffd8412268 <line:3617:16> 'void (*)(stbtt__point *, int *, float, float, float, float, float, float, float, float, float, int)' <FunctionToPointerDecay>
|   |   |       |   | `-DeclRefExpr 0x7fffd8411bf8 <col:16> 'void (stbtt__point *, int *, float, float, float, float, float, float, float, float, float, int)' Function 0x7fffd840a860 'stbtt__tesselate_cubic' 'void (stbtt__point *, int *, float, float, float, float, float, float, float, float, float, int)'
|   |   |       |   |-ImplicitCastExpr 0x7fffd8412308 <col:39> 'stbtt__point *' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x7fffd8411c20 <col:39> 'stbtt__point *' lvalue Var 0x7fffd840e7e0 'points' 'stbtt__point *'
|   |   |       |   |-UnaryOperator 0x7fffd8411c70 <col:47, col:48> 'int *' prefix '&'
|   |   |       |   | `-DeclRefExpr 0x7fffd8411c48 <col:48> 'int' lvalue Var 0x7fffd840e8a8 'num_points' 'int'
|   |   |       |   |-ImplicitCastExpr 0x7fffd8412320 <col:60> 'float' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x7fffd8411c90 <col:60> 'float' lvalue Var 0x7fffd840f980 'x' 'float'
|   |   |       |   |-ImplicitCastExpr 0x7fffd8412338 <col:62> 'float' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x7fffd8411cb8 <col:62> 'float' lvalue Var 0x7fffd840fa30 'y' 'float'
|   |   |       |   |-ImplicitCastExpr 0x7fffd8412368 <line:3618:41, col:53> 'float' <IntegralToFloating>
|   |   |       |   | `-ImplicitCastExpr 0x7fffd8412350 <col:41, col:53> 'short' <LValueToRValue>
|   |   |       |   |   `-MemberExpr 0x7fffd8411d88 <col:41, col:53> 'short' lvalue .cx 0x7fffd8351898
|   |   |       |   |     `-ArraySubscriptExpr 0x7fffd8411d60 <col:41, col:51> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   |       |   |       |-ImplicitCastExpr 0x7fffd8411d30 <col:41> 'stbtt_vertex *' <LValueToRValue>
|   |   |       |   |       | `-DeclRefExpr 0x7fffd8411ce0 <col:41> 'stbtt_vertex *' lvalue ParmVar 0x7fffd840e298 'vertices' 'stbtt_vertex *'
|   |   |       |   |       `-ImplicitCastExpr 0x7fffd8411d48 <col:50> 'int' <LValueToRValue>
|   |   |       |   |         `-DeclRefExpr 0x7fffd8411d08 <col:50> 'int' lvalue Var 0x7fffd840ea90 'i' 'int'
|   |   |       |   |-ImplicitCastExpr 0x7fffd8412398 <col:57, col:69> 'float' <IntegralToFloating>
|   |   |       |   | `-ImplicitCastExpr 0x7fffd8412380 <col:57, col:69> 'short' <LValueToRValue>
|   |   |       |   |   `-MemberExpr 0x7fffd8411e68 <col:57, col:69> 'short' lvalue .cy 0x7fffd83518f8
|   |   |       |   |     `-ArraySubscriptExpr 0x7fffd8411e40 <col:57, col:67> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   |       |   |       |-ImplicitCastExpr 0x7fffd8411e10 <col:57> 'stbtt_vertex *' <LValueToRValue>
|   |   |       |   |       | `-DeclRefExpr 0x7fffd8411dc0 <col:57> 'stbtt_vertex *' lvalue ParmVar 0x7fffd840e298 'vertices' 'stbtt_vertex *'
|   |   |       |   |       `-ImplicitCastExpr 0x7fffd8411e28 <col:66> 'int' <LValueToRValue>
|   |   |       |   |         `-DeclRefExpr 0x7fffd8411de8 <col:66> 'int' lvalue Var 0x7fffd840ea90 'i' 'int'
|   |   |       |   |-ImplicitCastExpr 0x7fffd84123c8 <line:3619:41, col:53> 'float' <IntegralToFloating>
|   |   |       |   | `-ImplicitCastExpr 0x7fffd84123b0 <col:41, col:53> 'short' <LValueToRValue>
|   |   |       |   |   `-MemberExpr 0x7fffd8411f48 <col:41, col:53> 'short' lvalue .cx1 0x7fffd8351958
|   |   |       |   |     `-ArraySubscriptExpr 0x7fffd8411f20 <col:41, col:51> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   |       |   |       |-ImplicitCastExpr 0x7fffd8411ef0 <col:41> 'stbtt_vertex *' <LValueToRValue>
|   |   |       |   |       | `-DeclRefExpr 0x7fffd8411ea0 <col:41> 'stbtt_vertex *' lvalue ParmVar 0x7fffd840e298 'vertices' 'stbtt_vertex *'
|   |   |       |   |       `-ImplicitCastExpr 0x7fffd8411f08 <col:50> 'int' <LValueToRValue>
|   |   |       |   |         `-DeclRefExpr 0x7fffd8411ec8 <col:50> 'int' lvalue Var 0x7fffd840ea90 'i' 'int'
|   |   |       |   |-ImplicitCastExpr 0x7fffd84123f8 <col:58, col:70> 'float' <IntegralToFloating>
|   |   |       |   | `-ImplicitCastExpr 0x7fffd84123e0 <col:58, col:70> 'short' <LValueToRValue>
|   |   |       |   |   `-MemberExpr 0x7fffd8412028 <col:58, col:70> 'short' lvalue .cy1 0x7fffd83519b8
|   |   |       |   |     `-ArraySubscriptExpr 0x7fffd8412000 <col:58, col:68> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   |       |   |       |-ImplicitCastExpr 0x7fffd8411fd0 <col:58> 'stbtt_vertex *' <LValueToRValue>
|   |   |       |   |       | `-DeclRefExpr 0x7fffd8411f80 <col:58> 'stbtt_vertex *' lvalue ParmVar 0x7fffd840e298 'vertices' 'stbtt_vertex *'
|   |   |       |   |       `-ImplicitCastExpr 0x7fffd8411fe8 <col:67> 'int' <LValueToRValue>
|   |   |       |   |         `-DeclRefExpr 0x7fffd8411fa8 <col:67> 'int' lvalue Var 0x7fffd840ea90 'i' 'int'
|   |   |       |   |-ImplicitCastExpr 0x7fffd8412428 <line:3620:41, col:53> 'float' <IntegralToFloating>
|   |   |       |   | `-ImplicitCastExpr 0x7fffd8412410 <col:41, col:53> 'short' <LValueToRValue>
|   |   |       |   |   `-MemberExpr 0x7fffd8412108 <col:41, col:53> 'short' lvalue .x 0x7fffd83517d8
|   |   |       |   |     `-ArraySubscriptExpr 0x7fffd84120e0 <col:41, col:51> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   |       |   |       |-ImplicitCastExpr 0x7fffd84120b0 <col:41> 'stbtt_vertex *' <LValueToRValue>
|   |   |       |   |       | `-DeclRefExpr 0x7fffd8412060 <col:41> 'stbtt_vertex *' lvalue ParmVar 0x7fffd840e298 'vertices' 'stbtt_vertex *'
|   |   |       |   |       `-ImplicitCastExpr 0x7fffd84120c8 <col:50> 'int' <LValueToRValue>
|   |   |       |   |         `-DeclRefExpr 0x7fffd8412088 <col:50> 'int' lvalue Var 0x7fffd840ea90 'i' 'int'
|   |   |       |   |-ImplicitCastExpr 0x7fffd8412458 <col:57, col:69> 'float' <IntegralToFloating>
|   |   |       |   | `-ImplicitCastExpr 0x7fffd8412440 <col:57, col:69> 'short' <LValueToRValue>
|   |   |       |   |   `-MemberExpr 0x7fffd84121e8 <col:57, col:69> 'short' lvalue .y 0x7fffd8351838
|   |   |       |   |     `-ArraySubscriptExpr 0x7fffd84121c0 <col:57, col:67> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   |       |   |       |-ImplicitCastExpr 0x7fffd8412190 <col:57> 'stbtt_vertex *' <LValueToRValue>
|   |   |       |   |       | `-DeclRefExpr 0x7fffd8412140 <col:57> 'stbtt_vertex *' lvalue ParmVar 0x7fffd840e298 'vertices' 'stbtt_vertex *'
|   |   |       |   |       `-ImplicitCastExpr 0x7fffd84121a8 <col:66> 'int' <LValueToRValue>
|   |   |       |   |         `-DeclRefExpr 0x7fffd8412168 <col:66> 'int' lvalue Var 0x7fffd840ea90 'i' 'int'
|   |   |       |   |-ImplicitCastExpr 0x7fffd8412470 <line:3621:41> 'float' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x7fffd8412220 <col:41> 'float' lvalue Var 0x7fffd840e958 'objspace_flatness_squared' 'float'
|   |   |       |   `-IntegerLiteral 0x7fffd8412248 <col:68> 'int' 0
|   |   |       |-BinaryOperator 0x7fffd8412760 <line:3622:16, col:51> 'float' ','
|   |   |       | |-BinaryOperator 0x7fffd84125d8 <col:16, col:32> 'float' '='
|   |   |       | | |-DeclRefExpr 0x7fffd8412488 <col:16> 'float' lvalue Var 0x7fffd840f980 'x' 'float'
|   |   |       | | `-ImplicitCastExpr 0x7fffd84125c0 <col:20, col:32> 'float' <IntegralToFloating>
|   |   |       | |   `-ImplicitCastExpr 0x7fffd84125a8 <col:20, col:32> 'short' <LValueToRValue>
|   |   |       | |     `-MemberExpr 0x7fffd8412570 <col:20, col:32> 'short' lvalue .x 0x7fffd83517d8
|   |   |       | |       `-ArraySubscriptExpr 0x7fffd8412548 <col:20, col:30> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   |       | |         |-ImplicitCastExpr 0x7fffd8412500 <col:20> 'stbtt_vertex *' <LValueToRValue>
|   |   |       | |         | `-DeclRefExpr 0x7fffd84124b0 <col:20> 'stbtt_vertex *' lvalue ParmVar 0x7fffd840e298 'vertices' 'stbtt_vertex *'
|   |   |       | |         `-ImplicitCastExpr 0x7fffd8412530 <col:29> 'int' <LValueToRValue>
|   |   |       | |           `-DeclRefExpr 0x7fffd84124d8 <col:29> 'int' lvalue Var 0x7fffd840ea90 'i' 'int'
|   |   |       | `-BinaryOperator 0x7fffd8412738 <col:35, col:51> 'float' '='
|   |   |       |   |-DeclRefExpr 0x7fffd8412600 <col:35> 'float' lvalue Var 0x7fffd840fa30 'y' 'float'
|   |   |       |   `-ImplicitCastExpr 0x7fffd8412720 <col:39, col:51> 'float' <IntegralToFloating>
|   |   |       |     `-ImplicitCastExpr 0x7fffd8412708 <col:39, col:51> 'short' <LValueToRValue>
|   |   |       |       `-MemberExpr 0x7fffd84126d0 <col:39, col:51> 'short' lvalue .y 0x7fffd8351838
|   |   |       |         `-ArraySubscriptExpr 0x7fffd84126a8 <col:39, col:49> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   |       |           |-ImplicitCastExpr 0x7fffd8412678 <col:39> 'stbtt_vertex *' <LValueToRValue>
|   |   |       |           | `-DeclRefExpr 0x7fffd8412628 <col:39> 'stbtt_vertex *' lvalue ParmVar 0x7fffd840e298 'vertices' 'stbtt_vertex *'
|   |   |       |           `-ImplicitCastExpr 0x7fffd8412690 <col:48> 'int' <LValueToRValue>
|   |   |       |             `-DeclRefExpr 0x7fffd8412650 <col:48> 'int' lvalue Var 0x7fffd840ea90 'i' 'int'
|   |   |       `-BreakStmt 0x7fffd8412788 <line:3623:16>
|   |   `-BinaryOperator 0x7fffd8412a10 <line:3626:7, col:44> 'int' '='
|   |     |-ArraySubscriptExpr 0x7fffd8412940 <col:7, col:27> 'int' lvalue
|   |     | |-ImplicitCastExpr 0x7fffd8412910 <col:7, col:24> 'int *' <LValueToRValue>
|   |     | | `-ParenExpr 0x7fffd84128c8 <col:7, col:24> 'int *' lvalue
|   |     | |   `-UnaryOperator 0x7fffd84128a8 <col:8, col:9> 'int *' lvalue prefix '*'
|   |     | |     `-ImplicitCastExpr 0x7fffd8412890 <col:9> 'int **' <LValueToRValue>
|   |     | |       `-DeclRefExpr 0x7fffd8412868 <col:9> 'int **' lvalue ParmVar 0x7fffd840e438 'contour_lengths' 'int **'
|   |     | `-ImplicitCastExpr 0x7fffd8412928 <col:26> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fffd84128e8 <col:26> 'int' lvalue Var 0x7fffd840eb08 'n' 'int'
|   |     `-BinaryOperator 0x7fffd84129e8 <col:31, col:44> 'int' '-'
|   |       |-ImplicitCastExpr 0x7fffd84129b8 <col:31> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x7fffd8412968 <col:31> 'int' lvalue Var 0x7fffd840e8a8 'num_points' 'int'
|   |       `-ImplicitCastExpr 0x7fffd84129d0 <col:44> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x7fffd8412990 <col:44> 'int' lvalue Var 0x7fffd840eba0 'start' 'int'
|   |-ReturnStmt 0x7fffd8412af0 <line:3629:4, col:11>
|   | `-ImplicitCastExpr 0x7fffd8412ad8 <col:11> 'stbtt__point *' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd8412ab0 <col:11> 'stbtt__point *' lvalue Var 0x7fffd840e7e0 'points' 'stbtt__point *'
|   |-LabelStmt 0x7fffd8412ce0 <line:3630:1, line:468:49> 'error'
|   | `-ParenExpr 0x7fffd8412cc0 <col:31, col:49> 'void'
|   |   `-BinaryOperator 0x7fffd8412c98 <col:32, col:48> 'void' ','
|   |     |-CStyleCastExpr 0x7fffd8412ba8 <col:32, col:40> 'void' <ToVoid>
|   |     | `-ImplicitCastExpr 0x7fffd8412b90 <col:38, col:40> 'void *' <LValueToRValue>
|   |     |   `-ParenExpr 0x7fffd8412b70 <col:38, col:40> 'void *' lvalue
|   |     |     `-DeclRefExpr 0x7fffd8412b08 <line:3631:23> 'void *' lvalue ParmVar 0x7fffd840e588 'userdata' 'void *'
|   |     `-CallExpr 0x7fffd8412c38 <line:468:42, col:48> 'void'
|   |       |-ImplicitCastExpr 0x7fffd8412c20 <col:42> 'void (*)(void *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x7fffd8412bd0 <col:42> 'void (void *)' Function 0x7fffd831bec0 'free' 'void (void *)'
|   |       `-ImplicitCastExpr 0x7fffd8412c80 <line:3631:15> 'void *' <BitCast>
|   |         `-ImplicitCastExpr 0x7fffd8412c68 <col:15> 'stbtt__point *' <LValueToRValue>
|   |           `-DeclRefExpr 0x7fffd8412bf8 <col:15> 'stbtt__point *' lvalue Var 0x7fffd840e7e0 'points' 'stbtt__point *'
|   |-ParenExpr 0x7fffd8412ee8 <line:468:31, col:49> 'void'
|   | `-BinaryOperator 0x7fffd8412ec0 <col:32, col:48> 'void' ','
|   |   |-CStyleCastExpr 0x7fffd8412d98 <col:32, col:40> 'void' <ToVoid>
|   |   | `-ImplicitCastExpr 0x7fffd8412d80 <col:38, col:40> 'void *' <LValueToRValue>
|   |   |   `-ParenExpr 0x7fffd8412d60 <col:38, col:40> 'void *' lvalue
|   |   |     `-DeclRefExpr 0x7fffd8412cf8 <line:3632:33> 'void *' lvalue ParmVar 0x7fffd840e588 'userdata' 'void *'
|   |   `-CallExpr 0x7fffd8412e60 <line:468:42, col:48> 'void'
|   |     |-ImplicitCastExpr 0x7fffd8412e48 <col:42> 'void (*)(void *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd8412dc0 <col:42> 'void (void *)' Function 0x7fffd831bec0 'free' 'void (void *)'
|   |     `-ImplicitCastExpr 0x7fffd8412ea8 <line:3632:15, col:16> 'void *' <BitCast>
|   |       `-ImplicitCastExpr 0x7fffd8412e90 <col:15, col:16> 'int *' <LValueToRValue>
|   |         `-UnaryOperator 0x7fffd8412e28 <col:15, col:16> 'int *' lvalue prefix '*'
|   |           `-ImplicitCastExpr 0x7fffd8412e10 <col:16> 'int **' <LValueToRValue>
|   |             `-DeclRefExpr 0x7fffd8412de8 <col:16> 'int **' lvalue ParmVar 0x7fffd840e438 'contour_lengths' 'int **'
|   |-BinaryOperator 0x7fffd8412fa0 <line:3633:4, col:23> 'int *' '='
|   | |-UnaryOperator 0x7fffd8412f48 <col:4, col:5> 'int *' lvalue prefix '*'
|   | | `-ImplicitCastExpr 0x7fffd8412f30 <col:5> 'int **' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8412f08 <col:5> 'int **' lvalue ParmVar 0x7fffd840e438 'contour_lengths' 'int **'
|   | `-ImplicitCastExpr 0x7fffd8412f88 <col:23> 'int *' <NullToPointer>
|   |   `-IntegerLiteral 0x7fffd8412f68 <col:23> 'int' 0
|   |-BinaryOperator 0x7fffd8413048 <line:3634:4, col:20> 'int' '='
|   | |-UnaryOperator 0x7fffd8413008 <col:4, col:5> 'int' lvalue prefix '*'
|   | | `-ImplicitCastExpr 0x7fffd8412ff0 <col:5> 'int *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8412fc8 <col:5> 'int *' lvalue ParmVar 0x7fffd840e510 'num_contours' 'int *'
|   | `-IntegerLiteral 0x7fffd8413028 <col:20> 'int' 0
|   `-ReturnStmt 0x7fffd8413108 <line:3635:4, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25>
|     `-ImplicitCastExpr 0x7fffd84130f0 <col:16, col:25> 'stbtt__point *' <NullToPointer>
|       `-ParenExpr 0x7fffd84130d0 <col:16, col:25> 'void *'
|         `-CStyleCastExpr 0x7fffd84130a8 <col:17, col:24> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x7fffd8413070 <col:24> 'int' 0
|-FunctionDecl 0x7fffd84137c0 prev 0x7fffd835a340 <././stb/stb_truetype.h:501:19, line:3649:1> line:3638:16 used stbtt_Rasterize 'void (stbtt__bitmap *, float, stbtt_vertex *, int, float, float, float, float, int, int, int, void *)' extern
| |-ParmVarDecl 0x7fffd84131c0 <col:32, col:47> col:47 used result 'stbtt__bitmap *'
| |-ParmVarDecl 0x7fffd8413238 <col:55, col:61> col:61 used flatness_in_pixels 'float'
| |-ParmVarDecl 0x7fffd84132a8 <col:81, col:95> col:95 used vertices 'stbtt_vertex *'
| |-ParmVarDecl 0x7fffd8413320 <col:105, col:109> col:109 used num_verts 'int'
| |-ParmVarDecl 0x7fffd8413398 <col:120, col:126> col:126 used scale_x 'float'
| |-ParmVarDecl 0x7fffd8413410 <col:135, col:141> col:141 used scale_y 'float'
| |-ParmVarDecl 0x7fffd8413488 <col:150, col:156> col:156 used shift_x 'float'
| |-ParmVarDecl 0x7fffd8413500 <col:165, col:171> col:171 used shift_y 'float'
| |-ParmVarDecl 0x7fffd8413578 <col:180, col:184> col:184 used x_off 'int'
| |-ParmVarDecl 0x7fffd84135f0 <col:191, col:195> col:195 used y_off 'int'
| |-ParmVarDecl 0x7fffd8413668 <col:202, col:206> col:206 used invert 'int'
| |-ParmVarDecl 0x7fffd84136e0 <col:214, col:220> col:220 used userdata 'void *'
| `-CompoundStmt 0x7fffd8414888 <line:3639:1, line:3649:1>
|   |-DeclStmt 0x7fffd8413a90 <line:3640:4, col:66>
|   | `-VarDecl 0x7fffd84138d8 <col:4, col:59> col:10 used scale 'float' cinit
|   |   `-ConditionalOperator 0x7fffd8413a60 <col:29, col:59> 'float'
|   |     |-BinaryOperator 0x7fffd84139b8 <col:29, col:39> 'int' '>'
|   |     | |-ImplicitCastExpr 0x7fffd8413988 <col:29> 'float' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x7fffd8413938 <col:29> 'float' lvalue ParmVar 0x7fffd8413398 'scale_x' 'float'
|   |     | `-ImplicitCastExpr 0x7fffd84139a0 <col:39> 'float' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fffd8413960 <col:39> 'float' lvalue ParmVar 0x7fffd8413410 'scale_y' 'float'
|   |     |-ImplicitCastExpr 0x7fffd8413a30 <col:49> 'float' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd84139e0 <col:49> 'float' lvalue ParmVar 0x7fffd8413410 'scale_y' 'float'
|   |     `-ImplicitCastExpr 0x7fffd8413a48 <col:59> 'float' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd8413a08 <col:59> 'float' lvalue ParmVar 0x7fffd8413398 'scale_x' 'float'
|   |-DeclStmt 0x7fffd8413b40 <line:3641:4, col:30>
|   | `-VarDecl 0x7fffd8413ac0 <col:4, col:29> col:8 used winding_count 'int' cinit
|   |   `-IntegerLiteral 0x7fffd8413b20 <col:29> 'int' 0
|   |-DeclStmt 0x7fffd8413c68 <line:3642:4, col:33>
|   | `-VarDecl 0x7fffd8413b70 <col:4, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25> ././stb/stb_truetype.h:3642:9 used winding_lengths 'int *' cinit
|   |   `-ImplicitCastExpr 0x7fffd8413c50 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'int *' <NullToPointer>
|   |     `-ParenExpr 0x7fffd8413c30 <col:16, col:25> 'void *'
|   |       `-CStyleCastExpr 0x7fffd8413c08 <col:17, col:24> 'void *' <NullToPointer>
|   |         `-IntegerLiteral 0x7fffd8413bd0 <col:24> 'int' 0
|   |-DeclStmt 0x7fffd8413fe0 <././stb/stb_truetype.h:3643:4, col:141>
|   | `-VarDecl 0x7fffd8413c90 <col:4, col:140> col:18 used windings 'stbtt__point *' cinit
|   |   `-CallExpr 0x7fffd8413f40 <col:29, col:140> 'stbtt__point *'
|   |     |-ImplicitCastExpr 0x7fffd8413f28 <col:29> 'stbtt__point *(*)(stbtt_vertex *, int, float, int **, int *, void *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd8413cf0 <col:29> 'stbtt__point *(stbtt_vertex *, int, float, int **, int *, void *)' Function 0x7fffd840e700 'stbtt_FlattenCurves' 'stbtt__point *(stbtt_vertex *, int, float, int **, int *, void *)'
|   |     |-ImplicitCastExpr 0x7fffd8413f98 <col:49> 'stbtt_vertex *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd8413d18 <col:49> 'stbtt_vertex *' lvalue ParmVar 0x7fffd84132a8 'vertices' 'stbtt_vertex *'
|   |     |-ImplicitCastExpr 0x7fffd8413fb0 <col:59> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd8413d40 <col:59> 'int' lvalue ParmVar 0x7fffd8413320 'num_verts' 'int'
|   |     |-BinaryOperator 0x7fffd8413de8 <col:70, col:91> 'float' '/'
|   |     | |-ImplicitCastExpr 0x7fffd8413db8 <col:70> 'float' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x7fffd8413d68 <col:70> 'float' lvalue ParmVar 0x7fffd8413238 'flatness_in_pixels' 'float'
|   |     | `-ImplicitCastExpr 0x7fffd8413dd0 <col:91> 'float' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fffd8413d90 <col:91> 'float' lvalue Var 0x7fffd84138d8 'scale' 'float'
|   |     |-UnaryOperator 0x7fffd8413e38 <col:98, col:99> 'int **' prefix '&'
|   |     | `-DeclRefExpr 0x7fffd8413e10 <col:99> 'int *' lvalue Var 0x7fffd8413b70 'winding_lengths' 'int *'
|   |     |-UnaryOperator 0x7fffd8413e80 <col:116, col:117> 'int *' prefix '&'
|   |     | `-DeclRefExpr 0x7fffd8413e58 <col:117> 'int' lvalue Var 0x7fffd8413ac0 'winding_count' 'int'
|   |     `-ImplicitCastExpr 0x7fffd8413fc8 <col:132> 'void *' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd8413ea0 <col:132> 'void *' lvalue ParmVar 0x7fffd84136e0 'userdata' 'void *'
|   `-IfStmt 0x7fffd8414850 <line:3644:4, line:3648:4>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-ImplicitCastExpr 0x7fffd8414020 <line:3644:8> 'stbtt__point *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd8413ff8 <col:8> 'stbtt__point *' lvalue Var 0x7fffd8413c90 'windings' 'stbtt__point *'
|     |-CompoundStmt 0x7fffd8414828 <col:18, line:3648:4>
|     | |-CallExpr 0x7fffd84142b0 <line:3645:7, col:140> 'void'
|     | | |-ImplicitCastExpr 0x7fffd8414298 <col:7> 'void (*)(stbtt__bitmap *, stbtt__point *, int *, int, float, float, float, float, int, int, int, void *)' <FunctionToPointerDecay>
|     | | | `-DeclRefExpr 0x7fffd8414038 <col:7> 'void (stbtt__bitmap *, stbtt__point *, int *, int, float, float, float, float, int, int, int, void *)' Function 0x7fffd8404090 'stbtt__rasterize' 'void (stbtt__bitmap *, stbtt__point *, int *, int, float, float, float, float, int, int, int, void *)'
|     | | |-ImplicitCastExpr 0x7fffd8414338 <col:24> 'stbtt__bitmap *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd8414060 <col:24> 'stbtt__bitmap *' lvalue ParmVar 0x7fffd84131c0 'result' 'stbtt__bitmap *'
|     | | |-ImplicitCastExpr 0x7fffd8414350 <col:32> 'stbtt__point *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd8414088 <col:32> 'stbtt__point *' lvalue Var 0x7fffd8413c90 'windings' 'stbtt__point *'
|     | | |-ImplicitCastExpr 0x7fffd8414368 <col:42> 'int *' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd84140b0 <col:42> 'int *' lvalue Var 0x7fffd8413b70 'winding_lengths' 'int *'
|     | | |-ImplicitCastExpr 0x7fffd8414380 <col:59> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd84140d8 <col:59> 'int' lvalue Var 0x7fffd8413ac0 'winding_count' 'int'
|     | | |-ImplicitCastExpr 0x7fffd8414398 <col:74> 'float' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd8414100 <col:74> 'float' lvalue ParmVar 0x7fffd8413398 'scale_x' 'float'
|     | | |-ImplicitCastExpr 0x7fffd84143b0 <col:83> 'float' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd8414128 <col:83> 'float' lvalue ParmVar 0x7fffd8413410 'scale_y' 'float'
|     | | |-ImplicitCastExpr 0x7fffd84143c8 <col:92> 'float' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd8414150 <col:92> 'float' lvalue ParmVar 0x7fffd8413488 'shift_x' 'float'
|     | | |-ImplicitCastExpr 0x7fffd84143e0 <col:101> 'float' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd8414178 <col:101> 'float' lvalue ParmVar 0x7fffd8413500 'shift_y' 'float'
|     | | |-ImplicitCastExpr 0x7fffd84143f8 <col:110> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd84141a0 <col:110> 'int' lvalue ParmVar 0x7fffd8413578 'x_off' 'int'
|     | | |-ImplicitCastExpr 0x7fffd8414410 <col:117> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd84141c8 <col:117> 'int' lvalue ParmVar 0x7fffd84135f0 'y_off' 'int'
|     | | |-ImplicitCastExpr 0x7fffd8414428 <col:124> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x7fffd84141f0 <col:124> 'int' lvalue ParmVar 0x7fffd8413668 'invert' 'int'
|     | | `-ImplicitCastExpr 0x7fffd8414440 <col:132> 'void *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x7fffd8414218 <col:132> 'void *' lvalue ParmVar 0x7fffd84136e0 'userdata' 'void *'
|     | |-ParenExpr 0x7fffd8414630 <line:468:31, col:49> 'void'
|     | | `-BinaryOperator 0x7fffd8414608 <col:32, col:48> 'void' ','
|     | |   |-CStyleCastExpr 0x7fffd84144f8 <col:32, col:40> 'void' <ToVoid>
|     | |   | `-ImplicitCastExpr 0x7fffd84144e0 <col:38, col:40> 'void *' <LValueToRValue>
|     | |   |   `-ParenExpr 0x7fffd84144c0 <col:38, col:40> 'void *' lvalue
|     | |   |     `-DeclRefExpr 0x7fffd8414458 <line:3646:35> 'void *' lvalue ParmVar 0x7fffd84136e0 'userdata' 'void *'
|     | |   `-CallExpr 0x7fffd84145a8 <line:468:42, col:48> 'void'
|     | |     |-ImplicitCastExpr 0x7fffd8414590 <col:42> 'void (*)(void *)' <FunctionToPointerDecay>
|     | |     | `-DeclRefExpr 0x7fffd8414540 <col:42> 'void (void *)' Function 0x7fffd831bec0 'free' 'void (void *)'
|     | |     `-ImplicitCastExpr 0x7fffd84145f0 <line:3646:18> 'void *' <BitCast>
|     | |       `-ImplicitCastExpr 0x7fffd84145d8 <col:18> 'int *' <LValueToRValue>
|     | |         `-DeclRefExpr 0x7fffd8414568 <col:18> 'int *' lvalue Var 0x7fffd8413b70 'winding_lengths' 'int *'
|     | `-ParenExpr 0x7fffd8414808 <line:468:31, col:49> 'void'
|     |   `-BinaryOperator 0x7fffd84147e0 <col:32, col:48> 'void' ','
|     |     |-CStyleCastExpr 0x7fffd84146f0 <col:32, col:40> 'void' <ToVoid>
|     |     | `-ImplicitCastExpr 0x7fffd84146d8 <col:38, col:40> 'void *' <LValueToRValue>
|     |     |   `-ParenExpr 0x7fffd84146b8 <col:38, col:40> 'void *' lvalue
|     |     |     `-DeclRefExpr 0x7fffd8414650 <line:3647:28> 'void *' lvalue ParmVar 0x7fffd84136e0 'userdata' 'void *'
|     |     `-CallExpr 0x7fffd8414780 <line:468:42, col:48> 'void'
|     |       |-ImplicitCastExpr 0x7fffd8414768 <col:42> 'void (*)(void *)' <FunctionToPointerDecay>
|     |       | `-DeclRefExpr 0x7fffd8414718 <col:42> 'void (void *)' Function 0x7fffd831bec0 'free' 'void (void *)'
|     |       `-ImplicitCastExpr 0x7fffd84147c8 <line:3647:18> 'void *' <BitCast>
|     |         `-ImplicitCastExpr 0x7fffd84147b0 <col:18> 'stbtt__point *' <LValueToRValue>
|     |           `-DeclRefExpr 0x7fffd8414740 <col:18> 'stbtt__point *' lvalue Var 0x7fffd8413c90 'windings' 'stbtt__point *'
|     `-<<<NULL>>>
|-FunctionDecl 0x7fffd84149e0 prev 0x7fffd8352cf0 <line:501:19, line:3654:1> line:3651:16 stbtt_FreeBitmap 'void (unsigned char *, void *)' extern
| |-ParmVarDecl 0x7fffd84148d8 <col:33, col:48> col:48 used bitmap 'unsigned char *'
| |-ParmVarDecl 0x7fffd8414950 <col:56, col:62> col:62 used userdata 'void *'
| `-CompoundStmt 0x7fffd8414c68 <line:3652:1, line:3654:1>
|   `-ParenExpr 0x7fffd8414c48 <line:468:31, col:49> 'void'
|     `-BinaryOperator 0x7fffd8414c20 <col:32, col:48> 'void' ','
|       |-CStyleCastExpr 0x7fffd8414b30 <col:32, col:40> 'void' <ToVoid>
|       | `-ImplicitCastExpr 0x7fffd8414b18 <col:38, col:40> 'void *' <LValueToRValue>
|       |   `-ParenExpr 0x7fffd8414af8 <col:38, col:40> 'void *' lvalue
|       |     `-DeclRefExpr 0x7fffd8414a90 <line:3653:23> 'void *' lvalue ParmVar 0x7fffd8414950 'userdata' 'void *'
|       `-CallExpr 0x7fffd8414bc0 <line:468:42, col:48> 'void'
|         |-ImplicitCastExpr 0x7fffd8414ba8 <col:42> 'void (*)(void *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x7fffd8414b58 <col:42> 'void (void *)' Function 0x7fffd831bec0 'free' 'void (void *)'
|         `-ImplicitCastExpr 0x7fffd8414c08 <line:3653:15> 'void *' <BitCast>
|           `-ImplicitCastExpr 0x7fffd8414bf0 <col:15> 'unsigned char *' <LValueToRValue>
|             `-DeclRefExpr 0x7fffd8414b80 <col:15> 'unsigned char *' lvalue ParmVar 0x7fffd84148d8 'bitmap' 'unsigned char *'
|-FunctionDecl 0x7fffd84151a0 prev 0x7fffd83568b8 <line:501:19, line:3694:1> line:3656:26 used stbtt_GetGlyphBitmapSubpixel 'unsigned char *(const stbtt_fontinfo *, float, float, float, float, int, int *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd8414c90 <col:55, col:77> col:77 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8414d08 <col:83, col:89> col:89 used scale_x 'float'
| |-ParmVarDecl 0x7fffd8414d80 <col:98, col:104> col:104 used scale_y 'float'
| |-ParmVarDecl 0x7fffd8414df8 <col:113, col:119> col:119 used shift_x 'float'
| |-ParmVarDecl 0x7fffd8414e70 <col:128, col:134> col:134 used shift_y 'float'
| |-ParmVarDecl 0x7fffd8414ee8 <col:143, col:147> col:147 used glyph 'int'
| |-ParmVarDecl 0x7fffd8414f60 <col:154, col:159> col:159 used width 'int *'
| |-ParmVarDecl 0x7fffd8414fd8 <col:166, col:171> col:171 used height 'int *'
| |-ParmVarDecl 0x7fffd8415050 <col:179, col:184> col:184 used xoff 'int *'
| |-ParmVarDecl 0x7fffd84150c8 <col:190, col:195> col:195 used yoff 'int *'
| `-CompoundStmt 0x7fffd8417998 <line:3657:1, line:3694:1>
|   |-DeclStmt 0x7fffd8415498 <line:3658:4, col:23>
|   | |-VarDecl 0x7fffd84152a8 <col:4, col:8> col:8 used ix0 'int'
|   | |-VarDecl 0x7fffd8415320 <col:4, col:12> col:12 used iy0 'int'
|   | |-VarDecl 0x7fffd8415398 <col:4, col:16> col:16 used ix1 'int'
|   | `-VarDecl 0x7fffd8415410 <col:4, col:20> col:20 used iy1 'int'
|   |-DeclStmt 0x7fffd8415520 <line:3659:4, col:21>
|   | `-VarDecl 0x7fffd84154c0 <col:4, col:18> col:18 used gbm 'stbtt__bitmap':'stbtt__bitmap'
|   |-DeclStmt 0x7fffd84155a8 <line:3660:4, col:26>
|   | `-VarDecl 0x7fffd8415548 <col:4, col:18> col:18 used vertices 'stbtt_vertex *'
|   |-DeclStmt 0x7fffd8415780 <line:3661:4, col:63>
|   | `-VarDecl 0x7fffd84155d8 <col:4, col:62> col:8 used num_verts 'int' cinit
|   |   `-CallExpr 0x7fffd8415710 <col:20, col:62> 'int'
|   |     |-ImplicitCastExpr 0x7fffd84156f8 <col:20> 'int (*)(const stbtt_fontinfo *, int, stbtt_vertex **)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd8415638 <col:20> 'int (const stbtt_fontinfo *, int, stbtt_vertex **)' Function 0x7fffd83bf8a8 'stbtt_GetGlyphShape' 'int (const stbtt_fontinfo *, int, stbtt_vertex **)'
|   |     |-ImplicitCastExpr 0x7fffd8415750 <col:40> 'const stbtt_fontinfo *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd8415660 <col:40> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd8414c90 'info' 'const stbtt_fontinfo *'
|   |     |-ImplicitCastExpr 0x7fffd8415768 <col:46> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd8415688 <col:46> 'int' lvalue ParmVar 0x7fffd8414ee8 'glyph' 'int'
|   |     `-UnaryOperator 0x7fffd84156d8 <col:53, col:54> 'stbtt_vertex **' prefix '&'
|   |       `-DeclRefExpr 0x7fffd84156b0 <col:54> 'stbtt_vertex *' lvalue Var 0x7fffd8415548 'vertices' 'stbtt_vertex *'
|   |-IfStmt 0x7fffd84158c8 <line:3663:4, col:32>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd8415810 <col:8, col:19> 'int' '=='
|   | | |-ImplicitCastExpr 0x7fffd84157e0 <col:8> 'float' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd8415798 <col:8> 'float' lvalue ParmVar 0x7fffd8414d08 'scale_x' 'float'
|   | | `-ImplicitCastExpr 0x7fffd84157f8 <col:19> 'float' <IntegralToFloating>
|   | |   `-IntegerLiteral 0x7fffd84157c0 <col:19> 'int' 0
|   | |-BinaryOperator 0x7fffd84158a0 <col:22, col:32> 'float' '='
|   | | |-DeclRefExpr 0x7fffd8415838 <col:22> 'float' lvalue ParmVar 0x7fffd8414d08 'scale_x' 'float'
|   | | `-ImplicitCastExpr 0x7fffd8415888 <col:32> 'float' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8415860 <col:32> 'float' lvalue ParmVar 0x7fffd8414d80 'scale_y' 'float'
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd8415e20 <line:3664:4, line:3670:4>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd8415978 <line:3664:8, col:19> 'int' '=='
|   | | |-ImplicitCastExpr 0x7fffd8415948 <col:8> 'float' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd8415900 <col:8> 'float' lvalue ParmVar 0x7fffd8414d80 'scale_y' 'float'
|   | | `-ImplicitCastExpr 0x7fffd8415960 <col:19> 'float' <IntegralToFloating>
|   | |   `-IntegerLiteral 0x7fffd8415928 <col:19> 'int' 0
|   | |-CompoundStmt 0x7fffd8415e00 <col:22, line:3670:4>
|   | | |-IfStmt 0x7fffd8415d38 <line:3665:7, line:3668:7>
|   | | | |-<<<NULL>>>
|   | | | |-<<<NULL>>>
|   | | | |-BinaryOperator 0x7fffd8415a18 <line:3665:11, col:22> 'int' '=='
|   | | | | |-ImplicitCastExpr 0x7fffd84159e8 <col:11> 'float' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x7fffd84159a0 <col:11> 'float' lvalue ParmVar 0x7fffd8414d08 'scale_x' 'float'
|   | | | | `-ImplicitCastExpr 0x7fffd8415a00 <col:22> 'float' <IntegralToFloating>
|   | | | |   `-IntegerLiteral 0x7fffd84159c8 <col:22> 'int' 0
|   | | | |-CompoundStmt 0x7fffd8415d18 <col:25, line:3668:7>
|   | | | | |-ParenExpr 0x7fffd8415c48 <line:468:31, col:49> 'void'
|   | | | | | `-BinaryOperator 0x7fffd8415c20 <col:32, col:48> 'void' ','
|   | | | | |   |-CStyleCastExpr 0x7fffd8415b30 <col:32, col:40> 'void' <ToVoid>
|   | | | | |   | `-ImplicitCastExpr 0x7fffd8415b18 <col:38, col:40> 'void *' <LValueToRValue>
|   | | | | |   |   `-ParenExpr 0x7fffd8415af8 <col:38, col:40> 'void *const' lvalue
|   | | | | |   |     `-MemberExpr 0x7fffd8415a80 <line:3666:31, col:37> 'void *const' lvalue ->userdata 0x7fffd834cb78
|   | | | | |   |       `-ImplicitCastExpr 0x7fffd8415a68 <col:31> 'const stbtt_fontinfo *' <LValueToRValue>
|   | | | | |   |         `-DeclRefExpr 0x7fffd8415a40 <col:31> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd8414c90 'info' 'const stbtt_fontinfo *'
|   | | | | |   `-CallExpr 0x7fffd8415bc0 <line:468:42, col:48> 'void'
|   | | | | |     |-ImplicitCastExpr 0x7fffd8415ba8 <col:42> 'void (*)(void *)' <FunctionToPointerDecay>
|   | | | | |     | `-DeclRefExpr 0x7fffd8415b58 <col:42> 'void (void *)' Function 0x7fffd831bec0 'free' 'void (void *)'
|   | | | | |     `-ImplicitCastExpr 0x7fffd8415c08 <line:3666:21> 'void *' <BitCast>
|   | | | | |       `-ImplicitCastExpr 0x7fffd8415bf0 <col:21> 'stbtt_vertex *' <LValueToRValue>
|   | | | | |         `-DeclRefExpr 0x7fffd8415b80 <col:21> 'stbtt_vertex *' lvalue Var 0x7fffd8415548 'vertices' 'stbtt_vertex *'
|   | | | | `-ReturnStmt 0x7fffd8415d00 <line:3667:10, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25>
|   | | | |   `-ImplicitCastExpr 0x7fffd8415ce8 <col:16, col:25> 'unsigned char *' <NullToPointer>
|   | | | |     `-ParenExpr 0x7fffd8415cc8 <col:16, col:25> 'void *'
|   | | | |       `-CStyleCastExpr 0x7fffd8415ca0 <col:17, col:24> 'void *' <NullToPointer>
|   | | | |         `-IntegerLiteral 0x7fffd8415c68 <col:24> 'int' 0
|   | | | `-<<<NULL>>>
|   | | `-BinaryOperator 0x7fffd8415dd8 <././stb/stb_truetype.h:3669:7, col:17> 'float' '='
|   | |   |-DeclRefExpr 0x7fffd8415d70 <col:7> 'float' lvalue ParmVar 0x7fffd8414d80 'scale_y' 'float'
|   | |   `-ImplicitCastExpr 0x7fffd8415dc0 <col:17> 'float' <LValueToRValue>
|   | |     `-DeclRefExpr 0x7fffd8415d98 <col:17> 'float' lvalue ParmVar 0x7fffd8414d08 'scale_x' 'float'
|   | `-<<<NULL>>>
|   |-CallExpr 0x7fffd84160a8 <line:3672:4, col:104> 'void'
|   | |-ImplicitCastExpr 0x7fffd8416090 <col:4> 'void (*)(const stbtt_fontinfo *, int, float, float, float, float, int *, int *, int *, int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fffd8415e58 <col:4> 'void (const stbtt_fontinfo *, int, float, float, float, float, int *, int *, int *, int *)' Function 0x7fffd83db948 'stbtt_GetGlyphBitmapBoxSubpixel' 'void (const stbtt_fontinfo *, int, float, float, float, float, int *, int *, int *, int *)'
|   | |-ImplicitCastExpr 0x7fffd8416120 <col:36> 'const stbtt_fontinfo *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd8415e80 <col:36> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd8414c90 'info' 'const stbtt_fontinfo *'
|   | |-ImplicitCastExpr 0x7fffd8416138 <col:42> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd8415ea8 <col:42> 'int' lvalue ParmVar 0x7fffd8414ee8 'glyph' 'int'
|   | |-ImplicitCastExpr 0x7fffd8416150 <col:49> 'float' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd8415ed0 <col:49> 'float' lvalue ParmVar 0x7fffd8414d08 'scale_x' 'float'
|   | |-ImplicitCastExpr 0x7fffd8416168 <col:58> 'float' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd8415ef8 <col:58> 'float' lvalue ParmVar 0x7fffd8414d80 'scale_y' 'float'
|   | |-ImplicitCastExpr 0x7fffd8416180 <col:67> 'float' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd8415f20 <col:67> 'float' lvalue ParmVar 0x7fffd8414df8 'shift_x' 'float'
|   | |-ImplicitCastExpr 0x7fffd8416198 <col:76> 'float' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd8415f48 <col:76> 'float' lvalue ParmVar 0x7fffd8414e70 'shift_y' 'float'
|   | |-UnaryOperator 0x7fffd8415f98 <col:85, col:86> 'int *' prefix '&'
|   | | `-DeclRefExpr 0x7fffd8415f70 <col:86> 'int' lvalue Var 0x7fffd84152a8 'ix0' 'int'
|   | |-UnaryOperator 0x7fffd8415fe0 <col:90, col:91> 'int *' prefix '&'
|   | | `-DeclRefExpr 0x7fffd8415fb8 <col:91> 'int' lvalue Var 0x7fffd8415320 'iy0' 'int'
|   | |-UnaryOperator 0x7fffd8416028 <col:95, col:96> 'int *' prefix '&'
|   | | `-DeclRefExpr 0x7fffd8416000 <col:96> 'int' lvalue Var 0x7fffd8415398 'ix1' 'int'
|   | `-UnaryOperator 0x7fffd8416070 <col:100, col:101> 'int *' prefix '&'
|   |   `-DeclRefExpr 0x7fffd8416048 <col:101> 'int' lvalue Var 0x7fffd8415410 'iy1' 'int'
|   |-BinaryOperator 0x7fffd84162d8 <line:3675:4, col:22> 'int' '='
|   | |-MemberExpr 0x7fffd84161d8 <col:4, col:8> 'int' lvalue .w 0x7fffd83598d8
|   | | `-DeclRefExpr 0x7fffd84161b0 <col:4> 'stbtt__bitmap':'stbtt__bitmap' lvalue Var 0x7fffd84154c0 'gbm' 'stbtt__bitmap':'stbtt__bitmap'
|   | `-ParenExpr 0x7fffd84162b8 <col:12, col:22> 'int'
|   |   `-BinaryOperator 0x7fffd8416290 <col:13, col:19> 'int' '-'
|   |     |-ImplicitCastExpr 0x7fffd8416260 <col:13> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd8416210 <col:13> 'int' lvalue Var 0x7fffd8415398 'ix1' 'int'
|   |     `-ImplicitCastExpr 0x7fffd8416278 <col:19> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd8416238 <col:19> 'int' lvalue Var 0x7fffd84152a8 'ix0' 'int'
|   |-BinaryOperator 0x7fffd8416488 <line:3676:4, col:22> 'int' '='
|   | |-MemberExpr 0x7fffd8416388 <col:4, col:8> 'int' lvalue .h 0x7fffd8359938
|   | | `-DeclRefExpr 0x7fffd8416360 <col:4> 'stbtt__bitmap':'stbtt__bitmap' lvalue Var 0x7fffd84154c0 'gbm' 'stbtt__bitmap':'stbtt__bitmap'
|   | `-ParenExpr 0x7fffd8416468 <col:12, col:22> 'int'
|   |   `-BinaryOperator 0x7fffd8416440 <col:13, col:19> 'int' '-'
|   |     |-ImplicitCastExpr 0x7fffd8416410 <col:13> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd84163c0 <col:13> 'int' lvalue Var 0x7fffd8415410 'iy1' 'int'
|   |     `-ImplicitCastExpr 0x7fffd8416428 <col:19> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd84163e8 <col:19> 'int' lvalue Var 0x7fffd8415320 'iy0' 'int'
|   |-BinaryOperator 0x7fffd84165c8 <line:3677:4, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25> 'unsigned char *' '='
|   | |-MemberExpr 0x7fffd84164d8 <././stb/stb_truetype.h:3677:4, col:8> 'unsigned char *' lvalue .pixels 0x7fffd83599f8
|   | | `-DeclRefExpr 0x7fffd84164b0 <col:4> 'stbtt__bitmap':'stbtt__bitmap' lvalue Var 0x7fffd84154c0 'gbm' 'stbtt__bitmap':'stbtt__bitmap'
|   | `-ImplicitCastExpr 0x7fffd84165b0 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'unsigned char *' <NullToPointer>
|   |   `-ParenExpr 0x7fffd8416590 <col:16, col:25> 'void *'
|   |     `-CStyleCastExpr 0x7fffd8416568 <col:17, col:24> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x7fffd8416510 <col:24> 'int' 0
|   |-IfStmt 0x7fffd8416730 <././stb/stb_truetype.h:3679:4, col:30>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd8416618 <col:8> 'int *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd84165f0 <col:8> 'int *' lvalue ParmVar 0x7fffd8414f60 'width' 'int *'
|   | |-BinaryOperator 0x7fffd8416708 <col:16, col:30> 'int' '='
|   | | |-UnaryOperator 0x7fffd8416670 <col:16, col:17> 'int' lvalue prefix '*'
|   | | | `-ImplicitCastExpr 0x7fffd8416658 <col:17> 'int *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd8416630 <col:17> 'int *' lvalue ParmVar 0x7fffd8414f60 'width' 'int *'
|   | | `-ImplicitCastExpr 0x7fffd84166f0 <col:26, col:30> 'int' <LValueToRValue>
|   | |   `-MemberExpr 0x7fffd84166b8 <col:26, col:30> 'int' lvalue .w 0x7fffd83598d8
|   | |     `-DeclRefExpr 0x7fffd8416690 <col:26> 'stbtt__bitmap':'stbtt__bitmap' lvalue Var 0x7fffd84154c0 'gbm' 'stbtt__bitmap':'stbtt__bitmap'
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd84168a8 <line:3680:4, col:30>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd8416790 <col:8> 'int *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd8416768 <col:8> 'int *' lvalue ParmVar 0x7fffd8414fd8 'height' 'int *'
|   | |-BinaryOperator 0x7fffd8416880 <col:16, col:30> 'int' '='
|   | | |-UnaryOperator 0x7fffd84167e8 <col:16, col:17> 'int' lvalue prefix '*'
|   | | | `-ImplicitCastExpr 0x7fffd84167d0 <col:17> 'int *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd84167a8 <col:17> 'int *' lvalue ParmVar 0x7fffd8414fd8 'height' 'int *'
|   | | `-ImplicitCastExpr 0x7fffd8416868 <col:26, col:30> 'int' <LValueToRValue>
|   | |   `-MemberExpr 0x7fffd8416830 <col:26, col:30> 'int' lvalue .h 0x7fffd8359938
|   | |     `-DeclRefExpr 0x7fffd8416808 <col:26> 'stbtt__bitmap':'stbtt__bitmap' lvalue Var 0x7fffd84154c0 'gbm' 'stbtt__bitmap':'stbtt__bitmap'
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd84169e8 <line:3681:4, col:26>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd8416908 <col:8> 'int *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd84168e0 <col:8> 'int *' lvalue ParmVar 0x7fffd8415050 'xoff' 'int *'
|   | |-BinaryOperator 0x7fffd84169c0 <col:16, col:26> 'int' '='
|   | | |-UnaryOperator 0x7fffd8416960 <col:16, col:17> 'int' lvalue prefix '*'
|   | | | `-ImplicitCastExpr 0x7fffd8416948 <col:17> 'int *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd8416920 <col:17> 'int *' lvalue ParmVar 0x7fffd8415050 'xoff' 'int *'
|   | | `-ImplicitCastExpr 0x7fffd84169a8 <col:26> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8416980 <col:26> 'int' lvalue Var 0x7fffd84152a8 'ix0' 'int'
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd8416b28 <line:3682:4, col:26>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd8416a48 <col:8> 'int *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd8416a20 <col:8> 'int *' lvalue ParmVar 0x7fffd84150c8 'yoff' 'int *'
|   | |-BinaryOperator 0x7fffd8416b00 <col:16, col:26> 'int' '='
|   | | |-UnaryOperator 0x7fffd8416aa0 <col:16, col:17> 'int' lvalue prefix '*'
|   | | | `-ImplicitCastExpr 0x7fffd8416a88 <col:17> 'int *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd8416a60 <col:17> 'int *' lvalue ParmVar 0x7fffd84150c8 'yoff' 'int *'
|   | | `-ImplicitCastExpr 0x7fffd8416ae8 <col:26> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8416ac0 <col:26> 'int' lvalue Var 0x7fffd8415320 'iy0' 'int'
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd84176a8 <line:3684:4, line:3691:4>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd8416c50 <line:3684:8, col:21> 'int' '&&'
|   | | |-ImplicitCastExpr 0x7fffd8416c20 <col:8, col:12> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x7fffd8416b88 <col:8, col:12> 'int' lvalue .w 0x7fffd83598d8
|   | | |   `-DeclRefExpr 0x7fffd8416b60 <col:8> 'stbtt__bitmap':'stbtt__bitmap' lvalue Var 0x7fffd84154c0 'gbm' 'stbtt__bitmap':'stbtt__bitmap'
|   | | `-ImplicitCastExpr 0x7fffd8416c38 <col:17, col:21> 'int' <LValueToRValue>
|   | |   `-MemberExpr 0x7fffd8416be8 <col:17, col:21> 'int' lvalue .h 0x7fffd8359938
|   | |     `-DeclRefExpr 0x7fffd8416bc0 <col:17> 'stbtt__bitmap':'stbtt__bitmap' lvalue Var 0x7fffd84154c0 'gbm' 'stbtt__bitmap':'stbtt__bitmap'
|   | |-CompoundStmt 0x7fffd8417688 <col:24, line:3691:4>
|   | | |-BinaryOperator 0x7fffd8417050 <line:3685:7, line:467:51> 'unsigned char *' '='
|   | | | |-MemberExpr 0x7fffd8416ca0 <line:3685:7, col:11> 'unsigned char *' lvalue .pixels 0x7fffd83599f8
|   | | | | `-DeclRefExpr 0x7fffd8416c78 <col:7> 'stbtt__bitmap':'stbtt__bitmap' lvalue Var 0x7fffd84154c0 'gbm' 'stbtt__bitmap':'stbtt__bitmap'
|   | | | `-CStyleCastExpr 0x7fffd8417028 <col:20, line:467:51> 'unsigned char *' <BitCast>
|   | | |   `-ParenExpr 0x7fffd8417008 <col:31, col:51> 'void *'
|   | | |     `-BinaryOperator 0x7fffd8416fe0 <col:32, col:50> 'void *' ','
|   | | |       |-CStyleCastExpr 0x7fffd8416dc8 <col:32, col:40> 'void' <ToVoid>
|   | | |       | `-ImplicitCastExpr 0x7fffd8416db0 <col:38, col:40> 'void *' <LValueToRValue>
|   | | |       |   `-ParenExpr 0x7fffd8416d90 <col:38, col:40> 'void *const' lvalue
|   | | |       |     `-MemberExpr 0x7fffd8416d18 <line:3685:66, col:72> 'void *const' lvalue ->userdata 0x7fffd834cb78
|   | | |       |       `-ImplicitCastExpr 0x7fffd8416d00 <col:66> 'const stbtt_fontinfo *' <LValueToRValue>
|   | | |       |         `-DeclRefExpr 0x7fffd8416cd8 <col:66> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd8414c90 'info' 'const stbtt_fontinfo *'
|   | | |       `-CallExpr 0x7fffd8416f48 <line:467:42, col:50> 'void *'
|   | | |         |-ImplicitCastExpr 0x7fffd8416f30 <col:42> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|   | | |         | `-DeclRefExpr 0x7fffd8416df0 <col:42> 'void *(unsigned long)' Function 0x7fffd831b4b0 'malloc' 'void *(unsigned long)'
|   | | |         `-ImplicitCastExpr 0x7fffd8416f78 <line:3685:51, col:63> 'unsigned long' <IntegralCast>
|   | | |           `-BinaryOperator 0x7fffd8416f08 <col:51, col:63> 'int' '*'
|   | | |             |-ImplicitCastExpr 0x7fffd8416ed8 <col:51, col:55> 'int' <LValueToRValue>
|   | | |             | `-MemberExpr 0x7fffd8416e40 <col:51, col:55> 'int' lvalue .w 0x7fffd83598d8
|   | | |             |   `-DeclRefExpr 0x7fffd8416e18 <col:51> 'stbtt__bitmap':'stbtt__bitmap' lvalue Var 0x7fffd84154c0 'gbm' 'stbtt__bitmap':'stbtt__bitmap'
|   | | |             `-ImplicitCastExpr 0x7fffd8416ef0 <col:59, col:63> 'int' <LValueToRValue>
|   | | |               `-MemberExpr 0x7fffd8416ea0 <col:59, col:63> 'int' lvalue .h 0x7fffd8359938
|   | | |                 `-DeclRefExpr 0x7fffd8416e78 <col:59> 'stbtt__bitmap':'stbtt__bitmap' lvalue Var 0x7fffd84154c0 'gbm' 'stbtt__bitmap':'stbtt__bitmap'
|   | | `-IfStmt 0x7fffd8417650 <line:3686:7, line:3690:7>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-ImplicitCastExpr 0x7fffd84170d8 <line:3686:11, col:15> 'unsigned char *' <LValueToRValue>
|   | |   | `-MemberExpr 0x7fffd84170a0 <col:11, col:15> 'unsigned char *' lvalue .pixels 0x7fffd83599f8
|   | |   |   `-DeclRefExpr 0x7fffd8417078 <col:11> 'stbtt__bitmap':'stbtt__bitmap' lvalue Var 0x7fffd84154c0 'gbm' 'stbtt__bitmap':'stbtt__bitmap'
|   | |   |-CompoundStmt 0x7fffd8417630 <col:23, line:3690:7>
|   | |   | |-BinaryOperator 0x7fffd84171c8 <line:3687:10, col:27> 'int' '='
|   | |   | | |-MemberExpr 0x7fffd8417118 <col:10, col:14> 'int' lvalue .stride 0x7fffd8359998
|   | |   | | | `-DeclRefExpr 0x7fffd84170f0 <col:10> 'stbtt__bitmap':'stbtt__bitmap' lvalue Var 0x7fffd84154c0 'gbm' 'stbtt__bitmap':'stbtt__bitmap'
|   | |   | | `-ImplicitCastExpr 0x7fffd84171b0 <col:23, col:27> 'int' <LValueToRValue>
|   | |   | |   `-MemberExpr 0x7fffd8417178 <col:23, col:27> 'int' lvalue .w 0x7fffd83598d8
|   | |   | |     `-DeclRefExpr 0x7fffd8417150 <col:23> 'stbtt__bitmap':'stbtt__bitmap' lvalue Var 0x7fffd84154c0 'gbm' 'stbtt__bitmap':'stbtt__bitmap'
|   | |   | `-CallExpr 0x7fffd84174d0 <line:3689:10, col:123> 'void'
|   | |   |   |-ImplicitCastExpr 0x7fffd84174b8 <col:10> 'void (*)(stbtt__bitmap *, float, stbtt_vertex *, int, float, float, float, float, int, int, int, void *)' <FunctionToPointerDecay>
|   | |   |   | `-DeclRefExpr 0x7fffd84171f0 <col:10> 'void (stbtt__bitmap *, float, stbtt_vertex *, int, float, float, float, float, int, int, int, void *)' Function 0x7fffd84137c0 'stbtt_Rasterize' 'void (stbtt__bitmap *, float, stbtt_vertex *, int, float, float, float, float, int, int, int, void *)'
|   | |   |   |-UnaryOperator 0x7fffd8417240 <col:26, col:27> 'stbtt__bitmap *' prefix '&'
|   | |   |   | `-DeclRefExpr 0x7fffd8417218 <col:27> 'stbtt__bitmap':'stbtt__bitmap' lvalue Var 0x7fffd84154c0 'gbm' 'stbtt__bitmap':'stbtt__bitmap'
|   | |   |   |-FloatingLiteral 0x7fffd8417260 <col:32> 'float' 3.500000e-01
|   | |   |   |-ImplicitCastExpr 0x7fffd8417558 <col:39> 'stbtt_vertex *' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x7fffd8417280 <col:39> 'stbtt_vertex *' lvalue Var 0x7fffd8415548 'vertices' 'stbtt_vertex *'
|   | |   |   |-ImplicitCastExpr 0x7fffd8417570 <col:49> 'int' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x7fffd84172a8 <col:49> 'int' lvalue Var 0x7fffd84155d8 'num_verts' 'int'
|   | |   |   |-ImplicitCastExpr 0x7fffd8417588 <col:60> 'float' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x7fffd84172d0 <col:60> 'float' lvalue ParmVar 0x7fffd8414d08 'scale_x' 'float'
|   | |   |   |-ImplicitCastExpr 0x7fffd84175a0 <col:69> 'float' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x7fffd84172f8 <col:69> 'float' lvalue ParmVar 0x7fffd8414d80 'scale_y' 'float'
|   | |   |   |-ImplicitCastExpr 0x7fffd84175b8 <col:78> 'float' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x7fffd8417320 <col:78> 'float' lvalue ParmVar 0x7fffd8414df8 'shift_x' 'float'
|   | |   |   |-ImplicitCastExpr 0x7fffd84175d0 <col:87> 'float' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x7fffd8417348 <col:87> 'float' lvalue ParmVar 0x7fffd8414e70 'shift_y' 'float'
|   | |   |   |-ImplicitCastExpr 0x7fffd84175e8 <col:96> 'int' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x7fffd8417370 <col:96> 'int' lvalue Var 0x7fffd84152a8 'ix0' 'int'
|   | |   |   |-ImplicitCastExpr 0x7fffd8417600 <col:101> 'int' <LValueToRValue>
|   | |   |   | `-DeclRefExpr 0x7fffd8417398 <col:101> 'int' lvalue Var 0x7fffd8415320 'iy0' 'int'
|   | |   |   |-IntegerLiteral 0x7fffd84173c0 <col:106> 'int' 1
|   | |   |   `-ImplicitCastExpr 0x7fffd8417618 <col:109, col:115> 'void *' <LValueToRValue>
|   | |   |     `-MemberExpr 0x7fffd8417420 <col:109, col:115> 'void *const' lvalue ->userdata 0x7fffd834cb78
|   | |   |       `-ImplicitCastExpr 0x7fffd8417408 <col:109> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |   |         `-DeclRefExpr 0x7fffd84173e0 <col:109> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd8414c90 'info' 'const stbtt_fontinfo *'
|   | |   `-<<<NULL>>>
|   | `-<<<NULL>>>
|   |-ParenExpr 0x7fffd84178e8 <line:468:31, col:49> 'void'
|   | `-BinaryOperator 0x7fffd84178c0 <col:32, col:48> 'void' ','
|   |   |-CStyleCastExpr 0x7fffd84177d0 <col:32, col:40> 'void' <ToVoid>
|   |   | `-ImplicitCastExpr 0x7fffd84177b8 <col:38, col:40> 'void *' <LValueToRValue>
|   |   |   `-ParenExpr 0x7fffd8417798 <col:38, col:40> 'void *const' lvalue
|   |   |     `-MemberExpr 0x7fffd8417720 <line:3692:25, col:31> 'void *const' lvalue ->userdata 0x7fffd834cb78
|   |   |       `-ImplicitCastExpr 0x7fffd8417708 <col:25> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x7fffd84176e0 <col:25> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd8414c90 'info' 'const stbtt_fontinfo *'
|   |   `-CallExpr 0x7fffd8417860 <line:468:42, col:48> 'void'
|   |     |-ImplicitCastExpr 0x7fffd8417848 <col:42> 'void (*)(void *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd84177f8 <col:42> 'void (void *)' Function 0x7fffd831bec0 'free' 'void (void *)'
|   |     `-ImplicitCastExpr 0x7fffd84178a8 <line:3692:15> 'void *' <BitCast>
|   |       `-ImplicitCastExpr 0x7fffd8417890 <col:15> 'stbtt_vertex *' <LValueToRValue>
|   |         `-DeclRefExpr 0x7fffd8417820 <col:15> 'stbtt_vertex *' lvalue Var 0x7fffd8415548 'vertices' 'stbtt_vertex *'
|   `-ReturnStmt 0x7fffd8417980 <line:3693:4, col:15>
|     `-ImplicitCastExpr 0x7fffd8417968 <col:11, col:15> 'unsigned char *' <LValueToRValue>
|       `-MemberExpr 0x7fffd8417930 <col:11, col:15> 'unsigned char *' lvalue .pixels 0x7fffd83599f8
|         `-DeclRefExpr 0x7fffd8417908 <col:11> 'stbtt__bitmap':'stbtt__bitmap' lvalue Var 0x7fffd84154c0 'gbm' 'stbtt__bitmap':'stbtt__bitmap'
|-FunctionDecl 0x7fffd8417e50 prev 0x7fffd83562b8 <line:501:19, line:3699:1> line:3696:26 stbtt_GetGlyphBitmap 'unsigned char *(const stbtt_fontinfo *, float, float, int, int *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd8417a40 <col:47, col:69> col:69 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8417ab8 <col:75, col:81> col:81 used scale_x 'float'
| |-ParmVarDecl 0x7fffd8417b30 <col:90, col:96> col:96 used scale_y 'float'
| |-ParmVarDecl 0x7fffd8417ba8 <col:105, col:109> col:109 used glyph 'int'
| |-ParmVarDecl 0x7fffd8417c20 <col:116, col:121> col:121 used width 'int *'
| |-ParmVarDecl 0x7fffd8417c98 <col:128, col:133> col:133 used height 'int *'
| |-ParmVarDecl 0x7fffd8417d10 <col:141, col:146> col:146 used xoff 'int *'
| |-ParmVarDecl 0x7fffd8417d88 <col:152, col:157> col:157 used yoff 'int *'
| `-CompoundStmt 0x7fffd84182a0 <line:3697:1, line:3699:1>
|   `-ReturnStmt 0x7fffd8418288 <line:3698:4, col:108>
|     `-CallExpr 0x7fffd8418150 <col:11, col:108> 'unsigned char *'
|       |-ImplicitCastExpr 0x7fffd8418138 <col:11> 'unsigned char *(*)(const stbtt_fontinfo *, float, float, float, float, int, int *, int *, int *, int *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x7fffd8417f30 <col:11> 'unsigned char *(const stbtt_fontinfo *, float, float, float, float, int, int *, int *, int *, int *)' Function 0x7fffd84151a0 'stbtt_GetGlyphBitmapSubpixel' 'unsigned char *(const stbtt_fontinfo *, float, float, float, float, int, int *, int *, int *, int *)'
|       |-ImplicitCastExpr 0x7fffd84181c8 <col:40> 'const stbtt_fontinfo *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd8417f58 <col:40> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd8417a40 'info' 'const stbtt_fontinfo *'
|       |-ImplicitCastExpr 0x7fffd84181e0 <col:46> 'float' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd8417f80 <col:46> 'float' lvalue ParmVar 0x7fffd8417ab8 'scale_x' 'float'
|       |-ImplicitCastExpr 0x7fffd84181f8 <col:55> 'float' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd8417fa8 <col:55> 'float' lvalue ParmVar 0x7fffd8417b30 'scale_y' 'float'
|       |-FloatingLiteral 0x7fffd8417fd0 <col:64> 'float' 0.000000e+00
|       |-FloatingLiteral 0x7fffd8417ff0 <col:70> 'float' 0.000000e+00
|       |-ImplicitCastExpr 0x7fffd8418210 <col:76> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd8418010 <col:76> 'int' lvalue ParmVar 0x7fffd8417ba8 'glyph' 'int'
|       |-ImplicitCastExpr 0x7fffd8418228 <col:83> 'int *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd8418038 <col:83> 'int *' lvalue ParmVar 0x7fffd8417c20 'width' 'int *'
|       |-ImplicitCastExpr 0x7fffd8418240 <col:90> 'int *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd8418060 <col:90> 'int *' lvalue ParmVar 0x7fffd8417c98 'height' 'int *'
|       |-ImplicitCastExpr 0x7fffd8418258 <col:98> 'int *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd8418088 <col:98> 'int *' lvalue ParmVar 0x7fffd8417d10 'xoff' 'int *'
|       `-ImplicitCastExpr 0x7fffd8418270 <col:104> 'int *' <LValueToRValue>
|         `-DeclRefExpr 0x7fffd84180b0 <col:104> 'int *' lvalue ParmVar 0x7fffd8417d88 'yoff' 'int *'
|-FunctionDecl 0x7fffd841a460 prev 0x7fffd83573d8 <line:501:19, line:3718:1> line:3701:16 used stbtt_MakeGlyphBitmapSubpixel 'void (const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, float, float, int)' extern
| |-ParmVarDecl 0x7fffd84182c8 <col:46, col:68> col:68 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8418340 <col:74, col:89> col:89 used output 'unsigned char *'
| |-ParmVarDecl 0x7fffd84183b8 <col:97, col:101> col:101 used out_w 'int'
| |-ParmVarDecl 0x7fffd8418430 <col:108, col:112> col:112 used out_h 'int'
| |-ParmVarDecl 0x7fffd84184a8 <col:119, col:123> col:123 used out_stride 'int'
| |-ParmVarDecl 0x7fffd841a1b0 <col:135, col:141> col:141 used scale_x 'float'
| |-ParmVarDecl 0x7fffd841a228 <col:150, col:156> col:156 used scale_y 'float'
| |-ParmVarDecl 0x7fffd841a2a0 <col:165, col:171> col:171 used shift_x 'float'
| |-ParmVarDecl 0x7fffd841a318 <col:180, col:186> col:186 used shift_y 'float'
| |-ParmVarDecl 0x7fffd841a390 <col:195, col:199> col:199 used glyph 'int'
| `-CompoundStmt 0x7fffd841b708 <line:3702:1, line:3718:1>
|   |-DeclStmt 0x7fffd841a658 <line:3703:4, col:15>
|   | |-VarDecl 0x7fffd841a568 <col:4, col:8> col:8 used ix0 'int'
|   | `-VarDecl 0x7fffd841a5e0 <col:4, col:12> col:12 used iy0 'int'
|   |-DeclStmt 0x7fffd841a6e0 <line:3704:4, col:26>
|   | `-VarDecl 0x7fffd841a680 <col:4, col:18> col:18 used vertices 'stbtt_vertex *'
|   |-DeclStmt 0x7fffd841a8b8 <line:3705:4, col:63>
|   | `-VarDecl 0x7fffd841a710 <col:4, col:62> col:8 used num_verts 'int' cinit
|   |   `-CallExpr 0x7fffd841a848 <col:20, col:62> 'int'
|   |     |-ImplicitCastExpr 0x7fffd841a830 <col:20> 'int (*)(const stbtt_fontinfo *, int, stbtt_vertex **)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd841a770 <col:20> 'int (const stbtt_fontinfo *, int, stbtt_vertex **)' Function 0x7fffd83bf8a8 'stbtt_GetGlyphShape' 'int (const stbtt_fontinfo *, int, stbtt_vertex **)'
|   |     |-ImplicitCastExpr 0x7fffd841a888 <col:40> 'const stbtt_fontinfo *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd841a798 <col:40> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd84182c8 'info' 'const stbtt_fontinfo *'
|   |     |-ImplicitCastExpr 0x7fffd841a8a0 <col:46> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd841a7c0 <col:46> 'int' lvalue ParmVar 0x7fffd841a390 'glyph' 'int'
|   |     `-UnaryOperator 0x7fffd841a810 <col:53, col:54> 'stbtt_vertex **' prefix '&'
|   |       `-DeclRefExpr 0x7fffd841a7e8 <col:54> 'stbtt_vertex *' lvalue Var 0x7fffd841a680 'vertices' 'stbtt_vertex *'
|   |-DeclStmt 0x7fffd841a940 <line:3706:4, col:21>
|   | `-VarDecl 0x7fffd841a8e0 <col:4, col:18> col:18 used gbm 'stbtt__bitmap':'stbtt__bitmap'
|   |-CallExpr 0x7fffd841ab58 <line:3708:4, col:98> 'void'
|   | |-ImplicitCastExpr 0x7fffd841ab40 <col:4> 'void (*)(const stbtt_fontinfo *, int, float, float, float, float, int *, int *, int *, int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fffd841a958 <col:4> 'void (const stbtt_fontinfo *, int, float, float, float, float, int *, int *, int *, int *)' Function 0x7fffd83db948 'stbtt_GetGlyphBitmapBoxSubpixel' 'void (const stbtt_fontinfo *, int, float, float, float, float, int *, int *, int *, int *)'
|   | |-ImplicitCastExpr 0x7fffd841abd0 <col:36> 'const stbtt_fontinfo *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd841a980 <col:36> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd84182c8 'info' 'const stbtt_fontinfo *'
|   | |-ImplicitCastExpr 0x7fffd841abe8 <col:42> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd841a9a8 <col:42> 'int' lvalue ParmVar 0x7fffd841a390 'glyph' 'int'
|   | |-ImplicitCastExpr 0x7fffd841ac00 <col:49> 'float' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd841a9d0 <col:49> 'float' lvalue ParmVar 0x7fffd841a1b0 'scale_x' 'float'
|   | |-ImplicitCastExpr 0x7fffd841ac18 <col:58> 'float' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd841a9f8 <col:58> 'float' lvalue ParmVar 0x7fffd841a228 'scale_y' 'float'
|   | |-ImplicitCastExpr 0x7fffd841ac30 <col:67> 'float' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd841aa20 <col:67> 'float' lvalue ParmVar 0x7fffd841a2a0 'shift_x' 'float'
|   | |-ImplicitCastExpr 0x7fffd841ac48 <col:76> 'float' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd841aa48 <col:76> 'float' lvalue ParmVar 0x7fffd841a318 'shift_y' 'float'
|   | |-UnaryOperator 0x7fffd841aa98 <col:85, col:86> 'int *' prefix '&'
|   | | `-DeclRefExpr 0x7fffd841aa70 <col:86> 'int' lvalue Var 0x7fffd841a568 'ix0' 'int'
|   | |-UnaryOperator 0x7fffd841aae0 <col:90, col:91> 'int *' prefix '&'
|   | | `-DeclRefExpr 0x7fffd841aab8 <col:91> 'int' lvalue Var 0x7fffd841a5e0 'iy0' 'int'
|   | |-ImplicitCastExpr 0x7fffd841ac60 <col:95> 'int *' <NullToPointer>
|   | | `-IntegerLiteral 0x7fffd841ab00 <col:95> 'int' 0
|   | `-ImplicitCastExpr 0x7fffd841ac78 <col:97> 'int *' <NullToPointer>
|   |   `-IntegerLiteral 0x7fffd841ab20 <col:97> 'int' 0
|   |-BinaryOperator 0x7fffd841ad30 <line:3709:4, col:17> 'unsigned char *' '='
|   | |-MemberExpr 0x7fffd841acb8 <col:4, col:8> 'unsigned char *' lvalue .pixels 0x7fffd83599f8
|   | | `-DeclRefExpr 0x7fffd841ac90 <col:4> 'stbtt__bitmap':'stbtt__bitmap' lvalue Var 0x7fffd841a8e0 'gbm' 'stbtt__bitmap':'stbtt__bitmap'
|   | `-ImplicitCastExpr 0x7fffd841ad18 <col:17> 'unsigned char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd841acf0 <col:17> 'unsigned char *' lvalue ParmVar 0x7fffd8418340 'output' 'unsigned char *'
|   |-BinaryOperator 0x7fffd841adf8 <line:3710:4, col:12> 'int' '='
|   | |-MemberExpr 0x7fffd841ad80 <col:4, col:8> 'int' lvalue .w 0x7fffd83598d8
|   | | `-DeclRefExpr 0x7fffd841ad58 <col:4> 'stbtt__bitmap':'stbtt__bitmap' lvalue Var 0x7fffd841a8e0 'gbm' 'stbtt__bitmap':'stbtt__bitmap'
|   | `-ImplicitCastExpr 0x7fffd841ade0 <col:12> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd841adb8 <col:12> 'int' lvalue ParmVar 0x7fffd84183b8 'out_w' 'int'
|   |-BinaryOperator 0x7fffd841aec0 <line:3711:4, col:12> 'int' '='
|   | |-MemberExpr 0x7fffd841ae48 <col:4, col:8> 'int' lvalue .h 0x7fffd8359938
|   | | `-DeclRefExpr 0x7fffd841ae20 <col:4> 'stbtt__bitmap':'stbtt__bitmap' lvalue Var 0x7fffd841a8e0 'gbm' 'stbtt__bitmap':'stbtt__bitmap'
|   | `-ImplicitCastExpr 0x7fffd841aea8 <col:12> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd841ae80 <col:12> 'int' lvalue ParmVar 0x7fffd8418430 'out_h' 'int'
|   |-BinaryOperator 0x7fffd841af88 <line:3712:4, col:17> 'int' '='
|   | |-MemberExpr 0x7fffd841af10 <col:4, col:8> 'int' lvalue .stride 0x7fffd8359998
|   | | `-DeclRefExpr 0x7fffd841aee8 <col:4> 'stbtt__bitmap':'stbtt__bitmap' lvalue Var 0x7fffd841a8e0 'gbm' 'stbtt__bitmap':'stbtt__bitmap'
|   | `-ImplicitCastExpr 0x7fffd841af70 <col:17> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd841af48 <col:17> 'int' lvalue ParmVar 0x7fffd84184a8 'out_stride' 'int'
|   |-IfStmt 0x7fffd841b4a8 <line:3714:4, line:3715:119>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd841b0a0 <line:3714:8, col:21> 'int' '&&'
|   | | |-ImplicitCastExpr 0x7fffd841b070 <col:8, col:12> 'int' <LValueToRValue>
|   | | | `-MemberExpr 0x7fffd841afd8 <col:8, col:12> 'int' lvalue .w 0x7fffd83598d8
|   | | |   `-DeclRefExpr 0x7fffd841afb0 <col:8> 'stbtt__bitmap':'stbtt__bitmap' lvalue Var 0x7fffd841a8e0 'gbm' 'stbtt__bitmap':'stbtt__bitmap'
|   | | `-ImplicitCastExpr 0x7fffd841b088 <col:17, col:21> 'int' <LValueToRValue>
|   | |   `-MemberExpr 0x7fffd841b038 <col:17, col:21> 'int' lvalue .h 0x7fffd8359938
|   | |     `-DeclRefExpr 0x7fffd841b010 <col:17> 'stbtt__bitmap':'stbtt__bitmap' lvalue Var 0x7fffd841a8e0 'gbm' 'stbtt__bitmap':'stbtt__bitmap'
|   | |-CallExpr 0x7fffd841b348 <line:3715:7, col:119> 'void'
|   | | |-ImplicitCastExpr 0x7fffd841b330 <col:7> 'void (*)(stbtt__bitmap *, float, stbtt_vertex *, int, float, float, float, float, int, int, int, void *)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x7fffd841b0c8 <col:7> 'void (stbtt__bitmap *, float, stbtt_vertex *, int, float, float, float, float, int, int, int, void *)' Function 0x7fffd84137c0 'stbtt_Rasterize' 'void (stbtt__bitmap *, float, stbtt_vertex *, int, float, float, float, float, int, int, int, void *)'
|   | | |-UnaryOperator 0x7fffd841b118 <col:23, col:24> 'stbtt__bitmap *' prefix '&'
|   | | | `-DeclRefExpr 0x7fffd841b0f0 <col:24> 'stbtt__bitmap':'stbtt__bitmap' lvalue Var 0x7fffd841a8e0 'gbm' 'stbtt__bitmap':'stbtt__bitmap'
|   | | |-FloatingLiteral 0x7fffd841b138 <col:29> 'float' 3.500000e-01
|   | | |-ImplicitCastExpr 0x7fffd841b3d0 <col:36> 'stbtt_vertex *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd841b158 <col:36> 'stbtt_vertex *' lvalue Var 0x7fffd841a680 'vertices' 'stbtt_vertex *'
|   | | |-ImplicitCastExpr 0x7fffd841b3e8 <col:46> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd841b180 <col:46> 'int' lvalue Var 0x7fffd841a710 'num_verts' 'int'
|   | | |-ImplicitCastExpr 0x7fffd841b400 <col:57> 'float' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd841b1a8 <col:57> 'float' lvalue ParmVar 0x7fffd841a1b0 'scale_x' 'float'
|   | | |-ImplicitCastExpr 0x7fffd841b418 <col:66> 'float' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd841b1d0 <col:66> 'float' lvalue ParmVar 0x7fffd841a228 'scale_y' 'float'
|   | | |-ImplicitCastExpr 0x7fffd841b430 <col:75> 'float' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd841b1f8 <col:75> 'float' lvalue ParmVar 0x7fffd841a2a0 'shift_x' 'float'
|   | | |-ImplicitCastExpr 0x7fffd841b448 <col:84> 'float' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd841b220 <col:84> 'float' lvalue ParmVar 0x7fffd841a318 'shift_y' 'float'
|   | | |-ImplicitCastExpr 0x7fffd841b460 <col:93> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd841b248 <col:93> 'int' lvalue Var 0x7fffd841a568 'ix0' 'int'
|   | | |-ImplicitCastExpr 0x7fffd841b478 <col:97> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd841b270 <col:97> 'int' lvalue Var 0x7fffd841a5e0 'iy0' 'int'
|   | | |-IntegerLiteral 0x7fffd841b298 <col:102> 'int' 1
|   | | `-ImplicitCastExpr 0x7fffd841b490 <col:105, col:111> 'void *' <LValueToRValue>
|   | |   `-MemberExpr 0x7fffd841b2f8 <col:105, col:111> 'void *const' lvalue ->userdata 0x7fffd834cb78
|   | |     `-ImplicitCastExpr 0x7fffd841b2e0 <col:105> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |       `-DeclRefExpr 0x7fffd841b2b8 <col:105> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd84182c8 'info' 'const stbtt_fontinfo *'
|   | `-<<<NULL>>>
|   `-ParenExpr 0x7fffd841b6e8 <line:468:31, col:49> 'void'
|     `-BinaryOperator 0x7fffd841b6c0 <col:32, col:48> 'void' ','
|       |-CStyleCastExpr 0x7fffd841b5d0 <col:32, col:40> 'void' <ToVoid>
|       | `-ImplicitCastExpr 0x7fffd841b5b8 <col:38, col:40> 'void *' <LValueToRValue>
|       |   `-ParenExpr 0x7fffd841b598 <col:38, col:40> 'void *const' lvalue
|       |     `-MemberExpr 0x7fffd841b520 <line:3717:25, col:31> 'void *const' lvalue ->userdata 0x7fffd834cb78
|       |       `-ImplicitCastExpr 0x7fffd841b508 <col:25> 'const stbtt_fontinfo *' <LValueToRValue>
|       |         `-DeclRefExpr 0x7fffd841b4e0 <col:25> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd84182c8 'info' 'const stbtt_fontinfo *'
|       `-CallExpr 0x7fffd841b660 <line:468:42, col:48> 'void'
|         |-ImplicitCastExpr 0x7fffd841b648 <col:42> 'void (*)(void *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x7fffd841b5f8 <col:42> 'void (void *)' Function 0x7fffd831bec0 'free' 'void (void *)'
|         `-ImplicitCastExpr 0x7fffd841b6a8 <line:3717:15> 'void *' <BitCast>
|           `-ImplicitCastExpr 0x7fffd841b690 <col:15> 'stbtt_vertex *' <LValueToRValue>
|             `-DeclRefExpr 0x7fffd841b620 <col:15> 'stbtt_vertex *' lvalue Var 0x7fffd841a680 'vertices' 'stbtt_vertex *'
|-FunctionDecl 0x7fffd841bb88 prev 0x7fffd8356dc0 <line:501:19, line:3723:1> line:3720:16 used stbtt_MakeGlyphBitmap 'void (const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, int)' extern
| |-ParmVarDecl 0x7fffd841b780 <col:38, col:60> col:60 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd841b7f8 <col:66, col:81> col:81 used output 'unsigned char *'
| |-ParmVarDecl 0x7fffd841b870 <col:89, col:93> col:93 used out_w 'int'
| |-ParmVarDecl 0x7fffd841b8e8 <col:100, col:104> col:104 used out_h 'int'
| |-ParmVarDecl 0x7fffd841b960 <col:111, col:115> col:115 used out_stride 'int'
| |-ParmVarDecl 0x7fffd841b9d8 <col:127, col:133> col:133 used scale_x 'float'
| |-ParmVarDecl 0x7fffd841ba50 <col:142, col:148> col:148 used scale_y 'float'
| |-ParmVarDecl 0x7fffd841bac8 <col:157, col:161> col:161 used glyph 'int'
| `-CompoundStmt 0x7fffd841bfb8 <line:3721:1, line:3723:1>
|   `-CallExpr 0x7fffd841be80 <line:3722:4, col:108> 'void'
|     |-ImplicitCastExpr 0x7fffd841be68 <col:4> 'void (*)(const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, float, float, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x7fffd841bc68 <col:4> 'void (const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, float, float, int)' Function 0x7fffd841a460 'stbtt_MakeGlyphBitmapSubpixel' 'void (const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, float, float, int)'
|     |-ImplicitCastExpr 0x7fffd841bef8 <col:34> 'const stbtt_fontinfo *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841bc90 <col:34> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd841b780 'info' 'const stbtt_fontinfo *'
|     |-ImplicitCastExpr 0x7fffd841bf10 <col:40> 'unsigned char *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841bcb8 <col:40> 'unsigned char *' lvalue ParmVar 0x7fffd841b7f8 'output' 'unsigned char *'
|     |-ImplicitCastExpr 0x7fffd841bf28 <col:48> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841bce0 <col:48> 'int' lvalue ParmVar 0x7fffd841b870 'out_w' 'int'
|     |-ImplicitCastExpr 0x7fffd841bf40 <col:55> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841bd08 <col:55> 'int' lvalue ParmVar 0x7fffd841b8e8 'out_h' 'int'
|     |-ImplicitCastExpr 0x7fffd841bf58 <col:62> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841bd30 <col:62> 'int' lvalue ParmVar 0x7fffd841b960 'out_stride' 'int'
|     |-ImplicitCastExpr 0x7fffd841bf70 <col:74> 'float' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841bd58 <col:74> 'float' lvalue ParmVar 0x7fffd841b9d8 'scale_x' 'float'
|     |-ImplicitCastExpr 0x7fffd841bf88 <col:83> 'float' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841bd80 <col:83> 'float' lvalue ParmVar 0x7fffd841ba50 'scale_y' 'float'
|     |-FloatingLiteral 0x7fffd841bda8 <col:92> 'float' 0.000000e+00
|     |-FloatingLiteral 0x7fffd841bdc8 <col:97> 'float' 0.000000e+00
|     `-ImplicitCastExpr 0x7fffd841bfa0 <col:103> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd841bde8 <col:103> 'int' lvalue ParmVar 0x7fffd841bac8 'glyph' 'int'
|-FunctionDecl 0x7fffd841c508 prev 0x7fffd8353a08 <line:501:19, line:3728:1> line:3725:26 used stbtt_GetCodepointBitmapSubpixel 'unsigned char *(const stbtt_fontinfo *, float, float, float, float, int, int *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd841bfe0 <col:59, col:81> col:81 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd841c058 <col:87, col:93> col:93 used scale_x 'float'
| |-ParmVarDecl 0x7fffd841c0d0 <col:102, col:108> col:108 used scale_y 'float'
| |-ParmVarDecl 0x7fffd841c148 <col:117, col:123> col:123 used shift_x 'float'
| |-ParmVarDecl 0x7fffd841c1d8 <col:132, col:138> col:138 used shift_y 'float'
| |-ParmVarDecl 0x7fffd841c250 <col:147, col:151> col:151 used codepoint 'int'
| |-ParmVarDecl 0x7fffd841c2c8 <col:162, col:167> col:167 used width 'int *'
| |-ParmVarDecl 0x7fffd841c340 <col:174, col:179> col:179 used height 'int *'
| |-ParmVarDecl 0x7fffd841c3b8 <col:187, col:192> col:192 used xoff 'int *'
| |-ParmVarDecl 0x7fffd841c430 <col:198, col:203> col:203 used yoff 'int *'
| `-CompoundStmt 0x7fffd841ca00 <line:3726:1, line:3728:1>
|   `-ReturnStmt 0x7fffd841c9e8 <line:3727:4, col:140>
|     `-CallExpr 0x7fffd841c898 <col:11, col:140> 'unsigned char *'
|       |-ImplicitCastExpr 0x7fffd841c880 <col:11> 'unsigned char *(*)(const stbtt_fontinfo *, float, float, float, float, int, int *, int *, int *, int *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x7fffd841c5f8 <col:11> 'unsigned char *(const stbtt_fontinfo *, float, float, float, float, int, int *, int *, int *, int *)' Function 0x7fffd84151a0 'stbtt_GetGlyphBitmapSubpixel' 'unsigned char *(const stbtt_fontinfo *, float, float, float, float, int, int *, int *, int *, int *)'
|       |-ImplicitCastExpr 0x7fffd841c910 <col:40> 'const stbtt_fontinfo *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd841c620 <col:40> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd841bfe0 'info' 'const stbtt_fontinfo *'
|       |-ImplicitCastExpr 0x7fffd841c928 <col:46> 'float' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd841c648 <col:46> 'float' lvalue ParmVar 0x7fffd841c058 'scale_x' 'float'
|       |-ImplicitCastExpr 0x7fffd841c940 <col:55> 'float' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd841c670 <col:55> 'float' lvalue ParmVar 0x7fffd841c0d0 'scale_y' 'float'
|       |-ImplicitCastExpr 0x7fffd841c958 <col:63> 'float' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd841c698 <col:63> 'float' lvalue ParmVar 0x7fffd841c148 'shift_x' 'float'
|       |-ImplicitCastExpr 0x7fffd841c970 <col:71> 'float' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd841c6c0 <col:71> 'float' lvalue ParmVar 0x7fffd841c1d8 'shift_y' 'float'
|       |-CallExpr 0x7fffd841c778 <col:80, col:115> 'int'
|       | |-ImplicitCastExpr 0x7fffd841c760 <col:80> 'int (*)(const stbtt_fontinfo *, int)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x7fffd841c6e8 <col:80> 'int (const stbtt_fontinfo *, int)' Function 0x7fffd83829f0 'stbtt_FindGlyphIndex' 'int (const stbtt_fontinfo *, int)'
|       | |-ImplicitCastExpr 0x7fffd841c7b0 <col:101> 'const stbtt_fontinfo *' <LValueToRValue>
|       | | `-DeclRefExpr 0x7fffd841c710 <col:101> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd841bfe0 'info' 'const stbtt_fontinfo *'
|       | `-ImplicitCastExpr 0x7fffd841c7c8 <col:106> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fffd841c738 <col:106> 'int' lvalue ParmVar 0x7fffd841c250 'codepoint' 'int'
|       |-ImplicitCastExpr 0x7fffd841c988 <col:118> 'int *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd841c7e0 <col:118> 'int *' lvalue ParmVar 0x7fffd841c2c8 'width' 'int *'
|       |-ImplicitCastExpr 0x7fffd841c9a0 <col:124> 'int *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd841c808 <col:124> 'int *' lvalue ParmVar 0x7fffd841c340 'height' 'int *'
|       |-ImplicitCastExpr 0x7fffd841c9b8 <col:131> 'int *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd841c830 <col:131> 'int *' lvalue ParmVar 0x7fffd841c3b8 'xoff' 'int *'
|       `-ImplicitCastExpr 0x7fffd841c9d0 <col:136> 'int *' <LValueToRValue>
|         `-DeclRefExpr 0x7fffd841c858 <col:136> 'int *' lvalue ParmVar 0x7fffd841c430 'yoff' 'int *'
|-FunctionDecl 0x7fffd841d130 prev 0x7fffd8355050 <line:501:19, line:3733:1> line:3730:16 stbtt_MakeCodepointBitmapSubpixelPrefilter 'void (const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, float, float, int, int, float *, float *, int)' extern
| |-ParmVarDecl 0x7fffd841ca28 <col:59, col:81> col:81 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd841caa0 <col:87, col:102> col:102 used output 'unsigned char *'
| |-ParmVarDecl 0x7fffd841cb18 <col:110, col:114> col:114 used out_w 'int'
| |-ParmVarDecl 0x7fffd841cb90 <col:121, col:125> col:125 used out_h 'int'
| |-ParmVarDecl 0x7fffd841cc08 <col:132, col:136> col:136 used out_stride 'int'
| |-ParmVarDecl 0x7fffd841cc80 <col:148, col:154> col:154 used scale_x 'float'
| |-ParmVarDecl 0x7fffd841ccf8 <col:163, col:169> col:169 used scale_y 'float'
| |-ParmVarDecl 0x7fffd841cd70 <col:178, col:184> col:184 used shift_x 'float'
| |-ParmVarDecl 0x7fffd841cde8 <col:193, col:199> col:199 used shift_y 'float'
| |-ParmVarDecl 0x7fffd841ce60 <col:208, col:212> col:212 used oversample_x 'int'
| |-ParmVarDecl 0x7fffd841ced8 <col:226, col:230> col:230 used oversample_y 'int'
| |-ParmVarDecl 0x7fffd841cf50 <col:244, col:251> col:251 used sub_x 'float *'
| |-ParmVarDecl 0x7fffd841cfc8 <col:258, col:265> col:265 used sub_y 'float *'
| |-ParmVarDecl 0x7fffd841d040 <col:272, col:276> col:276 used codepoint 'int'
| `-CompoundStmt 0x7fffd841d7b0 <line:3731:1, line:3733:1>
|   `-CallExpr 0x7fffd841d5e0 <line:3732:4, col:197> 'void'
|     |-ImplicitCastExpr 0x7fffd841d5c8 <col:4> 'void (*)(const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, float, float, int, int, float *, float *, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x7fffd841d240 <col:4> 'void (const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, float, float, int, int, float *, float *, int)' Function 0x7fffd8357be0 'stbtt_MakeGlyphBitmapSubpixelPrefilter' 'void (const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, float, float, int, int, float *, float *, int)'
|     |-ImplicitCastExpr 0x7fffd841d678 <col:43> 'const stbtt_fontinfo *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841d268 <col:43> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd841ca28 'info' 'const stbtt_fontinfo *'
|     |-ImplicitCastExpr 0x7fffd841d690 <col:49> 'unsigned char *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841d290 <col:49> 'unsigned char *' lvalue ParmVar 0x7fffd841caa0 'output' 'unsigned char *'
|     |-ImplicitCastExpr 0x7fffd841d6a8 <col:57> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841d2b8 <col:57> 'int' lvalue ParmVar 0x7fffd841cb18 'out_w' 'int'
|     |-ImplicitCastExpr 0x7fffd841d6c0 <col:64> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841d2e0 <col:64> 'int' lvalue ParmVar 0x7fffd841cb90 'out_h' 'int'
|     |-ImplicitCastExpr 0x7fffd841d6d8 <col:71> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841d308 <col:71> 'int' lvalue ParmVar 0x7fffd841cc08 'out_stride' 'int'
|     |-ImplicitCastExpr 0x7fffd841d6f0 <col:83> 'float' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841d330 <col:83> 'float' lvalue ParmVar 0x7fffd841cc80 'scale_x' 'float'
|     |-ImplicitCastExpr 0x7fffd841d708 <col:92> 'float' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841d358 <col:92> 'float' lvalue ParmVar 0x7fffd841ccf8 'scale_y' 'float'
|     |-ImplicitCastExpr 0x7fffd841d720 <col:101> 'float' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841d380 <col:101> 'float' lvalue ParmVar 0x7fffd841cd70 'shift_x' 'float'
|     |-ImplicitCastExpr 0x7fffd841d738 <col:110> 'float' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841d3a8 <col:110> 'float' lvalue ParmVar 0x7fffd841cde8 'shift_y' 'float'
|     |-ImplicitCastExpr 0x7fffd841d750 <col:119> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841d3d0 <col:119> 'int' lvalue ParmVar 0x7fffd841ce60 'oversample_x' 'int'
|     |-ImplicitCastExpr 0x7fffd841d768 <col:133> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841d3f8 <col:133> 'int' lvalue ParmVar 0x7fffd841ced8 'oversample_y' 'int'
|     |-ImplicitCastExpr 0x7fffd841d780 <col:147> 'float *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841d420 <col:147> 'float *' lvalue ParmVar 0x7fffd841cf50 'sub_x' 'float *'
|     |-ImplicitCastExpr 0x7fffd841d798 <col:154> 'float *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841d448 <col:154> 'float *' lvalue ParmVar 0x7fffd841cfc8 'sub_y' 'float *'
|     `-CallExpr 0x7fffd841d500 <col:161, col:196> 'int'
|       |-ImplicitCastExpr 0x7fffd841d4e8 <col:161> 'int (*)(const stbtt_fontinfo *, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x7fffd841d470 <col:161> 'int (const stbtt_fontinfo *, int)' Function 0x7fffd83829f0 'stbtt_FindGlyphIndex' 'int (const stbtt_fontinfo *, int)'
|       |-ImplicitCastExpr 0x7fffd841d538 <col:182> 'const stbtt_fontinfo *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd841d498 <col:182> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd841ca28 'info' 'const stbtt_fontinfo *'
|       `-ImplicitCastExpr 0x7fffd841d550 <col:187> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x7fffd841d4c0 <col:187> 'int' lvalue ParmVar 0x7fffd841d040 'codepoint' 'int'
|-FunctionDecl 0x7fffd841dce0 prev 0x7fffd8354700 <line:501:19, line:3738:1> line:3735:16 used stbtt_MakeCodepointBitmapSubpixel 'void (const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, float, float, int)' extern
| |-ParmVarDecl 0x7fffd841d7d8 <col:50, col:72> col:72 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd841d850 <col:78, col:93> col:93 used output 'unsigned char *'
| |-ParmVarDecl 0x7fffd841d8c8 <col:101, col:105> col:105 used out_w 'int'
| |-ParmVarDecl 0x7fffd841d940 <col:112, col:116> col:116 used out_h 'int'
| |-ParmVarDecl 0x7fffd841d9b8 <col:123, col:127> col:127 used out_stride 'int'
| |-ParmVarDecl 0x7fffd841da30 <col:139, col:145> col:145 used scale_x 'float'
| |-ParmVarDecl 0x7fffd841daa8 <col:154, col:160> col:160 used scale_y 'float'
| |-ParmVarDecl 0x7fffd841db20 <col:169, col:175> col:175 used shift_x 'float'
| |-ParmVarDecl 0x7fffd841db98 <col:184, col:190> col:190 used shift_y 'float'
| |-ParmVarDecl 0x7fffd841dc10 <col:199, col:203> col:203 used codepoint 'int'
| `-CompoundStmt 0x7fffd841e1d0 <line:3736:1, line:3738:1>
|   `-CallExpr 0x7fffd841e070 <line:3737:4, col:146> 'void'
|     |-ImplicitCastExpr 0x7fffd841e058 <col:4> 'void (*)(const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, float, float, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x7fffd841ddd0 <col:4> 'void (const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, float, float, int)' Function 0x7fffd841a460 'stbtt_MakeGlyphBitmapSubpixel' 'void (const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, float, float, int)'
|     |-ImplicitCastExpr 0x7fffd841e0e8 <col:34> 'const stbtt_fontinfo *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841ddf8 <col:34> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd841d7d8 'info' 'const stbtt_fontinfo *'
|     |-ImplicitCastExpr 0x7fffd841e100 <col:40> 'unsigned char *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841de20 <col:40> 'unsigned char *' lvalue ParmVar 0x7fffd841d850 'output' 'unsigned char *'
|     |-ImplicitCastExpr 0x7fffd841e118 <col:48> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841de48 <col:48> 'int' lvalue ParmVar 0x7fffd841d8c8 'out_w' 'int'
|     |-ImplicitCastExpr 0x7fffd841e130 <col:55> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841de70 <col:55> 'int' lvalue ParmVar 0x7fffd841d940 'out_h' 'int'
|     |-ImplicitCastExpr 0x7fffd841e148 <col:62> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841de98 <col:62> 'int' lvalue ParmVar 0x7fffd841d9b8 'out_stride' 'int'
|     |-ImplicitCastExpr 0x7fffd841e160 <col:74> 'float' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841dec0 <col:74> 'float' lvalue ParmVar 0x7fffd841da30 'scale_x' 'float'
|     |-ImplicitCastExpr 0x7fffd841e178 <col:83> 'float' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841dee8 <col:83> 'float' lvalue ParmVar 0x7fffd841daa8 'scale_y' 'float'
|     |-ImplicitCastExpr 0x7fffd841e190 <col:92> 'float' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841df10 <col:92> 'float' lvalue ParmVar 0x7fffd841db20 'shift_x' 'float'
|     |-ImplicitCastExpr 0x7fffd841e1a8 <col:101> 'float' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841df38 <col:101> 'float' lvalue ParmVar 0x7fffd841db98 'shift_y' 'float'
|     `-CallExpr 0x7fffd841dff0 <col:110, col:145> 'int'
|       |-ImplicitCastExpr 0x7fffd841dfd8 <col:110> 'int (*)(const stbtt_fontinfo *, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x7fffd841df60 <col:110> 'int (const stbtt_fontinfo *, int)' Function 0x7fffd83829f0 'stbtt_FindGlyphIndex' 'int (const stbtt_fontinfo *, int)'
|       |-ImplicitCastExpr 0x7fffd841e028 <col:131> 'const stbtt_fontinfo *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd841df88 <col:131> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd841d7d8 'info' 'const stbtt_fontinfo *'
|       `-ImplicitCastExpr 0x7fffd841e040 <col:136> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x7fffd841dfb0 <col:136> 'int' lvalue ParmVar 0x7fffd841dc10 'codepoint' 'int'
|-FunctionDecl 0x7fffd841e608 prev 0x7fffd8353308 <line:501:19, line:3743:1> line:3740:26 stbtt_GetCodepointBitmap 'unsigned char *(const stbtt_fontinfo *, float, float, int, int *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd841e1f8 <col:51, col:73> col:73 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd841e270 <col:79, col:85> col:85 used scale_x 'float'
| |-ParmVarDecl 0x7fffd841e2e8 <col:94, col:100> col:100 used scale_y 'float'
| |-ParmVarDecl 0x7fffd841e360 <col:109, col:113> col:113 used codepoint 'int'
| |-ParmVarDecl 0x7fffd841e3d8 <col:124, col:129> col:129 used width 'int *'
| |-ParmVarDecl 0x7fffd841e450 <col:136, col:141> col:141 used height 'int *'
| |-ParmVarDecl 0x7fffd841e4c8 <col:149, col:154> col:154 used xoff 'int *'
| |-ParmVarDecl 0x7fffd841e540 <col:160, col:165> col:165 used yoff 'int *'
| `-CompoundStmt 0x7fffd841e9f8 <line:3741:1, line:3743:1>
|   `-ReturnStmt 0x7fffd841e9e0 <line:3742:4, col:112>
|     `-CallExpr 0x7fffd841e8a8 <col:11, col:112> 'unsigned char *'
|       |-ImplicitCastExpr 0x7fffd841e890 <col:11> 'unsigned char *(*)(const stbtt_fontinfo *, float, float, float, float, int, int *, int *, int *, int *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x7fffd841e6e8 <col:11> 'unsigned char *(const stbtt_fontinfo *, float, float, float, float, int, int *, int *, int *, int *)' Function 0x7fffd841c508 'stbtt_GetCodepointBitmapSubpixel' 'unsigned char *(const stbtt_fontinfo *, float, float, float, float, int, int *, int *, int *, int *)'
|       |-ImplicitCastExpr 0x7fffd841e920 <col:44> 'const stbtt_fontinfo *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd841e710 <col:44> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd841e1f8 'info' 'const stbtt_fontinfo *'
|       |-ImplicitCastExpr 0x7fffd841e938 <col:50> 'float' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd841e738 <col:50> 'float' lvalue ParmVar 0x7fffd841e270 'scale_x' 'float'
|       |-ImplicitCastExpr 0x7fffd841e950 <col:59> 'float' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd841e760 <col:59> 'float' lvalue ParmVar 0x7fffd841e2e8 'scale_y' 'float'
|       |-FloatingLiteral 0x7fffd841e788 <col:68> 'float' 0.000000e+00
|       |-FloatingLiteral 0x7fffd841e7a8 <col:73> 'float' 0.000000e+00
|       |-ImplicitCastExpr 0x7fffd841e968 <col:79> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd841e7c8 <col:79> 'int' lvalue ParmVar 0x7fffd841e360 'codepoint' 'int'
|       |-ImplicitCastExpr 0x7fffd841e980 <col:90> 'int *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd841e7f0 <col:90> 'int *' lvalue ParmVar 0x7fffd841e3d8 'width' 'int *'
|       |-ImplicitCastExpr 0x7fffd841e998 <col:96> 'int *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd841e818 <col:96> 'int *' lvalue ParmVar 0x7fffd841e450 'height' 'int *'
|       |-ImplicitCastExpr 0x7fffd841e9b0 <col:103> 'int *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd841e840 <col:103> 'int *' lvalue ParmVar 0x7fffd841e4c8 'xoff' 'int *'
|       `-ImplicitCastExpr 0x7fffd841e9c8 <col:108> 'int *' <LValueToRValue>
|         `-DeclRefExpr 0x7fffd841e868 <col:108> 'int *' lvalue ParmVar 0x7fffd841e540 'yoff' 'int *'
|-FunctionDecl 0x7fffd841ee28 prev 0x7fffd8353ff0 <line:501:19, line:3748:1> line:3745:16 stbtt_MakeCodepointBitmap 'void (const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, int)' extern
| |-ParmVarDecl 0x7fffd841ea20 <col:42, col:64> col:64 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd841ea98 <col:70, col:85> col:85 used output 'unsigned char *'
| |-ParmVarDecl 0x7fffd841eb10 <col:93, col:97> col:97 used out_w 'int'
| |-ParmVarDecl 0x7fffd841eb88 <col:104, col:108> col:108 used out_h 'int'
| |-ParmVarDecl 0x7fffd841ec00 <col:115, col:119> col:119 used out_stride 'int'
| |-ParmVarDecl 0x7fffd841ec78 <col:131, col:137> col:137 used scale_x 'float'
| |-ParmVarDecl 0x7fffd841ecf0 <col:146, col:152> col:152 used scale_y 'float'
| |-ParmVarDecl 0x7fffd841ed68 <col:161, col:165> col:165 used codepoint 'int'
| `-CompoundStmt 0x7fffd841f228 <line:3746:1, line:3748:1>
|   `-CallExpr 0x7fffd841f0c8 <line:3747:4, col:116> 'void'
|     |-ImplicitCastExpr 0x7fffd841f0b0 <col:4> 'void (*)(const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, float, float, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x7fffd841ef08 <col:4> 'void (const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, float, float, int)' Function 0x7fffd841dce0 'stbtt_MakeCodepointBitmapSubpixel' 'void (const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, float, float, int)'
|     |-ImplicitCastExpr 0x7fffd841f140 <col:38> 'const stbtt_fontinfo *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841ef30 <col:38> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd841ea20 'info' 'const stbtt_fontinfo *'
|     |-ImplicitCastExpr 0x7fffd841f158 <col:44> 'unsigned char *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841ef58 <col:44> 'unsigned char *' lvalue ParmVar 0x7fffd841ea98 'output' 'unsigned char *'
|     |-ImplicitCastExpr 0x7fffd841f170 <col:52> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841ef80 <col:52> 'int' lvalue ParmVar 0x7fffd841eb10 'out_w' 'int'
|     |-ImplicitCastExpr 0x7fffd841f188 <col:59> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841efa8 <col:59> 'int' lvalue ParmVar 0x7fffd841eb88 'out_h' 'int'
|     |-ImplicitCastExpr 0x7fffd841f1a0 <col:66> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841efd0 <col:66> 'int' lvalue ParmVar 0x7fffd841ec00 'out_stride' 'int'
|     |-ImplicitCastExpr 0x7fffd841f1b8 <col:78> 'float' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841eff8 <col:78> 'float' lvalue ParmVar 0x7fffd841ec78 'scale_x' 'float'
|     |-ImplicitCastExpr 0x7fffd841f1d0 <col:87> 'float' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd841f020 <col:87> 'float' lvalue ParmVar 0x7fffd841ecf0 'scale_y' 'float'
|     |-FloatingLiteral 0x7fffd841f048 <col:96> 'float' 0.000000e+00
|     |-FloatingLiteral 0x7fffd841f068 <col:101> 'float' 0.000000e+00
|     `-ImplicitCastExpr 0x7fffd841f1e8 <col:107> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd841f088 <col:107> 'int' lvalue ParmVar 0x7fffd841ed68 'codepoint' 'int'
|-FunctionDecl 0x7fffd841f7d8 <line:3756:1, line:3800:1> line:3756:12 used stbtt_BakeFontBitmap_internal 'int (unsigned char *, int, float, unsigned char *, int, int, int, int, stbtt_bakedchar *)' static
| |-ParmVarDecl 0x7fffd841f258 <col:42, col:57> col:57 used data 'unsigned char *'
| |-ParmVarDecl 0x7fffd841f2d0 <col:63, col:67> col:67 used offset 'int'
| |-ParmVarDecl 0x7fffd841f348 <line:3757:33, col:39> col:39 used pixel_height 'float'
| |-ParmVarDecl 0x7fffd841f3c0 <line:3758:33, col:48> col:48 used pixels 'unsigned char *'
| |-ParmVarDecl 0x7fffd841f438 <col:56, col:60> col:60 used pw 'int'
| |-ParmVarDecl 0x7fffd841f4b0 <col:64, col:68> col:68 used ph 'int'
| |-ParmVarDecl 0x7fffd841f528 <line:3759:33, col:37> col:37 used first_char 'int'
| |-ParmVarDecl 0x7fffd841f5a0 <col:49, col:53> col:53 used num_chars 'int'
| |-ParmVarDecl 0x7fffd841f610 <line:3760:33, col:50> col:50 used chardata 'stbtt_bakedchar *'
| |-CompoundStmt 0x7fffd8423ba8 <line:3761:1, line:3800:1>
| | |-DeclStmt 0x7fffd841f938 <line:3762:4, col:15>
| | | `-VarDecl 0x7fffd841f8d8 <col:4, col:10> col:10 used scale 'float'
| | |-DeclStmt 0x7fffd841fb58 <line:3763:4, col:23>
| | | |-VarDecl 0x7fffd841f968 <col:4, col:8> col:8 used x 'int'
| | | |-VarDecl 0x7fffd841f9e0 <col:4, col:10> col:10 used y 'int'
| | | |-VarDecl 0x7fffd841fa58 <col:4, col:12> col:12 used bottom_y 'int'
| | | `-VarDecl 0x7fffd841fad0 <col:4, col:22> col:22 used i 'int'
| | |-DeclStmt 0x7fffd841fbe0 <line:3764:4, col:20>
| | | `-VarDecl 0x7fffd841fb80 <col:4, col:19> col:19 used f 'stbtt_fontinfo':'struct stbtt_fontinfo'
| | |-BinaryOperator 0x7fffd841fcd8 <line:3765:4, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25> 'void *' '='
| | | |-MemberExpr 0x7fffd841fc20 <././stb/stb_truetype.h:3765:4, col:6> 'void *' lvalue .userdata 0x7fffd834cb78
| | | | `-DeclRefExpr 0x7fffd841fbf8 <col:4> 'stbtt_fontinfo':'struct stbtt_fontinfo' lvalue Var 0x7fffd841fb80 'f' 'stbtt_fontinfo':'struct stbtt_fontinfo'
| | | `-ParenExpr 0x7fffd841fcb8 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'void *'
| | |   `-CStyleCastExpr 0x7fffd841fc90 <col:17, col:24> 'void *' <NullToPointer>
| | |     `-IntegerLiteral 0x7fffd841fc58 <col:24> 'int' 0
| | |-IfStmt 0x7fffd841ff30 <././stb/stb_truetype.h:3766:4, line:3767:15>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-UnaryOperator 0x7fffd841feb8 <line:3766:8, col:40> 'int' prefix '!'
| | | | `-CallExpr 0x7fffd841fe30 <col:9, col:40> 'int'
| | | |   |-ImplicitCastExpr 0x7fffd841fe18 <col:9> 'int (*)(stbtt_fontinfo *, const unsigned char *, int)' <FunctionToPointerDecay>
| | | |   | `-DeclRefExpr 0x7fffd841fd00 <col:9> 'int (stbtt_fontinfo *, const unsigned char *, int)' Function 0x7fffd834d5a8 'stbtt_InitFont' 'int (stbtt_fontinfo *, const unsigned char *, int)'
| | | |   |-UnaryOperator 0x7fffd841fd50 <col:24, col:25> 'stbtt_fontinfo *' prefix '&'
| | | |   | `-DeclRefExpr 0x7fffd841fd28 <col:25> 'stbtt_fontinfo':'struct stbtt_fontinfo' lvalue Var 0x7fffd841fb80 'f' 'stbtt_fontinfo':'struct stbtt_fontinfo'
| | | |   |-ImplicitCastExpr 0x7fffd841fe88 <col:28> 'const unsigned char *' <BitCast>
| | | |   | `-ImplicitCastExpr 0x7fffd841fe70 <col:28> 'unsigned char *' <LValueToRValue>
| | | |   |   `-DeclRefExpr 0x7fffd841fd70 <col:28> 'unsigned char *' lvalue ParmVar 0x7fffd841f258 'data' 'unsigned char *'
| | | |   `-ImplicitCastExpr 0x7fffd841fea0 <col:34> 'int' <LValueToRValue>
| | | |     `-DeclRefExpr 0x7fffd841fd98 <col:34> 'int' lvalue ParmVar 0x7fffd841f2d0 'offset' 'int'
| | | |-ReturnStmt 0x7fffd841ff18 <line:3767:7, col:15>
| | | | `-UnaryOperator 0x7fffd841fef8 <col:14, col:15> 'int' prefix '-'
| | | |   `-IntegerLiteral 0x7fffd841fed8 <col:15> 'int' 1
| | | `-<<<NULL>>>
| | |-CallExpr 0x7fffd84200b0 <line:484:31, line:3768:33> 'void *'
| | | |-ImplicitCastExpr 0x7fffd8420098 <line:484:31> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x7fffd841ff68 <col:31> 'void *(void *, int, unsigned long)' Function 0x7fffd832d138 'memset' 'void *(void *, int, unsigned long)'
| | | |-ImplicitCastExpr 0x7fffd8420108 <line:3768:17> 'void *' <BitCast>
| | | | `-ImplicitCastExpr 0x7fffd84200f0 <col:17> 'unsigned char *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x7fffd841ff90 <col:17> 'unsigned char *' lvalue ParmVar 0x7fffd841f3c0 'pixels' 'unsigned char *'
| | | |-IntegerLiteral 0x7fffd841ffb8 <col:25> 'int' 0
| | | `-ImplicitCastExpr 0x7fffd8420120 <col:28, col:31> 'unsigned long' <IntegralCast>
| | |   `-BinaryOperator 0x7fffd8420058 <col:28, col:31> 'int' '*'
| | |     |-ImplicitCastExpr 0x7fffd8420028 <col:28> 'int' <LValueToRValue>
| | |     | `-DeclRefExpr 0x7fffd841ffd8 <col:28> 'int' lvalue ParmVar 0x7fffd841f438 'pw' 'int'
| | |     `-ImplicitCastExpr 0x7fffd8420040 <col:31> 'int' <LValueToRValue>
| | |       `-DeclRefExpr 0x7fffd8420000 <col:31> 'int' lvalue ParmVar 0x7fffd841f4b0 'ph' 'int'
| | |-BinaryOperator 0x7fffd84201e0 <line:3769:4, col:8> 'int' '='
| | | |-DeclRefExpr 0x7fffd8420138 <col:4> 'int' lvalue Var 0x7fffd841f968 'x' 'int'
| | | `-BinaryOperator 0x7fffd84201a8 <col:6, col:8> 'int' '='
| | |   |-DeclRefExpr 0x7fffd8420160 <col:6> 'int' lvalue Var 0x7fffd841f9e0 'y' 'int'
| | |   `-IntegerLiteral 0x7fffd8420188 <col:8> 'int' 1
| | |-BinaryOperator 0x7fffd8420250 <line:3770:4, col:15> 'int' '='
| | | |-DeclRefExpr 0x7fffd8420208 <col:4> 'int' lvalue Var 0x7fffd841fa58 'bottom_y' 'int'
| | | `-IntegerLiteral 0x7fffd8420230 <col:15> 'int' 1
| | |-BinaryOperator 0x7fffd8420418 <line:3772:4, col:54> 'float' '='
| | | |-DeclRefExpr 0x7fffd8420278 <col:4> 'float' lvalue Var 0x7fffd841f8d8 'scale' 'float'
| | | `-CallExpr 0x7fffd84203b0 <col:12, col:54> 'float'
| | |   |-ImplicitCastExpr 0x7fffd8420398 <col:12> 'float (*)(const stbtt_fontinfo *, float)' <FunctionToPointerDecay>
| | |   | `-DeclRefExpr 0x7fffd84202a0 <col:12> 'float (const stbtt_fontinfo *, float)' Function 0x7fffd83d81b0 'stbtt_ScaleForPixelHeight' 'float (const stbtt_fontinfo *, float)'
| | |   |-ImplicitCastExpr 0x7fffd84203e8 <col:38, col:39> 'const stbtt_fontinfo *' <BitCast>
| | |   | `-UnaryOperator 0x7fffd84202f0 <col:38, col:39> 'stbtt_fontinfo *' prefix '&'
| | |   |   `-DeclRefExpr 0x7fffd84202c8 <col:39> 'stbtt_fontinfo':'struct stbtt_fontinfo' lvalue Var 0x7fffd841fb80 'f' 'stbtt_fontinfo':'struct stbtt_fontinfo'
| | |   `-ImplicitCastExpr 0x7fffd8420400 <col:42> 'float' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fffd8420310 <col:42> 'float' lvalue ParmVar 0x7fffd841f348 'pixel_height' 'float'
| | |-ForStmt 0x7fffd8423b18 <line:3774:4, line:3798:4>
| | | |-BinaryOperator 0x7fffd8420488 <line:3774:9, col:11> 'int' '='
| | | | |-DeclRefExpr 0x7fffd8420440 <col:9> 'int' lvalue Var 0x7fffd841fad0 'i' 'int'
| | | | `-IntegerLiteral 0x7fffd8420468 <col:11> 'int' 0
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x7fffd8420530 <col:14, col:18> 'int' '<'
| | | | |-ImplicitCastExpr 0x7fffd8420500 <col:14> 'int' <LValueToRValue>
| | | | | `-DeclRefExpr 0x7fffd84204b0 <col:14> 'int' lvalue Var 0x7fffd841fad0 'i' 'int'
| | | | `-ImplicitCastExpr 0x7fffd8420518 <col:18> 'int' <LValueToRValue>
| | | |   `-DeclRefExpr 0x7fffd84204d8 <col:18> 'int' lvalue ParmVar 0x7fffd841f5a0 'num_chars' 'int'
| | | |-UnaryOperator 0x7fffd8420580 <col:29, col:31> 'int' prefix '++'
| | | | `-DeclRefExpr 0x7fffd8420558 <col:31> 'int' lvalue Var 0x7fffd841fad0 'i' 'int'
| | | `-CompoundStmt 0x7fffd8423a68 <col:34, line:3798:4>
| | |   |-DeclStmt 0x7fffd84209a8 <line:3775:7, col:42>
| | |   | |-VarDecl 0x7fffd84205b8 <col:7, col:11> col:11 used advance 'int'
| | |   | |-VarDecl 0x7fffd8420630 <col:7, col:20> col:20 used lsb 'int'
| | |   | |-VarDecl 0x7fffd84206a8 <col:7, col:25> col:25 used x0 'int'
| | |   | |-VarDecl 0x7fffd8420720 <col:7, col:28> col:28 used y0 'int'
| | |   | |-VarDecl 0x7fffd8420798 <col:7, col:31> col:31 used x1 'int'
| | |   | |-VarDecl 0x7fffd8420810 <col:7, col:34> col:34 used y1 'int'
| | |   | |-VarDecl 0x7fffd8420888 <col:7, col:37> col:37 used gw 'int'
| | |   | `-VarDecl 0x7fffd8420900 <col:7, col:40> col:40 used gh 'int'
| | |   |-DeclStmt 0x7fffd8420bb8 <line:3776:7, col:55>
| | |   | `-VarDecl 0x7fffd84209d8 <col:7, col:54> col:11 used g 'int' cinit
| | |   |   `-CallExpr 0x7fffd8420b68 <col:15, col:54> 'int'
| | |   |     |-ImplicitCastExpr 0x7fffd8420b50 <col:15> 'int (*)(const stbtt_fontinfo *, int)' <FunctionToPointerDecay>
| | |   |     | `-DeclRefExpr 0x7fffd8420a38 <col:15> 'int (const stbtt_fontinfo *, int)' Function 0x7fffd83829f0 'stbtt_FindGlyphIndex' 'int (const stbtt_fontinfo *, int)'
| | |   |     |-ImplicitCastExpr 0x7fffd8420ba0 <col:36, col:37> 'const stbtt_fontinfo *' <BitCast>
| | |   |     | `-UnaryOperator 0x7fffd8420a88 <col:36, col:37> 'stbtt_fontinfo *' prefix '&'
| | |   |     |   `-DeclRefExpr 0x7fffd8420a60 <col:37> 'stbtt_fontinfo':'struct stbtt_fontinfo' lvalue Var 0x7fffd841fb80 'f' 'stbtt_fontinfo':'struct stbtt_fontinfo'
| | |   |     `-BinaryOperator 0x7fffd8420b28 <col:40, col:53> 'int' '+'
| | |   |       |-ImplicitCastExpr 0x7fffd8420af8 <col:40> 'int' <LValueToRValue>
| | |   |       | `-DeclRefExpr 0x7fffd8420aa8 <col:40> 'int' lvalue ParmVar 0x7fffd841f528 'first_char' 'int'
| | |   |       `-ImplicitCastExpr 0x7fffd8420b10 <col:53> 'int' <LValueToRValue>
| | |   |         `-DeclRefExpr 0x7fffd8420ad0 <col:53> 'int' lvalue Var 0x7fffd841fad0 'i' 'int'
| | |   |-CallExpr 0x7fffd8420d10 <line:3777:7, col:51> 'void'
| | |   | |-ImplicitCastExpr 0x7fffd8420cf8 <col:7> 'void (*)(const stbtt_fontinfo *, int, int *, int *)' <FunctionToPointerDecay>
| | |   | | `-DeclRefExpr 0x7fffd8420bd0 <col:7> 'void (const stbtt_fontinfo *, int, int *, int *)' Function 0x7fffd83bff60 'stbtt_GetGlyphHMetrics' 'void (const stbtt_fontinfo *, int, int *, int *)'
| | |   | |-ImplicitCastExpr 0x7fffd8420d58 <col:30, col:31> 'const stbtt_fontinfo *' <BitCast>
| | |   | | `-UnaryOperator 0x7fffd8420c20 <col:30, col:31> 'stbtt_fontinfo *' prefix '&'
| | |   | |   `-DeclRefExpr 0x7fffd8420bf8 <col:31> 'stbtt_fontinfo':'struct stbtt_fontinfo' lvalue Var 0x7fffd841fb80 'f' 'stbtt_fontinfo':'struct stbtt_fontinfo'
| | |   | |-ImplicitCastExpr 0x7fffd8420d70 <col:34> 'int' <LValueToRValue>
| | |   | | `-DeclRefExpr 0x7fffd8420c40 <col:34> 'int' lvalue Var 0x7fffd84209d8 'g' 'int'
| | |   | |-UnaryOperator 0x7fffd8420c90 <col:37, col:38> 'int *' prefix '&'
| | |   | | `-DeclRefExpr 0x7fffd8420c68 <col:38> 'int' lvalue Var 0x7fffd84205b8 'advance' 'int'
| | |   | `-UnaryOperator 0x7fffd8420cd8 <col:47, col:48> 'int *' prefix '&'
| | |   |   `-DeclRefExpr 0x7fffd8420cb0 <col:48> 'int' lvalue Var 0x7fffd8420630 'lsb' 'int'
| | |   |-CallExpr 0x7fffd8421000 <line:3778:7, col:66> 'void'
| | |   | |-ImplicitCastExpr 0x7fffd8420fe8 <col:7> 'void (*)(const stbtt_fontinfo *, int, float, float, int *, int *, int *, int *)' <FunctionToPointerDecay>
| | |   | | `-DeclRefExpr 0x7fffd8420d88 <col:7> 'void (const stbtt_fontinfo *, int, float, float, int *, int *, int *, int *)' Function 0x7fffd83dd4e8 'stbtt_GetGlyphBitmapBox' 'void (const stbtt_fontinfo *, int, float, float, int *, int *, int *, int *)'
| | |   | |-ImplicitCastExpr 0x7fffd8421068 <col:31, col:32> 'const stbtt_fontinfo *' <BitCast>
| | |   | | `-UnaryOperator 0x7fffd8420dd8 <col:31, col:32> 'stbtt_fontinfo *' prefix '&'
| | |   | |   `-DeclRefExpr 0x7fffd8420db0 <col:32> 'stbtt_fontinfo':'struct stbtt_fontinfo' lvalue Var 0x7fffd841fb80 'f' 'stbtt_fontinfo':'struct stbtt_fontinfo'
| | |   | |-ImplicitCastExpr 0x7fffd8421080 <col:35> 'int' <LValueToRValue>
| | |   | | `-DeclRefExpr 0x7fffd8420df8 <col:35> 'int' lvalue Var 0x7fffd84209d8 'g' 'int'
| | |   | |-ImplicitCastExpr 0x7fffd8421098 <col:38> 'float' <LValueToRValue>
| | |   | | `-DeclRefExpr 0x7fffd8420e20 <col:38> 'float' lvalue Var 0x7fffd841f8d8 'scale' 'float'
| | |   | |-ImplicitCastExpr 0x7fffd84210b0 <col:44> 'float' <LValueToRValue>
| | |   | | `-DeclRefExpr 0x7fffd8420e48 <col:44> 'float' lvalue Var 0x7fffd841f8d8 'scale' 'float'
| | |   | |-UnaryOperator 0x7fffd8420e98 <col:51, col:52> 'int *' prefix '&'
| | |   | | `-DeclRefExpr 0x7fffd8420e70 <col:52> 'int' lvalue Var 0x7fffd84206a8 'x0' 'int'
| | |   | |-UnaryOperator 0x7fffd8420ee0 <col:55, col:56> 'int *' prefix '&'
| | |   | | `-DeclRefExpr 0x7fffd8420eb8 <col:56> 'int' lvalue Var 0x7fffd8420720 'y0' 'int'
| | |   | |-UnaryOperator 0x7fffd8420f28 <col:59, col:60> 'int *' prefix '&'
| | |   | | `-DeclRefExpr 0x7fffd8420f00 <col:60> 'int' lvalue Var 0x7fffd8420798 'x1' 'int'
| | |   | `-UnaryOperator 0x7fffd8420f70 <col:63, col:64> 'int *' prefix '&'
| | |   |   `-DeclRefExpr 0x7fffd8420f48 <col:64> 'int' lvalue Var 0x7fffd8420810 'y1' 'int'
| | |   |-BinaryOperator 0x7fffd8421198 <line:3779:7, col:15> 'int' '='
| | |   | |-DeclRefExpr 0x7fffd84210c8 <col:7> 'int' lvalue Var 0x7fffd8420888 'gw' 'int'
| | |   | `-BinaryOperator 0x7fffd8421170 <col:12, col:15> 'int' '-'
| | |   |   |-ImplicitCastExpr 0x7fffd8421140 <col:12> 'int' <LValueToRValue>
| | |   |   | `-DeclRefExpr 0x7fffd84210f0 <col:12> 'int' lvalue Var 0x7fffd8420798 'x1' 'int'
| | |   |   `-ImplicitCastExpr 0x7fffd8421158 <col:15> 'int' <LValueToRValue>
| | |   |     `-DeclRefExpr 0x7fffd8421118 <col:15> 'int' lvalue Var 0x7fffd84206a8 'x0' 'int'
| | |   |-BinaryOperator 0x7fffd8421290 <line:3780:7, col:15> 'int' '='
| | |   | |-DeclRefExpr 0x7fffd84211c0 <col:7> 'int' lvalue Var 0x7fffd8420900 'gh' 'int'
| | |   | `-BinaryOperator 0x7fffd8421268 <col:12, col:15> 'int' '-'
| | |   |   |-ImplicitCastExpr 0x7fffd8421238 <col:12> 'int' <LValueToRValue>
| | |   |   | `-DeclRefExpr 0x7fffd84211e8 <col:12> 'int' lvalue Var 0x7fffd8420810 'y1' 'int'
| | |   |   `-ImplicitCastExpr 0x7fffd8421250 <col:15> 'int' <LValueToRValue>
| | |   |     `-DeclRefExpr 0x7fffd8421210 <col:15> 'int' lvalue Var 0x7fffd8420720 'y0' 'int'
| | |   |-IfStmt 0x7fffd8421538 <line:3781:7, line:3782:28>
| | |   | |-<<<NULL>>>
| | |   | |-<<<NULL>>>
| | |   | |-BinaryOperator 0x7fffd84213e8 <line:3781:11, col:25> 'int' '>='
| | |   | | |-BinaryOperator 0x7fffd8421380 <col:11, col:20> 'int' '+'
| | |   | | | |-BinaryOperator 0x7fffd8421338 <col:11, col:15> 'int' '+'
| | |   | | | | |-ImplicitCastExpr 0x7fffd8421308 <col:11> 'int' <LValueToRValue>
| | |   | | | | | `-DeclRefExpr 0x7fffd84212b8 <col:11> 'int' lvalue Var 0x7fffd841f968 'x' 'int'
| | |   | | | | `-ImplicitCastExpr 0x7fffd8421320 <col:15> 'int' <LValueToRValue>
| | |   | | | |   `-DeclRefExpr 0x7fffd84212e0 <col:15> 'int' lvalue Var 0x7fffd8420888 'gw' 'int'
| | |   | | | `-IntegerLiteral 0x7fffd8421360 <col:20> 'int' 1
| | |   | | `-ImplicitCastExpr 0x7fffd84213d0 <col:25> 'int' <LValueToRValue>
| | |   | |   `-DeclRefExpr 0x7fffd84213a8 <col:25> 'int' lvalue ParmVar 0x7fffd841f438 'pw' 'int'
| | |   | |-BinaryOperator 0x7fffd8421510 <line:3782:10, col:28> 'int' ','
| | |   | | |-BinaryOperator 0x7fffd8421478 <col:10, col:14> 'int' '='
| | |   | | | |-DeclRefExpr 0x7fffd8421410 <col:10> 'int' lvalue Var 0x7fffd841f9e0 'y' 'int'
| | |   | | | `-ImplicitCastExpr 0x7fffd8421460 <col:14> 'int' <LValueToRValue>
| | |   | | |   `-DeclRefExpr 0x7fffd8421438 <col:14> 'int' lvalue Var 0x7fffd841fa58 'bottom_y' 'int'
| | |   | | `-BinaryOperator 0x7fffd84214e8 <col:24, col:28> 'int' '='
| | |   | |   |-DeclRefExpr 0x7fffd84214a0 <col:24> 'int' lvalue Var 0x7fffd841f968 'x' 'int'
| | |   | |   `-IntegerLiteral 0x7fffd84214c8 <col:28> 'int' 1
| | |   | `-<<<NULL>>>
| | |   |-IfStmt 0x7fffd8421740 <line:3783:7, line:3784:18>
| | |   | |-<<<NULL>>>
| | |   | |-<<<NULL>>>
| | |   | |-BinaryOperator 0x7fffd84216a0 <line:3783:11, col:25> 'int' '>='
| | |   | | |-BinaryOperator 0x7fffd8421638 <col:11, col:20> 'int' '+'
| | |   | | | |-BinaryOperator 0x7fffd84215f0 <col:11, col:15> 'int' '+'
| | |   | | | | |-ImplicitCastExpr 0x7fffd84215c0 <col:11> 'int' <LValueToRValue>
| | |   | | | | | `-DeclRefExpr 0x7fffd8421570 <col:11> 'int' lvalue Var 0x7fffd841f9e0 'y' 'int'
| | |   | | | | `-ImplicitCastExpr 0x7fffd84215d8 <col:15> 'int' <LValueToRValue>
| | |   | | | |   `-DeclRefExpr 0x7fffd8421598 <col:15> 'int' lvalue Var 0x7fffd8420900 'gh' 'int'
| | |   | | | `-IntegerLiteral 0x7fffd8421618 <col:20> 'int' 1
| | |   | | `-ImplicitCastExpr 0x7fffd8421688 <col:25> 'int' <LValueToRValue>
| | |   | |   `-DeclRefExpr 0x7fffd8421660 <col:25> 'int' lvalue ParmVar 0x7fffd841f4b0 'ph' 'int'
| | |   | |-ReturnStmt 0x7fffd8421728 <line:3784:10, col:18>
| | |   | | `-UnaryOperator 0x7fffd8421708 <col:17, col:18> 'int' prefix '-'
| | |   | |   `-ImplicitCastExpr 0x7fffd84216f0 <col:18> 'int' <LValueToRValue>
| | |   | |     `-DeclRefExpr 0x7fffd84216c8 <col:18> 'int' lvalue Var 0x7fffd841fad0 'i' 'int'
| | |   | `-<<<NULL>>>
| | |   |-ParenExpr 0x7fffd8421e70 </usr/include/assert.h:108:3, line:113:7> 'void'
| | |   | `-BinaryOperator 0x7fffd8421e48 <line:108:4, line:113:6> 'void' ','
| | |   |   |-CStyleCastExpr 0x7fffd8421968 <line:108:4, col:33> 'void' <ToVoid>
| | |   |   | `-UnaryExprOrTypeTraitExpr 0x7fffd8421938 <col:11, col:33> 'unsigned long' sizeof
| | |   |   |   `-ParenExpr 0x7fffd8421918 <col:18, col:33> 'int'
| | |   |   |     `-ConditionalOperator 0x7fffd84218e8 <col:19, col:32> 'int'
| | |   |   |       |-ParenExpr 0x7fffd8421888 <col:19, col:24> 'int'
| | |   |   |       | `-BinaryOperator 0x7fffd8421860 <././stb/stb_truetype.h:3785:20, col:27> 'int' '<'
| | |   |   |       |   |-BinaryOperator 0x7fffd84217f8 <col:20, col:22> 'int' '+'
| | |   |   |       |   | |-ImplicitCastExpr 0x7fffd84217c8 <col:20> 'int' <LValueToRValue>
| | |   |   |       |   | | `-DeclRefExpr 0x7fffd8421778 <col:20> 'int' lvalue Var 0x7fffd841f968 'x' 'int'
| | |   |   |       |   | `-ImplicitCastExpr 0x7fffd84217e0 <col:22> 'int' <LValueToRValue>
| | |   |   |       |   |   `-DeclRefExpr 0x7fffd84217a0 <col:22> 'int' lvalue Var 0x7fffd8420888 'gw' 'int'
| | |   |   |       |   `-ImplicitCastExpr 0x7fffd8421848 <col:27> 'int' <LValueToRValue>
| | |   |   |       |     `-DeclRefExpr 0x7fffd8421820 <col:27> 'int' lvalue ParmVar 0x7fffd841f438 'pw' 'int'
| | |   |   |       |-IntegerLiteral 0x7fffd84218a8 </usr/include/assert.h:108:28> 'int' 1
| | |   |   |       `-IntegerLiteral 0x7fffd84218c8 <col:32> 'int' 0
| | |   |   `-UnaryOperator 0x7fffd8421e28 <col:36, line:113:6> 'void' prefix '__extension__'
| | |   |     `-StmtExpr 0x7fffd8421e08 <line:108:50, line:113:6> 'void'
| | |   |       `-CompoundStmt 0x7fffd8421df0 <line:108:51, line:113:5>
| | |   |         `-IfStmt 0x7fffd8421db8 <line:109:7, line:112:68>
| | |   |           |-<<<NULL>>>
| | |   |           |-<<<NULL>>>
| | |   |           |-BinaryOperator 0x7fffd8421a78 <././stb/stb_truetype.h:3785:20, col:27> 'int' '<'
| | |   |           | |-BinaryOperator 0x7fffd8421a10 <col:20, col:22> 'int' '+'
| | |   |           | | |-ImplicitCastExpr 0x7fffd84219e0 <col:20> 'int' <LValueToRValue>
| | |   |           | | | `-DeclRefExpr 0x7fffd8421990 <col:20> 'int' lvalue Var 0x7fffd841f968 'x' 'int'
| | |   |           | | `-ImplicitCastExpr 0x7fffd84219f8 <col:22> 'int' <LValueToRValue>
| | |   |           | |   `-DeclRefExpr 0x7fffd84219b8 <col:22> 'int' lvalue Var 0x7fffd8420888 'gw' 'int'
| | |   |           | `-ImplicitCastExpr 0x7fffd8421a60 <col:27> 'int' <LValueToRValue>
| | |   |           |   `-DeclRefExpr 0x7fffd8421a38 <col:27> 'int' lvalue ParmVar 0x7fffd841f438 'pw' 'int'
| | |   |           |-NullStmt 0x7fffd8421aa0 </usr/include/assert.h:110:9>
| | |   |           `-CallExpr 0x7fffd8421ce0 <line:112:9, col:68> 'void'
| | |   |             |-ImplicitCastExpr 0x7fffd8421cc8 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
| | |   |             | `-DeclRefExpr 0x7fffd8421ab0 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
| | |   |             |-ImplicitCastExpr 0x7fffd8421d40 <<scratch space>:22:1> 'const char *' <BitCast>
| | |   |             | `-ImplicitCastExpr 0x7fffd8421d28 <col:1> 'char *' <ArrayToPointerDecay>
| | |   |             |   `-StringLiteral 0x7fffd8421ad8 <col:1> 'char [10]' lvalue "x+gw < pw"
| | |   |             |-ImplicitCastExpr 0x7fffd8421d70 <line:23:1> 'const char *' <BitCast>
| | |   |             | `-ImplicitCastExpr 0x7fffd8421d58 <col:1> 'char *' <ArrayToPointerDecay>
| | |   |             |   `-StringLiteral 0x7fffd8421b10 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
| | |   |             |-ImplicitCastExpr 0x7fffd8421d88 <line:24:1> 'unsigned int' <IntegralCast>
| | |   |             | `-IntegerLiteral 0x7fffd8421b50 <col:1> 'int' 3785
| | |   |             `-ImplicitCastExpr 0x7fffd8421da0 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
| | |   |               `-UnaryOperator 0x7fffd8421ca8 <col:30, col:44> 'const char [119]' lvalue prefix '__extension__'
| | |   |                 `-PredefinedExpr 0x7fffd8421c88 <col:44> 'const char [119]' lvalue __PRETTY_FUNCTION__
| | |   |                   `-StringLiteral 0x7fffd8421be8 <col:44> 'const char [119]' lvalue "int stbtt_BakeFontBitmap_internal(unsigned char *, int, float, unsigned char *, int, int, int, int, stbtt_bakedchar *)"
| | |   |-ParenExpr 0x7fffd8422538 <line:108:3, line:113:7> 'void'
| | |   | `-BinaryOperator 0x7fffd8422510 <line:108:4, line:113:6> 'void' ','
| | |   |   |-CStyleCastExpr 0x7fffd8422080 <line:108:4, col:33> 'void' <ToVoid>
| | |   |   | `-UnaryExprOrTypeTraitExpr 0x7fffd8422050 <col:11, col:33> 'unsigned long' sizeof
| | |   |   |   `-ParenExpr 0x7fffd8422030 <col:18, col:33> 'int'
| | |   |   |     `-ConditionalOperator 0x7fffd8422000 <col:19, col:32> 'int'
| | |   |   |       |-ParenExpr 0x7fffd8421fa0 <col:19, col:24> 'int'
| | |   |   |       | `-BinaryOperator 0x7fffd8421f78 <././stb/stb_truetype.h:3786:20, col:27> 'int' '<'
| | |   |   |       |   |-BinaryOperator 0x7fffd8421f10 <col:20, col:22> 'int' '+'
| | |   |   |       |   | |-ImplicitCastExpr 0x7fffd8421ee0 <col:20> 'int' <LValueToRValue>
| | |   |   |       |   | | `-DeclRefExpr 0x7fffd8421e90 <col:20> 'int' lvalue Var 0x7fffd841f9e0 'y' 'int'
| | |   |   |       |   | `-ImplicitCastExpr 0x7fffd8421ef8 <col:22> 'int' <LValueToRValue>
| | |   |   |       |   |   `-DeclRefExpr 0x7fffd8421eb8 <col:22> 'int' lvalue Var 0x7fffd8420900 'gh' 'int'
| | |   |   |       |   `-ImplicitCastExpr 0x7fffd8421f60 <col:27> 'int' <LValueToRValue>
| | |   |   |       |     `-DeclRefExpr 0x7fffd8421f38 <col:27> 'int' lvalue ParmVar 0x7fffd841f4b0 'ph' 'int'
| | |   |   |       |-IntegerLiteral 0x7fffd8421fc0 </usr/include/assert.h:108:28> 'int' 1
| | |   |   |       `-IntegerLiteral 0x7fffd8421fe0 <col:32> 'int' 0
| | |   |   `-UnaryOperator 0x7fffd84224f0 <col:36, line:113:6> 'void' prefix '__extension__'
| | |   |     `-StmtExpr 0x7fffd84224d0 <line:108:50, line:113:6> 'void'
| | |   |       `-CompoundStmt 0x7fffd84224b8 <line:108:51, line:113:5>
| | |   |         `-IfStmt 0x7fffd8422480 <line:109:7, line:112:68>
| | |   |           |-<<<NULL>>>
| | |   |           |-<<<NULL>>>
| | |   |           |-BinaryOperator 0x7fffd8422190 <././stb/stb_truetype.h:3786:20, col:27> 'int' '<'
| | |   |           | |-BinaryOperator 0x7fffd8422128 <col:20, col:22> 'int' '+'
| | |   |           | | |-ImplicitCastExpr 0x7fffd84220f8 <col:20> 'int' <LValueToRValue>
| | |   |           | | | `-DeclRefExpr 0x7fffd84220a8 <col:20> 'int' lvalue Var 0x7fffd841f9e0 'y' 'int'
| | |   |           | | `-ImplicitCastExpr 0x7fffd8422110 <col:22> 'int' <LValueToRValue>
| | |   |           | |   `-DeclRefExpr 0x7fffd84220d0 <col:22> 'int' lvalue Var 0x7fffd8420900 'gh' 'int'
| | |   |           | `-ImplicitCastExpr 0x7fffd8422178 <col:27> 'int' <LValueToRValue>
| | |   |           |   `-DeclRefExpr 0x7fffd8422150 <col:27> 'int' lvalue ParmVar 0x7fffd841f4b0 'ph' 'int'
| | |   |           |-NullStmt 0x7fffd84221b8 </usr/include/assert.h:110:9>
| | |   |           `-CallExpr 0x7fffd84223a8 <line:112:9, col:68> 'void'
| | |   |             |-ImplicitCastExpr 0x7fffd8422390 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
| | |   |             | `-DeclRefExpr 0x7fffd84221f0 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
| | |   |             |-ImplicitCastExpr 0x7fffd8422408 <<scratch space>:25:1> 'const char *' <BitCast>
| | |   |             | `-ImplicitCastExpr 0x7fffd84223f0 <col:1> 'char *' <ArrayToPointerDecay>
| | |   |             |   `-StringLiteral 0x7fffd8422218 <col:1> 'char [10]' lvalue "y+gh < ph"
| | |   |             |-ImplicitCastExpr 0x7fffd8422438 <line:26:1> 'const char *' <BitCast>
| | |   |             | `-ImplicitCastExpr 0x7fffd8422420 <col:1> 'char *' <ArrayToPointerDecay>
| | |   |             |   `-StringLiteral 0x7fffd8422250 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
| | |   |             |-ImplicitCastExpr 0x7fffd8422450 <line:27:1> 'unsigned int' <IntegralCast>
| | |   |             | `-IntegerLiteral 0x7fffd8422290 <col:1> 'int' 3786
| | |   |             `-ImplicitCastExpr 0x7fffd8422468 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
| | |   |               `-UnaryOperator 0x7fffd8422370 <col:30, col:44> 'const char [119]' lvalue prefix '__extension__'
| | |   |                 `-PredefinedExpr 0x7fffd8422350 <col:44> 'const char [119]' lvalue __PRETTY_FUNCTION__
| | |   |                   `-StringLiteral 0x7fffd84222b0 <col:44> 'const char [119]' lvalue "int stbtt_BakeFontBitmap_internal(unsigned char *, int, float, unsigned char *, int, int, int, int, stbtt_bakedchar *)"
| | |   |-CallExpr 0x7fffd84228a0 <././stb/stb_truetype.h:3787:7, col:72> 'void'
| | |   | |-ImplicitCastExpr 0x7fffd8422888 <col:7> 'void (*)(const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, int)' <FunctionToPointerDecay>
| | |   | | `-DeclRefExpr 0x7fffd8422558 <col:7> 'void (const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, int)' Function 0x7fffd841bb88 'stbtt_MakeGlyphBitmap' 'void (const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, int)'
| | |   | |-ImplicitCastExpr 0x7fffd8422908 <col:29, col:30> 'const stbtt_fontinfo *' <BitCast>
| | |   | | `-UnaryOperator 0x7fffd84225a8 <col:29, col:30> 'stbtt_fontinfo *' prefix '&'
| | |   | |   `-DeclRefExpr 0x7fffd8422580 <col:30> 'stbtt_fontinfo':'struct stbtt_fontinfo' lvalue Var 0x7fffd841fb80 'f' 'stbtt_fontinfo':'struct stbtt_fontinfo'
| | |   | |-BinaryOperator 0x7fffd8422718 <col:33, col:44> 'unsigned char *' '+'
| | |   | | |-BinaryOperator 0x7fffd8422648 <col:33, col:40> 'unsigned char *' '+'
| | |   | | | |-ImplicitCastExpr 0x7fffd8422618 <col:33> 'unsigned char *' <LValueToRValue>
| | |   | | | | `-DeclRefExpr 0x7fffd84225c8 <col:33> 'unsigned char *' lvalue ParmVar 0x7fffd841f3c0 'pixels' 'unsigned char *'
| | |   | | | `-ImplicitCastExpr 0x7fffd8422630 <col:40> 'int' <LValueToRValue>
| | |   | | |   `-DeclRefExpr 0x7fffd84225f0 <col:40> 'int' lvalue Var 0x7fffd841f968 'x' 'int'
| | |   | | `-BinaryOperator 0x7fffd84226f0 <col:42, col:44> 'int' '*'
| | |   | |   |-ImplicitCastExpr 0x7fffd84226c0 <col:42> 'int' <LValueToRValue>
| | |   | |   | `-DeclRefExpr 0x7fffd8422670 <col:42> 'int' lvalue Var 0x7fffd841f9e0 'y' 'int'
| | |   | |   `-ImplicitCastExpr 0x7fffd84226d8 <col:44> 'int' <LValueToRValue>
| | |   | |     `-DeclRefExpr 0x7fffd8422698 <col:44> 'int' lvalue ParmVar 0x7fffd841f438 'pw' 'int'
| | |   | |-ImplicitCastExpr 0x7fffd8422920 <col:48> 'int' <LValueToRValue>
| | |   | | `-DeclRefExpr 0x7fffd8422740 <col:48> 'int' lvalue Var 0x7fffd8420888 'gw' 'int'
| | |   | |-ImplicitCastExpr 0x7fffd8422938 <col:51> 'int' <LValueToRValue>
| | |   | | `-DeclRefExpr 0x7fffd8422768 <col:51> 'int' lvalue Var 0x7fffd8420900 'gh' 'int'
| | |   | |-ImplicitCastExpr 0x7fffd8422950 <col:54> 'int' <LValueToRValue>
| | |   | | `-DeclRefExpr 0x7fffd8422790 <col:54> 'int' lvalue ParmVar 0x7fffd841f438 'pw' 'int'
| | |   | |-ImplicitCastExpr 0x7fffd8422968 <col:58> 'float' <LValueToRValue>
| | |   | | `-DeclRefExpr 0x7fffd84227b8 <col:58> 'float' lvalue Var 0x7fffd841f8d8 'scale' 'float'
| | |   | |-ImplicitCastExpr 0x7fffd8422980 <col:64> 'float' <LValueToRValue>
| | |   | | `-DeclRefExpr 0x7fffd84227e0 <col:64> 'float' lvalue Var 0x7fffd841f8d8 'scale' 'float'
| | |   | `-ImplicitCastExpr 0x7fffd8422998 <col:71> 'int' <LValueToRValue>
| | |   |   `-DeclRefExpr 0x7fffd8422808 <col:71> 'int' lvalue Var 0x7fffd84209d8 'g' 'int'
| | |   |-BinaryOperator 0x7fffd8422b20 <line:3788:7, col:38> 'unsigned short' '='
| | |   | |-MemberExpr 0x7fffd8422a58 <col:7, col:19> 'unsigned short' lvalue .x0 0x7fffd82a76d8
| | |   | | `-ArraySubscriptExpr 0x7fffd8422a30 <col:7, col:17> 'stbtt_bakedchar':'stbtt_bakedchar' lvalue
| | |   | |   |-ImplicitCastExpr 0x7fffd8422a00 <col:7> 'stbtt_bakedchar *' <LValueToRValue>
| | |   | |   | `-DeclRefExpr 0x7fffd84229b0 <col:7> 'stbtt_bakedchar *' lvalue ParmVar 0x7fffd841f610 'chardata' 'stbtt_bakedchar *'
| | |   | |   `-ImplicitCastExpr 0x7fffd8422a18 <col:16> 'int' <LValueToRValue>
| | |   | |     `-DeclRefExpr 0x7fffd84229d8 <col:16> 'int' lvalue Var 0x7fffd841fad0 'i' 'int'
| | |   | `-ImplicitCastExpr 0x7fffd8422b08 <col:24, col:38> 'unsigned short' <IntegralCast>
| | |   |   `-CStyleCastExpr 0x7fffd8422ae0 <col:24, col:38> 'stbtt_int16':'short' <IntegralCast>
| | |   |     `-ImplicitCastExpr 0x7fffd8422ac8 <col:38> 'int' <LValueToRValue>
| | |   |       `-DeclRefExpr 0x7fffd8422a90 <col:38> 'int' lvalue Var 0x7fffd841f968 'x' 'int'
| | |   |-BinaryOperator 0x7fffd8422cb8 <line:3789:7, col:38> 'unsigned short' '='
| | |   | |-MemberExpr 0x7fffd8422bf0 <col:7, col:19> 'unsigned short' lvalue .y0 0x7fffd82a7738
| | |   | | `-ArraySubscriptExpr 0x7fffd8422bc8 <col:7, col:17> 'stbtt_bakedchar':'stbtt_bakedchar' lvalue
| | |   | |   |-ImplicitCastExpr 0x7fffd8422b98 <col:7> 'stbtt_bakedchar *' <LValueToRValue>
| | |   | |   | `-DeclRefExpr 0x7fffd8422b48 <col:7> 'stbtt_bakedchar *' lvalue ParmVar 0x7fffd841f610 'chardata' 'stbtt_bakedchar *'
| | |   | |   `-ImplicitCastExpr 0x7fffd8422bb0 <col:16> 'int' <LValueToRValue>
| | |   | |     `-DeclRefExpr 0x7fffd8422b70 <col:16> 'int' lvalue Var 0x7fffd841fad0 'i' 'int'
| | |   | `-ImplicitCastExpr 0x7fffd8422ca0 <col:24, col:38> 'unsigned short' <IntegralCast>
| | |   |   `-CStyleCastExpr 0x7fffd8422c78 <col:24, col:38> 'stbtt_int16':'short' <IntegralCast>
| | |   |     `-ImplicitCastExpr 0x7fffd8422c60 <col:38> 'int' <LValueToRValue>
| | |   |       `-DeclRefExpr 0x7fffd8422c28 <col:38> 'int' lvalue Var 0x7fffd841f9e0 'y' 'int'
| | |   |-BinaryOperator 0x7fffd8422f08 <line:3790:7, col:45> 'unsigned short' '='
| | |   | |-MemberExpr 0x7fffd8422d88 <col:7, col:19> 'unsigned short' lvalue .x1 0x7fffd82a7798
| | |   | | `-ArraySubscriptExpr 0x7fffd8422d60 <col:7, col:17> 'stbtt_bakedchar':'stbtt_bakedchar' lvalue
| | |   | |   |-ImplicitCastExpr 0x7fffd8422d30 <col:7> 'stbtt_bakedchar *' <LValueToRValue>
| | |   | |   | `-DeclRefExpr 0x7fffd8422ce0 <col:7> 'stbtt_bakedchar *' lvalue ParmVar 0x7fffd841f610 'chardata' 'stbtt_bakedchar *'
| | |   | |   `-ImplicitCastExpr 0x7fffd8422d48 <col:16> 'int' <LValueToRValue>
| | |   | |     `-DeclRefExpr 0x7fffd8422d08 <col:16> 'int' lvalue Var 0x7fffd841fad0 'i' 'int'
| | |   | `-ImplicitCastExpr 0x7fffd8422ef0 <col:24, col:45> 'unsigned short' <IntegralCast>
| | |   |   `-CStyleCastExpr 0x7fffd8422ec8 <col:24, col:45> 'stbtt_int16':'short' <IntegralCast>
| | |   |     `-ParenExpr 0x7fffd8422ea8 <col:38, col:45> 'int'
| | |   |       `-BinaryOperator 0x7fffd8422e40 <col:39, col:43> 'int' '+'
| | |   |         |-ImplicitCastExpr 0x7fffd8422e10 <col:39> 'int' <LValueToRValue>
| | |   |         | `-DeclRefExpr 0x7fffd8422dc0 <col:39> 'int' lvalue Var 0x7fffd841f968 'x' 'int'
| | |   |         `-ImplicitCastExpr 0x7fffd8422e28 <col:43> 'int' <LValueToRValue>
| | |   |           `-DeclRefExpr 0x7fffd8422de8 <col:43> 'int' lvalue Var 0x7fffd8420888 'gw' 'int'
| | |   |-BinaryOperator 0x7fffd8423158 <line:3791:7, col:45> 'unsigned short' '='
| | |   | |-MemberExpr 0x7fffd8422fd8 <col:7, col:19> 'unsigned short' lvalue .y1 0x7fffd82a77f8
| | |   | | `-ArraySubscriptExpr 0x7fffd8422fb0 <col:7, col:17> 'stbtt_bakedchar':'stbtt_bakedchar' lvalue
| | |   | |   |-ImplicitCastExpr 0x7fffd8422f80 <col:7> 'stbtt_bakedchar *' <LValueToRValue>
| | |   | |   | `-DeclRefExpr 0x7fffd8422f30 <col:7> 'stbtt_bakedchar *' lvalue ParmVar 0x7fffd841f610 'chardata' 'stbtt_bakedchar *'
| | |   | |   `-ImplicitCastExpr 0x7fffd8422f98 <col:16> 'int' <LValueToRValue>
| | |   | |     `-DeclRefExpr 0x7fffd8422f58 <col:16> 'int' lvalue Var 0x7fffd841fad0 'i' 'int'
| | |   | `-ImplicitCastExpr 0x7fffd8423140 <col:24, col:45> 'unsigned short' <IntegralCast>
| | |   |   `-CStyleCastExpr 0x7fffd8423118 <col:24, col:45> 'stbtt_int16':'short' <IntegralCast>
| | |   |     `-ParenExpr 0x7fffd84230f8 <col:38, col:45> 'int'
| | |   |       `-BinaryOperator 0x7fffd8423090 <col:39, col:43> 'int' '+'
| | |   |         |-ImplicitCastExpr 0x7fffd8423060 <col:39> 'int' <LValueToRValue>
| | |   |         | `-DeclRefExpr 0x7fffd8423010 <col:39> 'int' lvalue Var 0x7fffd841f9e0 'y' 'int'
| | |   |         `-ImplicitCastExpr 0x7fffd8423078 <col:43> 'int' <LValueToRValue>
| | |   |           `-DeclRefExpr 0x7fffd8423038 <col:43> 'int' lvalue Var 0x7fffd8420900 'gh' 'int'
| | |   |-BinaryOperator 0x7fffd8423320 <line:3792:7, col:38> 'float' '='
| | |   | |-MemberExpr 0x7fffd8423228 <col:7, col:19> 'float' lvalue .xadvance 0x7fffd82a7918
| | |   | | `-ArraySubscriptExpr 0x7fffd8423200 <col:7, col:17> 'stbtt_bakedchar':'stbtt_bakedchar' lvalue
| | |   | |   |-ImplicitCastExpr 0x7fffd84231d0 <col:7> 'stbtt_bakedchar *' <LValueToRValue>
| | |   | |   | `-DeclRefExpr 0x7fffd8423180 <col:7> 'stbtt_bakedchar *' lvalue ParmVar 0x7fffd841f610 'chardata' 'stbtt_bakedchar *'
| | |   | |   `-ImplicitCastExpr 0x7fffd84231e8 <col:16> 'int' <LValueToRValue>
| | |   | |     `-DeclRefExpr 0x7fffd84231a8 <col:16> 'int' lvalue Var 0x7fffd841fad0 'i' 'int'
| | |   | `-BinaryOperator 0x7fffd84232f8 <col:30, col:38> 'float' '*'
| | |   |   |-ImplicitCastExpr 0x7fffd84232b0 <col:30> 'float' <LValueToRValue>
| | |   |   | `-DeclRefExpr 0x7fffd8423260 <col:30> 'float' lvalue Var 0x7fffd841f8d8 'scale' 'float'
| | |   |   `-ImplicitCastExpr 0x7fffd84232e0 <col:38> 'float' <IntegralToFloating>
| | |   |     `-ImplicitCastExpr 0x7fffd84232c8 <col:38> 'int' <LValueToRValue>
| | |   |       `-DeclRefExpr 0x7fffd8423288 <col:38> 'int' lvalue Var 0x7fffd84205b8 'advance' 'int'
| | |   |-BinaryOperator 0x7fffd84234a8 <line:3793:7, col:38> 'float' '='
| | |   | |-MemberExpr 0x7fffd84233f0 <col:7, col:19> 'float' lvalue .xoff 0x7fffd82a7858
| | |   | | `-ArraySubscriptExpr 0x7fffd84233c8 <col:7, col:17> 'stbtt_bakedchar':'stbtt_bakedchar' lvalue
| | |   | |   |-ImplicitCastExpr 0x7fffd8423398 <col:7> 'stbtt_bakedchar *' <LValueToRValue>
| | |   | |   | `-DeclRefExpr 0x7fffd8423348 <col:7> 'stbtt_bakedchar *' lvalue ParmVar 0x7fffd841f610 'chardata' 'stbtt_bakedchar *'
| | |   | |   `-ImplicitCastExpr 0x7fffd84233b0 <col:16> 'int' <LValueToRValue>
| | |   | |     `-DeclRefExpr 0x7fffd8423370 <col:16> 'int' lvalue Var 0x7fffd841fad0 'i' 'int'
| | |   | `-CStyleCastExpr 0x7fffd8423480 <col:30, col:38> 'float' <IntegralToFloating>
| | |   |   `-ImplicitCastExpr 0x7fffd8423468 <col:38> 'int' <LValueToRValue>
| | |   |     `-DeclRefExpr 0x7fffd8423428 <col:38> 'int' lvalue Var 0x7fffd84206a8 'x0' 'int'
| | |   |-BinaryOperator 0x7fffd8423630 <line:3794:7, col:38> 'float' '='
| | |   | |-MemberExpr 0x7fffd8423578 <col:7, col:19> 'float' lvalue .yoff 0x7fffd82a78b8
| | |   | | `-ArraySubscriptExpr 0x7fffd8423550 <col:7, col:17> 'stbtt_bakedchar':'stbtt_bakedchar' lvalue
| | |   | |   |-ImplicitCastExpr 0x7fffd8423520 <col:7> 'stbtt_bakedchar *' <LValueToRValue>
| | |   | |   | `-DeclRefExpr 0x7fffd84234d0 <col:7> 'stbtt_bakedchar *' lvalue ParmVar 0x7fffd841f610 'chardata' 'stbtt_bakedchar *'
| | |   | |   `-ImplicitCastExpr 0x7fffd8423538 <col:16> 'int' <LValueToRValue>
| | |   | |     `-DeclRefExpr 0x7fffd84234f8 <col:16> 'int' lvalue Var 0x7fffd841fad0 'i' 'int'
| | |   | `-CStyleCastExpr 0x7fffd8423608 <col:30, col:38> 'float' <IntegralToFloating>
| | |   |   `-ImplicitCastExpr 0x7fffd84235f0 <col:38> 'int' <LValueToRValue>
| | |   |     `-DeclRefExpr 0x7fffd84235b0 <col:38> 'int' lvalue Var 0x7fffd8420720 'y0' 'int'
| | |   |-BinaryOperator 0x7fffd8423770 <line:3795:7, col:20> 'int' '='
| | |   | |-DeclRefExpr 0x7fffd8423658 <col:7> 'int' lvalue Var 0x7fffd841f968 'x' 'int'
| | |   | `-BinaryOperator 0x7fffd8423748 <col:11, col:20> 'int' '+'
| | |   |   |-BinaryOperator 0x7fffd8423700 <col:11, col:15> 'int' '+'
| | |   |   | |-ImplicitCastExpr 0x7fffd84236d0 <col:11> 'int' <LValueToRValue>
| | |   |   | | `-DeclRefExpr 0x7fffd8423680 <col:11> 'int' lvalue Var 0x7fffd841f968 'x' 'int'
| | |   |   | `-ImplicitCastExpr 0x7fffd84236e8 <col:15> 'int' <LValueToRValue>
| | |   |   |   `-DeclRefExpr 0x7fffd84236a8 <col:15> 'int' lvalue Var 0x7fffd8420888 'gw' 'int'
| | |   |   `-IntegerLiteral 0x7fffd8423728 <col:20> 'int' 1
| | |   `-IfStmt 0x7fffd8423a30 <line:3796:7, line:3797:26>
| | |     |-<<<NULL>>>
| | |     |-<<<NULL>>>
| | |     |-BinaryOperator 0x7fffd84238c8 <line:3796:11, col:20> 'int' '>'
| | |     | |-BinaryOperator 0x7fffd8423860 <col:11, col:16> 'int' '+'
| | |     | | |-BinaryOperator 0x7fffd8423818 <col:11, col:13> 'int' '+'
| | |     | | | |-ImplicitCastExpr 0x7fffd84237e8 <col:11> 'int' <LValueToRValue>
| | |     | | | | `-DeclRefExpr 0x7fffd8423798 <col:11> 'int' lvalue Var 0x7fffd841f9e0 'y' 'int'
| | |     | | | `-ImplicitCastExpr 0x7fffd8423800 <col:13> 'int' <LValueToRValue>
| | |     | | |   `-DeclRefExpr 0x7fffd84237c0 <col:13> 'int' lvalue Var 0x7fffd8420900 'gh' 'int'
| | |     | | `-IntegerLiteral 0x7fffd8423840 <col:16> 'int' 1
| | |     | `-ImplicitCastExpr 0x7fffd84238b0 <col:20> 'int' <LValueToRValue>
| | |     |   `-DeclRefExpr 0x7fffd8423888 <col:20> 'int' lvalue Var 0x7fffd841fa58 'bottom_y' 'int'
| | |     |-BinaryOperator 0x7fffd8423a08 <line:3797:10, col:26> 'int' '='
| | |     | |-DeclRefExpr 0x7fffd84238f0 <col:10> 'int' lvalue Var 0x7fffd841fa58 'bottom_y' 'int'
| | |     | `-BinaryOperator 0x7fffd84239e0 <col:21, col:26> 'int' '+'
| | |     |   |-BinaryOperator 0x7fffd8423998 <col:21, col:23> 'int' '+'
| | |     |   | |-ImplicitCastExpr 0x7fffd8423968 <col:21> 'int' <LValueToRValue>
| | |     |   | | `-DeclRefExpr 0x7fffd8423918 <col:21> 'int' lvalue Var 0x7fffd841f9e0 'y' 'int'
| | |     |   | `-ImplicitCastExpr 0x7fffd8423980 <col:23> 'int' <LValueToRValue>
| | |     |   |   `-DeclRefExpr 0x7fffd8423940 <col:23> 'int' lvalue Var 0x7fffd8420900 'gh' 'int'
| | |     |   `-IntegerLiteral 0x7fffd84239c0 <col:26> 'int' 1
| | |     `-<<<NULL>>>
| | `-ReturnStmt 0x7fffd8423b90 <line:3799:4, col:11>
| |   `-ImplicitCastExpr 0x7fffd8423b78 <col:11> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x7fffd8423b50 <col:11> 'int' lvalue Var 0x7fffd841fa58 'bottom_y' 'int'
| `-FullComment 0x7fffd84836c0 <line:3750:4, col:78>
|   `-ParagraphComment 0x7fffd8483690 <col:4, col:78>
|     `-TextComment 0x7fffd8483660 <col:4, col:78> Text="///////////////////////////////////////////////////////////////////////////"
|-FunctionDecl 0x7fffd8424020 prev 0x7fffd8342690 <line:501:19, line:3821:1> line:3802:16 stbtt_GetBakedQuad 'void (const stbtt_bakedchar *, int, int, int, float *, float *, stbtt_aligned_quad *, int)' extern
| |-ParmVarDecl 0x7fffd8423c20 <col:35, col:58> col:58 used chardata 'const stbtt_bakedchar *'
| |-ParmVarDecl 0x7fffd8423c98 <col:68, col:72> col:72 used pw 'int'
| |-ParmVarDecl 0x7fffd8423d10 <col:76, col:80> col:80 used ph 'int'
| |-ParmVarDecl 0x7fffd8423d88 <col:84, col:88> col:88 used char_index 'int'
| |-ParmVarDecl 0x7fffd8423e00 <col:100, col:107> col:107 used xpos 'float *'
| |-ParmVarDecl 0x7fffd8423e78 <col:113, col:120> col:120 used ypos 'float *'
| |-ParmVarDecl 0x7fffd8423ee8 <col:126, col:146> col:146 used q 'stbtt_aligned_quad *'
| |-ParmVarDecl 0x7fffd8423f60 <col:149, col:153> col:153 used opengl_fillrule 'int'
| `-CompoundStmt 0x7fffd8425d78 <line:3803:1, line:3821:1>
|   |-DeclStmt 0x7fffd8424280 <line:3804:4, col:48>
|   | `-VarDecl 0x7fffd8424118 <col:4, col:44> col:10 used d3d_bias 'float' cinit
|   |   `-ConditionalOperator 0x7fffd8424250 <col:21, col:44> 'float'
|   |     |-ImplicitCastExpr 0x7fffd8424220 <col:21> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd8424178 <col:21> 'int' lvalue ParmVar 0x7fffd8423f60 'opengl_fillrule' 'int'
|   |     |-ImplicitCastExpr 0x7fffd8424238 <col:39> 'float' <IntegralToFloating>
|   |     | `-IntegerLiteral 0x7fffd84241a0 <col:39> 'int' 0
|   |     `-UnaryOperator 0x7fffd8424200 <col:43, col:44> 'float' prefix '-'
|   |       `-FloatingLiteral 0x7fffd84241c0 <col:44> 'float' 5.000000e-01
|   |-DeclStmt 0x7fffd84244e0 <line:3805:4, col:42>
|   | |-VarDecl 0x7fffd84242b0 <col:4, col:23> col:10 used ipw 'float' cinit
|   | | `-BinaryOperator 0x7fffd8424388 <col:16, col:23> 'float' '/'
|   | |   |-FloatingLiteral 0x7fffd8424310 <col:16> 'float' 1.000000e+00
|   | |   `-ImplicitCastExpr 0x7fffd8424370 <col:23> 'float' <IntegralToFloating>
|   | |     `-ImplicitCastExpr 0x7fffd8424358 <col:23> 'int' <LValueToRValue>
|   | |       `-DeclRefExpr 0x7fffd8424330 <col:23> 'int' lvalue ParmVar 0x7fffd8423c98 'pw' 'int'
|   | `-VarDecl 0x7fffd84243c8 <col:4, col:40> col:27 used iph 'float' cinit
|   |   `-BinaryOperator 0x7fffd84244a0 <col:33, col:40> 'float' '/'
|   |     |-FloatingLiteral 0x7fffd8424428 <col:33> 'float' 1.000000e+00
|   |     `-ImplicitCastExpr 0x7fffd8424488 <col:40> 'float' <IntegralToFloating>
|   |       `-ImplicitCastExpr 0x7fffd8424470 <col:40> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x7fffd8424448 <col:40> 'int' lvalue ParmVar 0x7fffd8423d10 'ph' 'int'
|   |-DeclStmt 0x7fffd8424610 <line:3806:4, col:52>
|   | `-VarDecl 0x7fffd8424508 <col:4, col:42> col:27 used b 'const stbtt_bakedchar *' cinit
|   |   `-BinaryOperator 0x7fffd84245e8 <col:31, col:42> 'const stbtt_bakedchar *' '+'
|   |     |-ImplicitCastExpr 0x7fffd84245b8 <col:31> 'const stbtt_bakedchar *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd8424568 <col:31> 'const stbtt_bakedchar *' lvalue ParmVar 0x7fffd8423c20 'chardata' 'const stbtt_bakedchar *'
|   |     `-ImplicitCastExpr 0x7fffd84245d0 <col:42> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd8424590 <col:42> 'int' lvalue ParmVar 0x7fffd8423d88 'char_index' 'int'
|   |-DeclStmt 0x7fffd8424920 <line:3807:4, col:56>
|   | `-VarDecl 0x7fffd8424640 <col:4, line:438:45> line:3807:8 used round_x 'int' cinit
|   |   `-ParenExpr 0x7fffd8424900 <line:438:30, col:45> 'int'
|   |     `-CStyleCastExpr 0x7fffd84248d8 <col:31, col:44> 'int' <FloatingToIntegral>
|   |       `-CallExpr 0x7fffd8424878 <col:37, col:44> 'double'
|   |         |-ImplicitCastExpr 0x7fffd8424860 <col:37> 'double (*)(double)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x7fffd84246a0 <col:37> 'double (double)' Function 0x7fffd8291850 'floor' 'double (double)'
|   |         `-ImplicitCastExpr 0x7fffd84248a8 <line:3807:31, col:51> 'double' <FloatingCast>
|   |           `-BinaryOperator 0x7fffd8424838 <col:31, col:51> 'float' '+'
|   |             |-ParenExpr 0x7fffd84247f8 <col:31, col:47> 'float'
|   |             | `-BinaryOperator 0x7fffd84247d0 <col:32, col:43> 'float' '+'
|   |             |   |-ImplicitCastExpr 0x7fffd84247a0 <col:32, col:33> 'float' <LValueToRValue>
|   |             |   | `-UnaryOperator 0x7fffd8424708 <col:32, col:33> 'float' lvalue prefix '*'
|   |             |   |   `-ImplicitCastExpr 0x7fffd84246f0 <col:33> 'float *' <LValueToRValue>
|   |             |   |     `-DeclRefExpr 0x7fffd84246c8 <col:33> 'float *' lvalue ParmVar 0x7fffd8423e00 'xpos' 'float *'
|   |             |   `-ImplicitCastExpr 0x7fffd84247b8 <col:40, col:43> 'float' <LValueToRValue>
|   |             |     `-MemberExpr 0x7fffd8424768 <col:40, col:43> 'const float' lvalue ->xoff 0x7fffd82a7858
|   |             |       `-ImplicitCastExpr 0x7fffd8424750 <col:40> 'const stbtt_bakedchar *' <LValueToRValue>
|   |             |         `-DeclRefExpr 0x7fffd8424728 <col:40> 'const stbtt_bakedchar *' lvalue Var 0x7fffd8424508 'b' 'const stbtt_bakedchar *'
|   |             `-FloatingLiteral 0x7fffd8424818 <col:51> 'float' 5.000000e-01
|   |-DeclStmt 0x7fffd8424c30 <line:3808:4, col:56>
|   | `-VarDecl 0x7fffd8424950 <col:4, line:438:45> line:3808:8 used round_y 'int' cinit
|   |   `-ParenExpr 0x7fffd8424c10 <line:438:30, col:45> 'int'
|   |     `-CStyleCastExpr 0x7fffd8424be8 <col:31, col:44> 'int' <FloatingToIntegral>
|   |       `-CallExpr 0x7fffd8424b88 <col:37, col:44> 'double'
|   |         |-ImplicitCastExpr 0x7fffd8424b70 <col:37> 'double (*)(double)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x7fffd84249b0 <col:37> 'double (double)' Function 0x7fffd8291850 'floor' 'double (double)'
|   |         `-ImplicitCastExpr 0x7fffd8424bb8 <line:3808:31, col:51> 'double' <FloatingCast>
|   |           `-BinaryOperator 0x7fffd8424b48 <col:31, col:51> 'float' '+'
|   |             |-ParenExpr 0x7fffd8424b08 <col:31, col:47> 'float'
|   |             | `-BinaryOperator 0x7fffd8424ae0 <col:32, col:43> 'float' '+'
|   |             |   |-ImplicitCastExpr 0x7fffd8424ab0 <col:32, col:33> 'float' <LValueToRValue>
|   |             |   | `-UnaryOperator 0x7fffd8424a18 <col:32, col:33> 'float' lvalue prefix '*'
|   |             |   |   `-ImplicitCastExpr 0x7fffd8424a00 <col:33> 'float *' <LValueToRValue>
|   |             |   |     `-DeclRefExpr 0x7fffd84249d8 <col:33> 'float *' lvalue ParmVar 0x7fffd8423e78 'ypos' 'float *'
|   |             |   `-ImplicitCastExpr 0x7fffd8424ac8 <col:40, col:43> 'float' <LValueToRValue>
|   |             |     `-MemberExpr 0x7fffd8424a78 <col:40, col:43> 'const float' lvalue ->yoff 0x7fffd82a78b8
|   |             |       `-ImplicitCastExpr 0x7fffd8424a60 <col:40> 'const stbtt_bakedchar *' <LValueToRValue>
|   |             |         `-DeclRefExpr 0x7fffd8424a38 <col:40> 'const stbtt_bakedchar *' lvalue Var 0x7fffd8424508 'b' 'const stbtt_bakedchar *'
|   |             `-FloatingLiteral 0x7fffd8424b28 <col:51> 'float' 5.000000e-01
|   |-BinaryOperator 0x7fffd8424d80 <line:3810:4, col:22> 'float' '='
|   | |-MemberExpr 0x7fffd8424c88 <col:4, col:7> 'float' lvalue ->x0 0x7fffd82a8218
|   | | `-ImplicitCastExpr 0x7fffd8424c70 <col:4> 'stbtt_aligned_quad *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8424c48 <col:4> 'stbtt_aligned_quad *' lvalue ParmVar 0x7fffd8423ee8 'q' 'stbtt_aligned_quad *'
|   | `-BinaryOperator 0x7fffd8424d58 <col:12, col:22> 'float' '+'
|   |   |-ImplicitCastExpr 0x7fffd8424d40 <col:12> 'float' <IntegralToFloating>
|   |   | `-ImplicitCastExpr 0x7fffd8424d10 <col:12> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x7fffd8424cc0 <col:12> 'int' lvalue Var 0x7fffd8424640 'round_x' 'int'
|   |   `-ImplicitCastExpr 0x7fffd8424d28 <col:22> 'float' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd8424ce8 <col:22> 'float' lvalue Var 0x7fffd8424118 'd3d_bias' 'float'
|   |-BinaryOperator 0x7fffd8424ee0 <line:3811:4, col:22> 'float' '='
|   | |-MemberExpr 0x7fffd8424de8 <col:4, col:7> 'float' lvalue ->y0 0x7fffd82a8278
|   | | `-ImplicitCastExpr 0x7fffd8424dd0 <col:4> 'stbtt_aligned_quad *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8424da8 <col:4> 'stbtt_aligned_quad *' lvalue ParmVar 0x7fffd8423ee8 'q' 'stbtt_aligned_quad *'
|   | `-BinaryOperator 0x7fffd8424eb8 <col:12, col:22> 'float' '+'
|   |   |-ImplicitCastExpr 0x7fffd8424ea0 <col:12> 'float' <IntegralToFloating>
|   |   | `-ImplicitCastExpr 0x7fffd8424e70 <col:12> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x7fffd8424e20 <col:12> 'int' lvalue Var 0x7fffd8424950 'round_y' 'int'
|   |   `-ImplicitCastExpr 0x7fffd8424e88 <col:22> 'float' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd8424e48 <col:22> 'float' lvalue Var 0x7fffd8424118 'd3d_bias' 'float'
|   |-BinaryOperator 0x7fffd84251e0 <line:3812:4, col:38> 'float' '='
|   | |-MemberExpr 0x7fffd8424f48 <col:4, col:7> 'float' lvalue ->x1 0x7fffd82a8398
|   | | `-ImplicitCastExpr 0x7fffd8424f30 <col:4> 'stbtt_aligned_quad *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8424f08 <col:4> 'stbtt_aligned_quad *' lvalue ParmVar 0x7fffd8423ee8 'q' 'stbtt_aligned_quad *'
|   | `-BinaryOperator 0x7fffd84251b8 <col:12, col:38> 'float' '+'
|   |   |-ImplicitCastExpr 0x7fffd84251a0 <col:12, col:33> 'float' <IntegralToFloating>
|   |   | `-BinaryOperator 0x7fffd8425138 <col:12, col:33> 'int' '-'
|   |   |   |-BinaryOperator 0x7fffd8425068 <col:12, col:25> 'int' '+'
|   |   |   | |-ImplicitCastExpr 0x7fffd8425020 <col:12> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x7fffd8424f80 <col:12> 'int' lvalue Var 0x7fffd8424640 'round_x' 'int'
|   |   |   | `-ImplicitCastExpr 0x7fffd8425050 <col:22, col:25> 'int' <IntegralCast>
|   |   |   |   `-ImplicitCastExpr 0x7fffd8425038 <col:22, col:25> 'unsigned short' <LValueToRValue>
|   |   |   |     `-MemberExpr 0x7fffd8424fe8 <col:22, col:25> 'const unsigned short' lvalue ->x1 0x7fffd82a7798
|   |   |   |       `-ImplicitCastExpr 0x7fffd8424fd0 <col:22> 'const stbtt_bakedchar *' <LValueToRValue>
|   |   |   |         `-DeclRefExpr 0x7fffd8424fa8 <col:22> 'const stbtt_bakedchar *' lvalue Var 0x7fffd8424508 'b' 'const stbtt_bakedchar *'
|   |   |   `-ImplicitCastExpr 0x7fffd8425120 <col:30, col:33> 'int' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x7fffd8425108 <col:30, col:33> 'unsigned short' <LValueToRValue>
|   |   |       `-MemberExpr 0x7fffd84250d0 <col:30, col:33> 'const unsigned short' lvalue ->x0 0x7fffd82a76d8
|   |   |         `-ImplicitCastExpr 0x7fffd84250b8 <col:30> 'const stbtt_bakedchar *' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x7fffd8425090 <col:30> 'const stbtt_bakedchar *' lvalue Var 0x7fffd8424508 'b' 'const stbtt_bakedchar *'
|   |   `-ImplicitCastExpr 0x7fffd8425188 <col:38> 'float' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd8425160 <col:38> 'float' lvalue Var 0x7fffd8424118 'd3d_bias' 'float'
|   |-BinaryOperator 0x7fffd84254e0 <line:3813:4, col:38> 'float' '='
|   | |-MemberExpr 0x7fffd8425248 <col:4, col:7> 'float' lvalue ->y1 0x7fffd82a83f8
|   | | `-ImplicitCastExpr 0x7fffd8425230 <col:4> 'stbtt_aligned_quad *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8425208 <col:4> 'stbtt_aligned_quad *' lvalue ParmVar 0x7fffd8423ee8 'q' 'stbtt_aligned_quad *'
|   | `-BinaryOperator 0x7fffd84254b8 <col:12, col:38> 'float' '+'
|   |   |-ImplicitCastExpr 0x7fffd84254a0 <col:12, col:33> 'float' <IntegralToFloating>
|   |   | `-BinaryOperator 0x7fffd8425438 <col:12, col:33> 'int' '-'
|   |   |   |-BinaryOperator 0x7fffd8425368 <col:12, col:25> 'int' '+'
|   |   |   | |-ImplicitCastExpr 0x7fffd8425320 <col:12> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x7fffd8425280 <col:12> 'int' lvalue Var 0x7fffd8424950 'round_y' 'int'
|   |   |   | `-ImplicitCastExpr 0x7fffd8425350 <col:22, col:25> 'int' <IntegralCast>
|   |   |   |   `-ImplicitCastExpr 0x7fffd8425338 <col:22, col:25> 'unsigned short' <LValueToRValue>
|   |   |   |     `-MemberExpr 0x7fffd84252e8 <col:22, col:25> 'const unsigned short' lvalue ->y1 0x7fffd82a77f8
|   |   |   |       `-ImplicitCastExpr 0x7fffd84252d0 <col:22> 'const stbtt_bakedchar *' <LValueToRValue>
|   |   |   |         `-DeclRefExpr 0x7fffd84252a8 <col:22> 'const stbtt_bakedchar *' lvalue Var 0x7fffd8424508 'b' 'const stbtt_bakedchar *'
|   |   |   `-ImplicitCastExpr 0x7fffd8425420 <col:30, col:33> 'int' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x7fffd8425408 <col:30, col:33> 'unsigned short' <LValueToRValue>
|   |   |       `-MemberExpr 0x7fffd84253d0 <col:30, col:33> 'const unsigned short' lvalue ->y0 0x7fffd82a7738
|   |   |         `-ImplicitCastExpr 0x7fffd84253b8 <col:30> 'const stbtt_bakedchar *' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x7fffd8425390 <col:30> 'const stbtt_bakedchar *' lvalue Var 0x7fffd8424508 'b' 'const stbtt_bakedchar *'
|   |   `-ImplicitCastExpr 0x7fffd8425488 <col:38> 'float' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd8425460 <col:38> 'float' lvalue Var 0x7fffd8424118 'd3d_bias' 'float'
|   |-BinaryOperator 0x7fffd84256a8 <line:3815:4, col:20> 'float' '='
|   | |-MemberExpr 0x7fffd8425548 <col:4, col:7> 'float' lvalue ->s0 0x7fffd82a82d8
|   | | `-ImplicitCastExpr 0x7fffd8425530 <col:4> 'stbtt_aligned_quad *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8425508 <col:4> 'stbtt_aligned_quad *' lvalue ParmVar 0x7fffd8423ee8 'q' 'stbtt_aligned_quad *'
|   | `-BinaryOperator 0x7fffd8425680 <col:12, col:20> 'float' '*'
|   |   |-ImplicitCastExpr 0x7fffd8425668 <col:12, col:15> 'float' <IntegralToFloating>
|   |   | `-ImplicitCastExpr 0x7fffd8425638 <col:12, col:15> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x7fffd8425620 <col:12, col:15> 'unsigned short' <LValueToRValue>
|   |   |     `-MemberExpr 0x7fffd84255c0 <col:12, col:15> 'const unsigned short' lvalue ->x0 0x7fffd82a76d8
|   |   |       `-ImplicitCastExpr 0x7fffd84255a8 <col:12> 'const stbtt_bakedchar *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x7fffd8425580 <col:12> 'const stbtt_bakedchar *' lvalue Var 0x7fffd8424508 'b' 'const stbtt_bakedchar *'
|   |   `-ImplicitCastExpr 0x7fffd8425650 <col:20> 'float' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd84255f8 <col:20> 'float' lvalue Var 0x7fffd84242b0 'ipw' 'float'
|   |-BinaryOperator 0x7fffd8425870 <line:3816:4, col:20> 'float' '='
|   | |-MemberExpr 0x7fffd8425710 <col:4, col:7> 'float' lvalue ->t0 0x7fffd82a8338
|   | | `-ImplicitCastExpr 0x7fffd84256f8 <col:4> 'stbtt_aligned_quad *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd84256d0 <col:4> 'stbtt_aligned_quad *' lvalue ParmVar 0x7fffd8423ee8 'q' 'stbtt_aligned_quad *'
|   | `-BinaryOperator 0x7fffd8425848 <col:12, col:20> 'float' '*'
|   |   |-ImplicitCastExpr 0x7fffd8425830 <col:12, col:15> 'float' <IntegralToFloating>
|   |   | `-ImplicitCastExpr 0x7fffd8425800 <col:12, col:15> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x7fffd84257e8 <col:12, col:15> 'unsigned short' <LValueToRValue>
|   |   |     `-MemberExpr 0x7fffd8425788 <col:12, col:15> 'const unsigned short' lvalue ->y0 0x7fffd82a7738
|   |   |       `-ImplicitCastExpr 0x7fffd8425770 <col:12> 'const stbtt_bakedchar *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x7fffd8425748 <col:12> 'const stbtt_bakedchar *' lvalue Var 0x7fffd8424508 'b' 'const stbtt_bakedchar *'
|   |   `-ImplicitCastExpr 0x7fffd8425818 <col:20> 'float' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd84257c0 <col:20> 'float' lvalue Var 0x7fffd84243c8 'iph' 'float'
|   |-BinaryOperator 0x7fffd8425a38 <line:3817:4, col:20> 'float' '='
|   | |-MemberExpr 0x7fffd84258d8 <col:4, col:7> 'float' lvalue ->s1 0x7fffd82a8458
|   | | `-ImplicitCastExpr 0x7fffd84258c0 <col:4> 'stbtt_aligned_quad *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8425898 <col:4> 'stbtt_aligned_quad *' lvalue ParmVar 0x7fffd8423ee8 'q' 'stbtt_aligned_quad *'
|   | `-BinaryOperator 0x7fffd8425a10 <col:12, col:20> 'float' '*'
|   |   |-ImplicitCastExpr 0x7fffd84259f8 <col:12, col:15> 'float' <IntegralToFloating>
|   |   | `-ImplicitCastExpr 0x7fffd84259c8 <col:12, col:15> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x7fffd84259b0 <col:12, col:15> 'unsigned short' <LValueToRValue>
|   |   |     `-MemberExpr 0x7fffd8425950 <col:12, col:15> 'const unsigned short' lvalue ->x1 0x7fffd82a7798
|   |   |       `-ImplicitCastExpr 0x7fffd8425938 <col:12> 'const stbtt_bakedchar *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x7fffd8425910 <col:12> 'const stbtt_bakedchar *' lvalue Var 0x7fffd8424508 'b' 'const stbtt_bakedchar *'
|   |   `-ImplicitCastExpr 0x7fffd84259e0 <col:20> 'float' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd8425988 <col:20> 'float' lvalue Var 0x7fffd84242b0 'ipw' 'float'
|   |-BinaryOperator 0x7fffd8425c00 <line:3818:4, col:20> 'float' '='
|   | |-MemberExpr 0x7fffd8425aa0 <col:4, col:7> 'float' lvalue ->t1 0x7fffd82a84b8
|   | | `-ImplicitCastExpr 0x7fffd8425a88 <col:4> 'stbtt_aligned_quad *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8425a60 <col:4> 'stbtt_aligned_quad *' lvalue ParmVar 0x7fffd8423ee8 'q' 'stbtt_aligned_quad *'
|   | `-BinaryOperator 0x7fffd8425bd8 <col:12, col:20> 'float' '*'
|   |   |-ImplicitCastExpr 0x7fffd8425bc0 <col:12, col:15> 'float' <IntegralToFloating>
|   |   | `-ImplicitCastExpr 0x7fffd8425b90 <col:12, col:15> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x7fffd8425b78 <col:12, col:15> 'unsigned short' <LValueToRValue>
|   |   |     `-MemberExpr 0x7fffd8425b18 <col:12, col:15> 'const unsigned short' lvalue ->y1 0x7fffd82a77f8
|   |   |       `-ImplicitCastExpr 0x7fffd8425b00 <col:12> 'const stbtt_bakedchar *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x7fffd8425ad8 <col:12> 'const stbtt_bakedchar *' lvalue Var 0x7fffd8424508 'b' 'const stbtt_bakedchar *'
|   |   `-ImplicitCastExpr 0x7fffd8425ba8 <col:20> 'float' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd8425b50 <col:20> 'float' lvalue Var 0x7fffd84243c8 'iph' 'float'
|   `-CompoundAssignOperator 0x7fffd8425d18 <line:3820:4, col:16> 'float' '+=' ComputeLHSTy='float' ComputeResultTy='float'
|     |-UnaryOperator 0x7fffd8425c68 <col:4, col:5> 'float' lvalue prefix '*'
|     | `-ImplicitCastExpr 0x7fffd8425c50 <col:5> 'float *' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fffd8425c28 <col:5> 'float *' lvalue ParmVar 0x7fffd8423e00 'xpos' 'float *'
|     `-ImplicitCastExpr 0x7fffd8425d00 <col:13, col:16> 'float' <LValueToRValue>
|       `-MemberExpr 0x7fffd8425cc8 <col:13, col:16> 'const float' lvalue ->xadvance 0x7fffd82a7918
|         `-ImplicitCastExpr 0x7fffd8425cb0 <col:13> 'const stbtt_bakedchar *' <LValueToRValue>
|           `-DeclRefExpr 0x7fffd8425c88 <col:13> 'const stbtt_bakedchar *' lvalue Var 0x7fffd8424508 'b' 'const stbtt_bakedchar *'
|-TypedefDecl 0x7fffd8425e10 <line:3830:1, col:13> col:13 referenced stbrp_coord 'int'
| `-BuiltinType 0x7fffd81de310 'int'
|-RecordDecl 0x7fffd8425ec8 <line:3843:9, line:3847:1> line:3843:9 struct definition
| |-FullComment 0x7fffd8483790 <line:3841:4, col:84>
| | `-ParagraphComment 0x7fffd8483760 <col:4, col:84>
| |   `-TextComment 0x7fffd8483730 <col:4, col:84> Text="/////////////////////////////////////////////////////////////////////////////////"
| |-FieldDecl 0x7fffd8425f88 <line:3845:4, col:8> col:8 referenced width 'int'
| |-FieldDecl 0x7fffd8425fe8 <col:4, col:14> col:14 referenced height 'int'
| |-FieldDecl 0x7fffd8426048 <line:3846:4, col:8> col:8 referenced x 'int'
| |-FieldDecl 0x7fffd84260a8 <col:4, col:10> col:10 referenced y 'int'
| `-FieldDecl 0x7fffd8426108 <col:4, col:12> col:12 referenced bottom_y 'int'
|-TypedefDecl 0x7fffd84261a0 <line:3843:1, line:3847:3> col:3 referenced stbrp_context 'struct stbrp_context':'stbrp_context'
| `-ElaboratedType 0x7fffd8426150 'struct stbrp_context' sugar
|   `-RecordType 0x7fffd8425f50 'stbrp_context'
|     `-Record 0x7fffd8425ec8 ''
|-RecordDecl 0x7fffd8426228 <line:3849:9, line:3852:1> line:3849:9 struct definition
| `-FieldDecl 0x7fffd84262e8 <line:3851:4, col:18> col:18 x 'unsigned char'
|-TypedefDecl 0x7fffd8426380 <line:3849:1, line:3852:3> col:3 referenced stbrp_node 'struct stbrp_node':'stbrp_node'
| `-ElaboratedType 0x7fffd8426330 'struct stbrp_node' sugar
|   `-RecordType 0x7fffd84262b0 'stbrp_node'
|     `-Record 0x7fffd8426228 ''
|-RecordDecl 0x7fffd84263f0 prev 0x7fffd83433f0 <line:3854:1, line:3858:1> line:3854:8 struct stbrp_rect definition
| |-FieldDecl 0x7fffd84264b0 <line:3856:4, col:16> col:16 referenced x 'stbrp_coord':'int'
| |-FieldDecl 0x7fffd8426508 <col:4, col:18> col:18 referenced y 'stbrp_coord':'int'
| |-FieldDecl 0x7fffd8426568 <line:3857:4, col:8> col:8 id 'int'
| |-FieldDecl 0x7fffd84265c8 <col:4, col:11> col:11 referenced w 'int'
| |-FieldDecl 0x7fffd8426628 <col:4, col:13> col:13 referenced h 'int'
| `-FieldDecl 0x7fffd8426688 <col:4, col:15> col:15 referenced was_packed 'int'
|-FunctionDecl 0x7fffd8426b10 <line:3860:1, line:3869:1> line:3860:13 used stbrp_init_target 'void (stbrp_context *, int, int, stbrp_node *, int)' static
| |-ParmVarDecl 0x7fffd8426758 <col:31, col:46> col:46 used con 'stbrp_context *'
| |-ParmVarDecl 0x7fffd84267d0 <col:51, col:55> col:55 used pw 'int'
| |-ParmVarDecl 0x7fffd8426848 <col:59, col:63> col:63 used ph 'int'
| |-ParmVarDecl 0x7fffd8426938 <col:67, col:79> col:79 referenced nodes 'stbrp_node *'
| |-ParmVarDecl 0x7fffd84269b0 <col:86, col:90> col:90 referenced num_nodes 'int'
| `-CompoundStmt 0x7fffd8427118 <line:3861:1, line:3869:1>
|   |-BinaryOperator 0x7fffd8426c90 <line:3862:4, col:18> 'int' '='
|   | |-MemberExpr 0x7fffd8426c18 <col:4, col:9> 'int' lvalue ->width 0x7fffd8425f88
|   | | `-ImplicitCastExpr 0x7fffd8426c00 <col:4> 'stbrp_context *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8426bd8 <col:4> 'stbrp_context *' lvalue ParmVar 0x7fffd8426758 'con' 'stbrp_context *'
|   | `-ImplicitCastExpr 0x7fffd8426c78 <col:18> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd8426c50 <col:18> 'int' lvalue ParmVar 0x7fffd84267d0 'pw' 'int'
|   |-BinaryOperator 0x7fffd8426d70 <line:3863:4, col:18> 'int' '='
|   | |-MemberExpr 0x7fffd8426cf8 <col:4, col:9> 'int' lvalue ->height 0x7fffd8425fe8
|   | | `-ImplicitCastExpr 0x7fffd8426ce0 <col:4> 'stbrp_context *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8426cb8 <col:4> 'stbrp_context *' lvalue ParmVar 0x7fffd8426758 'con' 'stbrp_context *'
|   | `-ImplicitCastExpr 0x7fffd8426d58 <col:18> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd8426d30 <col:18> 'int' lvalue ParmVar 0x7fffd8426848 'ph' 'int'
|   |-BinaryOperator 0x7fffd8426e30 <line:3864:4, col:13> 'int' '='
|   | |-MemberExpr 0x7fffd8426dd8 <col:4, col:9> 'int' lvalue ->x 0x7fffd8426048
|   | | `-ImplicitCastExpr 0x7fffd8426dc0 <col:4> 'stbrp_context *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8426d98 <col:4> 'stbrp_context *' lvalue ParmVar 0x7fffd8426758 'con' 'stbrp_context *'
|   | `-IntegerLiteral 0x7fffd8426e10 <col:13> 'int' 0
|   |-BinaryOperator 0x7fffd8426ef0 <line:3865:4, col:13> 'int' '='
|   | |-MemberExpr 0x7fffd8426e98 <col:4, col:9> 'int' lvalue ->y 0x7fffd84260a8
|   | | `-ImplicitCastExpr 0x7fffd8426e80 <col:4> 'stbrp_context *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8426e58 <col:4> 'stbrp_context *' lvalue ParmVar 0x7fffd8426758 'con' 'stbrp_context *'
|   | `-IntegerLiteral 0x7fffd8426ed0 <col:13> 'int' 0
|   |-BinaryOperator 0x7fffd8426fb0 <line:3866:4, col:20> 'int' '='
|   | |-MemberExpr 0x7fffd8426f58 <col:4, col:9> 'int' lvalue ->bottom_y 0x7fffd8426108
|   | | `-ImplicitCastExpr 0x7fffd8426f40 <col:4> 'stbrp_context *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8426f18 <col:4> 'stbrp_context *' lvalue ParmVar 0x7fffd8426758 'con' 'stbrp_context *'
|   | `-IntegerLiteral 0x7fffd8426f90 <col:20> 'int' 0
|   |-CStyleCastExpr 0x7fffd8427050 <line:1120:28, col:42> 'void' <ToVoid>
|   | `-UnaryExprOrTypeTraitExpr 0x7fffd8427020 <col:34, col:42> 'unsigned long' sizeof
|   |   `-ParenExpr 0x7fffd8427000 <col:40, col:42> 'stbrp_node *' lvalue
|   |     `-DeclRefExpr 0x7fffd8426fd8 <line:3867:19> 'stbrp_node *' lvalue ParmVar 0x7fffd8426938 'nodes' 'stbrp_node *'
|   `-CStyleCastExpr 0x7fffd84270f0 <line:1120:28, col:42> 'void' <ToVoid>
|     `-UnaryExprOrTypeTraitExpr 0x7fffd84270c0 <col:34, col:42> 'unsigned long' sizeof
|       `-ParenExpr 0x7fffd84270a0 <col:40, col:42> 'int' lvalue
|         `-DeclRefExpr 0x7fffd8427078 <line:3868:19> 'int' lvalue ParmVar 0x7fffd84269b0 'num_nodes' 'int'
|-FunctionDecl 0x7fffd8427390 <line:3871:1, line:3890:1> line:3871:13 used stbrp_pack_rects 'void (stbrp_context *, stbrp_rect *, int)' static
| |-ParmVarDecl 0x7fffd8427170 <col:30, col:45> col:45 used con 'stbrp_context *'
| |-ParmVarDecl 0x7fffd84271e0 <col:50, col:62> col:62 used rects 'stbrp_rect *'
| |-ParmVarDecl 0x7fffd8427258 <col:69, col:73> col:73 used num_rects 'int'
| `-CompoundStmt 0x7fffd8429b98 <line:3872:1, line:3890:1>
|   |-DeclStmt 0x7fffd84274c0 <line:3873:4, col:9>
|   | `-VarDecl 0x7fffd8427460 <col:4, col:8> col:8 used i 'int'
|   |-ForStmt 0x7fffd84298e8 <line:3874:4, line:3887:4>
|   | |-BinaryOperator 0x7fffd8427520 <line:3874:9, col:11> 'int' '='
|   | | |-DeclRefExpr 0x7fffd84274d8 <col:9> 'int' lvalue Var 0x7fffd8427460 'i' 'int'
|   | | `-IntegerLiteral 0x7fffd8427500 <col:11> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd84275c8 <col:14, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd8427598 <col:14> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd8427548 <col:14> 'int' lvalue Var 0x7fffd8427460 'i' 'int'
|   | | `-ImplicitCastExpr 0x7fffd84275b0 <col:18> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8427570 <col:18> 'int' lvalue ParmVar 0x7fffd8427258 'num_rects' 'int'
|   | |-UnaryOperator 0x7fffd8427618 <col:29, col:31> 'int' prefix '++'
|   | | `-DeclRefExpr 0x7fffd84275f0 <col:31> 'int' lvalue Var 0x7fffd8427460 'i' 'int'
|   | `-CompoundStmt 0x7fffd84298a0 <col:34, line:3887:4>
|   |   |-IfStmt 0x7fffd8427ab0 <line:3875:7, line:3878:7>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x7fffd8427878 <line:3875:11, col:38> 'int' '>'
|   |   | | |-BinaryOperator 0x7fffd84277c0 <col:11, col:29> 'int' '+'
|   |   | | | |-ImplicitCastExpr 0x7fffd8427790 <col:11, col:16> 'int' <LValueToRValue>
|   |   | | | | `-MemberExpr 0x7fffd8427678 <col:11, col:16> 'int' lvalue ->x 0x7fffd8426048
|   |   | | | |   `-ImplicitCastExpr 0x7fffd8427660 <col:11> 'stbrp_context *' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x7fffd8427638 <col:11> 'stbrp_context *' lvalue ParmVar 0x7fffd8427170 'con' 'stbrp_context *'
|   |   | | | `-ImplicitCastExpr 0x7fffd84277a8 <col:20, col:29> 'int' <LValueToRValue>
|   |   | | |   `-MemberExpr 0x7fffd8427758 <col:20, col:29> 'int' lvalue .w 0x7fffd84265c8
|   |   | | |     `-ArraySubscriptExpr 0x7fffd8427730 <col:20, col:27> 'stbrp_rect':'struct stbrp_rect' lvalue
|   |   | | |       |-ImplicitCastExpr 0x7fffd8427700 <col:20> 'stbrp_rect *' <LValueToRValue>
|   |   | | |       | `-DeclRefExpr 0x7fffd84276b0 <col:20> 'stbrp_rect *' lvalue ParmVar 0x7fffd84271e0 'rects' 'stbrp_rect *'
|   |   | | |       `-ImplicitCastExpr 0x7fffd8427718 <col:26> 'int' <LValueToRValue>
|   |   | | |         `-DeclRefExpr 0x7fffd84276d8 <col:26> 'int' lvalue Var 0x7fffd8427460 'i' 'int'
|   |   | | `-ImplicitCastExpr 0x7fffd8427860 <col:33, col:38> 'int' <LValueToRValue>
|   |   | |   `-MemberExpr 0x7fffd8427828 <col:33, col:38> 'int' lvalue ->width 0x7fffd8425f88
|   |   | |     `-ImplicitCastExpr 0x7fffd8427810 <col:33> 'stbrp_context *' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x7fffd84277e8 <col:33> 'stbrp_context *' lvalue ParmVar 0x7fffd8427170 'con' 'stbrp_context *'
|   |   | |-CompoundStmt 0x7fffd8427a90 <col:45, line:3878:7>
|   |   | | |-BinaryOperator 0x7fffd8427938 <line:3876:10, col:19> 'int' '='
|   |   | | | |-MemberExpr 0x7fffd84278e0 <col:10, col:15> 'int' lvalue ->x 0x7fffd8426048
|   |   | | | | `-ImplicitCastExpr 0x7fffd84278c8 <col:10> 'stbrp_context *' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x7fffd84278a0 <col:10> 'stbrp_context *' lvalue ParmVar 0x7fffd8427170 'con' 'stbrp_context *'
|   |   | | | `-IntegerLiteral 0x7fffd8427918 <col:19> 'int' 0
|   |   | | `-BinaryOperator 0x7fffd8427a68 <line:3877:10, col:24> 'int' '='
|   |   | |   |-MemberExpr 0x7fffd84279a0 <col:10, col:15> 'int' lvalue ->y 0x7fffd84260a8
|   |   | |   | `-ImplicitCastExpr 0x7fffd8427988 <col:10> 'stbrp_context *' <LValueToRValue>
|   |   | |   |   `-DeclRefExpr 0x7fffd8427960 <col:10> 'stbrp_context *' lvalue ParmVar 0x7fffd8427170 'con' 'stbrp_context *'
|   |   | |   `-ImplicitCastExpr 0x7fffd8427a50 <col:19, col:24> 'int' <LValueToRValue>
|   |   | |     `-MemberExpr 0x7fffd8427a18 <col:19, col:24> 'int' lvalue ->bottom_y 0x7fffd8426108
|   |   | |       `-ImplicitCastExpr 0x7fffd8427a00 <col:19> 'stbrp_context *' <LValueToRValue>
|   |   | |         `-DeclRefExpr 0x7fffd84279d8 <col:19> 'stbrp_context *' lvalue ParmVar 0x7fffd8427170 'con' 'stbrp_context *'
|   |   | `-<<<NULL>>>
|   |   |-IfStmt 0x7fffd8427d58 <line:3879:7, line:3880:10>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x7fffd8427d28 <line:3879:11, col:38> 'int' '>'
|   |   | | |-BinaryOperator 0x7fffd8427c70 <col:11, col:29> 'int' '+'
|   |   | | | |-ImplicitCastExpr 0x7fffd8427c40 <col:11, col:16> 'int' <LValueToRValue>
|   |   | | | | `-MemberExpr 0x7fffd8427b28 <col:11, col:16> 'int' lvalue ->y 0x7fffd84260a8
|   |   | | | |   `-ImplicitCastExpr 0x7fffd8427b10 <col:11> 'stbrp_context *' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x7fffd8427ae8 <col:11> 'stbrp_context *' lvalue ParmVar 0x7fffd8427170 'con' 'stbrp_context *'
|   |   | | | `-ImplicitCastExpr 0x7fffd8427c58 <col:20, col:29> 'int' <LValueToRValue>
|   |   | | |   `-MemberExpr 0x7fffd8427c08 <col:20, col:29> 'int' lvalue .h 0x7fffd8426628
|   |   | | |     `-ArraySubscriptExpr 0x7fffd8427be0 <col:20, col:27> 'stbrp_rect':'struct stbrp_rect' lvalue
|   |   | | |       |-ImplicitCastExpr 0x7fffd8427bb0 <col:20> 'stbrp_rect *' <LValueToRValue>
|   |   | | |       | `-DeclRefExpr 0x7fffd8427b60 <col:20> 'stbrp_rect *' lvalue ParmVar 0x7fffd84271e0 'rects' 'stbrp_rect *'
|   |   | | |       `-ImplicitCastExpr 0x7fffd8427bc8 <col:26> 'int' <LValueToRValue>
|   |   | | |         `-DeclRefExpr 0x7fffd8427b88 <col:26> 'int' lvalue Var 0x7fffd8427460 'i' 'int'
|   |   | | `-ImplicitCastExpr 0x7fffd8427d10 <col:33, col:38> 'int' <LValueToRValue>
|   |   | |   `-MemberExpr 0x7fffd8427cd8 <col:33, col:38> 'int' lvalue ->height 0x7fffd8425fe8
|   |   | |     `-ImplicitCastExpr 0x7fffd8427cc0 <col:33> 'stbrp_context *' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x7fffd8427c98 <col:33> 'stbrp_context *' lvalue ParmVar 0x7fffd8427170 'con' 'stbrp_context *'
|   |   | |-BreakStmt 0x7fffd8427d50 <line:3880:10>
|   |   | `-<<<NULL>>>
|   |   |-BinaryOperator 0x7fffd8427f00 <line:3881:7, col:25> 'stbrp_coord':'int' '='
|   |   | |-MemberExpr 0x7fffd8427e38 <col:7, col:16> 'stbrp_coord':'int' lvalue .x 0x7fffd84264b0
|   |   | | `-ArraySubscriptExpr 0x7fffd8427e10 <col:7, col:14> 'stbrp_rect':'struct stbrp_rect' lvalue
|   |   | |   |-ImplicitCastExpr 0x7fffd8427de0 <col:7> 'stbrp_rect *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x7fffd8427d90 <col:7> 'stbrp_rect *' lvalue ParmVar 0x7fffd84271e0 'rects' 'stbrp_rect *'
|   |   | |   `-ImplicitCastExpr 0x7fffd8427df8 <col:13> 'int' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x7fffd8427db8 <col:13> 'int' lvalue Var 0x7fffd8427460 'i' 'int'
|   |   | `-ImplicitCastExpr 0x7fffd8427ee8 <col:20, col:25> 'int' <LValueToRValue>
|   |   |   `-MemberExpr 0x7fffd8427eb0 <col:20, col:25> 'int' lvalue ->x 0x7fffd8426048
|   |   |     `-ImplicitCastExpr 0x7fffd8427e98 <col:20> 'stbrp_context *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x7fffd8427e70 <col:20> 'stbrp_context *' lvalue ParmVar 0x7fffd8427170 'con' 'stbrp_context *'
|   |   |-BinaryOperator 0x7fffd8428098 <line:3882:7, col:25> 'stbrp_coord':'int' '='
|   |   | |-MemberExpr 0x7fffd8427fd0 <col:7, col:16> 'stbrp_coord':'int' lvalue .y 0x7fffd8426508
|   |   | | `-ArraySubscriptExpr 0x7fffd8427fa8 <col:7, col:14> 'stbrp_rect':'struct stbrp_rect' lvalue
|   |   | |   |-ImplicitCastExpr 0x7fffd8427f78 <col:7> 'stbrp_rect *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x7fffd8427f28 <col:7> 'stbrp_rect *' lvalue ParmVar 0x7fffd84271e0 'rects' 'stbrp_rect *'
|   |   | |   `-ImplicitCastExpr 0x7fffd8427f90 <col:13> 'int' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x7fffd8427f50 <col:13> 'int' lvalue Var 0x7fffd8427460 'i' 'int'
|   |   | `-ImplicitCastExpr 0x7fffd8428080 <col:20, col:25> 'int' <LValueToRValue>
|   |   |   `-MemberExpr 0x7fffd8428048 <col:20, col:25> 'int' lvalue ->y 0x7fffd84260a8
|   |   |     `-ImplicitCastExpr 0x7fffd8428030 <col:20> 'stbrp_context *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x7fffd8428008 <col:20> 'stbrp_context *' lvalue ParmVar 0x7fffd8427170 'con' 'stbrp_context *'
|   |   |-BinaryOperator 0x7fffd84281c0 <line:3883:7, col:29> 'int' '='
|   |   | |-MemberExpr 0x7fffd8428168 <col:7, col:16> 'int' lvalue .was_packed 0x7fffd8426688
|   |   | | `-ArraySubscriptExpr 0x7fffd8428140 <col:7, col:14> 'stbrp_rect':'struct stbrp_rect' lvalue
|   |   | |   |-ImplicitCastExpr 0x7fffd8428110 <col:7> 'stbrp_rect *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x7fffd84280c0 <col:7> 'stbrp_rect *' lvalue ParmVar 0x7fffd84271e0 'rects' 'stbrp_rect *'
|   |   | |   `-ImplicitCastExpr 0x7fffd8428128 <col:13> 'int' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x7fffd84280e8 <col:13> 'int' lvalue Var 0x7fffd8427460 'i' 'int'
|   |   | `-IntegerLiteral 0x7fffd84281a0 <col:29> 'int' 1
|   |   |-CompoundAssignOperator 0x7fffd8429378 <line:3884:7, col:26> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   | |-MemberExpr 0x7fffd8429248 <col:7, col:12> 'int' lvalue ->x 0x7fffd8426048
|   |   | | `-ImplicitCastExpr 0x7fffd8429230 <col:7> 'stbrp_context *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x7fffd84281e8 <col:7> 'stbrp_context *' lvalue ParmVar 0x7fffd8427170 'con' 'stbrp_context *'
|   |   | `-ImplicitCastExpr 0x7fffd8429360 <col:17, col:26> 'int' <LValueToRValue>
|   |   |   `-MemberExpr 0x7fffd8429328 <col:17, col:26> 'int' lvalue .w 0x7fffd84265c8
|   |   |     `-ArraySubscriptExpr 0x7fffd8429300 <col:17, col:24> 'stbrp_rect':'struct stbrp_rect' lvalue
|   |   |       |-ImplicitCastExpr 0x7fffd84292d0 <col:17> 'stbrp_rect *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x7fffd8429280 <col:17> 'stbrp_rect *' lvalue ParmVar 0x7fffd84271e0 'rects' 'stbrp_rect *'
|   |   |       `-ImplicitCastExpr 0x7fffd84292e8 <col:23> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x7fffd84292a8 <col:23> 'int' lvalue Var 0x7fffd8427460 'i' 'int'
|   |   `-IfStmt 0x7fffd8429868 <line:3885:7, line:3886:44>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x7fffd84295f0 <line:3885:11, col:38> 'int' '>'
|   |     | |-BinaryOperator 0x7fffd8429538 <col:11, col:29> 'int' '+'
|   |     | | |-ImplicitCastExpr 0x7fffd8429508 <col:11, col:16> 'int' <LValueToRValue>
|   |     | | | `-MemberExpr 0x7fffd84293f0 <col:11, col:16> 'int' lvalue ->y 0x7fffd84260a8
|   |     | | |   `-ImplicitCastExpr 0x7fffd84293d8 <col:11> 'stbrp_context *' <LValueToRValue>
|   |     | | |     `-DeclRefExpr 0x7fffd84293b0 <col:11> 'stbrp_context *' lvalue ParmVar 0x7fffd8427170 'con' 'stbrp_context *'
|   |     | | `-ImplicitCastExpr 0x7fffd8429520 <col:20, col:29> 'int' <LValueToRValue>
|   |     | |   `-MemberExpr 0x7fffd84294d0 <col:20, col:29> 'int' lvalue .h 0x7fffd8426628
|   |     | |     `-ArraySubscriptExpr 0x7fffd84294a8 <col:20, col:27> 'stbrp_rect':'struct stbrp_rect' lvalue
|   |     | |       |-ImplicitCastExpr 0x7fffd8429478 <col:20> 'stbrp_rect *' <LValueToRValue>
|   |     | |       | `-DeclRefExpr 0x7fffd8429428 <col:20> 'stbrp_rect *' lvalue ParmVar 0x7fffd84271e0 'rects' 'stbrp_rect *'
|   |     | |       `-ImplicitCastExpr 0x7fffd8429490 <col:26> 'int' <LValueToRValue>
|   |     | |         `-DeclRefExpr 0x7fffd8429450 <col:26> 'int' lvalue Var 0x7fffd8427460 'i' 'int'
|   |     | `-ImplicitCastExpr 0x7fffd84295d8 <col:33, col:38> 'int' <LValueToRValue>
|   |     |   `-MemberExpr 0x7fffd84295a0 <col:33, col:38> 'int' lvalue ->bottom_y 0x7fffd8426108
|   |     |     `-ImplicitCastExpr 0x7fffd8429588 <col:33> 'stbrp_context *' <LValueToRValue>
|   |     |       `-DeclRefExpr 0x7fffd8429560 <col:33> 'stbrp_context *' lvalue ParmVar 0x7fffd8427170 'con' 'stbrp_context *'
|   |     |-BinaryOperator 0x7fffd8429840 <line:3886:10, col:44> 'int' '='
|   |     | |-MemberExpr 0x7fffd8429658 <col:10, col:15> 'int' lvalue ->bottom_y 0x7fffd8426108
|   |     | | `-ImplicitCastExpr 0x7fffd8429640 <col:10> 'stbrp_context *' <LValueToRValue>
|   |     | |   `-DeclRefExpr 0x7fffd8429618 <col:10> 'stbrp_context *' lvalue ParmVar 0x7fffd8427170 'con' 'stbrp_context *'
|   |     | `-BinaryOperator 0x7fffd8429818 <col:26, col:44> 'int' '+'
|   |     |   |-ImplicitCastExpr 0x7fffd84297e8 <col:26, col:31> 'int' <LValueToRValue>
|   |     |   | `-MemberExpr 0x7fffd84296d0 <col:26, col:31> 'int' lvalue ->y 0x7fffd84260a8
|   |     |   |   `-ImplicitCastExpr 0x7fffd84296b8 <col:26> 'stbrp_context *' <LValueToRValue>
|   |     |   |     `-DeclRefExpr 0x7fffd8429690 <col:26> 'stbrp_context *' lvalue ParmVar 0x7fffd8427170 'con' 'stbrp_context *'
|   |     |   `-ImplicitCastExpr 0x7fffd8429800 <col:35, col:44> 'int' <LValueToRValue>
|   |     |     `-MemberExpr 0x7fffd84297b0 <col:35, col:44> 'int' lvalue .h 0x7fffd8426628
|   |     |       `-ArraySubscriptExpr 0x7fffd8429788 <col:35, col:42> 'stbrp_rect':'struct stbrp_rect' lvalue
|   |     |         |-ImplicitCastExpr 0x7fffd8429758 <col:35> 'stbrp_rect *' <LValueToRValue>
|   |     |         | `-DeclRefExpr 0x7fffd8429708 <col:35> 'stbrp_rect *' lvalue ParmVar 0x7fffd84271e0 'rects' 'stbrp_rect *'
|   |     |         `-ImplicitCastExpr 0x7fffd8429770 <col:41> 'int' <LValueToRValue>
|   |     |           `-DeclRefExpr 0x7fffd8429730 <col:41> 'int' lvalue Var 0x7fffd8427460 'i' 'int'
|   |     `-<<<NULL>>>
|   `-ForStmt 0x7fffd8429b38 <line:3888:4, line:3889:29>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fffd84299a0 <line:3888:14, col:18> 'int' '<'
|     | |-ImplicitCastExpr 0x7fffd8429970 <col:14> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fffd8429920 <col:14> 'int' lvalue Var 0x7fffd8427460 'i' 'int'
|     | `-ImplicitCastExpr 0x7fffd8429988 <col:18> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fffd8429948 <col:18> 'int' lvalue ParmVar 0x7fffd8427258 'num_rects' 'int'
|     |-UnaryOperator 0x7fffd84299f0 <col:29, col:31> 'int' prefix '++'
|     | `-DeclRefExpr 0x7fffd84299c8 <col:31> 'int' lvalue Var 0x7fffd8427460 'i' 'int'
|     `-BinaryOperator 0x7fffd8429b10 <line:3889:7, col:29> 'int' '='
|       |-MemberExpr 0x7fffd8429ab8 <col:7, col:16> 'int' lvalue .was_packed 0x7fffd8426688
|       | `-ArraySubscriptExpr 0x7fffd8429a90 <col:7, col:14> 'stbrp_rect':'struct stbrp_rect' lvalue
|       |   |-ImplicitCastExpr 0x7fffd8429a60 <col:7> 'stbrp_rect *' <LValueToRValue>
|       |   | `-DeclRefExpr 0x7fffd8429a10 <col:7> 'stbrp_rect *' lvalue ParmVar 0x7fffd84271e0 'rects' 'stbrp_rect *'
|       |   `-ImplicitCastExpr 0x7fffd8429a78 <col:13> 'int' <LValueToRValue>
|       |     `-DeclRefExpr 0x7fffd8429a38 <col:13> 'int' lvalue Var 0x7fffd8427460 'i' 'int'
|       `-IntegerLiteral 0x7fffd8429af0 <col:29> 'int' 0
|-FunctionDecl 0x7fffd8429f60 prev 0x7fffd8343a58 <line:501:19, line:3930:1> line:3900:15 stbtt_PackBegin 'int (stbtt_pack_context *, unsigned char *, int, int, int, int, void *)' extern
| |-ParmVarDecl 0x7fffd8429bd0 <col:31, col:51> col:51 used spc 'stbtt_pack_context *'
| |-ParmVarDecl 0x7fffd8429c48 <col:56, col:71> col:71 used pixels 'unsigned char *'
| |-ParmVarDecl 0x7fffd8429cc0 <col:79, col:83> col:83 used pw 'int'
| |-ParmVarDecl 0x7fffd8429d38 <col:87, col:91> col:91 used ph 'int'
| |-ParmVarDecl 0x7fffd8429db0 <col:95, col:99> col:99 used stride_in_bytes 'int'
| |-ParmVarDecl 0x7fffd8429e28 <col:116, col:120> col:120 used padding 'int'
| |-ParmVarDecl 0x7fffd8429ea0 <col:129, col:135> col:135 used alloc_context 'void *'
| |-CompoundStmt 0x7fffd842c548 <line:3901:1, line:3930:1>
| | |-DeclStmt 0x7fffd842a338 <line:3902:4, col:103>
| | | `-VarDecl 0x7fffd842a048 <col:4, line:467:51> line:3902:19 used context 'stbrp_context *' cinit
| | |   `-CStyleCastExpr 0x7fffd842a310 <col:29, line:467:51> 'stbrp_context *' <BitCast>
| | |     `-ParenExpr 0x7fffd842a2f0 <col:31, col:51> 'void *'
| | |       `-BinaryOperator 0x7fffd842a2c8 <col:32, col:50> 'void *' ','
| | |         |-CStyleCastExpr 0x7fffd842a148 <col:32, col:40> 'void' <ToVoid>
| | |         | `-ImplicitCastExpr 0x7fffd842a130 <col:38, col:40> 'void *' <LValueToRValue>
| | |         |   `-ParenExpr 0x7fffd842a110 <col:38, col:40> 'void *' lvalue
| | |         |     `-DeclRefExpr 0x7fffd842a0a8 <line:3902:89> 'void *' lvalue ParmVar 0x7fffd8429ea0 'alloc_context' 'void *'
| | |         `-CallExpr 0x7fffd842a250 <line:467:42, col:50> 'void *'
| | |           |-ImplicitCastExpr 0x7fffd842a238 <col:42> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
| | |           | `-DeclRefExpr 0x7fffd842a170 <col:42> 'void *(unsigned long)' Function 0x7fffd831b4b0 'malloc' 'void *(unsigned long)'
| | |           `-UnaryExprOrTypeTraitExpr 0x7fffd842a218 <line:3902:60, col:75> 'unsigned long' sizeof
| | |             `-ParenExpr 0x7fffd842a1f8 <col:66, col:75> 'stbrp_context':'stbrp_context' lvalue
| | |               `-UnaryOperator 0x7fffd842a1d8 <col:67, col:68> 'stbrp_context':'stbrp_context' lvalue prefix '*'
| | |                 `-ImplicitCastExpr 0x7fffd842a1c0 <col:68> 'stbrp_context *' <LValueToRValue>
| | |                   `-DeclRefExpr 0x7fffd842a198 <col:68> 'stbrp_context *' lvalue Var 0x7fffd842a048 'context' 'stbrp_context *'
| | |-DeclStmt 0x7fffd842a470 <line:3903:4, col:43>
| | | `-VarDecl 0x7fffd842a368 <col:4, col:36> col:19 used num_nodes 'int' cinit
| | |   `-BinaryOperator 0x7fffd842a448 <col:31, col:36> 'int' '-'
| | |     |-ImplicitCastExpr 0x7fffd842a418 <col:31> 'int' <LValueToRValue>
| | |     | `-DeclRefExpr 0x7fffd842a3c8 <col:31> 'int' lvalue ParmVar 0x7fffd8429cc0 'pw' 'int'
| | |     `-ImplicitCastExpr 0x7fffd842a430 <col:36> 'int' <LValueToRValue>
| | |       `-DeclRefExpr 0x7fffd842a3f0 <col:36> 'int' lvalue ParmVar 0x7fffd8429e28 'padding' 'int'
| | |-DeclStmt 0x7fffd842a808 <line:3904:4, col:103>
| | | `-VarDecl 0x7fffd842a498 <col:4, line:467:51> line:3904:19 used nodes 'stbrp_node *' cinit
| | |   `-CStyleCastExpr 0x7fffd842a7e0 <col:29, line:467:51> 'stbrp_node *' <BitCast>
| | |     `-ParenExpr 0x7fffd842a7c0 <col:31, col:51> 'void *'
| | |       `-BinaryOperator 0x7fffd842a798 <col:32, col:50> 'void *' ','
| | |         |-CStyleCastExpr 0x7fffd842a598 <col:32, col:40> 'void' <ToVoid>
| | |         | `-ImplicitCastExpr 0x7fffd842a580 <col:38, col:40> 'void *' <LValueToRValue>
| | |         |   `-ParenExpr 0x7fffd842a560 <col:38, col:40> 'void *' lvalue
| | |         |     `-DeclRefExpr 0x7fffd842a4f8 <line:3904:89> 'void *' lvalue ParmVar 0x7fffd8429ea0 'alloc_context' 'void *'
| | |         `-CallExpr 0x7fffd842a720 <line:467:42, col:50> 'void *'
| | |           |-ImplicitCastExpr 0x7fffd842a708 <col:42> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
| | |           | `-DeclRefExpr 0x7fffd842a5c0 <col:42> 'void *(unsigned long)' Function 0x7fffd831b4b0 'malloc' 'void *(unsigned long)'
| | |           `-BinaryOperator 0x7fffd842a6e0 <line:3904:60, col:79> 'unsigned long' '*'
| | |             |-UnaryExprOrTypeTraitExpr 0x7fffd842a668 <col:60, col:75> 'unsigned long' sizeof
| | |             | `-ParenExpr 0x7fffd842a648 <col:66, col:75> 'stbrp_node':'stbrp_node' lvalue
| | |             |   `-UnaryOperator 0x7fffd842a628 <col:67, col:68> 'stbrp_node':'stbrp_node' lvalue prefix '*'
| | |             |     `-ImplicitCastExpr 0x7fffd842a610 <col:68> 'stbrp_node *' <LValueToRValue>
| | |             |       `-DeclRefExpr 0x7fffd842a5e8 <col:68> 'stbrp_node *' lvalue Var 0x7fffd842a498 'nodes' 'stbrp_node *'
| | |             `-ImplicitCastExpr 0x7fffd842a6c8 <col:79> 'unsigned long' <IntegralCast>
| | |               `-ImplicitCastExpr 0x7fffd842a6b0 <col:79> 'int' <LValueToRValue>
| | |                 `-DeclRefExpr 0x7fffd842a688 <col:79> 'int' lvalue Var 0x7fffd842a368 'num_nodes' 'int'
| | |-IfStmt 0x7fffd842b0c8 <line:3906:4, line:3910:4>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-BinaryOperator 0x7fffd842aa20 <line:3906:8, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25> 'int' '||'
| | | | |-BinaryOperator 0x7fffd842a8f8 <././stb/stb_truetype.h:3906:8, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25> 'int' '=='
| | | | | |-ImplicitCastExpr 0x7fffd842a8c8 <././stb/stb_truetype.h:3906:8> 'stbrp_context *' <LValueToRValue>
| | | | | | `-DeclRefExpr 0x7fffd842a820 <col:8> 'stbrp_context *' lvalue Var 0x7fffd842a048 'context' 'stbrp_context *'
| | | | | `-ImplicitCastExpr 0x7fffd842a8e0 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'stbrp_context *' <BitCast>
| | | | |   `-ParenExpr 0x7fffd842a8a8 <col:16, col:25> 'void *'
| | | | |     `-CStyleCastExpr 0x7fffd842a880 <col:17, col:24> 'void *' <NullToPointer>
| | | | |       `-IntegerLiteral 0x7fffd842a848 <col:24> 'int' 0
| | | | `-BinaryOperator 0x7fffd842a9f8 <././stb/stb_truetype.h:3906:27, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25> 'int' '=='
| | | |   |-ImplicitCastExpr 0x7fffd842a9c8 <././stb/stb_truetype.h:3906:27> 'stbrp_node *' <LValueToRValue>
| | | |   | `-DeclRefExpr 0x7fffd842a920 <col:27> 'stbrp_node *' lvalue Var 0x7fffd842a498 'nodes' 'stbrp_node *'
| | | |   `-ImplicitCastExpr 0x7fffd842a9e0 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'stbrp_node *' <BitCast>
| | | |     `-ParenExpr 0x7fffd842a9a8 <col:16, col:25> 'void *'
| | | |       `-CStyleCastExpr 0x7fffd842a980 <col:17, col:24> 'void *' <NullToPointer>
| | | |         `-IntegerLiteral 0x7fffd842a948 <col:24> 'int' 0
| | | |-CompoundStmt 0x7fffd842b0a0 <././stb/stb_truetype.h:3906:42, line:3910:4>
| | | | |-IfStmt 0x7fffd842ad20 <line:3907:7, line:468:49>
| | | | | |-<<<NULL>>>
| | | | | |-<<<NULL>>>
| | | | | |-BinaryOperator 0x7fffd842ab20 <line:3907:11, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25> 'int' '!='
| | | | | | |-ImplicitCastExpr 0x7fffd842aaf0 <././stb/stb_truetype.h:3907:11> 'stbrp_context *' <LValueToRValue>
| | | | | | | `-DeclRefExpr 0x7fffd842aa48 <col:11> 'stbrp_context *' lvalue Var 0x7fffd842a048 'context' 'stbrp_context *'
| | | | | | `-ImplicitCastExpr 0x7fffd842ab08 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'stbrp_context *' <BitCast>
| | | | | |   `-ParenExpr 0x7fffd842aad0 <col:16, col:25> 'void *'
| | | | | |     `-CStyleCastExpr 0x7fffd842aaa8 <col:17, col:24> 'void *' <NullToPointer>
| | | | | |       `-IntegerLiteral 0x7fffd842aa70 <col:24> 'int' 0
| | | | | |-ParenExpr 0x7fffd842ad00 <././stb/stb_truetype.h:468:31, col:49> 'void'
| | | | | | `-BinaryOperator 0x7fffd842acd8 <col:32, col:48> 'void' ','
| | | | | |   |-CStyleCastExpr 0x7fffd842abe8 <col:32, col:40> 'void' <ToVoid>
| | | | | |   | `-ImplicitCastExpr 0x7fffd842abd0 <col:38, col:40> 'void *' <LValueToRValue>
| | | | | |   |   `-ParenExpr 0x7fffd842abb0 <col:38, col:40> 'void *' lvalue
| | | | | |   |     `-DeclRefExpr 0x7fffd842ab48 <line:3907:48> 'void *' lvalue ParmVar 0x7fffd8429ea0 'alloc_context' 'void *'
| | | | | |   `-CallExpr 0x7fffd842ac78 <line:468:42, col:48> 'void'
| | | | | |     |-ImplicitCastExpr 0x7fffd842ac60 <col:42> 'void (*)(void *)' <FunctionToPointerDecay>
| | | | | |     | `-DeclRefExpr 0x7fffd842ac10 <col:42> 'void (void *)' Function 0x7fffd831bec0 'free' 'void (void *)'
| | | | | |     `-ImplicitCastExpr 0x7fffd842acc0 <line:3907:39> 'void *' <BitCast>
| | | | | |       `-ImplicitCastExpr 0x7fffd842aca8 <col:39> 'stbrp_context *' <LValueToRValue>
| | | | | |         `-DeclRefExpr 0x7fffd842ac38 <col:39> 'stbrp_context *' lvalue Var 0x7fffd842a048 'context' 'stbrp_context *'
| | | | | `-<<<NULL>>>
| | | | |-IfStmt 0x7fffd842b030 <line:3908:7, line:468:49>
| | | | | |-<<<NULL>>>
| | | | | |-<<<NULL>>>
| | | | | |-BinaryOperator 0x7fffd842ae30 <line:3908:11, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25> 'int' '!='
| | | | | | |-ImplicitCastExpr 0x7fffd842ae00 <././stb/stb_truetype.h:3908:11> 'stbrp_node *' <LValueToRValue>
| | | | | | | `-DeclRefExpr 0x7fffd842ad58 <col:11> 'stbrp_node *' lvalue Var 0x7fffd842a498 'nodes' 'stbrp_node *'
| | | | | | `-ImplicitCastExpr 0x7fffd842ae18 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'stbrp_node *' <BitCast>
| | | | | |   `-ParenExpr 0x7fffd842ade0 <col:16, col:25> 'void *'
| | | | | |     `-CStyleCastExpr 0x7fffd842adb8 <col:17, col:24> 'void *' <NullToPointer>
| | | | | |       `-IntegerLiteral 0x7fffd842ad80 <col:24> 'int' 0
| | | | | |-ParenExpr 0x7fffd842b010 <././stb/stb_truetype.h:468:31, col:49> 'void'
| | | | | | `-BinaryOperator 0x7fffd842afe8 <col:32, col:48> 'void' ','
| | | | | |   |-CStyleCastExpr 0x7fffd842aef8 <col:32, col:40> 'void' <ToVoid>
| | | | | |   | `-ImplicitCastExpr 0x7fffd842aee0 <col:38, col:40> 'void *' <LValueToRValue>
| | | | | |   |   `-ParenExpr 0x7fffd842aec0 <col:38, col:40> 'void *' lvalue
| | | | | |   |     `-DeclRefExpr 0x7fffd842ae58 <line:3908:48> 'void *' lvalue ParmVar 0x7fffd8429ea0 'alloc_context' 'void *'
| | | | | |   `-CallExpr 0x7fffd842af88 <line:468:42, col:48> 'void'
| | | | | |     |-ImplicitCastExpr 0x7fffd842af70 <col:42> 'void (*)(void *)' <FunctionToPointerDecay>
| | | | | |     | `-DeclRefExpr 0x7fffd842af20 <col:42> 'void (void *)' Function 0x7fffd831bec0 'free' 'void (void *)'
| | | | | |     `-ImplicitCastExpr 0x7fffd842afd0 <line:3908:39> 'void *' <BitCast>
| | | | | |       `-ImplicitCastExpr 0x7fffd842afb8 <col:39> 'stbrp_node *' <LValueToRValue>
| | | | | |         `-DeclRefExpr 0x7fffd842af48 <col:39> 'stbrp_node *' lvalue Var 0x7fffd842a498 'nodes' 'stbrp_node *'
| | | | | `-<<<NULL>>>
| | | | `-ReturnStmt 0x7fffd842b088 <line:3909:7, col:14>
| | | |   `-IntegerLiteral 0x7fffd842b068 <col:14> 'int' 0
| | | `-<<<NULL>>>
| | |-BinaryOperator 0x7fffd842b1b8 <line:3912:4, col:34> 'void *' '='
| | | |-MemberExpr 0x7fffd842b140 <col:4, col:9> 'void *' lvalue ->user_allocator_context 0x7fffd834c308
| | | | `-ImplicitCastExpr 0x7fffd842b128 <col:4> 'stbtt_pack_context *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x7fffd842b100 <col:4> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8429bd0 'spc' 'stbtt_pack_context *'
| | | `-ImplicitCastExpr 0x7fffd842b1a0 <col:34> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x7fffd842b178 <col:34> 'void *' lvalue ParmVar 0x7fffd8429ea0 'alloc_context' 'void *'
| | |-BinaryOperator 0x7fffd842b6c8 <line:3913:4, col:17> 'int' '='
| | | |-MemberExpr 0x7fffd842b650 <col:4, col:9> 'int' lvalue ->width 0x7fffd834c3c8
| | | | `-ImplicitCastExpr 0x7fffd842b208 <col:4> 'stbtt_pack_context *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x7fffd842b1e0 <col:4> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8429bd0 'spc' 'stbtt_pack_context *'
| | | `-ImplicitCastExpr 0x7fffd842b6b0 <col:17> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x7fffd842b688 <col:17> 'int' lvalue ParmVar 0x7fffd8429cc0 'pw' 'int'
| | |-BinaryOperator 0x7fffd842b7a8 <line:3914:4, col:18> 'int' '='
| | | |-MemberExpr 0x7fffd842b730 <col:4, col:9> 'int' lvalue ->height 0x7fffd834c428
| | | | `-ImplicitCastExpr 0x7fffd842b718 <col:4> 'stbtt_pack_context *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x7fffd842b6f0 <col:4> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8429bd0 'spc' 'stbtt_pack_context *'
| | | `-ImplicitCastExpr 0x7fffd842b790 <col:18> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x7fffd842b768 <col:18> 'int' lvalue ParmVar 0x7fffd8429d38 'ph' 'int'
| | |-BinaryOperator 0x7fffd842b888 <line:3915:4, col:18> 'unsigned char *' '='
| | | |-MemberExpr 0x7fffd842b810 <col:4, col:9> 'unsigned char *' lvalue ->pixels 0x7fffd834c668
| | | | `-ImplicitCastExpr 0x7fffd842b7f8 <col:4> 'stbtt_pack_context *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x7fffd842b7d0 <col:4> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8429bd0 'spc' 'stbtt_pack_context *'
| | | `-ImplicitCastExpr 0x7fffd842b870 <col:18> 'unsigned char *' <LValueToRValue>
| | |   `-DeclRefExpr 0x7fffd842b848 <col:18> 'unsigned char *' lvalue ParmVar 0x7fffd8429c48 'pixels' 'unsigned char *'
| | |-BinaryOperator 0x7fffd842b980 <line:3916:4, col:21> 'void *' '='
| | | |-MemberExpr 0x7fffd842b8f0 <col:4, col:9> 'void *' lvalue ->pack_info 0x7fffd834c368
| | | | `-ImplicitCastExpr 0x7fffd842b8d8 <col:4> 'stbtt_pack_context *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x7fffd842b8b0 <col:4> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8429bd0 'spc' 'stbtt_pack_context *'
| | | `-ImplicitCastExpr 0x7fffd842b968 <col:21> 'void *' <BitCast>
| | |   `-ImplicitCastExpr 0x7fffd842b950 <col:21> 'stbrp_context *' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fffd842b928 <col:21> 'stbrp_context *' lvalue Var 0x7fffd842a048 'context' 'stbrp_context *'
| | |-BinaryOperator 0x7fffd842ba78 <line:3917:4, col:17> 'void *' '='
| | | |-MemberExpr 0x7fffd842b9e8 <col:4, col:9> 'void *' lvalue ->nodes 0x7fffd834c6c8
| | | | `-ImplicitCastExpr 0x7fffd842b9d0 <col:4> 'stbtt_pack_context *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x7fffd842b9a8 <col:4> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8429bd0 'spc' 'stbtt_pack_context *'
| | | `-ImplicitCastExpr 0x7fffd842ba60 <col:17> 'void *' <BitCast>
| | |   `-ImplicitCastExpr 0x7fffd842ba48 <col:17> 'stbrp_node *' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fffd842ba20 <col:17> 'stbrp_node *' lvalue Var 0x7fffd842a498 'nodes' 'stbrp_node *'
| | |-BinaryOperator 0x7fffd842bb58 <line:3918:4, col:19> 'int' '='
| | | |-MemberExpr 0x7fffd842bae0 <col:4, col:9> 'int' lvalue ->padding 0x7fffd834c4e8
| | | | `-ImplicitCastExpr 0x7fffd842bac8 <col:4> 'stbtt_pack_context *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x7fffd842baa0 <col:4> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8429bd0 'spc' 'stbtt_pack_context *'
| | | `-ImplicitCastExpr 0x7fffd842bb40 <col:19> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x7fffd842bb18 <col:19> 'int' lvalue ParmVar 0x7fffd8429e28 'padding' 'int'
| | |-BinaryOperator 0x7fffd842bd30 <line:3919:4, col:68> 'int' '='
| | | |-MemberExpr 0x7fffd842bbc0 <col:4, col:9> 'int' lvalue ->stride_in_bytes 0x7fffd834c488
| | | | `-ImplicitCastExpr 0x7fffd842bba8 <col:4> 'stbtt_pack_context *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x7fffd842bb80 <col:4> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8429bd0 'spc' 'stbtt_pack_context *'
| | | `-ConditionalOperator 0x7fffd842bd00 <col:27, col:68> 'int'
| | |   |-BinaryOperator 0x7fffd842bc58 <col:27, col:46> 'int' '!='
| | |   | |-ImplicitCastExpr 0x7fffd842bc40 <col:27> 'int' <LValueToRValue>
| | |   | | `-DeclRefExpr 0x7fffd842bbf8 <col:27> 'int' lvalue ParmVar 0x7fffd8429db0 'stride_in_bytes' 'int'
| | |   | `-IntegerLiteral 0x7fffd842bc20 <col:46> 'int' 0
| | |   |-ImplicitCastExpr 0x7fffd842bcd0 <col:50> 'int' <LValueToRValue>
| | |   | `-DeclRefExpr 0x7fffd842bc80 <col:50> 'int' lvalue ParmVar 0x7fffd8429db0 'stride_in_bytes' 'int'
| | |   `-ImplicitCastExpr 0x7fffd842bce8 <col:68> 'int' <LValueToRValue>
| | |     `-DeclRefExpr 0x7fffd842bca8 <col:68> 'int' lvalue ParmVar 0x7fffd8429cc0 'pw' 'int'
| | |-BinaryOperator 0x7fffd842be08 <line:3920:4, col:24> 'unsigned int' '='
| | | |-MemberExpr 0x7fffd842bd98 <col:4, col:9> 'unsigned int' lvalue ->h_oversample 0x7fffd834c5a8
| | | | `-ImplicitCastExpr 0x7fffd842bd80 <col:4> 'stbtt_pack_context *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x7fffd842bd58 <col:4> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8429bd0 'spc' 'stbtt_pack_context *'
| | | `-ImplicitCastExpr 0x7fffd842bdf0 <col:24> 'unsigned int' <IntegralCast>
| | |   `-IntegerLiteral 0x7fffd842bdd0 <col:24> 'int' 1
| | |-BinaryOperator 0x7fffd842bee0 <line:3921:4, col:24> 'unsigned int' '='
| | | |-MemberExpr 0x7fffd842be70 <col:4, col:9> 'unsigned int' lvalue ->v_oversample 0x7fffd834c608
| | | | `-ImplicitCastExpr 0x7fffd842be58 <col:4> 'stbtt_pack_context *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x7fffd842be30 <col:4> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8429bd0 'spc' 'stbtt_pack_context *'
| | | `-ImplicitCastExpr 0x7fffd842bec8 <col:24> 'unsigned int' <IntegralCast>
| | |   `-IntegerLiteral 0x7fffd842bea8 <col:24> 'int' 1
| | |-BinaryOperator 0x7fffd842bfa0 <line:3922:4, col:24> 'int' '='
| | | |-MemberExpr 0x7fffd842bf48 <col:4, col:9> 'int' lvalue ->skip_missing 0x7fffd834c548
| | | | `-ImplicitCastExpr 0x7fffd842bf30 <col:4> 'stbtt_pack_context *' <LValueToRValue>
| | | |   `-DeclRefExpr 0x7fffd842bf08 <col:4> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8429bd0 'spc' 'stbtt_pack_context *'
| | | `-IntegerLiteral 0x7fffd842bf80 <col:24> 'int' 0
| | |-CallExpr 0x7fffd842c230 <line:3924:4, col:71> 'void'
| | | |-ImplicitCastExpr 0x7fffd842c218 <col:4> 'void (*)(stbrp_context *, int, int, stbrp_node *, int)' <FunctionToPointerDecay>
| | | | `-DeclRefExpr 0x7fffd842bfc8 <col:4> 'void (stbrp_context *, int, int, stbrp_node *, int)' Function 0x7fffd8426b10 'stbrp_init_target' 'void (stbrp_context *, int, int, stbrp_node *, int)'
| | | |-ImplicitCastExpr 0x7fffd842c280 <col:22> 'stbrp_context *' <LValueToRValue>
| | | | `-DeclRefExpr 0x7fffd842bff0 <col:22> 'stbrp_context *' lvalue Var 0x7fffd842a048 'context' 'stbrp_context *'
| | | |-BinaryOperator 0x7fffd842c098 <col:31, col:34> 'int' '-'
| | | | |-ImplicitCastExpr 0x7fffd842c068 <col:31> 'int' <LValueToRValue>
| | | | | `-DeclRefExpr 0x7fffd842c018 <col:31> 'int' lvalue ParmVar 0x7fffd8429cc0 'pw' 'int'
| | | | `-ImplicitCastExpr 0x7fffd842c080 <col:34> 'int' <LValueToRValue>
| | | |   `-DeclRefExpr 0x7fffd842c040 <col:34> 'int' lvalue ParmVar 0x7fffd8429e28 'padding' 'int'
| | | |-BinaryOperator 0x7fffd842c140 <col:43, col:46> 'int' '-'
| | | | |-ImplicitCastExpr 0x7fffd842c110 <col:43> 'int' <LValueToRValue>
| | | | | `-DeclRefExpr 0x7fffd842c0c0 <col:43> 'int' lvalue ParmVar 0x7fffd8429d38 'ph' 'int'
| | | | `-ImplicitCastExpr 0x7fffd842c128 <col:46> 'int' <LValueToRValue>
| | | |   `-DeclRefExpr 0x7fffd842c0e8 <col:46> 'int' lvalue ParmVar 0x7fffd8429e28 'padding' 'int'
| | | |-ImplicitCastExpr 0x7fffd842c298 <col:55> 'stbrp_node *' <LValueToRValue>
| | | | `-DeclRefExpr 0x7fffd842c168 <col:55> 'stbrp_node *' lvalue Var 0x7fffd842a498 'nodes' 'stbrp_node *'
| | | `-ImplicitCastExpr 0x7fffd842c2b0 <col:62> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x7fffd842c190 <col:62> 'int' lvalue Var 0x7fffd842a368 'num_nodes' 'int'
| | |-IfStmt 0x7fffd842c4d8 <line:3926:4, line:3927:36>
| | | |-<<<NULL>>>
| | | |-<<<NULL>>>
| | | |-ImplicitCastExpr 0x7fffd842c2f0 <line:3926:8> 'unsigned char *' <LValueToRValue>
| | | | `-DeclRefExpr 0x7fffd842c2c8 <col:8> 'unsigned char *' lvalue ParmVar 0x7fffd8429c48 'pixels' 'unsigned char *'
| | | |-CallExpr 0x7fffd842c450 <line:484:31, line:3927:36> 'void *'
| | | | |-ImplicitCastExpr 0x7fffd842c438 <line:484:31> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
| | | | | `-DeclRefExpr 0x7fffd842c308 <col:31> 'void *(void *, int, unsigned long)' Function 0x7fffd832d138 'memset' 'void *(void *, int, unsigned long)'
| | | | |-ImplicitCastExpr 0x7fffd842c4a8 <line:3927:20> 'void *' <BitCast>
| | | | | `-ImplicitCastExpr 0x7fffd842c490 <col:20> 'unsigned char *' <LValueToRValue>
| | | | |   `-DeclRefExpr 0x7fffd842c330 <col:20> 'unsigned char *' lvalue ParmVar 0x7fffd8429c48 'pixels' 'unsigned char *'
| | | | |-IntegerLiteral 0x7fffd842c358 <col:28> 'int' 0
| | | | `-ImplicitCastExpr 0x7fffd842c4c0 <col:31, col:34> 'unsigned long' <IntegralCast>
| | | |   `-BinaryOperator 0x7fffd842c3f8 <col:31, col:34> 'int' '*'
| | | |     |-ImplicitCastExpr 0x7fffd842c3c8 <col:31> 'int' <LValueToRValue>
| | | |     | `-DeclRefExpr 0x7fffd842c378 <col:31> 'int' lvalue ParmVar 0x7fffd8429cc0 'pw' 'int'
| | | |     `-ImplicitCastExpr 0x7fffd842c3e0 <col:34> 'int' <LValueToRValue>
| | | |       `-DeclRefExpr 0x7fffd842c3a0 <col:34> 'int' lvalue ParmVar 0x7fffd8429d38 'ph' 'int'
| | | `-<<<NULL>>>
| | `-ReturnStmt 0x7fffd842c530 <line:3929:4, col:11>
| |   `-IntegerLiteral 0x7fffd842c510 <col:11> 'int' 1
| `-FullComment 0x7fffd8483860 <line:3893:4, col:78>
|   `-ParagraphComment 0x7fffd8483830 <col:4, col:78>
|     `-TextComment 0x7fffd8483800 <col:4, col:78> Text="///////////////////////////////////////////////////////////////////////////"
|-FunctionDecl 0x7fffd842c680 prev 0x7fffd8343c40 <line:501:19, line:3936:1> line:3932:16 stbtt_PackEnd 'void (stbtt_pack_context *)' extern
| |-ParmVarDecl 0x7fffd842c5f8 <col:32, col:52> col:52 used spc 'stbtt_pack_context *'
| `-CompoundStmt 0x7fffd842cbe8 <line:3933:1, line:3936:1>
|   |-ParenExpr 0x7fffd842c968 <line:468:31, col:49> 'void'
|   | `-BinaryOperator 0x7fffd842c940 <col:32, col:48> 'void' ','
|   |   |-CStyleCastExpr 0x7fffd842c818 <col:32, col:40> 'void' <ToVoid>
|   |   | `-ImplicitCastExpr 0x7fffd842c800 <col:38, col:40> 'void *' <LValueToRValue>
|   |   |   `-ParenExpr 0x7fffd842c7e0 <col:38, col:40> 'void *' lvalue
|   |   |     `-MemberExpr 0x7fffd842c768 <line:3934:31, col:36> 'void *' lvalue ->user_allocator_context 0x7fffd834c308
|   |   |       `-ImplicitCastExpr 0x7fffd842c750 <col:31> 'stbtt_pack_context *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x7fffd842c728 <col:31> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd842c5f8 'spc' 'stbtt_pack_context *'
|   |   `-CallExpr 0x7fffd842c8f8 <line:468:42, col:48> 'void'
|   |     |-ImplicitCastExpr 0x7fffd842c8e0 <col:42> 'void (*)(void *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd842c840 <col:42> 'void (void *)' Function 0x7fffd831bec0 'free' 'void (void *)'
|   |     `-ImplicitCastExpr 0x7fffd842c928 <line:3934:15, col:20> 'void *' <LValueToRValue>
|   |       `-MemberExpr 0x7fffd842c8a8 <col:15, col:20> 'void *' lvalue ->nodes 0x7fffd834c6c8
|   |         `-ImplicitCastExpr 0x7fffd842c890 <col:15> 'stbtt_pack_context *' <LValueToRValue>
|   |           `-DeclRefExpr 0x7fffd842c868 <col:15> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd842c5f8 'spc' 'stbtt_pack_context *'
|   `-ParenExpr 0x7fffd842cbc8 <line:468:31, col:49> 'void'
|     `-BinaryOperator 0x7fffd842cba0 <col:32, col:48> 'void' ','
|       |-CStyleCastExpr 0x7fffd842ca78 <col:32, col:40> 'void' <ToVoid>
|       | `-ImplicitCastExpr 0x7fffd842ca60 <col:38, col:40> 'void *' <LValueToRValue>
|       |   `-ParenExpr 0x7fffd842ca40 <col:38, col:40> 'void *' lvalue
|       |     `-MemberExpr 0x7fffd842c9c8 <line:3935:31, col:36> 'void *' lvalue ->user_allocator_context 0x7fffd834c308
|       |       `-ImplicitCastExpr 0x7fffd842c9b0 <col:31> 'stbtt_pack_context *' <LValueToRValue>
|       |         `-DeclRefExpr 0x7fffd842c988 <col:31> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd842c5f8 'spc' 'stbtt_pack_context *'
|       `-CallExpr 0x7fffd842cb58 <line:468:42, col:48> 'void'
|         |-ImplicitCastExpr 0x7fffd842cb40 <col:42> 'void (*)(void *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x7fffd842caa0 <col:42> 'void (void *)' Function 0x7fffd831bec0 'free' 'void (void *)'
|         `-ImplicitCastExpr 0x7fffd842cb88 <line:3935:15, col:20> 'void *' <LValueToRValue>
|           `-MemberExpr 0x7fffd842cb08 <col:15, col:20> 'void *' lvalue ->pack_info 0x7fffd834c368
|             `-ImplicitCastExpr 0x7fffd842caf0 <col:15> 'stbtt_pack_context *' <LValueToRValue>
|               `-DeclRefExpr 0x7fffd842cac8 <col:15> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd842c5f8 'spc' 'stbtt_pack_context *'
|-FunctionDecl 0x7fffd842cda0 prev 0x7fffd8348da0 <line:501:19, line:3946:1> line:3938:16 stbtt_PackSetOversampling 'void (stbtt_pack_context *, unsigned int, unsigned int)' extern
| |-ParmVarDecl 0x7fffd842cc18 <col:42, col:62> col:62 used spc 'stbtt_pack_context *'
| |-ParmVarDecl 0x7fffd842cc90 <col:67, col:80> col:80 used h_oversample 'unsigned int'
| |-ParmVarDecl 0x7fffd842cd08 <col:94, col:107> col:107 used v_oversample 'unsigned int'
| `-CompoundStmt 0x7fffd842dda0 <line:3939:1, line:3946:1>
|   |-ParenExpr 0x7fffd842d458 </usr/include/assert.h:108:3, line:113:7> 'void'
|   | `-BinaryOperator 0x7fffd842d430 <line:108:4, line:113:6> 'void' ','
|   |   |-CStyleCastExpr 0x7fffd842cfd8 <line:108:4, col:33> 'void' <ToVoid>
|   |   | `-UnaryExprOrTypeTraitExpr 0x7fffd842cfa8 <col:11, col:33> 'unsigned long' sizeof
|   |   |   `-ParenExpr 0x7fffd842cf88 <col:18, col:33> 'int'
|   |   |     `-ConditionalOperator 0x7fffd842cf58 <col:19, col:32> 'int'
|   |   |       |-ParenExpr 0x7fffd842cef8 <col:19, col:24> 'int'
|   |   |       | `-BinaryOperator 0x7fffd842ced0 <././stb/stb_truetype.h:3940:17, line:1104:32> 'int' '<='
|   |   |       |   |-ImplicitCastExpr 0x7fffd842cea0 <line:3940:17> 'unsigned int' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x7fffd842ce58 <col:17> 'unsigned int' lvalue ParmVar 0x7fffd842cc90 'h_oversample' 'unsigned int'
|   |   |       |   `-ImplicitCastExpr 0x7fffd842ceb8 <line:1104:32> 'unsigned int' <IntegralCast>
|   |   |       |     `-IntegerLiteral 0x7fffd842ce80 <col:32> 'int' 8
|   |   |       |-IntegerLiteral 0x7fffd842cf18 </usr/include/assert.h:108:28> 'int' 1
|   |   |       `-IntegerLiteral 0x7fffd842cf38 <col:32> 'int' 0
|   |   `-UnaryOperator 0x7fffd842d410 <col:36, line:113:6> 'void' prefix '__extension__'
|   |     `-StmtExpr 0x7fffd842d3f0 <line:108:50, line:113:6> 'void'
|   |       `-CompoundStmt 0x7fffd842d3d8 <line:108:51, line:113:5>
|   |         `-IfStmt 0x7fffd842d3a0 <line:109:7, line:112:68>
|   |           |-<<<NULL>>>
|   |           |-<<<NULL>>>
|   |           |-BinaryOperator 0x7fffd842d078 <././stb/stb_truetype.h:3940:17, line:1104:32> 'int' '<='
|   |           | |-ImplicitCastExpr 0x7fffd842d048 <line:3940:17> 'unsigned int' <LValueToRValue>
|   |           | | `-DeclRefExpr 0x7fffd842d000 <col:17> 'unsigned int' lvalue ParmVar 0x7fffd842cc90 'h_oversample' 'unsigned int'
|   |           | `-ImplicitCastExpr 0x7fffd842d060 <line:1104:32> 'unsigned int' <IntegralCast>
|   |           |   `-IntegerLiteral 0x7fffd842d028 <col:32> 'int' 8
|   |           |-NullStmt 0x7fffd842d0a0 </usr/include/assert.h:110:9>
|   |           `-CallExpr 0x7fffd842d2c8 <line:112:9, col:68> 'void'
|   |             |-ImplicitCastExpr 0x7fffd842d2b0 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |             | `-DeclRefExpr 0x7fffd842d0b0 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |             |-ImplicitCastExpr 0x7fffd842d328 <<scratch space>:28:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd842d310 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd842d0d8 <col:1> 'char [18]' lvalue "h_oversample <= 8"
|   |             |-ImplicitCastExpr 0x7fffd842d358 <line:29:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd842d340 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd842d118 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |             |-ImplicitCastExpr 0x7fffd842d370 <line:30:1> 'unsigned int' <IntegralCast>
|   |             | `-IntegerLiteral 0x7fffd842d158 <col:1> 'int' 3940
|   |             `-ImplicitCastExpr 0x7fffd842d388 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |               `-UnaryOperator 0x7fffd842d290 <col:30, col:44> 'const char [81]' lvalue prefix '__extension__'
|   |                 `-PredefinedExpr 0x7fffd842d270 <col:44> 'const char [81]' lvalue __PRETTY_FUNCTION__
|   |                   `-StringLiteral 0x7fffd842d1f8 <col:44> 'const char [81]' lvalue "void stbtt_PackSetOversampling(stbtt_pack_context *, unsigned int, unsigned int)"
|   |-ParenExpr 0x7fffd842da10 <line:108:3, line:113:7> 'void'
|   | `-BinaryOperator 0x7fffd842d9e8 <line:108:4, line:113:6> 'void' ','
|   |   |-CStyleCastExpr 0x7fffd842d5f8 <line:108:4, col:33> 'void' <ToVoid>
|   |   | `-UnaryExprOrTypeTraitExpr 0x7fffd842d5c8 <col:11, col:33> 'unsigned long' sizeof
|   |   |   `-ParenExpr 0x7fffd842d5a8 <col:18, col:33> 'int'
|   |   |     `-ConditionalOperator 0x7fffd842d578 <col:19, col:32> 'int'
|   |   |       |-ParenExpr 0x7fffd842d518 <col:19, col:24> 'int'
|   |   |       | `-BinaryOperator 0x7fffd842d4f0 <././stb/stb_truetype.h:3941:17, line:1104:32> 'int' '<='
|   |   |       |   |-ImplicitCastExpr 0x7fffd842d4c0 <line:3941:17> 'unsigned int' <LValueToRValue>
|   |   |       |   | `-DeclRefExpr 0x7fffd842d478 <col:17> 'unsigned int' lvalue ParmVar 0x7fffd842cd08 'v_oversample' 'unsigned int'
|   |   |       |   `-ImplicitCastExpr 0x7fffd842d4d8 <line:1104:32> 'unsigned int' <IntegralCast>
|   |   |       |     `-IntegerLiteral 0x7fffd842d4a0 <col:32> 'int' 8
|   |   |       |-IntegerLiteral 0x7fffd842d538 </usr/include/assert.h:108:28> 'int' 1
|   |   |       `-IntegerLiteral 0x7fffd842d558 <col:32> 'int' 0
|   |   `-UnaryOperator 0x7fffd842d9c8 <col:36, line:113:6> 'void' prefix '__extension__'
|   |     `-StmtExpr 0x7fffd842d9a8 <line:108:50, line:113:6> 'void'
|   |       `-CompoundStmt 0x7fffd842d990 <line:108:51, line:113:5>
|   |         `-IfStmt 0x7fffd842d958 <line:109:7, line:112:68>
|   |           |-<<<NULL>>>
|   |           |-<<<NULL>>>
|   |           |-BinaryOperator 0x7fffd842d6b0 <././stb/stb_truetype.h:3941:17, line:1104:32> 'int' '<='
|   |           | |-ImplicitCastExpr 0x7fffd842d680 <line:3941:17> 'unsigned int' <LValueToRValue>
|   |           | | `-DeclRefExpr 0x7fffd842d620 <col:17> 'unsigned int' lvalue ParmVar 0x7fffd842cd08 'v_oversample' 'unsigned int'
|   |           | `-ImplicitCastExpr 0x7fffd842d698 <line:1104:32> 'unsigned int' <IntegralCast>
|   |           |   `-IntegerLiteral 0x7fffd842d660 <col:32> 'int' 8
|   |           |-NullStmt 0x7fffd842d6d8 </usr/include/assert.h:110:9>
|   |           `-CallExpr 0x7fffd842d880 <line:112:9, col:68> 'void'
|   |             |-ImplicitCastExpr 0x7fffd842d868 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   |             | `-DeclRefExpr 0x7fffd842d6e8 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   |             |-ImplicitCastExpr 0x7fffd842d8e0 <<scratch space>:31:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd842d8c8 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd842d710 <col:1> 'char [18]' lvalue "v_oversample <= 8"
|   |             |-ImplicitCastExpr 0x7fffd842d910 <line:32:1> 'const char *' <BitCast>
|   |             | `-ImplicitCastExpr 0x7fffd842d8f8 <col:1> 'char *' <ArrayToPointerDecay>
|   |             |   `-StringLiteral 0x7fffd842d750 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   |             |-ImplicitCastExpr 0x7fffd842d928 <line:33:1> 'unsigned int' <IntegralCast>
|   |             | `-IntegerLiteral 0x7fffd842d790 <col:1> 'int' 3941
|   |             `-ImplicitCastExpr 0x7fffd842d940 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   |               `-UnaryOperator 0x7fffd842d848 <col:30, col:44> 'const char [81]' lvalue prefix '__extension__'
|   |                 `-PredefinedExpr 0x7fffd842d828 <col:44> 'const char [81]' lvalue __PRETTY_FUNCTION__
|   |                   `-StringLiteral 0x7fffd842d7b0 <col:44> 'const char [81]' lvalue "void stbtt_PackSetOversampling(stbtt_pack_context *, unsigned int, unsigned int)"
|   |-IfStmt 0x7fffd842dbb0 <././stb/stb_truetype.h:3942:4, line:3943:27>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd842daa8 <line:3942:8, line:1104:32> 'int' '<='
|   | | |-ImplicitCastExpr 0x7fffd842da78 <line:3942:8> 'unsigned int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd842da30 <col:8> 'unsigned int' lvalue ParmVar 0x7fffd842cc90 'h_oversample' 'unsigned int'
|   | | `-ImplicitCastExpr 0x7fffd842da90 <line:1104:32> 'unsigned int' <IntegralCast>
|   | |   `-IntegerLiteral 0x7fffd842da58 <col:32> 'int' 8
|   | |-BinaryOperator 0x7fffd842db88 <line:3943:7, col:27> 'unsigned int' '='
|   | | |-MemberExpr 0x7fffd842db10 <col:7, col:12> 'unsigned int' lvalue ->h_oversample 0x7fffd834c5a8
|   | | | `-ImplicitCastExpr 0x7fffd842daf8 <col:7> 'stbtt_pack_context *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd842dad0 <col:7> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd842cc18 'spc' 'stbtt_pack_context *'
|   | | `-ImplicitCastExpr 0x7fffd842db70 <col:27> 'unsigned int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd842db48 <col:27> 'unsigned int' lvalue ParmVar 0x7fffd842cc90 'h_oversample' 'unsigned int'
|   | `-<<<NULL>>>
|   `-IfStmt 0x7fffd842dd68 <line:3944:4, line:3945:27>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fffd842dc60 <line:3944:8, line:1104:32> 'int' '<='
|     | |-ImplicitCastExpr 0x7fffd842dc30 <line:3944:8> 'unsigned int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fffd842dbe8 <col:8> 'unsigned int' lvalue ParmVar 0x7fffd842cd08 'v_oversample' 'unsigned int'
|     | `-ImplicitCastExpr 0x7fffd842dc48 <line:1104:32> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x7fffd842dc10 <col:32> 'int' 8
|     |-BinaryOperator 0x7fffd842dd40 <line:3945:7, col:27> 'unsigned int' '='
|     | |-MemberExpr 0x7fffd842dcc8 <col:7, col:12> 'unsigned int' lvalue ->v_oversample 0x7fffd834c608
|     | | `-ImplicitCastExpr 0x7fffd842dcb0 <col:7> 'stbtt_pack_context *' <LValueToRValue>
|     | |   `-DeclRefExpr 0x7fffd842dc88 <col:7> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd842cc18 'spc' 'stbtt_pack_context *'
|     | `-ImplicitCastExpr 0x7fffd842dd28 <col:27> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fffd842dd00 <col:27> 'unsigned int' lvalue ParmVar 0x7fffd842cd08 'v_oversample' 'unsigned int'
|     `-<<<NULL>>>
|-FunctionDecl 0x7fffd842dee8 prev 0x7fffd8348ff0 <line:501:19, line:3951:1> line:3948:16 stbtt_PackSetSkipMissingCodepoints 'void (stbtt_pack_context *, int)' extern
| |-ParmVarDecl 0x7fffd842dde0 <col:51, col:71> col:71 used spc 'stbtt_pack_context *'
| |-ParmVarDecl 0x7fffd842de58 <col:76, col:80> col:80 used skip 'int'
| `-CompoundStmt 0x7fffd842e078 <line:3949:1, line:3951:1>
|   `-BinaryOperator 0x7fffd842e050 <line:3950:4, col:24> 'int' '='
|     |-MemberExpr 0x7fffd842dfd8 <col:4, col:9> 'int' lvalue ->skip_missing 0x7fffd834c548
|     | `-ImplicitCastExpr 0x7fffd842dfc0 <col:4> 'stbtt_pack_context *' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fffd842df98 <col:4> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd842dde0 'spc' 'stbtt_pack_context *'
|     `-ImplicitCastExpr 0x7fffd842e038 <col:24> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd842e010 <col:24> 'int' lvalue ParmVar 0x7fffd842de58 'skip' 'int'
|-FunctionDecl 0x7fffd842e390 <line:3955:1, line:4015:1> line:3955:13 used stbtt__h_prefilter 'void (unsigned char *, int, int, int, unsigned int)' static
| |-ParmVarDecl 0x7fffd842e0a8 <col:32, col:47> col:47 used pixels 'unsigned char *'
| |-ParmVarDecl 0x7fffd842e120 <col:55, col:59> col:59 used w 'int'
| |-ParmVarDecl 0x7fffd842e198 <col:62, col:66> col:66 used h 'int'
| |-ParmVarDecl 0x7fffd842e210 <col:69, col:73> col:73 used stride_in_bytes 'int'
| |-ParmVarDecl 0x7fffd842e288 <col:90, col:103> col:103 used kernel_width 'unsigned int'
| `-CompoundStmt 0x7fffd8434250 <line:3956:1, line:4015:1>
|   |-DeclStmt 0x7fffd842e540 <line:3957:4, col:46>
|   | `-VarDecl 0x7fffd842e4e0 <col:4, col:45> col:18 used buffer 'unsigned char [8]'
|   |-DeclStmt 0x7fffd842e6a8 <line:3958:4, col:33>
|   | `-VarDecl 0x7fffd842e570 <col:4, col:21> col:8 used safe_w 'int' cinit
|   |   `-ImplicitCastExpr 0x7fffd842e690 <col:17, col:21> 'int' <IntegralCast>
|   |     `-BinaryOperator 0x7fffd842e668 <col:17, col:21> 'unsigned int' '-'
|   |       |-ImplicitCastExpr 0x7fffd842e650 <col:17> 'unsigned int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x7fffd842e620 <col:17> 'int' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x7fffd842e5d0 <col:17> 'int' lvalue ParmVar 0x7fffd842e120 'w' 'int'
|   |       `-ImplicitCastExpr 0x7fffd842e638 <col:21> 'unsigned int' <LValueToRValue>
|   |         `-DeclRefExpr 0x7fffd842e5f8 <col:21> 'unsigned int' lvalue ParmVar 0x7fffd842e288 'kernel_width' 'unsigned int'
|   |-DeclStmt 0x7fffd842e738 <line:3959:4, col:9>
|   | `-VarDecl 0x7fffd842e6d8 <col:4, col:8> col:8 used j 'int'
|   |-CallExpr 0x7fffd842e810 <line:484:31, line:3960:48> 'void *'
|   | |-ImplicitCastExpr 0x7fffd842e7f8 <line:484:31> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fffd842e750 <col:31> 'void *(void *, int, unsigned long)' Function 0x7fffd832d138 'memset' 'void *(void *, int, unsigned long)'
|   | |-ImplicitCastExpr 0x7fffd842e868 <line:3960:17> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x7fffd842e850 <col:17> 'unsigned char *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x7fffd842e778 <col:17> 'unsigned char [8]' lvalue Var 0x7fffd842e4e0 'buffer' 'unsigned char [8]'
|   | |-IntegerLiteral 0x7fffd842e7a0 <col:25> 'int' 0
|   | `-ImplicitCastExpr 0x7fffd842e880 <line:1104:32> 'unsigned long' <IntegralCast>
|   |   `-IntegerLiteral 0x7fffd842e7c0 <col:32> 'int' 8
|   `-ForStmt 0x7fffd8434218 <line:3961:4, line:4014:4>
|     |-BinaryOperator 0x7fffd842e8e0 <line:3961:9, col:11> 'int' '='
|     | |-DeclRefExpr 0x7fffd842e898 <col:9> 'int' lvalue Var 0x7fffd842e6d8 'j' 'int'
|     | `-IntegerLiteral 0x7fffd842e8c0 <col:11> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fffd842e988 <col:14, col:18> 'int' '<'
|     | |-ImplicitCastExpr 0x7fffd842e958 <col:14> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fffd842e908 <col:14> 'int' lvalue Var 0x7fffd842e6d8 'j' 'int'
|     | `-ImplicitCastExpr 0x7fffd842e970 <col:18> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fffd842e930 <col:18> 'int' lvalue ParmVar 0x7fffd842e198 'h' 'int'
|     |-UnaryOperator 0x7fffd842e9d8 <col:21, col:23> 'int' prefix '++'
|     | `-DeclRefExpr 0x7fffd842e9b0 <col:23> 'int' lvalue Var 0x7fffd842e6d8 'j' 'int'
|     `-CompoundStmt 0x7fffd84341d0 <col:26, line:4014:4>
|       |-DeclStmt 0x7fffd842ea70 <line:3962:7, col:12>
|       | `-VarDecl 0x7fffd842ea10 <col:7, col:11> col:11 used i 'int'
|       |-DeclStmt 0x7fffd842eb00 <line:3963:7, col:25>
|       | `-VarDecl 0x7fffd842eaa0 <col:7, col:20> col:20 used total 'unsigned int'
|       |-CallExpr 0x7fffd842ebf8 <line:484:31, line:3964:43> 'void *'
|       | |-ImplicitCastExpr 0x7fffd842ebe0 <line:484:31> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x7fffd842eb18 <col:31> 'void *(void *, int, unsigned long)' Function 0x7fffd832d138 'memset' 'void *(void *, int, unsigned long)'
|       | |-ImplicitCastExpr 0x7fffd842ec50 <line:3964:20> 'void *' <BitCast>
|       | | `-ImplicitCastExpr 0x7fffd842ec38 <col:20> 'unsigned char *' <ArrayToPointerDecay>
|       | |   `-DeclRefExpr 0x7fffd842eb40 <col:20> 'unsigned char [8]' lvalue Var 0x7fffd842e4e0 'buffer' 'unsigned char [8]'
|       | |-IntegerLiteral 0x7fffd842eb68 <col:28> 'int' 0
|       | `-ImplicitCastExpr 0x7fffd842ec80 <col:31> 'unsigned long' <IntegralCast>
|       |   `-ImplicitCastExpr 0x7fffd842ec68 <col:31> 'unsigned int' <LValueToRValue>
|       |     `-DeclRefExpr 0x7fffd842eb88 <col:31> 'unsigned int' lvalue ParmVar 0x7fffd842e288 'kernel_width' 'unsigned int'
|       |-BinaryOperator 0x7fffd842ecf8 <line:3966:7, col:15> 'unsigned int' '='
|       | |-DeclRefExpr 0x7fffd842ec98 <col:7> 'unsigned int' lvalue Var 0x7fffd842eaa0 'total' 'unsigned int'
|       | `-ImplicitCastExpr 0x7fffd842ece0 <col:15> 'unsigned int' <IntegralCast>
|       |   `-IntegerLiteral 0x7fffd842ecc0 <col:15> 'int' 0
|       |-SwitchStmt 0x7fffd842ed60 <line:3969:7, line:4005:7>
|       | |-<<<NULL>>>
|       | |-<<<NULL>>>
|       | |-ImplicitCastExpr 0x7fffd842ed48 <line:3969:15> 'unsigned int' <LValueToRValue>
|       | | `-DeclRefExpr 0x7fffd842ed20 <col:15> 'unsigned int' lvalue ParmVar 0x7fffd842e288 'kernel_width' 'unsigned int'
|       | `-CompoundStmt 0x7fffd8433428 <col:29, line:4005:7>
|       |   |-CaseStmt 0x7fffd842edb0 <line:3970:10, line:3975:13>
|       |   | |-ImplicitCastExpr 0x7fffd84334d0 <line:3970:15> 'unsigned int' <IntegralCast>
|       |   | | `-IntegerLiteral 0x7fffd842ed90 <col:15> 'int' 2
|       |   | |-<<<NULL>>>
|       |   | `-ForStmt 0x7fffd8430ba8 <line:3971:13, line:3975:13>
|       |   |   |-BinaryOperator 0x7fffd842ee30 <line:3971:18, col:20> 'int' '='
|       |   |   | |-DeclRefExpr 0x7fffd842ede8 <col:18> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |   | `-IntegerLiteral 0x7fffd842ee10 <col:20> 'int' 0
|       |   |   |-<<<NULL>>>
|       |   |   |-BinaryOperator 0x7fffd842eed8 <col:23, col:28> 'int' '<='
|       |   |   | |-ImplicitCastExpr 0x7fffd842eea8 <col:23> 'int' <LValueToRValue>
|       |   |   | | `-DeclRefExpr 0x7fffd842ee58 <col:23> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |   | `-ImplicitCastExpr 0x7fffd842eec0 <col:28> 'int' <LValueToRValue>
|       |   |   |   `-DeclRefExpr 0x7fffd842ee80 <col:28> 'int' lvalue Var 0x7fffd842e570 'safe_w' 'int'
|       |   |   |-UnaryOperator 0x7fffd842ef28 <col:36, col:38> 'int' prefix '++'
|       |   |   | `-DeclRefExpr 0x7fffd842ef00 <col:38> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |   `-CompoundStmt 0x7fffd8430b80 <col:41, line:3975:13>
|       |   |     |-CompoundAssignOperator 0x7fffd842f210 <line:3972:16, col:64> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|       |   |     | |-DeclRefExpr 0x7fffd842ef48 <col:16> 'unsigned int' lvalue Var 0x7fffd842eaa0 'total' 'unsigned int'
|       |   |     | `-ImplicitCastExpr 0x7fffd842f1f8 <col:25, col:64> 'unsigned int' <IntegralCast>
|       |   |     |   `-BinaryOperator 0x7fffd842f1d0 <col:25, col:64> 'int' '-'
|       |   |     |     |-ImplicitCastExpr 0x7fffd842f188 <col:25, col:33> 'int' <IntegralCast>
|       |   |     |     | `-ImplicitCastExpr 0x7fffd842f170 <col:25, col:33> 'unsigned char' <LValueToRValue>
|       |   |     |     |   `-ArraySubscriptExpr 0x7fffd842eff0 <col:25, col:33> 'unsigned char' lvalue
|       |   |     |     |     |-ImplicitCastExpr 0x7fffd842efc0 <col:25> 'unsigned char *' <LValueToRValue>
|       |   |     |     |     | `-DeclRefExpr 0x7fffd842ef70 <col:25> 'unsigned char *' lvalue ParmVar 0x7fffd842e0a8 'pixels' 'unsigned char *'
|       |   |     |     |     `-ImplicitCastExpr 0x7fffd842efd8 <col:32> 'int' <LValueToRValue>
|       |   |     |     |       `-DeclRefExpr 0x7fffd842ef98 <col:32> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |     |     `-ImplicitCastExpr 0x7fffd842f1b8 <col:37, col:64> 'int' <IntegralCast>
|       |   |     |       `-ImplicitCastExpr 0x7fffd842f1a0 <col:37, col:64> 'unsigned char' <LValueToRValue>
|       |   |     |         `-ArraySubscriptExpr 0x7fffd842f148 <col:37, col:64> 'unsigned char' lvalue
|       |   |     |           |-ImplicitCastExpr 0x7fffd842f130 <col:37> 'unsigned char *' <ArrayToPointerDecay>
|       |   |     |           | `-DeclRefExpr 0x7fffd842f018 <col:37> 'unsigned char [8]' lvalue Var 0x7fffd842e4e0 'buffer' 'unsigned char [8]'
|       |   |     |           `-BinaryOperator 0x7fffd842f108 <col:44, line:3953:50> 'int' '&'
|       |   |     |             |-ImplicitCastExpr 0x7fffd842f0f0 <line:3972:44> 'int' <LValueToRValue>
|       |   |     |             | `-DeclRefExpr 0x7fffd842f040 <col:44> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |     |             `-ParenExpr 0x7fffd842f0d0 <line:3953:27, col:50> 'int'
|       |   |     |               `-BinaryOperator 0x7fffd842f0a8 <line:1104:32, line:3953:49> 'int' '-'
|       |   |     |                 |-IntegerLiteral 0x7fffd842f068 <line:1104:32> 'int' 8
|       |   |     |                 `-IntegerLiteral 0x7fffd842f088 <line:3953:49> 'int' 1
|       |   |     |-BinaryOperator 0x7fffd842f518 <line:3973:16, col:70> 'unsigned char' '='
|       |   |     | |-ArraySubscriptExpr 0x7fffd842f430 <col:16, col:58> 'unsigned char' lvalue
|       |   |     | | |-ImplicitCastExpr 0x7fffd842f418 <col:16> 'unsigned char *' <ArrayToPointerDecay>
|       |   |     | | | `-DeclRefExpr 0x7fffd842f248 <col:16> 'unsigned char [8]' lvalue Var 0x7fffd842e4e0 'buffer' 'unsigned char [8]'
|       |   |     | | `-BinaryOperator 0x7fffd842f3f0 <col:23, line:3953:50> 'unsigned int' '&'
|       |   |     | |   |-ParenExpr 0x7fffd842f330 <line:3973:23, col:38> 'unsigned int'
|       |   |     | |   | `-BinaryOperator 0x7fffd842f308 <col:24, col:26> 'unsigned int' '+'
|       |   |     | |   |   |-ImplicitCastExpr 0x7fffd842f2f0 <col:24> 'unsigned int' <IntegralCast>
|       |   |     | |   |   | `-ImplicitCastExpr 0x7fffd842f2c0 <col:24> 'int' <LValueToRValue>
|       |   |     | |   |   |   `-DeclRefExpr 0x7fffd842f270 <col:24> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |     | |   |   `-ImplicitCastExpr 0x7fffd842f2d8 <col:26> 'unsigned int' <LValueToRValue>
|       |   |     | |   |     `-DeclRefExpr 0x7fffd842f298 <col:26> 'unsigned int' lvalue ParmVar 0x7fffd842e288 'kernel_width' 'unsigned int'
|       |   |     | |   `-ImplicitCastExpr 0x7fffd842f3d8 <line:3953:27, col:50> 'unsigned int' <IntegralCast>
|       |   |     | |     `-ParenExpr 0x7fffd842f3b8 <col:27, col:50> 'int'
|       |   |     | |       `-BinaryOperator 0x7fffd842f390 <line:1104:32, line:3953:49> 'int' '-'
|       |   |     | |         |-IntegerLiteral 0x7fffd842f350 <line:1104:32> 'int' 8
|       |   |     | |         `-IntegerLiteral 0x7fffd842f370 <line:3953:49> 'int' 1
|       |   |     | `-ImplicitCastExpr 0x7fffd842f500 <line:3973:62, col:70> 'unsigned char' <LValueToRValue>
|       |   |     |   `-ArraySubscriptExpr 0x7fffd842f4d8 <col:62, col:70> 'unsigned char' lvalue
|       |   |     |     |-ImplicitCastExpr 0x7fffd842f4a8 <col:62> 'unsigned char *' <LValueToRValue>
|       |   |     |     | `-DeclRefExpr 0x7fffd842f458 <col:62> 'unsigned char *' lvalue ParmVar 0x7fffd842e0a8 'pixels' 'unsigned char *'
|       |   |     |     `-ImplicitCastExpr 0x7fffd842f4c0 <col:69> 'int' <LValueToRValue>
|       |   |     |       `-DeclRefExpr 0x7fffd842f480 <col:69> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |     `-BinaryOperator 0x7fffd8430b58 <line:3974:16, col:54> 'unsigned char' '='
|       |   |       |-ArraySubscriptExpr 0x7fffd842f5c0 <col:16, col:24> 'unsigned char' lvalue
|       |   |       | |-ImplicitCastExpr 0x7fffd842f590 <col:16> 'unsigned char *' <LValueToRValue>
|       |   |       | | `-DeclRefExpr 0x7fffd842f540 <col:16> 'unsigned char *' lvalue ParmVar 0x7fffd842e0a8 'pixels' 'unsigned char *'
|       |   |       | `-ImplicitCastExpr 0x7fffd842f5a8 <col:23> 'int' <LValueToRValue>
|       |   |       |   `-DeclRefExpr 0x7fffd842f568 <col:23> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |       `-CStyleCastExpr 0x7fffd8430b30 <col:28, col:54> 'unsigned char' <IntegralCast>
|       |   |         `-ParenExpr 0x7fffd8430b10 <col:44, col:54> 'unsigned int'
|       |   |           `-BinaryOperator 0x7fffd8430aa0 <col:45, col:53> 'unsigned int' '/'
|       |   |             |-ImplicitCastExpr 0x7fffd842f630 <col:45> 'unsigned int' <LValueToRValue>
|       |   |             | `-DeclRefExpr 0x7fffd842f5e8 <col:45> 'unsigned int' lvalue Var 0x7fffd842eaa0 'total' 'unsigned int'
|       |   |             `-ImplicitCastExpr 0x7fffd842f648 <col:53> 'unsigned int' <IntegralCast>
|       |   |               `-IntegerLiteral 0x7fffd842f610 <col:53> 'int' 2
|       |   |-BreakStmt 0x7fffd8430be0 <line:3976:13>
|       |   |-CaseStmt 0x7fffd8430c08 <line:3977:10, line:3982:13>
|       |   | |-ImplicitCastExpr 0x7fffd84334b8 <line:3977:15> 'unsigned int' <IntegralCast>
|       |   | | `-IntegerLiteral 0x7fffd8430be8 <col:15> 'int' 3
|       |   | |-<<<NULL>>>
|       |   | `-ForStmt 0x7fffd84315c0 <line:3978:13, line:3982:13>
|       |   |   |-BinaryOperator 0x7fffd8430c88 <line:3978:18, col:20> 'int' '='
|       |   |   | |-DeclRefExpr 0x7fffd8430c40 <col:18> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |   | `-IntegerLiteral 0x7fffd8430c68 <col:20> 'int' 0
|       |   |   |-<<<NULL>>>
|       |   |   |-BinaryOperator 0x7fffd8430d30 <col:23, col:28> 'int' '<='
|       |   |   | |-ImplicitCastExpr 0x7fffd8430d00 <col:23> 'int' <LValueToRValue>
|       |   |   | | `-DeclRefExpr 0x7fffd8430cb0 <col:23> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |   | `-ImplicitCastExpr 0x7fffd8430d18 <col:28> 'int' <LValueToRValue>
|       |   |   |   `-DeclRefExpr 0x7fffd8430cd8 <col:28> 'int' lvalue Var 0x7fffd842e570 'safe_w' 'int'
|       |   |   |-UnaryOperator 0x7fffd8430d80 <col:36, col:38> 'int' prefix '++'
|       |   |   | `-DeclRefExpr 0x7fffd8430d58 <col:38> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |   `-CompoundStmt 0x7fffd8431598 <col:41, line:3982:13>
|       |   |     |-CompoundAssignOperator 0x7fffd8431068 <line:3979:16, col:64> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|       |   |     | |-DeclRefExpr 0x7fffd8430da0 <col:16> 'unsigned int' lvalue Var 0x7fffd842eaa0 'total' 'unsigned int'
|       |   |     | `-ImplicitCastExpr 0x7fffd8431050 <col:25, col:64> 'unsigned int' <IntegralCast>
|       |   |     |   `-BinaryOperator 0x7fffd8431028 <col:25, col:64> 'int' '-'
|       |   |     |     |-ImplicitCastExpr 0x7fffd8430fe0 <col:25, col:33> 'int' <IntegralCast>
|       |   |     |     | `-ImplicitCastExpr 0x7fffd8430fc8 <col:25, col:33> 'unsigned char' <LValueToRValue>
|       |   |     |     |   `-ArraySubscriptExpr 0x7fffd8430e48 <col:25, col:33> 'unsigned char' lvalue
|       |   |     |     |     |-ImplicitCastExpr 0x7fffd8430e18 <col:25> 'unsigned char *' <LValueToRValue>
|       |   |     |     |     | `-DeclRefExpr 0x7fffd8430dc8 <col:25> 'unsigned char *' lvalue ParmVar 0x7fffd842e0a8 'pixels' 'unsigned char *'
|       |   |     |     |     `-ImplicitCastExpr 0x7fffd8430e30 <col:32> 'int' <LValueToRValue>
|       |   |     |     |       `-DeclRefExpr 0x7fffd8430df0 <col:32> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |     |     `-ImplicitCastExpr 0x7fffd8431010 <col:37, col:64> 'int' <IntegralCast>
|       |   |     |       `-ImplicitCastExpr 0x7fffd8430ff8 <col:37, col:64> 'unsigned char' <LValueToRValue>
|       |   |     |         `-ArraySubscriptExpr 0x7fffd8430fa0 <col:37, col:64> 'unsigned char' lvalue
|       |   |     |           |-ImplicitCastExpr 0x7fffd8430f88 <col:37> 'unsigned char *' <ArrayToPointerDecay>
|       |   |     |           | `-DeclRefExpr 0x7fffd8430e70 <col:37> 'unsigned char [8]' lvalue Var 0x7fffd842e4e0 'buffer' 'unsigned char [8]'
|       |   |     |           `-BinaryOperator 0x7fffd8430f60 <col:44, line:3953:50> 'int' '&'
|       |   |     |             |-ImplicitCastExpr 0x7fffd8430f48 <line:3979:44> 'int' <LValueToRValue>
|       |   |     |             | `-DeclRefExpr 0x7fffd8430e98 <col:44> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |     |             `-ParenExpr 0x7fffd8430f28 <line:3953:27, col:50> 'int'
|       |   |     |               `-BinaryOperator 0x7fffd8430f00 <line:1104:32, line:3953:49> 'int' '-'
|       |   |     |                 |-IntegerLiteral 0x7fffd8430ec0 <line:1104:32> 'int' 8
|       |   |     |                 `-IntegerLiteral 0x7fffd8430ee0 <line:3953:49> 'int' 1
|       |   |     |-BinaryOperator 0x7fffd8431370 <line:3980:16, col:70> 'unsigned char' '='
|       |   |     | |-ArraySubscriptExpr 0x7fffd8431288 <col:16, col:58> 'unsigned char' lvalue
|       |   |     | | |-ImplicitCastExpr 0x7fffd8431270 <col:16> 'unsigned char *' <ArrayToPointerDecay>
|       |   |     | | | `-DeclRefExpr 0x7fffd84310a0 <col:16> 'unsigned char [8]' lvalue Var 0x7fffd842e4e0 'buffer' 'unsigned char [8]'
|       |   |     | | `-BinaryOperator 0x7fffd8431248 <col:23, line:3953:50> 'unsigned int' '&'
|       |   |     | |   |-ParenExpr 0x7fffd8431188 <line:3980:23, col:38> 'unsigned int'
|       |   |     | |   | `-BinaryOperator 0x7fffd8431160 <col:24, col:26> 'unsigned int' '+'
|       |   |     | |   |   |-ImplicitCastExpr 0x7fffd8431148 <col:24> 'unsigned int' <IntegralCast>
|       |   |     | |   |   | `-ImplicitCastExpr 0x7fffd8431118 <col:24> 'int' <LValueToRValue>
|       |   |     | |   |   |   `-DeclRefExpr 0x7fffd84310c8 <col:24> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |     | |   |   `-ImplicitCastExpr 0x7fffd8431130 <col:26> 'unsigned int' <LValueToRValue>
|       |   |     | |   |     `-DeclRefExpr 0x7fffd84310f0 <col:26> 'unsigned int' lvalue ParmVar 0x7fffd842e288 'kernel_width' 'unsigned int'
|       |   |     | |   `-ImplicitCastExpr 0x7fffd8431230 <line:3953:27, col:50> 'unsigned int' <IntegralCast>
|       |   |     | |     `-ParenExpr 0x7fffd8431210 <col:27, col:50> 'int'
|       |   |     | |       `-BinaryOperator 0x7fffd84311e8 <line:1104:32, line:3953:49> 'int' '-'
|       |   |     | |         |-IntegerLiteral 0x7fffd84311a8 <line:1104:32> 'int' 8
|       |   |     | |         `-IntegerLiteral 0x7fffd84311c8 <line:3953:49> 'int' 1
|       |   |     | `-ImplicitCastExpr 0x7fffd8431358 <line:3980:62, col:70> 'unsigned char' <LValueToRValue>
|       |   |     |   `-ArraySubscriptExpr 0x7fffd8431330 <col:62, col:70> 'unsigned char' lvalue
|       |   |     |     |-ImplicitCastExpr 0x7fffd8431300 <col:62> 'unsigned char *' <LValueToRValue>
|       |   |     |     | `-DeclRefExpr 0x7fffd84312b0 <col:62> 'unsigned char *' lvalue ParmVar 0x7fffd842e0a8 'pixels' 'unsigned char *'
|       |   |     |     `-ImplicitCastExpr 0x7fffd8431318 <col:69> 'int' <LValueToRValue>
|       |   |     |       `-DeclRefExpr 0x7fffd84312d8 <col:69> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |     `-BinaryOperator 0x7fffd8431570 <line:3981:16, col:54> 'unsigned char' '='
|       |   |       |-ArraySubscriptExpr 0x7fffd8431418 <col:16, col:24> 'unsigned char' lvalue
|       |   |       | |-ImplicitCastExpr 0x7fffd84313e8 <col:16> 'unsigned char *' <LValueToRValue>
|       |   |       | | `-DeclRefExpr 0x7fffd8431398 <col:16> 'unsigned char *' lvalue ParmVar 0x7fffd842e0a8 'pixels' 'unsigned char *'
|       |   |       | `-ImplicitCastExpr 0x7fffd8431400 <col:23> 'int' <LValueToRValue>
|       |   |       |   `-DeclRefExpr 0x7fffd84313c0 <col:23> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |       `-CStyleCastExpr 0x7fffd8431548 <col:28, col:54> 'unsigned char' <IntegralCast>
|       |   |         `-ParenExpr 0x7fffd8431528 <col:44, col:54> 'unsigned int'
|       |   |           `-BinaryOperator 0x7fffd84314b8 <col:45, col:53> 'unsigned int' '/'
|       |   |             |-ImplicitCastExpr 0x7fffd8431488 <col:45> 'unsigned int' <LValueToRValue>
|       |   |             | `-DeclRefExpr 0x7fffd8431440 <col:45> 'unsigned int' lvalue Var 0x7fffd842eaa0 'total' 'unsigned int'
|       |   |             `-ImplicitCastExpr 0x7fffd84314a0 <col:53> 'unsigned int' <IntegralCast>
|       |   |               `-IntegerLiteral 0x7fffd8431468 <col:53> 'int' 3
|       |   |-BreakStmt 0x7fffd84315f8 <line:3983:13>
|       |   |-CaseStmt 0x7fffd8431620 <line:3984:10, line:3989:13>
|       |   | |-ImplicitCastExpr 0x7fffd84334a0 <line:3984:15> 'unsigned int' <IntegralCast>
|       |   | | `-IntegerLiteral 0x7fffd8431600 <col:15> 'int' 4
|       |   | |-<<<NULL>>>
|       |   | `-ForStmt 0x7fffd8431fd8 <line:3985:13, line:3989:13>
|       |   |   |-BinaryOperator 0x7fffd84316a0 <line:3985:18, col:20> 'int' '='
|       |   |   | |-DeclRefExpr 0x7fffd8431658 <col:18> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |   | `-IntegerLiteral 0x7fffd8431680 <col:20> 'int' 0
|       |   |   |-<<<NULL>>>
|       |   |   |-BinaryOperator 0x7fffd8431748 <col:23, col:28> 'int' '<='
|       |   |   | |-ImplicitCastExpr 0x7fffd8431718 <col:23> 'int' <LValueToRValue>
|       |   |   | | `-DeclRefExpr 0x7fffd84316c8 <col:23> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |   | `-ImplicitCastExpr 0x7fffd8431730 <col:28> 'int' <LValueToRValue>
|       |   |   |   `-DeclRefExpr 0x7fffd84316f0 <col:28> 'int' lvalue Var 0x7fffd842e570 'safe_w' 'int'
|       |   |   |-UnaryOperator 0x7fffd8431798 <col:36, col:38> 'int' prefix '++'
|       |   |   | `-DeclRefExpr 0x7fffd8431770 <col:38> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |   `-CompoundStmt 0x7fffd8431fb0 <col:41, line:3989:13>
|       |   |     |-CompoundAssignOperator 0x7fffd8431a80 <line:3986:16, col:64> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|       |   |     | |-DeclRefExpr 0x7fffd84317b8 <col:16> 'unsigned int' lvalue Var 0x7fffd842eaa0 'total' 'unsigned int'
|       |   |     | `-ImplicitCastExpr 0x7fffd8431a68 <col:25, col:64> 'unsigned int' <IntegralCast>
|       |   |     |   `-BinaryOperator 0x7fffd8431a40 <col:25, col:64> 'int' '-'
|       |   |     |     |-ImplicitCastExpr 0x7fffd84319f8 <col:25, col:33> 'int' <IntegralCast>
|       |   |     |     | `-ImplicitCastExpr 0x7fffd84319e0 <col:25, col:33> 'unsigned char' <LValueToRValue>
|       |   |     |     |   `-ArraySubscriptExpr 0x7fffd8431860 <col:25, col:33> 'unsigned char' lvalue
|       |   |     |     |     |-ImplicitCastExpr 0x7fffd8431830 <col:25> 'unsigned char *' <LValueToRValue>
|       |   |     |     |     | `-DeclRefExpr 0x7fffd84317e0 <col:25> 'unsigned char *' lvalue ParmVar 0x7fffd842e0a8 'pixels' 'unsigned char *'
|       |   |     |     |     `-ImplicitCastExpr 0x7fffd8431848 <col:32> 'int' <LValueToRValue>
|       |   |     |     |       `-DeclRefExpr 0x7fffd8431808 <col:32> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |     |     `-ImplicitCastExpr 0x7fffd8431a28 <col:37, col:64> 'int' <IntegralCast>
|       |   |     |       `-ImplicitCastExpr 0x7fffd8431a10 <col:37, col:64> 'unsigned char' <LValueToRValue>
|       |   |     |         `-ArraySubscriptExpr 0x7fffd84319b8 <col:37, col:64> 'unsigned char' lvalue
|       |   |     |           |-ImplicitCastExpr 0x7fffd84319a0 <col:37> 'unsigned char *' <ArrayToPointerDecay>
|       |   |     |           | `-DeclRefExpr 0x7fffd8431888 <col:37> 'unsigned char [8]' lvalue Var 0x7fffd842e4e0 'buffer' 'unsigned char [8]'
|       |   |     |           `-BinaryOperator 0x7fffd8431978 <col:44, line:3953:50> 'int' '&'
|       |   |     |             |-ImplicitCastExpr 0x7fffd8431960 <line:3986:44> 'int' <LValueToRValue>
|       |   |     |             | `-DeclRefExpr 0x7fffd84318b0 <col:44> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |     |             `-ParenExpr 0x7fffd8431940 <line:3953:27, col:50> 'int'
|       |   |     |               `-BinaryOperator 0x7fffd8431918 <line:1104:32, line:3953:49> 'int' '-'
|       |   |     |                 |-IntegerLiteral 0x7fffd84318d8 <line:1104:32> 'int' 8
|       |   |     |                 `-IntegerLiteral 0x7fffd84318f8 <line:3953:49> 'int' 1
|       |   |     |-BinaryOperator 0x7fffd8431d88 <line:3987:16, col:70> 'unsigned char' '='
|       |   |     | |-ArraySubscriptExpr 0x7fffd8431ca0 <col:16, col:58> 'unsigned char' lvalue
|       |   |     | | |-ImplicitCastExpr 0x7fffd8431c88 <col:16> 'unsigned char *' <ArrayToPointerDecay>
|       |   |     | | | `-DeclRefExpr 0x7fffd8431ab8 <col:16> 'unsigned char [8]' lvalue Var 0x7fffd842e4e0 'buffer' 'unsigned char [8]'
|       |   |     | | `-BinaryOperator 0x7fffd8431c60 <col:23, line:3953:50> 'unsigned int' '&'
|       |   |     | |   |-ParenExpr 0x7fffd8431ba0 <line:3987:23, col:38> 'unsigned int'
|       |   |     | |   | `-BinaryOperator 0x7fffd8431b78 <col:24, col:26> 'unsigned int' '+'
|       |   |     | |   |   |-ImplicitCastExpr 0x7fffd8431b60 <col:24> 'unsigned int' <IntegralCast>
|       |   |     | |   |   | `-ImplicitCastExpr 0x7fffd8431b30 <col:24> 'int' <LValueToRValue>
|       |   |     | |   |   |   `-DeclRefExpr 0x7fffd8431ae0 <col:24> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |     | |   |   `-ImplicitCastExpr 0x7fffd8431b48 <col:26> 'unsigned int' <LValueToRValue>
|       |   |     | |   |     `-DeclRefExpr 0x7fffd8431b08 <col:26> 'unsigned int' lvalue ParmVar 0x7fffd842e288 'kernel_width' 'unsigned int'
|       |   |     | |   `-ImplicitCastExpr 0x7fffd8431c48 <line:3953:27, col:50> 'unsigned int' <IntegralCast>
|       |   |     | |     `-ParenExpr 0x7fffd8431c28 <col:27, col:50> 'int'
|       |   |     | |       `-BinaryOperator 0x7fffd8431c00 <line:1104:32, line:3953:49> 'int' '-'
|       |   |     | |         |-IntegerLiteral 0x7fffd8431bc0 <line:1104:32> 'int' 8
|       |   |     | |         `-IntegerLiteral 0x7fffd8431be0 <line:3953:49> 'int' 1
|       |   |     | `-ImplicitCastExpr 0x7fffd8431d70 <line:3987:62, col:70> 'unsigned char' <LValueToRValue>
|       |   |     |   `-ArraySubscriptExpr 0x7fffd8431d48 <col:62, col:70> 'unsigned char' lvalue
|       |   |     |     |-ImplicitCastExpr 0x7fffd8431d18 <col:62> 'unsigned char *' <LValueToRValue>
|       |   |     |     | `-DeclRefExpr 0x7fffd8431cc8 <col:62> 'unsigned char *' lvalue ParmVar 0x7fffd842e0a8 'pixels' 'unsigned char *'
|       |   |     |     `-ImplicitCastExpr 0x7fffd8431d30 <col:69> 'int' <LValueToRValue>
|       |   |     |       `-DeclRefExpr 0x7fffd8431cf0 <col:69> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |     `-BinaryOperator 0x7fffd8431f88 <line:3988:16, col:54> 'unsigned char' '='
|       |   |       |-ArraySubscriptExpr 0x7fffd8431e30 <col:16, col:24> 'unsigned char' lvalue
|       |   |       | |-ImplicitCastExpr 0x7fffd8431e00 <col:16> 'unsigned char *' <LValueToRValue>
|       |   |       | | `-DeclRefExpr 0x7fffd8431db0 <col:16> 'unsigned char *' lvalue ParmVar 0x7fffd842e0a8 'pixels' 'unsigned char *'
|       |   |       | `-ImplicitCastExpr 0x7fffd8431e18 <col:23> 'int' <LValueToRValue>
|       |   |       |   `-DeclRefExpr 0x7fffd8431dd8 <col:23> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |       `-CStyleCastExpr 0x7fffd8431f60 <col:28, col:54> 'unsigned char' <IntegralCast>
|       |   |         `-ParenExpr 0x7fffd8431f40 <col:44, col:54> 'unsigned int'
|       |   |           `-BinaryOperator 0x7fffd8431ed0 <col:45, col:53> 'unsigned int' '/'
|       |   |             |-ImplicitCastExpr 0x7fffd8431ea0 <col:45> 'unsigned int' <LValueToRValue>
|       |   |             | `-DeclRefExpr 0x7fffd8431e58 <col:45> 'unsigned int' lvalue Var 0x7fffd842eaa0 'total' 'unsigned int'
|       |   |             `-ImplicitCastExpr 0x7fffd8431eb8 <col:53> 'unsigned int' <IntegralCast>
|       |   |               `-IntegerLiteral 0x7fffd8431e80 <col:53> 'int' 4
|       |   |-BreakStmt 0x7fffd8432010 <line:3990:13>
|       |   |-CaseStmt 0x7fffd8432038 <line:3991:10, line:3996:13>
|       |   | |-ImplicitCastExpr 0x7fffd8433488 <line:3991:15> 'unsigned int' <IntegralCast>
|       |   | | `-IntegerLiteral 0x7fffd8432018 <col:15> 'int' 5
|       |   | |-<<<NULL>>>
|       |   | `-ForStmt 0x7fffd84329f0 <line:3992:13, line:3996:13>
|       |   |   |-BinaryOperator 0x7fffd84320b8 <line:3992:18, col:20> 'int' '='
|       |   |   | |-DeclRefExpr 0x7fffd8432070 <col:18> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |   | `-IntegerLiteral 0x7fffd8432098 <col:20> 'int' 0
|       |   |   |-<<<NULL>>>
|       |   |   |-BinaryOperator 0x7fffd8432160 <col:23, col:28> 'int' '<='
|       |   |   | |-ImplicitCastExpr 0x7fffd8432130 <col:23> 'int' <LValueToRValue>
|       |   |   | | `-DeclRefExpr 0x7fffd84320e0 <col:23> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |   | `-ImplicitCastExpr 0x7fffd8432148 <col:28> 'int' <LValueToRValue>
|       |   |   |   `-DeclRefExpr 0x7fffd8432108 <col:28> 'int' lvalue Var 0x7fffd842e570 'safe_w' 'int'
|       |   |   |-UnaryOperator 0x7fffd84321b0 <col:36, col:38> 'int' prefix '++'
|       |   |   | `-DeclRefExpr 0x7fffd8432188 <col:38> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |   `-CompoundStmt 0x7fffd84329c8 <col:41, line:3996:13>
|       |   |     |-CompoundAssignOperator 0x7fffd8432498 <line:3993:16, col:64> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|       |   |     | |-DeclRefExpr 0x7fffd84321d0 <col:16> 'unsigned int' lvalue Var 0x7fffd842eaa0 'total' 'unsigned int'
|       |   |     | `-ImplicitCastExpr 0x7fffd8432480 <col:25, col:64> 'unsigned int' <IntegralCast>
|       |   |     |   `-BinaryOperator 0x7fffd8432458 <col:25, col:64> 'int' '-'
|       |   |     |     |-ImplicitCastExpr 0x7fffd8432410 <col:25, col:33> 'int' <IntegralCast>
|       |   |     |     | `-ImplicitCastExpr 0x7fffd84323f8 <col:25, col:33> 'unsigned char' <LValueToRValue>
|       |   |     |     |   `-ArraySubscriptExpr 0x7fffd8432278 <col:25, col:33> 'unsigned char' lvalue
|       |   |     |     |     |-ImplicitCastExpr 0x7fffd8432248 <col:25> 'unsigned char *' <LValueToRValue>
|       |   |     |     |     | `-DeclRefExpr 0x7fffd84321f8 <col:25> 'unsigned char *' lvalue ParmVar 0x7fffd842e0a8 'pixels' 'unsigned char *'
|       |   |     |     |     `-ImplicitCastExpr 0x7fffd8432260 <col:32> 'int' <LValueToRValue>
|       |   |     |     |       `-DeclRefExpr 0x7fffd8432220 <col:32> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |     |     `-ImplicitCastExpr 0x7fffd8432440 <col:37, col:64> 'int' <IntegralCast>
|       |   |     |       `-ImplicitCastExpr 0x7fffd8432428 <col:37, col:64> 'unsigned char' <LValueToRValue>
|       |   |     |         `-ArraySubscriptExpr 0x7fffd84323d0 <col:37, col:64> 'unsigned char' lvalue
|       |   |     |           |-ImplicitCastExpr 0x7fffd84323b8 <col:37> 'unsigned char *' <ArrayToPointerDecay>
|       |   |     |           | `-DeclRefExpr 0x7fffd84322a0 <col:37> 'unsigned char [8]' lvalue Var 0x7fffd842e4e0 'buffer' 'unsigned char [8]'
|       |   |     |           `-BinaryOperator 0x7fffd8432390 <col:44, line:3953:50> 'int' '&'
|       |   |     |             |-ImplicitCastExpr 0x7fffd8432378 <line:3993:44> 'int' <LValueToRValue>
|       |   |     |             | `-DeclRefExpr 0x7fffd84322c8 <col:44> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |     |             `-ParenExpr 0x7fffd8432358 <line:3953:27, col:50> 'int'
|       |   |     |               `-BinaryOperator 0x7fffd8432330 <line:1104:32, line:3953:49> 'int' '-'
|       |   |     |                 |-IntegerLiteral 0x7fffd84322f0 <line:1104:32> 'int' 8
|       |   |     |                 `-IntegerLiteral 0x7fffd8432310 <line:3953:49> 'int' 1
|       |   |     |-BinaryOperator 0x7fffd84327a0 <line:3994:16, col:70> 'unsigned char' '='
|       |   |     | |-ArraySubscriptExpr 0x7fffd84326b8 <col:16, col:58> 'unsigned char' lvalue
|       |   |     | | |-ImplicitCastExpr 0x7fffd84326a0 <col:16> 'unsigned char *' <ArrayToPointerDecay>
|       |   |     | | | `-DeclRefExpr 0x7fffd84324d0 <col:16> 'unsigned char [8]' lvalue Var 0x7fffd842e4e0 'buffer' 'unsigned char [8]'
|       |   |     | | `-BinaryOperator 0x7fffd8432678 <col:23, line:3953:50> 'unsigned int' '&'
|       |   |     | |   |-ParenExpr 0x7fffd84325b8 <line:3994:23, col:38> 'unsigned int'
|       |   |     | |   | `-BinaryOperator 0x7fffd8432590 <col:24, col:26> 'unsigned int' '+'
|       |   |     | |   |   |-ImplicitCastExpr 0x7fffd8432578 <col:24> 'unsigned int' <IntegralCast>
|       |   |     | |   |   | `-ImplicitCastExpr 0x7fffd8432548 <col:24> 'int' <LValueToRValue>
|       |   |     | |   |   |   `-DeclRefExpr 0x7fffd84324f8 <col:24> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |     | |   |   `-ImplicitCastExpr 0x7fffd8432560 <col:26> 'unsigned int' <LValueToRValue>
|       |   |     | |   |     `-DeclRefExpr 0x7fffd8432520 <col:26> 'unsigned int' lvalue ParmVar 0x7fffd842e288 'kernel_width' 'unsigned int'
|       |   |     | |   `-ImplicitCastExpr 0x7fffd8432660 <line:3953:27, col:50> 'unsigned int' <IntegralCast>
|       |   |     | |     `-ParenExpr 0x7fffd8432640 <col:27, col:50> 'int'
|       |   |     | |       `-BinaryOperator 0x7fffd8432618 <line:1104:32, line:3953:49> 'int' '-'
|       |   |     | |         |-IntegerLiteral 0x7fffd84325d8 <line:1104:32> 'int' 8
|       |   |     | |         `-IntegerLiteral 0x7fffd84325f8 <line:3953:49> 'int' 1
|       |   |     | `-ImplicitCastExpr 0x7fffd8432788 <line:3994:62, col:70> 'unsigned char' <LValueToRValue>
|       |   |     |   `-ArraySubscriptExpr 0x7fffd8432760 <col:62, col:70> 'unsigned char' lvalue
|       |   |     |     |-ImplicitCastExpr 0x7fffd8432730 <col:62> 'unsigned char *' <LValueToRValue>
|       |   |     |     | `-DeclRefExpr 0x7fffd84326e0 <col:62> 'unsigned char *' lvalue ParmVar 0x7fffd842e0a8 'pixels' 'unsigned char *'
|       |   |     |     `-ImplicitCastExpr 0x7fffd8432748 <col:69> 'int' <LValueToRValue>
|       |   |     |       `-DeclRefExpr 0x7fffd8432708 <col:69> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |     `-BinaryOperator 0x7fffd84329a0 <line:3995:16, col:54> 'unsigned char' '='
|       |   |       |-ArraySubscriptExpr 0x7fffd8432848 <col:16, col:24> 'unsigned char' lvalue
|       |   |       | |-ImplicitCastExpr 0x7fffd8432818 <col:16> 'unsigned char *' <LValueToRValue>
|       |   |       | | `-DeclRefExpr 0x7fffd84327c8 <col:16> 'unsigned char *' lvalue ParmVar 0x7fffd842e0a8 'pixels' 'unsigned char *'
|       |   |       | `-ImplicitCastExpr 0x7fffd8432830 <col:23> 'int' <LValueToRValue>
|       |   |       |   `-DeclRefExpr 0x7fffd84327f0 <col:23> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |       `-CStyleCastExpr 0x7fffd8432978 <col:28, col:54> 'unsigned char' <IntegralCast>
|       |   |         `-ParenExpr 0x7fffd8432958 <col:44, col:54> 'unsigned int'
|       |   |           `-BinaryOperator 0x7fffd84328e8 <col:45, col:53> 'unsigned int' '/'
|       |   |             |-ImplicitCastExpr 0x7fffd84328b8 <col:45> 'unsigned int' <LValueToRValue>
|       |   |             | `-DeclRefExpr 0x7fffd8432870 <col:45> 'unsigned int' lvalue Var 0x7fffd842eaa0 'total' 'unsigned int'
|       |   |             `-ImplicitCastExpr 0x7fffd84328d0 <col:53> 'unsigned int' <IntegralCast>
|       |   |               `-IntegerLiteral 0x7fffd8432898 <col:53> 'int' 5
|       |   |-BreakStmt 0x7fffd8432a28 <line:3997:13>
|       |   |-DefaultStmt 0x7fffd8433400 <line:3998:10, line:4003:13>
|       |   | `-ForStmt 0x7fffd84333c8 <line:3999:13, line:4003:13>
|       |   |   |-BinaryOperator 0x7fffd8432a78 <line:3999:18, col:20> 'int' '='
|       |   |   | |-DeclRefExpr 0x7fffd8432a30 <col:18> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |   | `-IntegerLiteral 0x7fffd8432a58 <col:20> 'int' 0
|       |   |   |-<<<NULL>>>
|       |   |   |-BinaryOperator 0x7fffd8432b30 <col:23, col:28> 'int' '<='
|       |   |   | |-ImplicitCastExpr 0x7fffd8432b00 <col:23> 'int' <LValueToRValue>
|       |   |   | | `-DeclRefExpr 0x7fffd8432ab0 <col:23> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |   | `-ImplicitCastExpr 0x7fffd8432b18 <col:28> 'int' <LValueToRValue>
|       |   |   |   `-DeclRefExpr 0x7fffd8432ad8 <col:28> 'int' lvalue Var 0x7fffd842e570 'safe_w' 'int'
|       |   |   |-UnaryOperator 0x7fffd8432b80 <col:36, col:38> 'int' prefix '++'
|       |   |   | `-DeclRefExpr 0x7fffd8432b58 <col:38> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |   `-CompoundStmt 0x7fffd84333a0 <col:41, line:4003:13>
|       |   |     |-CompoundAssignOperator 0x7fffd8432e68 <line:4000:16, col:64> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|       |   |     | |-DeclRefExpr 0x7fffd8432ba0 <col:16> 'unsigned int' lvalue Var 0x7fffd842eaa0 'total' 'unsigned int'
|       |   |     | `-ImplicitCastExpr 0x7fffd8432e50 <col:25, col:64> 'unsigned int' <IntegralCast>
|       |   |     |   `-BinaryOperator 0x7fffd8432e28 <col:25, col:64> 'int' '-'
|       |   |     |     |-ImplicitCastExpr 0x7fffd8432de0 <col:25, col:33> 'int' <IntegralCast>
|       |   |     |     | `-ImplicitCastExpr 0x7fffd8432dc8 <col:25, col:33> 'unsigned char' <LValueToRValue>
|       |   |     |     |   `-ArraySubscriptExpr 0x7fffd8432c48 <col:25, col:33> 'unsigned char' lvalue
|       |   |     |     |     |-ImplicitCastExpr 0x7fffd8432c18 <col:25> 'unsigned char *' <LValueToRValue>
|       |   |     |     |     | `-DeclRefExpr 0x7fffd8432bc8 <col:25> 'unsigned char *' lvalue ParmVar 0x7fffd842e0a8 'pixels' 'unsigned char *'
|       |   |     |     |     `-ImplicitCastExpr 0x7fffd8432c30 <col:32> 'int' <LValueToRValue>
|       |   |     |     |       `-DeclRefExpr 0x7fffd8432bf0 <col:32> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |     |     `-ImplicitCastExpr 0x7fffd8432e10 <col:37, col:64> 'int' <IntegralCast>
|       |   |     |       `-ImplicitCastExpr 0x7fffd8432df8 <col:37, col:64> 'unsigned char' <LValueToRValue>
|       |   |     |         `-ArraySubscriptExpr 0x7fffd8432da0 <col:37, col:64> 'unsigned char' lvalue
|       |   |     |           |-ImplicitCastExpr 0x7fffd8432d88 <col:37> 'unsigned char *' <ArrayToPointerDecay>
|       |   |     |           | `-DeclRefExpr 0x7fffd8432c70 <col:37> 'unsigned char [8]' lvalue Var 0x7fffd842e4e0 'buffer' 'unsigned char [8]'
|       |   |     |           `-BinaryOperator 0x7fffd8432d60 <col:44, line:3953:50> 'int' '&'
|       |   |     |             |-ImplicitCastExpr 0x7fffd8432d48 <line:4000:44> 'int' <LValueToRValue>
|       |   |     |             | `-DeclRefExpr 0x7fffd8432c98 <col:44> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |     |             `-ParenExpr 0x7fffd8432d28 <line:3953:27, col:50> 'int'
|       |   |     |               `-BinaryOperator 0x7fffd8432d00 <line:1104:32, line:3953:49> 'int' '-'
|       |   |     |                 |-IntegerLiteral 0x7fffd8432cc0 <line:1104:32> 'int' 8
|       |   |     |                 `-IntegerLiteral 0x7fffd8432ce0 <line:3953:49> 'int' 1
|       |   |     |-BinaryOperator 0x7fffd8433170 <line:4001:16, col:70> 'unsigned char' '='
|       |   |     | |-ArraySubscriptExpr 0x7fffd8433088 <col:16, col:58> 'unsigned char' lvalue
|       |   |     | | |-ImplicitCastExpr 0x7fffd8433070 <col:16> 'unsigned char *' <ArrayToPointerDecay>
|       |   |     | | | `-DeclRefExpr 0x7fffd8432ea0 <col:16> 'unsigned char [8]' lvalue Var 0x7fffd842e4e0 'buffer' 'unsigned char [8]'
|       |   |     | | `-BinaryOperator 0x7fffd8433048 <col:23, line:3953:50> 'unsigned int' '&'
|       |   |     | |   |-ParenExpr 0x7fffd8432f88 <line:4001:23, col:38> 'unsigned int'
|       |   |     | |   | `-BinaryOperator 0x7fffd8432f60 <col:24, col:26> 'unsigned int' '+'
|       |   |     | |   |   |-ImplicitCastExpr 0x7fffd8432f48 <col:24> 'unsigned int' <IntegralCast>
|       |   |     | |   |   | `-ImplicitCastExpr 0x7fffd8432f18 <col:24> 'int' <LValueToRValue>
|       |   |     | |   |   |   `-DeclRefExpr 0x7fffd8432ec8 <col:24> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |     | |   |   `-ImplicitCastExpr 0x7fffd8432f30 <col:26> 'unsigned int' <LValueToRValue>
|       |   |     | |   |     `-DeclRefExpr 0x7fffd8432ef0 <col:26> 'unsigned int' lvalue ParmVar 0x7fffd842e288 'kernel_width' 'unsigned int'
|       |   |     | |   `-ImplicitCastExpr 0x7fffd8433030 <line:3953:27, col:50> 'unsigned int' <IntegralCast>
|       |   |     | |     `-ParenExpr 0x7fffd8433010 <col:27, col:50> 'int'
|       |   |     | |       `-BinaryOperator 0x7fffd8432fe8 <line:1104:32, line:3953:49> 'int' '-'
|       |   |     | |         |-IntegerLiteral 0x7fffd8432fa8 <line:1104:32> 'int' 8
|       |   |     | |         `-IntegerLiteral 0x7fffd8432fc8 <line:3953:49> 'int' 1
|       |   |     | `-ImplicitCastExpr 0x7fffd8433158 <line:4001:62, col:70> 'unsigned char' <LValueToRValue>
|       |   |     |   `-ArraySubscriptExpr 0x7fffd8433130 <col:62, col:70> 'unsigned char' lvalue
|       |   |     |     |-ImplicitCastExpr 0x7fffd8433100 <col:62> 'unsigned char *' <LValueToRValue>
|       |   |     |     | `-DeclRefExpr 0x7fffd84330b0 <col:62> 'unsigned char *' lvalue ParmVar 0x7fffd842e0a8 'pixels' 'unsigned char *'
|       |   |     |     `-ImplicitCastExpr 0x7fffd8433118 <col:69> 'int' <LValueToRValue>
|       |   |     |       `-DeclRefExpr 0x7fffd84330d8 <col:69> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |     `-BinaryOperator 0x7fffd8433378 <line:4002:16, col:65> 'unsigned char' '='
|       |   |       |-ArraySubscriptExpr 0x7fffd8433218 <col:16, col:24> 'unsigned char' lvalue
|       |   |       | |-ImplicitCastExpr 0x7fffd84331e8 <col:16> 'unsigned char *' <LValueToRValue>
|       |   |       | | `-DeclRefExpr 0x7fffd8433198 <col:16> 'unsigned char *' lvalue ParmVar 0x7fffd842e0a8 'pixels' 'unsigned char *'
|       |   |       | `-ImplicitCastExpr 0x7fffd8433200 <col:23> 'int' <LValueToRValue>
|       |   |       |   `-DeclRefExpr 0x7fffd84331c0 <col:23> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |       `-CStyleCastExpr 0x7fffd8433350 <col:28, col:65> 'unsigned char' <IntegralCast>
|       |   |         `-ParenExpr 0x7fffd8433330 <col:44, col:65> 'unsigned int'
|       |   |           `-BinaryOperator 0x7fffd84332c0 <col:45, col:53> 'unsigned int' '/'
|       |   |             |-ImplicitCastExpr 0x7fffd8433290 <col:45> 'unsigned int' <LValueToRValue>
|       |   |             | `-DeclRefExpr 0x7fffd8433240 <col:45> 'unsigned int' lvalue Var 0x7fffd842eaa0 'total' 'unsigned int'
|       |   |             `-ImplicitCastExpr 0x7fffd84332a8 <col:53> 'unsigned int' <LValueToRValue>
|       |   |               `-DeclRefExpr 0x7fffd8433268 <col:53> 'unsigned int' lvalue ParmVar 0x7fffd842e288 'kernel_width' 'unsigned int'
|       |   `-BreakStmt 0x7fffd8433420 <line:4004:13>
|       |-ForStmt 0x7fffd84340f8 <line:4007:7, line:4011:7>
|       | |-<<<NULL>>>
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7fffd8433568 <line:4007:14, col:18> 'int' '<'
|       | | |-ImplicitCastExpr 0x7fffd8433538 <col:14> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fffd84334e8 <col:14> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       | | `-ImplicitCastExpr 0x7fffd8433550 <col:18> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fffd8433510 <col:18> 'int' lvalue ParmVar 0x7fffd842e120 'w' 'int'
|       | |-UnaryOperator 0x7fffd84335b8 <col:21, col:23> 'int' prefix '++'
|       | | `-DeclRefExpr 0x7fffd8433590 <col:23> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       | `-CompoundStmt 0x7fffd84340d0 <col:26, line:4011:7>
|       |   |-ParenExpr 0x7fffd8433cc0 </usr/include/assert.h:108:3, line:113:7> 'void'
|       |   | `-BinaryOperator 0x7fffd8433c98 <line:108:4, line:113:6> 'void' ','
|       |   |   |-CStyleCastExpr 0x7fffd84337d8 <line:108:4, col:33> 'void' <ToVoid>
|       |   |   | `-UnaryExprOrTypeTraitExpr 0x7fffd84337a8 <col:11, col:33> 'unsigned long' sizeof
|       |   |   |   `-ParenExpr 0x7fffd8433788 <col:18, col:33> 'int'
|       |   |   |     `-ConditionalOperator 0x7fffd8433758 <col:19, col:32> 'int'
|       |   |   |       |-ParenExpr 0x7fffd84336f8 <col:19, col:24> 'int'
|       |   |   |       | `-BinaryOperator 0x7fffd84336d0 <././stb/stb_truetype.h:4008:23, col:36> 'int' '=='
|       |   |   |       |   |-ImplicitCastExpr 0x7fffd84336b8 <col:23, col:31> 'int' <IntegralCast>
|       |   |   |       |   | `-ImplicitCastExpr 0x7fffd84336a0 <col:23, col:31> 'unsigned char' <LValueToRValue>
|       |   |   |       |   |   `-ArraySubscriptExpr 0x7fffd8433658 <col:23, col:31> 'unsigned char' lvalue
|       |   |   |       |   |     |-ImplicitCastExpr 0x7fffd8433628 <col:23> 'unsigned char *' <LValueToRValue>
|       |   |   |       |   |     | `-DeclRefExpr 0x7fffd84335d8 <col:23> 'unsigned char *' lvalue ParmVar 0x7fffd842e0a8 'pixels' 'unsigned char *'
|       |   |   |       |   |     `-ImplicitCastExpr 0x7fffd8433640 <col:30> 'int' <LValueToRValue>
|       |   |   |       |   |       `-DeclRefExpr 0x7fffd8433600 <col:30> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |   |       |   `-IntegerLiteral 0x7fffd8433680 <col:36> 'int' 0
|       |   |   |       |-IntegerLiteral 0x7fffd8433718 </usr/include/assert.h:108:28> 'int' 1
|       |   |   |       `-IntegerLiteral 0x7fffd8433738 <col:32> 'int' 0
|       |   |   `-UnaryOperator 0x7fffd8433c78 <col:36, line:113:6> 'void' prefix '__extension__'
|       |   |     `-StmtExpr 0x7fffd8433c58 <line:108:50, line:113:6> 'void'
|       |   |       `-CompoundStmt 0x7fffd8433c40 <line:108:51, line:113:5>
|       |   |         `-IfStmt 0x7fffd8433c08 <line:109:7, line:112:68>
|       |   |           |-<<<NULL>>>
|       |   |           |-<<<NULL>>>
|       |   |           |-BinaryOperator 0x7fffd84338f8 <././stb/stb_truetype.h:4008:23, col:36> 'int' '=='
|       |   |           | |-ImplicitCastExpr 0x7fffd84338e0 <col:23, col:31> 'int' <IntegralCast>
|       |   |           | | `-ImplicitCastExpr 0x7fffd84338c8 <col:23, col:31> 'unsigned char' <LValueToRValue>
|       |   |           | |   `-ArraySubscriptExpr 0x7fffd8433880 <col:23, col:31> 'unsigned char' lvalue
|       |   |           | |     |-ImplicitCastExpr 0x7fffd8433850 <col:23> 'unsigned char *' <LValueToRValue>
|       |   |           | |     | `-DeclRefExpr 0x7fffd8433800 <col:23> 'unsigned char *' lvalue ParmVar 0x7fffd842e0a8 'pixels' 'unsigned char *'
|       |   |           | |     `-ImplicitCastExpr 0x7fffd8433868 <col:30> 'int' <LValueToRValue>
|       |   |           | |       `-DeclRefExpr 0x7fffd8433828 <col:30> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |           | `-IntegerLiteral 0x7fffd84338a8 <col:36> 'int' 0
|       |   |           |-NullStmt 0x7fffd8433920 </usr/include/assert.h:110:9>
|       |   |           `-CallExpr 0x7fffd8433b30 <line:112:9, col:68> 'void'
|       |   |             |-ImplicitCastExpr 0x7fffd8433b18 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|       |   |             | `-DeclRefExpr 0x7fffd8433930 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|       |   |             |-ImplicitCastExpr 0x7fffd8433b90 <<scratch space>:34:1> 'const char *' <BitCast>
|       |   |             | `-ImplicitCastExpr 0x7fffd8433b78 <col:1> 'char *' <ArrayToPointerDecay>
|       |   |             |   `-StringLiteral 0x7fffd8433958 <col:1> 'char [15]' lvalue "pixels[i] == 0"
|       |   |             |-ImplicitCastExpr 0x7fffd8433bc0 <line:35:1> 'const char *' <BitCast>
|       |   |             | `-ImplicitCastExpr 0x7fffd8433ba8 <col:1> 'char *' <ArrayToPointerDecay>
|       |   |             |   `-StringLiteral 0x7fffd8433990 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|       |   |             |-ImplicitCastExpr 0x7fffd8433bd8 <line:36:1> 'unsigned int' <IntegralCast>
|       |   |             | `-IntegerLiteral 0x7fffd84339d0 <col:1> 'int' 4008
|       |   |             `-ImplicitCastExpr 0x7fffd8433bf0 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|       |   |               `-UnaryOperator 0x7fffd8433af8 <col:30, col:44> 'const char [70]' lvalue prefix '__extension__'
|       |   |                 `-PredefinedExpr 0x7fffd8433ad8 <col:44> 'const char [70]' lvalue __PRETTY_FUNCTION__
|       |   |                   `-StringLiteral 0x7fffd8433a68 <col:44> 'const char [70]' lvalue "void stbtt__h_prefilter(unsigned char *, int, int, int, unsigned int)"
|       |   |-CompoundAssignOperator 0x7fffd8433e90 <././stb/stb_truetype.h:4009:10, col:46> 'unsigned int' '-=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|       |   | |-DeclRefExpr 0x7fffd8433ce0 <col:10> 'unsigned int' lvalue Var 0x7fffd842eaa0 'total' 'unsigned int'
|       |   | `-ImplicitCastExpr 0x7fffd8433e78 <col:19, col:46> 'unsigned int' <IntegralCast>
|       |   |   `-ImplicitCastExpr 0x7fffd8433e60 <col:19, col:46> 'unsigned char' <LValueToRValue>
|       |   |     `-ArraySubscriptExpr 0x7fffd8433e38 <col:19, col:46> 'unsigned char' lvalue
|       |   |       |-ImplicitCastExpr 0x7fffd8433e20 <col:19> 'unsigned char *' <ArrayToPointerDecay>
|       |   |       | `-DeclRefExpr 0x7fffd8433d08 <col:19> 'unsigned char [8]' lvalue Var 0x7fffd842e4e0 'buffer' 'unsigned char [8]'
|       |   |       `-BinaryOperator 0x7fffd8433df8 <col:26, line:3953:50> 'int' '&'
|       |   |         |-ImplicitCastExpr 0x7fffd8433de0 <line:4009:26> 'int' <LValueToRValue>
|       |   |         | `-DeclRefExpr 0x7fffd8433d30 <col:26> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |   |         `-ParenExpr 0x7fffd8433dc0 <line:3953:27, col:50> 'int'
|       |   |           `-BinaryOperator 0x7fffd8433d98 <line:1104:32, line:3953:49> 'int' '-'
|       |   |             |-IntegerLiteral 0x7fffd8433d58 <line:1104:32> 'int' 8
|       |   |             `-IntegerLiteral 0x7fffd8433d78 <line:3953:49> 'int' 1
|       |   `-BinaryOperator 0x7fffd84340a8 <line:4010:10, col:59> 'unsigned char' '='
|       |     |-ArraySubscriptExpr 0x7fffd8433f48 <col:10, col:18> 'unsigned char' lvalue
|       |     | |-ImplicitCastExpr 0x7fffd8433f18 <col:10> 'unsigned char *' <LValueToRValue>
|       |     | | `-DeclRefExpr 0x7fffd8433ec8 <col:10> 'unsigned char *' lvalue ParmVar 0x7fffd842e0a8 'pixels' 'unsigned char *'
|       |     | `-ImplicitCastExpr 0x7fffd8433f30 <col:17> 'int' <LValueToRValue>
|       |     |   `-DeclRefExpr 0x7fffd8433ef0 <col:17> 'int' lvalue Var 0x7fffd842ea10 'i' 'int'
|       |     `-CStyleCastExpr 0x7fffd8434080 <col:22, col:59> 'unsigned char' <IntegralCast>
|       |       `-ParenExpr 0x7fffd8434060 <col:38, col:59> 'unsigned int'
|       |         `-BinaryOperator 0x7fffd8433ff0 <col:39, col:47> 'unsigned int' '/'
|       |           |-ImplicitCastExpr 0x7fffd8433fc0 <col:39> 'unsigned int' <LValueToRValue>
|       |           | `-DeclRefExpr 0x7fffd8433f70 <col:39> 'unsigned int' lvalue Var 0x7fffd842eaa0 'total' 'unsigned int'
|       |           `-ImplicitCastExpr 0x7fffd8433fd8 <col:47> 'unsigned int' <LValueToRValue>
|       |             `-DeclRefExpr 0x7fffd8433f98 <col:47> 'unsigned int' lvalue ParmVar 0x7fffd842e288 'kernel_width' 'unsigned int'
|       `-CompoundAssignOperator 0x7fffd8434198 <line:4013:7, col:17> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|         |-DeclRefExpr 0x7fffd8434130 <col:7> 'unsigned char *' lvalue ParmVar 0x7fffd842e0a8 'pixels' 'unsigned char *'
|         `-ImplicitCastExpr 0x7fffd8434180 <col:17> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x7fffd8434158 <col:17> 'int' lvalue ParmVar 0x7fffd842e210 'stride_in_bytes' 'int'
|-FunctionDecl 0x7fffd8434528 <line:4017:1, line:4077:1> line:4017:13 used stbtt__v_prefilter 'void (unsigned char *, int, int, int, unsigned int)' static
| |-ParmVarDecl 0x7fffd84342a0 <col:32, col:47> col:47 used pixels 'unsigned char *'
| |-ParmVarDecl 0x7fffd8434318 <col:55, col:59> col:59 used w 'int'
| |-ParmVarDecl 0x7fffd8434390 <col:62, col:66> col:66 used h 'int'
| |-ParmVarDecl 0x7fffd8434408 <col:69, col:73> col:73 used stride_in_bytes 'int'
| |-ParmVarDecl 0x7fffd8434480 <col:90, col:103> col:103 used kernel_width 'unsigned int'
| `-CompoundStmt 0x7fffd84396a0 <line:4018:1, line:4077:1>
|   |-DeclStmt 0x7fffd8434698 <line:4019:4, col:46>
|   | `-VarDecl 0x7fffd8434638 <col:4, col:45> col:18 used buffer 'unsigned char [8]'
|   |-DeclStmt 0x7fffd8434800 <line:4020:4, col:33>
|   | `-VarDecl 0x7fffd84346c8 <col:4, col:21> col:8 used safe_h 'int' cinit
|   |   `-ImplicitCastExpr 0x7fffd84347e8 <col:17, col:21> 'int' <IntegralCast>
|   |     `-BinaryOperator 0x7fffd84347c0 <col:17, col:21> 'unsigned int' '-'
|   |       |-ImplicitCastExpr 0x7fffd84347a8 <col:17> 'unsigned int' <IntegralCast>
|   |       | `-ImplicitCastExpr 0x7fffd8434778 <col:17> 'int' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x7fffd8434728 <col:17> 'int' lvalue ParmVar 0x7fffd8434390 'h' 'int'
|   |       `-ImplicitCastExpr 0x7fffd8434790 <col:21> 'unsigned int' <LValueToRValue>
|   |         `-DeclRefExpr 0x7fffd8434750 <col:21> 'unsigned int' lvalue ParmVar 0x7fffd8434480 'kernel_width' 'unsigned int'
|   |-DeclStmt 0x7fffd8434890 <line:4021:4, col:9>
|   | `-VarDecl 0x7fffd8434830 <col:4, col:8> col:8 used j 'int'
|   |-CallExpr 0x7fffd8434968 <line:484:31, line:4022:48> 'void *'
|   | |-ImplicitCastExpr 0x7fffd8434950 <line:484:31> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fffd84348a8 <col:31> 'void *(void *, int, unsigned long)' Function 0x7fffd832d138 'memset' 'void *(void *, int, unsigned long)'
|   | |-ImplicitCastExpr 0x7fffd84349c0 <line:4022:17> 'void *' <BitCast>
|   | | `-ImplicitCastExpr 0x7fffd84349a8 <col:17> 'unsigned char *' <ArrayToPointerDecay>
|   | |   `-DeclRefExpr 0x7fffd84348d0 <col:17> 'unsigned char [8]' lvalue Var 0x7fffd8434638 'buffer' 'unsigned char [8]'
|   | |-IntegerLiteral 0x7fffd84348f8 <col:25> 'int' 0
|   | `-ImplicitCastExpr 0x7fffd84349d8 <line:1104:32> 'unsigned long' <IntegralCast>
|   |   `-IntegerLiteral 0x7fffd8434918 <col:32> 'int' 8
|   `-ForStmt 0x7fffd8439668 <line:4023:4, line:4076:4>
|     |-BinaryOperator 0x7fffd8434a38 <line:4023:9, col:11> 'int' '='
|     | |-DeclRefExpr 0x7fffd84349f0 <col:9> 'int' lvalue Var 0x7fffd8434830 'j' 'int'
|     | `-IntegerLiteral 0x7fffd8434a18 <col:11> 'int' 0
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fffd8434af0 <col:14, col:18> 'int' '<'
|     | |-ImplicitCastExpr 0x7fffd8434ac0 <col:14> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fffd8434a60 <col:14> 'int' lvalue Var 0x7fffd8434830 'j' 'int'
|     | `-ImplicitCastExpr 0x7fffd8434ad8 <col:18> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fffd8434a88 <col:18> 'int' lvalue ParmVar 0x7fffd8434318 'w' 'int'
|     |-UnaryOperator 0x7fffd8434b40 <col:21, col:23> 'int' prefix '++'
|     | `-DeclRefExpr 0x7fffd8434b18 <col:23> 'int' lvalue Var 0x7fffd8434830 'j' 'int'
|     `-CompoundStmt 0x7fffd8439620 <col:26, line:4076:4>
|       |-DeclStmt 0x7fffd8434bd8 <line:4024:7, col:12>
|       | `-VarDecl 0x7fffd8434b78 <col:7, col:11> col:11 used i 'int'
|       |-DeclStmt 0x7fffd8434c68 <line:4025:7, col:25>
|       | `-VarDecl 0x7fffd8434c08 <col:7, col:20> col:20 used total 'unsigned int'
|       |-CallExpr 0x7fffd8434d60 <line:484:31, line:4026:43> 'void *'
|       | |-ImplicitCastExpr 0x7fffd8434d48 <line:484:31> 'void *(*)(void *, int, unsigned long)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x7fffd8434c80 <col:31> 'void *(void *, int, unsigned long)' Function 0x7fffd832d138 'memset' 'void *(void *, int, unsigned long)'
|       | |-ImplicitCastExpr 0x7fffd8434db8 <line:4026:20> 'void *' <BitCast>
|       | | `-ImplicitCastExpr 0x7fffd8434da0 <col:20> 'unsigned char *' <ArrayToPointerDecay>
|       | |   `-DeclRefExpr 0x7fffd8434ca8 <col:20> 'unsigned char [8]' lvalue Var 0x7fffd8434638 'buffer' 'unsigned char [8]'
|       | |-IntegerLiteral 0x7fffd8434cd0 <col:28> 'int' 0
|       | `-ImplicitCastExpr 0x7fffd8434de8 <col:31> 'unsigned long' <IntegralCast>
|       |   `-ImplicitCastExpr 0x7fffd8434dd0 <col:31> 'unsigned int' <LValueToRValue>
|       |     `-DeclRefExpr 0x7fffd8434cf0 <col:31> 'unsigned int' lvalue ParmVar 0x7fffd8434480 'kernel_width' 'unsigned int'
|       |-BinaryOperator 0x7fffd8434e60 <line:4028:7, col:15> 'unsigned int' '='
|       | |-DeclRefExpr 0x7fffd8434e00 <col:7> 'unsigned int' lvalue Var 0x7fffd8434c08 'total' 'unsigned int'
|       | `-ImplicitCastExpr 0x7fffd8434e48 <col:15> 'unsigned int' <IntegralCast>
|       |   `-IntegerLiteral 0x7fffd8434e28 <col:15> 'int' 0
|       |-SwitchStmt 0x7fffd8434ec8 <line:4031:7, line:4067:7>
|       | |-<<<NULL>>>
|       | |-<<<NULL>>>
|       | |-ImplicitCastExpr 0x7fffd8434eb0 <line:4031:15> 'unsigned int' <LValueToRValue>
|       | | `-DeclRefExpr 0x7fffd8434e88 <col:15> 'unsigned int' lvalue ParmVar 0x7fffd8434480 'kernel_width' 'unsigned int'
|       | `-CompoundStmt 0x7fffd8438770 <col:29, line:4067:7>
|       |   |-CaseStmt 0x7fffd8434f18 <line:4032:10, line:4037:13>
|       |   | |-ImplicitCastExpr 0x7fffd8438818 <line:4032:15> 'unsigned int' <IntegralCast>
|       |   | | `-IntegerLiteral 0x7fffd8434ef8 <col:15> 'int' 2
|       |   | |-<<<NULL>>>
|       |   | `-ForStmt 0x7fffd8435a08 <line:4033:13, line:4037:13>
|       |   |   |-BinaryOperator 0x7fffd8434f98 <line:4033:18, col:20> 'int' '='
|       |   |   | |-DeclRefExpr 0x7fffd8434f50 <col:18> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |   | `-IntegerLiteral 0x7fffd8434f78 <col:20> 'int' 0
|       |   |   |-<<<NULL>>>
|       |   |   |-BinaryOperator 0x7fffd8435040 <col:23, col:28> 'int' '<='
|       |   |   | |-ImplicitCastExpr 0x7fffd8435010 <col:23> 'int' <LValueToRValue>
|       |   |   | | `-DeclRefExpr 0x7fffd8434fc0 <col:23> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |   | `-ImplicitCastExpr 0x7fffd8435028 <col:28> 'int' <LValueToRValue>
|       |   |   |   `-DeclRefExpr 0x7fffd8434fe8 <col:28> 'int' lvalue Var 0x7fffd84346c8 'safe_h' 'int'
|       |   |   |-UnaryOperator 0x7fffd8435090 <col:36, col:38> 'int' prefix '++'
|       |   |   | `-DeclRefExpr 0x7fffd8435068 <col:38> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |   `-CompoundStmt 0x7fffd84359e0 <col:41, line:4037:13>
|       |   |     |-CompoundAssignOperator 0x7fffd84353e0 <line:4034:16, col:80> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|       |   |     | |-DeclRefExpr 0x7fffd84350b0 <col:16> 'unsigned int' lvalue Var 0x7fffd8434c08 'total' 'unsigned int'
|       |   |     | `-ImplicitCastExpr 0x7fffd84353c8 <col:25, col:80> 'unsigned int' <IntegralCast>
|       |   |     |   `-BinaryOperator 0x7fffd84353a0 <col:25, col:80> 'int' '-'
|       |   |     |     |-ImplicitCastExpr 0x7fffd8435358 <col:25, col:49> 'int' <IntegralCast>
|       |   |     |     | `-ImplicitCastExpr 0x7fffd8435340 <col:25, col:49> 'unsigned char' <LValueToRValue>
|       |   |     |     |   `-ArraySubscriptExpr 0x7fffd84351c0 <col:25, col:49> 'unsigned char' lvalue
|       |   |     |     |     |-ImplicitCastExpr 0x7fffd84351a8 <col:25> 'unsigned char *' <LValueToRValue>
|       |   |     |     |     | `-DeclRefExpr 0x7fffd84350d8 <col:25> 'unsigned char *' lvalue ParmVar 0x7fffd84342a0 'pixels' 'unsigned char *'
|       |   |     |     |     `-BinaryOperator 0x7fffd8435180 <col:32, col:34> 'int' '*'
|       |   |     |     |       |-ImplicitCastExpr 0x7fffd8435150 <col:32> 'int' <LValueToRValue>
|       |   |     |     |       | `-DeclRefExpr 0x7fffd8435100 <col:32> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |     |     |       `-ImplicitCastExpr 0x7fffd8435168 <col:34> 'int' <LValueToRValue>
|       |   |     |     |         `-DeclRefExpr 0x7fffd8435128 <col:34> 'int' lvalue ParmVar 0x7fffd8434408 'stride_in_bytes' 'int'
|       |   |     |     `-ImplicitCastExpr 0x7fffd8435388 <col:53, col:80> 'int' <IntegralCast>
|       |   |     |       `-ImplicitCastExpr 0x7fffd8435370 <col:53, col:80> 'unsigned char' <LValueToRValue>
|       |   |     |         `-ArraySubscriptExpr 0x7fffd8435318 <col:53, col:80> 'unsigned char' lvalue
|       |   |     |           |-ImplicitCastExpr 0x7fffd8435300 <col:53> 'unsigned char *' <ArrayToPointerDecay>
|       |   |     |           | `-DeclRefExpr 0x7fffd84351e8 <col:53> 'unsigned char [8]' lvalue Var 0x7fffd8434638 'buffer' 'unsigned char [8]'
|       |   |     |           `-BinaryOperator 0x7fffd84352d8 <col:60, line:3953:50> 'int' '&'
|       |   |     |             |-ImplicitCastExpr 0x7fffd84352c0 <line:4034:60> 'int' <LValueToRValue>
|       |   |     |             | `-DeclRefExpr 0x7fffd8435210 <col:60> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |     |             `-ParenExpr 0x7fffd84352a0 <line:3953:27, col:50> 'int'
|       |   |     |               `-BinaryOperator 0x7fffd8435278 <line:1104:32, line:3953:49> 'int' '-'
|       |   |     |                 |-IntegerLiteral 0x7fffd8435238 <line:1104:32> 'int' 8
|       |   |     |                 `-IntegerLiteral 0x7fffd8435258 <line:3953:49> 'int' 1
|       |   |     |-BinaryOperator 0x7fffd8435750 <line:4035:16, col:86> 'unsigned char' '='
|       |   |     | |-ArraySubscriptExpr 0x7fffd8435600 <col:16, col:58> 'unsigned char' lvalue
|       |   |     | | |-ImplicitCastExpr 0x7fffd84355e8 <col:16> 'unsigned char *' <ArrayToPointerDecay>
|       |   |     | | | `-DeclRefExpr 0x7fffd8435418 <col:16> 'unsigned char [8]' lvalue Var 0x7fffd8434638 'buffer' 'unsigned char [8]'
|       |   |     | | `-BinaryOperator 0x7fffd84355c0 <col:23, line:3953:50> 'unsigned int' '&'
|       |   |     | |   |-ParenExpr 0x7fffd8435500 <line:4035:23, col:38> 'unsigned int'
|       |   |     | |   | `-BinaryOperator 0x7fffd84354d8 <col:24, col:26> 'unsigned int' '+'
|       |   |     | |   |   |-ImplicitCastExpr 0x7fffd84354c0 <col:24> 'unsigned int' <IntegralCast>
|       |   |     | |   |   | `-ImplicitCastExpr 0x7fffd8435490 <col:24> 'int' <LValueToRValue>
|       |   |     | |   |   |   `-DeclRefExpr 0x7fffd8435440 <col:24> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |     | |   |   `-ImplicitCastExpr 0x7fffd84354a8 <col:26> 'unsigned int' <LValueToRValue>
|       |   |     | |   |     `-DeclRefExpr 0x7fffd8435468 <col:26> 'unsigned int' lvalue ParmVar 0x7fffd8434480 'kernel_width' 'unsigned int'
|       |   |     | |   `-ImplicitCastExpr 0x7fffd84355a8 <line:3953:27, col:50> 'unsigned int' <IntegralCast>
|       |   |     | |     `-ParenExpr 0x7fffd8435588 <col:27, col:50> 'int'
|       |   |     | |       `-BinaryOperator 0x7fffd8435560 <line:1104:32, line:3953:49> 'int' '-'
|       |   |     | |         |-IntegerLiteral 0x7fffd8435520 <line:1104:32> 'int' 8
|       |   |     | |         `-IntegerLiteral 0x7fffd8435540 <line:3953:49> 'int' 1
|       |   |     | `-ImplicitCastExpr 0x7fffd8435738 <line:4035:62, col:86> 'unsigned char' <LValueToRValue>
|       |   |     |   `-ArraySubscriptExpr 0x7fffd8435710 <col:62, col:86> 'unsigned char' lvalue
|       |   |     |     |-ImplicitCastExpr 0x7fffd84356f8 <col:62> 'unsigned char *' <LValueToRValue>
|       |   |     |     | `-DeclRefExpr 0x7fffd8435628 <col:62> 'unsigned char *' lvalue ParmVar 0x7fffd84342a0 'pixels' 'unsigned char *'
|       |   |     |     `-BinaryOperator 0x7fffd84356d0 <col:69, col:71> 'int' '*'
|       |   |     |       |-ImplicitCastExpr 0x7fffd84356a0 <col:69> 'int' <LValueToRValue>
|       |   |     |       | `-DeclRefExpr 0x7fffd8435650 <col:69> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |     |       `-ImplicitCastExpr 0x7fffd84356b8 <col:71> 'int' <LValueToRValue>
|       |   |     |         `-DeclRefExpr 0x7fffd8435678 <col:71> 'int' lvalue ParmVar 0x7fffd8434408 'stride_in_bytes' 'int'
|       |   |     `-BinaryOperator 0x7fffd84359b8 <line:4036:16, col:70> 'unsigned char' '='
|       |   |       |-ArraySubscriptExpr 0x7fffd8435860 <col:16, col:40> 'unsigned char' lvalue
|       |   |       | |-ImplicitCastExpr 0x7fffd8435848 <col:16> 'unsigned char *' <LValueToRValue>
|       |   |       | | `-DeclRefExpr 0x7fffd8435778 <col:16> 'unsigned char *' lvalue ParmVar 0x7fffd84342a0 'pixels' 'unsigned char *'
|       |   |       | `-BinaryOperator 0x7fffd8435820 <col:23, col:25> 'int' '*'
|       |   |       |   |-ImplicitCastExpr 0x7fffd84357f0 <col:23> 'int' <LValueToRValue>
|       |   |       |   | `-DeclRefExpr 0x7fffd84357a0 <col:23> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |       |   `-ImplicitCastExpr 0x7fffd8435808 <col:25> 'int' <LValueToRValue>
|       |   |       |     `-DeclRefExpr 0x7fffd84357c8 <col:25> 'int' lvalue ParmVar 0x7fffd8434408 'stride_in_bytes' 'int'
|       |   |       `-CStyleCastExpr 0x7fffd8435990 <col:44, col:70> 'unsigned char' <IntegralCast>
|       |   |         `-ParenExpr 0x7fffd8435970 <col:60, col:70> 'unsigned int'
|       |   |           `-BinaryOperator 0x7fffd8435900 <col:61, col:69> 'unsigned int' '/'
|       |   |             |-ImplicitCastExpr 0x7fffd84358d0 <col:61> 'unsigned int' <LValueToRValue>
|       |   |             | `-DeclRefExpr 0x7fffd8435888 <col:61> 'unsigned int' lvalue Var 0x7fffd8434c08 'total' 'unsigned int'
|       |   |             `-ImplicitCastExpr 0x7fffd84358e8 <col:69> 'unsigned int' <IntegralCast>
|       |   |               `-IntegerLiteral 0x7fffd84358b0 <col:69> 'int' 2
|       |   |-BreakStmt 0x7fffd8435a40 <line:4038:13>
|       |   |-CaseStmt 0x7fffd8435a68 <line:4039:10, line:4044:13>
|       |   | |-ImplicitCastExpr 0x7fffd8438800 <line:4039:15> 'unsigned int' <IntegralCast>
|       |   | | `-IntegerLiteral 0x7fffd8435a48 <col:15> 'int' 3
|       |   | |-<<<NULL>>>
|       |   | `-ForStmt 0x7fffd8436558 <line:4040:13, line:4044:13>
|       |   |   |-BinaryOperator 0x7fffd8435ae8 <line:4040:18, col:20> 'int' '='
|       |   |   | |-DeclRefExpr 0x7fffd8435aa0 <col:18> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |   | `-IntegerLiteral 0x7fffd8435ac8 <col:20> 'int' 0
|       |   |   |-<<<NULL>>>
|       |   |   |-BinaryOperator 0x7fffd8435b90 <col:23, col:28> 'int' '<='
|       |   |   | |-ImplicitCastExpr 0x7fffd8435b60 <col:23> 'int' <LValueToRValue>
|       |   |   | | `-DeclRefExpr 0x7fffd8435b10 <col:23> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |   | `-ImplicitCastExpr 0x7fffd8435b78 <col:28> 'int' <LValueToRValue>
|       |   |   |   `-DeclRefExpr 0x7fffd8435b38 <col:28> 'int' lvalue Var 0x7fffd84346c8 'safe_h' 'int'
|       |   |   |-UnaryOperator 0x7fffd8435be0 <col:36, col:38> 'int' prefix '++'
|       |   |   | `-DeclRefExpr 0x7fffd8435bb8 <col:38> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |   `-CompoundStmt 0x7fffd8436530 <col:41, line:4044:13>
|       |   |     |-CompoundAssignOperator 0x7fffd8435f30 <line:4041:16, col:80> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|       |   |     | |-DeclRefExpr 0x7fffd8435c00 <col:16> 'unsigned int' lvalue Var 0x7fffd8434c08 'total' 'unsigned int'
|       |   |     | `-ImplicitCastExpr 0x7fffd8435f18 <col:25, col:80> 'unsigned int' <IntegralCast>
|       |   |     |   `-BinaryOperator 0x7fffd8435ef0 <col:25, col:80> 'int' '-'
|       |   |     |     |-ImplicitCastExpr 0x7fffd8435ea8 <col:25, col:49> 'int' <IntegralCast>
|       |   |     |     | `-ImplicitCastExpr 0x7fffd8435e90 <col:25, col:49> 'unsigned char' <LValueToRValue>
|       |   |     |     |   `-ArraySubscriptExpr 0x7fffd8435d10 <col:25, col:49> 'unsigned char' lvalue
|       |   |     |     |     |-ImplicitCastExpr 0x7fffd8435cf8 <col:25> 'unsigned char *' <LValueToRValue>
|       |   |     |     |     | `-DeclRefExpr 0x7fffd8435c28 <col:25> 'unsigned char *' lvalue ParmVar 0x7fffd84342a0 'pixels' 'unsigned char *'
|       |   |     |     |     `-BinaryOperator 0x7fffd8435cd0 <col:32, col:34> 'int' '*'
|       |   |     |     |       |-ImplicitCastExpr 0x7fffd8435ca0 <col:32> 'int' <LValueToRValue>
|       |   |     |     |       | `-DeclRefExpr 0x7fffd8435c50 <col:32> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |     |     |       `-ImplicitCastExpr 0x7fffd8435cb8 <col:34> 'int' <LValueToRValue>
|       |   |     |     |         `-DeclRefExpr 0x7fffd8435c78 <col:34> 'int' lvalue ParmVar 0x7fffd8434408 'stride_in_bytes' 'int'
|       |   |     |     `-ImplicitCastExpr 0x7fffd8435ed8 <col:53, col:80> 'int' <IntegralCast>
|       |   |     |       `-ImplicitCastExpr 0x7fffd8435ec0 <col:53, col:80> 'unsigned char' <LValueToRValue>
|       |   |     |         `-ArraySubscriptExpr 0x7fffd8435e68 <col:53, col:80> 'unsigned char' lvalue
|       |   |     |           |-ImplicitCastExpr 0x7fffd8435e50 <col:53> 'unsigned char *' <ArrayToPointerDecay>
|       |   |     |           | `-DeclRefExpr 0x7fffd8435d38 <col:53> 'unsigned char [8]' lvalue Var 0x7fffd8434638 'buffer' 'unsigned char [8]'
|       |   |     |           `-BinaryOperator 0x7fffd8435e28 <col:60, line:3953:50> 'int' '&'
|       |   |     |             |-ImplicitCastExpr 0x7fffd8435e10 <line:4041:60> 'int' <LValueToRValue>
|       |   |     |             | `-DeclRefExpr 0x7fffd8435d60 <col:60> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |     |             `-ParenExpr 0x7fffd8435df0 <line:3953:27, col:50> 'int'
|       |   |     |               `-BinaryOperator 0x7fffd8435dc8 <line:1104:32, line:3953:49> 'int' '-'
|       |   |     |                 |-IntegerLiteral 0x7fffd8435d88 <line:1104:32> 'int' 8
|       |   |     |                 `-IntegerLiteral 0x7fffd8435da8 <line:3953:49> 'int' 1
|       |   |     |-BinaryOperator 0x7fffd84362a0 <line:4042:16, col:86> 'unsigned char' '='
|       |   |     | |-ArraySubscriptExpr 0x7fffd8436150 <col:16, col:58> 'unsigned char' lvalue
|       |   |     | | |-ImplicitCastExpr 0x7fffd8436138 <col:16> 'unsigned char *' <ArrayToPointerDecay>
|       |   |     | | | `-DeclRefExpr 0x7fffd8435f68 <col:16> 'unsigned char [8]' lvalue Var 0x7fffd8434638 'buffer' 'unsigned char [8]'
|       |   |     | | `-BinaryOperator 0x7fffd8436110 <col:23, line:3953:50> 'unsigned int' '&'
|       |   |     | |   |-ParenExpr 0x7fffd8436050 <line:4042:23, col:38> 'unsigned int'
|       |   |     | |   | `-BinaryOperator 0x7fffd8436028 <col:24, col:26> 'unsigned int' '+'
|       |   |     | |   |   |-ImplicitCastExpr 0x7fffd8436010 <col:24> 'unsigned int' <IntegralCast>
|       |   |     | |   |   | `-ImplicitCastExpr 0x7fffd8435fe0 <col:24> 'int' <LValueToRValue>
|       |   |     | |   |   |   `-DeclRefExpr 0x7fffd8435f90 <col:24> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |     | |   |   `-ImplicitCastExpr 0x7fffd8435ff8 <col:26> 'unsigned int' <LValueToRValue>
|       |   |     | |   |     `-DeclRefExpr 0x7fffd8435fb8 <col:26> 'unsigned int' lvalue ParmVar 0x7fffd8434480 'kernel_width' 'unsigned int'
|       |   |     | |   `-ImplicitCastExpr 0x7fffd84360f8 <line:3953:27, col:50> 'unsigned int' <IntegralCast>
|       |   |     | |     `-ParenExpr 0x7fffd84360d8 <col:27, col:50> 'int'
|       |   |     | |       `-BinaryOperator 0x7fffd84360b0 <line:1104:32, line:3953:49> 'int' '-'
|       |   |     | |         |-IntegerLiteral 0x7fffd8436070 <line:1104:32> 'int' 8
|       |   |     | |         `-IntegerLiteral 0x7fffd8436090 <line:3953:49> 'int' 1
|       |   |     | `-ImplicitCastExpr 0x7fffd8436288 <line:4042:62, col:86> 'unsigned char' <LValueToRValue>
|       |   |     |   `-ArraySubscriptExpr 0x7fffd8436260 <col:62, col:86> 'unsigned char' lvalue
|       |   |     |     |-ImplicitCastExpr 0x7fffd8436248 <col:62> 'unsigned char *' <LValueToRValue>
|       |   |     |     | `-DeclRefExpr 0x7fffd8436178 <col:62> 'unsigned char *' lvalue ParmVar 0x7fffd84342a0 'pixels' 'unsigned char *'
|       |   |     |     `-BinaryOperator 0x7fffd8436220 <col:69, col:71> 'int' '*'
|       |   |     |       |-ImplicitCastExpr 0x7fffd84361f0 <col:69> 'int' <LValueToRValue>
|       |   |     |       | `-DeclRefExpr 0x7fffd84361a0 <col:69> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |     |       `-ImplicitCastExpr 0x7fffd8436208 <col:71> 'int' <LValueToRValue>
|       |   |     |         `-DeclRefExpr 0x7fffd84361c8 <col:71> 'int' lvalue ParmVar 0x7fffd8434408 'stride_in_bytes' 'int'
|       |   |     `-BinaryOperator 0x7fffd8436508 <line:4043:16, col:70> 'unsigned char' '='
|       |   |       |-ArraySubscriptExpr 0x7fffd84363b0 <col:16, col:40> 'unsigned char' lvalue
|       |   |       | |-ImplicitCastExpr 0x7fffd8436398 <col:16> 'unsigned char *' <LValueToRValue>
|       |   |       | | `-DeclRefExpr 0x7fffd84362c8 <col:16> 'unsigned char *' lvalue ParmVar 0x7fffd84342a0 'pixels' 'unsigned char *'
|       |   |       | `-BinaryOperator 0x7fffd8436370 <col:23, col:25> 'int' '*'
|       |   |       |   |-ImplicitCastExpr 0x7fffd8436340 <col:23> 'int' <LValueToRValue>
|       |   |       |   | `-DeclRefExpr 0x7fffd84362f0 <col:23> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |       |   `-ImplicitCastExpr 0x7fffd8436358 <col:25> 'int' <LValueToRValue>
|       |   |       |     `-DeclRefExpr 0x7fffd8436318 <col:25> 'int' lvalue ParmVar 0x7fffd8434408 'stride_in_bytes' 'int'
|       |   |       `-CStyleCastExpr 0x7fffd84364e0 <col:44, col:70> 'unsigned char' <IntegralCast>
|       |   |         `-ParenExpr 0x7fffd84364c0 <col:60, col:70> 'unsigned int'
|       |   |           `-BinaryOperator 0x7fffd8436450 <col:61, col:69> 'unsigned int' '/'
|       |   |             |-ImplicitCastExpr 0x7fffd8436420 <col:61> 'unsigned int' <LValueToRValue>
|       |   |             | `-DeclRefExpr 0x7fffd84363d8 <col:61> 'unsigned int' lvalue Var 0x7fffd8434c08 'total' 'unsigned int'
|       |   |             `-ImplicitCastExpr 0x7fffd8436438 <col:69> 'unsigned int' <IntegralCast>
|       |   |               `-IntegerLiteral 0x7fffd8436400 <col:69> 'int' 3
|       |   |-BreakStmt 0x7fffd8436590 <line:4045:13>
|       |   |-CaseStmt 0x7fffd84365b8 <line:4046:10, line:4051:13>
|       |   | |-ImplicitCastExpr 0x7fffd84387e8 <line:4046:15> 'unsigned int' <IntegralCast>
|       |   | | `-IntegerLiteral 0x7fffd8436598 <col:15> 'int' 4
|       |   | |-<<<NULL>>>
|       |   | `-ForStmt 0x7fffd84370c0 <line:4047:13, line:4051:13>
|       |   |   |-BinaryOperator 0x7fffd8436638 <line:4047:18, col:20> 'int' '='
|       |   |   | |-DeclRefExpr 0x7fffd84365f0 <col:18> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |   | `-IntegerLiteral 0x7fffd8436618 <col:20> 'int' 0
|       |   |   |-<<<NULL>>>
|       |   |   |-BinaryOperator 0x7fffd84366e0 <col:23, col:28> 'int' '<='
|       |   |   | |-ImplicitCastExpr 0x7fffd84366b0 <col:23> 'int' <LValueToRValue>
|       |   |   | | `-DeclRefExpr 0x7fffd8436660 <col:23> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |   | `-ImplicitCastExpr 0x7fffd84366c8 <col:28> 'int' <LValueToRValue>
|       |   |   |   `-DeclRefExpr 0x7fffd8436688 <col:28> 'int' lvalue Var 0x7fffd84346c8 'safe_h' 'int'
|       |   |   |-UnaryOperator 0x7fffd8436730 <col:36, col:38> 'int' prefix '++'
|       |   |   | `-DeclRefExpr 0x7fffd8436708 <col:38> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |   `-CompoundStmt 0x7fffd8437098 <col:41, line:4051:13>
|       |   |     |-CompoundAssignOperator 0x7fffd8436a80 <line:4048:16, col:80> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|       |   |     | |-DeclRefExpr 0x7fffd8436750 <col:16> 'unsigned int' lvalue Var 0x7fffd8434c08 'total' 'unsigned int'
|       |   |     | `-ImplicitCastExpr 0x7fffd8436a68 <col:25, col:80> 'unsigned int' <IntegralCast>
|       |   |     |   `-BinaryOperator 0x7fffd8436a40 <col:25, col:80> 'int' '-'
|       |   |     |     |-ImplicitCastExpr 0x7fffd84369f8 <col:25, col:49> 'int' <IntegralCast>
|       |   |     |     | `-ImplicitCastExpr 0x7fffd84369e0 <col:25, col:49> 'unsigned char' <LValueToRValue>
|       |   |     |     |   `-ArraySubscriptExpr 0x7fffd8436860 <col:25, col:49> 'unsigned char' lvalue
|       |   |     |     |     |-ImplicitCastExpr 0x7fffd8436848 <col:25> 'unsigned char *' <LValueToRValue>
|       |   |     |     |     | `-DeclRefExpr 0x7fffd8436778 <col:25> 'unsigned char *' lvalue ParmVar 0x7fffd84342a0 'pixels' 'unsigned char *'
|       |   |     |     |     `-BinaryOperator 0x7fffd8436820 <col:32, col:34> 'int' '*'
|       |   |     |     |       |-ImplicitCastExpr 0x7fffd84367f0 <col:32> 'int' <LValueToRValue>
|       |   |     |     |       | `-DeclRefExpr 0x7fffd84367a0 <col:32> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |     |     |       `-ImplicitCastExpr 0x7fffd8436808 <col:34> 'int' <LValueToRValue>
|       |   |     |     |         `-DeclRefExpr 0x7fffd84367c8 <col:34> 'int' lvalue ParmVar 0x7fffd8434408 'stride_in_bytes' 'int'
|       |   |     |     `-ImplicitCastExpr 0x7fffd8436a28 <col:53, col:80> 'int' <IntegralCast>
|       |   |     |       `-ImplicitCastExpr 0x7fffd8436a10 <col:53, col:80> 'unsigned char' <LValueToRValue>
|       |   |     |         `-ArraySubscriptExpr 0x7fffd84369b8 <col:53, col:80> 'unsigned char' lvalue
|       |   |     |           |-ImplicitCastExpr 0x7fffd84369a0 <col:53> 'unsigned char *' <ArrayToPointerDecay>
|       |   |     |           | `-DeclRefExpr 0x7fffd8436888 <col:53> 'unsigned char [8]' lvalue Var 0x7fffd8434638 'buffer' 'unsigned char [8]'
|       |   |     |           `-BinaryOperator 0x7fffd8436978 <col:60, line:3953:50> 'int' '&'
|       |   |     |             |-ImplicitCastExpr 0x7fffd8436960 <line:4048:60> 'int' <LValueToRValue>
|       |   |     |             | `-DeclRefExpr 0x7fffd84368b0 <col:60> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |     |             `-ParenExpr 0x7fffd8436940 <line:3953:27, col:50> 'int'
|       |   |     |               `-BinaryOperator 0x7fffd8436918 <line:1104:32, line:3953:49> 'int' '-'
|       |   |     |                 |-IntegerLiteral 0x7fffd84368d8 <line:1104:32> 'int' 8
|       |   |     |                 `-IntegerLiteral 0x7fffd84368f8 <line:3953:49> 'int' 1
|       |   |     |-BinaryOperator 0x7fffd8436e08 <line:4049:16, col:86> 'unsigned char' '='
|       |   |     | |-ArraySubscriptExpr 0x7fffd8436cb8 <col:16, col:58> 'unsigned char' lvalue
|       |   |     | | |-ImplicitCastExpr 0x7fffd8436ca0 <col:16> 'unsigned char *' <ArrayToPointerDecay>
|       |   |     | | | `-DeclRefExpr 0x7fffd8436ad0 <col:16> 'unsigned char [8]' lvalue Var 0x7fffd8434638 'buffer' 'unsigned char [8]'
|       |   |     | | `-BinaryOperator 0x7fffd8436c78 <col:23, line:3953:50> 'unsigned int' '&'
|       |   |     | |   |-ParenExpr 0x7fffd8436bb8 <line:4049:23, col:38> 'unsigned int'
|       |   |     | |   | `-BinaryOperator 0x7fffd8436b90 <col:24, col:26> 'unsigned int' '+'
|       |   |     | |   |   |-ImplicitCastExpr 0x7fffd8436b78 <col:24> 'unsigned int' <IntegralCast>
|       |   |     | |   |   | `-ImplicitCastExpr 0x7fffd8436b48 <col:24> 'int' <LValueToRValue>
|       |   |     | |   |   |   `-DeclRefExpr 0x7fffd8436af8 <col:24> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |     | |   |   `-ImplicitCastExpr 0x7fffd8436b60 <col:26> 'unsigned int' <LValueToRValue>
|       |   |     | |   |     `-DeclRefExpr 0x7fffd8436b20 <col:26> 'unsigned int' lvalue ParmVar 0x7fffd8434480 'kernel_width' 'unsigned int'
|       |   |     | |   `-ImplicitCastExpr 0x7fffd8436c60 <line:3953:27, col:50> 'unsigned int' <IntegralCast>
|       |   |     | |     `-ParenExpr 0x7fffd8436c40 <col:27, col:50> 'int'
|       |   |     | |       `-BinaryOperator 0x7fffd8436c18 <line:1104:32, line:3953:49> 'int' '-'
|       |   |     | |         |-IntegerLiteral 0x7fffd8436bd8 <line:1104:32> 'int' 8
|       |   |     | |         `-IntegerLiteral 0x7fffd8436bf8 <line:3953:49> 'int' 1
|       |   |     | `-ImplicitCastExpr 0x7fffd8436df0 <line:4049:62, col:86> 'unsigned char' <LValueToRValue>
|       |   |     |   `-ArraySubscriptExpr 0x7fffd8436dc8 <col:62, col:86> 'unsigned char' lvalue
|       |   |     |     |-ImplicitCastExpr 0x7fffd8436db0 <col:62> 'unsigned char *' <LValueToRValue>
|       |   |     |     | `-DeclRefExpr 0x7fffd8436ce0 <col:62> 'unsigned char *' lvalue ParmVar 0x7fffd84342a0 'pixels' 'unsigned char *'
|       |   |     |     `-BinaryOperator 0x7fffd8436d88 <col:69, col:71> 'int' '*'
|       |   |     |       |-ImplicitCastExpr 0x7fffd8436d58 <col:69> 'int' <LValueToRValue>
|       |   |     |       | `-DeclRefExpr 0x7fffd8436d08 <col:69> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |     |       `-ImplicitCastExpr 0x7fffd8436d70 <col:71> 'int' <LValueToRValue>
|       |   |     |         `-DeclRefExpr 0x7fffd8436d30 <col:71> 'int' lvalue ParmVar 0x7fffd8434408 'stride_in_bytes' 'int'
|       |   |     `-BinaryOperator 0x7fffd8437070 <line:4050:16, col:70> 'unsigned char' '='
|       |   |       |-ArraySubscriptExpr 0x7fffd8436f18 <col:16, col:40> 'unsigned char' lvalue
|       |   |       | |-ImplicitCastExpr 0x7fffd8436f00 <col:16> 'unsigned char *' <LValueToRValue>
|       |   |       | | `-DeclRefExpr 0x7fffd8436e30 <col:16> 'unsigned char *' lvalue ParmVar 0x7fffd84342a0 'pixels' 'unsigned char *'
|       |   |       | `-BinaryOperator 0x7fffd8436ed8 <col:23, col:25> 'int' '*'
|       |   |       |   |-ImplicitCastExpr 0x7fffd8436ea8 <col:23> 'int' <LValueToRValue>
|       |   |       |   | `-DeclRefExpr 0x7fffd8436e58 <col:23> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |       |   `-ImplicitCastExpr 0x7fffd8436ec0 <col:25> 'int' <LValueToRValue>
|       |   |       |     `-DeclRefExpr 0x7fffd8436e80 <col:25> 'int' lvalue ParmVar 0x7fffd8434408 'stride_in_bytes' 'int'
|       |   |       `-CStyleCastExpr 0x7fffd8437048 <col:44, col:70> 'unsigned char' <IntegralCast>
|       |   |         `-ParenExpr 0x7fffd8437028 <col:60, col:70> 'unsigned int'
|       |   |           `-BinaryOperator 0x7fffd8436fb8 <col:61, col:69> 'unsigned int' '/'
|       |   |             |-ImplicitCastExpr 0x7fffd8436f88 <col:61> 'unsigned int' <LValueToRValue>
|       |   |             | `-DeclRefExpr 0x7fffd8436f40 <col:61> 'unsigned int' lvalue Var 0x7fffd8434c08 'total' 'unsigned int'
|       |   |             `-ImplicitCastExpr 0x7fffd8436fa0 <col:69> 'unsigned int' <IntegralCast>
|       |   |               `-IntegerLiteral 0x7fffd8436f68 <col:69> 'int' 4
|       |   |-BreakStmt 0x7fffd84370f8 <line:4052:13>
|       |   |-CaseStmt 0x7fffd8437120 <line:4053:10, line:4058:13>
|       |   | |-ImplicitCastExpr 0x7fffd84387d0 <line:4053:15> 'unsigned int' <IntegralCast>
|       |   | | `-IntegerLiteral 0x7fffd8437100 <col:15> 'int' 5
|       |   | |-<<<NULL>>>
|       |   | `-ForStmt 0x7fffd8437c10 <line:4054:13, line:4058:13>
|       |   |   |-BinaryOperator 0x7fffd84371a0 <line:4054:18, col:20> 'int' '='
|       |   |   | |-DeclRefExpr 0x7fffd8437158 <col:18> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |   | `-IntegerLiteral 0x7fffd8437180 <col:20> 'int' 0
|       |   |   |-<<<NULL>>>
|       |   |   |-BinaryOperator 0x7fffd8437248 <col:23, col:28> 'int' '<='
|       |   |   | |-ImplicitCastExpr 0x7fffd8437218 <col:23> 'int' <LValueToRValue>
|       |   |   | | `-DeclRefExpr 0x7fffd84371c8 <col:23> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |   | `-ImplicitCastExpr 0x7fffd8437230 <col:28> 'int' <LValueToRValue>
|       |   |   |   `-DeclRefExpr 0x7fffd84371f0 <col:28> 'int' lvalue Var 0x7fffd84346c8 'safe_h' 'int'
|       |   |   |-UnaryOperator 0x7fffd8437298 <col:36, col:38> 'int' prefix '++'
|       |   |   | `-DeclRefExpr 0x7fffd8437270 <col:38> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |   `-CompoundStmt 0x7fffd8437be8 <col:41, line:4058:13>
|       |   |     |-CompoundAssignOperator 0x7fffd84375e8 <line:4055:16, col:80> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|       |   |     | |-DeclRefExpr 0x7fffd84372b8 <col:16> 'unsigned int' lvalue Var 0x7fffd8434c08 'total' 'unsigned int'
|       |   |     | `-ImplicitCastExpr 0x7fffd84375d0 <col:25, col:80> 'unsigned int' <IntegralCast>
|       |   |     |   `-BinaryOperator 0x7fffd84375a8 <col:25, col:80> 'int' '-'
|       |   |     |     |-ImplicitCastExpr 0x7fffd8437560 <col:25, col:49> 'int' <IntegralCast>
|       |   |     |     | `-ImplicitCastExpr 0x7fffd8437548 <col:25, col:49> 'unsigned char' <LValueToRValue>
|       |   |     |     |   `-ArraySubscriptExpr 0x7fffd84373c8 <col:25, col:49> 'unsigned char' lvalue
|       |   |     |     |     |-ImplicitCastExpr 0x7fffd84373b0 <col:25> 'unsigned char *' <LValueToRValue>
|       |   |     |     |     | `-DeclRefExpr 0x7fffd84372e0 <col:25> 'unsigned char *' lvalue ParmVar 0x7fffd84342a0 'pixels' 'unsigned char *'
|       |   |     |     |     `-BinaryOperator 0x7fffd8437388 <col:32, col:34> 'int' '*'
|       |   |     |     |       |-ImplicitCastExpr 0x7fffd8437358 <col:32> 'int' <LValueToRValue>
|       |   |     |     |       | `-DeclRefExpr 0x7fffd8437308 <col:32> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |     |     |       `-ImplicitCastExpr 0x7fffd8437370 <col:34> 'int' <LValueToRValue>
|       |   |     |     |         `-DeclRefExpr 0x7fffd8437330 <col:34> 'int' lvalue ParmVar 0x7fffd8434408 'stride_in_bytes' 'int'
|       |   |     |     `-ImplicitCastExpr 0x7fffd8437590 <col:53, col:80> 'int' <IntegralCast>
|       |   |     |       `-ImplicitCastExpr 0x7fffd8437578 <col:53, col:80> 'unsigned char' <LValueToRValue>
|       |   |     |         `-ArraySubscriptExpr 0x7fffd8437520 <col:53, col:80> 'unsigned char' lvalue
|       |   |     |           |-ImplicitCastExpr 0x7fffd8437508 <col:53> 'unsigned char *' <ArrayToPointerDecay>
|       |   |     |           | `-DeclRefExpr 0x7fffd84373f0 <col:53> 'unsigned char [8]' lvalue Var 0x7fffd8434638 'buffer' 'unsigned char [8]'
|       |   |     |           `-BinaryOperator 0x7fffd84374e0 <col:60, line:3953:50> 'int' '&'
|       |   |     |             |-ImplicitCastExpr 0x7fffd84374c8 <line:4055:60> 'int' <LValueToRValue>
|       |   |     |             | `-DeclRefExpr 0x7fffd8437418 <col:60> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |     |             `-ParenExpr 0x7fffd84374a8 <line:3953:27, col:50> 'int'
|       |   |     |               `-BinaryOperator 0x7fffd8437480 <line:1104:32, line:3953:49> 'int' '-'
|       |   |     |                 |-IntegerLiteral 0x7fffd8437440 <line:1104:32> 'int' 8
|       |   |     |                 `-IntegerLiteral 0x7fffd8437460 <line:3953:49> 'int' 1
|       |   |     |-BinaryOperator 0x7fffd8437958 <line:4056:16, col:86> 'unsigned char' '='
|       |   |     | |-ArraySubscriptExpr 0x7fffd8437808 <col:16, col:58> 'unsigned char' lvalue
|       |   |     | | |-ImplicitCastExpr 0x7fffd84377f0 <col:16> 'unsigned char *' <ArrayToPointerDecay>
|       |   |     | | | `-DeclRefExpr 0x7fffd8437620 <col:16> 'unsigned char [8]' lvalue Var 0x7fffd8434638 'buffer' 'unsigned char [8]'
|       |   |     | | `-BinaryOperator 0x7fffd84377c8 <col:23, line:3953:50> 'unsigned int' '&'
|       |   |     | |   |-ParenExpr 0x7fffd8437708 <line:4056:23, col:38> 'unsigned int'
|       |   |     | |   | `-BinaryOperator 0x7fffd84376e0 <col:24, col:26> 'unsigned int' '+'
|       |   |     | |   |   |-ImplicitCastExpr 0x7fffd84376c8 <col:24> 'unsigned int' <IntegralCast>
|       |   |     | |   |   | `-ImplicitCastExpr 0x7fffd8437698 <col:24> 'int' <LValueToRValue>
|       |   |     | |   |   |   `-DeclRefExpr 0x7fffd8437648 <col:24> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |     | |   |   `-ImplicitCastExpr 0x7fffd84376b0 <col:26> 'unsigned int' <LValueToRValue>
|       |   |     | |   |     `-DeclRefExpr 0x7fffd8437670 <col:26> 'unsigned int' lvalue ParmVar 0x7fffd8434480 'kernel_width' 'unsigned int'
|       |   |     | |   `-ImplicitCastExpr 0x7fffd84377b0 <line:3953:27, col:50> 'unsigned int' <IntegralCast>
|       |   |     | |     `-ParenExpr 0x7fffd8437790 <col:27, col:50> 'int'
|       |   |     | |       `-BinaryOperator 0x7fffd8437768 <line:1104:32, line:3953:49> 'int' '-'
|       |   |     | |         |-IntegerLiteral 0x7fffd8437728 <line:1104:32> 'int' 8
|       |   |     | |         `-IntegerLiteral 0x7fffd8437748 <line:3953:49> 'int' 1
|       |   |     | `-ImplicitCastExpr 0x7fffd8437940 <line:4056:62, col:86> 'unsigned char' <LValueToRValue>
|       |   |     |   `-ArraySubscriptExpr 0x7fffd8437918 <col:62, col:86> 'unsigned char' lvalue
|       |   |     |     |-ImplicitCastExpr 0x7fffd8437900 <col:62> 'unsigned char *' <LValueToRValue>
|       |   |     |     | `-DeclRefExpr 0x7fffd8437830 <col:62> 'unsigned char *' lvalue ParmVar 0x7fffd84342a0 'pixels' 'unsigned char *'
|       |   |     |     `-BinaryOperator 0x7fffd84378d8 <col:69, col:71> 'int' '*'
|       |   |     |       |-ImplicitCastExpr 0x7fffd84378a8 <col:69> 'int' <LValueToRValue>
|       |   |     |       | `-DeclRefExpr 0x7fffd8437858 <col:69> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |     |       `-ImplicitCastExpr 0x7fffd84378c0 <col:71> 'int' <LValueToRValue>
|       |   |     |         `-DeclRefExpr 0x7fffd8437880 <col:71> 'int' lvalue ParmVar 0x7fffd8434408 'stride_in_bytes' 'int'
|       |   |     `-BinaryOperator 0x7fffd8437bc0 <line:4057:16, col:70> 'unsigned char' '='
|       |   |       |-ArraySubscriptExpr 0x7fffd8437a68 <col:16, col:40> 'unsigned char' lvalue
|       |   |       | |-ImplicitCastExpr 0x7fffd8437a50 <col:16> 'unsigned char *' <LValueToRValue>
|       |   |       | | `-DeclRefExpr 0x7fffd8437980 <col:16> 'unsigned char *' lvalue ParmVar 0x7fffd84342a0 'pixels' 'unsigned char *'
|       |   |       | `-BinaryOperator 0x7fffd8437a28 <col:23, col:25> 'int' '*'
|       |   |       |   |-ImplicitCastExpr 0x7fffd84379f8 <col:23> 'int' <LValueToRValue>
|       |   |       |   | `-DeclRefExpr 0x7fffd84379a8 <col:23> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |       |   `-ImplicitCastExpr 0x7fffd8437a10 <col:25> 'int' <LValueToRValue>
|       |   |       |     `-DeclRefExpr 0x7fffd84379d0 <col:25> 'int' lvalue ParmVar 0x7fffd8434408 'stride_in_bytes' 'int'
|       |   |       `-CStyleCastExpr 0x7fffd8437b98 <col:44, col:70> 'unsigned char' <IntegralCast>
|       |   |         `-ParenExpr 0x7fffd8437b78 <col:60, col:70> 'unsigned int'
|       |   |           `-BinaryOperator 0x7fffd8437b08 <col:61, col:69> 'unsigned int' '/'
|       |   |             |-ImplicitCastExpr 0x7fffd8437ad8 <col:61> 'unsigned int' <LValueToRValue>
|       |   |             | `-DeclRefExpr 0x7fffd8437a90 <col:61> 'unsigned int' lvalue Var 0x7fffd8434c08 'total' 'unsigned int'
|       |   |             `-ImplicitCastExpr 0x7fffd8437af0 <col:69> 'unsigned int' <IntegralCast>
|       |   |               `-IntegerLiteral 0x7fffd8437ab8 <col:69> 'int' 5
|       |   |-BreakStmt 0x7fffd8437c48 <line:4059:13>
|       |   |-DefaultStmt 0x7fffd8438748 <line:4060:10, line:4065:13>
|       |   | `-ForStmt 0x7fffd8438710 <line:4061:13, line:4065:13>
|       |   |   |-BinaryOperator 0x7fffd8437c98 <line:4061:18, col:20> 'int' '='
|       |   |   | |-DeclRefExpr 0x7fffd8437c50 <col:18> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |   | `-IntegerLiteral 0x7fffd8437c78 <col:20> 'int' 0
|       |   |   |-<<<NULL>>>
|       |   |   |-BinaryOperator 0x7fffd8437d40 <col:23, col:28> 'int' '<='
|       |   |   | |-ImplicitCastExpr 0x7fffd8437d10 <col:23> 'int' <LValueToRValue>
|       |   |   | | `-DeclRefExpr 0x7fffd8437cc0 <col:23> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |   | `-ImplicitCastExpr 0x7fffd8437d28 <col:28> 'int' <LValueToRValue>
|       |   |   |   `-DeclRefExpr 0x7fffd8437ce8 <col:28> 'int' lvalue Var 0x7fffd84346c8 'safe_h' 'int'
|       |   |   |-UnaryOperator 0x7fffd8437d90 <col:36, col:38> 'int' prefix '++'
|       |   |   | `-DeclRefExpr 0x7fffd8437d68 <col:38> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |   `-CompoundStmt 0x7fffd84386e8 <col:41, line:4065:13>
|       |   |     |-CompoundAssignOperator 0x7fffd84380e0 <line:4062:16, col:80> 'unsigned int' '+=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|       |   |     | |-DeclRefExpr 0x7fffd8437db0 <col:16> 'unsigned int' lvalue Var 0x7fffd8434c08 'total' 'unsigned int'
|       |   |     | `-ImplicitCastExpr 0x7fffd84380c8 <col:25, col:80> 'unsigned int' <IntegralCast>
|       |   |     |   `-BinaryOperator 0x7fffd84380a0 <col:25, col:80> 'int' '-'
|       |   |     |     |-ImplicitCastExpr 0x7fffd8438058 <col:25, col:49> 'int' <IntegralCast>
|       |   |     |     | `-ImplicitCastExpr 0x7fffd8438040 <col:25, col:49> 'unsigned char' <LValueToRValue>
|       |   |     |     |   `-ArraySubscriptExpr 0x7fffd8437ec0 <col:25, col:49> 'unsigned char' lvalue
|       |   |     |     |     |-ImplicitCastExpr 0x7fffd8437ea8 <col:25> 'unsigned char *' <LValueToRValue>
|       |   |     |     |     | `-DeclRefExpr 0x7fffd8437dd8 <col:25> 'unsigned char *' lvalue ParmVar 0x7fffd84342a0 'pixels' 'unsigned char *'
|       |   |     |     |     `-BinaryOperator 0x7fffd8437e80 <col:32, col:34> 'int' '*'
|       |   |     |     |       |-ImplicitCastExpr 0x7fffd8437e50 <col:32> 'int' <LValueToRValue>
|       |   |     |     |       | `-DeclRefExpr 0x7fffd8437e00 <col:32> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |     |     |       `-ImplicitCastExpr 0x7fffd8437e68 <col:34> 'int' <LValueToRValue>
|       |   |     |     |         `-DeclRefExpr 0x7fffd8437e28 <col:34> 'int' lvalue ParmVar 0x7fffd8434408 'stride_in_bytes' 'int'
|       |   |     |     `-ImplicitCastExpr 0x7fffd8438088 <col:53, col:80> 'int' <IntegralCast>
|       |   |     |       `-ImplicitCastExpr 0x7fffd8438070 <col:53, col:80> 'unsigned char' <LValueToRValue>
|       |   |     |         `-ArraySubscriptExpr 0x7fffd8438018 <col:53, col:80> 'unsigned char' lvalue
|       |   |     |           |-ImplicitCastExpr 0x7fffd8438000 <col:53> 'unsigned char *' <ArrayToPointerDecay>
|       |   |     |           | `-DeclRefExpr 0x7fffd8437ee8 <col:53> 'unsigned char [8]' lvalue Var 0x7fffd8434638 'buffer' 'unsigned char [8]'
|       |   |     |           `-BinaryOperator 0x7fffd8437fd8 <col:60, line:3953:50> 'int' '&'
|       |   |     |             |-ImplicitCastExpr 0x7fffd8437fc0 <line:4062:60> 'int' <LValueToRValue>
|       |   |     |             | `-DeclRefExpr 0x7fffd8437f10 <col:60> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |     |             `-ParenExpr 0x7fffd8437fa0 <line:3953:27, col:50> 'int'
|       |   |     |               `-BinaryOperator 0x7fffd8437f78 <line:1104:32, line:3953:49> 'int' '-'
|       |   |     |                 |-IntegerLiteral 0x7fffd8437f38 <line:1104:32> 'int' 8
|       |   |     |                 `-IntegerLiteral 0x7fffd8437f58 <line:3953:49> 'int' 1
|       |   |     |-BinaryOperator 0x7fffd8438450 <line:4063:16, col:86> 'unsigned char' '='
|       |   |     | |-ArraySubscriptExpr 0x7fffd8438300 <col:16, col:58> 'unsigned char' lvalue
|       |   |     | | |-ImplicitCastExpr 0x7fffd84382e8 <col:16> 'unsigned char *' <ArrayToPointerDecay>
|       |   |     | | | `-DeclRefExpr 0x7fffd8438118 <col:16> 'unsigned char [8]' lvalue Var 0x7fffd8434638 'buffer' 'unsigned char [8]'
|       |   |     | | `-BinaryOperator 0x7fffd84382c0 <col:23, line:3953:50> 'unsigned int' '&'
|       |   |     | |   |-ParenExpr 0x7fffd8438200 <line:4063:23, col:38> 'unsigned int'
|       |   |     | |   | `-BinaryOperator 0x7fffd84381d8 <col:24, col:26> 'unsigned int' '+'
|       |   |     | |   |   |-ImplicitCastExpr 0x7fffd84381c0 <col:24> 'unsigned int' <IntegralCast>
|       |   |     | |   |   | `-ImplicitCastExpr 0x7fffd8438190 <col:24> 'int' <LValueToRValue>
|       |   |     | |   |   |   `-DeclRefExpr 0x7fffd8438140 <col:24> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |     | |   |   `-ImplicitCastExpr 0x7fffd84381a8 <col:26> 'unsigned int' <LValueToRValue>
|       |   |     | |   |     `-DeclRefExpr 0x7fffd8438168 <col:26> 'unsigned int' lvalue ParmVar 0x7fffd8434480 'kernel_width' 'unsigned int'
|       |   |     | |   `-ImplicitCastExpr 0x7fffd84382a8 <line:3953:27, col:50> 'unsigned int' <IntegralCast>
|       |   |     | |     `-ParenExpr 0x7fffd8438288 <col:27, col:50> 'int'
|       |   |     | |       `-BinaryOperator 0x7fffd8438260 <line:1104:32, line:3953:49> 'int' '-'
|       |   |     | |         |-IntegerLiteral 0x7fffd8438220 <line:1104:32> 'int' 8
|       |   |     | |         `-IntegerLiteral 0x7fffd8438240 <line:3953:49> 'int' 1
|       |   |     | `-ImplicitCastExpr 0x7fffd8438438 <line:4063:62, col:86> 'unsigned char' <LValueToRValue>
|       |   |     |   `-ArraySubscriptExpr 0x7fffd8438410 <col:62, col:86> 'unsigned char' lvalue
|       |   |     |     |-ImplicitCastExpr 0x7fffd84383f8 <col:62> 'unsigned char *' <LValueToRValue>
|       |   |     |     | `-DeclRefExpr 0x7fffd8438328 <col:62> 'unsigned char *' lvalue ParmVar 0x7fffd84342a0 'pixels' 'unsigned char *'
|       |   |     |     `-BinaryOperator 0x7fffd84383d0 <col:69, col:71> 'int' '*'
|       |   |     |       |-ImplicitCastExpr 0x7fffd84383a0 <col:69> 'int' <LValueToRValue>
|       |   |     |       | `-DeclRefExpr 0x7fffd8438350 <col:69> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |     |       `-ImplicitCastExpr 0x7fffd84383b8 <col:71> 'int' <LValueToRValue>
|       |   |     |         `-DeclRefExpr 0x7fffd8438378 <col:71> 'int' lvalue ParmVar 0x7fffd8434408 'stride_in_bytes' 'int'
|       |   |     `-BinaryOperator 0x7fffd84386c0 <line:4064:16, col:81> 'unsigned char' '='
|       |   |       |-ArraySubscriptExpr 0x7fffd8438560 <col:16, col:40> 'unsigned char' lvalue
|       |   |       | |-ImplicitCastExpr 0x7fffd8438548 <col:16> 'unsigned char *' <LValueToRValue>
|       |   |       | | `-DeclRefExpr 0x7fffd8438478 <col:16> 'unsigned char *' lvalue ParmVar 0x7fffd84342a0 'pixels' 'unsigned char *'
|       |   |       | `-BinaryOperator 0x7fffd8438520 <col:23, col:25> 'int' '*'
|       |   |       |   |-ImplicitCastExpr 0x7fffd84384f0 <col:23> 'int' <LValueToRValue>
|       |   |       |   | `-DeclRefExpr 0x7fffd84384a0 <col:23> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |       |   `-ImplicitCastExpr 0x7fffd8438508 <col:25> 'int' <LValueToRValue>
|       |   |       |     `-DeclRefExpr 0x7fffd84384c8 <col:25> 'int' lvalue ParmVar 0x7fffd8434408 'stride_in_bytes' 'int'
|       |   |       `-CStyleCastExpr 0x7fffd8438698 <col:44, col:81> 'unsigned char' <IntegralCast>
|       |   |         `-ParenExpr 0x7fffd8438678 <col:60, col:81> 'unsigned int'
|       |   |           `-BinaryOperator 0x7fffd8438608 <col:61, col:69> 'unsigned int' '/'
|       |   |             |-ImplicitCastExpr 0x7fffd84385d8 <col:61> 'unsigned int' <LValueToRValue>
|       |   |             | `-DeclRefExpr 0x7fffd8438588 <col:61> 'unsigned int' lvalue Var 0x7fffd8434c08 'total' 'unsigned int'
|       |   |             `-ImplicitCastExpr 0x7fffd84385f0 <col:69> 'unsigned int' <LValueToRValue>
|       |   |               `-DeclRefExpr 0x7fffd84385b0 <col:69> 'unsigned int' lvalue ParmVar 0x7fffd8434480 'kernel_width' 'unsigned int'
|       |   `-BreakStmt 0x7fffd8438768 <line:4066:13>
|       |-ForStmt 0x7fffd8439568 <line:4069:7, line:4073:7>
|       | |-<<<NULL>>>
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7fffd84388b0 <line:4069:14, col:18> 'int' '<'
|       | | |-ImplicitCastExpr 0x7fffd8438880 <col:14> 'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fffd8438830 <col:14> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       | | `-ImplicitCastExpr 0x7fffd8438898 <col:18> 'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fffd8438858 <col:18> 'int' lvalue ParmVar 0x7fffd8434390 'h' 'int'
|       | |-UnaryOperator 0x7fffd8438900 <col:21, col:23> 'int' prefix '++'
|       | | `-DeclRefExpr 0x7fffd84388d8 <col:23> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       | `-CompoundStmt 0x7fffd8439540 <col:26, line:4073:7>
|       |   |-ParenExpr 0x7fffd84390c8 </usr/include/assert.h:108:3, line:113:7> 'void'
|       |   | `-BinaryOperator 0x7fffd84390a0 <line:108:4, line:113:6> 'void' ','
|       |   |   |-CStyleCastExpr 0x7fffd8438ba0 <line:108:4, col:33> 'void' <ToVoid>
|       |   |   | `-UnaryExprOrTypeTraitExpr 0x7fffd8438b70 <col:11, col:33> 'unsigned long' sizeof
|       |   |   |   `-ParenExpr 0x7fffd8438b50 <col:18, col:33> 'int'
|       |   |   |     `-ConditionalOperator 0x7fffd8438b20 <col:19, col:32> 'int'
|       |   |   |       |-ParenExpr 0x7fffd8438aa8 <col:19, col:24> 'int'
|       |   |   |       | `-BinaryOperator 0x7fffd8438a80 <././stb/stb_truetype.h:4070:23, col:52> 'int' '=='
|       |   |   |       |   |-ImplicitCastExpr 0x7fffd8438a68 <col:23, col:47> 'int' <IntegralCast>
|       |   |   |       |   | `-ImplicitCastExpr 0x7fffd8438a50 <col:23, col:47> 'unsigned char' <LValueToRValue>
|       |   |   |       |   |   `-ArraySubscriptExpr 0x7fffd8438a08 <col:23, col:47> 'unsigned char' lvalue
|       |   |   |       |   |     |-ImplicitCastExpr 0x7fffd84389f0 <col:23> 'unsigned char *' <LValueToRValue>
|       |   |   |       |   |     | `-DeclRefExpr 0x7fffd8438920 <col:23> 'unsigned char *' lvalue ParmVar 0x7fffd84342a0 'pixels' 'unsigned char *'
|       |   |   |       |   |     `-BinaryOperator 0x7fffd84389c8 <col:30, col:32> 'int' '*'
|       |   |   |       |   |       |-ImplicitCastExpr 0x7fffd8438998 <col:30> 'int' <LValueToRValue>
|       |   |   |       |   |       | `-DeclRefExpr 0x7fffd8438948 <col:30> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |   |       |   |       `-ImplicitCastExpr 0x7fffd84389b0 <col:32> 'int' <LValueToRValue>
|       |   |   |       |   |         `-DeclRefExpr 0x7fffd8438970 <col:32> 'int' lvalue ParmVar 0x7fffd8434408 'stride_in_bytes' 'int'
|       |   |   |       |   `-IntegerLiteral 0x7fffd8438a30 <col:52> 'int' 0
|       |   |   |       |-IntegerLiteral 0x7fffd8438ae0 </usr/include/assert.h:108:28> 'int' 1
|       |   |   |       `-IntegerLiteral 0x7fffd8438b00 <col:32> 'int' 0
|       |   |   `-UnaryOperator 0x7fffd8439080 <col:36, line:113:6> 'void' prefix '__extension__'
|       |   |     `-StmtExpr 0x7fffd8439060 <line:108:50, line:113:6> 'void'
|       |   |       `-CompoundStmt 0x7fffd8439048 <line:108:51, line:113:5>
|       |   |         `-IfStmt 0x7fffd8439010 <line:109:7, line:112:68>
|       |   |           |-<<<NULL>>>
|       |   |           |-<<<NULL>>>
|       |   |           |-BinaryOperator 0x7fffd8438d28 <././stb/stb_truetype.h:4070:23, col:52> 'int' '=='
|       |   |           | |-ImplicitCastExpr 0x7fffd8438d10 <col:23, col:47> 'int' <IntegralCast>
|       |   |           | | `-ImplicitCastExpr 0x7fffd8438cf8 <col:23, col:47> 'unsigned char' <LValueToRValue>
|       |   |           | |   `-ArraySubscriptExpr 0x7fffd8438cb0 <col:23, col:47> 'unsigned char' lvalue
|       |   |           | |     |-ImplicitCastExpr 0x7fffd8438c98 <col:23> 'unsigned char *' <LValueToRValue>
|       |   |           | |     | `-DeclRefExpr 0x7fffd8438bc8 <col:23> 'unsigned char *' lvalue ParmVar 0x7fffd84342a0 'pixels' 'unsigned char *'
|       |   |           | |     `-BinaryOperator 0x7fffd8438c70 <col:30, col:32> 'int' '*'
|       |   |           | |       |-ImplicitCastExpr 0x7fffd8438c40 <col:30> 'int' <LValueToRValue>
|       |   |           | |       | `-DeclRefExpr 0x7fffd8438bf0 <col:30> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |           | |       `-ImplicitCastExpr 0x7fffd8438c58 <col:32> 'int' <LValueToRValue>
|       |   |           | |         `-DeclRefExpr 0x7fffd8438c18 <col:32> 'int' lvalue ParmVar 0x7fffd8434408 'stride_in_bytes' 'int'
|       |   |           | `-IntegerLiteral 0x7fffd8438cd8 <col:52> 'int' 0
|       |   |           |-NullStmt 0x7fffd8438d50 </usr/include/assert.h:110:9>
|       |   |           `-CallExpr 0x7fffd8438f38 <line:112:9, col:68> 'void'
|       |   |             |-ImplicitCastExpr 0x7fffd8438f20 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|       |   |             | `-DeclRefExpr 0x7fffd8438d60 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|       |   |             |-ImplicitCastExpr 0x7fffd8438f98 <<scratch space>:37:1> 'const char *' <BitCast>
|       |   |             | `-ImplicitCastExpr 0x7fffd8438f80 <col:1> 'char *' <ArrayToPointerDecay>
|       |   |             |   `-StringLiteral 0x7fffd8438dc8 <col:1> 'char [31]' lvalue "pixels[i*stride_in_bytes] == 0"
|       |   |             |-ImplicitCastExpr 0x7fffd8438fc8 <line:38:1> 'const char *' <BitCast>
|       |   |             | `-ImplicitCastExpr 0x7fffd8438fb0 <col:1> 'char *' <ArrayToPointerDecay>
|       |   |             |   `-StringLiteral 0x7fffd8438e10 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|       |   |             |-ImplicitCastExpr 0x7fffd8438fe0 <line:39:1> 'unsigned int' <IntegralCast>
|       |   |             | `-IntegerLiteral 0x7fffd8438e50 <col:1> 'int' 4070
|       |   |             `-ImplicitCastExpr 0x7fffd8438ff8 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|       |   |               `-UnaryOperator 0x7fffd8438f00 <col:30, col:44> 'const char [70]' lvalue prefix '__extension__'
|       |   |                 `-PredefinedExpr 0x7fffd8438ee0 <col:44> 'const char [70]' lvalue __PRETTY_FUNCTION__
|       |   |                   `-StringLiteral 0x7fffd8438e70 <col:44> 'const char [70]' lvalue "void stbtt__v_prefilter(unsigned char *, int, int, int, unsigned int)"
|       |   |-CompoundAssignOperator 0x7fffd8439298 <././stb/stb_truetype.h:4071:10, col:46> 'unsigned int' '-=' ComputeLHSTy='unsigned int' ComputeResultTy='unsigned int'
|       |   | |-DeclRefExpr 0x7fffd84390e8 <col:10> 'unsigned int' lvalue Var 0x7fffd8434c08 'total' 'unsigned int'
|       |   | `-ImplicitCastExpr 0x7fffd8439280 <col:19, col:46> 'unsigned int' <IntegralCast>
|       |   |   `-ImplicitCastExpr 0x7fffd8439268 <col:19, col:46> 'unsigned char' <LValueToRValue>
|       |   |     `-ArraySubscriptExpr 0x7fffd8439240 <col:19, col:46> 'unsigned char' lvalue
|       |   |       |-ImplicitCastExpr 0x7fffd8439228 <col:19> 'unsigned char *' <ArrayToPointerDecay>
|       |   |       | `-DeclRefExpr 0x7fffd8439110 <col:19> 'unsigned char [8]' lvalue Var 0x7fffd8434638 'buffer' 'unsigned char [8]'
|       |   |       `-BinaryOperator 0x7fffd8439200 <col:26, line:3953:50> 'int' '&'
|       |   |         |-ImplicitCastExpr 0x7fffd84391e8 <line:4071:26> 'int' <LValueToRValue>
|       |   |         | `-DeclRefExpr 0x7fffd8439138 <col:26> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |   |         `-ParenExpr 0x7fffd84391c8 <line:3953:27, col:50> 'int'
|       |   |           `-BinaryOperator 0x7fffd84391a0 <line:1104:32, line:3953:49> 'int' '-'
|       |   |             |-IntegerLiteral 0x7fffd8439160 <line:1104:32> 'int' 8
|       |   |             `-IntegerLiteral 0x7fffd8439180 <line:3953:49> 'int' 1
|       |   `-BinaryOperator 0x7fffd8439518 <line:4072:10, col:75> 'unsigned char' '='
|       |     |-ArraySubscriptExpr 0x7fffd84393b8 <col:10, col:34> 'unsigned char' lvalue
|       |     | |-ImplicitCastExpr 0x7fffd84393a0 <col:10> 'unsigned char *' <LValueToRValue>
|       |     | | `-DeclRefExpr 0x7fffd84392d0 <col:10> 'unsigned char *' lvalue ParmVar 0x7fffd84342a0 'pixels' 'unsigned char *'
|       |     | `-BinaryOperator 0x7fffd8439378 <col:17, col:19> 'int' '*'
|       |     |   |-ImplicitCastExpr 0x7fffd8439348 <col:17> 'int' <LValueToRValue>
|       |     |   | `-DeclRefExpr 0x7fffd84392f8 <col:17> 'int' lvalue Var 0x7fffd8434b78 'i' 'int'
|       |     |   `-ImplicitCastExpr 0x7fffd8439360 <col:19> 'int' <LValueToRValue>
|       |     |     `-DeclRefExpr 0x7fffd8439320 <col:19> 'int' lvalue ParmVar 0x7fffd8434408 'stride_in_bytes' 'int'
|       |     `-CStyleCastExpr 0x7fffd84394f0 <col:38, col:75> 'unsigned char' <IntegralCast>
|       |       `-ParenExpr 0x7fffd84394d0 <col:54, col:75> 'unsigned int'
|       |         `-BinaryOperator 0x7fffd8439460 <col:55, col:63> 'unsigned int' '/'
|       |           |-ImplicitCastExpr 0x7fffd8439430 <col:55> 'unsigned int' <LValueToRValue>
|       |           | `-DeclRefExpr 0x7fffd84393e0 <col:55> 'unsigned int' lvalue Var 0x7fffd8434c08 'total' 'unsigned int'
|       |           `-ImplicitCastExpr 0x7fffd8439448 <col:63> 'unsigned int' <LValueToRValue>
|       |             `-DeclRefExpr 0x7fffd8439408 <col:63> 'unsigned int' lvalue ParmVar 0x7fffd8434480 'kernel_width' 'unsigned int'
|       `-CompoundAssignOperator 0x7fffd84395e8 <line:4075:7, col:17> 'unsigned char *' '+=' ComputeLHSTy='unsigned char *' ComputeResultTy='unsigned char *'
|         |-DeclRefExpr 0x7fffd84395a0 <col:7> 'unsigned char *' lvalue ParmVar 0x7fffd84342a0 'pixels' 'unsigned char *'
|         `-IntegerLiteral 0x7fffd84395c8 <col:17> 'int' 1
|-FunctionDecl 0x7fffd84397b8 <line:4079:1, line:4089:1> line:4079:14 used stbtt__oversample_shift 'float (int)' static
| |-ParmVarDecl 0x7fffd84396f0 <col:38, col:42> col:42 used oversample 'int'
| `-CompoundStmt 0x7fffd8439b60 <line:4080:1, line:4089:1>
|   |-IfStmt 0x7fffd84398f8 <line:4081:4, line:4082:14>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-UnaryOperator 0x7fffd84398a0 <line:4081:8, col:9> 'int' prefix '!'
|   | | `-ImplicitCastExpr 0x7fffd8439888 <col:9> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8439860 <col:9> 'int' lvalue ParmVar 0x7fffd84396f0 'oversample' 'int'
|   | |-ReturnStmt 0x7fffd84398e0 <line:4082:7, col:14>
|   | | `-FloatingLiteral 0x7fffd84398c0 <col:14> 'float' 0.000000e+00
|   | `-<<<NULL>>>
|   `-ReturnStmt 0x7fffd8439b48 <line:4088:4, col:63>
|     `-BinaryOperator 0x7fffd8439b20 <col:11, col:63> 'float' '/'
|       |-CStyleCastExpr 0x7fffd8439a10 <col:11, col:34> 'float' <IntegralToFloating>
|       | `-UnaryOperator 0x7fffd84399d8 <col:18, col:34> 'int' prefix '-'
|       |   `-ParenExpr 0x7fffd84399b8 <col:19, col:34> 'int'
|       |     `-BinaryOperator 0x7fffd8439990 <col:20, col:33> 'int' '-'
|       |       |-ImplicitCastExpr 0x7fffd8439978 <col:20> 'int' <LValueToRValue>
|       |       | `-DeclRefExpr 0x7fffd8439930 <col:20> 'int' lvalue ParmVar 0x7fffd84396f0 'oversample' 'int'
|       |       `-IntegerLiteral 0x7fffd8439958 <col:33> 'int' 1
|       `-ParenExpr 0x7fffd8439b00 <col:38, col:63> 'float'
|         `-BinaryOperator 0x7fffd8439ad8 <col:39, col:53> 'float' '*'
|           |-FloatingLiteral 0x7fffd8439a38 <col:39> 'float' 2.000000e+00
|           `-CStyleCastExpr 0x7fffd8439ab0 <col:46, col:53> 'float' <IntegralToFloating>
|             `-ImplicitCastExpr 0x7fffd8439a98 <col:53> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x7fffd8439a58 <col:53> 'int' lvalue ParmVar 0x7fffd84396f0 'oversample' 'int'
|-FunctionDecl 0x7fffd8439e08 prev 0x7fffd834bb38 <line:501:19, line:4125:1> line:4092:15 used stbtt_PackFontRangesGatherRects 'int (stbtt_pack_context *, const stbtt_fontinfo *, stbtt_pack_range *, int, stbrp_rect *)' extern
| |-ParmVarDecl 0x7fffd8439b90 <col:47, col:67> col:67 used spc 'stbtt_pack_context *'
| |-ParmVarDecl 0x7fffd8439c00 <col:72, col:94> col:94 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8439c70 <col:100, col:118> col:118 used ranges 'stbtt_pack_range *'
| |-ParmVarDecl 0x7fffd8439ce8 <col:126, col:130> col:130 used num_ranges 'int'
| |-ParmVarDecl 0x7fffd8439d58 <col:142, col:154> col:154 used rects 'stbrp_rect *'
| `-CompoundStmt 0x7fffd843cb18 <line:4093:1, line:4125:1>
|   |-DeclStmt 0x7fffd843a058 <line:4094:4, col:13>
|   | |-VarDecl 0x7fffd8439ee8 <col:4, col:8> col:8 used i 'int'
|   | |-VarDecl 0x7fffd8439f60 <col:4, col:10> col:10 used j 'int'
|   | `-VarDecl 0x7fffd8439fd8 <col:4, col:12> col:12 used k 'int'
|   |-DeclStmt 0x7fffd843a108 <line:4095:4, col:31>
|   | `-VarDecl 0x7fffd843a088 <col:4, col:30> col:8 used missing_glyph_added 'int' cinit
|   |   `-IntegerLiteral 0x7fffd843a0e8 <col:30> 'int' 0
|   |-BinaryOperator 0x7fffd843a168 <line:4097:4, col:6> 'int' '='
|   | |-DeclRefExpr 0x7fffd843a120 <col:4> 'int' lvalue Var 0x7fffd8439fd8 'k' 'int'
|   | `-IntegerLiteral 0x7fffd843a148 <col:6> 'int' 0
|   |-ForStmt 0x7fffd843ca78 <line:4098:4, line:4122:4>
|   | |-BinaryOperator 0x7fffd843a1d8 <line:4098:9, col:11> 'int' '='
|   | | |-DeclRefExpr 0x7fffd843a190 <col:9> 'int' lvalue Var 0x7fffd8439ee8 'i' 'int'
|   | | `-IntegerLiteral 0x7fffd843a1b8 <col:11> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd843a280 <col:14, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd843a250 <col:14> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd843a200 <col:14> 'int' lvalue Var 0x7fffd8439ee8 'i' 'int'
|   | | `-ImplicitCastExpr 0x7fffd843a268 <col:18> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd843a228 <col:18> 'int' lvalue ParmVar 0x7fffd8439ce8 'num_ranges' 'int'
|   | |-UnaryOperator 0x7fffd843a2d0 <col:30, col:32> 'int' prefix '++'
|   | | `-DeclRefExpr 0x7fffd843a2a8 <col:32> 'int' lvalue Var 0x7fffd8439ee8 'i' 'int'
|   | `-CompoundStmt 0x7fffd843ca40 <col:35, line:4122:4>
|   |   |-DeclStmt 0x7fffd843a460 <line:4099:7, col:37>
|   |   | `-VarDecl 0x7fffd843a308 <col:7, col:28> col:13 used fh 'float' cinit
|   |   |   `-ImplicitCastExpr 0x7fffd843a448 <col:18, col:28> 'float' <LValueToRValue>
|   |   |     `-MemberExpr 0x7fffd843a410 <col:18, col:28> 'float' lvalue .font_size 0x7fffd8348398
|   |   |       `-ArraySubscriptExpr 0x7fffd843a3e8 <col:18, col:26> 'stbtt_pack_range':'stbtt_pack_range' lvalue
|   |   |         |-ImplicitCastExpr 0x7fffd843a3b8 <col:18> 'stbtt_pack_range *' <LValueToRValue>
|   |   |         | `-DeclRefExpr 0x7fffd843a368 <col:18> 'stbtt_pack_range *' lvalue ParmVar 0x7fffd8439c70 'ranges' 'stbtt_pack_range *'
|   |   |         `-ImplicitCastExpr 0x7fffd843a3d0 <col:25> 'int' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x7fffd843a390 <col:25> 'int' lvalue Var 0x7fffd8439ee8 'i' 'int'
|   |   |-DeclStmt 0x7fffd843a7d0 <line:4100:7, col:110>
|   |   | `-VarDecl 0x7fffd843a490 <col:7, col:109> col:13 used scale 'float' cinit
|   |   |   `-ConditionalOperator 0x7fffd843a7a0 <col:21, col:109> 'float'
|   |   |     |-BinaryOperator 0x7fffd843a568 <col:21, col:26> 'int' '>'
|   |   |     | |-ImplicitCastExpr 0x7fffd843a538 <col:21> 'float' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x7fffd843a4f0 <col:21> 'float' lvalue Var 0x7fffd843a308 'fh' 'float'
|   |   |     | `-ImplicitCastExpr 0x7fffd843a550 <col:26> 'float' <IntegralToFloating>
|   |   |     |   `-IntegerLiteral 0x7fffd843a518 <col:26> 'int' 0
|   |   |     |-CallExpr 0x7fffd843a620 <col:30, col:64> 'float'
|   |   |     | |-ImplicitCastExpr 0x7fffd843a608 <col:30> 'float (*)(const stbtt_fontinfo *, float)' <FunctionToPointerDecay>
|   |   |     | | `-DeclRefExpr 0x7fffd843a590 <col:30> 'float (const stbtt_fontinfo *, float)' Function 0x7fffd83d81b0 'stbtt_ScaleForPixelHeight' 'float (const stbtt_fontinfo *, float)'
|   |   |     | |-ImplicitCastExpr 0x7fffd843a658 <col:56> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x7fffd843a5b8 <col:56> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd8439c00 'info' 'const stbtt_fontinfo *'
|   |   |     | `-ImplicitCastExpr 0x7fffd843a670 <col:62> 'float' <LValueToRValue>
|   |   |     |   `-DeclRefExpr 0x7fffd843a5e0 <col:62> 'float' lvalue Var 0x7fffd843a308 'fh' 'float'
|   |   |     `-CallExpr 0x7fffd843a750 <col:68, col:109> 'float'
|   |   |       |-ImplicitCastExpr 0x7fffd843a738 <col:68> 'float (*)(const stbtt_fontinfo *, float)' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x7fffd843a688 <col:68> 'float (const stbtt_fontinfo *, float)' Function 0x7fffd83d89c0 'stbtt_ScaleForMappingEmToPixels' 'float (const stbtt_fontinfo *, float)'
|   |   |       |-ImplicitCastExpr 0x7fffd843a788 <col:100> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x7fffd843a6b0 <col:100> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd8439c00 'info' 'const stbtt_fontinfo *'
|   |   |       `-UnaryOperator 0x7fffd843a718 <col:106, col:107> 'float' prefix '-'
|   |   |         `-ImplicitCastExpr 0x7fffd843a700 <col:107> 'float' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x7fffd843a6d8 <col:107> 'float' lvalue Var 0x7fffd843a308 'fh' 'float'
|   |   |-BinaryOperator 0x7fffd843a998 <line:4101:7, col:53> 'unsigned char' '='
|   |   | |-MemberExpr 0x7fffd843a890 <col:7, col:17> 'unsigned char' lvalue .h_oversample 0x7fffd8348570
|   |   | | `-ArraySubscriptExpr 0x7fffd843a868 <col:7, col:15> 'stbtt_pack_range':'stbtt_pack_range' lvalue
|   |   | |   |-ImplicitCastExpr 0x7fffd843a838 <col:7> 'stbtt_pack_range *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x7fffd843a7e8 <col:7> 'stbtt_pack_range *' lvalue ParmVar 0x7fffd8439c70 'ranges' 'stbtt_pack_range *'
|   |   | |   `-ImplicitCastExpr 0x7fffd843a850 <col:14> 'int' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x7fffd843a810 <col:14> 'int' lvalue Var 0x7fffd8439ee8 'i' 'int'
|   |   | `-CStyleCastExpr 0x7fffd843a970 <col:32, col:53> 'unsigned char' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x7fffd843a958 <col:48, col:53> 'unsigned int' <LValueToRValue>
|   |   |     `-MemberExpr 0x7fffd843a908 <col:48, col:53> 'unsigned int' lvalue ->h_oversample 0x7fffd834c5a8
|   |   |       `-ImplicitCastExpr 0x7fffd843a8f0 <col:48> 'stbtt_pack_context *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x7fffd843a8c8 <col:48> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8439b90 'spc' 'stbtt_pack_context *'
|   |   |-BinaryOperator 0x7fffd843ab80 <line:4102:7, col:53> 'unsigned char' '='
|   |   | |-MemberExpr 0x7fffd843aa68 <col:7, col:17> 'unsigned char' lvalue .v_oversample 0x7fffd83485d0
|   |   | | `-ArraySubscriptExpr 0x7fffd843aa40 <col:7, col:15> 'stbtt_pack_range':'stbtt_pack_range' lvalue
|   |   | |   |-ImplicitCastExpr 0x7fffd843aa10 <col:7> 'stbtt_pack_range *' <LValueToRValue>
|   |   | |   | `-DeclRefExpr 0x7fffd843a9c0 <col:7> 'stbtt_pack_range *' lvalue ParmVar 0x7fffd8439c70 'ranges' 'stbtt_pack_range *'
|   |   | |   `-ImplicitCastExpr 0x7fffd843aa28 <col:14> 'int' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x7fffd843a9e8 <col:14> 'int' lvalue Var 0x7fffd8439ee8 'i' 'int'
|   |   | `-CStyleCastExpr 0x7fffd843ab58 <col:32, col:53> 'unsigned char' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x7fffd843ab40 <col:48, col:53> 'unsigned int' <LValueToRValue>
|   |   |     `-MemberExpr 0x7fffd843aaf0 <col:48, col:53> 'unsigned int' lvalue ->v_oversample 0x7fffd834c608
|   |   |       `-ImplicitCastExpr 0x7fffd843aac8 <col:48> 'stbtt_pack_context *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x7fffd843aaa0 <col:48> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8439b90 'spc' 'stbtt_pack_context *'
|   |   `-ForStmt 0x7fffd843ca08 <line:4103:7, line:4121:7>
|   |     |-BinaryOperator 0x7fffd843abf0 <line:4103:12, col:14> 'int' '='
|   |     | |-DeclRefExpr 0x7fffd843aba8 <col:12> 'int' lvalue Var 0x7fffd8439f60 'j' 'int'
|   |     | `-IntegerLiteral 0x7fffd843abd0 <col:14> 'int' 0
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x7fffd843ad50 <col:17, col:31> 'int' '<'
|   |     | |-ImplicitCastExpr 0x7fffd843ad20 <col:17> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x7fffd843ac18 <col:17> 'int' lvalue Var 0x7fffd8439f60 'j' 'int'
|   |     | `-ImplicitCastExpr 0x7fffd843ad38 <col:21, col:31> 'int' <LValueToRValue>
|   |     |   `-MemberExpr 0x7fffd843ace8 <col:21, col:31> 'int' lvalue .num_chars 0x7fffd83484b8
|   |     |     `-ArraySubscriptExpr 0x7fffd843acc0 <col:21, col:29> 'stbtt_pack_range':'stbtt_pack_range' lvalue
|   |     |       |-ImplicitCastExpr 0x7fffd843ac90 <col:21> 'stbtt_pack_range *' <LValueToRValue>
|   |     |       | `-DeclRefExpr 0x7fffd843ac40 <col:21> 'stbtt_pack_range *' lvalue ParmVar 0x7fffd8439c70 'ranges' 'stbtt_pack_range *'
|   |     |       `-ImplicitCastExpr 0x7fffd843aca8 <col:28> 'int' <LValueToRValue>
|   |     |         `-DeclRefExpr 0x7fffd843ac68 <col:28> 'int' lvalue Var 0x7fffd8439ee8 'i' 'int'
|   |     |-UnaryOperator 0x7fffd843ada0 <col:42, col:44> 'int' prefix '++'
|   |     | `-DeclRefExpr 0x7fffd843ad78 <col:44> 'int' lvalue Var 0x7fffd8439f60 'j' 'int'
|   |     `-CompoundStmt 0x7fffd843c9d0 <col:47, line:4121:7>
|   |       |-DeclStmt 0x7fffd843afc8 <line:4104:10, col:25>
|   |       | |-VarDecl 0x7fffd843add8 <col:10, col:14> col:14 used x0 'int'
|   |       | |-VarDecl 0x7fffd843ae50 <col:10, col:17> col:17 used y0 'int'
|   |       | |-VarDecl 0x7fffd843aec8 <col:10, col:20> col:20 used x1 'int'
|   |       | `-VarDecl 0x7fffd843af40 <col:10, col:23> col:23 used y1 'int'
|   |       |-DeclStmt 0x7fffd843b518 <line:4105:10, col:163>
|   |       | `-VarDecl 0x7fffd843aff8 <col:10, col:162> col:14 used codepoint 'int' cinit
|   |       |   `-ConditionalOperator 0x7fffd843b4e8 <col:26, col:162> 'int'
|   |       |     |-BinaryOperator 0x7fffd843b1e8 <col:26, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25> 'int' '=='
|   |       |     | |-ImplicitCastExpr 0x7fffd843b1b8 <././stb/stb_truetype.h:4105:26, col:36> 'int *' <LValueToRValue>
|   |       |     | | `-MemberExpr 0x7fffd843b100 <col:26, col:36> 'int *' lvalue .array_of_unicode_codepoints 0x7fffd8348458
|   |       |     | |   `-ArraySubscriptExpr 0x7fffd843b0d8 <col:26, col:34> 'stbtt_pack_range':'stbtt_pack_range' lvalue
|   |       |     | |     |-ImplicitCastExpr 0x7fffd843b0a8 <col:26> 'stbtt_pack_range *' <LValueToRValue>
|   |       |     | |     | `-DeclRefExpr 0x7fffd843b058 <col:26> 'stbtt_pack_range *' lvalue ParmVar 0x7fffd8439c70 'ranges' 'stbtt_pack_range *'
|   |       |     | |     `-ImplicitCastExpr 0x7fffd843b0c0 <col:33> 'int' <LValueToRValue>
|   |       |     | |       `-DeclRefExpr 0x7fffd843b080 <col:33> 'int' lvalue Var 0x7fffd8439ee8 'i' 'int'
|   |       |     | `-ImplicitCastExpr 0x7fffd843b1d0 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'int *' <BitCast>
|   |       |     |   `-ParenExpr 0x7fffd843b198 <col:16, col:25> 'void *'
|   |       |     |     `-CStyleCastExpr 0x7fffd843b170 <col:17, col:24> 'void *' <NullToPointer>
|   |       |     |       `-IntegerLiteral 0x7fffd843b138 <col:24> 'int' 0
|   |       |     |-BinaryOperator 0x7fffd843b348 <././stb/stb_truetype.h:4105:74, col:119> 'int' '+'
|   |       |     | |-ImplicitCastExpr 0x7fffd843b318 <col:74, col:84> 'int' <LValueToRValue>
|   |       |     | | `-MemberExpr 0x7fffd843b2b8 <col:74, col:84> 'int' lvalue .first_unicode_codepoint_in_range 0x7fffd83483f8
|   |       |     | |   `-ArraySubscriptExpr 0x7fffd843b290 <col:74, col:82> 'stbtt_pack_range':'stbtt_pack_range' lvalue
|   |       |     | |     |-ImplicitCastExpr 0x7fffd843b260 <col:74> 'stbtt_pack_range *' <LValueToRValue>
|   |       |     | |     | `-DeclRefExpr 0x7fffd843b210 <col:74> 'stbtt_pack_range *' lvalue ParmVar 0x7fffd8439c70 'ranges' 'stbtt_pack_range *'
|   |       |     | |     `-ImplicitCastExpr 0x7fffd843b278 <col:81> 'int' <LValueToRValue>
|   |       |     | |       `-DeclRefExpr 0x7fffd843b238 <col:81> 'int' lvalue Var 0x7fffd8439ee8 'i' 'int'
|   |       |     | `-ImplicitCastExpr 0x7fffd843b330 <col:119> 'int' <LValueToRValue>
|   |       |     |   `-DeclRefExpr 0x7fffd843b2f0 <col:119> 'int' lvalue Var 0x7fffd8439f60 'j' 'int'
|   |       |     `-ImplicitCastExpr 0x7fffd843b4d0 <col:123, col:162> 'int' <LValueToRValue>
|   |       |       `-ArraySubscriptExpr 0x7fffd843b4a8 <col:123, col:162> 'int' lvalue
|   |       |         |-ImplicitCastExpr 0x7fffd843b478 <col:123, col:133> 'int *' <LValueToRValue>
|   |       |         | `-MemberExpr 0x7fffd843b418 <col:123, col:133> 'int *' lvalue .array_of_unicode_codepoints 0x7fffd8348458
|   |       |         |   `-ArraySubscriptExpr 0x7fffd843b3f0 <col:123, col:131> 'stbtt_pack_range':'stbtt_pack_range' lvalue
|   |       |         |     |-ImplicitCastExpr 0x7fffd843b3c0 <col:123> 'stbtt_pack_range *' <LValueToRValue>
|   |       |         |     | `-DeclRefExpr 0x7fffd843b370 <col:123> 'stbtt_pack_range *' lvalue ParmVar 0x7fffd8439c70 'ranges' 'stbtt_pack_range *'
|   |       |         |     `-ImplicitCastExpr 0x7fffd843b3d8 <col:130> 'int' <LValueToRValue>
|   |       |         |       `-DeclRefExpr 0x7fffd843b398 <col:130> 'int' lvalue Var 0x7fffd8439ee8 'i' 'int'
|   |       |         `-ImplicitCastExpr 0x7fffd843b490 <col:161> 'int' <LValueToRValue>
|   |       |           `-DeclRefExpr 0x7fffd843b450 <col:161> 'int' lvalue Var 0x7fffd8439f60 'j' 'int'
|   |       |-DeclStmt 0x7fffd843b6a0 <line:4106:10, col:59>
|   |       | `-VarDecl 0x7fffd843b548 <col:10, col:58> col:14 used glyph 'int' cinit
|   |       |   `-CallExpr 0x7fffd843b638 <col:22, col:58> 'int'
|   |       |     |-ImplicitCastExpr 0x7fffd843b620 <col:22> 'int (*)(const stbtt_fontinfo *, int)' <FunctionToPointerDecay>
|   |       |     | `-DeclRefExpr 0x7fffd843b5a8 <col:22> 'int (const stbtt_fontinfo *, int)' Function 0x7fffd83829f0 'stbtt_FindGlyphIndex' 'int (const stbtt_fontinfo *, int)'
|   |       |     |-ImplicitCastExpr 0x7fffd843b670 <col:43> 'const stbtt_fontinfo *' <LValueToRValue>
|   |       |     | `-DeclRefExpr 0x7fffd843b5d0 <col:43> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd8439c00 'info' 'const stbtt_fontinfo *'
|   |       |     `-ImplicitCastExpr 0x7fffd843b688 <col:49> 'int' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x7fffd843b5f8 <col:49> 'int' lvalue Var 0x7fffd843aff8 'codepoint' 'int'
|   |       |-IfStmt 0x7fffd843c950 <line:4107:10, line:4119:10>
|   |       | |-<<<NULL>>>
|   |       | |-<<<NULL>>>
|   |       | |-BinaryOperator 0x7fffd843b858 <line:4107:14, col:69> 'int' '&&'
|   |       | | |-BinaryOperator 0x7fffd843b718 <col:14, col:23> 'int' '=='
|   |       | | | |-ImplicitCastExpr 0x7fffd843b700 <col:14> 'int' <LValueToRValue>
|   |       | | | | `-DeclRefExpr 0x7fffd843b6b8 <col:14> 'int' lvalue Var 0x7fffd843b548 'glyph' 'int'
|   |       | | | `-IntegerLiteral 0x7fffd843b6e0 <col:23> 'int' 0
|   |       | | `-ParenExpr 0x7fffd843b838 <col:28, col:69> 'int'
|   |       | |   `-BinaryOperator 0x7fffd843b810 <col:29, col:50> 'int' '||'
|   |       | |     |-ImplicitCastExpr 0x7fffd843b7e0 <col:29, col:34> 'int' <LValueToRValue>
|   |       | |     | `-MemberExpr 0x7fffd843b780 <col:29, col:34> 'int' lvalue ->skip_missing 0x7fffd834c548
|   |       | |     |   `-ImplicitCastExpr 0x7fffd843b768 <col:29> 'stbtt_pack_context *' <LValueToRValue>
|   |       | |     |     `-DeclRefExpr 0x7fffd843b740 <col:29> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8439b90 'spc' 'stbtt_pack_context *'
|   |       | |     `-ImplicitCastExpr 0x7fffd843b7f8 <col:50> 'int' <LValueToRValue>
|   |       | |       `-DeclRefExpr 0x7fffd843b7b8 <col:50> 'int' lvalue Var 0x7fffd843a088 'missing_glyph_added' 'int'
|   |       | |-CompoundStmt 0x7fffd843bab0 <col:72, line:4109:10>
|   |       | | `-BinaryOperator 0x7fffd843ba88 <line:4108:13, col:39> 'int' '='
|   |       | |   |-MemberExpr 0x7fffd843b928 <col:13, col:22> 'int' lvalue .w 0x7fffd84265c8
|   |       | |   | `-ArraySubscriptExpr 0x7fffd843b900 <col:13, col:20> 'stbrp_rect':'struct stbrp_rect' lvalue
|   |       | |   |   |-ImplicitCastExpr 0x7fffd843b8d0 <col:13> 'stbrp_rect *' <LValueToRValue>
|   |       | |   |   | `-DeclRefExpr 0x7fffd843b880 <col:13> 'stbrp_rect *' lvalue ParmVar 0x7fffd8439d58 'rects' 'stbrp_rect *'
|   |       | |   |   `-ImplicitCastExpr 0x7fffd843b8e8 <col:19> 'int' <LValueToRValue>
|   |       | |   |     `-DeclRefExpr 0x7fffd843b8a8 <col:19> 'int' lvalue Var 0x7fffd8439fd8 'k' 'int'
|   |       | |   `-BinaryOperator 0x7fffd843ba60 <col:26, col:39> 'int' '='
|   |       | |     |-MemberExpr 0x7fffd843ba08 <col:26, col:35> 'int' lvalue .h 0x7fffd8426628
|   |       | |     | `-ArraySubscriptExpr 0x7fffd843b9e0 <col:26, col:33> 'stbrp_rect':'struct stbrp_rect' lvalue
|   |       | |     |   |-ImplicitCastExpr 0x7fffd843b9b0 <col:26> 'stbrp_rect *' <LValueToRValue>
|   |       | |     |   | `-DeclRefExpr 0x7fffd843b960 <col:26> 'stbrp_rect *' lvalue ParmVar 0x7fffd8439d58 'rects' 'stbrp_rect *'
|   |       | |     |   `-ImplicitCastExpr 0x7fffd843b9c8 <col:32> 'int' <LValueToRValue>
|   |       | |     |     `-DeclRefExpr 0x7fffd843b988 <col:32> 'int' lvalue Var 0x7fffd8439fd8 'k' 'int'
|   |       | |     `-IntegerLiteral 0x7fffd843ba40 <col:39> 'int' 0
|   |       | `-CompoundStmt 0x7fffd843c920 <line:4109:17, line:4119:10>
|   |       |   |-CallExpr 0x7fffd843bed8 <line:4110:13, line:4114:60> 'void'
|   |       |   | |-ImplicitCastExpr 0x7fffd843bec0 <line:4110:13> 'void (*)(const stbtt_fontinfo *, int, float, float, float, float, int *, int *, int *, int *)' <FunctionToPointerDecay>
|   |       |   | | `-DeclRefExpr 0x7fffd843bac8 <col:13> 'void (const stbtt_fontinfo *, int, float, float, float, float, int *, int *, int *, int *)' Function 0x7fffd83db948 'stbtt_GetGlyphBitmapBoxSubpixel' 'void (const stbtt_fontinfo *, int, float, float, float, float, int *, int *, int *, int *)'
|   |       |   | |-ImplicitCastExpr 0x7fffd843bf50 <col:45> 'const stbtt_fontinfo *' <LValueToRValue>
|   |       |   | | `-DeclRefExpr 0x7fffd843baf0 <col:45> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd8439c00 'info' 'const stbtt_fontinfo *'
|   |       |   | |-ImplicitCastExpr 0x7fffd843bf68 <col:50> 'int' <LValueToRValue>
|   |       |   | | `-DeclRefExpr 0x7fffd843bb18 <col:50> 'int' lvalue Var 0x7fffd843b548 'glyph' 'int'
|   |       |   | |-BinaryOperator 0x7fffd843bc28 <line:4111:45, col:58> 'float' '*'
|   |       |   | | |-ImplicitCastExpr 0x7fffd843bbe0 <col:45> 'float' <LValueToRValue>
|   |       |   | | | `-DeclRefExpr 0x7fffd843bb40 <col:45> 'float' lvalue Var 0x7fffd843a490 'scale' 'float'
|   |       |   | | `-ImplicitCastExpr 0x7fffd843bc10 <col:53, col:58> 'float' <IntegralToFloating>
|   |       |   | |   `-ImplicitCastExpr 0x7fffd843bbf8 <col:53, col:58> 'unsigned int' <LValueToRValue>
|   |       |   | |     `-MemberExpr 0x7fffd843bba8 <col:53, col:58> 'unsigned int' lvalue ->h_oversample 0x7fffd834c5a8
|   |       |   | |       `-ImplicitCastExpr 0x7fffd843bb90 <col:53> 'stbtt_pack_context *' <LValueToRValue>
|   |       |   | |         `-DeclRefExpr 0x7fffd843bb68 <col:53> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8439b90 'spc' 'stbtt_pack_context *'
|   |       |   | |-BinaryOperator 0x7fffd843bd38 <line:4112:45, col:58> 'float' '*'
|   |       |   | | |-ImplicitCastExpr 0x7fffd843bcf0 <col:45> 'float' <LValueToRValue>
|   |       |   | | | `-DeclRefExpr 0x7fffd843bc50 <col:45> 'float' lvalue Var 0x7fffd843a490 'scale' 'float'
|   |       |   | | `-ImplicitCastExpr 0x7fffd843bd20 <col:53, col:58> 'float' <IntegralToFloating>
|   |       |   | |   `-ImplicitCastExpr 0x7fffd843bd08 <col:53, col:58> 'unsigned int' <LValueToRValue>
|   |       |   | |     `-MemberExpr 0x7fffd843bcb8 <col:53, col:58> 'unsigned int' lvalue ->v_oversample 0x7fffd834c608
|   |       |   | |       `-ImplicitCastExpr 0x7fffd843bca0 <col:53> 'stbtt_pack_context *' <LValueToRValue>
|   |       |   | |         `-DeclRefExpr 0x7fffd843bc78 <col:53> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8439b90 'spc' 'stbtt_pack_context *'
|   |       |   | |-ImplicitCastExpr 0x7fffd843bf80 <line:4113:45> 'float' <IntegralToFloating>
|   |       |   | | `-IntegerLiteral 0x7fffd843bd60 <col:45> 'int' 0
|   |       |   | |-ImplicitCastExpr 0x7fffd843bf98 <col:47> 'float' <IntegralToFloating>
|   |       |   | | `-IntegerLiteral 0x7fffd843bd80 <col:47> 'int' 0
|   |       |   | |-UnaryOperator 0x7fffd843bdc8 <line:4114:45, col:46> 'int *' prefix '&'
|   |       |   | | `-DeclRefExpr 0x7fffd843bda0 <col:46> 'int' lvalue Var 0x7fffd843add8 'x0' 'int'
|   |       |   | |-UnaryOperator 0x7fffd843be10 <col:49, col:50> 'int *' prefix '&'
|   |       |   | | `-DeclRefExpr 0x7fffd843bde8 <col:50> 'int' lvalue Var 0x7fffd843ae50 'y0' 'int'
|   |       |   | |-UnaryOperator 0x7fffd843be58 <col:53, col:54> 'int *' prefix '&'
|   |       |   | | `-DeclRefExpr 0x7fffd843be30 <col:54> 'int' lvalue Var 0x7fffd843aec8 'x1' 'int'
|   |       |   | `-UnaryOperator 0x7fffd843bea0 <col:57, col:58> 'int *' prefix '&'
|   |       |   |   `-DeclRefExpr 0x7fffd843be78 <col:58> 'int' lvalue Var 0x7fffd843af40 'y1' 'int'
|   |       |   |-BinaryOperator 0x7fffd843c3a8 <line:4115:13, col:83> 'int' '='
|   |       |   | |-MemberExpr 0x7fffd843c058 <col:13, col:22> 'int' lvalue .w 0x7fffd84265c8
|   |       |   | | `-ArraySubscriptExpr 0x7fffd843c030 <col:13, col:20> 'stbrp_rect':'struct stbrp_rect' lvalue
|   |       |   | |   |-ImplicitCastExpr 0x7fffd843c000 <col:13> 'stbrp_rect *' <LValueToRValue>
|   |       |   | |   | `-DeclRefExpr 0x7fffd843bfb0 <col:13> 'stbrp_rect *' lvalue ParmVar 0x7fffd8439d58 'rects' 'stbrp_rect *'
|   |       |   | |   `-ImplicitCastExpr 0x7fffd843c018 <col:19> 'int' <LValueToRValue>
|   |       |   | |     `-DeclRefExpr 0x7fffd843bfd8 <col:19> 'int' lvalue Var 0x7fffd8439fd8 'k' 'int'
|   |       |   | `-CStyleCastExpr 0x7fffd843c380 <col:26, col:83> 'stbrp_coord':'int' <IntegralCast>
|   |       |   |   `-ParenExpr 0x7fffd843c360 <col:40, col:83> 'unsigned int'
|   |       |   |     `-BinaryOperator 0x7fffd843c2f8 <col:41, col:82> 'unsigned int' '-'
|   |       |   |       |-BinaryOperator 0x7fffd843c298 <col:41, col:69> 'unsigned int' '+'
|   |       |   |       | |-ImplicitCastExpr 0x7fffd843c280 <col:41, col:54> 'unsigned int' <IntegralCast>
|   |       |   |       | | `-BinaryOperator 0x7fffd843c1c8 <col:41, col:54> 'int' '+'
|   |       |   |       | |   |-BinaryOperator 0x7fffd843c110 <col:41, col:44> 'int' '-'
|   |       |   |       | |   | |-ImplicitCastExpr 0x7fffd843c0e0 <col:41> 'int' <LValueToRValue>
|   |       |   |       | |   | | `-DeclRefExpr 0x7fffd843c090 <col:41> 'int' lvalue Var 0x7fffd843aec8 'x1' 'int'
|   |       |   |       | |   | `-ImplicitCastExpr 0x7fffd843c0f8 <col:44> 'int' <LValueToRValue>
|   |       |   |       | |   |   `-DeclRefExpr 0x7fffd843c0b8 <col:44> 'int' lvalue Var 0x7fffd843add8 'x0' 'int'
|   |       |   |       | |   `-ImplicitCastExpr 0x7fffd843c1b0 <col:49, col:54> 'int' <LValueToRValue>
|   |       |   |       | |     `-MemberExpr 0x7fffd843c178 <col:49, col:54> 'int' lvalue ->padding 0x7fffd834c4e8
|   |       |   |       | |       `-ImplicitCastExpr 0x7fffd843c160 <col:49> 'stbtt_pack_context *' <LValueToRValue>
|   |       |   |       | |         `-DeclRefExpr 0x7fffd843c138 <col:49> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8439b90 'spc' 'stbtt_pack_context *'
|   |       |   |       | `-ImplicitCastExpr 0x7fffd843c268 <col:64, col:69> 'unsigned int' <LValueToRValue>
|   |       |   |       |   `-MemberExpr 0x7fffd843c230 <col:64, col:69> 'unsigned int' lvalue ->h_oversample 0x7fffd834c5a8
|   |       |   |       |     `-ImplicitCastExpr 0x7fffd843c218 <col:64> 'stbtt_pack_context *' <LValueToRValue>
|   |       |   |       |       `-DeclRefExpr 0x7fffd843c1f0 <col:64> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8439b90 'spc' 'stbtt_pack_context *'
|   |       |   |       `-ImplicitCastExpr 0x7fffd843c2e0 <col:82> 'unsigned int' <IntegralCast>
|   |       |   |         `-IntegerLiteral 0x7fffd843c2c0 <col:82> 'int' 1
|   |       |   |-BinaryOperator 0x7fffd843c7c8 <line:4116:13, col:83> 'int' '='
|   |       |   | |-MemberExpr 0x7fffd843c478 <col:13, col:22> 'int' lvalue .h 0x7fffd8426628
|   |       |   | | `-ArraySubscriptExpr 0x7fffd843c450 <col:13, col:20> 'stbrp_rect':'struct stbrp_rect' lvalue
|   |       |   | |   |-ImplicitCastExpr 0x7fffd843c420 <col:13> 'stbrp_rect *' <LValueToRValue>
|   |       |   | |   | `-DeclRefExpr 0x7fffd843c3d0 <col:13> 'stbrp_rect *' lvalue ParmVar 0x7fffd8439d58 'rects' 'stbrp_rect *'
|   |       |   | |   `-ImplicitCastExpr 0x7fffd843c438 <col:19> 'int' <LValueToRValue>
|   |       |   | |     `-DeclRefExpr 0x7fffd843c3f8 <col:19> 'int' lvalue Var 0x7fffd8439fd8 'k' 'int'
|   |       |   | `-CStyleCastExpr 0x7fffd843c7a0 <col:26, col:83> 'stbrp_coord':'int' <IntegralCast>
|   |       |   |   `-ParenExpr 0x7fffd843c780 <col:40, col:83> 'unsigned int'
|   |       |   |     `-BinaryOperator 0x7fffd843c718 <col:41, col:82> 'unsigned int' '-'
|   |       |   |       |-BinaryOperator 0x7fffd843c6b8 <col:41, col:69> 'unsigned int' '+'
|   |       |   |       | |-ImplicitCastExpr 0x7fffd843c6a0 <col:41, col:54> 'unsigned int' <IntegralCast>
|   |       |   |       | | `-BinaryOperator 0x7fffd843c5e8 <col:41, col:54> 'int' '+'
|   |       |   |       | |   |-BinaryOperator 0x7fffd843c530 <col:41, col:44> 'int' '-'
|   |       |   |       | |   | |-ImplicitCastExpr 0x7fffd843c500 <col:41> 'int' <LValueToRValue>
|   |       |   |       | |   | | `-DeclRefExpr 0x7fffd843c4b0 <col:41> 'int' lvalue Var 0x7fffd843af40 'y1' 'int'
|   |       |   |       | |   | `-ImplicitCastExpr 0x7fffd843c518 <col:44> 'int' <LValueToRValue>
|   |       |   |       | |   |   `-DeclRefExpr 0x7fffd843c4d8 <col:44> 'int' lvalue Var 0x7fffd843ae50 'y0' 'int'
|   |       |   |       | |   `-ImplicitCastExpr 0x7fffd843c5d0 <col:49, col:54> 'int' <LValueToRValue>
|   |       |   |       | |     `-MemberExpr 0x7fffd843c598 <col:49, col:54> 'int' lvalue ->padding 0x7fffd834c4e8
|   |       |   |       | |       `-ImplicitCastExpr 0x7fffd843c580 <col:49> 'stbtt_pack_context *' <LValueToRValue>
|   |       |   |       | |         `-DeclRefExpr 0x7fffd843c558 <col:49> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8439b90 'spc' 'stbtt_pack_context *'
|   |       |   |       | `-ImplicitCastExpr 0x7fffd843c688 <col:64, col:69> 'unsigned int' <LValueToRValue>
|   |       |   |       |   `-MemberExpr 0x7fffd843c650 <col:64, col:69> 'unsigned int' lvalue ->v_oversample 0x7fffd834c608
|   |       |   |       |     `-ImplicitCastExpr 0x7fffd843c638 <col:64> 'stbtt_pack_context *' <LValueToRValue>
|   |       |   |       |       `-DeclRefExpr 0x7fffd843c610 <col:64> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8439b90 'spc' 'stbtt_pack_context *'
|   |       |   |       `-ImplicitCastExpr 0x7fffd843c700 <col:82> 'unsigned int' <IntegralCast>
|   |       |   |         `-IntegerLiteral 0x7fffd843c6e0 <col:82> 'int' 1
|   |       |   `-IfStmt 0x7fffd843c8e8 <line:4117:13, line:4118:38>
|   |       |     |-<<<NULL>>>
|   |       |     |-<<<NULL>>>
|   |       |     |-BinaryOperator 0x7fffd843c850 <line:4117:17, col:26> 'int' '=='
|   |       |     | |-ImplicitCastExpr 0x7fffd843c838 <col:17> 'int' <LValueToRValue>
|   |       |     | | `-DeclRefExpr 0x7fffd843c7f0 <col:17> 'int' lvalue Var 0x7fffd843b548 'glyph' 'int'
|   |       |     | `-IntegerLiteral 0x7fffd843c818 <col:26> 'int' 0
|   |       |     |-BinaryOperator 0x7fffd843c8c0 <line:4118:16, col:38> 'int' '='
|   |       |     | |-DeclRefExpr 0x7fffd843c878 <col:16> 'int' lvalue Var 0x7fffd843a088 'missing_glyph_added' 'int'
|   |       |     | `-IntegerLiteral 0x7fffd843c8a0 <col:38> 'int' 1
|   |       |     `-<<<NULL>>>
|   |       `-UnaryOperator 0x7fffd843c9b0 <line:4120:10, col:12> 'int' prefix '++'
|   |         `-DeclRefExpr 0x7fffd843c988 <col:12> 'int' lvalue Var 0x7fffd8439fd8 'k' 'int'
|   `-ReturnStmt 0x7fffd843cb00 <line:4124:4, col:11>
|     `-ImplicitCastExpr 0x7fffd843cad8 <col:11> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd843cab0 <col:11> 'int' lvalue Var 0x7fffd8439fd8 'k' 'int'
|-FunctionDecl 0x7fffd843d268 prev 0x7fffd8357be0 <line:501:19, line:4148:1> line:4127:16 used stbtt_MakeGlyphBitmapSubpixelPrefilter 'void (const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, float, float, int, int, float *, float *, int)' extern
| |-ParmVarDecl 0x7fffd843cb60 <col:55, col:77> col:77 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd843cbd8 <col:83, col:98> col:98 used output 'unsigned char *'
| |-ParmVarDecl 0x7fffd843cc50 <col:106, col:110> col:110 used out_w 'int'
| |-ParmVarDecl 0x7fffd843ccc8 <col:117, col:121> col:121 used out_h 'int'
| |-ParmVarDecl 0x7fffd843cd40 <col:128, col:132> col:132 used out_stride 'int'
| |-ParmVarDecl 0x7fffd843cdb8 <col:144, col:150> col:150 used scale_x 'float'
| |-ParmVarDecl 0x7fffd843ce30 <col:159, col:165> col:165 used scale_y 'float'
| |-ParmVarDecl 0x7fffd843cea8 <col:174, col:180> col:180 used shift_x 'float'
| |-ParmVarDecl 0x7fffd843cf20 <col:189, col:195> col:195 used shift_y 'float'
| |-ParmVarDecl 0x7fffd843cf98 <col:204, col:208> col:208 used prefilter_x 'int'
| |-ParmVarDecl 0x7fffd843d010 <col:221, col:225> col:225 used prefilter_y 'int'
| |-ParmVarDecl 0x7fffd843d088 <col:238, col:245> col:245 used sub_x 'float *'
| |-ParmVarDecl 0x7fffd843d100 <col:252, col:259> col:259 used sub_y 'float *'
| |-ParmVarDecl 0x7fffd843d178 <col:266, col:270> col:270 used glyph 'int'
| `-CompoundStmt 0x7fffd843e068 <line:4128:1, line:4148:1>
|   |-CallExpr 0x7fffd843d718 <line:4129:4, line:4138:39> 'void'
|   | |-ImplicitCastExpr 0x7fffd843d700 <line:4129:4> 'void (*)(const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, float, float, int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fffd843d378 <col:4> 'void (const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, float, float, int)' Function 0x7fffd841a460 'stbtt_MakeGlyphBitmapSubpixel' 'void (const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, float, float, int)'
|   | |-ImplicitCastExpr 0x7fffd843d790 <col:34> 'const stbtt_fontinfo *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd843d3a0 <col:34> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd843cb60 'info' 'const stbtt_fontinfo *'
|   | |-ImplicitCastExpr 0x7fffd843d7a8 <line:4130:34> 'unsigned char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd843d3c8 <col:34> 'unsigned char *' lvalue ParmVar 0x7fffd843cbd8 'output' 'unsigned char *'
|   | |-BinaryOperator 0x7fffd843d4d8 <line:4131:34, col:58> 'int' '-'
|   | | |-ImplicitCastExpr 0x7fffd843d4c0 <col:34> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd843d3f0 <col:34> 'int' lvalue ParmVar 0x7fffd843cc50 'out_w' 'int'
|   | | `-ParenExpr 0x7fffd843d4a0 <col:42, col:58> 'int'
|   | |   `-BinaryOperator 0x7fffd843d478 <col:43, col:57> 'int' '-'
|   | |     |-ImplicitCastExpr 0x7fffd843d460 <col:43> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x7fffd843d418 <col:43> 'int' lvalue ParmVar 0x7fffd843cf98 'prefilter_x' 'int'
|   | |     `-IntegerLiteral 0x7fffd843d440 <col:57> 'int' 1
|   | |-BinaryOperator 0x7fffd843d5e8 <line:4132:34, col:58> 'int' '-'
|   | | |-ImplicitCastExpr 0x7fffd843d5d0 <col:34> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd843d500 <col:34> 'int' lvalue ParmVar 0x7fffd843ccc8 'out_h' 'int'
|   | | `-ParenExpr 0x7fffd843d5b0 <col:42, col:58> 'int'
|   | |   `-BinaryOperator 0x7fffd843d588 <col:43, col:57> 'int' '-'
|   | |     |-ImplicitCastExpr 0x7fffd843d570 <col:43> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x7fffd843d528 <col:43> 'int' lvalue ParmVar 0x7fffd843d010 'prefilter_y' 'int'
|   | |     `-IntegerLiteral 0x7fffd843d550 <col:57> 'int' 1
|   | |-ImplicitCastExpr 0x7fffd843d7c0 <line:4133:34> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd843d610 <col:34> 'int' lvalue ParmVar 0x7fffd843cd40 'out_stride' 'int'
|   | |-ImplicitCastExpr 0x7fffd843d7d8 <line:4134:34> 'float' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd843d638 <col:34> 'float' lvalue ParmVar 0x7fffd843cdb8 'scale_x' 'float'
|   | |-ImplicitCastExpr 0x7fffd843d7f0 <line:4135:34> 'float' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd843d660 <col:34> 'float' lvalue ParmVar 0x7fffd843ce30 'scale_y' 'float'
|   | |-ImplicitCastExpr 0x7fffd843d808 <line:4136:34> 'float' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd843d688 <col:34> 'float' lvalue ParmVar 0x7fffd843cea8 'shift_x' 'float'
|   | |-ImplicitCastExpr 0x7fffd843d820 <line:4137:34> 'float' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd843d6b0 <col:34> 'float' lvalue ParmVar 0x7fffd843cf20 'shift_y' 'float'
|   | `-ImplicitCastExpr 0x7fffd843d838 <line:4138:34> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd843d6d8 <col:34> 'int' lvalue ParmVar 0x7fffd843d178 'glyph' 'int'
|   |-IfStmt 0x7fffd843daf0 <line:4140:4, line:4141:71>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd843d8b0 <line:4140:8, col:22> 'int' '>'
|   | | |-ImplicitCastExpr 0x7fffd843d898 <col:8> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd843d850 <col:8> 'int' lvalue ParmVar 0x7fffd843cf98 'prefilter_x' 'int'
|   | | `-IntegerLiteral 0x7fffd843d878 <col:22> 'int' 1
|   | |-CallExpr 0x7fffd843da10 <line:4141:7, col:71> 'void'
|   | | |-ImplicitCastExpr 0x7fffd843d9f8 <col:7> 'void (*)(unsigned char *, int, int, int, unsigned int)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x7fffd843d8d8 <col:7> 'void (unsigned char *, int, int, int, unsigned int)' Function 0x7fffd842e390 'stbtt__h_prefilter' 'void (unsigned char *, int, int, int, unsigned int)'
|   | | |-ImplicitCastExpr 0x7fffd843da60 <col:26> 'unsigned char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd843d900 <col:26> 'unsigned char *' lvalue ParmVar 0x7fffd843cbd8 'output' 'unsigned char *'
|   | | |-ImplicitCastExpr 0x7fffd843da78 <col:34> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd843d928 <col:34> 'int' lvalue ParmVar 0x7fffd843cc50 'out_w' 'int'
|   | | |-ImplicitCastExpr 0x7fffd843da90 <col:41> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd843d950 <col:41> 'int' lvalue ParmVar 0x7fffd843ccc8 'out_h' 'int'
|   | | |-ImplicitCastExpr 0x7fffd843daa8 <col:48> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd843d978 <col:48> 'int' lvalue ParmVar 0x7fffd843cd40 'out_stride' 'int'
|   | | `-ImplicitCastExpr 0x7fffd843dad8 <col:60> 'unsigned int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x7fffd843dac0 <col:60> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x7fffd843d9a0 <col:60> 'int' lvalue ParmVar 0x7fffd843cf98 'prefilter_x' 'int'
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd843dd98 <line:4143:4, line:4144:71>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd843db88 <line:4143:8, col:22> 'int' '>'
|   | | |-ImplicitCastExpr 0x7fffd843db70 <col:8> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd843db28 <col:8> 'int' lvalue ParmVar 0x7fffd843d010 'prefilter_y' 'int'
|   | | `-IntegerLiteral 0x7fffd843db50 <col:22> 'int' 1
|   | |-CallExpr 0x7fffd843dcb8 <line:4144:7, col:71> 'void'
|   | | |-ImplicitCastExpr 0x7fffd843dca0 <col:7> 'void (*)(unsigned char *, int, int, int, unsigned int)' <FunctionToPointerDecay>
|   | | | `-DeclRefExpr 0x7fffd843dbb0 <col:7> 'void (unsigned char *, int, int, int, unsigned int)' Function 0x7fffd8434528 'stbtt__v_prefilter' 'void (unsigned char *, int, int, int, unsigned int)'
|   | | |-ImplicitCastExpr 0x7fffd843dd08 <col:26> 'unsigned char *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd843dbd8 <col:26> 'unsigned char *' lvalue ParmVar 0x7fffd843cbd8 'output' 'unsigned char *'
|   | | |-ImplicitCastExpr 0x7fffd843dd20 <col:34> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd843dc00 <col:34> 'int' lvalue ParmVar 0x7fffd843cc50 'out_w' 'int'
|   | | |-ImplicitCastExpr 0x7fffd843dd38 <col:41> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd843dc28 <col:41> 'int' lvalue ParmVar 0x7fffd843ccc8 'out_h' 'int'
|   | | |-ImplicitCastExpr 0x7fffd843dd50 <col:48> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd843dc50 <col:48> 'int' lvalue ParmVar 0x7fffd843cd40 'out_stride' 'int'
|   | | `-ImplicitCastExpr 0x7fffd843dd80 <col:60> 'unsigned int' <IntegralCast>
|   | |   `-ImplicitCastExpr 0x7fffd843dd68 <col:60> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x7fffd843dc78 <col:60> 'int' lvalue ParmVar 0x7fffd843d010 'prefilter_y' 'int'
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x7fffd843df08 <line:4146:4, col:48> 'float' '='
|   | |-UnaryOperator 0x7fffd843de10 <col:4, col:5> 'float' lvalue prefix '*'
|   | | `-ImplicitCastExpr 0x7fffd843ddf8 <col:5> 'float *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd843ddd0 <col:5> 'float *' lvalue ParmVar 0x7fffd843d088 'sub_x' 'float *'
|   | `-CallExpr 0x7fffd843dec0 <col:13, col:48> 'float'
|   |   |-ImplicitCastExpr 0x7fffd843dea8 <col:13> 'float (*)(int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x7fffd843de30 <col:13> 'float (int)' Function 0x7fffd84397b8 'stbtt__oversample_shift' 'float (int)'
|   |   `-ImplicitCastExpr 0x7fffd843def0 <col:37> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd843de58 <col:37> 'int' lvalue ParmVar 0x7fffd843cf98 'prefilter_x' 'int'
|   `-BinaryOperator 0x7fffd843e040 <line:4147:4, col:48> 'float' '='
|     |-UnaryOperator 0x7fffd843df70 <col:4, col:5> 'float' lvalue prefix '*'
|     | `-ImplicitCastExpr 0x7fffd843df58 <col:5> 'float *' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fffd843df30 <col:5> 'float *' lvalue ParmVar 0x7fffd843d100 'sub_y' 'float *'
|     `-CallExpr 0x7fffd843dff8 <col:13, col:48> 'float'
|       |-ImplicitCastExpr 0x7fffd843dfe0 <col:13> 'float (*)(int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x7fffd843df90 <col:13> 'float (int)' Function 0x7fffd84397b8 'stbtt__oversample_shift' 'float (int)'
|       `-ImplicitCastExpr 0x7fffd843e028 <col:37> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x7fffd843dfb8 <col:37> 'int' lvalue ParmVar 0x7fffd843d010 'prefilter_y' 'int'
|-FunctionDecl 0x7fffd843e328 prev 0x7fffd834c1a0 <line:501:19, line:4238:1> line:4151:15 used stbtt_PackFontRangesRenderIntoRects 'int (stbtt_pack_context *, const stbtt_fontinfo *, stbtt_pack_range *, int, stbrp_rect *)' extern
| |-ParmVarDecl 0x7fffd843e0b0 <col:51, col:71> col:71 used spc 'stbtt_pack_context *'
| |-ParmVarDecl 0x7fffd843e120 <col:76, col:98> col:98 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd843e190 <col:104, col:122> col:122 used ranges 'stbtt_pack_range *'
| |-ParmVarDecl 0x7fffd843e208 <col:130, col:134> col:134 used num_ranges 'int'
| |-ParmVarDecl 0x7fffd843e278 <col:146, col:158> col:158 used rects 'stbrp_rect *'
| `-CompoundStmt 0x7fffd84479c8 <line:4152:1, line:4238:1>
|   |-DeclStmt 0x7fffd843e6d8 <line:4153:4, col:51>
|   | |-VarDecl 0x7fffd843e408 <col:4, col:8> col:8 used i 'int'
|   | |-VarDecl 0x7fffd843e480 <col:4, col:10> col:10 used j 'int'
|   | |-VarDecl 0x7fffd843e4f8 <col:4, col:12> col:12 used k 'int'
|   | |-VarDecl 0x7fffd843e570 <col:4, col:32> col:15 used missing_glyph 'int' cinit
|   | | `-UnaryOperator 0x7fffd843e5f0 <col:31, col:32> 'int' prefix '-'
|   | |   `-IntegerLiteral 0x7fffd843e5d0 <col:32> 'int' 1
|   | `-VarDecl 0x7fffd843e628 <col:4, col:50> col:35 used return_value 'int' cinit
|   |   `-IntegerLiteral 0x7fffd843e688 <col:50> 'int' 1
|   |-DeclStmt 0x7fffd843e810 <line:4156:4, col:38>
|   | `-VarDecl 0x7fffd843e708 <col:4, col:26> col:8 used old_h_over 'int' cinit
|   |   `-ImplicitCastExpr 0x7fffd843e7f8 <col:21, col:26> 'int' <IntegralCast>
|   |     `-ImplicitCastExpr 0x7fffd843e7e0 <col:21, col:26> 'unsigned int' <LValueToRValue>
|   |       `-MemberExpr 0x7fffd843e7a8 <col:21, col:26> 'unsigned int' lvalue ->h_oversample 0x7fffd834c5a8
|   |         `-ImplicitCastExpr 0x7fffd843e790 <col:21> 'stbtt_pack_context *' <LValueToRValue>
|   |           `-DeclRefExpr 0x7fffd843e768 <col:21> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |-DeclStmt 0x7fffd843e948 <line:4157:4, col:38>
|   | `-VarDecl 0x7fffd843e840 <col:4, col:26> col:8 used old_v_over 'int' cinit
|   |   `-ImplicitCastExpr 0x7fffd843e930 <col:21, col:26> 'int' <IntegralCast>
|   |     `-ImplicitCastExpr 0x7fffd843e918 <col:21, col:26> 'unsigned int' <LValueToRValue>
|   |       `-MemberExpr 0x7fffd843e8e0 <col:21, col:26> 'unsigned int' lvalue ->v_oversample 0x7fffd834c608
|   |         `-ImplicitCastExpr 0x7fffd843e8c8 <col:21> 'stbtt_pack_context *' <LValueToRValue>
|   |           `-DeclRefExpr 0x7fffd843e8a0 <col:21> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |-BinaryOperator 0x7fffd843e9a8 <line:4159:4, col:8> 'int' '='
|   | |-DeclRefExpr 0x7fffd843e960 <col:4> 'int' lvalue Var 0x7fffd843e4f8 'k' 'int'
|   | `-IntegerLiteral 0x7fffd843e988 <col:8> 'int' 0
|   |-ForStmt 0x7fffd8447748 <line:4160:4, line:4231:4>
|   | |-BinaryOperator 0x7fffd843ea18 <line:4160:9, col:11> 'int' '='
|   | | |-DeclRefExpr 0x7fffd843e9d0 <col:9> 'int' lvalue Var 0x7fffd843e408 'i' 'int'
|   | | `-IntegerLiteral 0x7fffd843e9f8 <col:11> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd843eac0 <col:14, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd843ea90 <col:14> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd843ea40 <col:14> 'int' lvalue Var 0x7fffd843e408 'i' 'int'
|   | | `-ImplicitCastExpr 0x7fffd843eaa8 <col:18> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd843ea68 <col:18> 'int' lvalue ParmVar 0x7fffd843e208 'num_ranges' 'int'
|   | |-UnaryOperator 0x7fffd8441378 <col:30, col:32> 'int' prefix '++'
|   | | `-DeclRefExpr 0x7fffd8441350 <col:32> 'int' lvalue Var 0x7fffd843e408 'i' 'int'
|   | `-CompoundStmt 0x7fffd84476e8 <col:35, line:4231:4>
|   |   |-DeclStmt 0x7fffd8441508 <line:4161:7, col:37>
|   |   | `-VarDecl 0x7fffd84413b0 <col:7, col:28> col:13 used fh 'float' cinit
|   |   |   `-ImplicitCastExpr 0x7fffd84414f0 <col:18, col:28> 'float' <LValueToRValue>
|   |   |     `-MemberExpr 0x7fffd84414b8 <col:18, col:28> 'float' lvalue .font_size 0x7fffd8348398
|   |   |       `-ArraySubscriptExpr 0x7fffd8441490 <col:18, col:26> 'stbtt_pack_range':'stbtt_pack_range' lvalue
|   |   |         |-ImplicitCastExpr 0x7fffd8441460 <col:18> 'stbtt_pack_range *' <LValueToRValue>
|   |   |         | `-DeclRefExpr 0x7fffd8441410 <col:18> 'stbtt_pack_range *' lvalue ParmVar 0x7fffd843e190 'ranges' 'stbtt_pack_range *'
|   |   |         `-ImplicitCastExpr 0x7fffd8441478 <col:25> 'int' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x7fffd8441438 <col:25> 'int' lvalue Var 0x7fffd843e408 'i' 'int'
|   |   |-DeclStmt 0x7fffd8441878 <line:4162:7, col:110>
|   |   | `-VarDecl 0x7fffd8441538 <col:7, col:109> col:13 used scale 'float' cinit
|   |   |   `-ConditionalOperator 0x7fffd8441848 <col:21, col:109> 'float'
|   |   |     |-BinaryOperator 0x7fffd8441610 <col:21, col:26> 'int' '>'
|   |   |     | |-ImplicitCastExpr 0x7fffd84415e0 <col:21> 'float' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x7fffd8441598 <col:21> 'float' lvalue Var 0x7fffd84413b0 'fh' 'float'
|   |   |     | `-ImplicitCastExpr 0x7fffd84415f8 <col:26> 'float' <IntegralToFloating>
|   |   |     |   `-IntegerLiteral 0x7fffd84415c0 <col:26> 'int' 0
|   |   |     |-CallExpr 0x7fffd84416c8 <col:30, col:64> 'float'
|   |   |     | |-ImplicitCastExpr 0x7fffd84416b0 <col:30> 'float (*)(const stbtt_fontinfo *, float)' <FunctionToPointerDecay>
|   |   |     | | `-DeclRefExpr 0x7fffd8441638 <col:30> 'float (const stbtt_fontinfo *, float)' Function 0x7fffd83d81b0 'stbtt_ScaleForPixelHeight' 'float (const stbtt_fontinfo *, float)'
|   |   |     | |-ImplicitCastExpr 0x7fffd8441700 <col:56> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x7fffd8441660 <col:56> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd843e120 'info' 'const stbtt_fontinfo *'
|   |   |     | `-ImplicitCastExpr 0x7fffd8441718 <col:62> 'float' <LValueToRValue>
|   |   |     |   `-DeclRefExpr 0x7fffd8441688 <col:62> 'float' lvalue Var 0x7fffd84413b0 'fh' 'float'
|   |   |     `-CallExpr 0x7fffd84417f8 <col:68, col:109> 'float'
|   |   |       |-ImplicitCastExpr 0x7fffd84417e0 <col:68> 'float (*)(const stbtt_fontinfo *, float)' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x7fffd8441730 <col:68> 'float (const stbtt_fontinfo *, float)' Function 0x7fffd83d89c0 'stbtt_ScaleForMappingEmToPixels' 'float (const stbtt_fontinfo *, float)'
|   |   |       |-ImplicitCastExpr 0x7fffd8441830 <col:100> 'const stbtt_fontinfo *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x7fffd8441758 <col:100> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd843e120 'info' 'const stbtt_fontinfo *'
|   |   |       `-UnaryOperator 0x7fffd84417c0 <col:106, col:107> 'float' prefix '-'
|   |   |         `-ImplicitCastExpr 0x7fffd84417a8 <col:107> 'float' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x7fffd8441780 <col:107> 'float' lvalue Var 0x7fffd84413b0 'fh' 'float'
|   |   |-DeclStmt 0x7fffd8441a98 <line:4163:7, col:40>
|   |   | |-VarDecl 0x7fffd84418a8 <col:7, col:13> col:13 used recip_h 'float'
|   |   | |-VarDecl 0x7fffd8441920 <col:7, col:21> col:21 used recip_v 'float'
|   |   | |-VarDecl 0x7fffd8441998 <col:7, col:29> col:29 used sub_x 'float'
|   |   | `-VarDecl 0x7fffd8441a10 <col:7, col:35> col:35 used sub_y 'float'
|   |   |-BinaryOperator 0x7fffd8441c38 <line:4164:7, col:37> 'unsigned int' '='
|   |   | |-MemberExpr 0x7fffd8441af0 <col:7, col:12> 'unsigned int' lvalue ->h_oversample 0x7fffd834c5a8
|   |   | | `-ImplicitCastExpr 0x7fffd8441ad8 <col:7> 'stbtt_pack_context *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x7fffd8441ab0 <col:7> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |   | `-ImplicitCastExpr 0x7fffd8441c20 <col:27, col:37> 'unsigned int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x7fffd8441c08 <col:27, col:37> 'unsigned char' <LValueToRValue>
|   |   |     `-MemberExpr 0x7fffd8441bd0 <col:27, col:37> 'unsigned char' lvalue .h_oversample 0x7fffd8348570
|   |   |       `-ArraySubscriptExpr 0x7fffd8441ba8 <col:27, col:35> 'stbtt_pack_range':'stbtt_pack_range' lvalue
|   |   |         |-ImplicitCastExpr 0x7fffd8441b78 <col:27> 'stbtt_pack_range *' <LValueToRValue>
|   |   |         | `-DeclRefExpr 0x7fffd8441b28 <col:27> 'stbtt_pack_range *' lvalue ParmVar 0x7fffd843e190 'ranges' 'stbtt_pack_range *'
|   |   |         `-ImplicitCastExpr 0x7fffd8441b90 <col:34> 'int' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x7fffd8441b50 <col:34> 'int' lvalue Var 0x7fffd843e408 'i' 'int'
|   |   |-BinaryOperator 0x7fffd8441de8 <line:4165:7, col:37> 'unsigned int' '='
|   |   | |-MemberExpr 0x7fffd8441ca0 <col:7, col:12> 'unsigned int' lvalue ->v_oversample 0x7fffd834c608
|   |   | | `-ImplicitCastExpr 0x7fffd8441c88 <col:7> 'stbtt_pack_context *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x7fffd8441c60 <col:7> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |   | `-ImplicitCastExpr 0x7fffd8441dd0 <col:27, col:37> 'unsigned int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x7fffd8441db8 <col:27, col:37> 'unsigned char' <LValueToRValue>
|   |   |     `-MemberExpr 0x7fffd8441d80 <col:27, col:37> 'unsigned char' lvalue .v_oversample 0x7fffd83485d0
|   |   |       `-ArraySubscriptExpr 0x7fffd8441d58 <col:27, col:35> 'stbtt_pack_range':'stbtt_pack_range' lvalue
|   |   |         |-ImplicitCastExpr 0x7fffd8441d28 <col:27> 'stbtt_pack_range *' <LValueToRValue>
|   |   |         | `-DeclRefExpr 0x7fffd8441cd8 <col:27> 'stbtt_pack_range *' lvalue ParmVar 0x7fffd843e190 'ranges' 'stbtt_pack_range *'
|   |   |         `-ImplicitCastExpr 0x7fffd8441d40 <col:34> 'int' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x7fffd8441d00 <col:34> 'int' lvalue Var 0x7fffd843e408 'i' 'int'
|   |   |-BinaryOperator 0x7fffd8441f28 <line:4166:7, col:29> 'float' '='
|   |   | |-DeclRefExpr 0x7fffd8441e10 <col:7> 'float' lvalue Var 0x7fffd84418a8 'recip_h' 'float'
|   |   | `-BinaryOperator 0x7fffd8441f00 <col:17, col:29> 'float' '/'
|   |   |   |-FloatingLiteral 0x7fffd8441e38 <col:17> 'float' 1.000000e+00
|   |   |   `-ImplicitCastExpr 0x7fffd8441ee8 <col:24, col:29> 'float' <IntegralToFloating>
|   |   |     `-ImplicitCastExpr 0x7fffd8441ed0 <col:24, col:29> 'unsigned int' <LValueToRValue>
|   |   |       `-MemberExpr 0x7fffd8441e98 <col:24, col:29> 'unsigned int' lvalue ->h_oversample 0x7fffd834c5a8
|   |   |         `-ImplicitCastExpr 0x7fffd8441e80 <col:24> 'stbtt_pack_context *' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x7fffd8441e58 <col:24> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |   |-BinaryOperator 0x7fffd8442068 <line:4167:7, col:29> 'float' '='
|   |   | |-DeclRefExpr 0x7fffd8441f50 <col:7> 'float' lvalue Var 0x7fffd8441920 'recip_v' 'float'
|   |   | `-BinaryOperator 0x7fffd8442040 <col:17, col:29> 'float' '/'
|   |   |   |-FloatingLiteral 0x7fffd8441f78 <col:17> 'float' 1.000000e+00
|   |   |   `-ImplicitCastExpr 0x7fffd8442028 <col:24, col:29> 'float' <IntegralToFloating>
|   |   |     `-ImplicitCastExpr 0x7fffd8442010 <col:24, col:29> 'unsigned int' <LValueToRValue>
|   |   |       `-MemberExpr 0x7fffd8441fd8 <col:24, col:29> 'unsigned int' lvalue ->v_oversample 0x7fffd834c608
|   |   |         `-ImplicitCastExpr 0x7fffd8441fc0 <col:24> 'stbtt_pack_context *' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x7fffd8441f98 <col:24> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |   |-BinaryOperator 0x7fffd84421d0 <line:4168:7, col:56> 'float' '='
|   |   | |-DeclRefExpr 0x7fffd8442090 <col:7> 'float' lvalue Var 0x7fffd8441998 'sub_x' 'float'
|   |   | `-CallExpr 0x7fffd8442170 <col:15, col:56> 'float'
|   |   |   |-ImplicitCastExpr 0x7fffd8442158 <col:15> 'float (*)(int)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x7fffd84420b8 <col:15> 'float (int)' Function 0x7fffd84397b8 'stbtt__oversample_shift' 'float (int)'
|   |   |   `-ImplicitCastExpr 0x7fffd84421b8 <col:39, col:44> 'int' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x7fffd84421a0 <col:39, col:44> 'unsigned int' <LValueToRValue>
|   |   |       `-MemberExpr 0x7fffd8442120 <col:39, col:44> 'unsigned int' lvalue ->h_oversample 0x7fffd834c5a8
|   |   |         `-ImplicitCastExpr 0x7fffd8442108 <col:39> 'stbtt_pack_context *' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x7fffd84420e0 <col:39> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |   |-BinaryOperator 0x7fffd8442338 <line:4169:7, col:56> 'float' '='
|   |   | |-DeclRefExpr 0x7fffd84421f8 <col:7> 'float' lvalue Var 0x7fffd8441a10 'sub_y' 'float'
|   |   | `-CallExpr 0x7fffd84422d8 <col:15, col:56> 'float'
|   |   |   |-ImplicitCastExpr 0x7fffd84422c0 <col:15> 'float (*)(int)' <FunctionToPointerDecay>
|   |   |   | `-DeclRefExpr 0x7fffd8442220 <col:15> 'float (int)' Function 0x7fffd84397b8 'stbtt__oversample_shift' 'float (int)'
|   |   |   `-ImplicitCastExpr 0x7fffd8442320 <col:39, col:44> 'int' <IntegralCast>
|   |   |     `-ImplicitCastExpr 0x7fffd8442308 <col:39, col:44> 'unsigned int' <LValueToRValue>
|   |   |       `-MemberExpr 0x7fffd8442288 <col:39, col:44> 'unsigned int' lvalue ->v_oversample 0x7fffd834c608
|   |   |         `-ImplicitCastExpr 0x7fffd8442270 <col:39> 'stbtt_pack_context *' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x7fffd8442248 <col:39> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |   `-ForStmt 0x7fffd84476b0 <line:4170:7, line:4230:7>
|   |     |-BinaryOperator 0x7fffd84423a8 <line:4170:12, col:14> 'int' '='
|   |     | |-DeclRefExpr 0x7fffd8442360 <col:12> 'int' lvalue Var 0x7fffd843e480 'j' 'int'
|   |     | `-IntegerLiteral 0x7fffd8442388 <col:14> 'int' 0
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x7fffd8442508 <col:17, col:31> 'int' '<'
|   |     | |-ImplicitCastExpr 0x7fffd84424d8 <col:17> 'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x7fffd84423d0 <col:17> 'int' lvalue Var 0x7fffd843e480 'j' 'int'
|   |     | `-ImplicitCastExpr 0x7fffd84424f0 <col:21, col:31> 'int' <LValueToRValue>
|   |     |   `-MemberExpr 0x7fffd84424a0 <col:21, col:31> 'int' lvalue .num_chars 0x7fffd83484b8
|   |     |     `-ArraySubscriptExpr 0x7fffd8442478 <col:21, col:29> 'stbtt_pack_range':'stbtt_pack_range' lvalue
|   |     |       |-ImplicitCastExpr 0x7fffd8442448 <col:21> 'stbtt_pack_range *' <LValueToRValue>
|   |     |       | `-DeclRefExpr 0x7fffd84423f8 <col:21> 'stbtt_pack_range *' lvalue ParmVar 0x7fffd843e190 'ranges' 'stbtt_pack_range *'
|   |     |       `-ImplicitCastExpr 0x7fffd8442460 <col:28> 'int' <LValueToRValue>
|   |     |         `-DeclRefExpr 0x7fffd8442420 <col:28> 'int' lvalue Var 0x7fffd843e408 'i' 'int'
|   |     |-UnaryOperator 0x7fffd8442558 <col:42, col:44> 'int' prefix '++'
|   |     | `-DeclRefExpr 0x7fffd8442530 <col:44> 'int' lvalue Var 0x7fffd843e480 'j' 'int'
|   |     `-CompoundStmt 0x7fffd8447688 <col:47, line:4230:7>
|   |       |-DeclStmt 0x7fffd84426b0 <line:4171:10, col:35>
|   |       | `-VarDecl 0x7fffd8442588 <col:10, col:34> col:22 used r 'stbrp_rect *' cinit
|   |       |   `-UnaryOperator 0x7fffd8442690 <col:26, col:34> 'stbrp_rect *' prefix '&'
|   |       |     `-ArraySubscriptExpr 0x7fffd8442668 <col:27, col:34> 'stbrp_rect':'struct stbrp_rect' lvalue
|   |       |       |-ImplicitCastExpr 0x7fffd8442638 <col:27> 'stbrp_rect *' <LValueToRValue>
|   |       |       | `-DeclRefExpr 0x7fffd84425e8 <col:27> 'stbrp_rect *' lvalue ParmVar 0x7fffd843e278 'rects' 'stbrp_rect *'
|   |       |       `-ImplicitCastExpr 0x7fffd8442650 <col:33> 'int' <LValueToRValue>
|   |       |         `-DeclRefExpr 0x7fffd8442610 <col:33> 'int' lvalue Var 0x7fffd843e4f8 'k' 'int'
|   |       |-IfStmt 0x7fffd8447608 <line:4172:10, line:4227:10>
|   |       | |-<<<NULL>>>
|   |       | |-<<<NULL>>>
|   |       | |-BinaryOperator 0x7fffd8442930 <line:4172:14, col:52> 'int' '&&'
|   |       | | |-BinaryOperator 0x7fffd8442830 <col:14, col:39> 'int' '&&'
|   |       | | | |-ImplicitCastExpr 0x7fffd8442818 <col:14, col:17> 'int' <LValueToRValue>
|   |       | | | | `-MemberExpr 0x7fffd8442708 <col:14, col:17> 'int' lvalue ->was_packed 0x7fffd8426688
|   |       | | | |   `-ImplicitCastExpr 0x7fffd84426f0 <col:14> 'stbrp_rect *' <LValueToRValue>
|   |       | | | |     `-DeclRefExpr 0x7fffd84426c8 <col:14> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | | | `-BinaryOperator 0x7fffd84427f0 <col:31, col:39> 'int' '!='
|   |       | | |   |-ImplicitCastExpr 0x7fffd84427d8 <col:31, col:34> 'int' <LValueToRValue>
|   |       | | |   | `-MemberExpr 0x7fffd8442780 <col:31, col:34> 'int' lvalue ->w 0x7fffd84265c8
|   |       | | |   |   `-ImplicitCastExpr 0x7fffd8442768 <col:31> 'stbrp_rect *' <LValueToRValue>
|   |       | | |   |     `-DeclRefExpr 0x7fffd8442740 <col:31> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | | |   `-IntegerLiteral 0x7fffd84427b8 <col:39> 'int' 0
|   |       | | `-BinaryOperator 0x7fffd8442908 <col:44, col:52> 'int' '!='
|   |       | |   |-ImplicitCastExpr 0x7fffd84428f0 <col:44, col:47> 'int' <LValueToRValue>
|   |       | |   | `-MemberExpr 0x7fffd8442898 <col:44, col:47> 'int' lvalue ->h 0x7fffd8426628
|   |       | |   |   `-ImplicitCastExpr 0x7fffd8442880 <col:44> 'stbrp_rect *' <LValueToRValue>
|   |       | |   |     `-DeclRefExpr 0x7fffd8442858 <col:44> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | |   `-IntegerLiteral 0x7fffd84428d0 <col:52> 'int' 0
|   |       | |-CompoundStmt 0x7fffd8446ca8 <col:55, line:4221:10>
|   |       | | |-DeclStmt 0x7fffd8442b48 <line:4173:13, col:68>
|   |       | | | `-VarDecl 0x7fffd8442968 <col:13, col:67> col:31 used bc 'stbtt_packedchar *' cinit
|   |       | | |   `-UnaryOperator 0x7fffd8442b28 <col:36, col:67> 'stbtt_packedchar *' prefix '&'
|   |       | | |     `-ArraySubscriptExpr 0x7fffd8442b00 <col:37, col:67> 'stbtt_packedchar':'stbtt_packedchar' lvalue
|   |       | | |       |-ImplicitCastExpr 0x7fffd8442ad0 <col:37, col:47> 'stbtt_packedchar *' <LValueToRValue>
|   |       | | |       | `-MemberExpr 0x7fffd8442a70 <col:37, col:47> 'stbtt_packedchar *' lvalue .chardata_for_range 0x7fffd8348510
|   |       | | |       |   `-ArraySubscriptExpr 0x7fffd8442a48 <col:37, col:45> 'stbtt_pack_range':'stbtt_pack_range' lvalue
|   |       | | |       |     |-ImplicitCastExpr 0x7fffd8442a18 <col:37> 'stbtt_pack_range *' <LValueToRValue>
|   |       | | |       |     | `-DeclRefExpr 0x7fffd84429c8 <col:37> 'stbtt_pack_range *' lvalue ParmVar 0x7fffd843e190 'ranges' 'stbtt_pack_range *'
|   |       | | |       |     `-ImplicitCastExpr 0x7fffd8442a30 <col:44> 'int' <LValueToRValue>
|   |       | | |       |       `-DeclRefExpr 0x7fffd84429f0 <col:44> 'int' lvalue Var 0x7fffd843e408 'i' 'int'
|   |       | | |       `-ImplicitCastExpr 0x7fffd8442ae8 <col:66> 'int' <LValueToRValue>
|   |       | | |         `-DeclRefExpr 0x7fffd8442aa8 <col:66> 'int' lvalue Var 0x7fffd843e480 'j' 'int'
|   |       | | |-DeclStmt 0x7fffd8442e68 <line:4174:13, col:42>
|   |       | | | |-VarDecl 0x7fffd8442b78 <col:13, col:17> col:17 used advance 'int'
|   |       | | | |-VarDecl 0x7fffd8442bf0 <col:13, col:26> col:26 used lsb 'int'
|   |       | | | |-VarDecl 0x7fffd8442c68 <col:13, col:31> col:31 used x0 'int'
|   |       | | | |-VarDecl 0x7fffd8442ce0 <col:13, col:34> col:34 used y0 'int'
|   |       | | | |-VarDecl 0x7fffd8442d58 <col:13, col:37> col:37 used x1 'int'
|   |       | | | `-VarDecl 0x7fffd8442dd0 <col:13, col:40> col:40 used y1 'int'
|   |       | | |-DeclStmt 0x7fffd84433d0 <line:4175:13, col:166>
|   |       | | | `-VarDecl 0x7fffd8442e98 <col:13, col:165> col:17 used codepoint 'int' cinit
|   |       | | |   `-ConditionalOperator 0x7fffd84433a0 <col:29, col:165> 'int'
|   |       | | |     |-BinaryOperator 0x7fffd8443088 <col:29, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25> 'int' '=='
|   |       | | |     | |-ImplicitCastExpr 0x7fffd8443058 <././stb/stb_truetype.h:4175:29, col:39> 'int *' <LValueToRValue>
|   |       | | |     | | `-MemberExpr 0x7fffd8442fa0 <col:29, col:39> 'int *' lvalue .array_of_unicode_codepoints 0x7fffd8348458
|   |       | | |     | |   `-ArraySubscriptExpr 0x7fffd8442f78 <col:29, col:37> 'stbtt_pack_range':'stbtt_pack_range' lvalue
|   |       | | |     | |     |-ImplicitCastExpr 0x7fffd8442f48 <col:29> 'stbtt_pack_range *' <LValueToRValue>
|   |       | | |     | |     | `-DeclRefExpr 0x7fffd8442ef8 <col:29> 'stbtt_pack_range *' lvalue ParmVar 0x7fffd843e190 'ranges' 'stbtt_pack_range *'
|   |       | | |     | |     `-ImplicitCastExpr 0x7fffd8442f60 <col:36> 'int' <LValueToRValue>
|   |       | | |     | |       `-DeclRefExpr 0x7fffd8442f20 <col:36> 'int' lvalue Var 0x7fffd843e408 'i' 'int'
|   |       | | |     | `-ImplicitCastExpr 0x7fffd8443070 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'int *' <BitCast>
|   |       | | |     |   `-ParenExpr 0x7fffd8443038 <col:16, col:25> 'void *'
|   |       | | |     |     `-CStyleCastExpr 0x7fffd8443010 <col:17, col:24> 'void *' <NullToPointer>
|   |       | | |     |       `-IntegerLiteral 0x7fffd8442fd8 <col:24> 'int' 0
|   |       | | |     |-BinaryOperator 0x7fffd84431e8 <././stb/stb_truetype.h:4175:77, col:122> 'int' '+'
|   |       | | |     | |-ImplicitCastExpr 0x7fffd84431b8 <col:77, col:87> 'int' <LValueToRValue>
|   |       | | |     | | `-MemberExpr 0x7fffd8443158 <col:77, col:87> 'int' lvalue .first_unicode_codepoint_in_range 0x7fffd83483f8
|   |       | | |     | |   `-ArraySubscriptExpr 0x7fffd8443130 <col:77, col:85> 'stbtt_pack_range':'stbtt_pack_range' lvalue
|   |       | | |     | |     |-ImplicitCastExpr 0x7fffd8443100 <col:77> 'stbtt_pack_range *' <LValueToRValue>
|   |       | | |     | |     | `-DeclRefExpr 0x7fffd84430b0 <col:77> 'stbtt_pack_range *' lvalue ParmVar 0x7fffd843e190 'ranges' 'stbtt_pack_range *'
|   |       | | |     | |     `-ImplicitCastExpr 0x7fffd8443118 <col:84> 'int' <LValueToRValue>
|   |       | | |     | |       `-DeclRefExpr 0x7fffd84430d8 <col:84> 'int' lvalue Var 0x7fffd843e408 'i' 'int'
|   |       | | |     | `-ImplicitCastExpr 0x7fffd84431d0 <col:122> 'int' <LValueToRValue>
|   |       | | |     |   `-DeclRefExpr 0x7fffd8443190 <col:122> 'int' lvalue Var 0x7fffd843e480 'j' 'int'
|   |       | | |     `-ImplicitCastExpr 0x7fffd8443388 <col:126, col:165> 'int' <LValueToRValue>
|   |       | | |       `-ArraySubscriptExpr 0x7fffd8443360 <col:126, col:165> 'int' lvalue
|   |       | | |         |-ImplicitCastExpr 0x7fffd8443318 <col:126, col:136> 'int *' <LValueToRValue>
|   |       | | |         | `-MemberExpr 0x7fffd84432b8 <col:126, col:136> 'int *' lvalue .array_of_unicode_codepoints 0x7fffd8348458
|   |       | | |         |   `-ArraySubscriptExpr 0x7fffd8443290 <col:126, col:134> 'stbtt_pack_range':'stbtt_pack_range' lvalue
|   |       | | |         |     |-ImplicitCastExpr 0x7fffd8443260 <col:126> 'stbtt_pack_range *' <LValueToRValue>
|   |       | | |         |     | `-DeclRefExpr 0x7fffd8443210 <col:126> 'stbtt_pack_range *' lvalue ParmVar 0x7fffd843e190 'ranges' 'stbtt_pack_range *'
|   |       | | |         |     `-ImplicitCastExpr 0x7fffd8443278 <col:133> 'int' <LValueToRValue>
|   |       | | |         |       `-DeclRefExpr 0x7fffd8443238 <col:133> 'int' lvalue Var 0x7fffd843e408 'i' 'int'
|   |       | | |         `-ImplicitCastExpr 0x7fffd8443330 <col:164> 'int' <LValueToRValue>
|   |       | | |           `-DeclRefExpr 0x7fffd84432f0 <col:164> 'int' lvalue Var 0x7fffd843e480 'j' 'int'
|   |       | | |-DeclStmt 0x7fffd8443558 <line:4176:13, col:62>
|   |       | | | `-VarDecl 0x7fffd8443400 <col:13, col:61> col:17 used glyph 'int' cinit
|   |       | | |   `-CallExpr 0x7fffd84434f0 <col:25, col:61> 'int'
|   |       | | |     |-ImplicitCastExpr 0x7fffd84434d8 <col:25> 'int (*)(const stbtt_fontinfo *, int)' <FunctionToPointerDecay>
|   |       | | |     | `-DeclRefExpr 0x7fffd8443460 <col:25> 'int (const stbtt_fontinfo *, int)' Function 0x7fffd83829f0 'stbtt_FindGlyphIndex' 'int (const stbtt_fontinfo *, int)'
|   |       | | |     |-ImplicitCastExpr 0x7fffd8443528 <col:46> 'const stbtt_fontinfo *' <LValueToRValue>
|   |       | | |     | `-DeclRefExpr 0x7fffd8443488 <col:46> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd843e120 'info' 'const stbtt_fontinfo *'
|   |       | | |     `-ImplicitCastExpr 0x7fffd8443540 <col:52> 'int' <LValueToRValue>
|   |       | | |       `-DeclRefExpr 0x7fffd84434b0 <col:52> 'int' lvalue Var 0x7fffd8442e98 'codepoint' 'int'
|   |       | | |-DeclStmt 0x7fffd84436a8 <line:4177:13, col:57>
|   |       | | | `-VarDecl 0x7fffd8443580 <col:13, col:50> col:25 used pad 'stbrp_coord':'int' cinit
|   |       | | |   `-CStyleCastExpr 0x7fffd8443680 <col:31, col:50> 'stbrp_coord':'int' <NoOp>
|   |       | | |     `-ImplicitCastExpr 0x7fffd8443668 <col:45, col:50> 'int' <LValueToRValue>
|   |       | | |       `-MemberExpr 0x7fffd8443620 <col:45, col:50> 'int' lvalue ->padding 0x7fffd834c4e8
|   |       | | |         `-ImplicitCastExpr 0x7fffd8443608 <col:45> 'stbtt_pack_context *' <LValueToRValue>
|   |       | | |           `-DeclRefExpr 0x7fffd84435e0 <col:45> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |       | | |-CompoundAssignOperator 0x7fffd8443778 <line:4180:13, col:21> 'stbrp_coord':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       | | | |-MemberExpr 0x7fffd8443700 <col:13, col:16> 'stbrp_coord':'int' lvalue ->x 0x7fffd84264b0
|   |       | | | | `-ImplicitCastExpr 0x7fffd84436e8 <col:13> 'stbrp_rect *' <LValueToRValue>
|   |       | | | |   `-DeclRefExpr 0x7fffd84436c0 <col:13> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | | | `-ImplicitCastExpr 0x7fffd8443760 <col:21> 'stbrp_coord':'int' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x7fffd8443738 <col:21> 'stbrp_coord':'int' lvalue Var 0x7fffd8443580 'pad' 'stbrp_coord':'int'
|   |       | | |-CompoundAssignOperator 0x7fffd8443868 <line:4181:13, col:21> 'stbrp_coord':'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       | | | |-MemberExpr 0x7fffd84437f0 <col:13, col:16> 'stbrp_coord':'int' lvalue ->y 0x7fffd8426508
|   |       | | | | `-ImplicitCastExpr 0x7fffd84437d8 <col:13> 'stbrp_rect *' <LValueToRValue>
|   |       | | | |   `-DeclRefExpr 0x7fffd84437b0 <col:13> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | | | `-ImplicitCastExpr 0x7fffd8443850 <col:21> 'stbrp_coord':'int' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x7fffd8443828 <col:21> 'stbrp_coord':'int' lvalue Var 0x7fffd8443580 'pad' 'stbrp_coord':'int'
|   |       | | |-CompoundAssignOperator 0x7fffd8443958 <line:4182:13, col:21> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       | | | |-MemberExpr 0x7fffd84438e0 <col:13, col:16> 'int' lvalue ->w 0x7fffd84265c8
|   |       | | | | `-ImplicitCastExpr 0x7fffd84438c8 <col:13> 'stbrp_rect *' <LValueToRValue>
|   |       | | | |   `-DeclRefExpr 0x7fffd84438a0 <col:13> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | | | `-ImplicitCastExpr 0x7fffd8443940 <col:21> 'stbrp_coord':'int' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x7fffd8443918 <col:21> 'stbrp_coord':'int' lvalue Var 0x7fffd8443580 'pad' 'stbrp_coord':'int'
|   |       | | |-CompoundAssignOperator 0x7fffd8443a48 <line:4183:13, col:21> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   |       | | | |-MemberExpr 0x7fffd84439d0 <col:13, col:16> 'int' lvalue ->h 0x7fffd8426628
|   |       | | | | `-ImplicitCastExpr 0x7fffd84439b8 <col:13> 'stbrp_rect *' <LValueToRValue>
|   |       | | | |   `-DeclRefExpr 0x7fffd8443990 <col:13> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | | | `-ImplicitCastExpr 0x7fffd8443a30 <col:21> 'stbrp_coord':'int' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x7fffd8443a08 <col:21> 'stbrp_coord':'int' lvalue Var 0x7fffd8443580 'pad' 'stbrp_coord':'int'
|   |       | | |-CallExpr 0x7fffd8443ba0 <line:4184:13, col:63> 'void'
|   |       | | | |-ImplicitCastExpr 0x7fffd8443b88 <col:13> 'void (*)(const stbtt_fontinfo *, int, int *, int *)' <FunctionToPointerDecay>
|   |       | | | | `-DeclRefExpr 0x7fffd8443a80 <col:13> 'void (const stbtt_fontinfo *, int, int *, int *)' Function 0x7fffd83bff60 'stbtt_GetGlyphHMetrics' 'void (const stbtt_fontinfo *, int, int *, int *)'
|   |       | | | |-ImplicitCastExpr 0x7fffd8443be8 <col:36> 'const stbtt_fontinfo *' <LValueToRValue>
|   |       | | | | `-DeclRefExpr 0x7fffd8443aa8 <col:36> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd843e120 'info' 'const stbtt_fontinfo *'
|   |       | | | |-ImplicitCastExpr 0x7fffd8443c00 <col:42> 'int' <LValueToRValue>
|   |       | | | | `-DeclRefExpr 0x7fffd8443ad0 <col:42> 'int' lvalue Var 0x7fffd8443400 'glyph' 'int'
|   |       | | | |-UnaryOperator 0x7fffd8443b20 <col:49, col:50> 'int *' prefix '&'
|   |       | | | | `-DeclRefExpr 0x7fffd8443af8 <col:50> 'int' lvalue Var 0x7fffd8442b78 'advance' 'int'
|   |       | | | `-UnaryOperator 0x7fffd8443b68 <col:59, col:60> 'int *' prefix '&'
|   |       | | |   `-DeclRefExpr 0x7fffd8443b40 <col:60> 'int' lvalue Var 0x7fffd8442bf0 'lsb' 'int'
|   |       | | |-CallExpr 0x7fffd8443fe8 <line:4185:13, line:4188:52> 'void'
|   |       | | | |-ImplicitCastExpr 0x7fffd8443fd0 <line:4185:13> 'void (*)(const stbtt_fontinfo *, int, float, float, int *, int *, int *, int *)' <FunctionToPointerDecay>
|   |       | | | | `-DeclRefExpr 0x7fffd8443c18 <col:13> 'void (const stbtt_fontinfo *, int, float, float, int *, int *, int *, int *)' Function 0x7fffd83dd4e8 'stbtt_GetGlyphBitmapBox' 'void (const stbtt_fontinfo *, int, float, float, int *, int *, int *, int *)'
|   |       | | | |-ImplicitCastExpr 0x7fffd8444050 <col:37> 'const stbtt_fontinfo *' <LValueToRValue>
|   |       | | | | `-DeclRefExpr 0x7fffd8443c40 <col:37> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd843e120 'info' 'const stbtt_fontinfo *'
|   |       | | | |-ImplicitCastExpr 0x7fffd8444068 <col:43> 'int' <LValueToRValue>
|   |       | | | | `-DeclRefExpr 0x7fffd8443c68 <col:43> 'int' lvalue Var 0x7fffd8443400 'glyph' 'int'
|   |       | | | |-BinaryOperator 0x7fffd8443d78 <line:4186:37, col:50> 'float' '*'
|   |       | | | | |-ImplicitCastExpr 0x7fffd8443d30 <col:37> 'float' <LValueToRValue>
|   |       | | | | | `-DeclRefExpr 0x7fffd8443c90 <col:37> 'float' lvalue Var 0x7fffd8441538 'scale' 'float'
|   |       | | | | `-ImplicitCastExpr 0x7fffd8443d60 <col:45, col:50> 'float' <IntegralToFloating>
|   |       | | | |   `-ImplicitCastExpr 0x7fffd8443d48 <col:45, col:50> 'unsigned int' <LValueToRValue>
|   |       | | | |     `-MemberExpr 0x7fffd8443cf8 <col:45, col:50> 'unsigned int' lvalue ->h_oversample 0x7fffd834c5a8
|   |       | | | |       `-ImplicitCastExpr 0x7fffd8443ce0 <col:45> 'stbtt_pack_context *' <LValueToRValue>
|   |       | | | |         `-DeclRefExpr 0x7fffd8443cb8 <col:45> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |       | | | |-BinaryOperator 0x7fffd8443e88 <line:4187:37, col:50> 'float' '*'
|   |       | | | | |-ImplicitCastExpr 0x7fffd8443e40 <col:37> 'float' <LValueToRValue>
|   |       | | | | | `-DeclRefExpr 0x7fffd8443da0 <col:37> 'float' lvalue Var 0x7fffd8441538 'scale' 'float'
|   |       | | | | `-ImplicitCastExpr 0x7fffd8443e70 <col:45, col:50> 'float' <IntegralToFloating>
|   |       | | | |   `-ImplicitCastExpr 0x7fffd8443e58 <col:45, col:50> 'unsigned int' <LValueToRValue>
|   |       | | | |     `-MemberExpr 0x7fffd8443e08 <col:45, col:50> 'unsigned int' lvalue ->v_oversample 0x7fffd834c608
|   |       | | | |       `-ImplicitCastExpr 0x7fffd8443df0 <col:45> 'stbtt_pack_context *' <LValueToRValue>
|   |       | | | |         `-DeclRefExpr 0x7fffd8443dc8 <col:45> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |       | | | |-UnaryOperator 0x7fffd8443ed8 <line:4188:37, col:38> 'int *' prefix '&'
|   |       | | | | `-DeclRefExpr 0x7fffd8443eb0 <col:38> 'int' lvalue Var 0x7fffd8442c68 'x0' 'int'
|   |       | | | |-UnaryOperator 0x7fffd8443f20 <col:41, col:42> 'int *' prefix '&'
|   |       | | | | `-DeclRefExpr 0x7fffd8443ef8 <col:42> 'int' lvalue Var 0x7fffd8442ce0 'y0' 'int'
|   |       | | | |-UnaryOperator 0x7fffd8443f68 <col:45, col:46> 'int *' prefix '&'
|   |       | | | | `-DeclRefExpr 0x7fffd8443f40 <col:46> 'int' lvalue Var 0x7fffd8442d58 'x1' 'int'
|   |       | | | `-UnaryOperator 0x7fffd8443fb0 <col:49, col:50> 'int *' prefix '&'
|   |       | | |   `-DeclRefExpr 0x7fffd8443f88 <col:50> 'int' lvalue Var 0x7fffd8442dd0 'y1' 'int'
|   |       | | |-CallExpr 0x7fffd8444a20 <line:4189:13, line:4197:48> 'void'
|   |       | | | |-ImplicitCastExpr 0x7fffd8444a08 <line:4189:13> 'void (*)(const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, float, float, int)' <FunctionToPointerDecay>
|   |       | | | | `-DeclRefExpr 0x7fffd8444080 <col:13> 'void (const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, float, float, int)' Function 0x7fffd841a460 'stbtt_MakeGlyphBitmapSubpixel' 'void (const stbtt_fontinfo *, unsigned char *, int, int, int, float, float, float, float, int)'
|   |       | | | |-ImplicitCastExpr 0x7fffd8444a98 <col:43> 'const stbtt_fontinfo *' <LValueToRValue>
|   |       | | | | `-DeclRefExpr 0x7fffd84440a8 <col:43> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd843e120 'info' 'const stbtt_fontinfo *'
|   |       | | | |-BinaryOperator 0x7fffd8444360 <line:4190:43, col:74> 'unsigned char *' '+'
|   |       | | | | |-BinaryOperator 0x7fffd84441f0 <col:43, col:60> 'unsigned char *' '+'
|   |       | | | | | |-ImplicitCastExpr 0x7fffd84441c0 <col:43, col:48> 'unsigned char *' <LValueToRValue>
|   |       | | | | | | `-MemberExpr 0x7fffd8444110 <col:43, col:48> 'unsigned char *' lvalue ->pixels 0x7fffd834c668
|   |       | | | | | |   `-ImplicitCastExpr 0x7fffd84440f8 <col:43> 'stbtt_pack_context *' <LValueToRValue>
|   |       | | | | | |     `-DeclRefExpr 0x7fffd84440d0 <col:43> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |       | | | | | `-ImplicitCastExpr 0x7fffd84441d8 <col:57, col:60> 'stbrp_coord':'int' <LValueToRValue>
|   |       | | | | |   `-MemberExpr 0x7fffd8444188 <col:57, col:60> 'stbrp_coord':'int' lvalue ->x 0x7fffd84264b0
|   |       | | | | |     `-ImplicitCastExpr 0x7fffd8444170 <col:57> 'stbrp_rect *' <LValueToRValue>
|   |       | | | | |       `-DeclRefExpr 0x7fffd8444148 <col:57> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | | | | `-BinaryOperator 0x7fffd8444338 <col:64, col:74> 'int' '*'
|   |       | | | |   |-ImplicitCastExpr 0x7fffd8444308 <col:64, col:67> 'stbrp_coord':'int' <LValueToRValue>
|   |       | | | |   | `-MemberExpr 0x7fffd8444258 <col:64, col:67> 'stbrp_coord':'int' lvalue ->y 0x7fffd8426508
|   |       | | | |   |   `-ImplicitCastExpr 0x7fffd8444240 <col:64> 'stbrp_rect *' <LValueToRValue>
|   |       | | | |   |     `-DeclRefExpr 0x7fffd8444218 <col:64> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | | | |   `-ImplicitCastExpr 0x7fffd8444320 <col:69, col:74> 'int' <LValueToRValue>
|   |       | | | |     `-MemberExpr 0x7fffd84442d0 <col:69, col:74> 'int' lvalue ->stride_in_bytes 0x7fffd834c488
|   |       | | | |       `-ImplicitCastExpr 0x7fffd84442b8 <col:69> 'stbtt_pack_context *' <LValueToRValue>
|   |       | | | |         `-DeclRefExpr 0x7fffd8444290 <col:69> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |       | | | |-ImplicitCastExpr 0x7fffd8444ab0 <line:4191:43, col:68> 'int' <IntegralCast>
|   |       | | | | `-BinaryOperator 0x7fffd8444520 <col:43, col:68> 'unsigned int' '+'
|   |       | | | |   |-BinaryOperator 0x7fffd84444c0 <col:43, col:55> 'unsigned int' '-'
|   |       | | | |   | |-ImplicitCastExpr 0x7fffd84444a8 <col:43, col:46> 'unsigned int' <IntegralCast>
|   |       | | | |   | | `-ImplicitCastExpr 0x7fffd8444478 <col:43, col:46> 'int' <LValueToRValue>
|   |       | | | |   | |   `-MemberExpr 0x7fffd84443c8 <col:43, col:46> 'int' lvalue ->w 0x7fffd84265c8
|   |       | | | |   | |     `-ImplicitCastExpr 0x7fffd84443b0 <col:43> 'stbrp_rect *' <LValueToRValue>
|   |       | | | |   | |       `-DeclRefExpr 0x7fffd8444388 <col:43> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | | | |   | `-ImplicitCastExpr 0x7fffd8444490 <col:50, col:55> 'unsigned int' <LValueToRValue>
|   |       | | | |   |   `-MemberExpr 0x7fffd8444440 <col:50, col:55> 'unsigned int' lvalue ->h_oversample 0x7fffd834c5a8
|   |       | | | |   |     `-ImplicitCastExpr 0x7fffd8444428 <col:50> 'stbtt_pack_context *' <LValueToRValue>
|   |       | | | |   |       `-DeclRefExpr 0x7fffd8444400 <col:50> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |       | | | |   `-ImplicitCastExpr 0x7fffd8444508 <col:68> 'unsigned int' <IntegralCast>
|   |       | | | |     `-IntegerLiteral 0x7fffd84444e8 <col:68> 'int' 1
|   |       | | | |-ImplicitCastExpr 0x7fffd8444ac8 <line:4192:43, col:68> 'int' <IntegralCast>
|   |       | | | | `-BinaryOperator 0x7fffd84446e0 <col:43, col:68> 'unsigned int' '+'
|   |       | | | |   |-BinaryOperator 0x7fffd8444680 <col:43, col:55> 'unsigned int' '-'
|   |       | | | |   | |-ImplicitCastExpr 0x7fffd8444668 <col:43, col:46> 'unsigned int' <IntegralCast>
|   |       | | | |   | | `-ImplicitCastExpr 0x7fffd8444638 <col:43, col:46> 'int' <LValueToRValue>
|   |       | | | |   | |   `-MemberExpr 0x7fffd8444588 <col:43, col:46> 'int' lvalue ->h 0x7fffd8426628
|   |       | | | |   | |     `-ImplicitCastExpr 0x7fffd8444570 <col:43> 'stbrp_rect *' <LValueToRValue>
|   |       | | | |   | |       `-DeclRefExpr 0x7fffd8444548 <col:43> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | | | |   | `-ImplicitCastExpr 0x7fffd8444650 <col:50, col:55> 'unsigned int' <LValueToRValue>
|   |       | | | |   |   `-MemberExpr 0x7fffd8444600 <col:50, col:55> 'unsigned int' lvalue ->v_oversample 0x7fffd834c608
|   |       | | | |   |     `-ImplicitCastExpr 0x7fffd84445e8 <col:50> 'stbtt_pack_context *' <LValueToRValue>
|   |       | | | |   |       `-DeclRefExpr 0x7fffd84445c0 <col:50> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |       | | | |   `-ImplicitCastExpr 0x7fffd84446c8 <col:68> 'unsigned int' <IntegralCast>
|   |       | | | |     `-IntegerLiteral 0x7fffd84446a8 <col:68> 'int' 1
|   |       | | | |-ImplicitCastExpr 0x7fffd8444ae0 <line:4193:43, col:48> 'int' <LValueToRValue>
|   |       | | | | `-MemberExpr 0x7fffd8444748 <col:43, col:48> 'int' lvalue ->stride_in_bytes 0x7fffd834c488
|   |       | | | |   `-ImplicitCastExpr 0x7fffd8444730 <col:43> 'stbtt_pack_context *' <LValueToRValue>
|   |       | | | |     `-DeclRefExpr 0x7fffd8444708 <col:43> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |       | | | |-BinaryOperator 0x7fffd8444868 <line:4194:43, col:56> 'float' '*'
|   |       | | | | |-ImplicitCastExpr 0x7fffd8444820 <col:43> 'float' <LValueToRValue>
|   |       | | | | | `-DeclRefExpr 0x7fffd8444780 <col:43> 'float' lvalue Var 0x7fffd8441538 'scale' 'float'
|   |       | | | | `-ImplicitCastExpr 0x7fffd8444850 <col:51, col:56> 'float' <IntegralToFloating>
|   |       | | | |   `-ImplicitCastExpr 0x7fffd8444838 <col:51, col:56> 'unsigned int' <LValueToRValue>
|   |       | | | |     `-MemberExpr 0x7fffd84447e8 <col:51, col:56> 'unsigned int' lvalue ->h_oversample 0x7fffd834c5a8
|   |       | | | |       `-ImplicitCastExpr 0x7fffd84447d0 <col:51> 'stbtt_pack_context *' <LValueToRValue>
|   |       | | | |         `-DeclRefExpr 0x7fffd84447a8 <col:51> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |       | | | |-BinaryOperator 0x7fffd8444978 <line:4195:43, col:56> 'float' '*'
|   |       | | | | |-ImplicitCastExpr 0x7fffd8444930 <col:43> 'float' <LValueToRValue>
|   |       | | | | | `-DeclRefExpr 0x7fffd8444890 <col:43> 'float' lvalue Var 0x7fffd8441538 'scale' 'float'
|   |       | | | | `-ImplicitCastExpr 0x7fffd8444960 <col:51, col:56> 'float' <IntegralToFloating>
|   |       | | | |   `-ImplicitCastExpr 0x7fffd8444948 <col:51, col:56> 'unsigned int' <LValueToRValue>
|   |       | | | |     `-MemberExpr 0x7fffd84448f8 <col:51, col:56> 'unsigned int' lvalue ->v_oversample 0x7fffd834c608
|   |       | | | |       `-ImplicitCastExpr 0x7fffd84448e0 <col:51> 'stbtt_pack_context *' <LValueToRValue>
|   |       | | | |         `-DeclRefExpr 0x7fffd84448b8 <col:51> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |       | | | |-ImplicitCastExpr 0x7fffd8444af8 <line:4196:43> 'float' <IntegralToFloating>
|   |       | | | | `-IntegerLiteral 0x7fffd84449a0 <col:43> 'int' 0
|   |       | | | |-ImplicitCastExpr 0x7fffd8444b10 <col:45> 'float' <IntegralToFloating>
|   |       | | | | `-IntegerLiteral 0x7fffd84449c0 <col:45> 'int' 0
|   |       | | | `-ImplicitCastExpr 0x7fffd8444b28 <line:4197:43> 'int' <LValueToRValue>
|   |       | | |   `-DeclRefExpr 0x7fffd84449e0 <col:43> 'int' lvalue Var 0x7fffd8443400 'glyph' 'int'
|   |       | | |-IfStmt 0x7fffd84451b8 <line:4199:13, line:4202:52>
|   |       | | | |-<<<NULL>>>
|   |       | | | |-<<<NULL>>>
|   |       | | | |-BinaryOperator 0x7fffd8444c08 <line:4199:17, col:37> 'int' '>'
|   |       | | | | |-ImplicitCastExpr 0x7fffd8444bd8 <col:17, col:22> 'unsigned int' <LValueToRValue>
|   |       | | | | | `-MemberExpr 0x7fffd8444b80 <col:17, col:22> 'unsigned int' lvalue ->h_oversample 0x7fffd834c5a8
|   |       | | | | |   `-ImplicitCastExpr 0x7fffd8444b68 <col:17> 'stbtt_pack_context *' <LValueToRValue>
|   |       | | | | |     `-DeclRefExpr 0x7fffd8444b40 <col:17> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |       | | | | `-ImplicitCastExpr 0x7fffd8444bf0 <col:37> 'unsigned int' <IntegralCast>
|   |       | | | |   `-IntegerLiteral 0x7fffd8444bb8 <col:37> 'int' 1
|   |       | | | |-CallExpr 0x7fffd8445108 <line:4200:16, line:4202:52> 'void'
|   |       | | | | |-ImplicitCastExpr 0x7fffd84450f0 <line:4200:16> 'void (*)(unsigned char *, int, int, int, unsigned int)' <FunctionToPointerDecay>
|   |       | | | | | `-DeclRefExpr 0x7fffd8444c30 <col:16> 'void (unsigned char *, int, int, int, unsigned int)' Function 0x7fffd842e390 'stbtt__h_prefilter' 'void (unsigned char *, int, int, int, unsigned int)'
|   |       | | | | |-BinaryOperator 0x7fffd8444ee8 <col:35, col:66> 'unsigned char *' '+'
|   |       | | | | | |-BinaryOperator 0x7fffd8444d78 <col:35, col:52> 'unsigned char *' '+'
|   |       | | | | | | |-ImplicitCastExpr 0x7fffd8444d48 <col:35, col:40> 'unsigned char *' <LValueToRValue>
|   |       | | | | | | | `-MemberExpr 0x7fffd8444c98 <col:35, col:40> 'unsigned char *' lvalue ->pixels 0x7fffd834c668
|   |       | | | | | | |   `-ImplicitCastExpr 0x7fffd8444c80 <col:35> 'stbtt_pack_context *' <LValueToRValue>
|   |       | | | | | | |     `-DeclRefExpr 0x7fffd8444c58 <col:35> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |       | | | | | | `-ImplicitCastExpr 0x7fffd8444d60 <col:49, col:52> 'stbrp_coord':'int' <LValueToRValue>
|   |       | | | | | |   `-MemberExpr 0x7fffd8444d10 <col:49, col:52> 'stbrp_coord':'int' lvalue ->x 0x7fffd84264b0
|   |       | | | | | |     `-ImplicitCastExpr 0x7fffd8444cf8 <col:49> 'stbrp_rect *' <LValueToRValue>
|   |       | | | | | |       `-DeclRefExpr 0x7fffd8444cd0 <col:49> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | | | | | `-BinaryOperator 0x7fffd8444ec0 <col:56, col:66> 'int' '*'
|   |       | | | | |   |-ImplicitCastExpr 0x7fffd8444e90 <col:56, col:59> 'stbrp_coord':'int' <LValueToRValue>
|   |       | | | | |   | `-MemberExpr 0x7fffd8444de0 <col:56, col:59> 'stbrp_coord':'int' lvalue ->y 0x7fffd8426508
|   |       | | | | |   |   `-ImplicitCastExpr 0x7fffd8444dc8 <col:56> 'stbrp_rect *' <LValueToRValue>
|   |       | | | | |   |     `-DeclRefExpr 0x7fffd8444da0 <col:56> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | | | | |   `-ImplicitCastExpr 0x7fffd8444ea8 <col:61, col:66> 'int' <LValueToRValue>
|   |       | | | | |     `-MemberExpr 0x7fffd8444e58 <col:61, col:66> 'int' lvalue ->stride_in_bytes 0x7fffd834c488
|   |       | | | | |       `-ImplicitCastExpr 0x7fffd8444e40 <col:61> 'stbtt_pack_context *' <LValueToRValue>
|   |       | | | | |         `-DeclRefExpr 0x7fffd8444e18 <col:61> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |       | | | | |-ImplicitCastExpr 0x7fffd8445158 <line:4201:35, col:38> 'int' <LValueToRValue>
|   |       | | | | | `-MemberExpr 0x7fffd8444f50 <col:35, col:38> 'int' lvalue ->w 0x7fffd84265c8
|   |       | | | | |   `-ImplicitCastExpr 0x7fffd8444f38 <col:35> 'stbrp_rect *' <LValueToRValue>
|   |       | | | | |     `-DeclRefExpr 0x7fffd8444f10 <col:35> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | | | | |-ImplicitCastExpr 0x7fffd8445170 <col:41, col:44> 'int' <LValueToRValue>
|   |       | | | | | `-MemberExpr 0x7fffd8444fc8 <col:41, col:44> 'int' lvalue ->h 0x7fffd8426628
|   |       | | | | |   `-ImplicitCastExpr 0x7fffd8444fb0 <col:41> 'stbrp_rect *' <LValueToRValue>
|   |       | | | | |     `-DeclRefExpr 0x7fffd8444f88 <col:41> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | | | | |-ImplicitCastExpr 0x7fffd8445188 <col:47, col:52> 'int' <LValueToRValue>
|   |       | | | | | `-MemberExpr 0x7fffd8445040 <col:47, col:52> 'int' lvalue ->stride_in_bytes 0x7fffd834c488
|   |       | | | | |   `-ImplicitCastExpr 0x7fffd8445028 <col:47> 'stbtt_pack_context *' <LValueToRValue>
|   |       | | | | |     `-DeclRefExpr 0x7fffd8445000 <col:47> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |       | | | | `-ImplicitCastExpr 0x7fffd84451a0 <line:4202:35, col:40> 'unsigned int' <LValueToRValue>
|   |       | | | |   `-MemberExpr 0x7fffd84450b8 <col:35, col:40> 'unsigned int' lvalue ->h_oversample 0x7fffd834c5a8
|   |       | | | |     `-ImplicitCastExpr 0x7fffd84450a0 <col:35> 'stbtt_pack_context *' <LValueToRValue>
|   |       | | | |       `-DeclRefExpr 0x7fffd8445078 <col:35> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |       | | | `-<<<NULL>>>
|   |       | | |-IfStmt 0x7fffd8445890 <line:4204:13, line:4207:52>
|   |       | | | |-<<<NULL>>>
|   |       | | | |-<<<NULL>>>
|   |       | | | |-BinaryOperator 0x7fffd84452b8 <line:4204:17, col:37> 'int' '>'
|   |       | | | | |-ImplicitCastExpr 0x7fffd8445288 <col:17, col:22> 'unsigned int' <LValueToRValue>
|   |       | | | | | `-MemberExpr 0x7fffd8445230 <col:17, col:22> 'unsigned int' lvalue ->v_oversample 0x7fffd834c608
|   |       | | | | |   `-ImplicitCastExpr 0x7fffd8445218 <col:17> 'stbtt_pack_context *' <LValueToRValue>
|   |       | | | | |     `-DeclRefExpr 0x7fffd84451f0 <col:17> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |       | | | | `-ImplicitCastExpr 0x7fffd84452a0 <col:37> 'unsigned int' <IntegralCast>
|   |       | | | |   `-IntegerLiteral 0x7fffd8445268 <col:37> 'int' 1
|   |       | | | |-CallExpr 0x7fffd84457e0 <line:4205:16, line:4207:52> 'void'
|   |       | | | | |-ImplicitCastExpr 0x7fffd84457c8 <line:4205:16> 'void (*)(unsigned char *, int, int, int, unsigned int)' <FunctionToPointerDecay>
|   |       | | | | | `-DeclRefExpr 0x7fffd84452e0 <col:16> 'void (unsigned char *, int, int, int, unsigned int)' Function 0x7fffd8434528 'stbtt__v_prefilter' 'void (unsigned char *, int, int, int, unsigned int)'
|   |       | | | | |-BinaryOperator 0x7fffd84455c0 <col:35, col:66> 'unsigned char *' '+'
|   |       | | | | | |-BinaryOperator 0x7fffd8445450 <col:35, col:52> 'unsigned char *' '+'
|   |       | | | | | | |-ImplicitCastExpr 0x7fffd8445420 <col:35, col:40> 'unsigned char *' <LValueToRValue>
|   |       | | | | | | | `-MemberExpr 0x7fffd8445370 <col:35, col:40> 'unsigned char *' lvalue ->pixels 0x7fffd834c668
|   |       | | | | | | |   `-ImplicitCastExpr 0x7fffd8445330 <col:35> 'stbtt_pack_context *' <LValueToRValue>
|   |       | | | | | | |     `-DeclRefExpr 0x7fffd8445308 <col:35> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |       | | | | | | `-ImplicitCastExpr 0x7fffd8445438 <col:49, col:52> 'stbrp_coord':'int' <LValueToRValue>
|   |       | | | | | |   `-MemberExpr 0x7fffd84453e8 <col:49, col:52> 'stbrp_coord':'int' lvalue ->x 0x7fffd84264b0
|   |       | | | | | |     `-ImplicitCastExpr 0x7fffd84453d0 <col:49> 'stbrp_rect *' <LValueToRValue>
|   |       | | | | | |       `-DeclRefExpr 0x7fffd84453a8 <col:49> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | | | | | `-BinaryOperator 0x7fffd8445598 <col:56, col:66> 'int' '*'
|   |       | | | | |   |-ImplicitCastExpr 0x7fffd8445568 <col:56, col:59> 'stbrp_coord':'int' <LValueToRValue>
|   |       | | | | |   | `-MemberExpr 0x7fffd84454b8 <col:56, col:59> 'stbrp_coord':'int' lvalue ->y 0x7fffd8426508
|   |       | | | | |   |   `-ImplicitCastExpr 0x7fffd84454a0 <col:56> 'stbrp_rect *' <LValueToRValue>
|   |       | | | | |   |     `-DeclRefExpr 0x7fffd8445478 <col:56> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | | | | |   `-ImplicitCastExpr 0x7fffd8445580 <col:61, col:66> 'int' <LValueToRValue>
|   |       | | | | |     `-MemberExpr 0x7fffd8445530 <col:61, col:66> 'int' lvalue ->stride_in_bytes 0x7fffd834c488
|   |       | | | | |       `-ImplicitCastExpr 0x7fffd8445518 <col:61> 'stbtt_pack_context *' <LValueToRValue>
|   |       | | | | |         `-DeclRefExpr 0x7fffd84454f0 <col:61> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |       | | | | |-ImplicitCastExpr 0x7fffd8445830 <line:4206:35, col:38> 'int' <LValueToRValue>
|   |       | | | | | `-MemberExpr 0x7fffd8445628 <col:35, col:38> 'int' lvalue ->w 0x7fffd84265c8
|   |       | | | | |   `-ImplicitCastExpr 0x7fffd8445610 <col:35> 'stbrp_rect *' <LValueToRValue>
|   |       | | | | |     `-DeclRefExpr 0x7fffd84455e8 <col:35> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | | | | |-ImplicitCastExpr 0x7fffd8445848 <col:41, col:44> 'int' <LValueToRValue>
|   |       | | | | | `-MemberExpr 0x7fffd84456a0 <col:41, col:44> 'int' lvalue ->h 0x7fffd8426628
|   |       | | | | |   `-ImplicitCastExpr 0x7fffd8445688 <col:41> 'stbrp_rect *' <LValueToRValue>
|   |       | | | | |     `-DeclRefExpr 0x7fffd8445660 <col:41> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | | | | |-ImplicitCastExpr 0x7fffd8445860 <col:47, col:52> 'int' <LValueToRValue>
|   |       | | | | | `-MemberExpr 0x7fffd8445718 <col:47, col:52> 'int' lvalue ->stride_in_bytes 0x7fffd834c488
|   |       | | | | |   `-ImplicitCastExpr 0x7fffd8445700 <col:47> 'stbtt_pack_context *' <LValueToRValue>
|   |       | | | | |     `-DeclRefExpr 0x7fffd84456d8 <col:47> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |       | | | | `-ImplicitCastExpr 0x7fffd8445878 <line:4207:35, col:40> 'unsigned int' <LValueToRValue>
|   |       | | | |   `-MemberExpr 0x7fffd8445790 <col:35, col:40> 'unsigned int' lvalue ->v_oversample 0x7fffd834c608
|   |       | | | |     `-ImplicitCastExpr 0x7fffd8445778 <col:35> 'stbtt_pack_context *' <LValueToRValue>
|   |       | | | |       `-DeclRefExpr 0x7fffd8445750 <col:35> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |       | | | `-<<<NULL>>>
|   |       | | |-BinaryOperator 0x7fffd8445a20 <line:4209:13, col:46> 'unsigned short' '='
|   |       | | | |-MemberExpr 0x7fffd8445908 <col:13, col:17> 'unsigned short' lvalue ->x0 0x7fffd8342ca8
|   |       | | | | `-ImplicitCastExpr 0x7fffd84458f0 <col:13> 'stbtt_packedchar *' <LValueToRValue>
|   |       | | | |   `-DeclRefExpr 0x7fffd84458c8 <col:13> 'stbtt_packedchar *' lvalue Var 0x7fffd8442968 'bc' 'stbtt_packedchar *'
|   |       | | | `-ImplicitCastExpr 0x7fffd8445a08 <col:28, col:46> 'unsigned short' <IntegralCast>
|   |       | | |   `-CStyleCastExpr 0x7fffd84459e0 <col:28, col:46> 'stbtt_int16':'short' <IntegralCast>
|   |       | | |     `-ImplicitCastExpr 0x7fffd84459c8 <col:43, col:46> 'stbrp_coord':'int' <LValueToRValue>
|   |       | | |       `-MemberExpr 0x7fffd8445980 <col:43, col:46> 'stbrp_coord':'int' lvalue ->x 0x7fffd84264b0
|   |       | | |         `-ImplicitCastExpr 0x7fffd8445968 <col:43> 'stbrp_rect *' <LValueToRValue>
|   |       | | |           `-DeclRefExpr 0x7fffd8445940 <col:43> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | | |-BinaryOperator 0x7fffd8445ba0 <line:4210:13, col:46> 'unsigned short' '='
|   |       | | | |-MemberExpr 0x7fffd8445a88 <col:13, col:17> 'unsigned short' lvalue ->y0 0x7fffd8342d08
|   |       | | | | `-ImplicitCastExpr 0x7fffd8445a70 <col:13> 'stbtt_packedchar *' <LValueToRValue>
|   |       | | | |   `-DeclRefExpr 0x7fffd8445a48 <col:13> 'stbtt_packedchar *' lvalue Var 0x7fffd8442968 'bc' 'stbtt_packedchar *'
|   |       | | | `-ImplicitCastExpr 0x7fffd8445b88 <col:28, col:46> 'unsigned short' <IntegralCast>
|   |       | | |   `-CStyleCastExpr 0x7fffd8445b60 <col:28, col:46> 'stbtt_int16':'short' <IntegralCast>
|   |       | | |     `-ImplicitCastExpr 0x7fffd8445b48 <col:43, col:46> 'stbrp_coord':'int' <LValueToRValue>
|   |       | | |       `-MemberExpr 0x7fffd8445b00 <col:43, col:46> 'stbrp_coord':'int' lvalue ->y 0x7fffd8426508
|   |       | | |         `-ImplicitCastExpr 0x7fffd8445ae8 <col:43> 'stbrp_rect *' <LValueToRValue>
|   |       | | |           `-DeclRefExpr 0x7fffd8445ac0 <col:43> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | | |-BinaryOperator 0x7fffd8445e28 <line:4211:13, col:54> 'unsigned short' '='
|   |       | | | |-MemberExpr 0x7fffd8445c08 <col:13, col:17> 'unsigned short' lvalue ->x1 0x7fffd8342d68
|   |       | | | | `-ImplicitCastExpr 0x7fffd8445bf0 <col:13> 'stbtt_packedchar *' <LValueToRValue>
|   |       | | | |   `-DeclRefExpr 0x7fffd8445bc8 <col:13> 'stbtt_packedchar *' lvalue Var 0x7fffd8442968 'bc' 'stbtt_packedchar *'
|   |       | | | `-ImplicitCastExpr 0x7fffd8445e10 <col:28, col:54> 'unsigned short' <IntegralCast>
|   |       | | |   `-CStyleCastExpr 0x7fffd8445de8 <col:28, col:54> 'stbtt_int16':'short' <IntegralCast>
|   |       | | |     `-ParenExpr 0x7fffd8445dc8 <col:42, col:54> 'int'
|   |       | | |       `-BinaryOperator 0x7fffd8445d60 <col:43, col:53> 'int' '+'
|   |       | | |         |-ImplicitCastExpr 0x7fffd8445d30 <col:43, col:46> 'stbrp_coord':'int' <LValueToRValue>
|   |       | | |         | `-MemberExpr 0x7fffd8445c80 <col:43, col:46> 'stbrp_coord':'int' lvalue ->x 0x7fffd84264b0
|   |       | | |         |   `-ImplicitCastExpr 0x7fffd8445c68 <col:43> 'stbrp_rect *' <LValueToRValue>
|   |       | | |         |     `-DeclRefExpr 0x7fffd8445c40 <col:43> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | | |         `-ImplicitCastExpr 0x7fffd8445d48 <col:50, col:53> 'int' <LValueToRValue>
|   |       | | |           `-MemberExpr 0x7fffd8445cf8 <col:50, col:53> 'int' lvalue ->w 0x7fffd84265c8
|   |       | | |             `-ImplicitCastExpr 0x7fffd8445ce0 <col:50> 'stbrp_rect *' <LValueToRValue>
|   |       | | |               `-DeclRefExpr 0x7fffd8445cb8 <col:50> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | | |-BinaryOperator 0x7fffd84460b0 <line:4212:13, col:54> 'unsigned short' '='
|   |       | | | |-MemberExpr 0x7fffd8445e90 <col:13, col:17> 'unsigned short' lvalue ->y1 0x7fffd8342dc8
|   |       | | | | `-ImplicitCastExpr 0x7fffd8445e78 <col:13> 'stbtt_packedchar *' <LValueToRValue>
|   |       | | | |   `-DeclRefExpr 0x7fffd8445e50 <col:13> 'stbtt_packedchar *' lvalue Var 0x7fffd8442968 'bc' 'stbtt_packedchar *'
|   |       | | | `-ImplicitCastExpr 0x7fffd8446098 <col:28, col:54> 'unsigned short' <IntegralCast>
|   |       | | |   `-CStyleCastExpr 0x7fffd8446070 <col:28, col:54> 'stbtt_int16':'short' <IntegralCast>
|   |       | | |     `-ParenExpr 0x7fffd8446050 <col:42, col:54> 'int'
|   |       | | |       `-BinaryOperator 0x7fffd8445fe8 <col:43, col:53> 'int' '+'
|   |       | | |         |-ImplicitCastExpr 0x7fffd8445fb8 <col:43, col:46> 'stbrp_coord':'int' <LValueToRValue>
|   |       | | |         | `-MemberExpr 0x7fffd8445f08 <col:43, col:46> 'stbrp_coord':'int' lvalue ->y 0x7fffd8426508
|   |       | | |         |   `-ImplicitCastExpr 0x7fffd8445ef0 <col:43> 'stbrp_rect *' <LValueToRValue>
|   |       | | |         |     `-DeclRefExpr 0x7fffd8445ec8 <col:43> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | | |         `-ImplicitCastExpr 0x7fffd8445fd0 <col:50, col:53> 'int' <LValueToRValue>
|   |       | | |           `-MemberExpr 0x7fffd8445f80 <col:50, col:53> 'int' lvalue ->h 0x7fffd8426628
|   |       | | |             `-ImplicitCastExpr 0x7fffd8445f68 <col:50> 'stbrp_rect *' <LValueToRValue>
|   |       | | |               `-DeclRefExpr 0x7fffd8445f40 <col:50> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | | |-BinaryOperator 0x7fffd8446210 <line:4213:13, col:51> 'float' '='
|   |       | | | |-MemberExpr 0x7fffd8446118 <col:13, col:17> 'float' lvalue ->xadvance 0x7fffd8342ee8
|   |       | | | | `-ImplicitCastExpr 0x7fffd8446100 <col:13> 'stbtt_packedchar *' <LValueToRValue>
|   |       | | | |   `-DeclRefExpr 0x7fffd84460d8 <col:13> 'stbtt_packedchar *' lvalue Var 0x7fffd8442968 'bc' 'stbtt_packedchar *'
|   |       | | | `-BinaryOperator 0x7fffd84461e8 <col:43, col:51> 'float' '*'
|   |       | | |   |-ImplicitCastExpr 0x7fffd84461a0 <col:43> 'float' <LValueToRValue>
|   |       | | |   | `-DeclRefExpr 0x7fffd8446150 <col:43> 'float' lvalue Var 0x7fffd8441538 'scale' 'float'
|   |       | | |   `-ImplicitCastExpr 0x7fffd84461d0 <col:51> 'float' <IntegralToFloating>
|   |       | | |     `-ImplicitCastExpr 0x7fffd84461b8 <col:51> 'int' <LValueToRValue>
|   |       | | |       `-DeclRefExpr 0x7fffd8446178 <col:51> 'int' lvalue Var 0x7fffd8442b78 'advance' 'int'
|   |       | | |-BinaryOperator 0x7fffd8446400 <line:4214:13, col:58> 'float' '='
|   |       | | | |-MemberExpr 0x7fffd8446278 <col:13, col:17> 'float' lvalue ->xoff 0x7fffd8342e28
|   |       | | | | `-ImplicitCastExpr 0x7fffd8446260 <col:13> 'stbtt_packedchar *' <LValueToRValue>
|   |       | | | |   `-DeclRefExpr 0x7fffd8446238 <col:13> 'stbtt_packedchar *' lvalue Var 0x7fffd8442968 'bc' 'stbtt_packedchar *'
|   |       | | | `-BinaryOperator 0x7fffd84463d8 <col:34, col:58> 'float' '+'
|   |       | | |   |-BinaryOperator 0x7fffd8446370 <col:34, col:48> 'float' '*'
|   |       | | |   | |-CStyleCastExpr 0x7fffd8446308 <col:34, col:43> 'float' <IntegralToFloating>
|   |       | | |   | | `-ImplicitCastExpr 0x7fffd84462f0 <col:43> 'int' <LValueToRValue>
|   |       | | |   | |   `-DeclRefExpr 0x7fffd84462b0 <col:43> 'int' lvalue Var 0x7fffd8442c68 'x0' 'int'
|   |       | | |   | `-ImplicitCastExpr 0x7fffd8446358 <col:48> 'float' <LValueToRValue>
|   |       | | |   |   `-DeclRefExpr 0x7fffd8446330 <col:48> 'float' lvalue Var 0x7fffd84418a8 'recip_h' 'float'
|   |       | | |   `-ImplicitCastExpr 0x7fffd84463c0 <col:58> 'float' <LValueToRValue>
|   |       | | |     `-DeclRefExpr 0x7fffd8446398 <col:58> 'float' lvalue Var 0x7fffd8441998 'sub_x' 'float'
|   |       | | |-BinaryOperator 0x7fffd84465f0 <line:4215:13, col:58> 'float' '='
|   |       | | | |-MemberExpr 0x7fffd8446468 <col:13, col:17> 'float' lvalue ->yoff 0x7fffd8342e88
|   |       | | | | `-ImplicitCastExpr 0x7fffd8446450 <col:13> 'stbtt_packedchar *' <LValueToRValue>
|   |       | | | |   `-DeclRefExpr 0x7fffd8446428 <col:13> 'stbtt_packedchar *' lvalue Var 0x7fffd8442968 'bc' 'stbtt_packedchar *'
|   |       | | | `-BinaryOperator 0x7fffd84465c8 <col:34, col:58> 'float' '+'
|   |       | | |   |-BinaryOperator 0x7fffd8446560 <col:34, col:48> 'float' '*'
|   |       | | |   | |-CStyleCastExpr 0x7fffd84464f8 <col:34, col:43> 'float' <IntegralToFloating>
|   |       | | |   | | `-ImplicitCastExpr 0x7fffd84464e0 <col:43> 'int' <LValueToRValue>
|   |       | | |   | |   `-DeclRefExpr 0x7fffd84464a0 <col:43> 'int' lvalue Var 0x7fffd8442ce0 'y0' 'int'
|   |       | | |   | `-ImplicitCastExpr 0x7fffd8446548 <col:48> 'float' <LValueToRValue>
|   |       | | |   |   `-DeclRefExpr 0x7fffd8446520 <col:48> 'float' lvalue Var 0x7fffd8441920 'recip_v' 'float'
|   |       | | |   `-ImplicitCastExpr 0x7fffd84465b0 <col:58> 'float' <LValueToRValue>
|   |       | | |     `-DeclRefExpr 0x7fffd8446588 <col:58> 'float' lvalue Var 0x7fffd8441a10 'sub_y' 'float'
|   |       | | |-BinaryOperator 0x7fffd8446890 <line:4216:13, col:67> 'float' '='
|   |       | | | |-MemberExpr 0x7fffd8446658 <col:13, col:17> 'float' lvalue ->xoff2 0x7fffd8342f48
|   |       | | | | `-ImplicitCastExpr 0x7fffd8446640 <col:13> 'stbtt_packedchar *' <LValueToRValue>
|   |       | | | |   `-DeclRefExpr 0x7fffd8446618 <col:13> 'stbtt_packedchar *' lvalue Var 0x7fffd8442968 'bc' 'stbtt_packedchar *'
|   |       | | | `-BinaryOperator 0x7fffd8446868 <col:43, col:67> 'float' '+'
|   |       | | |   |-BinaryOperator 0x7fffd8446800 <col:43, col:57> 'float' '*'
|   |       | | |   | |-ImplicitCastExpr 0x7fffd84467e8 <col:43, col:53> 'float' <IntegralToFloating>
|   |       | | |   | | `-ParenExpr 0x7fffd8446788 <col:43, col:53> 'int'
|   |       | | |   | |   `-BinaryOperator 0x7fffd8446760 <col:44, col:52> 'int' '+'
|   |       | | |   | |     |-ImplicitCastExpr 0x7fffd8446730 <col:44> 'int' <LValueToRValue>
|   |       | | |   | |     | `-DeclRefExpr 0x7fffd8446690 <col:44> 'int' lvalue Var 0x7fffd8442c68 'x0' 'int'
|   |       | | |   | |     `-ImplicitCastExpr 0x7fffd8446748 <col:49, col:52> 'int' <LValueToRValue>
|   |       | | |   | |       `-MemberExpr 0x7fffd84466f8 <col:49, col:52> 'int' lvalue ->w 0x7fffd84265c8
|   |       | | |   | |         `-ImplicitCastExpr 0x7fffd84466e0 <col:49> 'stbrp_rect *' <LValueToRValue>
|   |       | | |   | |           `-DeclRefExpr 0x7fffd84466b8 <col:49> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | | |   | `-ImplicitCastExpr 0x7fffd84467d0 <col:57> 'float' <LValueToRValue>
|   |       | | |   |   `-DeclRefExpr 0x7fffd84467a8 <col:57> 'float' lvalue Var 0x7fffd84418a8 'recip_h' 'float'
|   |       | | |   `-ImplicitCastExpr 0x7fffd8446850 <col:67> 'float' <LValueToRValue>
|   |       | | |     `-DeclRefExpr 0x7fffd8446828 <col:67> 'float' lvalue Var 0x7fffd8441998 'sub_x' 'float'
|   |       | | |-BinaryOperator 0x7fffd8446b30 <line:4217:13, col:67> 'float' '='
|   |       | | | |-MemberExpr 0x7fffd84468f8 <col:13, col:17> 'float' lvalue ->yoff2 0x7fffd8342fa8
|   |       | | | | `-ImplicitCastExpr 0x7fffd84468e0 <col:13> 'stbtt_packedchar *' <LValueToRValue>
|   |       | | | |   `-DeclRefExpr 0x7fffd84468b8 <col:13> 'stbtt_packedchar *' lvalue Var 0x7fffd8442968 'bc' 'stbtt_packedchar *'
|   |       | | | `-BinaryOperator 0x7fffd8446b08 <col:43, col:67> 'float' '+'
|   |       | | |   |-BinaryOperator 0x7fffd8446aa0 <col:43, col:57> 'float' '*'
|   |       | | |   | |-ImplicitCastExpr 0x7fffd8446a88 <col:43, col:53> 'float' <IntegralToFloating>
|   |       | | |   | | `-ParenExpr 0x7fffd8446a28 <col:43, col:53> 'int'
|   |       | | |   | |   `-BinaryOperator 0x7fffd8446a00 <col:44, col:52> 'int' '+'
|   |       | | |   | |     |-ImplicitCastExpr 0x7fffd84469d0 <col:44> 'int' <LValueToRValue>
|   |       | | |   | |     | `-DeclRefExpr 0x7fffd8446930 <col:44> 'int' lvalue Var 0x7fffd8442ce0 'y0' 'int'
|   |       | | |   | |     `-ImplicitCastExpr 0x7fffd84469e8 <col:49, col:52> 'int' <LValueToRValue>
|   |       | | |   | |       `-MemberExpr 0x7fffd8446998 <col:49, col:52> 'int' lvalue ->h 0x7fffd8426628
|   |       | | |   | |         `-ImplicitCastExpr 0x7fffd8446980 <col:49> 'stbrp_rect *' <LValueToRValue>
|   |       | | |   | |           `-DeclRefExpr 0x7fffd8446958 <col:49> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       | | |   | `-ImplicitCastExpr 0x7fffd8446a70 <col:57> 'float' <LValueToRValue>
|   |       | | |   |   `-DeclRefExpr 0x7fffd8446a48 <col:57> 'float' lvalue Var 0x7fffd8441920 'recip_v' 'float'
|   |       | | |   `-ImplicitCastExpr 0x7fffd8446af0 <col:67> 'float' <LValueToRValue>
|   |       | | |     `-DeclRefExpr 0x7fffd8446ac8 <col:67> 'float' lvalue Var 0x7fffd8441a10 'sub_y' 'float'
|   |       | | `-IfStmt 0x7fffd8446c70 <line:4219:13, line:4220:32>
|   |       | |   |-<<<NULL>>>
|   |       | |   |-<<<NULL>>>
|   |       | |   |-BinaryOperator 0x7fffd8446bb8 <line:4219:17, col:26> 'int' '=='
|   |       | |   | |-ImplicitCastExpr 0x7fffd8446ba0 <col:17> 'int' <LValueToRValue>
|   |       | |   | | `-DeclRefExpr 0x7fffd8446b58 <col:17> 'int' lvalue Var 0x7fffd8443400 'glyph' 'int'
|   |       | |   | `-IntegerLiteral 0x7fffd8446b80 <col:26> 'int' 0
|   |       | |   |-BinaryOperator 0x7fffd8446c48 <line:4220:16, col:32> 'int' '='
|   |       | |   | |-DeclRefExpr 0x7fffd8446be0 <col:16> 'int' lvalue Var 0x7fffd843e570 'missing_glyph' 'int'
|   |       | |   | `-ImplicitCastExpr 0x7fffd8446c30 <col:32> 'int' <LValueToRValue>
|   |       | |   |   `-DeclRefExpr 0x7fffd8446c08 <col:32> 'int' lvalue Var 0x7fffd843e480 'j' 'int'
|   |       | |   `-<<<NULL>>>
|   |       | `-IfStmt 0x7fffd84475d0 <line:4221:17, line:4227:10>
|   |       |   |-<<<NULL>>>
|   |       |   |-<<<NULL>>>
|   |       |   |-ImplicitCastExpr 0x7fffd8446df0 <line:4221:21, col:26> 'int' <LValueToRValue>
|   |       |   | `-MemberExpr 0x7fffd8446db8 <col:21, col:26> 'int' lvalue ->skip_missing 0x7fffd834c548
|   |       |   |   `-ImplicitCastExpr 0x7fffd8446da0 <col:21> 'stbtt_pack_context *' <LValueToRValue>
|   |       |   |     `-DeclRefExpr 0x7fffd8446d78 <col:21> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   |       |   |-CompoundStmt 0x7fffd8446e78 <col:40, line:4223:10>
|   |       |   | `-BinaryOperator 0x7fffd8446e50 <line:4222:13, col:28> 'int' '='
|   |       |   |   |-DeclRefExpr 0x7fffd8446e08 <col:13> 'int' lvalue Var 0x7fffd843e628 'return_value' 'int'
|   |       |   |   `-IntegerLiteral 0x7fffd8446e30 <col:28> 'int' 0
|   |       |   `-IfStmt 0x7fffd8447598 <line:4223:17, line:4227:10>
|   |       |     |-<<<NULL>>>
|   |       |     |-<<<NULL>>>
|   |       |     |-BinaryOperator 0x7fffd84471a8 <line:4223:21, col:81> 'int' '&&'
|   |       |     | |-BinaryOperator 0x7fffd84470f8 <col:21, col:59> 'int' '&&'
|   |       |     | | |-BinaryOperator 0x7fffd8446ff8 <col:21, col:46> 'int' '&&'
|   |       |     | | | |-ImplicitCastExpr 0x7fffd8446fe0 <col:21, col:24> 'int' <LValueToRValue>
|   |       |     | | | | `-MemberExpr 0x7fffd8446ed0 <col:21, col:24> 'int' lvalue ->was_packed 0x7fffd8426688
|   |       |     | | | |   `-ImplicitCastExpr 0x7fffd8446eb8 <col:21> 'stbrp_rect *' <LValueToRValue>
|   |       |     | | | |     `-DeclRefExpr 0x7fffd8446e90 <col:21> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       |     | | | `-BinaryOperator 0x7fffd8446fb8 <col:38, col:46> 'int' '=='
|   |       |     | | |   |-ImplicitCastExpr 0x7fffd8446fa0 <col:38, col:41> 'int' <LValueToRValue>
|   |       |     | | |   | `-MemberExpr 0x7fffd8446f48 <col:38, col:41> 'int' lvalue ->w 0x7fffd84265c8
|   |       |     | | |   |   `-ImplicitCastExpr 0x7fffd8446f30 <col:38> 'stbrp_rect *' <LValueToRValue>
|   |       |     | | |   |     `-DeclRefExpr 0x7fffd8446f08 <col:38> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       |     | | |   `-IntegerLiteral 0x7fffd8446f80 <col:46> 'int' 0
|   |       |     | | `-BinaryOperator 0x7fffd84470d0 <col:51, col:59> 'int' '=='
|   |       |     | |   |-ImplicitCastExpr 0x7fffd84470b8 <col:51, col:54> 'int' <LValueToRValue>
|   |       |     | |   | `-MemberExpr 0x7fffd8447060 <col:51, col:54> 'int' lvalue ->h 0x7fffd8426628
|   |       |     | |   |   `-ImplicitCastExpr 0x7fffd8447048 <col:51> 'stbrp_rect *' <LValueToRValue>
|   |       |     | |   |     `-DeclRefExpr 0x7fffd8447020 <col:51> 'stbrp_rect *' lvalue Var 0x7fffd8442588 'r' 'stbrp_rect *'
|   |       |     | |   `-IntegerLiteral 0x7fffd8447098 <col:59> 'int' 0
|   |       |     | `-BinaryOperator 0x7fffd8447180 <col:64, col:81> 'int' '>='
|   |       |     |   |-ImplicitCastExpr 0x7fffd8447168 <col:64> 'int' <LValueToRValue>
|   |       |     |   | `-DeclRefExpr 0x7fffd8447120 <col:64> 'int' lvalue Var 0x7fffd843e570 'missing_glyph' 'int'
|   |       |     |   `-IntegerLiteral 0x7fffd8447148 <col:81> 'int' 0
|   |       |     |-CompoundStmt 0x7fffd84474f8 <col:84, line:4225:10>
|   |       |     | `-BinaryOperator 0x7fffd84474d0 <line:4224:13, col:89> 'stbtt_packedchar':'stbtt_packedchar' '='
|   |       |     |   |-ArraySubscriptExpr 0x7fffd8447308 <col:13, col:43> 'stbtt_packedchar':'stbtt_packedchar' lvalue
|   |       |     |   | |-ImplicitCastExpr 0x7fffd84472d8 <col:13, col:23> 'stbtt_packedchar *' <LValueToRValue>
|   |       |     |   | | `-MemberExpr 0x7fffd8447278 <col:13, col:23> 'stbtt_packedchar *' lvalue .chardata_for_range 0x7fffd8348510
|   |       |     |   | |   `-ArraySubscriptExpr 0x7fffd8447250 <col:13, col:21> 'stbtt_pack_range':'stbtt_pack_range' lvalue
|   |       |     |   | |     |-ImplicitCastExpr 0x7fffd8447220 <col:13> 'stbtt_pack_range *' <LValueToRValue>
|   |       |     |   | |     | `-DeclRefExpr 0x7fffd84471d0 <col:13> 'stbtt_pack_range *' lvalue ParmVar 0x7fffd843e190 'ranges' 'stbtt_pack_range *'
|   |       |     |   | |     `-ImplicitCastExpr 0x7fffd8447238 <col:20> 'int' <LValueToRValue>
|   |       |     |   | |       `-DeclRefExpr 0x7fffd84471f8 <col:20> 'int' lvalue Var 0x7fffd843e408 'i' 'int'
|   |       |     |   | `-ImplicitCastExpr 0x7fffd84472f0 <col:42> 'int' <LValueToRValue>
|   |       |     |   |   `-DeclRefExpr 0x7fffd84472b0 <col:42> 'int' lvalue Var 0x7fffd843e480 'j' 'int'
|   |       |     |   `-ImplicitCastExpr 0x7fffd84474b8 <col:47, col:89> 'stbtt_packedchar':'stbtt_packedchar' <LValueToRValue>
|   |       |     |     `-ArraySubscriptExpr 0x7fffd8447490 <col:47, col:89> 'stbtt_packedchar':'stbtt_packedchar' lvalue
|   |       |     |       |-ImplicitCastExpr 0x7fffd8447460 <col:47, col:57> 'stbtt_packedchar *' <LValueToRValue>
|   |       |     |       | `-MemberExpr 0x7fffd8447400 <col:47, col:57> 'stbtt_packedchar *' lvalue .chardata_for_range 0x7fffd8348510
|   |       |     |       |   `-ArraySubscriptExpr 0x7fffd84473d8 <col:47, col:55> 'stbtt_pack_range':'stbtt_pack_range' lvalue
|   |       |     |       |     |-ImplicitCastExpr 0x7fffd84473a8 <col:47> 'stbtt_pack_range *' <LValueToRValue>
|   |       |     |       |     | `-DeclRefExpr 0x7fffd8447330 <col:47> 'stbtt_pack_range *' lvalue ParmVar 0x7fffd843e190 'ranges' 'stbtt_pack_range *'
|   |       |     |       |     `-ImplicitCastExpr 0x7fffd84473c0 <col:54> 'int' <LValueToRValue>
|   |       |     |       |       `-DeclRefExpr 0x7fffd8447380 <col:54> 'int' lvalue Var 0x7fffd843e408 'i' 'int'
|   |       |     |       `-ImplicitCastExpr 0x7fffd8447478 <col:76> 'int' <LValueToRValue>
|   |       |     |         `-DeclRefExpr 0x7fffd8447438 <col:76> 'int' lvalue Var 0x7fffd843e570 'missing_glyph' 'int'
|   |       |     `-CompoundStmt 0x7fffd8447580 <line:4225:17, line:4227:10>
|   |       |       `-BinaryOperator 0x7fffd8447558 <line:4226:13, col:28> 'int' '='
|   |       |         |-DeclRefExpr 0x7fffd8447510 <col:13> 'int' lvalue Var 0x7fffd843e628 'return_value' 'int'
|   |       |         `-IntegerLiteral 0x7fffd8447538 <col:28> 'int' 0
|   |       `-UnaryOperator 0x7fffd8447668 <line:4229:10, col:12> 'int' prefix '++'
|   |         `-DeclRefExpr 0x7fffd8447640 <col:12> 'int' lvalue Var 0x7fffd843e4f8 'k' 'int'
|   |-BinaryOperator 0x7fffd8447850 <line:4234:4, col:24> 'unsigned int' '='
|   | |-MemberExpr 0x7fffd84477c0 <col:4, col:9> 'unsigned int' lvalue ->h_oversample 0x7fffd834c5a8
|   | | `-ImplicitCastExpr 0x7fffd84477a8 <col:4> 'stbtt_pack_context *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8447780 <col:4> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   | `-ImplicitCastExpr 0x7fffd8447838 <col:24> 'unsigned int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x7fffd8447820 <col:24> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd84477f8 <col:24> 'int' lvalue Var 0x7fffd843e708 'old_h_over' 'int'
|   |-BinaryOperator 0x7fffd8447948 <line:4235:4, col:24> 'unsigned int' '='
|   | |-MemberExpr 0x7fffd84478b8 <col:4, col:9> 'unsigned int' lvalue ->v_oversample 0x7fffd834c608
|   | | `-ImplicitCastExpr 0x7fffd84478a0 <col:4> 'stbtt_pack_context *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8447878 <col:4> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd843e0b0 'spc' 'stbtt_pack_context *'
|   | `-ImplicitCastExpr 0x7fffd8447930 <col:24> 'unsigned int' <IntegralCast>
|   |   `-ImplicitCastExpr 0x7fffd8447918 <col:24> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd84478f0 <col:24> 'int' lvalue Var 0x7fffd843e840 'old_v_over' 'int'
|   `-ReturnStmt 0x7fffd84479b0 <line:4237:4, col:11>
|     `-ImplicitCastExpr 0x7fffd8447998 <col:11> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd8447970 <col:11> 'int' lvalue Var 0x7fffd843e628 'return_value' 'int'
|-FunctionDecl 0x7fffd8447ba8 prev 0x7fffd834be30 <line:501:19, line:4243:1> line:4240:16 used stbtt_PackFontRangesPackRects 'void (stbtt_pack_context *, stbrp_rect *, int)' extern
| |-ParmVarDecl 0x7fffd8447a28 <col:46, col:66> col:66 used spc 'stbtt_pack_context *'
| |-ParmVarDecl 0x7fffd8447a98 <col:71, col:83> col:83 used rects 'stbrp_rect *'
| |-ParmVarDecl 0x7fffd8447b10 <col:90, col:94> col:94 used num_rects 'int'
| `-CompoundStmt 0x7fffd8447e80 <line:4241:1, line:4243:1>
|   `-CallExpr 0x7fffd8447e10 <line:4242:4, col:71> 'void'
|     |-ImplicitCastExpr 0x7fffd8447df8 <col:4> 'void (*)(stbrp_context *, stbrp_rect *, int)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x7fffd8447c60 <col:4> 'void (stbrp_context *, stbrp_rect *, int)' Function 0x7fffd8427390 'stbrp_pack_rects' 'void (stbrp_context *, stbrp_rect *, int)'
|     |-CStyleCastExpr 0x7fffd8447d28 <col:21, col:44> 'stbrp_context *' <BitCast>
|     | `-ImplicitCastExpr 0x7fffd8447d10 <col:39, col:44> 'void *' <LValueToRValue>
|     |   `-MemberExpr 0x7fffd8447cc8 <col:39, col:44> 'void *' lvalue ->pack_info 0x7fffd834c368
|     |     `-ImplicitCastExpr 0x7fffd8447cb0 <col:39> 'stbtt_pack_context *' <LValueToRValue>
|     |       `-DeclRefExpr 0x7fffd8447c88 <col:39> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8447a28 'spc' 'stbtt_pack_context *'
|     |-ImplicitCastExpr 0x7fffd8447e50 <col:55> 'stbrp_rect *' <LValueToRValue>
|     | `-DeclRefExpr 0x7fffd8447d50 <col:55> 'stbrp_rect *' lvalue ParmVar 0x7fffd8447a98 'rects' 'stbrp_rect *'
|     `-ImplicitCastExpr 0x7fffd8447e68 <col:62> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd8447d78 <col:62> 'int' lvalue ParmVar 0x7fffd8447b10 'num_rects' 'int'
|-FunctionDecl 0x7fffd8448130 prev 0x7fffd8348aa8 <line:501:19, line:4279:1> line:4245:15 used stbtt_PackFontRanges 'int (stbtt_pack_context *, const unsigned char *, int, stbtt_pack_range *, int)' extern
| |-ParmVarDecl 0x7fffd8447ea8 <col:36, col:56> col:56 used spc 'stbtt_pack_context *'
| |-ParmVarDecl 0x7fffd8447f20 <col:61, col:82> col:82 used fontdata 'const unsigned char *'
| |-ParmVarDecl 0x7fffd8447f98 <col:92, col:96> col:96 used font_index 'int'
| |-ParmVarDecl 0x7fffd8448008 <col:108, col:126> col:126 used ranges 'stbtt_pack_range *'
| |-ParmVarDecl 0x7fffd8448080 <col:134, col:138> col:138 used num_ranges 'int'
| `-CompoundStmt 0x7fffd844a558 <line:4246:1, line:4279:1>
|   |-DeclStmt 0x7fffd8448268 <line:4247:4, col:23>
|   | `-VarDecl 0x7fffd8448208 <col:4, col:19> col:19 used info 'stbtt_fontinfo':'struct stbtt_fontinfo'
|   |-DeclStmt 0x7fffd84484a8 <line:4248:4, col:31>
|   | |-VarDecl 0x7fffd8448298 <col:4, col:8> col:8 used i 'int'
|   | |-VarDecl 0x7fffd8448310 <col:4, col:10> col:10 used j 'int'
|   | |-VarDecl 0x7fffd8448388 <col:4, col:12> col:12 used n 'int'
|   | `-VarDecl 0x7fffd8448400 <col:4, col:30> col:15 used return_value 'int' cinit
|   |   `-IntegerLiteral 0x7fffd8448460 <col:30> 'int' 1
|   |-DeclStmt 0x7fffd8448530 <line:4250:4, col:24>
|   | `-VarDecl 0x7fffd84484d0 <col:4, col:19> col:19 used rects 'stbrp_rect *'
|   |-ForStmt 0x7fffd8449030 <line:4253:4, line:4258:47>
|   | |-BinaryOperator 0x7fffd8448590 <line:4253:9, col:11> 'int' '='
|   | | |-DeclRefExpr 0x7fffd8448548 <col:9> 'int' lvalue Var 0x7fffd8448298 'i' 'int'
|   | | `-IntegerLiteral 0x7fffd8448570 <col:11> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd8448638 <col:14, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd8448608 <col:14> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd84485b8 <col:14> 'int' lvalue Var 0x7fffd8448298 'i' 'int'
|   | | `-ImplicitCastExpr 0x7fffd8448620 <col:18> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd84485e0 <col:18> 'int' lvalue ParmVar 0x7fffd8448080 'num_ranges' 'int'
|   | |-UnaryOperator 0x7fffd8448688 <col:30, col:32> 'int' prefix '++'
|   | | `-DeclRefExpr 0x7fffd8448660 <col:32> 'int' lvalue Var 0x7fffd8448298 'i' 'int'
|   | `-ForStmt 0x7fffd8448ff8 <line:4254:7, line:4258:47>
|   |   |-BinaryOperator 0x7fffd84486f0 <line:4254:12, col:14> 'int' '='
|   |   | |-DeclRefExpr 0x7fffd84486a8 <col:12> 'int' lvalue Var 0x7fffd8448310 'j' 'int'
|   |   | `-IntegerLiteral 0x7fffd84486d0 <col:14> 'int' 0
|   |   |-<<<NULL>>>
|   |   |-BinaryOperator 0x7fffd8448850 <col:17, col:31> 'int' '<'
|   |   | |-ImplicitCastExpr 0x7fffd8448820 <col:17> 'int' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x7fffd8448718 <col:17> 'int' lvalue Var 0x7fffd8448310 'j' 'int'
|   |   | `-ImplicitCastExpr 0x7fffd8448838 <col:21, col:31> 'int' <LValueToRValue>
|   |   |   `-MemberExpr 0x7fffd84487e8 <col:21, col:31> 'int' lvalue .num_chars 0x7fffd83484b8
|   |   |     `-ArraySubscriptExpr 0x7fffd84487c0 <col:21, col:29> 'stbtt_pack_range':'stbtt_pack_range' lvalue
|   |   |       |-ImplicitCastExpr 0x7fffd8448790 <col:21> 'stbtt_pack_range *' <LValueToRValue>
|   |   |       | `-DeclRefExpr 0x7fffd8448740 <col:21> 'stbtt_pack_range *' lvalue ParmVar 0x7fffd8448008 'ranges' 'stbtt_pack_range *'
|   |   |       `-ImplicitCastExpr 0x7fffd84487a8 <col:28> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x7fffd8448768 <col:28> 'int' lvalue Var 0x7fffd8448298 'i' 'int'
|   |   |-UnaryOperator 0x7fffd84488a0 <col:42, col:44> 'int' prefix '++'
|   |   | `-DeclRefExpr 0x7fffd8448878 <col:44> 'int' lvalue Var 0x7fffd8448310 'j' 'int'
|   |   `-BinaryOperator 0x7fffd8448fd0 <line:4255:10, line:4258:47> 'unsigned short' '='
|   |     |-MemberExpr 0x7fffd8448a20 <line:4255:10, col:42> 'unsigned short' lvalue .x0 0x7fffd8342ca8
|   |     | `-ArraySubscriptExpr 0x7fffd84489f8 <col:10, col:40> 'stbtt_packedchar':'stbtt_packedchar' lvalue
|   |     |   |-ImplicitCastExpr 0x7fffd84489c8 <col:10, col:20> 'stbtt_packedchar *' <LValueToRValue>
|   |     |   | `-MemberExpr 0x7fffd8448968 <col:10, col:20> 'stbtt_packedchar *' lvalue .chardata_for_range 0x7fffd8348510
|   |     |   |   `-ArraySubscriptExpr 0x7fffd8448940 <col:10, col:18> 'stbtt_pack_range':'stbtt_pack_range' lvalue
|   |     |   |     |-ImplicitCastExpr 0x7fffd8448910 <col:10> 'stbtt_pack_range *' <LValueToRValue>
|   |     |   |     | `-DeclRefExpr 0x7fffd84488c0 <col:10> 'stbtt_pack_range *' lvalue ParmVar 0x7fffd8448008 'ranges' 'stbtt_pack_range *'
|   |     |   |     `-ImplicitCastExpr 0x7fffd8448928 <col:17> 'int' <LValueToRValue>
|   |     |   |       `-DeclRefExpr 0x7fffd84488e8 <col:17> 'int' lvalue Var 0x7fffd8448298 'i' 'int'
|   |     |   `-ImplicitCastExpr 0x7fffd84489e0 <col:39> 'int' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x7fffd84489a0 <col:39> 'int' lvalue Var 0x7fffd8448310 'j' 'int'
|   |     `-BinaryOperator 0x7fffd8448fa8 <line:4256:10, line:4258:47> 'unsigned short' '='
|   |       |-MemberExpr 0x7fffd8448bb8 <line:4256:10, col:42> 'unsigned short' lvalue .y0 0x7fffd8342d08
|   |       | `-ArraySubscriptExpr 0x7fffd8448b90 <col:10, col:40> 'stbtt_packedchar':'stbtt_packedchar' lvalue
|   |       |   |-ImplicitCastExpr 0x7fffd8448b60 <col:10, col:20> 'stbtt_packedchar *' <LValueToRValue>
|   |       |   | `-MemberExpr 0x7fffd8448b00 <col:10, col:20> 'stbtt_packedchar *' lvalue .chardata_for_range 0x7fffd8348510
|   |       |   |   `-ArraySubscriptExpr 0x7fffd8448ad8 <col:10, col:18> 'stbtt_pack_range':'stbtt_pack_range' lvalue
|   |       |   |     |-ImplicitCastExpr 0x7fffd8448aa8 <col:10> 'stbtt_pack_range *' <LValueToRValue>
|   |       |   |     | `-DeclRefExpr 0x7fffd8448a58 <col:10> 'stbtt_pack_range *' lvalue ParmVar 0x7fffd8448008 'ranges' 'stbtt_pack_range *'
|   |       |   |     `-ImplicitCastExpr 0x7fffd8448ac0 <col:17> 'int' <LValueToRValue>
|   |       |   |       `-DeclRefExpr 0x7fffd8448a80 <col:17> 'int' lvalue Var 0x7fffd8448298 'i' 'int'
|   |       |   `-ImplicitCastExpr 0x7fffd8448b78 <col:39> 'int' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x7fffd8448b38 <col:39> 'int' lvalue Var 0x7fffd8448310 'j' 'int'
|   |       `-BinaryOperator 0x7fffd8448f80 <line:4257:10, line:4258:47> 'unsigned short' '='
|   |         |-MemberExpr 0x7fffd8448d50 <line:4257:10, col:42> 'unsigned short' lvalue .x1 0x7fffd8342d68
|   |         | `-ArraySubscriptExpr 0x7fffd8448d28 <col:10, col:40> 'stbtt_packedchar':'stbtt_packedchar' lvalue
|   |         |   |-ImplicitCastExpr 0x7fffd8448cf8 <col:10, col:20> 'stbtt_packedchar *' <LValueToRValue>
|   |         |   | `-MemberExpr 0x7fffd8448c98 <col:10, col:20> 'stbtt_packedchar *' lvalue .chardata_for_range 0x7fffd8348510
|   |         |   |   `-ArraySubscriptExpr 0x7fffd8448c70 <col:10, col:18> 'stbtt_pack_range':'stbtt_pack_range' lvalue
|   |         |   |     |-ImplicitCastExpr 0x7fffd8448c40 <col:10> 'stbtt_pack_range *' <LValueToRValue>
|   |         |   |     | `-DeclRefExpr 0x7fffd8448bf0 <col:10> 'stbtt_pack_range *' lvalue ParmVar 0x7fffd8448008 'ranges' 'stbtt_pack_range *'
|   |         |   |     `-ImplicitCastExpr 0x7fffd8448c58 <col:17> 'int' <LValueToRValue>
|   |         |   |       `-DeclRefExpr 0x7fffd8448c18 <col:17> 'int' lvalue Var 0x7fffd8448298 'i' 'int'
|   |         |   `-ImplicitCastExpr 0x7fffd8448d10 <col:39> 'int' <LValueToRValue>
|   |         |     `-DeclRefExpr 0x7fffd8448cd0 <col:39> 'int' lvalue Var 0x7fffd8448310 'j' 'int'
|   |         `-BinaryOperator 0x7fffd8448f58 <line:4258:10, col:47> 'unsigned short' '='
|   |           |-MemberExpr 0x7fffd8448ee8 <col:10, col:42> 'unsigned short' lvalue .y1 0x7fffd8342dc8
|   |           | `-ArraySubscriptExpr 0x7fffd8448ec0 <col:10, col:40> 'stbtt_packedchar':'stbtt_packedchar' lvalue
|   |           |   |-ImplicitCastExpr 0x7fffd8448e90 <col:10, col:20> 'stbtt_packedchar *' <LValueToRValue>
|   |           |   | `-MemberExpr 0x7fffd8448e30 <col:10, col:20> 'stbtt_packedchar *' lvalue .chardata_for_range 0x7fffd8348510
|   |           |   |   `-ArraySubscriptExpr 0x7fffd8448e08 <col:10, col:18> 'stbtt_pack_range':'stbtt_pack_range' lvalue
|   |           |   |     |-ImplicitCastExpr 0x7fffd8448dd8 <col:10> 'stbtt_pack_range *' <LValueToRValue>
|   |           |   |     | `-DeclRefExpr 0x7fffd8448d88 <col:10> 'stbtt_pack_range *' lvalue ParmVar 0x7fffd8448008 'ranges' 'stbtt_pack_range *'
|   |           |   |     `-ImplicitCastExpr 0x7fffd8448df0 <col:17> 'int' <LValueToRValue>
|   |           |   |       `-DeclRefExpr 0x7fffd8448db0 <col:17> 'int' lvalue Var 0x7fffd8448298 'i' 'int'
|   |           |   `-ImplicitCastExpr 0x7fffd8448ea8 <col:39> 'int' <LValueToRValue>
|   |           |     `-DeclRefExpr 0x7fffd8448e68 <col:39> 'int' lvalue Var 0x7fffd8448310 'j' 'int'
|   |           `-ImplicitCastExpr 0x7fffd8448f40 <col:47> 'unsigned short' <IntegralCast>
|   |             `-IntegerLiteral 0x7fffd8448f20 <col:47> 'int' 0
|   |-BinaryOperator 0x7fffd84490b0 <line:4260:4, col:8> 'int' '='
|   | |-DeclRefExpr 0x7fffd8449068 <col:4> 'int' lvalue Var 0x7fffd8448388 'n' 'int'
|   | `-IntegerLiteral 0x7fffd8449090 <col:8> 'int' 0
|   |-ForStmt 0x7fffd84493c8 <line:4261:4, line:4262:22>
|   | |-BinaryOperator 0x7fffd8449120 <line:4261:9, col:11> 'int' '='
|   | | |-DeclRefExpr 0x7fffd84490d8 <col:9> 'int' lvalue Var 0x7fffd8448298 'i' 'int'
|   | | `-IntegerLiteral 0x7fffd8449100 <col:11> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd84491c8 <col:14, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd8449198 <col:14> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd8449148 <col:14> 'int' lvalue Var 0x7fffd8448298 'i' 'int'
|   | | `-ImplicitCastExpr 0x7fffd84491b0 <col:18> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8449170 <col:18> 'int' lvalue ParmVar 0x7fffd8448080 'num_ranges' 'int'
|   | |-UnaryOperator 0x7fffd8449218 <col:30, col:32> 'int' prefix '++'
|   | | `-DeclRefExpr 0x7fffd84491f0 <col:32> 'int' lvalue Var 0x7fffd8448298 'i' 'int'
|   | `-CompoundAssignOperator 0x7fffd8449390 <line:4262:7, col:22> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |-DeclRefExpr 0x7fffd8449238 <col:7> 'int' lvalue Var 0x7fffd8448388 'n' 'int'
|   |   `-ImplicitCastExpr 0x7fffd8449340 <col:12, col:22> 'int' <LValueToRValue>
|   |     `-MemberExpr 0x7fffd8449308 <col:12, col:22> 'int' lvalue .num_chars 0x7fffd83484b8
|   |       `-ArraySubscriptExpr 0x7fffd84492e0 <col:12, col:20> 'stbtt_pack_range':'stbtt_pack_range' lvalue
|   |         |-ImplicitCastExpr 0x7fffd84492b0 <col:12> 'stbtt_pack_range *' <LValueToRValue>
|   |         | `-DeclRefExpr 0x7fffd8449260 <col:12> 'stbtt_pack_range *' lvalue ParmVar 0x7fffd8448008 'ranges' 'stbtt_pack_range *'
|   |         `-ImplicitCastExpr 0x7fffd84492c8 <col:19> 'int' <LValueToRValue>
|   |           `-DeclRefExpr 0x7fffd8449288 <col:19> 'int' lvalue Var 0x7fffd8448298 'i' 'int'
|   |-BinaryOperator 0x7fffd8449788 <line:4264:4, line:467:51> 'stbrp_rect *' '='
|   | |-DeclRefExpr 0x7fffd8449400 <line:4264:4> 'stbrp_rect *' lvalue Var 0x7fffd84484d0 'rects' 'stbrp_rect *'
|   | `-CStyleCastExpr 0x7fffd8449760 <col:12, line:467:51> 'stbrp_rect *' <BitCast>
|   |   `-ParenExpr 0x7fffd8449740 <col:31, col:51> 'void *'
|   |     `-BinaryOperator 0x7fffd8449718 <col:32, col:50> 'void *' ','
|   |       |-CStyleCastExpr 0x7fffd8449518 <col:32, col:40> 'void' <ToVoid>
|   |       | `-ImplicitCastExpr 0x7fffd8449500 <col:38, col:40> 'void *' <LValueToRValue>
|   |       |   `-ParenExpr 0x7fffd84494e0 <col:38, col:40> 'void *' lvalue
|   |       |     `-MemberExpr 0x7fffd8449468 <line:4264:60, col:65> 'void *' lvalue ->user_allocator_context 0x7fffd834c308
|   |       |       `-ImplicitCastExpr 0x7fffd8449450 <col:60> 'stbtt_pack_context *' <LValueToRValue>
|   |       |         `-DeclRefExpr 0x7fffd8449428 <col:60> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8447ea8 'spc' 'stbtt_pack_context *'
|   |       `-CallExpr 0x7fffd84496a0 <line:467:42, col:50> 'void *'
|   |         |-ImplicitCastExpr 0x7fffd8449688 <col:42> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x7fffd8449540 <col:42> 'void *(unsigned long)' Function 0x7fffd831b4b0 'malloc' 'void *(unsigned long)'
|   |         `-BinaryOperator 0x7fffd8449660 <line:4264:40, col:57> 'unsigned long' '*'
|   |           |-UnaryExprOrTypeTraitExpr 0x7fffd84495e8 <col:40, col:53> 'unsigned long' sizeof
|   |           | `-ParenExpr 0x7fffd84495c8 <col:46, col:53> 'stbrp_rect':'struct stbrp_rect' lvalue
|   |           |   `-UnaryOperator 0x7fffd84495a8 <col:47, col:48> 'stbrp_rect':'struct stbrp_rect' lvalue prefix '*'
|   |           |     `-ImplicitCastExpr 0x7fffd8449590 <col:48> 'stbrp_rect *' <LValueToRValue>
|   |           |       `-DeclRefExpr 0x7fffd8449568 <col:48> 'stbrp_rect *' lvalue Var 0x7fffd84484d0 'rects' 'stbrp_rect *'
|   |           `-ImplicitCastExpr 0x7fffd8449648 <col:57> 'unsigned long' <IntegralCast>
|   |             `-ImplicitCastExpr 0x7fffd8449630 <col:57> 'int' <LValueToRValue>
|   |               `-DeclRefExpr 0x7fffd8449608 <col:57> 'int' lvalue Var 0x7fffd8448388 'n' 'int'
|   |-IfStmt 0x7fffd84498e8 <line:4265:4, line:4266:14>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd8449888 <line:4265:8, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25> 'int' '=='
|   | | |-ImplicitCastExpr 0x7fffd8449858 <././stb/stb_truetype.h:4265:8> 'stbrp_rect *' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd84497b0 <col:8> 'stbrp_rect *' lvalue Var 0x7fffd84484d0 'rects' 'stbrp_rect *'
|   | | `-ImplicitCastExpr 0x7fffd8449870 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'stbrp_rect *' <BitCast>
|   | |   `-ParenExpr 0x7fffd8449838 <col:16, col:25> 'void *'
|   | |     `-CStyleCastExpr 0x7fffd8449810 <col:17, col:24> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x7fffd84497d8 <col:24> 'int' 0
|   | |-ReturnStmt 0x7fffd84498d0 <././stb/stb_truetype.h:4266:7, col:14>
|   | | `-IntegerLiteral 0x7fffd84498b0 <col:14> 'int' 0
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x7fffd8449a10 <line:4268:4, col:25> 'void *' '='
|   | |-MemberExpr 0x7fffd8449948 <col:4, col:9> 'void *' lvalue .userdata 0x7fffd834cb78
|   | | `-DeclRefExpr 0x7fffd8449920 <col:4> 'stbtt_fontinfo':'struct stbtt_fontinfo' lvalue Var 0x7fffd8448208 'info' 'stbtt_fontinfo':'struct stbtt_fontinfo'
|   | `-ImplicitCastExpr 0x7fffd84499f8 <col:20, col:25> 'void *' <LValueToRValue>
|   |   `-MemberExpr 0x7fffd84499c0 <col:20, col:25> 'void *' lvalue ->user_allocator_context 0x7fffd834c308
|   |     `-ImplicitCastExpr 0x7fffd84499a8 <col:20> 'stbtt_pack_context *' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd8449980 <col:20> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8447ea8 'spc' 'stbtt_pack_context *'
|   |-CallExpr 0x7fffd8449c10 <line:4269:4, col:84> 'int'
|   | |-ImplicitCastExpr 0x7fffd8449bf8 <col:4> 'int (*)(stbtt_fontinfo *, const unsigned char *, int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fffd8449a38 <col:4> 'int (stbtt_fontinfo *, const unsigned char *, int)' Function 0x7fffd834d5a8 'stbtt_InitFont' 'int (stbtt_fontinfo *, const unsigned char *, int)'
|   | |-UnaryOperator 0x7fffd8449a88 <col:19, col:20> 'stbtt_fontinfo *' prefix '&'
|   | | `-DeclRefExpr 0x7fffd8449a60 <col:20> 'stbtt_fontinfo':'struct stbtt_fontinfo' lvalue Var 0x7fffd8448208 'info' 'stbtt_fontinfo':'struct stbtt_fontinfo'
|   | |-ImplicitCastExpr 0x7fffd8449c50 <col:26> 'const unsigned char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd8449aa8 <col:26> 'const unsigned char *' lvalue ParmVar 0x7fffd8447f20 'fontdata' 'const unsigned char *'
|   | `-CallExpr 0x7fffd8449b90 <col:36, col:83> 'int'
|   |   |-ImplicitCastExpr 0x7fffd8449b78 <col:36> 'int (*)(const unsigned char *, int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x7fffd8449ad0 <col:36> 'int (const unsigned char *, int)' Function 0x7fffd834ca28 'stbtt_GetFontOffsetForIndex' 'int (const unsigned char *, int)'
|   |   |-ImplicitCastExpr 0x7fffd8449bc8 <col:64> 'const unsigned char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x7fffd8449af8 <col:64> 'const unsigned char *' lvalue ParmVar 0x7fffd8447f20 'fontdata' 'const unsigned char *'
|   |   `-ImplicitCastExpr 0x7fffd8449be0 <col:73> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd8449b20 <col:73> 'int' lvalue ParmVar 0x7fffd8447f98 'font_index' 'int'
|   |-BinaryOperator 0x7fffd8449ed8 <line:4271:4, col:77> 'int' '='
|   | |-DeclRefExpr 0x7fffd8449c68 <col:4> 'int' lvalue Var 0x7fffd8448388 'n' 'int'
|   | `-CallExpr 0x7fffd8449e10 <col:8, col:77> 'int'
|   |   |-ImplicitCastExpr 0x7fffd8449df8 <col:8> 'int (*)(stbtt_pack_context *, const stbtt_fontinfo *, stbtt_pack_range *, int, stbrp_rect *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x7fffd8449c90 <col:8> 'int (stbtt_pack_context *, const stbtt_fontinfo *, stbtt_pack_range *, int, stbrp_rect *)' Function 0x7fffd8439e08 'stbtt_PackFontRangesGatherRects' 'int (stbtt_pack_context *, const stbtt_fontinfo *, stbtt_pack_range *, int, stbrp_rect *)'
|   |   |-ImplicitCastExpr 0x7fffd8449e60 <col:40> 'stbtt_pack_context *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x7fffd8449cb8 <col:40> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8447ea8 'spc' 'stbtt_pack_context *'
|   |   |-ImplicitCastExpr 0x7fffd8449e78 <col:45, col:46> 'const stbtt_fontinfo *' <BitCast>
|   |   | `-UnaryOperator 0x7fffd8449d08 <col:45, col:46> 'stbtt_fontinfo *' prefix '&'
|   |   |   `-DeclRefExpr 0x7fffd8449ce0 <col:46> 'stbtt_fontinfo':'struct stbtt_fontinfo' lvalue Var 0x7fffd8448208 'info' 'stbtt_fontinfo':'struct stbtt_fontinfo'
|   |   |-ImplicitCastExpr 0x7fffd8449e90 <col:52> 'stbtt_pack_range *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x7fffd8449d28 <col:52> 'stbtt_pack_range *' lvalue ParmVar 0x7fffd8448008 'ranges' 'stbtt_pack_range *'
|   |   |-ImplicitCastExpr 0x7fffd8449ea8 <col:60> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x7fffd8449d50 <col:60> 'int' lvalue ParmVar 0x7fffd8448080 'num_ranges' 'int'
|   |   `-ImplicitCastExpr 0x7fffd8449ec0 <col:72> 'stbrp_rect *' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd8449d78 <col:72> 'stbrp_rect *' lvalue Var 0x7fffd84484d0 'rects' 'stbrp_rect *'
|   |-CallExpr 0x7fffd844a010 <line:4273:4, col:47> 'void'
|   | |-ImplicitCastExpr 0x7fffd8449ff8 <col:4> 'void (*)(stbtt_pack_context *, stbrp_rect *, int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fffd8449f00 <col:4> 'void (stbtt_pack_context *, stbrp_rect *, int)' Function 0x7fffd8447ba8 'stbtt_PackFontRangesPackRects' 'void (stbtt_pack_context *, stbrp_rect *, int)'
|   | |-ImplicitCastExpr 0x7fffd844a050 <col:34> 'stbtt_pack_context *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd8449f28 <col:34> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8447ea8 'spc' 'stbtt_pack_context *'
|   | |-ImplicitCastExpr 0x7fffd844a068 <col:39> 'stbrp_rect *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd8449f50 <col:39> 'stbrp_rect *' lvalue Var 0x7fffd84484d0 'rects' 'stbrp_rect *'
|   | `-ImplicitCastExpr 0x7fffd844a080 <col:46> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd8449f78 <col:46> 'int' lvalue Var 0x7fffd8448388 'n' 'int'
|   |-BinaryOperator 0x7fffd844a2b0 <line:4275:4, col:92> 'int' '='
|   | |-DeclRefExpr 0x7fffd844a098 <col:4> 'int' lvalue Var 0x7fffd8448400 'return_value' 'int'
|   | `-CallExpr 0x7fffd844a1e8 <col:19, col:92> 'int'
|   |   |-ImplicitCastExpr 0x7fffd844a1d0 <col:19> 'int (*)(stbtt_pack_context *, const stbtt_fontinfo *, stbtt_pack_range *, int, stbrp_rect *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x7fffd844a0c0 <col:19> 'int (stbtt_pack_context *, const stbtt_fontinfo *, stbtt_pack_range *, int, stbrp_rect *)' Function 0x7fffd843e328 'stbtt_PackFontRangesRenderIntoRects' 'int (stbtt_pack_context *, const stbtt_fontinfo *, stbtt_pack_range *, int, stbrp_rect *)'
|   |   |-ImplicitCastExpr 0x7fffd844a238 <col:55> 'stbtt_pack_context *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x7fffd844a0e8 <col:55> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8447ea8 'spc' 'stbtt_pack_context *'
|   |   |-ImplicitCastExpr 0x7fffd844a250 <col:60, col:61> 'const stbtt_fontinfo *' <BitCast>
|   |   | `-UnaryOperator 0x7fffd844a138 <col:60, col:61> 'stbtt_fontinfo *' prefix '&'
|   |   |   `-DeclRefExpr 0x7fffd844a110 <col:61> 'stbtt_fontinfo':'struct stbtt_fontinfo' lvalue Var 0x7fffd8448208 'info' 'stbtt_fontinfo':'struct stbtt_fontinfo'
|   |   |-ImplicitCastExpr 0x7fffd844a268 <col:67> 'stbtt_pack_range *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x7fffd844a158 <col:67> 'stbtt_pack_range *' lvalue ParmVar 0x7fffd8448008 'ranges' 'stbtt_pack_range *'
|   |   |-ImplicitCastExpr 0x7fffd844a280 <col:75> 'int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x7fffd844a180 <col:75> 'int' lvalue ParmVar 0x7fffd8448080 'num_ranges' 'int'
|   |   `-ImplicitCastExpr 0x7fffd844a298 <col:87> 'stbrp_rect *' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd844a1a8 <col:87> 'stbrp_rect *' lvalue Var 0x7fffd84484d0 'rects' 'stbrp_rect *'
|   |-ParenExpr 0x7fffd844a4e0 <line:468:31, col:49> 'void'
|   | `-BinaryOperator 0x7fffd844a4b8 <col:32, col:48> 'void' ','
|   |   |-CStyleCastExpr 0x7fffd844a3c8 <col:32, col:40> 'void' <ToVoid>
|   |   | `-ImplicitCastExpr 0x7fffd844a3b0 <col:38, col:40> 'void *' <LValueToRValue>
|   |   |   `-ParenExpr 0x7fffd844a390 <col:38, col:40> 'void *' lvalue
|   |   |     `-MemberExpr 0x7fffd844a318 <line:4277:22, col:27> 'void *' lvalue ->user_allocator_context 0x7fffd834c308
|   |   |       `-ImplicitCastExpr 0x7fffd844a300 <col:22> 'stbtt_pack_context *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x7fffd844a2d8 <col:22> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd8447ea8 'spc' 'stbtt_pack_context *'
|   |   `-CallExpr 0x7fffd844a458 <line:468:42, col:48> 'void'
|   |     |-ImplicitCastExpr 0x7fffd844a440 <col:42> 'void (*)(void *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd844a3f0 <col:42> 'void (void *)' Function 0x7fffd831bec0 'free' 'void (void *)'
|   |     `-ImplicitCastExpr 0x7fffd844a4a0 <line:4277:15> 'void *' <BitCast>
|   |       `-ImplicitCastExpr 0x7fffd844a488 <col:15> 'stbrp_rect *' <LValueToRValue>
|   |         `-DeclRefExpr 0x7fffd844a418 <col:15> 'stbrp_rect *' lvalue Var 0x7fffd84484d0 'rects' 'stbrp_rect *'
|   `-ReturnStmt 0x7fffd844a540 <line:4278:4, col:11>
|     `-ImplicitCastExpr 0x7fffd844a528 <col:11> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd844a500 <col:11> 'int' lvalue Var 0x7fffd8448400 'return_value' 'int'
|-FunctionDecl 0x7fffd844a978 prev 0x7fffd83481f8 <line:501:19, line:4291:1> line:4281:15 stbtt_PackFontRange 'int (stbtt_pack_context *, const unsigned char *, int, float, int, int, stbtt_packedchar *)' extern
| |-ParmVarDecl 0x7fffd844a5f0 <col:35, col:55> col:55 used spc 'stbtt_pack_context *'
| |-ParmVarDecl 0x7fffd844a668 <col:60, col:81> col:81 used fontdata 'const unsigned char *'
| |-ParmVarDecl 0x7fffd844a6e0 <col:91, col:95> col:95 used font_index 'int'
| |-ParmVarDecl 0x7fffd844a758 <col:107, col:113> col:113 used font_size 'float'
| |-ParmVarDecl 0x7fffd844a7d0 <line:4282:13, col:17> col:17 used first_unicode_codepoint_in_range 'int'
| |-ParmVarDecl 0x7fffd844a848 <col:51, col:55> col:55 used num_chars_in_range 'int'
| |-ParmVarDecl 0x7fffd844a8b8 <col:75, col:93> col:93 used chardata_for_range 'stbtt_packedchar *'
| `-CompoundStmt 0x7fffd844b1c0 <line:4283:1, line:4291:1>
|   |-DeclStmt 0x7fffd844aac0 <line:4284:4, col:26>
|   | `-VarDecl 0x7fffd844aa60 <col:4, col:21> col:21 used range 'stbtt_pack_range':'stbtt_pack_range'
|   |-BinaryOperator 0x7fffd844ab78 <line:4285:4, col:45> 'int' '='
|   | |-MemberExpr 0x7fffd844ab00 <col:4, col:10> 'int' lvalue .first_unicode_codepoint_in_range 0x7fffd83483f8
|   | | `-DeclRefExpr 0x7fffd844aad8 <col:4> 'stbtt_pack_range':'stbtt_pack_range' lvalue Var 0x7fffd844aa60 'range' 'stbtt_pack_range':'stbtt_pack_range'
|   | `-ImplicitCastExpr 0x7fffd844ab60 <col:45> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd844ab38 <col:45> 'int' lvalue ParmVar 0x7fffd844a7d0 'first_unicode_codepoint_in_range' 'int'
|   |-BinaryOperator 0x7fffd844ad10 <line:4286:4, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25> 'int *' '='
|   | |-MemberExpr 0x7fffd844ac40 <././stb/stb_truetype.h:4286:4, col:10> 'int *' lvalue .array_of_unicode_codepoints 0x7fffd8348458
|   | | `-DeclRefExpr 0x7fffd844ac18 <col:4> 'stbtt_pack_range':'stbtt_pack_range' lvalue Var 0x7fffd844aa60 'range' 'stbtt_pack_range':'stbtt_pack_range'
|   | `-ImplicitCastExpr 0x7fffd844acf8 </usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:16, col:25> 'int *' <NullToPointer>
|   |   `-ParenExpr 0x7fffd844acd8 <col:16, col:25> 'void *'
|   |     `-CStyleCastExpr 0x7fffd844acb0 <col:17, col:24> 'void *' <NullToPointer>
|   |       `-IntegerLiteral 0x7fffd844ac78 <col:24> 'int' 0
|   |-BinaryOperator 0x7fffd844add8 <././stb/stb_truetype.h:4287:4, col:40> 'int' '='
|   | |-MemberExpr 0x7fffd844ad60 <col:4, col:10> 'int' lvalue .num_chars 0x7fffd83484b8
|   | | `-DeclRefExpr 0x7fffd844ad38 <col:4> 'stbtt_pack_range':'stbtt_pack_range' lvalue Var 0x7fffd844aa60 'range' 'stbtt_pack_range':'stbtt_pack_range'
|   | `-ImplicitCastExpr 0x7fffd844adc0 <col:40> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd844ad98 <col:40> 'int' lvalue ParmVar 0x7fffd844a848 'num_chars_in_range' 'int'
|   |-BinaryOperator 0x7fffd844aea0 <line:4288:4, col:40> 'stbtt_packedchar *' '='
|   | |-MemberExpr 0x7fffd844ae28 <col:4, col:10> 'stbtt_packedchar *' lvalue .chardata_for_range 0x7fffd8348510
|   | | `-DeclRefExpr 0x7fffd844ae00 <col:4> 'stbtt_pack_range':'stbtt_pack_range' lvalue Var 0x7fffd844aa60 'range' 'stbtt_pack_range':'stbtt_pack_range'
|   | `-ImplicitCastExpr 0x7fffd844ae88 <col:40> 'stbtt_packedchar *' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd844ae60 <col:40> 'stbtt_packedchar *' lvalue ParmVar 0x7fffd844a8b8 'chardata_for_range' 'stbtt_packedchar *'
|   |-BinaryOperator 0x7fffd844af68 <line:4289:4, col:40> 'float' '='
|   | |-MemberExpr 0x7fffd844aef0 <col:4, col:10> 'float' lvalue .font_size 0x7fffd8348398
|   | | `-DeclRefExpr 0x7fffd844aec8 <col:4> 'stbtt_pack_range':'stbtt_pack_range' lvalue Var 0x7fffd844aa60 'range' 'stbtt_pack_range':'stbtt_pack_range'
|   | `-ImplicitCastExpr 0x7fffd844af50 <col:40> 'float' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd844af28 <col:40> 'float' lvalue ParmVar 0x7fffd844a758 'font_size' 'float'
|   `-ReturnStmt 0x7fffd844b1a8 <line:4290:4, col:68>
|     `-CallExpr 0x7fffd844b110 <col:11, col:68> 'int'
|       |-ImplicitCastExpr 0x7fffd844b0f8 <col:11> 'int (*)(stbtt_pack_context *, const unsigned char *, int, stbtt_pack_range *, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x7fffd844af90 <col:11> 'int (stbtt_pack_context *, const unsigned char *, int, stbtt_pack_range *, int)' Function 0x7fffd8448130 'stbtt_PackFontRanges' 'int (stbtt_pack_context *, const unsigned char *, int, stbtt_pack_range *, int)'
|       |-ImplicitCastExpr 0x7fffd844b160 <col:32> 'stbtt_pack_context *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd844afb8 <col:32> 'stbtt_pack_context *' lvalue ParmVar 0x7fffd844a5f0 'spc' 'stbtt_pack_context *'
|       |-ImplicitCastExpr 0x7fffd844b178 <col:37> 'const unsigned char *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd844afe0 <col:37> 'const unsigned char *' lvalue ParmVar 0x7fffd844a668 'fontdata' 'const unsigned char *'
|       |-ImplicitCastExpr 0x7fffd844b190 <col:47> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd844b008 <col:47> 'int' lvalue ParmVar 0x7fffd844a6e0 'font_index' 'int'
|       |-UnaryOperator 0x7fffd844b058 <col:59, col:60> 'stbtt_pack_range *' prefix '&'
|       | `-DeclRefExpr 0x7fffd844b030 <col:60> 'stbtt_pack_range':'stbtt_pack_range' lvalue Var 0x7fffd844aa60 'range' 'stbtt_pack_range':'stbtt_pack_range'
|       `-IntegerLiteral 0x7fffd844b078 <col:67> 'int' 1
|-FunctionDecl 0x7fffd844c970 prev 0x7fffd8342af0 <line:501:19, line:4304:1> line:4293:16 stbtt_GetScaledFontVMetrics 'void (const unsigned char *, int, float, float *, float *, float *)' extern
| |-ParmVarDecl 0x7fffd844b220 <col:44, col:65> col:65 used fontdata 'const unsigned char *'
| |-ParmVarDecl 0x7fffd844b298 <col:75, col:79> col:79 used index 'int'
| |-ParmVarDecl 0x7fffd844b310 <col:86, col:92> col:92 used size 'float'
| |-ParmVarDecl 0x7fffd844c7d0 <col:98, col:105> col:105 used ascent 'float *'
| |-ParmVarDecl 0x7fffd844c848 <col:113, col:120> col:120 used descent 'float *'
| |-ParmVarDecl 0x7fffd844c8c0 <col:129, col:136> col:136 used lineGap 'float *'
| `-CompoundStmt 0x7fffd844d8d0 <line:4294:1, line:4304:1>
|   |-DeclStmt 0x7fffd844cbc8 <line:4295:4, col:38>
|   | |-VarDecl 0x7fffd844ca58 <col:4, col:8> col:8 used i_ascent 'int'
|   | |-VarDecl 0x7fffd844cad0 <col:4, col:18> col:18 used i_descent 'int'
|   | `-VarDecl 0x7fffd844cb48 <col:4, col:29> col:29 used i_lineGap 'int'
|   |-DeclStmt 0x7fffd844cc58 <line:4296:4, col:15>
|   | `-VarDecl 0x7fffd844cbf8 <col:4, col:10> col:10 used scale 'float'
|   |-DeclStmt 0x7fffd844cce0 <line:4297:4, col:23>
|   | `-VarDecl 0x7fffd844cc80 <col:4, col:19> col:19 used info 'stbtt_fontinfo':'struct stbtt_fontinfo'
|   |-CallExpr 0x7fffd844cea0 <line:4298:4, col:80> 'int'
|   | |-ImplicitCastExpr 0x7fffd844ce88 <col:4> 'int (*)(stbtt_fontinfo *, const unsigned char *, int)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fffd844ccf8 <col:4> 'int (stbtt_fontinfo *, const unsigned char *, int)' Function 0x7fffd834d5a8 'stbtt_InitFont' 'int (stbtt_fontinfo *, const unsigned char *, int)'
|   | |-UnaryOperator 0x7fffd844cd48 <col:19, col:20> 'stbtt_fontinfo *' prefix '&'
|   | | `-DeclRefExpr 0x7fffd844cd20 <col:20> 'stbtt_fontinfo':'struct stbtt_fontinfo' lvalue Var 0x7fffd844cc80 'info' 'stbtt_fontinfo':'struct stbtt_fontinfo'
|   | |-ImplicitCastExpr 0x7fffd844cee0 <col:26> 'const unsigned char *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd844cd68 <col:26> 'const unsigned char *' lvalue ParmVar 0x7fffd844b220 'fontdata' 'const unsigned char *'
|   | `-CallExpr 0x7fffd844ce20 <col:36, col:79> 'int'
|   |   |-ImplicitCastExpr 0x7fffd844ce08 <col:36> 'int (*)(const unsigned char *, int)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x7fffd844cd90 <col:36> 'int (const unsigned char *, int)' Function 0x7fffd834ca28 'stbtt_GetFontOffsetForIndex' 'int (const unsigned char *, int)'
|   |   |-ImplicitCastExpr 0x7fffd844ce58 <col:64> 'const unsigned char *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x7fffd844cdb8 <col:64> 'const unsigned char *' lvalue ParmVar 0x7fffd844b220 'fontdata' 'const unsigned char *'
|   |   `-ImplicitCastExpr 0x7fffd844ce70 <col:74> 'int' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd844cde0 <col:74> 'int' lvalue ParmVar 0x7fffd844b298 'index' 'int'
|   |-BinaryOperator 0x7fffd844d240 <line:4299:4, col:108> 'float' '='
|   | |-DeclRefExpr 0x7fffd844cef8 <col:4> 'float' lvalue Var 0x7fffd844cbf8 'scale' 'float'
|   | `-ConditionalOperator 0x7fffd844d210 <col:12, col:108> 'float'
|   |   |-BinaryOperator 0x7fffd844cf98 <col:12, col:19> 'int' '>'
|   |   | |-ImplicitCastExpr 0x7fffd844cf68 <col:12> 'float' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x7fffd844cf20 <col:12> 'float' lvalue ParmVar 0x7fffd844b310 'size' 'float'
|   |   | `-ImplicitCastExpr 0x7fffd844cf80 <col:19> 'float' <IntegralToFloating>
|   |   |   `-IntegerLiteral 0x7fffd844cf48 <col:19> 'int' 0
|   |   |-CallExpr 0x7fffd844d070 <col:23, col:60> 'float'
|   |   | |-ImplicitCastExpr 0x7fffd844d058 <col:23> 'float (*)(const stbtt_fontinfo *, float)' <FunctionToPointerDecay>
|   |   | | `-DeclRefExpr 0x7fffd844cfc0 <col:23> 'float (const stbtt_fontinfo *, float)' Function 0x7fffd83d81b0 'stbtt_ScaleForPixelHeight' 'float (const stbtt_fontinfo *, float)'
|   |   | |-ImplicitCastExpr 0x7fffd844d0a8 <col:49, col:50> 'const stbtt_fontinfo *' <BitCast>
|   |   | | `-UnaryOperator 0x7fffd844d010 <col:49, col:50> 'stbtt_fontinfo *' prefix '&'
|   |   | |   `-DeclRefExpr 0x7fffd844cfe8 <col:50> 'stbtt_fontinfo':'struct stbtt_fontinfo' lvalue Var 0x7fffd844cc80 'info' 'stbtt_fontinfo':'struct stbtt_fontinfo'
|   |   | `-ImplicitCastExpr 0x7fffd844d0c0 <col:56> 'float' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x7fffd844d030 <col:56> 'float' lvalue ParmVar 0x7fffd844b310 'size' 'float'
|   |   `-CallExpr 0x7fffd844d1c0 <col:64, col:108> 'float'
|   |     |-ImplicitCastExpr 0x7fffd844d1a8 <col:64> 'float (*)(const stbtt_fontinfo *, float)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd844d0d8 <col:64> 'float (const stbtt_fontinfo *, float)' Function 0x7fffd83d89c0 'stbtt_ScaleForMappingEmToPixels' 'float (const stbtt_fontinfo *, float)'
|   |     |-ImplicitCastExpr 0x7fffd844d1f8 <col:96, col:97> 'const stbtt_fontinfo *' <BitCast>
|   |     | `-UnaryOperator 0x7fffd844d128 <col:96, col:97> 'stbtt_fontinfo *' prefix '&'
|   |     |   `-DeclRefExpr 0x7fffd844d100 <col:97> 'stbtt_fontinfo':'struct stbtt_fontinfo' lvalue Var 0x7fffd844cc80 'info' 'stbtt_fontinfo':'struct stbtt_fontinfo'
|   |     `-UnaryOperator 0x7fffd844d188 <col:103, col:104> 'float' prefix '-'
|   |       `-ImplicitCastExpr 0x7fffd844d170 <col:104> 'float' <LValueToRValue>
|   |         `-DeclRefExpr 0x7fffd844d148 <col:104> 'float' lvalue ParmVar 0x7fffd844b310 'size' 'float'
|   |-CallExpr 0x7fffd844d420 <line:4300:4, col:66> 'void'
|   | |-ImplicitCastExpr 0x7fffd844d408 <col:4> 'void (*)(const stbtt_fontinfo *, int *, int *, int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fffd844d268 <col:4> 'void (const stbtt_fontinfo *, int *, int *, int *)' Function 0x7fffd83d58f0 'stbtt_GetFontVMetrics' 'void (const stbtt_fontinfo *, int *, int *, int *)'
|   | |-ImplicitCastExpr 0x7fffd844d468 <col:26, col:27> 'const stbtt_fontinfo *' <BitCast>
|   | | `-UnaryOperator 0x7fffd844d2b8 <col:26, col:27> 'stbtt_fontinfo *' prefix '&'
|   | |   `-DeclRefExpr 0x7fffd844d290 <col:27> 'stbtt_fontinfo':'struct stbtt_fontinfo' lvalue Var 0x7fffd844cc80 'info' 'stbtt_fontinfo':'struct stbtt_fontinfo'
|   | |-UnaryOperator 0x7fffd844d300 <col:33, col:34> 'int *' prefix '&'
|   | | `-DeclRefExpr 0x7fffd844d2d8 <col:34> 'int' lvalue Var 0x7fffd844ca58 'i_ascent' 'int'
|   | |-UnaryOperator 0x7fffd844d348 <col:44, col:45> 'int *' prefix '&'
|   | | `-DeclRefExpr 0x7fffd844d320 <col:45> 'int' lvalue Var 0x7fffd844cad0 'i_descent' 'int'
|   | `-UnaryOperator 0x7fffd844d390 <col:56, col:57> 'int *' prefix '&'
|   |   `-DeclRefExpr 0x7fffd844d368 <col:57> 'int' lvalue Var 0x7fffd844cb48 'i_lineGap' 'int'
|   |-BinaryOperator 0x7fffd844d5c8 <line:4301:4, col:35> 'float' '='
|   | |-UnaryOperator 0x7fffd844d4c0 <col:4, col:5> 'float' lvalue prefix '*'
|   | | `-ImplicitCastExpr 0x7fffd844d4a8 <col:5> 'float *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd844d480 <col:5> 'float *' lvalue ParmVar 0x7fffd844c7d0 'ascent' 'float *'
|   | `-BinaryOperator 0x7fffd844d5a0 <col:15, col:35> 'float' '*'
|   |   |-CStyleCastExpr 0x7fffd844d538 <col:15, col:23> 'float' <IntegralToFloating>
|   |   | `-ImplicitCastExpr 0x7fffd844d520 <col:23> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x7fffd844d4e0 <col:23> 'int' lvalue Var 0x7fffd844ca58 'i_ascent' 'int'
|   |   `-ImplicitCastExpr 0x7fffd844d588 <col:35> 'float' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd844d560 <col:35> 'float' lvalue Var 0x7fffd844cbf8 'scale' 'float'
|   |-BinaryOperator 0x7fffd844d738 <line:4302:4, col:35> 'float' '='
|   | |-UnaryOperator 0x7fffd844d630 <col:4, col:5> 'float' lvalue prefix '*'
|   | | `-ImplicitCastExpr 0x7fffd844d618 <col:5> 'float *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd844d5f0 <col:5> 'float *' lvalue ParmVar 0x7fffd844c848 'descent' 'float *'
|   | `-BinaryOperator 0x7fffd844d710 <col:15, col:35> 'float' '*'
|   |   |-CStyleCastExpr 0x7fffd844d6a8 <col:15, col:23> 'float' <IntegralToFloating>
|   |   | `-ImplicitCastExpr 0x7fffd844d690 <col:23> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x7fffd844d650 <col:23> 'int' lvalue Var 0x7fffd844cad0 'i_descent' 'int'
|   |   `-ImplicitCastExpr 0x7fffd844d6f8 <col:35> 'float' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd844d6d0 <col:35> 'float' lvalue Var 0x7fffd844cbf8 'scale' 'float'
|   `-BinaryOperator 0x7fffd844d8a8 <line:4303:4, col:35> 'float' '='
|     |-UnaryOperator 0x7fffd844d7a0 <col:4, col:5> 'float' lvalue prefix '*'
|     | `-ImplicitCastExpr 0x7fffd844d788 <col:5> 'float *' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fffd844d760 <col:5> 'float *' lvalue ParmVar 0x7fffd844c8c0 'lineGap' 'float *'
|     `-BinaryOperator 0x7fffd844d880 <col:15, col:35> 'float' '*'
|       |-CStyleCastExpr 0x7fffd844d818 <col:15, col:23> 'float' <IntegralToFloating>
|       | `-ImplicitCastExpr 0x7fffd844d800 <col:23> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fffd844d7c0 <col:23> 'int' lvalue Var 0x7fffd844cb48 'i_lineGap' 'int'
|       `-ImplicitCastExpr 0x7fffd844d868 <col:35> 'float' <LValueToRValue>
|         `-DeclRefExpr 0x7fffd844d840 <col:35> 'float' lvalue Var 0x7fffd844cbf8 'scale' 'float'
|-FunctionDecl 0x7fffd844dd38 prev 0x7fffd834b620 <line:501:19, line:4331:1> line:4306:16 stbtt_GetPackedQuad 'void (const stbtt_packedchar *, int, int, int, float *, float *, stbtt_aligned_quad *, int)' extern
| |-ParmVarDecl 0x7fffd844d938 <col:36, col:60> col:60 used chardata 'const stbtt_packedchar *'
| |-ParmVarDecl 0x7fffd844d9b0 <col:70, col:74> col:74 used pw 'int'
| |-ParmVarDecl 0x7fffd844da28 <col:78, col:82> col:82 used ph 'int'
| |-ParmVarDecl 0x7fffd844daa0 <col:86, col:90> col:90 used char_index 'int'
| |-ParmVarDecl 0x7fffd844db18 <col:102, col:109> col:109 used xpos 'float *'
| |-ParmVarDecl 0x7fffd844db90 <col:115, col:122> col:122 used ypos 'float *'
| |-ParmVarDecl 0x7fffd844dc00 <col:128, col:148> col:148 used q 'stbtt_aligned_quad *'
| |-ParmVarDecl 0x7fffd844dc78 <col:151, col:155> col:155 used align_to_integer 'int'
| `-CompoundStmt 0x7fffd844ffc8 <line:4307:1, line:4331:1>
|   |-DeclStmt 0x7fffd844e060 <line:4308:4, col:42>
|   | |-VarDecl 0x7fffd844de30 <col:4, col:23> col:10 used ipw 'float' cinit
|   | | `-BinaryOperator 0x7fffd844df08 <col:16, col:23> 'float' '/'
|   | |   |-FloatingLiteral 0x7fffd844de90 <col:16> 'float' 1.000000e+00
|   | |   `-ImplicitCastExpr 0x7fffd844def0 <col:23> 'float' <IntegralToFloating>
|   | |     `-ImplicitCastExpr 0x7fffd844ded8 <col:23> 'int' <LValueToRValue>
|   | |       `-DeclRefExpr 0x7fffd844deb0 <col:23> 'int' lvalue ParmVar 0x7fffd844d9b0 'pw' 'int'
|   | `-VarDecl 0x7fffd844df48 <col:4, col:40> col:27 used iph 'float' cinit
|   |   `-BinaryOperator 0x7fffd844e020 <col:33, col:40> 'float' '/'
|   |     |-FloatingLiteral 0x7fffd844dfa8 <col:33> 'float' 1.000000e+00
|   |     `-ImplicitCastExpr 0x7fffd844e008 <col:40> 'float' <IntegralToFloating>
|   |       `-ImplicitCastExpr 0x7fffd844dff0 <col:40> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x7fffd844dfc8 <col:40> 'int' lvalue ParmVar 0x7fffd844da28 'ph' 'int'
|   |-DeclStmt 0x7fffd844e190 <line:4309:4, col:53>
|   | `-VarDecl 0x7fffd844e088 <col:4, col:43> col:28 used b 'const stbtt_packedchar *' cinit
|   |   `-BinaryOperator 0x7fffd844e168 <col:32, col:43> 'const stbtt_packedchar *' '+'
|   |     |-ImplicitCastExpr 0x7fffd844e138 <col:32> 'const stbtt_packedchar *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd844e0e8 <col:32> 'const stbtt_packedchar *' lvalue ParmVar 0x7fffd844d938 'chardata' 'const stbtt_packedchar *'
|   |     `-ImplicitCastExpr 0x7fffd844e150 <col:43> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd844e110 <col:43> 'int' lvalue ParmVar 0x7fffd844daa0 'char_index' 'int'
|   |-IfStmt 0x7fffd844f720 <line:4311:4, line:4323:4>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd844e1d0 <line:4311:8> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd844e1a8 <col:8> 'int' lvalue ParmVar 0x7fffd844dc78 'align_to_integer' 'int'
|   | |-CompoundStmt 0x7fffd844ef70 <col:26, line:4318:4>
|   | | |-DeclStmt 0x7fffd844e550 <line:4312:7, col:63>
|   | | | `-VarDecl 0x7fffd844e200 <col:7, line:438:45> line:4312:13 used x 'float' cinit
|   | | |   `-CStyleCastExpr 0x7fffd844e528 <col:17, line:438:45> 'float' <IntegralToFloating>
|   | | |     `-ParenExpr 0x7fffd844e508 <col:30, col:45> 'int'
|   | | |       `-CStyleCastExpr 0x7fffd844e498 <col:31, col:44> 'int' <FloatingToIntegral>
|   | | |         `-CallExpr 0x7fffd844e438 <col:37, col:44> 'double'
|   | | |           |-ImplicitCastExpr 0x7fffd844e420 <col:37> 'double (*)(double)' <FunctionToPointerDecay>
|   | | |           | `-DeclRefExpr 0x7fffd844e260 <col:37> 'double (double)' Function 0x7fffd8291850 'floor' 'double (double)'
|   | | |           `-ImplicitCastExpr 0x7fffd844e468 <line:4312:38, col:58> 'double' <FloatingCast>
|   | | |             `-BinaryOperator 0x7fffd844e3f8 <col:38, col:58> 'float' '+'
|   | | |               |-ParenExpr 0x7fffd844e3b8 <col:38, col:54> 'float'
|   | | |               | `-BinaryOperator 0x7fffd844e390 <col:39, col:50> 'float' '+'
|   | | |               |   |-ImplicitCastExpr 0x7fffd844e360 <col:39, col:40> 'float' <LValueToRValue>
|   | | |               |   | `-UnaryOperator 0x7fffd844e2c8 <col:39, col:40> 'float' lvalue prefix '*'
|   | | |               |   |   `-ImplicitCastExpr 0x7fffd844e2b0 <col:40> 'float *' <LValueToRValue>
|   | | |               |   |     `-DeclRefExpr 0x7fffd844e288 <col:40> 'float *' lvalue ParmVar 0x7fffd844db18 'xpos' 'float *'
|   | | |               |   `-ImplicitCastExpr 0x7fffd844e378 <col:47, col:50> 'float' <LValueToRValue>
|   | | |               |     `-MemberExpr 0x7fffd844e328 <col:47, col:50> 'const float' lvalue ->xoff 0x7fffd8342e28
|   | | |               |       `-ImplicitCastExpr 0x7fffd844e310 <col:47> 'const stbtt_packedchar *' <LValueToRValue>
|   | | |               |         `-DeclRefExpr 0x7fffd844e2e8 <col:47> 'const stbtt_packedchar *' lvalue Var 0x7fffd844e088 'b' 'const stbtt_packedchar *'
|   | | |               `-FloatingLiteral 0x7fffd844e3d8 <col:58> 'float' 5.000000e-01
|   | | |-DeclStmt 0x7fffd844e8f8 <line:4313:7, col:63>
|   | | | `-VarDecl 0x7fffd844e580 <col:7, line:438:45> line:4313:13 used y 'float' cinit
|   | | |   `-CStyleCastExpr 0x7fffd844e8d0 <col:17, line:438:45> 'float' <IntegralToFloating>
|   | | |     `-ParenExpr 0x7fffd844e8b0 <col:30, col:45> 'int'
|   | | |       `-CStyleCastExpr 0x7fffd844e840 <col:31, col:44> 'int' <FloatingToIntegral>
|   | | |         `-CallExpr 0x7fffd844e7e0 <col:37, col:44> 'double'
|   | | |           |-ImplicitCastExpr 0x7fffd844e7a0 <col:37> 'double (*)(double)' <FunctionToPointerDecay>
|   | | |           | `-DeclRefExpr 0x7fffd844e5e0 <col:37> 'double (double)' Function 0x7fffd8291850 'floor' 'double (double)'
|   | | |           `-ImplicitCastExpr 0x7fffd844e810 <line:4313:38, col:58> 'double' <FloatingCast>
|   | | |             `-BinaryOperator 0x7fffd844e778 <col:38, col:58> 'float' '+'
|   | | |               |-ParenExpr 0x7fffd844e738 <col:38, col:54> 'float'
|   | | |               | `-BinaryOperator 0x7fffd844e710 <col:39, col:50> 'float' '+'
|   | | |               |   |-ImplicitCastExpr 0x7fffd844e6e0 <col:39, col:40> 'float' <LValueToRValue>
|   | | |               |   | `-UnaryOperator 0x7fffd844e648 <col:39, col:40> 'float' lvalue prefix '*'
|   | | |               |   |   `-ImplicitCastExpr 0x7fffd844e630 <col:40> 'float *' <LValueToRValue>
|   | | |               |   |     `-DeclRefExpr 0x7fffd844e608 <col:40> 'float *' lvalue ParmVar 0x7fffd844db90 'ypos' 'float *'
|   | | |               |   `-ImplicitCastExpr 0x7fffd844e6f8 <col:47, col:50> 'float' <LValueToRValue>
|   | | |               |     `-MemberExpr 0x7fffd844e6a8 <col:47, col:50> 'const float' lvalue ->yoff 0x7fffd8342e88
|   | | |               |       `-ImplicitCastExpr 0x7fffd844e690 <col:47> 'const stbtt_packedchar *' <LValueToRValue>
|   | | |               |         `-DeclRefExpr 0x7fffd844e668 <col:47> 'const stbtt_packedchar *' lvalue Var 0x7fffd844e088 'b' 'const stbtt_packedchar *'
|   | | |               `-FloatingLiteral 0x7fffd844e758 <col:58> 'float' 5.000000e-01
|   | | |-BinaryOperator 0x7fffd844e9c8 <line:4314:7, col:15> 'float' '='
|   | | | |-MemberExpr 0x7fffd844e950 <col:7, col:10> 'float' lvalue ->x0 0x7fffd82a8218
|   | | | | `-ImplicitCastExpr 0x7fffd844e938 <col:7> 'stbtt_aligned_quad *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x7fffd844e910 <col:7> 'stbtt_aligned_quad *' lvalue ParmVar 0x7fffd844dc00 'q' 'stbtt_aligned_quad *'
|   | | | `-ImplicitCastExpr 0x7fffd844e9b0 <col:15> 'float' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd844e988 <col:15> 'float' lvalue Var 0x7fffd844e200 'x' 'float'
|   | | |-BinaryOperator 0x7fffd844eaa8 <line:4315:7, col:15> 'float' '='
|   | | | |-MemberExpr 0x7fffd844ea30 <col:7, col:10> 'float' lvalue ->y0 0x7fffd82a8278
|   | | | | `-ImplicitCastExpr 0x7fffd844ea18 <col:7> 'stbtt_aligned_quad *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x7fffd844e9f0 <col:7> 'stbtt_aligned_quad *' lvalue ParmVar 0x7fffd844dc00 'q' 'stbtt_aligned_quad *'
|   | | | `-ImplicitCastExpr 0x7fffd844ea90 <col:15> 'float' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd844ea68 <col:15> 'float' lvalue Var 0x7fffd844e580 'y' 'float'
|   | | |-BinaryOperator 0x7fffd844ecf8 <line:4316:7, col:33> 'float' '='
|   | | | |-MemberExpr 0x7fffd844eb10 <col:7, col:10> 'float' lvalue ->x1 0x7fffd82a8398
|   | | | | `-ImplicitCastExpr 0x7fffd844eaf8 <col:7> 'stbtt_aligned_quad *' <LValueToRValue>
|   | | | |   `-DeclRefExpr 0x7fffd844ead0 <col:7> 'stbtt_aligned_quad *' lvalue ParmVar 0x7fffd844dc00 'q' 'stbtt_aligned_quad *'
|   | | | `-BinaryOperator 0x7fffd844ecd0 <col:15, col:33> 'float' '-'
|   | | |   |-BinaryOperator 0x7fffd844ec18 <col:15, col:22> 'float' '+'
|   | | |   | |-ImplicitCastExpr 0x7fffd844ebe8 <col:15> 'float' <LValueToRValue>
|   | | |   | | `-DeclRefExpr 0x7fffd844eb48 <col:15> 'float' lvalue Var 0x7fffd844e200 'x' 'float'
|   | | |   | `-ImplicitCastExpr 0x7fffd844ec00 <col:19, col:22> 'float' <LValueToRValue>
|   | | |   |   `-MemberExpr 0x7fffd844ebb0 <col:19, col:22> 'const float' lvalue ->xoff2 0x7fffd8342f48
|   | | |   |     `-ImplicitCastExpr 0x7fffd844eb98 <col:19> 'const stbtt_packedchar *' <LValueToRValue>
|   | | |   |       `-DeclRefExpr 0x7fffd844eb70 <col:19> 'const stbtt_packedchar *' lvalue Var 0x7fffd844e088 'b' 'const stbtt_packedchar *'
|   | | |   `-ImplicitCastExpr 0x7fffd844ecb8 <col:30, col:33> 'float' <LValueToRValue>
|   | | |     `-MemberExpr 0x7fffd844ec80 <col:30, col:33> 'const float' lvalue ->xoff 0x7fffd8342e28
|   | | |       `-ImplicitCastExpr 0x7fffd844ec68 <col:30> 'const stbtt_packedchar *' <LValueToRValue>
|   | | |         `-DeclRefExpr 0x7fffd844ec40 <col:30> 'const stbtt_packedchar *' lvalue Var 0x7fffd844e088 'b' 'const stbtt_packedchar *'
|   | | `-BinaryOperator 0x7fffd844ef48 <line:4317:7, col:33> 'float' '='
|   | |   |-MemberExpr 0x7fffd844ed60 <col:7, col:10> 'float' lvalue ->y1 0x7fffd82a83f8
|   | |   | `-ImplicitCastExpr 0x7fffd844ed48 <col:7> 'stbtt_aligned_quad *' <LValueToRValue>
|   | |   |   `-DeclRefExpr 0x7fffd844ed20 <col:7> 'stbtt_aligned_quad *' lvalue ParmVar 0x7fffd844dc00 'q' 'stbtt_aligned_quad *'
|   | |   `-BinaryOperator 0x7fffd844ef20 <col:15, col:33> 'float' '-'
|   | |     |-BinaryOperator 0x7fffd844ee68 <col:15, col:22> 'float' '+'
|   | |     | |-ImplicitCastExpr 0x7fffd844ee38 <col:15> 'float' <LValueToRValue>
|   | |     | | `-DeclRefExpr 0x7fffd844ed98 <col:15> 'float' lvalue Var 0x7fffd844e580 'y' 'float'
|   | |     | `-ImplicitCastExpr 0x7fffd844ee50 <col:19, col:22> 'float' <LValueToRValue>
|   | |     |   `-MemberExpr 0x7fffd844ee00 <col:19, col:22> 'const float' lvalue ->yoff2 0x7fffd8342fa8
|   | |     |     `-ImplicitCastExpr 0x7fffd844ede8 <col:19> 'const stbtt_packedchar *' <LValueToRValue>
|   | |     |       `-DeclRefExpr 0x7fffd844edc0 <col:19> 'const stbtt_packedchar *' lvalue Var 0x7fffd844e088 'b' 'const stbtt_packedchar *'
|   | |     `-ImplicitCastExpr 0x7fffd844ef08 <col:30, col:33> 'float' <LValueToRValue>
|   | |       `-MemberExpr 0x7fffd844eed0 <col:30, col:33> 'const float' lvalue ->yoff 0x7fffd8342e88
|   | |         `-ImplicitCastExpr 0x7fffd844eeb8 <col:30> 'const stbtt_packedchar *' <LValueToRValue>
|   | |           `-DeclRefExpr 0x7fffd844ee90 <col:30> 'const stbtt_packedchar *' lvalue Var 0x7fffd844e088 'b' 'const stbtt_packedchar *'
|   | `-CompoundStmt 0x7fffd844f6f0 <line:4318:11, line:4323:4>
|   |   |-BinaryOperator 0x7fffd844f158 <line:4319:7, col:26> 'float' '='
|   |   | |-MemberExpr 0x7fffd844eff0 <col:7, col:10> 'float' lvalue ->x0 0x7fffd82a8218
|   |   | | `-ImplicitCastExpr 0x7fffd844efd8 <col:7> 'stbtt_aligned_quad *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x7fffd844efb0 <col:7> 'stbtt_aligned_quad *' lvalue ParmVar 0x7fffd844dc00 'q' 'stbtt_aligned_quad *'
|   |   | `-BinaryOperator 0x7fffd844f130 <col:15, col:26> 'float' '+'
|   |   |   |-ImplicitCastExpr 0x7fffd844f100 <col:15, col:16> 'float' <LValueToRValue>
|   |   |   | `-UnaryOperator 0x7fffd844f068 <col:15, col:16> 'float' lvalue prefix '*'
|   |   |   |   `-ImplicitCastExpr 0x7fffd844f050 <col:16> 'float *' <LValueToRValue>
|   |   |   |     `-DeclRefExpr 0x7fffd844f028 <col:16> 'float *' lvalue ParmVar 0x7fffd844db18 'xpos' 'float *'
|   |   |   `-ImplicitCastExpr 0x7fffd844f118 <col:23, col:26> 'float' <LValueToRValue>
|   |   |     `-MemberExpr 0x7fffd844f0c8 <col:23, col:26> 'const float' lvalue ->xoff 0x7fffd8342e28
|   |   |       `-ImplicitCastExpr 0x7fffd844f0b0 <col:23> 'const stbtt_packedchar *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x7fffd844f088 <col:23> 'const stbtt_packedchar *' lvalue Var 0x7fffd844e088 'b' 'const stbtt_packedchar *'
|   |   |-BinaryOperator 0x7fffd844f328 <line:4320:7, col:26> 'float' '='
|   |   | |-MemberExpr 0x7fffd844f1c0 <col:7, col:10> 'float' lvalue ->y0 0x7fffd82a8278
|   |   | | `-ImplicitCastExpr 0x7fffd844f1a8 <col:7> 'stbtt_aligned_quad *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x7fffd844f180 <col:7> 'stbtt_aligned_quad *' lvalue ParmVar 0x7fffd844dc00 'q' 'stbtt_aligned_quad *'
|   |   | `-BinaryOperator 0x7fffd844f300 <col:15, col:26> 'float' '+'
|   |   |   |-ImplicitCastExpr 0x7fffd844f2d0 <col:15, col:16> 'float' <LValueToRValue>
|   |   |   | `-UnaryOperator 0x7fffd844f238 <col:15, col:16> 'float' lvalue prefix '*'
|   |   |   |   `-ImplicitCastExpr 0x7fffd844f220 <col:16> 'float *' <LValueToRValue>
|   |   |   |     `-DeclRefExpr 0x7fffd844f1f8 <col:16> 'float *' lvalue ParmVar 0x7fffd844db90 'ypos' 'float *'
|   |   |   `-ImplicitCastExpr 0x7fffd844f2e8 <col:23, col:26> 'float' <LValueToRValue>
|   |   |     `-MemberExpr 0x7fffd844f298 <col:23, col:26> 'const float' lvalue ->yoff 0x7fffd8342e88
|   |   |       `-ImplicitCastExpr 0x7fffd844f280 <col:23> 'const stbtt_packedchar *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x7fffd844f258 <col:23> 'const stbtt_packedchar *' lvalue Var 0x7fffd844e088 'b' 'const stbtt_packedchar *'
|   |   |-BinaryOperator 0x7fffd844f4f8 <line:4321:7, col:26> 'float' '='
|   |   | |-MemberExpr 0x7fffd844f390 <col:7, col:10> 'float' lvalue ->x1 0x7fffd82a8398
|   |   | | `-ImplicitCastExpr 0x7fffd844f378 <col:7> 'stbtt_aligned_quad *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x7fffd844f350 <col:7> 'stbtt_aligned_quad *' lvalue ParmVar 0x7fffd844dc00 'q' 'stbtt_aligned_quad *'
|   |   | `-BinaryOperator 0x7fffd844f4d0 <col:15, col:26> 'float' '+'
|   |   |   |-ImplicitCastExpr 0x7fffd844f4a0 <col:15, col:16> 'float' <LValueToRValue>
|   |   |   | `-UnaryOperator 0x7fffd844f408 <col:15, col:16> 'float' lvalue prefix '*'
|   |   |   |   `-ImplicitCastExpr 0x7fffd844f3f0 <col:16> 'float *' <LValueToRValue>
|   |   |   |     `-DeclRefExpr 0x7fffd844f3c8 <col:16> 'float *' lvalue ParmVar 0x7fffd844db18 'xpos' 'float *'
|   |   |   `-ImplicitCastExpr 0x7fffd844f4b8 <col:23, col:26> 'float' <LValueToRValue>
|   |   |     `-MemberExpr 0x7fffd844f468 <col:23, col:26> 'const float' lvalue ->xoff2 0x7fffd8342f48
|   |   |       `-ImplicitCastExpr 0x7fffd844f450 <col:23> 'const stbtt_packedchar *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x7fffd844f428 <col:23> 'const stbtt_packedchar *' lvalue Var 0x7fffd844e088 'b' 'const stbtt_packedchar *'
|   |   `-BinaryOperator 0x7fffd844f6c8 <line:4322:7, col:26> 'float' '='
|   |     |-MemberExpr 0x7fffd844f560 <col:7, col:10> 'float' lvalue ->y1 0x7fffd82a83f8
|   |     | `-ImplicitCastExpr 0x7fffd844f548 <col:7> 'stbtt_aligned_quad *' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fffd844f520 <col:7> 'stbtt_aligned_quad *' lvalue ParmVar 0x7fffd844dc00 'q' 'stbtt_aligned_quad *'
|   |     `-BinaryOperator 0x7fffd844f6a0 <col:15, col:26> 'float' '+'
|   |       |-ImplicitCastExpr 0x7fffd844f670 <col:15, col:16> 'float' <LValueToRValue>
|   |       | `-UnaryOperator 0x7fffd844f5d8 <col:15, col:16> 'float' lvalue prefix '*'
|   |       |   `-ImplicitCastExpr 0x7fffd844f5c0 <col:16> 'float *' <LValueToRValue>
|   |       |     `-DeclRefExpr 0x7fffd844f598 <col:16> 'float *' lvalue ParmVar 0x7fffd844db90 'ypos' 'float *'
|   |       `-ImplicitCastExpr 0x7fffd844f688 <col:23, col:26> 'float' <LValueToRValue>
|   |         `-MemberExpr 0x7fffd844f638 <col:23, col:26> 'const float' lvalue ->yoff2 0x7fffd8342fa8
|   |           `-ImplicitCastExpr 0x7fffd844f620 <col:23> 'const stbtt_packedchar *' <LValueToRValue>
|   |             `-DeclRefExpr 0x7fffd844f5f8 <col:23> 'const stbtt_packedchar *' lvalue Var 0x7fffd844e088 'b' 'const stbtt_packedchar *'
|   |-BinaryOperator 0x7fffd844f8f8 <line:4325:4, col:20> 'float' '='
|   | |-MemberExpr 0x7fffd844f798 <col:4, col:7> 'float' lvalue ->s0 0x7fffd82a82d8
|   | | `-ImplicitCastExpr 0x7fffd844f780 <col:4> 'stbtt_aligned_quad *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd844f758 <col:4> 'stbtt_aligned_quad *' lvalue ParmVar 0x7fffd844dc00 'q' 'stbtt_aligned_quad *'
|   | `-BinaryOperator 0x7fffd844f8d0 <col:12, col:20> 'float' '*'
|   |   |-ImplicitCastExpr 0x7fffd844f8b8 <col:12, col:15> 'float' <IntegralToFloating>
|   |   | `-ImplicitCastExpr 0x7fffd844f888 <col:12, col:15> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x7fffd844f870 <col:12, col:15> 'unsigned short' <LValueToRValue>
|   |   |     `-MemberExpr 0x7fffd844f810 <col:12, col:15> 'const unsigned short' lvalue ->x0 0x7fffd8342ca8
|   |   |       `-ImplicitCastExpr 0x7fffd844f7f8 <col:12> 'const stbtt_packedchar *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x7fffd844f7d0 <col:12> 'const stbtt_packedchar *' lvalue Var 0x7fffd844e088 'b' 'const stbtt_packedchar *'
|   |   `-ImplicitCastExpr 0x7fffd844f8a0 <col:20> 'float' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd844f848 <col:20> 'float' lvalue Var 0x7fffd844de30 'ipw' 'float'
|   |-BinaryOperator 0x7fffd844fac0 <line:4326:4, col:20> 'float' '='
|   | |-MemberExpr 0x7fffd844f960 <col:4, col:7> 'float' lvalue ->t0 0x7fffd82a8338
|   | | `-ImplicitCastExpr 0x7fffd844f948 <col:4> 'stbtt_aligned_quad *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd844f920 <col:4> 'stbtt_aligned_quad *' lvalue ParmVar 0x7fffd844dc00 'q' 'stbtt_aligned_quad *'
|   | `-BinaryOperator 0x7fffd844fa98 <col:12, col:20> 'float' '*'
|   |   |-ImplicitCastExpr 0x7fffd844fa80 <col:12, col:15> 'float' <IntegralToFloating>
|   |   | `-ImplicitCastExpr 0x7fffd844fa50 <col:12, col:15> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x7fffd844fa38 <col:12, col:15> 'unsigned short' <LValueToRValue>
|   |   |     `-MemberExpr 0x7fffd844f9d8 <col:12, col:15> 'const unsigned short' lvalue ->y0 0x7fffd8342d08
|   |   |       `-ImplicitCastExpr 0x7fffd844f9c0 <col:12> 'const stbtt_packedchar *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x7fffd844f998 <col:12> 'const stbtt_packedchar *' lvalue Var 0x7fffd844e088 'b' 'const stbtt_packedchar *'
|   |   `-ImplicitCastExpr 0x7fffd844fa68 <col:20> 'float' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd844fa10 <col:20> 'float' lvalue Var 0x7fffd844df48 'iph' 'float'
|   |-BinaryOperator 0x7fffd844fc88 <line:4327:4, col:20> 'float' '='
|   | |-MemberExpr 0x7fffd844fb28 <col:4, col:7> 'float' lvalue ->s1 0x7fffd82a8458
|   | | `-ImplicitCastExpr 0x7fffd844fb10 <col:4> 'stbtt_aligned_quad *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd844fae8 <col:4> 'stbtt_aligned_quad *' lvalue ParmVar 0x7fffd844dc00 'q' 'stbtt_aligned_quad *'
|   | `-BinaryOperator 0x7fffd844fc60 <col:12, col:20> 'float' '*'
|   |   |-ImplicitCastExpr 0x7fffd844fc48 <col:12, col:15> 'float' <IntegralToFloating>
|   |   | `-ImplicitCastExpr 0x7fffd844fc18 <col:12, col:15> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x7fffd844fc00 <col:12, col:15> 'unsigned short' <LValueToRValue>
|   |   |     `-MemberExpr 0x7fffd844fba0 <col:12, col:15> 'const unsigned short' lvalue ->x1 0x7fffd8342d68
|   |   |       `-ImplicitCastExpr 0x7fffd844fb88 <col:12> 'const stbtt_packedchar *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x7fffd844fb60 <col:12> 'const stbtt_packedchar *' lvalue Var 0x7fffd844e088 'b' 'const stbtt_packedchar *'
|   |   `-ImplicitCastExpr 0x7fffd844fc30 <col:20> 'float' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd844fbd8 <col:20> 'float' lvalue Var 0x7fffd844de30 'ipw' 'float'
|   |-BinaryOperator 0x7fffd844fe50 <line:4328:4, col:20> 'float' '='
|   | |-MemberExpr 0x7fffd844fcf0 <col:4, col:7> 'float' lvalue ->t1 0x7fffd82a84b8
|   | | `-ImplicitCastExpr 0x7fffd844fcd8 <col:4> 'stbtt_aligned_quad *' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd844fcb0 <col:4> 'stbtt_aligned_quad *' lvalue ParmVar 0x7fffd844dc00 'q' 'stbtt_aligned_quad *'
|   | `-BinaryOperator 0x7fffd844fe28 <col:12, col:20> 'float' '*'
|   |   |-ImplicitCastExpr 0x7fffd844fe10 <col:12, col:15> 'float' <IntegralToFloating>
|   |   | `-ImplicitCastExpr 0x7fffd844fde0 <col:12, col:15> 'int' <IntegralCast>
|   |   |   `-ImplicitCastExpr 0x7fffd844fdc8 <col:12, col:15> 'unsigned short' <LValueToRValue>
|   |   |     `-MemberExpr 0x7fffd844fd68 <col:12, col:15> 'const unsigned short' lvalue ->y1 0x7fffd8342dc8
|   |   |       `-ImplicitCastExpr 0x7fffd844fd50 <col:12> 'const stbtt_packedchar *' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x7fffd844fd28 <col:12> 'const stbtt_packedchar *' lvalue Var 0x7fffd844e088 'b' 'const stbtt_packedchar *'
|   |   `-ImplicitCastExpr 0x7fffd844fdf8 <col:20> 'float' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd844fda0 <col:20> 'float' lvalue Var 0x7fffd844df48 'iph' 'float'
|   `-CompoundAssignOperator 0x7fffd844ff68 <line:4330:4, col:16> 'float' '+=' ComputeLHSTy='float' ComputeResultTy='float'
|     |-UnaryOperator 0x7fffd844feb8 <col:4, col:5> 'float' lvalue prefix '*'
|     | `-ImplicitCastExpr 0x7fffd844fea0 <col:5> 'float *' <LValueToRValue>
|     |   `-DeclRefExpr 0x7fffd844fe78 <col:5> 'float *' lvalue ParmVar 0x7fffd844db18 'xpos' 'float *'
|     `-ImplicitCastExpr 0x7fffd844ff50 <col:13, col:16> 'float' <LValueToRValue>
|       `-MemberExpr 0x7fffd844ff18 <col:13, col:16> 'const float' lvalue ->xadvance 0x7fffd8342ee8
|         `-ImplicitCastExpr 0x7fffd844ff00 <col:13> 'const stbtt_packedchar *' <LValueToRValue>
|           `-DeclRefExpr 0x7fffd844fed8 <col:13> 'const stbtt_packedchar *' lvalue Var 0x7fffd844e088 'b' 'const stbtt_packedchar *'
|-FunctionDecl 0x7fffd8450658 <line:4341:1, line:4403:1> line:4341:12 used stbtt__ray_intersect_bezier 'int (float *, float *, float *, float *, float *, float (*)[2])' static
| |-ParmVarDecl 0x7fffd84500d0 <col:40, col:52> col:46 used orig 'float *':'float *'
| |-ParmVarDecl 0x7fffd8450178 <col:55, col:66> col:61 used ray 'float *':'float *'
| |-ParmVarDecl 0x7fffd8450220 <col:69, col:79> col:75 used q0 'float *':'float *'
| |-ParmVarDecl 0x7fffd84502c8 <col:82, col:92> col:88 used q1 'float *':'float *'
| |-ParmVarDecl 0x7fffd8450370 <col:95, col:105> col:101 used q2 'float *':'float *'
| |-ParmVarDecl 0x7fffd84504e0 <col:108, col:123> col:114 used hits 'float (*)[2]':'float (*)[2]'
| `-CompoundStmt 0x7fffd8455660 <line:4342:1, line:4403:1>
|   |-DeclStmt 0x7fffd8450ac0 <line:4343:4, col:46>
|   | `-VarDecl 0x7fffd8450740 <col:4, col:45> col:10 used q0perp 'float' cinit
|   |   `-BinaryOperator 0x7fffd8450a98 <col:19, col:45> 'float' '-'
|   |     |-BinaryOperator 0x7fffd8450908 <col:19, col:30> 'float' '*'
|   |     | |-ImplicitCastExpr 0x7fffd84508d8 <col:19, col:23> 'float' <LValueToRValue>
|   |     | | `-ArraySubscriptExpr 0x7fffd8450828 <col:19, col:23> 'float' lvalue
|   |     | |   |-ImplicitCastExpr 0x7fffd8450810 <col:19> 'float *':'float *' <LValueToRValue>
|   |     | |   | `-DeclRefExpr 0x7fffd84507a0 <col:19> 'float *':'float *' lvalue ParmVar 0x7fffd8450220 'q0' 'float *':'float *'
|   |     | |   `-IntegerLiteral 0x7fffd84507f0 <col:22> 'int' 1
|   |     | `-ImplicitCastExpr 0x7fffd84508f0 <col:25, col:30> 'float' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x7fffd84508b0 <col:25, col:30> 'float' lvalue
|   |     |     |-ImplicitCastExpr 0x7fffd8450898 <col:25> 'float *':'float *' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x7fffd8450850 <col:25> 'float *':'float *' lvalue ParmVar 0x7fffd8450178 'ray' 'float *':'float *'
|   |     |     `-IntegerLiteral 0x7fffd8450878 <col:29> 'int' 0
|   |     `-BinaryOperator 0x7fffd8450a70 <col:34, col:45> 'float' '*'
|   |       |-ImplicitCastExpr 0x7fffd8450a40 <col:34, col:38> 'float' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x7fffd8450990 <col:34, col:38> 'float' lvalue
|   |       |   |-ImplicitCastExpr 0x7fffd8450978 <col:34> 'float *':'float *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x7fffd8450930 <col:34> 'float *':'float *' lvalue ParmVar 0x7fffd8450220 'q0' 'float *':'float *'
|   |       |   `-IntegerLiteral 0x7fffd8450958 <col:37> 'int' 0
|   |       `-ImplicitCastExpr 0x7fffd8450a58 <col:40, col:45> 'float' <LValueToRValue>
|   |         `-ArraySubscriptExpr 0x7fffd8450a18 <col:40, col:45> 'float' lvalue
|   |           |-ImplicitCastExpr 0x7fffd8450a00 <col:40> 'float *':'float *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x7fffd84509b8 <col:40> 'float *':'float *' lvalue ParmVar 0x7fffd8450178 'ray' 'float *':'float *'
|   |           `-IntegerLiteral 0x7fffd84509e0 <col:44> 'int' 1
|   |-DeclStmt 0x7fffd8450e48 <line:4344:4, col:46>
|   | `-VarDecl 0x7fffd8450af0 <col:4, col:45> col:10 used q1perp 'float' cinit
|   |   `-BinaryOperator 0x7fffd8450e20 <col:19, col:45> 'float' '-'
|   |     |-BinaryOperator 0x7fffd8450c90 <col:19, col:30> 'float' '*'
|   |     | |-ImplicitCastExpr 0x7fffd8450c60 <col:19, col:23> 'float' <LValueToRValue>
|   |     | | `-ArraySubscriptExpr 0x7fffd8450bb0 <col:19, col:23> 'float' lvalue
|   |     | |   |-ImplicitCastExpr 0x7fffd8450b98 <col:19> 'float *':'float *' <LValueToRValue>
|   |     | |   | `-DeclRefExpr 0x7fffd8450b50 <col:19> 'float *':'float *' lvalue ParmVar 0x7fffd84502c8 'q1' 'float *':'float *'
|   |     | |   `-IntegerLiteral 0x7fffd8450b78 <col:22> 'int' 1
|   |     | `-ImplicitCastExpr 0x7fffd8450c78 <col:25, col:30> 'float' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x7fffd8450c38 <col:25, col:30> 'float' lvalue
|   |     |     |-ImplicitCastExpr 0x7fffd8450c20 <col:25> 'float *':'float *' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x7fffd8450bd8 <col:25> 'float *':'float *' lvalue ParmVar 0x7fffd8450178 'ray' 'float *':'float *'
|   |     |     `-IntegerLiteral 0x7fffd8450c00 <col:29> 'int' 0
|   |     `-BinaryOperator 0x7fffd8450df8 <col:34, col:45> 'float' '*'
|   |       |-ImplicitCastExpr 0x7fffd8450dc8 <col:34, col:38> 'float' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x7fffd8450d18 <col:34, col:38> 'float' lvalue
|   |       |   |-ImplicitCastExpr 0x7fffd8450d00 <col:34> 'float *':'float *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x7fffd8450cb8 <col:34> 'float *':'float *' lvalue ParmVar 0x7fffd84502c8 'q1' 'float *':'float *'
|   |       |   `-IntegerLiteral 0x7fffd8450ce0 <col:37> 'int' 0
|   |       `-ImplicitCastExpr 0x7fffd8450de0 <col:40, col:45> 'float' <LValueToRValue>
|   |         `-ArraySubscriptExpr 0x7fffd8450da0 <col:40, col:45> 'float' lvalue
|   |           |-ImplicitCastExpr 0x7fffd8450d88 <col:40> 'float *':'float *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x7fffd8450d40 <col:40> 'float *':'float *' lvalue ParmVar 0x7fffd8450178 'ray' 'float *':'float *'
|   |           `-IntegerLiteral 0x7fffd8450d68 <col:44> 'int' 1
|   |-DeclStmt 0x7fffd84511d0 <line:4345:4, col:46>
|   | `-VarDecl 0x7fffd8450e78 <col:4, col:45> col:10 used q2perp 'float' cinit
|   |   `-BinaryOperator 0x7fffd84511a8 <col:19, col:45> 'float' '-'
|   |     |-BinaryOperator 0x7fffd8451018 <col:19, col:30> 'float' '*'
|   |     | |-ImplicitCastExpr 0x7fffd8450fe8 <col:19, col:23> 'float' <LValueToRValue>
|   |     | | `-ArraySubscriptExpr 0x7fffd8450f38 <col:19, col:23> 'float' lvalue
|   |     | |   |-ImplicitCastExpr 0x7fffd8450f20 <col:19> 'float *':'float *' <LValueToRValue>
|   |     | |   | `-DeclRefExpr 0x7fffd8450ed8 <col:19> 'float *':'float *' lvalue ParmVar 0x7fffd8450370 'q2' 'float *':'float *'
|   |     | |   `-IntegerLiteral 0x7fffd8450f00 <col:22> 'int' 1
|   |     | `-ImplicitCastExpr 0x7fffd8451000 <col:25, col:30> 'float' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x7fffd8450fc0 <col:25, col:30> 'float' lvalue
|   |     |     |-ImplicitCastExpr 0x7fffd8450fa8 <col:25> 'float *':'float *' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x7fffd8450f60 <col:25> 'float *':'float *' lvalue ParmVar 0x7fffd8450178 'ray' 'float *':'float *'
|   |     |     `-IntegerLiteral 0x7fffd8450f88 <col:29> 'int' 0
|   |     `-BinaryOperator 0x7fffd8451180 <col:34, col:45> 'float' '*'
|   |       |-ImplicitCastExpr 0x7fffd8451150 <col:34, col:38> 'float' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x7fffd84510a0 <col:34, col:38> 'float' lvalue
|   |       |   |-ImplicitCastExpr 0x7fffd8451088 <col:34> 'float *':'float *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x7fffd8451040 <col:34> 'float *':'float *' lvalue ParmVar 0x7fffd8450370 'q2' 'float *':'float *'
|   |       |   `-IntegerLiteral 0x7fffd8451068 <col:37> 'int' 0
|   |       `-ImplicitCastExpr 0x7fffd8451168 <col:40, col:45> 'float' <LValueToRValue>
|   |         `-ArraySubscriptExpr 0x7fffd8451128 <col:40, col:45> 'float' lvalue
|   |           |-ImplicitCastExpr 0x7fffd8451110 <col:40> 'float *':'float *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x7fffd84510c8 <col:40> 'float *':'float *' lvalue ParmVar 0x7fffd8450178 'ray' 'float *':'float *'
|   |           `-IntegerLiteral 0x7fffd84510f0 <col:44> 'int' 1
|   |-DeclStmt 0x7fffd8451558 <line:4346:4, col:50>
|   | `-VarDecl 0x7fffd8451200 <col:4, col:49> col:10 used roperp 'float' cinit
|   |   `-BinaryOperator 0x7fffd8451530 <col:19, col:49> 'float' '-'
|   |     |-BinaryOperator 0x7fffd84513a0 <col:19, col:32> 'float' '*'
|   |     | |-ImplicitCastExpr 0x7fffd8451370 <col:19, col:25> 'float' <LValueToRValue>
|   |     | | `-ArraySubscriptExpr 0x7fffd84512c0 <col:19, col:25> 'float' lvalue
|   |     | |   |-ImplicitCastExpr 0x7fffd84512a8 <col:19> 'float *':'float *' <LValueToRValue>
|   |     | |   | `-DeclRefExpr 0x7fffd8451260 <col:19> 'float *':'float *' lvalue ParmVar 0x7fffd84500d0 'orig' 'float *':'float *'
|   |     | |   `-IntegerLiteral 0x7fffd8451288 <col:24> 'int' 1
|   |     | `-ImplicitCastExpr 0x7fffd8451388 <col:27, col:32> 'float' <LValueToRValue>
|   |     |   `-ArraySubscriptExpr 0x7fffd8451348 <col:27, col:32> 'float' lvalue
|   |     |     |-ImplicitCastExpr 0x7fffd8451330 <col:27> 'float *':'float *' <LValueToRValue>
|   |     |     | `-DeclRefExpr 0x7fffd84512e8 <col:27> 'float *':'float *' lvalue ParmVar 0x7fffd8450178 'ray' 'float *':'float *'
|   |     |     `-IntegerLiteral 0x7fffd8451310 <col:31> 'int' 0
|   |     `-BinaryOperator 0x7fffd8451508 <col:36, col:49> 'float' '*'
|   |       |-ImplicitCastExpr 0x7fffd84514d8 <col:36, col:42> 'float' <LValueToRValue>
|   |       | `-ArraySubscriptExpr 0x7fffd8451428 <col:36, col:42> 'float' lvalue
|   |       |   |-ImplicitCastExpr 0x7fffd8451410 <col:36> 'float *':'float *' <LValueToRValue>
|   |       |   | `-DeclRefExpr 0x7fffd84513c8 <col:36> 'float *':'float *' lvalue ParmVar 0x7fffd84500d0 'orig' 'float *':'float *'
|   |       |   `-IntegerLiteral 0x7fffd84513f0 <col:41> 'int' 0
|   |       `-ImplicitCastExpr 0x7fffd84514f0 <col:44, col:49> 'float' <LValueToRValue>
|   |         `-ArraySubscriptExpr 0x7fffd84514b0 <col:44, col:49> 'float' lvalue
|   |           |-ImplicitCastExpr 0x7fffd8451498 <col:44> 'float *':'float *' <LValueToRValue>
|   |           | `-DeclRefExpr 0x7fffd8451450 <col:44> 'float *':'float *' lvalue ParmVar 0x7fffd8450178 'ray' 'float *':'float *'
|   |           `-IntegerLiteral 0x7fffd8451478 <col:48> 'int' 1
|   |-DeclStmt 0x7fffd8451758 <line:4348:4, col:40>
|   | `-VarDecl 0x7fffd8451588 <col:4, col:34> col:10 used a 'float' cinit
|   |   `-BinaryOperator 0x7fffd8451730 <col:14, col:34> 'float' '+'
|   |     |-BinaryOperator 0x7fffd84516c8 <col:14, col:25> 'float' '-'
|   |     | |-ImplicitCastExpr 0x7fffd84516b0 <col:14> 'float' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x7fffd84515e8 <col:14> 'float' lvalue Var 0x7fffd8450740 'q0perp' 'float'
|   |     | `-BinaryOperator 0x7fffd8451688 <col:23, col:25> 'float' '*'
|   |     |   |-ImplicitCastExpr 0x7fffd8451670 <col:23> 'float' <IntegralToFloating>
|   |     |   | `-IntegerLiteral 0x7fffd8451610 <col:23> 'int' 2
|   |     |   `-ImplicitCastExpr 0x7fffd8451658 <col:25> 'float' <LValueToRValue>
|   |     |     `-DeclRefExpr 0x7fffd8451630 <col:25> 'float' lvalue Var 0x7fffd8450af0 'q1perp' 'float'
|   |     `-ImplicitCastExpr 0x7fffd8451718 <col:34> 'float' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd84516f0 <col:34> 'float' lvalue Var 0x7fffd8450e78 'q2perp' 'float'
|   |-DeclStmt 0x7fffd8451890 <line:4349:4, col:29>
|   | `-VarDecl 0x7fffd8451788 <col:4, col:23> col:10 used b 'float' cinit
|   |   `-BinaryOperator 0x7fffd8451868 <col:14, col:23> 'float' '-'
|   |     |-ImplicitCastExpr 0x7fffd8451838 <col:14> 'float' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd84517e8 <col:14> 'float' lvalue Var 0x7fffd8450af0 'q1perp' 'float'
|   |     `-ImplicitCastExpr 0x7fffd8451850 <col:23> 'float' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd8451810 <col:23> 'float' lvalue Var 0x7fffd8450740 'q0perp' 'float'
|   |-DeclStmt 0x7fffd84519c8 <line:4350:4, col:29>
|   | `-VarDecl 0x7fffd84518c0 <col:4, col:23> col:10 used c 'float' cinit
|   |   `-BinaryOperator 0x7fffd84519a0 <col:14, col:23> 'float' '-'
|   |     |-ImplicitCastExpr 0x7fffd8451970 <col:14> 'float' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd8451920 <col:14> 'float' lvalue Var 0x7fffd8450740 'q0perp' 'float'
|   |     `-ImplicitCastExpr 0x7fffd8451988 <col:23> 'float' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd8451948 <col:23> 'float' lvalue Var 0x7fffd8451200 'roperp' 'float'
|   |-DeclStmt 0x7fffd8451b58 <line:4352:4, col:26>
|   | |-VarDecl 0x7fffd84519f8 <col:4, col:15> col:10 used s0 'float' cinit
|   | | `-ImplicitCastExpr 0x7fffd8451a78 <col:15> 'float' <FloatingCast>
|   | |   `-FloatingLiteral 0x7fffd8451a58 <col:15> 'double' 0.000000e+00
|   | `-VarDecl 0x7fffd8451aa8 <col:4, col:24> col:19 used s1 'float' cinit
|   |   `-ImplicitCastExpr 0x7fffd8451b28 <col:24> 'float' <FloatingCast>
|   |     `-FloatingLiteral 0x7fffd8451b08 <col:24> 'double' 0.000000e+00
|   |-DeclStmt 0x7fffd8451c08 <line:4353:4, col:17>
|   | `-VarDecl 0x7fffd8451b88 <col:4, col:16> col:8 used num_s 'int' cinit
|   |   `-IntegerLiteral 0x7fffd8451be8 <col:16> 'int' 0
|   |-IfStmt 0x7fffd8453008 <line:4355:4, line:4375:4>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd8451c98 <line:4355:8, col:13> 'int' '!='
|   | | |-ImplicitCastExpr 0x7fffd8451c80 <col:8> 'double' <FloatingCast>
|   | | | `-ImplicitCastExpr 0x7fffd8451c68 <col:8> 'float' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd8451c20 <col:8> 'float' lvalue Var 0x7fffd8451588 'a' 'float'
|   | | `-FloatingLiteral 0x7fffd8451c48 <col:13> 'double' 0.000000e+00
|   | |-CompoundStmt 0x7fffd8452c20 <col:18, line:4369:4>
|   | | |-DeclStmt 0x7fffd8451eb0 <line:4356:7, col:30>
|   | | | `-VarDecl 0x7fffd8451cd8 <col:7, col:29> col:13 used discr 'float' cinit
|   | | |   `-BinaryOperator 0x7fffd8451e88 <col:21, col:29> 'float' '-'
|   | | |     |-BinaryOperator 0x7fffd8451db8 <col:21, col:23> 'float' '*'
|   | | |     | |-ImplicitCastExpr 0x7fffd8451d88 <col:21> 'float' <LValueToRValue>
|   | | |     | | `-DeclRefExpr 0x7fffd8451d38 <col:21> 'float' lvalue Var 0x7fffd8451788 'b' 'float'
|   | | |     | `-ImplicitCastExpr 0x7fffd8451da0 <col:23> 'float' <LValueToRValue>
|   | | |     |   `-DeclRefExpr 0x7fffd8451d60 <col:23> 'float' lvalue Var 0x7fffd8451788 'b' 'float'
|   | | |     `-BinaryOperator 0x7fffd8451e60 <col:27, col:29> 'float' '*'
|   | | |       |-ImplicitCastExpr 0x7fffd8451e30 <col:27> 'float' <LValueToRValue>
|   | | |       | `-DeclRefExpr 0x7fffd8451de0 <col:27> 'float' lvalue Var 0x7fffd8451588 'a' 'float'
|   | | |       `-ImplicitCastExpr 0x7fffd8451e48 <col:29> 'float' <LValueToRValue>
|   | | |         `-DeclRefExpr 0x7fffd8451e08 <col:29> 'float' lvalue Var 0x7fffd84518c0 'c' 'float'
|   | | `-IfStmt 0x7fffd8452be8 <line:4357:7, line:4368:7>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-BinaryOperator 0x7fffd8451f40 <line:4357:11, col:19> 'int' '>'
|   | |   | |-ImplicitCastExpr 0x7fffd8451f28 <col:11> 'double' <FloatingCast>
|   | |   | | `-ImplicitCastExpr 0x7fffd8451f10 <col:11> 'float' <LValueToRValue>
|   | |   | |   `-DeclRefExpr 0x7fffd8451ec8 <col:11> 'float' lvalue Var 0x7fffd8451cd8 'discr' 'float'
|   | |   | `-FloatingLiteral 0x7fffd8451ef0 <col:19> 'double' 0.000000e+00
|   | |   |-CompoundStmt 0x7fffd8452ba8 <col:24, line:4368:7>
|   | |   | |-DeclStmt 0x7fffd84520a0 <line:4358:10, col:30>
|   | |   | | `-VarDecl 0x7fffd8451f80 <col:10, col:29> col:16 used rcpna 'float' cinit
|   | |   | |   `-BinaryOperator 0x7fffd8452078 <col:24, col:29> 'float' '/'
|   | |   | |     |-ImplicitCastExpr 0x7fffd8452060 <col:24, col:25> 'float' <IntegralToFloating>
|   | |   | |     | `-UnaryOperator 0x7fffd8452000 <col:24, col:25> 'int' prefix '-'
|   | |   | |     |   `-IntegerLiteral 0x7fffd8451fe0 <col:25> 'int' 1
|   | |   | |     `-ImplicitCastExpr 0x7fffd8452048 <col:29> 'float' <LValueToRValue>
|   | |   | |       `-DeclRefExpr 0x7fffd8452020 <col:29> 'float' lvalue Var 0x7fffd8451588 'a' 'float'
|   | |   | |-DeclStmt 0x7fffd8452238 <line:4359:10, col:45>
|   | |   | | `-VarDecl 0x7fffd84520d0 <col:10, line:444:37> line:4359:16 used d 'float' cinit
|   | |   | |   `-CStyleCastExpr 0x7fffd8452210 <col:20, line:444:37> 'float' <FloatingCast>
|   | |   | |     `-CallExpr 0x7fffd8452198 <col:31, col:37> 'double'
|   | |   | |       |-ImplicitCastExpr 0x7fffd8452180 <col:31> 'double (*)(double)' <FunctionToPointerDecay>
|   | |   | |       | `-DeclRefExpr 0x7fffd8452130 <col:31> 'double (double)' Function 0x7fffd828e9f0 'sqrt' 'double (double)'
|   | |   | |       `-ImplicitCastExpr 0x7fffd84521e0 <line:4359:39> 'double' <FloatingCast>
|   | |   | |         `-ImplicitCastExpr 0x7fffd84521c8 <col:39> 'float' <LValueToRValue>
|   | |   | |           `-DeclRefExpr 0x7fffd8452158 <col:39> 'float' lvalue Var 0x7fffd8451cd8 'discr' 'float'
|   | |   | |-BinaryOperator 0x7fffd84523a8 <line:4360:10, col:23> 'float' '='
|   | |   | | |-DeclRefExpr 0x7fffd8452250 <col:10> 'float' lvalue Var 0x7fffd84519f8 's0' 'float'
|   | |   | | `-BinaryOperator 0x7fffd8452380 <col:15, col:23> 'float' '*'
|   | |   | |   |-ParenExpr 0x7fffd8452320 <col:15, col:19> 'float'
|   | |   | |   | `-BinaryOperator 0x7fffd84522f8 <col:16, col:18> 'float' '+'
|   | |   | |   |   |-ImplicitCastExpr 0x7fffd84522c8 <col:16> 'float' <LValueToRValue>
|   | |   | |   |   | `-DeclRefExpr 0x7fffd8452278 <col:16> 'float' lvalue Var 0x7fffd8451788 'b' 'float'
|   | |   | |   |   `-ImplicitCastExpr 0x7fffd84522e0 <col:18> 'float' <LValueToRValue>
|   | |   | |   |     `-DeclRefExpr 0x7fffd84522a0 <col:18> 'float' lvalue Var 0x7fffd84520d0 'd' 'float'
|   | |   | |   `-ImplicitCastExpr 0x7fffd8452368 <col:23> 'float' <LValueToRValue>
|   | |   | |     `-DeclRefExpr 0x7fffd8452340 <col:23> 'float' lvalue Var 0x7fffd8451f80 'rcpna' 'float'
|   | |   | |-BinaryOperator 0x7fffd8452528 <line:4361:10, col:23> 'float' '='
|   | |   | | |-DeclRefExpr 0x7fffd84523d0 <col:10> 'float' lvalue Var 0x7fffd8451aa8 's1' 'float'
|   | |   | | `-BinaryOperator 0x7fffd8452500 <col:15, col:23> 'float' '*'
|   | |   | |   |-ParenExpr 0x7fffd84524a0 <col:15, col:19> 'float'
|   | |   | |   | `-BinaryOperator 0x7fffd8452478 <col:16, col:18> 'float' '-'
|   | |   | |   |   |-ImplicitCastExpr 0x7fffd8452448 <col:16> 'float' <LValueToRValue>
|   | |   | |   |   | `-DeclRefExpr 0x7fffd84523f8 <col:16> 'float' lvalue Var 0x7fffd8451788 'b' 'float'
|   | |   | |   |   `-ImplicitCastExpr 0x7fffd8452460 <col:18> 'float' <LValueToRValue>
|   | |   | |   |     `-DeclRefExpr 0x7fffd8452420 <col:18> 'float' lvalue Var 0x7fffd84520d0 'd' 'float'
|   | |   | |   `-ImplicitCastExpr 0x7fffd84524e8 <col:23> 'float' <LValueToRValue>
|   | |   | |     `-DeclRefExpr 0x7fffd84524c0 <col:23> 'float' lvalue Var 0x7fffd8451f80 'rcpna' 'float'
|   | |   | |-IfStmt 0x7fffd8452728 <line:4362:10, line:4363:21>
|   | |   | | |-<<<NULL>>>
|   | |   | | |-<<<NULL>>>
|   | |   | | |-BinaryOperator 0x7fffd8452690 <line:4362:14, col:33> 'int' '&&'
|   | |   | | | |-BinaryOperator 0x7fffd84525c8 <col:14, col:20> 'int' '>='
|   | |   | | | | |-ImplicitCastExpr 0x7fffd84525b0 <col:14> 'double' <FloatingCast>
|   | |   | | | | | `-ImplicitCastExpr 0x7fffd8452598 <col:14> 'float' <LValueToRValue>
|   | |   | | | | |   `-DeclRefExpr 0x7fffd8452550 <col:14> 'float' lvalue Var 0x7fffd84519f8 's0' 'float'
|   | |   | | | | `-FloatingLiteral 0x7fffd8452578 <col:20> 'double' 0.000000e+00
|   | |   | | | `-BinaryOperator 0x7fffd8452668 <col:27, col:33> 'int' '<='
|   | |   | | |   |-ImplicitCastExpr 0x7fffd8452650 <col:27> 'double' <FloatingCast>
|   | |   | | |   | `-ImplicitCastExpr 0x7fffd8452638 <col:27> 'float' <LValueToRValue>
|   | |   | | |   |   `-DeclRefExpr 0x7fffd84525f0 <col:27> 'float' lvalue Var 0x7fffd84519f8 's0' 'float'
|   | |   | | |   `-FloatingLiteral 0x7fffd8452618 <col:33> 'double' 1.000000e+00
|   | |   | | |-BinaryOperator 0x7fffd8452700 <line:4363:13, col:21> 'int' '='
|   | |   | | | |-DeclRefExpr 0x7fffd84526b8 <col:13> 'int' lvalue Var 0x7fffd8451b88 'num_s' 'int'
|   | |   | | | `-IntegerLiteral 0x7fffd84526e0 <col:21> 'int' 1
|   | |   | | `-<<<NULL>>>
|   | |   | `-IfStmt 0x7fffd8452b70 <line:4364:10, line:4367:10>
|   | |   |   |-<<<NULL>>>
|   | |   |   |-<<<NULL>>>
|   | |   |   |-BinaryOperator 0x7fffd8452990 <line:4364:14, col:44> 'int' '&&'
|   | |   |   | |-BinaryOperator 0x7fffd84528c8 <col:14, col:31> 'int' '&&'
|   | |   |   | | |-BinaryOperator 0x7fffd8452800 <col:14, col:18> 'int' '>'
|   | |   |   | | | |-ImplicitCastExpr 0x7fffd84527c0 <col:14> 'double' <FloatingCast>
|   | |   |   | | | | `-ImplicitCastExpr 0x7fffd84527a8 <col:14> 'float' <LValueToRValue>
|   | |   |   | | | |   `-DeclRefExpr 0x7fffd8452760 <col:14> 'float' lvalue Var 0x7fffd84520d0 'd' 'float'
|   | |   |   | | | `-FloatingLiteral 0x7fffd8452788 <col:18> 'double' 0.000000e+00
|   | |   |   | | `-BinaryOperator 0x7fffd84528a0 <col:25, col:31> 'int' '>='
|   | |   |   | |   |-ImplicitCastExpr 0x7fffd8452888 <col:25> 'double' <FloatingCast>
|   | |   |   | |   | `-ImplicitCastExpr 0x7fffd8452870 <col:25> 'float' <LValueToRValue>
|   | |   |   | |   |   `-DeclRefExpr 0x7fffd8452828 <col:25> 'float' lvalue Var 0x7fffd8451aa8 's1' 'float'
|   | |   |   | |   `-FloatingLiteral 0x7fffd8452850 <col:31> 'double' 0.000000e+00
|   | |   |   | `-BinaryOperator 0x7fffd8452968 <col:38, col:44> 'int' '<='
|   | |   |   |   |-ImplicitCastExpr 0x7fffd8452950 <col:38> 'double' <FloatingCast>
|   | |   |   |   | `-ImplicitCastExpr 0x7fffd8452938 <col:38> 'float' <LValueToRValue>
|   | |   |   |   |   `-DeclRefExpr 0x7fffd84528f0 <col:38> 'float' lvalue Var 0x7fffd8451aa8 's1' 'float'
|   | |   |   |   `-FloatingLiteral 0x7fffd8452918 <col:44> 'double' 1.000000e+00
|   | |   |   |-CompoundStmt 0x7fffd8452b50 <col:49, line:4367:10>
|   | |   |   | |-IfStmt 0x7fffd8452ad0 <line:4365:13, col:34>
|   | |   |   | | |-<<<NULL>>>
|   | |   |   | | |-<<<NULL>>>
|   | |   |   | | |-BinaryOperator 0x7fffd8452a18 <col:17, col:26> 'int' '=='
|   | |   |   | | | |-ImplicitCastExpr 0x7fffd8452a00 <col:17> 'int' <LValueToRValue>
|   | |   |   | | | | `-DeclRefExpr 0x7fffd84529b8 <col:17> 'int' lvalue Var 0x7fffd8451b88 'num_s' 'int'
|   | |   |   | | | `-IntegerLiteral 0x7fffd84529e0 <col:26> 'int' 0
|   | |   |   | | |-BinaryOperator 0x7fffd8452aa8 <col:29, col:34> 'float' '='
|   | |   |   | | | |-DeclRefExpr 0x7fffd8452a40 <col:29> 'float' lvalue Var 0x7fffd84519f8 's0' 'float'
|   | |   |   | | | `-ImplicitCastExpr 0x7fffd8452a90 <col:34> 'float' <LValueToRValue>
|   | |   |   | | |   `-DeclRefExpr 0x7fffd8452a68 <col:34> 'float' lvalue Var 0x7fffd8451aa8 's1' 'float'
|   | |   |   | | `-<<<NULL>>>
|   | |   |   | `-UnaryOperator 0x7fffd8452b30 <line:4366:13, col:15> 'int' prefix '++'
|   | |   |   |   `-DeclRefExpr 0x7fffd8452b08 <col:15> 'int' lvalue Var 0x7fffd8451b88 'num_s' 'int'
|   | |   |   `-<<<NULL>>>
|   | |   `-<<<NULL>>>
|   | `-CompoundStmt 0x7fffd8452fe8 <line:4369:11, line:4375:4>
|   |   |-BinaryOperator 0x7fffd8452db0 <line:4372:7, col:23> 'float' '='
|   |   | |-DeclRefExpr 0x7fffd8452c40 <col:7> 'float' lvalue Var 0x7fffd84519f8 's0' 'float'
|   |   | `-BinaryOperator 0x7fffd8452d88 <col:12, col:23> 'float' '/'
|   |   |   |-ImplicitCastExpr 0x7fffd8452d70 <col:12> 'float' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x7fffd8452c68 <col:12> 'float' lvalue Var 0x7fffd84518c0 'c' 'float'
|   |   |   `-ParenExpr 0x7fffd8452d50 <col:16, col:23> 'float'
|   |   |     `-BinaryOperator 0x7fffd8452d28 <col:17, col:22> 'float' '*'
|   |   |       |-ImplicitCastExpr 0x7fffd8452d10 <col:17, col:18> 'float' <IntegralToFloating>
|   |   |       | `-UnaryOperator 0x7fffd8452cb0 <col:17, col:18> 'int' prefix '-'
|   |   |       |   `-IntegerLiteral 0x7fffd8452c90 <col:18> 'int' 2
|   |   |       `-ImplicitCastExpr 0x7fffd8452cf8 <col:22> 'float' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x7fffd8452cd0 <col:22> 'float' lvalue Var 0x7fffd8451788 'b' 'float'
|   |   `-IfStmt 0x7fffd8452fb0 <line:4373:7, line:4374:18>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x7fffd8452f18 <line:4373:11, col:30> 'int' '&&'
|   |     | |-BinaryOperator 0x7fffd8452e50 <col:11, col:17> 'int' '>='
|   |     | | |-ImplicitCastExpr 0x7fffd8452e38 <col:11> 'double' <FloatingCast>
|   |     | | | `-ImplicitCastExpr 0x7fffd8452e20 <col:11> 'float' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x7fffd8452dd8 <col:11> 'float' lvalue Var 0x7fffd84519f8 's0' 'float'
|   |     | | `-FloatingLiteral 0x7fffd8452e00 <col:17> 'double' 0.000000e+00
|   |     | `-BinaryOperator 0x7fffd8452ef0 <col:24, col:30> 'int' '<='
|   |     |   |-ImplicitCastExpr 0x7fffd8452ed8 <col:24> 'double' <FloatingCast>
|   |     |   | `-ImplicitCastExpr 0x7fffd8452ec0 <col:24> 'float' <LValueToRValue>
|   |     |   |   `-DeclRefExpr 0x7fffd8452e78 <col:24> 'float' lvalue Var 0x7fffd84519f8 's0' 'float'
|   |     |   `-FloatingLiteral 0x7fffd8452ea0 <col:30> 'double' 1.000000e+00
|   |     |-BinaryOperator 0x7fffd8452f88 <line:4374:10, col:18> 'int' '='
|   |     | |-DeclRefExpr 0x7fffd8452f40 <col:10> 'int' lvalue Var 0x7fffd8451b88 'num_s' 'int'
|   |     | `-IntegerLiteral 0x7fffd8452f68 <col:18> 'int' 1
|   |     `-<<<NULL>>>
|   `-IfStmt 0x7fffd8455628 <line:4377:4, line:4402:4>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fffd84530a0 <line:4377:8, col:17> 'int' '=='
|     | |-ImplicitCastExpr 0x7fffd8453088 <col:8> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fffd8453040 <col:8> 'int' lvalue Var 0x7fffd8451b88 'num_s' 'int'
|     | `-IntegerLiteral 0x7fffd8453068 <col:17> 'int' 0
|     |-ReturnStmt 0x7fffd84530e8 <line:4378:7, col:14>
|     | `-IntegerLiteral 0x7fffd84530c8 <col:14> 'int' 0
|     `-CompoundStmt 0x7fffd84555b8 <line:4379:9, line:4402:4>
|       |-DeclStmt 0x7fffd84534f0 <line:4380:7, col:59>
|       | `-VarDecl 0x7fffd8453118 <col:7, col:58> col:13 used rcp_len2 'float' cinit
|       |   `-BinaryOperator 0x7fffd84534c8 <col:24, col:58> 'float' '/'
|       |     |-ImplicitCastExpr 0x7fffd84534b0 <col:24> 'float' <IntegralToFloating>
|       |     | `-IntegerLiteral 0x7fffd8453178 <col:24> 'int' 1
|       |     `-ParenExpr 0x7fffd8453490 <col:28, col:58> 'float'
|       |       `-BinaryOperator 0x7fffd8453468 <col:29, col:57> 'float' '+'
|       |         |-BinaryOperator 0x7fffd84532d8 <col:29, col:41> 'float' '*'
|       |         | |-ImplicitCastExpr 0x7fffd84532a8 <col:29, col:34> 'float' <LValueToRValue>
|       |         | | `-ArraySubscriptExpr 0x7fffd84531f8 <col:29, col:34> 'float' lvalue
|       |         | |   |-ImplicitCastExpr 0x7fffd84531e0 <col:29> 'float *':'float *' <LValueToRValue>
|       |         | |   | `-DeclRefExpr 0x7fffd8453198 <col:29> 'float *':'float *' lvalue ParmVar 0x7fffd8450178 'ray' 'float *':'float *'
|       |         | |   `-IntegerLiteral 0x7fffd84531c0 <col:33> 'int' 0
|       |         | `-ImplicitCastExpr 0x7fffd84532c0 <col:36, col:41> 'float' <LValueToRValue>
|       |         |   `-ArraySubscriptExpr 0x7fffd8453280 <col:36, col:41> 'float' lvalue
|       |         |     |-ImplicitCastExpr 0x7fffd8453268 <col:36> 'float *':'float *' <LValueToRValue>
|       |         |     | `-DeclRefExpr 0x7fffd8453220 <col:36> 'float *':'float *' lvalue ParmVar 0x7fffd8450178 'ray' 'float *':'float *'
|       |         |     `-IntegerLiteral 0x7fffd8453248 <col:40> 'int' 0
|       |         `-BinaryOperator 0x7fffd8453440 <col:45, col:57> 'float' '*'
|       |           |-ImplicitCastExpr 0x7fffd8453410 <col:45, col:50> 'float' <LValueToRValue>
|       |           | `-ArraySubscriptExpr 0x7fffd8453360 <col:45, col:50> 'float' lvalue
|       |           |   |-ImplicitCastExpr 0x7fffd8453348 <col:45> 'float *':'float *' <LValueToRValue>
|       |           |   | `-DeclRefExpr 0x7fffd8453300 <col:45> 'float *':'float *' lvalue ParmVar 0x7fffd8450178 'ray' 'float *':'float *'
|       |           |   `-IntegerLiteral 0x7fffd8453328 <col:49> 'int' 1
|       |           `-ImplicitCastExpr 0x7fffd8453428 <col:52, col:57> 'float' <LValueToRValue>
|       |             `-ArraySubscriptExpr 0x7fffd84533e8 <col:52, col:57> 'float' lvalue
|       |               |-ImplicitCastExpr 0x7fffd84533d0 <col:52> 'float *':'float *' <LValueToRValue>
|       |               | `-DeclRefExpr 0x7fffd8453388 <col:52> 'float *':'float *' lvalue ParmVar 0x7fffd8450178 'ray' 'float *':'float *'
|       |               `-IntegerLiteral 0x7fffd84533b0 <col:56> 'int' 1
|       |-DeclStmt 0x7fffd8453820 <line:4381:7, col:67>
|       | |-VarDecl 0x7fffd8453520 <col:7, col:31> col:13 used rayn_x 'float' cinit
|       | | `-BinaryOperator 0x7fffd8453660 <col:22, col:31> 'float' '*'
|       | |   |-ImplicitCastExpr 0x7fffd8453630 <col:22, col:27> 'float' <LValueToRValue>
|       | |   | `-ArraySubscriptExpr 0x7fffd84535e0 <col:22, col:27> 'float' lvalue
|       | |   |   |-ImplicitCastExpr 0x7fffd84535c8 <col:22> 'float *':'float *' <LValueToRValue>
|       | |   |   | `-DeclRefExpr 0x7fffd8453580 <col:22> 'float *':'float *' lvalue ParmVar 0x7fffd8450178 'ray' 'float *':'float *'
|       | |   |   `-IntegerLiteral 0x7fffd84535a8 <col:26> 'int' 0
|       | |   `-ImplicitCastExpr 0x7fffd8453648 <col:31> 'float' <LValueToRValue>
|       | |     `-DeclRefExpr 0x7fffd8453608 <col:31> 'float' lvalue Var 0x7fffd8453118 'rcp_len2' 'float'
|       | `-VarDecl 0x7fffd84536a0 <col:7, col:59> col:41 used rayn_y 'float' cinit
|       |   `-BinaryOperator 0x7fffd84537e0 <col:50, col:59> 'float' '*'
|       |     |-ImplicitCastExpr 0x7fffd84537b0 <col:50, col:55> 'float' <LValueToRValue>
|       |     | `-ArraySubscriptExpr 0x7fffd8453760 <col:50, col:55> 'float' lvalue
|       |     |   |-ImplicitCastExpr 0x7fffd8453748 <col:50> 'float *':'float *' <LValueToRValue>
|       |     |   | `-DeclRefExpr 0x7fffd8453700 <col:50> 'float *':'float *' lvalue ParmVar 0x7fffd8450178 'ray' 'float *':'float *'
|       |     |   `-IntegerLiteral 0x7fffd8453728 <col:54> 'int' 1
|       |     `-ImplicitCastExpr 0x7fffd84537c8 <col:59> 'float' <LValueToRValue>
|       |       `-DeclRefExpr 0x7fffd8453788 <col:59> 'float' lvalue Var 0x7fffd8453118 'rcp_len2' 'float'
|       |-DeclStmt 0x7fffd8453ae8 <line:4383:7, col:50>
|       | `-VarDecl 0x7fffd8453850 <col:7, col:44> col:13 used q0d 'float' cinit
|       |   `-BinaryOperator 0x7fffd8453ac0 <col:21, col:44> 'float' '+'
|       |     |-BinaryOperator 0x7fffd8453990 <col:21, col:27> 'float' '*'
|       |     | |-ImplicitCastExpr 0x7fffd8453960 <col:21, col:25> 'float' <LValueToRValue>
|       |     | | `-ArraySubscriptExpr 0x7fffd8453910 <col:21, col:25> 'float' lvalue
|       |     | |   |-ImplicitCastExpr 0x7fffd84538f8 <col:21> 'float *':'float *' <LValueToRValue>
|       |     | |   | `-DeclRefExpr 0x7fffd84538b0 <col:21> 'float *':'float *' lvalue ParmVar 0x7fffd8450220 'q0' 'float *':'float *'
|       |     | |   `-IntegerLiteral 0x7fffd84538d8 <col:24> 'int' 0
|       |     | `-ImplicitCastExpr 0x7fffd8453978 <col:27> 'float' <LValueToRValue>
|       |     |   `-DeclRefExpr 0x7fffd8453938 <col:27> 'float' lvalue Var 0x7fffd8453520 'rayn_x' 'float'
|       |     `-BinaryOperator 0x7fffd8453a98 <col:38, col:44> 'float' '*'
|       |       |-ImplicitCastExpr 0x7fffd8453a68 <col:38, col:42> 'float' <LValueToRValue>
|       |       | `-ArraySubscriptExpr 0x7fffd8453a18 <col:38, col:42> 'float' lvalue
|       |       |   |-ImplicitCastExpr 0x7fffd8453a00 <col:38> 'float *':'float *' <LValueToRValue>
|       |       |   | `-DeclRefExpr 0x7fffd84539b8 <col:38> 'float *':'float *' lvalue ParmVar 0x7fffd8450220 'q0' 'float *':'float *'
|       |       |   `-IntegerLiteral 0x7fffd84539e0 <col:41> 'int' 1
|       |       `-ImplicitCastExpr 0x7fffd8453a80 <col:44> 'float' <LValueToRValue>
|       |         `-DeclRefExpr 0x7fffd8453a40 <col:44> 'float' lvalue Var 0x7fffd84536a0 'rayn_y' 'float'
|       |-DeclStmt 0x7fffd8453db0 <line:4384:7, col:50>
|       | `-VarDecl 0x7fffd8453b18 <col:7, col:44> col:13 used q1d 'float' cinit
|       |   `-BinaryOperator 0x7fffd8453d88 <col:21, col:44> 'float' '+'
|       |     |-BinaryOperator 0x7fffd8453c58 <col:21, col:27> 'float' '*'
|       |     | |-ImplicitCastExpr 0x7fffd8453c28 <col:21, col:25> 'float' <LValueToRValue>
|       |     | | `-ArraySubscriptExpr 0x7fffd8453bd8 <col:21, col:25> 'float' lvalue
|       |     | |   |-ImplicitCastExpr 0x7fffd8453bc0 <col:21> 'float *':'float *' <LValueToRValue>
|       |     | |   | `-DeclRefExpr 0x7fffd8453b78 <col:21> 'float *':'float *' lvalue ParmVar 0x7fffd84502c8 'q1' 'float *':'float *'
|       |     | |   `-IntegerLiteral 0x7fffd8453ba0 <col:24> 'int' 0
|       |     | `-ImplicitCastExpr 0x7fffd8453c40 <col:27> 'float' <LValueToRValue>
|       |     |   `-DeclRefExpr 0x7fffd8453c00 <col:27> 'float' lvalue Var 0x7fffd8453520 'rayn_x' 'float'
|       |     `-BinaryOperator 0x7fffd8453d60 <col:38, col:44> 'float' '*'
|       |       |-ImplicitCastExpr 0x7fffd8453d30 <col:38, col:42> 'float' <LValueToRValue>
|       |       | `-ArraySubscriptExpr 0x7fffd8453ce0 <col:38, col:42> 'float' lvalue
|       |       |   |-ImplicitCastExpr 0x7fffd8453cc8 <col:38> 'float *':'float *' <LValueToRValue>
|       |       |   | `-DeclRefExpr 0x7fffd8453c80 <col:38> 'float *':'float *' lvalue ParmVar 0x7fffd84502c8 'q1' 'float *':'float *'
|       |       |   `-IntegerLiteral 0x7fffd8453ca8 <col:41> 'int' 1
|       |       `-ImplicitCastExpr 0x7fffd8453d48 <col:44> 'float' <LValueToRValue>
|       |         `-DeclRefExpr 0x7fffd8453d08 <col:44> 'float' lvalue Var 0x7fffd84536a0 'rayn_y' 'float'
|       |-DeclStmt 0x7fffd8454078 <line:4385:7, col:50>
|       | `-VarDecl 0x7fffd8453de0 <col:7, col:44> col:13 used q2d 'float' cinit
|       |   `-BinaryOperator 0x7fffd8454050 <col:21, col:44> 'float' '+'
|       |     |-BinaryOperator 0x7fffd8453f20 <col:21, col:27> 'float' '*'
|       |     | |-ImplicitCastExpr 0x7fffd8453ef0 <col:21, col:25> 'float' <LValueToRValue>
|       |     | | `-ArraySubscriptExpr 0x7fffd8453ea0 <col:21, col:25> 'float' lvalue
|       |     | |   |-ImplicitCastExpr 0x7fffd8453e88 <col:21> 'float *':'float *' <LValueToRValue>
|       |     | |   | `-DeclRefExpr 0x7fffd8453e40 <col:21> 'float *':'float *' lvalue ParmVar 0x7fffd8450370 'q2' 'float *':'float *'
|       |     | |   `-IntegerLiteral 0x7fffd8453e68 <col:24> 'int' 0
|       |     | `-ImplicitCastExpr 0x7fffd8453f08 <col:27> 'float' <LValueToRValue>
|       |     |   `-DeclRefExpr 0x7fffd8453ec8 <col:27> 'float' lvalue Var 0x7fffd8453520 'rayn_x' 'float'
|       |     `-BinaryOperator 0x7fffd8454028 <col:38, col:44> 'float' '*'
|       |       |-ImplicitCastExpr 0x7fffd8453ff8 <col:38, col:42> 'float' <LValueToRValue>
|       |       | `-ArraySubscriptExpr 0x7fffd8453fa8 <col:38, col:42> 'float' lvalue
|       |       |   |-ImplicitCastExpr 0x7fffd8453f90 <col:38> 'float *':'float *' <LValueToRValue>
|       |       |   | `-DeclRefExpr 0x7fffd8453f48 <col:38> 'float *':'float *' lvalue ParmVar 0x7fffd8450370 'q2' 'float *':'float *'
|       |       |   `-IntegerLiteral 0x7fffd8453f70 <col:41> 'int' 1
|       |       `-ImplicitCastExpr 0x7fffd8454010 <col:44> 'float' <LValueToRValue>
|       |         `-DeclRefExpr 0x7fffd8453fd0 <col:44> 'float' lvalue Var 0x7fffd84536a0 'rayn_y' 'float'
|       |-DeclStmt 0x7fffd8454340 <line:4386:7, col:50>
|       | `-VarDecl 0x7fffd84540a8 <col:7, col:44> col:13 used rod 'float' cinit
|       |   `-BinaryOperator 0x7fffd8454318 <col:19, col:44> 'float' '+'
|       |     |-BinaryOperator 0x7fffd84541e8 <col:19, col:27> 'float' '*'
|       |     | |-ImplicitCastExpr 0x7fffd84541b8 <col:19, col:25> 'float' <LValueToRValue>
|       |     | | `-ArraySubscriptExpr 0x7fffd8454168 <col:19, col:25> 'float' lvalue
|       |     | |   |-ImplicitCastExpr 0x7fffd8454150 <col:19> 'float *':'float *' <LValueToRValue>
|       |     | |   | `-DeclRefExpr 0x7fffd8454108 <col:19> 'float *':'float *' lvalue ParmVar 0x7fffd84500d0 'orig' 'float *':'float *'
|       |     | |   `-IntegerLiteral 0x7fffd8454130 <col:24> 'int' 0
|       |     | `-ImplicitCastExpr 0x7fffd84541d0 <col:27> 'float' <LValueToRValue>
|       |     |   `-DeclRefExpr 0x7fffd8454190 <col:27> 'float' lvalue Var 0x7fffd8453520 'rayn_x' 'float'
|       |     `-BinaryOperator 0x7fffd84542f0 <col:36, col:44> 'float' '*'
|       |       |-ImplicitCastExpr 0x7fffd84542c0 <col:36, col:42> 'float' <LValueToRValue>
|       |       | `-ArraySubscriptExpr 0x7fffd8454270 <col:36, col:42> 'float' lvalue
|       |       |   |-ImplicitCastExpr 0x7fffd8454258 <col:36> 'float *':'float *' <LValueToRValue>
|       |       |   | `-DeclRefExpr 0x7fffd8454210 <col:36> 'float *':'float *' lvalue ParmVar 0x7fffd84500d0 'orig' 'float *':'float *'
|       |       |   `-IntegerLiteral 0x7fffd8454238 <col:41> 'int' 1
|       |       `-ImplicitCastExpr 0x7fffd84542d8 <col:44> 'float' <LValueToRValue>
|       |         `-DeclRefExpr 0x7fffd8454298 <col:44> 'float' lvalue Var 0x7fffd84536a0 'rayn_y' 'float'
|       |-DeclStmt 0x7fffd8454478 <line:4388:7, col:29>
|       | `-VarDecl 0x7fffd8454370 <col:7, col:26> col:13 used q10d 'float' cinit
|       |   `-BinaryOperator 0x7fffd8454450 <col:20, col:26> 'float' '-'
|       |     |-ImplicitCastExpr 0x7fffd8454420 <col:20> 'float' <LValueToRValue>
|       |     | `-DeclRefExpr 0x7fffd84543d0 <col:20> 'float' lvalue Var 0x7fffd8453b18 'q1d' 'float'
|       |     `-ImplicitCastExpr 0x7fffd8454438 <col:26> 'float' <LValueToRValue>
|       |       `-DeclRefExpr 0x7fffd84543f8 <col:26> 'float' lvalue Var 0x7fffd8453850 'q0d' 'float'
|       |-DeclStmt 0x7fffd84545b0 <line:4389:7, col:29>
|       | `-VarDecl 0x7fffd84544a8 <col:7, col:26> col:13 used q20d 'float' cinit
|       |   `-BinaryOperator 0x7fffd8454588 <col:20, col:26> 'float' '-'
|       |     |-ImplicitCastExpr 0x7fffd8454558 <col:20> 'float' <LValueToRValue>
|       |     | `-DeclRefExpr 0x7fffd8454508 <col:20> 'float' lvalue Var 0x7fffd8453de0 'q2d' 'float'
|       |     `-ImplicitCastExpr 0x7fffd8454570 <col:26> 'float' <LValueToRValue>
|       |       `-DeclRefExpr 0x7fffd8454530 <col:26> 'float' lvalue Var 0x7fffd8453850 'q0d' 'float'
|       |-DeclStmt 0x7fffd84546e8 <line:4390:7, col:29>
|       | `-VarDecl 0x7fffd84545e0 <col:7, col:26> col:13 used q0rd 'float' cinit
|       |   `-BinaryOperator 0x7fffd84546c0 <col:20, col:26> 'float' '-'
|       |     |-ImplicitCastExpr 0x7fffd8454690 <col:20> 'float' <LValueToRValue>
|       |     | `-DeclRefExpr 0x7fffd8454640 <col:20> 'float' lvalue Var 0x7fffd8453850 'q0d' 'float'
|       |     `-ImplicitCastExpr 0x7fffd84546a8 <col:26> 'float' <LValueToRValue>
|       |       `-DeclRefExpr 0x7fffd8454668 <col:26> 'float' lvalue Var 0x7fffd84540a8 'rod' 'float'
|       |-BinaryOperator 0x7fffd8454b70 <line:4392:7, col:60> 'float' '='
|       | |-ArraySubscriptExpr 0x7fffd84547c0 <col:7, col:16> 'float' lvalue
|       | | |-ImplicitCastExpr 0x7fffd84547a8 <col:7, col:13> 'float *' <ArrayToPointerDecay>
|       | | | `-ArraySubscriptExpr 0x7fffd8454760 <col:7, col:13> 'float [2]' lvalue
|       | | |   |-ImplicitCastExpr 0x7fffd8454748 <col:7> 'float (*)[2]':'float (*)[2]' <LValueToRValue>
|       | | |   | `-DeclRefExpr 0x7fffd8454700 <col:7> 'float (*)[2]':'float (*)[2]' lvalue ParmVar 0x7fffd84504e0 'hits' 'float (*)[2]':'float (*)[2]'
|       | | |   `-IntegerLiteral 0x7fffd8454728 <col:12> 'int' 0
|       | | `-IntegerLiteral 0x7fffd8454788 <col:15> 'int' 0
|       | `-BinaryOperator 0x7fffd8454b48 <col:20, col:60> 'float' '+'
|       |   |-BinaryOperator 0x7fffd8454a10 <col:20, col:47> 'float' '+'
|       |   | |-ImplicitCastExpr 0x7fffd84549f8 <col:20> 'float' <LValueToRValue>
|       |   | | `-DeclRefExpr 0x7fffd8454810 <col:20> 'float' lvalue Var 0x7fffd84545e0 'q0rd' 'float'
|       |   | `-BinaryOperator 0x7fffd84549d0 <col:27, col:47> 'float' '*'
|       |   |   |-BinaryOperator 0x7fffd8454968 <col:27, col:45> 'float' '*'
|       |   |   | |-ImplicitCastExpr 0x7fffd8454950 <col:27> 'float' <LValueToRValue>
|       |   |   | | `-DeclRefExpr 0x7fffd8454838 <col:27> 'float' lvalue Var 0x7fffd84519f8 's0' 'float'
|       |   |   | `-ParenExpr 0x7fffd8454930 <col:30, col:45> 'float'
|       |   |   |   `-BinaryOperator 0x7fffd8454908 <col:31, col:43> 'float' '-'
|       |   |   |     |-FloatingLiteral 0x7fffd8454860 <col:31> 'float' 2.000000e+00
|       |   |   |     `-BinaryOperator 0x7fffd84548e0 <col:38, col:43> 'float' '*'
|       |   |   |       |-FloatingLiteral 0x7fffd8454880 <col:38> 'float' 2.000000e+00
|       |   |   |       `-ImplicitCastExpr 0x7fffd84548c8 <col:43> 'float' <LValueToRValue>
|       |   |   |         `-DeclRefExpr 0x7fffd84548a0 <col:43> 'float' lvalue Var 0x7fffd84519f8 's0' 'float'
|       |   |   `-ImplicitCastExpr 0x7fffd84549b8 <col:47> 'float' <LValueToRValue>
|       |   |     `-DeclRefExpr 0x7fffd8454990 <col:47> 'float' lvalue Var 0x7fffd8454370 'q10d' 'float'
|       |   `-BinaryOperator 0x7fffd8454b20 <col:54, col:60> 'float' '*'
|       |     |-BinaryOperator 0x7fffd8454ab8 <col:54, col:57> 'float' '*'
|       |     | |-ImplicitCastExpr 0x7fffd8454a88 <col:54> 'float' <LValueToRValue>
|       |     | | `-DeclRefExpr 0x7fffd8454a38 <col:54> 'float' lvalue Var 0x7fffd84519f8 's0' 'float'
|       |     | `-ImplicitCastExpr 0x7fffd8454aa0 <col:57> 'float' <LValueToRValue>
|       |     |   `-DeclRefExpr 0x7fffd8454a60 <col:57> 'float' lvalue Var 0x7fffd84519f8 's0' 'float'
|       |     `-ImplicitCastExpr 0x7fffd8454b08 <col:60> 'float' <LValueToRValue>
|       |       `-DeclRefExpr 0x7fffd8454ae0 <col:60> 'float' lvalue Var 0x7fffd84544a8 'q20d' 'float'
|       |-BinaryOperator 0x7fffd8454d90 <line:4393:7, col:25> 'float' '='
|       | |-ArraySubscriptExpr 0x7fffd8454c58 <col:7, col:16> 'float' lvalue
|       | | |-ImplicitCastExpr 0x7fffd8454c40 <col:7, col:13> 'float *' <ArrayToPointerDecay>
|       | | | `-ArraySubscriptExpr 0x7fffd8454bf8 <col:7, col:13> 'float [2]' lvalue
|       | | |   |-ImplicitCastExpr 0x7fffd8454be0 <col:7> 'float (*)[2]':'float (*)[2]' <LValueToRValue>
|       | | |   | `-DeclRefExpr 0x7fffd8454b98 <col:7> 'float (*)[2]':'float (*)[2]' lvalue ParmVar 0x7fffd84504e0 'hits' 'float (*)[2]':'float (*)[2]'
|       | | |   `-IntegerLiteral 0x7fffd8454bc0 <col:12> 'int' 0
|       | | `-IntegerLiteral 0x7fffd8454c20 <col:15> 'int' 1
|       | `-BinaryOperator 0x7fffd8454d68 <col:20, col:25> 'float' '+'
|       |   |-BinaryOperator 0x7fffd8454d00 <col:20, col:22> 'float' '*'
|       |   | |-ImplicitCastExpr 0x7fffd8454cd0 <col:20> 'float' <LValueToRValue>
|       |   | | `-DeclRefExpr 0x7fffd8454c80 <col:20> 'float' lvalue Var 0x7fffd8451588 'a' 'float'
|       |   | `-ImplicitCastExpr 0x7fffd8454ce8 <col:22> 'float' <LValueToRValue>
|       |   |   `-DeclRefExpr 0x7fffd8454ca8 <col:22> 'float' lvalue Var 0x7fffd84519f8 's0' 'float'
|       |   `-ImplicitCastExpr 0x7fffd8454d50 <col:25> 'float' <LValueToRValue>
|       |     `-DeclRefExpr 0x7fffd8454d28 <col:25> 'float' lvalue Var 0x7fffd8451788 'b' 'float'
|       `-IfStmt 0x7fffd8455580 <line:4395:7, line:4401:7>
|         |-<<<NULL>>>
|         |-<<<NULL>>>
|         |-BinaryOperator 0x7fffd8454e18 <line:4395:11, col:19> 'int' '>'
|         | |-ImplicitCastExpr 0x7fffd8454e00 <col:11> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x7fffd8454db8 <col:11> 'int' lvalue Var 0x7fffd8451b88 'num_s' 'int'
|         | `-IntegerLiteral 0x7fffd8454de0 <col:19> 'int' 1
|         |-CompoundStmt 0x7fffd8455508 <col:22, line:4399:7>
|         | |-BinaryOperator 0x7fffd8455288 <line:4396:10, col:63> 'float' '='
|         | | |-ArraySubscriptExpr 0x7fffd8454f00 <col:10, col:19> 'float' lvalue
|         | | | |-ImplicitCastExpr 0x7fffd8454ee8 <col:10, col:16> 'float *' <ArrayToPointerDecay>
|         | | | | `-ArraySubscriptExpr 0x7fffd8454ea0 <col:10, col:16> 'float [2]' lvalue
|         | | | |   |-ImplicitCastExpr 0x7fffd8454e88 <col:10> 'float (*)[2]':'float (*)[2]' <LValueToRValue>
|         | | | |   | `-DeclRefExpr 0x7fffd8454e40 <col:10> 'float (*)[2]':'float (*)[2]' lvalue ParmVar 0x7fffd84504e0 'hits' 'float (*)[2]':'float (*)[2]'
|         | | | |   `-IntegerLiteral 0x7fffd8454e68 <col:15> 'int' 1
|         | | | `-IntegerLiteral 0x7fffd8454ec8 <col:18> 'int' 0
|         | | `-BinaryOperator 0x7fffd8455260 <col:23, col:63> 'float' '+'
|         | |   |-BinaryOperator 0x7fffd8455128 <col:23, col:50> 'float' '+'
|         | |   | |-ImplicitCastExpr 0x7fffd8455110 <col:23> 'float' <LValueToRValue>
|         | |   | | `-DeclRefExpr 0x7fffd8454f28 <col:23> 'float' lvalue Var 0x7fffd84545e0 'q0rd' 'float'
|         | |   | `-BinaryOperator 0x7fffd84550e8 <col:30, col:50> 'float' '*'
|         | |   |   |-BinaryOperator 0x7fffd8455080 <col:30, col:48> 'float' '*'
|         | |   |   | |-ImplicitCastExpr 0x7fffd8455068 <col:30> 'float' <LValueToRValue>
|         | |   |   | | `-DeclRefExpr 0x7fffd8454f50 <col:30> 'float' lvalue Var 0x7fffd8451aa8 's1' 'float'
|         | |   |   | `-ParenExpr 0x7fffd8455048 <col:33, col:48> 'float'
|         | |   |   |   `-BinaryOperator 0x7fffd8455020 <col:34, col:46> 'float' '-'
|         | |   |   |     |-FloatingLiteral 0x7fffd8454f78 <col:34> 'float' 2.000000e+00
|         | |   |   |     `-BinaryOperator 0x7fffd8454ff8 <col:41, col:46> 'float' '*'
|         | |   |   |       |-FloatingLiteral 0x7fffd8454f98 <col:41> 'float' 2.000000e+00
|         | |   |   |       `-ImplicitCastExpr 0x7fffd8454fe0 <col:46> 'float' <LValueToRValue>
|         | |   |   |         `-DeclRefExpr 0x7fffd8454fb8 <col:46> 'float' lvalue Var 0x7fffd8451aa8 's1' 'float'
|         | |   |   `-ImplicitCastExpr 0x7fffd84550d0 <col:50> 'float' <LValueToRValue>
|         | |   |     `-DeclRefExpr 0x7fffd84550a8 <col:50> 'float' lvalue Var 0x7fffd8454370 'q10d' 'float'
|         | |   `-BinaryOperator 0x7fffd8455238 <col:57, col:63> 'float' '*'
|         | |     |-BinaryOperator 0x7fffd84551d0 <col:57, col:60> 'float' '*'
|         | |     | |-ImplicitCastExpr 0x7fffd84551a0 <col:57> 'float' <LValueToRValue>
|         | |     | | `-DeclRefExpr 0x7fffd8455150 <col:57> 'float' lvalue Var 0x7fffd8451aa8 's1' 'float'
|         | |     | `-ImplicitCastExpr 0x7fffd84551b8 <col:60> 'float' <LValueToRValue>
|         | |     |   `-DeclRefExpr 0x7fffd8455178 <col:60> 'float' lvalue Var 0x7fffd8451aa8 's1' 'float'
|         | |     `-ImplicitCastExpr 0x7fffd8455220 <col:63> 'float' <LValueToRValue>
|         | |       `-DeclRefExpr 0x7fffd84551f8 <col:63> 'float' lvalue Var 0x7fffd84544a8 'q20d' 'float'
|         | |-BinaryOperator 0x7fffd84554a8 <line:4397:10, col:28> 'float' '='
|         | | |-ArraySubscriptExpr 0x7fffd8455370 <col:10, col:19> 'float' lvalue
|         | | | |-ImplicitCastExpr 0x7fffd8455358 <col:10, col:16> 'float *' <ArrayToPointerDecay>
|         | | | | `-ArraySubscriptExpr 0x7fffd8455310 <col:10, col:16> 'float [2]' lvalue
|         | | | |   |-ImplicitCastExpr 0x7fffd84552f8 <col:10> 'float (*)[2]':'float (*)[2]' <LValueToRValue>
|         | | | |   | `-DeclRefExpr 0x7fffd84552b0 <col:10> 'float (*)[2]':'float (*)[2]' lvalue ParmVar 0x7fffd84504e0 'hits' 'float (*)[2]':'float (*)[2]'
|         | | | |   `-IntegerLiteral 0x7fffd84552d8 <col:15> 'int' 1
|         | | | `-IntegerLiteral 0x7fffd8455338 <col:18> 'int' 1
|         | | `-BinaryOperator 0x7fffd8455480 <col:23, col:28> 'float' '+'
|         | |   |-BinaryOperator 0x7fffd8455418 <col:23, col:25> 'float' '*'
|         | |   | |-ImplicitCastExpr 0x7fffd84553e8 <col:23> 'float' <LValueToRValue>
|         | |   | | `-DeclRefExpr 0x7fffd8455398 <col:23> 'float' lvalue Var 0x7fffd8451588 'a' 'float'
|         | |   | `-ImplicitCastExpr 0x7fffd8455400 <col:25> 'float' <LValueToRValue>
|         | |   |   `-DeclRefExpr 0x7fffd84553c0 <col:25> 'float' lvalue Var 0x7fffd8451aa8 's1' 'float'
|         | |   `-ImplicitCastExpr 0x7fffd8455468 <col:28> 'float' <LValueToRValue>
|         | |     `-DeclRefExpr 0x7fffd8455440 <col:28> 'float' lvalue Var 0x7fffd8451788 'b' 'float'
|         | `-ReturnStmt 0x7fffd84554f0 <line:4398:10, col:17>
|         |   `-IntegerLiteral 0x7fffd84554d0 <col:17> 'int' 2
|         `-CompoundStmt 0x7fffd8455568 <line:4399:14, line:4401:7>
|           `-ReturnStmt 0x7fffd8455550 <line:4400:10, col:17>
|             `-IntegerLiteral 0x7fffd8455530 <col:17> 'int' 1
|-FunctionDecl 0x7fffd8455838 <line:4405:1, line:4408:1> line:4405:12 used equal 'int (float *, float *)' static
| |-ParmVarDecl 0x7fffd84556e0 <col:18, col:25> col:25 used a 'float *'
| |-ParmVarDecl 0x7fffd8455758 <col:28, col:35> col:35 used b 'float *'
| `-CompoundStmt 0x7fffd8455c18 <line:4406:1, line:4408:1>
|   `-ReturnStmt 0x7fffd8455c00 <line:4407:4, col:40>
|     `-ParenExpr 0x7fffd8455be0 <col:11, col:40> 'int'
|       `-BinaryOperator 0x7fffd8455bb8 <col:12, col:39> 'int' '&&'
|         |-BinaryOperator 0x7fffd8455a28 <col:12, col:23> 'int' '=='
|         | |-ImplicitCastExpr 0x7fffd84559f8 <col:12, col:15> 'float' <LValueToRValue>
|         | | `-ArraySubscriptExpr 0x7fffd8455948 <col:12, col:15> 'float' lvalue
|         | |   |-ImplicitCastExpr 0x7fffd8455930 <col:12> 'float *' <LValueToRValue>
|         | |   | `-DeclRefExpr 0x7fffd84558e8 <col:12> 'float *' lvalue ParmVar 0x7fffd84556e0 'a' 'float *'
|         | |   `-IntegerLiteral 0x7fffd8455910 <col:14> 'int' 0
|         | `-ImplicitCastExpr 0x7fffd8455a10 <col:20, col:23> 'float' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x7fffd84559d0 <col:20, col:23> 'float' lvalue
|         |     |-ImplicitCastExpr 0x7fffd84559b8 <col:20> 'float *' <LValueToRValue>
|         |     | `-DeclRefExpr 0x7fffd8455970 <col:20> 'float *' lvalue ParmVar 0x7fffd8455758 'b' 'float *'
|         |     `-IntegerLiteral 0x7fffd8455998 <col:22> 'int' 0
|         `-BinaryOperator 0x7fffd8455b90 <col:28, col:39> 'int' '=='
|           |-ImplicitCastExpr 0x7fffd8455b60 <col:28, col:31> 'float' <LValueToRValue>
|           | `-ArraySubscriptExpr 0x7fffd8455ab0 <col:28, col:31> 'float' lvalue
|           |   |-ImplicitCastExpr 0x7fffd8455a98 <col:28> 'float *' <LValueToRValue>
|           |   | `-DeclRefExpr 0x7fffd8455a50 <col:28> 'float *' lvalue ParmVar 0x7fffd84556e0 'a' 'float *'
|           |   `-IntegerLiteral 0x7fffd8455a78 <col:30> 'int' 1
|           `-ImplicitCastExpr 0x7fffd8455b78 <col:36, col:39> 'float' <LValueToRValue>
|             `-ArraySubscriptExpr 0x7fffd8455b38 <col:36, col:39> 'float' lvalue
|               |-ImplicitCastExpr 0x7fffd8455b20 <col:36> 'float *' <LValueToRValue>
|               | `-DeclRefExpr 0x7fffd8455ad8 <col:36> 'float *' lvalue ParmVar 0x7fffd8455758 'b' 'float *'
|               `-IntegerLiteral 0x7fffd8455b00 <col:38> 'int' 1
|-FunctionDecl 0x7fffd8455ef8 <line:4410:1, line:4477:1> line:4410:12 used stbtt__compute_crossings_x 'int (float, float, int, stbtt_vertex *)' static
| |-ParmVarDecl 0x7fffd8455c48 <col:39, col:45> col:45 used x 'float'
| |-ParmVarDecl 0x7fffd8455cc0 <col:48, col:54> col:54 used y 'float'
| |-ParmVarDecl 0x7fffd8455d38 <col:57, col:61> col:61 used nverts 'int'
| |-ParmVarDecl 0x7fffd8455da8 <col:69, col:83> col:83 used verts 'stbtt_vertex *'
| `-CompoundStmt 0x7fffd845d6e8 <line:4411:1, line:4477:1>
|   |-DeclStmt 0x7fffd8456030 <line:4412:4, col:9>
|   | `-VarDecl 0x7fffd8455fd0 <col:4, col:8> col:8 used i 'int'
|   |-DeclStmt 0x7fffd84562c0 <line:4413:4, col:36>
|   | |-VarDecl 0x7fffd8456090 <col:4, col:16> col:10 used orig 'float [2]'
|   | `-VarDecl 0x7fffd8456138 <col:4, col:35> col:19 used ray 'float [2]' cinit
|   |   `-InitListExpr 0x7fffd8456228 <col:28, col:35> 'float [2]'
|   |     |-ImplicitCastExpr 0x7fffd8456278 <col:30> 'float' <IntegralToFloating>
|   |     | `-IntegerLiteral 0x7fffd8456198 <col:30> 'int' 1
|   |     `-ImplicitCastExpr 0x7fffd8456290 <col:33> 'float' <IntegralToFloating>
|   |       `-IntegerLiteral 0x7fffd84561b8 <col:33> 'int' 0
|   |-DeclStmt 0x7fffd8456350 <line:4414:4, col:16>
|   | `-VarDecl 0x7fffd84562f0 <col:4, col:10> col:10 used y_frac 'float'
|   |-DeclStmt 0x7fffd8456400 <line:4415:4, col:19>
|   | `-VarDecl 0x7fffd8456380 <col:4, col:18> col:8 used winding 'int' cinit
|   |   `-IntegerLiteral 0x7fffd84563e0 <col:18> 'int' 0
|   |-BinaryOperator 0x7fffd84564e0 <line:4417:4, col:14> 'float' '='
|   | |-ArraySubscriptExpr 0x7fffd8456478 <col:4, col:10> 'float' lvalue
|   | | |-ImplicitCastExpr 0x7fffd8456460 <col:4> 'float *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x7fffd8456418 <col:4> 'float [2]' lvalue Var 0x7fffd8456090 'orig' 'float [2]'
|   | | `-IntegerLiteral 0x7fffd8456440 <col:9> 'int' 0
|   | `-ImplicitCastExpr 0x7fffd84564c8 <col:14> 'float' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd84564a0 <col:14> 'float' lvalue ParmVar 0x7fffd8455c48 'x' 'float'
|   |-BinaryOperator 0x7fffd84565d0 <line:4418:4, col:14> 'float' '='
|   | |-ArraySubscriptExpr 0x7fffd8456568 <col:4, col:10> 'float' lvalue
|   | | |-ImplicitCastExpr 0x7fffd8456550 <col:4> 'float *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x7fffd8456508 <col:4> 'float [2]' lvalue Var 0x7fffd8456090 'orig' 'float [2]'
|   | | `-IntegerLiteral 0x7fffd8456530 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x7fffd84565b8 <col:14> 'float' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd8456590 <col:14> 'float' lvalue ParmVar 0x7fffd8455cc0 'y' 'float'
|   |-BinaryOperator 0x7fffd8456790 <line:4421:4, line:450:39> 'float' '='
|   | |-DeclRefExpr 0x7fffd84565f8 <line:4421:4> 'float' lvalue Var 0x7fffd84562f0 'y_frac' 'float'
|   | `-CStyleCastExpr 0x7fffd8456768 <col:13, line:450:39> 'float' <FloatingCast>
|   |   `-CallExpr 0x7fffd84566d0 <col:31, col:39> 'double'
|   |     |-ImplicitCastExpr 0x7fffd84566b8 <col:31> 'double (*)(double, double)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd8456620 <col:31> 'double (double, double)' Function 0x7fffd8291dd8 'fmod' 'double (double, double)'
|   |     |-ImplicitCastExpr 0x7fffd8456720 <line:4421:32> 'double' <FloatingCast>
|   |     | `-ImplicitCastExpr 0x7fffd8456708 <col:32> 'float' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fffd8456648 <col:32> 'float' lvalue ParmVar 0x7fffd8455cc0 'y' 'float'
|   |     `-ImplicitCastExpr 0x7fffd8456738 <col:35> 'double' <FloatingCast>
|   |       `-FloatingLiteral 0x7fffd8456670 <col:35> 'float' 1.000000e+00
|   |-IfStmt 0x7fffd8456a20 <line:4422:4, line:4425:12>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd8456838 <line:4422:8, col:17> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd8456820 <col:8> 'float' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd84567b8 <col:8> 'float' lvalue Var 0x7fffd84562f0 'y_frac' 'float'
|   | | `-FloatingLiteral 0x7fffd84567e0 <col:17> 'float' 1.000000e-02
|   | |-CompoundAssignOperator 0x7fffd84568a8 <line:4423:7, col:12> 'float' '+=' ComputeLHSTy='float' ComputeResultTy='float'
|   | | |-DeclRefExpr 0x7fffd8456860 <col:7> 'float' lvalue ParmVar 0x7fffd8455cc0 'y' 'float'
|   | | `-FloatingLiteral 0x7fffd8456888 <col:12> 'float' 1.000000e-02
|   | `-IfStmt 0x7fffd84569e8 <line:4424:9, line:4425:12>
|   |   |-<<<NULL>>>
|   |   |-<<<NULL>>>
|   |   |-BinaryOperator 0x7fffd8456940 <line:4424:13, col:22> 'int' '>'
|   |   | |-ImplicitCastExpr 0x7fffd8456928 <col:13> 'float' <LValueToRValue>
|   |   | | `-DeclRefExpr 0x7fffd84568e0 <col:13> 'float' lvalue Var 0x7fffd84562f0 'y_frac' 'float'
|   |   | `-FloatingLiteral 0x7fffd8456908 <col:22> 'float' 9.900000e-01
|   |   |-CompoundAssignOperator 0x7fffd84569b0 <line:4425:7, col:12> 'float' '-=' ComputeLHSTy='float' ComputeResultTy='float'
|   |   | |-DeclRefExpr 0x7fffd8456968 <col:7> 'float' lvalue ParmVar 0x7fffd8455cc0 'y' 'float'
|   |   | `-FloatingLiteral 0x7fffd8456990 <col:12> 'float' 1.000000e-02
|   |   `-<<<NULL>>>
|   |-BinaryOperator 0x7fffd8456b20 <line:4426:4, col:14> 'float' '='
|   | |-ArraySubscriptExpr 0x7fffd8456ab8 <col:4, col:10> 'float' lvalue
|   | | |-ImplicitCastExpr 0x7fffd8456aa0 <col:4> 'float *' <ArrayToPointerDecay>
|   | | | `-DeclRefExpr 0x7fffd8456a58 <col:4> 'float [2]' lvalue Var 0x7fffd8456090 'orig' 'float [2]'
|   | | `-IntegerLiteral 0x7fffd8456a80 <col:9> 'int' 1
|   | `-ImplicitCastExpr 0x7fffd8456b08 <col:14> 'float' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd8456ae0 <col:14> 'float' lvalue ParmVar 0x7fffd8455cc0 'y' 'float'
|   |-ForStmt 0x7fffd845d658 <line:4429:4, line:4475:4>
|   | |-BinaryOperator 0x7fffd8456b90 <line:4429:9, col:11> 'int' '='
|   | | |-DeclRefExpr 0x7fffd8456b48 <col:9> 'int' lvalue Var 0x7fffd8455fd0 'i' 'int'
|   | | `-IntegerLiteral 0x7fffd8456b70 <col:11> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd8456c38 <col:14, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd8456c08 <col:14> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd8456bb8 <col:14> 'int' lvalue Var 0x7fffd8455fd0 'i' 'int'
|   | | `-ImplicitCastExpr 0x7fffd8456c20 <col:18> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8456be0 <col:18> 'int' lvalue ParmVar 0x7fffd8455d38 'nverts' 'int'
|   | |-UnaryOperator 0x7fffd8456c88 <col:26, col:28> 'int' prefix '++'
|   | | `-DeclRefExpr 0x7fffd8456c60 <col:28> 'int' lvalue Var 0x7fffd8455fd0 'i' 'int'
|   | `-CompoundStmt 0x7fffd845d638 <col:31, line:4475:4>
|   |   |-IfStmt 0x7fffd8458488 <line:4430:7, line:4438:7>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x7fffd8456de0 <line:4430:11, col:28> 'int' '=='
|   |   | | |-ImplicitCastExpr 0x7fffd8456dc8 <col:11, col:20> 'int' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x7fffd8456db0 <col:11, col:20> 'unsigned char' <LValueToRValue>
|   |   | | |   `-MemberExpr 0x7fffd8456d50 <col:11, col:20> 'unsigned char' lvalue .type 0x7fffd8351a18
|   |   | | |     `-ArraySubscriptExpr 0x7fffd8456d28 <col:11, col:18> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   | | |       |-ImplicitCastExpr 0x7fffd8456cf8 <col:11> 'stbtt_vertex *' <LValueToRValue>
|   |   | | |       | `-DeclRefExpr 0x7fffd8456ca8 <col:11> 'stbtt_vertex *' lvalue ParmVar 0x7fffd8455da8 'verts' 'stbtt_vertex *'
|   |   | | |       `-ImplicitCastExpr 0x7fffd8456d10 <col:17> 'int' <LValueToRValue>
|   |   | | |         `-DeclRefExpr 0x7fffd8456cd0 <col:17> 'int' lvalue Var 0x7fffd8455fd0 'i' 'int'
|   |   | | `-DeclRefExpr 0x7fffd8456d88 <col:28> 'int' EnumConstant 0x7fffd8351638 'STBTT_vline' 'int'
|   |   | |-CompoundStmt 0x7fffd8458460 <col:41, line:4438:7>
|   |   | | |-DeclStmt 0x7fffd8457210 <line:4431:10, col:62>
|   |   | | | |-VarDecl 0x7fffd8456e20 <col:10, col:36> col:14 used x0 'int' cinit
|   |   | | | | `-CStyleCastExpr 0x7fffd8456fd8 <col:19, col:36> 'int' <IntegralCast>
|   |   | | | |   `-ImplicitCastExpr 0x7fffd8456fc0 <col:25, col:36> 'short' <LValueToRValue>
|   |   | | | |     `-MemberExpr 0x7fffd8456f70 <col:25, col:36> 'short' lvalue .x 0x7fffd83517d8
|   |   | | | |       `-ArraySubscriptExpr 0x7fffd8456f48 <col:25, col:34> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   | | | |         |-ImplicitCastExpr 0x7fffd8456f30 <col:25> 'stbtt_vertex *' <LValueToRValue>
|   |   | | | |         | `-DeclRefExpr 0x7fffd8456e80 <col:25> 'stbtt_vertex *' lvalue ParmVar 0x7fffd8455da8 'verts' 'stbtt_vertex *'
|   |   | | | |         `-BinaryOperator 0x7fffd8456f08 <col:31, col:33> 'int' '-'
|   |   | | | |           |-ImplicitCastExpr 0x7fffd8456ef0 <col:31> 'int' <LValueToRValue>
|   |   | | | |           | `-DeclRefExpr 0x7fffd8456ea8 <col:31> 'int' lvalue Var 0x7fffd8455fd0 'i' 'int'
|   |   | | | |           `-IntegerLiteral 0x7fffd8456ed0 <col:33> 'int' 1
|   |   | | | `-VarDecl 0x7fffd8457018 <col:10, col:61> col:39 used y0 'int' cinit
|   |   | | |   `-CStyleCastExpr 0x7fffd84571d0 <col:44, col:61> 'int' <IntegralCast>
|   |   | | |     `-ImplicitCastExpr 0x7fffd84571b8 <col:50, col:61> 'short' <LValueToRValue>
|   |   | | |       `-MemberExpr 0x7fffd8457168 <col:50, col:61> 'short' lvalue .y 0x7fffd8351838
|   |   | | |         `-ArraySubscriptExpr 0x7fffd8457140 <col:50, col:59> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   | | |           |-ImplicitCastExpr 0x7fffd8457128 <col:50> 'stbtt_vertex *' <LValueToRValue>
|   |   | | |           | `-DeclRefExpr 0x7fffd8457078 <col:50> 'stbtt_vertex *' lvalue ParmVar 0x7fffd8455da8 'verts' 'stbtt_vertex *'
|   |   | | |           `-BinaryOperator 0x7fffd8457100 <col:56, col:58> 'int' '-'
|   |   | | |             |-ImplicitCastExpr 0x7fffd84570e8 <col:56> 'int' <LValueToRValue>
|   |   | | |             | `-DeclRefExpr 0x7fffd84570a0 <col:56> 'int' lvalue Var 0x7fffd8455fd0 'i' 'int'
|   |   | | |             `-IntegerLiteral 0x7fffd84570c8 <col:58> 'int' 1
|   |   | | |-DeclStmt 0x7fffd84575a0 <line:4432:10, col:62>
|   |   | | | |-VarDecl 0x7fffd8457240 <col:10, col:36> col:14 used x1 'int' cinit
|   |   | | | | `-CStyleCastExpr 0x7fffd84573b0 <col:19, col:36> 'int' <IntegralCast>
|   |   | | | |   `-ImplicitCastExpr 0x7fffd8457398 <col:25, col:36> 'short' <LValueToRValue>
|   |   | | | |     `-MemberExpr 0x7fffd8457348 <col:25, col:36> 'short' lvalue .x 0x7fffd83517d8
|   |   | | | |       `-ArraySubscriptExpr 0x7fffd8457320 <col:25, col:34> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   | | | |         |-ImplicitCastExpr 0x7fffd84572f0 <col:25> 'stbtt_vertex *' <LValueToRValue>
|   |   | | | |         | `-DeclRefExpr 0x7fffd84572a0 <col:25> 'stbtt_vertex *' lvalue ParmVar 0x7fffd8455da8 'verts' 'stbtt_vertex *'
|   |   | | | |         `-ImplicitCastExpr 0x7fffd8457308 <col:31> 'int' <LValueToRValue>
|   |   | | | |           `-DeclRefExpr 0x7fffd84572c8 <col:31> 'int' lvalue Var 0x7fffd8455fd0 'i' 'int'
|   |   | | | `-VarDecl 0x7fffd84573f0 <col:10, col:61> col:39 used y1 'int' cinit
|   |   | | |   `-CStyleCastExpr 0x7fffd8457560 <col:44, col:61> 'int' <IntegralCast>
|   |   | | |     `-ImplicitCastExpr 0x7fffd8457548 <col:50, col:61> 'short' <LValueToRValue>
|   |   | | |       `-MemberExpr 0x7fffd84574f8 <col:50, col:61> 'short' lvalue .y 0x7fffd8351838
|   |   | | |         `-ArraySubscriptExpr 0x7fffd84574d0 <col:50, col:59> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |   | | |           |-ImplicitCastExpr 0x7fffd84574a0 <col:50> 'stbtt_vertex *' <LValueToRValue>
|   |   | | |           | `-DeclRefExpr 0x7fffd8457450 <col:50> 'stbtt_vertex *' lvalue ParmVar 0x7fffd8455da8 'verts' 'stbtt_vertex *'
|   |   | | |           `-ImplicitCastExpr 0x7fffd84574b8 <col:56> 'int' <LValueToRValue>
|   |   | | |             `-DeclRefExpr 0x7fffd8457478 <col:56> 'int' lvalue Var 0x7fffd8455fd0 'i' 'int'
|   |   | | `-IfStmt 0x7fffd8458428 <line:4433:10, line:4437:10>
|   |   | |   |-<<<NULL>>>
|   |   | |   |-<<<NULL>>>
|   |   | |   |-BinaryOperator 0x7fffd8457d48 <line:4433:14, line:4338:47> 'int' '&&'
|   |   | |   | |-BinaryOperator 0x7fffd8457aa8 <line:4433:14, line:4339:47> 'int' '&&'
|   |   | |   | | |-BinaryOperator 0x7fffd8457808 <line:4433:14, line:4338:47> 'int' '>'
|   |   | |   | | | |-ImplicitCastExpr 0x7fffd84577d8 <line:4433:14> 'float' <LValueToRValue>
|   |   | |   | | | | `-DeclRefExpr 0x7fffd84575b8 <col:14> 'float' lvalue ParmVar 0x7fffd8455cc0 'y' 'float'
|   |   | |   | | | `-ImplicitCastExpr 0x7fffd84577f0 <line:4338:25, col:47> 'float' <IntegralToFloating>
|   |   | |   | | |   `-ParenExpr 0x7fffd84577b8 <col:25, col:47> 'int'
|   |   | |   | | |     `-ConditionalOperator 0x7fffd8457788 <col:26, col:46> 'int'
|   |   | |   | | |       |-BinaryOperator 0x7fffd84576a0 <col:26, col:34> 'int' '<'
|   |   | |   | | |       | |-ImplicitCastExpr 0x7fffd8457670 <col:26, col:28> 'int' <LValueToRValue>
|   |   | |   | | |       | | `-ParenExpr 0x7fffd8457608 <col:26, col:28> 'int' lvalue
|   |   | |   | | |       | |   `-DeclRefExpr 0x7fffd84575e0 <line:4433:28> 'int' lvalue Var 0x7fffd8457018 'y0' 'int'
|   |   | |   | | |       | `-ImplicitCastExpr 0x7fffd8457688 <line:4338:32, col:34> 'int' <LValueToRValue>
|   |   | |   | | |       |   `-ParenExpr 0x7fffd8457650 <col:32, col:34> 'int' lvalue
|   |   | |   | | |       |     `-DeclRefExpr 0x7fffd8457628 <line:4433:31> 'int' lvalue Var 0x7fffd84573f0 'y1' 'int'
|   |   | |   | | |       |-ImplicitCastExpr 0x7fffd8457758 <line:4338:38, col:40> 'int' <LValueToRValue>
|   |   | |   | | |       | `-ParenExpr 0x7fffd84576f0 <col:38, col:40> 'int' lvalue
|   |   | |   | | |       |   `-DeclRefExpr 0x7fffd84576c8 <line:4433:28> 'int' lvalue Var 0x7fffd8457018 'y0' 'int'
|   |   | |   | | |       `-ImplicitCastExpr 0x7fffd8457770 <line:4338:44, col:46> 'int' <LValueToRValue>
|   |   | |   | | |         `-ParenExpr 0x7fffd8457738 <col:44, col:46> 'int' lvalue
|   |   | |   | | |           `-DeclRefExpr 0x7fffd8457710 <line:4433:31> 'int' lvalue Var 0x7fffd84573f0 'y1' 'int'
|   |   | |   | | `-BinaryOperator 0x7fffd8457a80 <col:38, line:4339:47> 'int' '<'
|   |   | |   | |   |-ImplicitCastExpr 0x7fffd8457a50 <line:4433:38> 'float' <LValueToRValue>
|   |   | |   | |   | `-DeclRefExpr 0x7fffd8457830 <col:38> 'float' lvalue ParmVar 0x7fffd8455cc0 'y' 'float'
|   |   | |   | |   `-ImplicitCastExpr 0x7fffd8457a68 <line:4339:25, col:47> 'float' <IntegralToFloating>
|   |   | |   | |     `-ParenExpr 0x7fffd8457a30 <col:25, col:47> 'int'
|   |   | |   | |       `-ConditionalOperator 0x7fffd8457a00 <col:26, col:46> 'int'
|   |   | |   | |         |-BinaryOperator 0x7fffd8457918 <col:26, col:34> 'int' '<'
|   |   | |   | |         | |-ImplicitCastExpr 0x7fffd84578e8 <col:26, col:28> 'int' <LValueToRValue>
|   |   | |   | |         | | `-ParenExpr 0x7fffd8457880 <col:26, col:28> 'int' lvalue
|   |   | |   | |         | |   `-DeclRefExpr 0x7fffd8457858 <line:4433:52> 'int' lvalue Var 0x7fffd8457018 'y0' 'int'
|   |   | |   | |         | `-ImplicitCastExpr 0x7fffd8457900 <line:4339:32, col:34> 'int' <LValueToRValue>
|   |   | |   | |         |   `-ParenExpr 0x7fffd84578c8 <col:32, col:34> 'int' lvalue
|   |   | |   | |         |     `-DeclRefExpr 0x7fffd84578a0 <line:4433:55> 'int' lvalue Var 0x7fffd84573f0 'y1' 'int'
|   |   | |   | |         |-ImplicitCastExpr 0x7fffd84579d0 <line:4339:38, col:40> 'int' <LValueToRValue>
|   |   | |   | |         | `-ParenExpr 0x7fffd8457968 <col:38, col:40> 'int' lvalue
|   |   | |   | |         |   `-DeclRefExpr 0x7fffd8457940 <line:4433:55> 'int' lvalue Var 0x7fffd84573f0 'y1' 'int'
|   |   | |   | |         `-ImplicitCastExpr 0x7fffd84579e8 <line:4339:44, col:46> 'int' <LValueToRValue>
|   |   | |   | |           `-ParenExpr 0x7fffd84579b0 <col:44, col:46> 'int' lvalue
|   |   | |   | |             `-DeclRefExpr 0x7fffd8457988 <line:4433:52> 'int' lvalue Var 0x7fffd8457018 'y0' 'int'
|   |   | |   | `-BinaryOperator 0x7fffd8457d20 <col:62, line:4338:47> 'int' '>'
|   |   | |   |   |-ImplicitCastExpr 0x7fffd8457cf0 <line:4433:62> 'float' <LValueToRValue>
|   |   | |   |   | `-DeclRefExpr 0x7fffd8457ad0 <col:62> 'float' lvalue ParmVar 0x7fffd8455c48 'x' 'float'
|   |   | |   |   `-ImplicitCastExpr 0x7fffd8457d08 <line:4338:25, col:47> 'float' <IntegralToFloating>
|   |   | |   |     `-ParenExpr 0x7fffd8457cd0 <col:25, col:47> 'int'
|   |   | |   |       `-ConditionalOperator 0x7fffd8457ca0 <col:26, col:46> 'int'
|   |   | |   |         |-BinaryOperator 0x7fffd8457bb8 <col:26, col:34> 'int' '<'
|   |   | |   |         | |-ImplicitCastExpr 0x7fffd8457b88 <col:26, col:28> 'int' <LValueToRValue>
|   |   | |   |         | | `-ParenExpr 0x7fffd8457b20 <col:26, col:28> 'int' lvalue
|   |   | |   |         | |   `-DeclRefExpr 0x7fffd8457af8 <line:4433:76> 'int' lvalue Var 0x7fffd8456e20 'x0' 'int'
|   |   | |   |         | `-ImplicitCastExpr 0x7fffd8457ba0 <line:4338:32, col:34> 'int' <LValueToRValue>
|   |   | |   |         |   `-ParenExpr 0x7fffd8457b68 <col:32, col:34> 'int' lvalue
|   |   | |   |         |     `-DeclRefExpr 0x7fffd8457b40 <line:4433:79> 'int' lvalue Var 0x7fffd8457240 'x1' 'int'
|   |   | |   |         |-ImplicitCastExpr 0x7fffd8457c70 <line:4338:38, col:40> 'int' <LValueToRValue>
|   |   | |   |         | `-ParenExpr 0x7fffd8457c08 <col:38, col:40> 'int' lvalue
|   |   | |   |         |   `-DeclRefExpr 0x7fffd8457be0 <line:4433:76> 'int' lvalue Var 0x7fffd8456e20 'x0' 'int'
|   |   | |   |         `-ImplicitCastExpr 0x7fffd8457c88 <line:4338:44, col:46> 'int' <LValueToRValue>
|   |   | |   |           `-ParenExpr 0x7fffd8457c50 <col:44, col:46> 'int' lvalue
|   |   | |   |             `-DeclRefExpr 0x7fffd8457c28 <line:4433:79> 'int' lvalue Var 0x7fffd8457240 'x1' 'int'
|   |   | |   |-CompoundStmt 0x7fffd8458408 <col:84, line:4437:10>
|   |   | |   | |-DeclStmt 0x7fffd8458158 <line:4434:13, col:64>
|   |   | |   | | `-VarDecl 0x7fffd8457d88 <col:13, col:62> col:19 used x_inter 'float' cinit
|   |   | |   | |   `-BinaryOperator 0x7fffd8458130 <col:29, col:62> 'float' '+'
|   |   | |   | |     |-BinaryOperator 0x7fffd84580b0 <col:29, col:58> 'float' '*'
|   |   | |   | |     | |-BinaryOperator 0x7fffd8457fa8 <col:29, col:48> 'float' '/'
|   |   | |   | |     | | |-ParenExpr 0x7fffd8457ea8 <col:29, col:36> 'float'
|   |   | |   | |     | | | `-BinaryOperator 0x7fffd8457e80 <col:30, col:34> 'float' '-'
|   |   | |   | |     | | |   |-ImplicitCastExpr 0x7fffd8457e38 <col:30> 'float' <LValueToRValue>
|   |   | |   | |     | | |   | `-DeclRefExpr 0x7fffd8457de8 <col:30> 'float' lvalue ParmVar 0x7fffd8455cc0 'y' 'float'
|   |   | |   | |     | | |   `-ImplicitCastExpr 0x7fffd8457e68 <col:34> 'float' <IntegralToFloating>
|   |   | |   | |     | | |     `-ImplicitCastExpr 0x7fffd8457e50 <col:34> 'int' <LValueToRValue>
|   |   | |   | |     | | |       `-DeclRefExpr 0x7fffd8457e10 <col:34> 'int' lvalue Var 0x7fffd8457018 'y0' 'int'
|   |   | |   | |     | | `-ImplicitCastExpr 0x7fffd8457f90 <col:40, col:48> 'float' <IntegralToFloating>
|   |   | |   | |     | |   `-ParenExpr 0x7fffd8457f70 <col:40, col:48> 'int'
|   |   | |   | |     | |     `-BinaryOperator 0x7fffd8457f48 <col:41, col:46> 'int' '-'
|   |   | |   | |     | |       |-ImplicitCastExpr 0x7fffd8457f18 <col:41> 'int' <LValueToRValue>
|   |   | |   | |     | |       | `-DeclRefExpr 0x7fffd8457ec8 <col:41> 'int' lvalue Var 0x7fffd84573f0 'y1' 'int'
|   |   | |   | |     | |       `-ImplicitCastExpr 0x7fffd8457f30 <col:46> 'int' <LValueToRValue>
|   |   | |   | |     | |         `-DeclRefExpr 0x7fffd8457ef0 <col:46> 'int' lvalue Var 0x7fffd8457018 'y0' 'int'
|   |   | |   | |     | `-ImplicitCastExpr 0x7fffd8458098 <col:52, col:58> 'float' <IntegralToFloating>
|   |   | |   | |     |   `-ParenExpr 0x7fffd8458078 <col:52, col:58> 'int'
|   |   | |   | |     |     `-BinaryOperator 0x7fffd8458050 <col:53, col:56> 'int' '-'
|   |   | |   | |     |       |-ImplicitCastExpr 0x7fffd8458020 <col:53> 'int' <LValueToRValue>
|   |   | |   | |     |       | `-DeclRefExpr 0x7fffd8457fd0 <col:53> 'int' lvalue Var 0x7fffd8457240 'x1' 'int'
|   |   | |   | |     |       `-ImplicitCastExpr 0x7fffd8458038 <col:56> 'int' <LValueToRValue>
|   |   | |   | |     |         `-DeclRefExpr 0x7fffd8457ff8 <col:56> 'int' lvalue Var 0x7fffd8456e20 'x0' 'int'
|   |   | |   | |     `-ImplicitCastExpr 0x7fffd8458118 <col:62> 'float' <IntegralToFloating>
|   |   | |   | |       `-ImplicitCastExpr 0x7fffd8458100 <col:62> 'int' <LValueToRValue>
|   |   | |   | |         `-DeclRefExpr 0x7fffd84580d8 <col:62> 'int' lvalue Var 0x7fffd8456e20 'x0' 'int'
|   |   | |   | `-IfStmt 0x7fffd84583d0 <line:4435:13, line:4436:44>
|   |   | |   |   |-<<<NULL>>>
|   |   | |   |   |-<<<NULL>>>
|   |   | |   |   |-BinaryOperator 0x7fffd84581f0 <line:4435:17, col:27> 'int' '<'
|   |   | |   |   | |-ImplicitCastExpr 0x7fffd84581c0 <col:17> 'float' <LValueToRValue>
|   |   | |   |   | | `-DeclRefExpr 0x7fffd8458170 <col:17> 'float' lvalue Var 0x7fffd8457d88 'x_inter' 'float'
|   |   | |   |   | `-ImplicitCastExpr 0x7fffd84581d8 <col:27> 'float' <LValueToRValue>
|   |   | |   |   |   `-DeclRefExpr 0x7fffd8458198 <col:27> 'float' lvalue ParmVar 0x7fffd8455c48 'x' 'float'
|   |   | |   |   |-CompoundAssignOperator 0x7fffd8458398 <line:4436:16, col:44> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   | |   |   | |-DeclRefExpr 0x7fffd8458218 <col:16> 'int' lvalue Var 0x7fffd8456380 'winding' 'int'
|   |   | |   |   | `-ConditionalOperator 0x7fffd8458368 <col:27, col:44> 'int'
|   |   | |   |   |   |-ParenExpr 0x7fffd84582e8 <col:27, col:35> 'int'
|   |   | |   |   |   | `-BinaryOperator 0x7fffd84582c0 <col:28, col:33> 'int' '<'
|   |   | |   |   |   |   |-ImplicitCastExpr 0x7fffd8458290 <col:28> 'int' <LValueToRValue>
|   |   | |   |   |   |   | `-DeclRefExpr 0x7fffd8458240 <col:28> 'int' lvalue Var 0x7fffd8457018 'y0' 'int'
|   |   | |   |   |   |   `-ImplicitCastExpr 0x7fffd84582a8 <col:33> 'int' <LValueToRValue>
|   |   | |   |   |   |     `-DeclRefExpr 0x7fffd8458268 <col:33> 'int' lvalue Var 0x7fffd84573f0 'y1' 'int'
|   |   | |   |   |   |-IntegerLiteral 0x7fffd8458308 <col:39> 'int' 1
|   |   | |   |   |   `-UnaryOperator 0x7fffd8458348 <col:43, col:44> 'int' prefix '-'
|   |   | |   |   |     `-IntegerLiteral 0x7fffd8458328 <col:44> 'int' 1
|   |   | |   |   `-<<<NULL>>>
|   |   | |   `-<<<NULL>>>
|   |   | `-<<<NULL>>>
|   |   `-IfStmt 0x7fffd845d600 <line:4439:7, line:4474:7>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x7fffd84585f8 <line:4439:11, col:28> 'int' '=='
|   |     | |-ImplicitCastExpr 0x7fffd84585e0 <col:11, col:20> 'int' <IntegralCast>
|   |     | | `-ImplicitCastExpr 0x7fffd84585c8 <col:11, col:20> 'unsigned char' <LValueToRValue>
|   |     | |   `-MemberExpr 0x7fffd8458568 <col:11, col:20> 'unsigned char' lvalue .type 0x7fffd8351a18
|   |     | |     `-ArraySubscriptExpr 0x7fffd8458540 <col:11, col:18> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |     | |       |-ImplicitCastExpr 0x7fffd8458510 <col:11> 'stbtt_vertex *' <LValueToRValue>
|   |     | |       | `-DeclRefExpr 0x7fffd84584c0 <col:11> 'stbtt_vertex *' lvalue ParmVar 0x7fffd8455da8 'verts' 'stbtt_vertex *'
|   |     | |       `-ImplicitCastExpr 0x7fffd8458528 <col:17> 'int' <LValueToRValue>
|   |     | |         `-DeclRefExpr 0x7fffd84584e8 <col:17> 'int' lvalue Var 0x7fffd8455fd0 'i' 'int'
|   |     | `-DeclRefExpr 0x7fffd84585a0 <col:28> 'int' EnumConstant 0x7fffd8351680 'STBTT_vcurve' 'int'
|   |     |-CompoundStmt 0x7fffd845d5c0 <col:42, line:4474:7>
|   |     | |-DeclStmt 0x7fffd8458a40 <line:4440:10, col:64>
|   |     | | |-VarDecl 0x7fffd8458638 <col:10, col:36> col:14 used x0 'int' cinit
|   |     | | | `-CStyleCastExpr 0x7fffd84587f0 <col:19, col:36> 'int' <IntegralCast>
|   |     | | |   `-ImplicitCastExpr 0x7fffd84587d8 <col:25, col:36> 'short' <LValueToRValue>
|   |     | | |     `-MemberExpr 0x7fffd8458788 <col:25, col:36> 'short' lvalue .x 0x7fffd83517d8
|   |     | | |       `-ArraySubscriptExpr 0x7fffd8458760 <col:25, col:34> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |     | | |         |-ImplicitCastExpr 0x7fffd8458748 <col:25> 'stbtt_vertex *' <LValueToRValue>
|   |     | | |         | `-DeclRefExpr 0x7fffd8458698 <col:25> 'stbtt_vertex *' lvalue ParmVar 0x7fffd8455da8 'verts' 'stbtt_vertex *'
|   |     | | |         `-BinaryOperator 0x7fffd8458720 <col:31, col:33> 'int' '-'
|   |     | | |           |-ImplicitCastExpr 0x7fffd8458708 <col:31> 'int' <LValueToRValue>
|   |     | | |           | `-DeclRefExpr 0x7fffd84586c0 <col:31> 'int' lvalue Var 0x7fffd8455fd0 'i' 'int'
|   |     | | |           `-IntegerLiteral 0x7fffd84586e8 <col:33> 'int' 1
|   |     | | `-VarDecl 0x7fffd8458848 <col:10, col:62> col:40 used y0 'int' cinit
|   |     | |   `-CStyleCastExpr 0x7fffd8458a00 <col:45, col:62> 'int' <IntegralCast>
|   |     | |     `-ImplicitCastExpr 0x7fffd84589e8 <col:51, col:62> 'short' <LValueToRValue>
|   |     | |       `-MemberExpr 0x7fffd8458998 <col:51, col:62> 'short' lvalue .y 0x7fffd8351838
|   |     | |         `-ArraySubscriptExpr 0x7fffd8458970 <col:51, col:60> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |     | |           |-ImplicitCastExpr 0x7fffd8458958 <col:51> 'stbtt_vertex *' <LValueToRValue>
|   |     | |           | `-DeclRefExpr 0x7fffd84588a8 <col:51> 'stbtt_vertex *' lvalue ParmVar 0x7fffd8455da8 'verts' 'stbtt_vertex *'
|   |     | |           `-BinaryOperator 0x7fffd8458930 <col:57, col:59> 'int' '-'
|   |     | |             |-ImplicitCastExpr 0x7fffd8458918 <col:57> 'int' <LValueToRValue>
|   |     | |             | `-DeclRefExpr 0x7fffd84588d0 <col:57> 'int' lvalue Var 0x7fffd8455fd0 'i' 'int'
|   |     | |             `-IntegerLiteral 0x7fffd84588f8 <col:59> 'int' 1
|   |     | |-DeclStmt 0x7fffd8458dd0 <line:4441:10, col:64>
|   |     | | |-VarDecl 0x7fffd8458a70 <col:10, col:36> col:14 used x1 'int' cinit
|   |     | | | `-CStyleCastExpr 0x7fffd8458be0 <col:19, col:36> 'int' <IntegralCast>
|   |     | | |   `-ImplicitCastExpr 0x7fffd8458bc8 <col:25, col:36> 'short' <LValueToRValue>
|   |     | | |     `-MemberExpr 0x7fffd8458b78 <col:25, col:36> 'short' lvalue .cx 0x7fffd8351898
|   |     | | |       `-ArraySubscriptExpr 0x7fffd8458b50 <col:25, col:34> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |     | | |         |-ImplicitCastExpr 0x7fffd8458b20 <col:25> 'stbtt_vertex *' <LValueToRValue>
|   |     | | |         | `-DeclRefExpr 0x7fffd8458ad0 <col:25> 'stbtt_vertex *' lvalue ParmVar 0x7fffd8455da8 'verts' 'stbtt_vertex *'
|   |     | | |         `-ImplicitCastExpr 0x7fffd8458b38 <col:31> 'int' <LValueToRValue>
|   |     | | |           `-DeclRefExpr 0x7fffd8458af8 <col:31> 'int' lvalue Var 0x7fffd8455fd0 'i' 'int'
|   |     | | `-VarDecl 0x7fffd8458c20 <col:10, col:62> col:40 used y1 'int' cinit
|   |     | |   `-CStyleCastExpr 0x7fffd8458d90 <col:45, col:62> 'int' <IntegralCast>
|   |     | |     `-ImplicitCastExpr 0x7fffd8458d78 <col:51, col:62> 'short' <LValueToRValue>
|   |     | |       `-MemberExpr 0x7fffd8458d28 <col:51, col:62> 'short' lvalue .cy 0x7fffd83518f8
|   |     | |         `-ArraySubscriptExpr 0x7fffd8458d00 <col:51, col:60> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |     | |           |-ImplicitCastExpr 0x7fffd8458cd0 <col:51> 'stbtt_vertex *' <LValueToRValue>
|   |     | |           | `-DeclRefExpr 0x7fffd8458c80 <col:51> 'stbtt_vertex *' lvalue ParmVar 0x7fffd8455da8 'verts' 'stbtt_vertex *'
|   |     | |           `-ImplicitCastExpr 0x7fffd8458ce8 <col:57> 'int' <LValueToRValue>
|   |     | |             `-DeclRefExpr 0x7fffd8458ca8 <col:57> 'int' lvalue Var 0x7fffd8455fd0 'i' 'int'
|   |     | |-DeclStmt 0x7fffd8459160 <line:4442:10, col:64>
|   |     | | |-VarDecl 0x7fffd8458e00 <col:10, col:36> col:14 used x2 'int' cinit
|   |     | | | `-CStyleCastExpr 0x7fffd8458f70 <col:19, col:36> 'int' <IntegralCast>
|   |     | | |   `-ImplicitCastExpr 0x7fffd8458f58 <col:25, col:36> 'short' <LValueToRValue>
|   |     | | |     `-MemberExpr 0x7fffd8458f08 <col:25, col:36> 'short' lvalue .x 0x7fffd83517d8
|   |     | | |       `-ArraySubscriptExpr 0x7fffd8458ee0 <col:25, col:34> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |     | | |         |-ImplicitCastExpr 0x7fffd8458eb0 <col:25> 'stbtt_vertex *' <LValueToRValue>
|   |     | | |         | `-DeclRefExpr 0x7fffd8458e60 <col:25> 'stbtt_vertex *' lvalue ParmVar 0x7fffd8455da8 'verts' 'stbtt_vertex *'
|   |     | | |         `-ImplicitCastExpr 0x7fffd8458ec8 <col:31> 'int' <LValueToRValue>
|   |     | | |           `-DeclRefExpr 0x7fffd8458e88 <col:31> 'int' lvalue Var 0x7fffd8455fd0 'i' 'int'
|   |     | | `-VarDecl 0x7fffd8458fb0 <col:10, col:62> col:40 used y2 'int' cinit
|   |     | |   `-CStyleCastExpr 0x7fffd8459120 <col:45, col:62> 'int' <IntegralCast>
|   |     | |     `-ImplicitCastExpr 0x7fffd8459108 <col:51, col:62> 'short' <LValueToRValue>
|   |     | |       `-MemberExpr 0x7fffd84590b8 <col:51, col:62> 'short' lvalue .y 0x7fffd8351838
|   |     | |         `-ArraySubscriptExpr 0x7fffd8459090 <col:51, col:60> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |     | |           |-ImplicitCastExpr 0x7fffd8459060 <col:51> 'stbtt_vertex *' <LValueToRValue>
|   |     | |           | `-DeclRefExpr 0x7fffd8459010 <col:51> 'stbtt_vertex *' lvalue ParmVar 0x7fffd8455da8 'verts' 'stbtt_vertex *'
|   |     | |           `-ImplicitCastExpr 0x7fffd8459078 <col:57> 'int' <LValueToRValue>
|   |     | |             `-DeclRefExpr 0x7fffd8459038 <col:57> 'int' lvalue Var 0x7fffd8455fd0 'i' 'int'
|   |     | |-DeclStmt 0x7fffd8459d50 <line:4443:10, col:86>
|   |     | | |-VarDecl 0x7fffd8459190 <col:10, line:4338:47> line:4443:14 used ax 'int' cinit
|   |     | | | `-ParenExpr 0x7fffd8459738 <line:4338:25, col:47> 'int'
|   |     | | |   `-ConditionalOperator 0x7fffd8459708 <col:26, col:46> 'int'
|   |     | | |     |-BinaryOperator 0x7fffd8459468 <col:26, col:34> 'int' '<'
|   |     | | |     | |-ImplicitCastExpr 0x7fffd8459450 <col:26, col:28> 'int' <LValueToRValue>
|   |     | | |     | | `-ParenExpr 0x7fffd8459218 <col:26, col:28> 'int' lvalue
|   |     | | |     | |   `-DeclRefExpr 0x7fffd84591f0 <line:4443:29> 'int' lvalue Var 0x7fffd8458638 'x0' 'int'
|   |     | | |     | `-ParenExpr 0x7fffd8459430 <line:4338:32, col:34> 'int'
|   |     | | |     |   `-ParenExpr 0x7fffd8459410 <col:25, col:47> 'int'
|   |     | | |     |     `-ConditionalOperator 0x7fffd84593e0 <col:26, col:46> 'int'
|   |     | | |     |       |-BinaryOperator 0x7fffd84592f8 <col:26, col:34> 'int' '<'
|   |     | | |     |       | |-ImplicitCastExpr 0x7fffd84592c8 <col:26, col:28> 'int' <LValueToRValue>
|   |     | | |     |       | | `-ParenExpr 0x7fffd8459260 <col:26, col:28> 'int' lvalue
|   |     | | |     |       | |   `-DeclRefExpr 0x7fffd8459238 <line:4443:42> 'int' lvalue Var 0x7fffd8458a70 'x1' 'int'
|   |     | | |     |       | `-ImplicitCastExpr 0x7fffd84592e0 <line:4338:32, col:34> 'int' <LValueToRValue>
|   |     | | |     |       |   `-ParenExpr 0x7fffd84592a8 <col:32, col:34> 'int' lvalue
|   |     | | |     |       |     `-DeclRefExpr 0x7fffd8459280 <line:4443:45> 'int' lvalue Var 0x7fffd8458e00 'x2' 'int'
|   |     | | |     |       |-ImplicitCastExpr 0x7fffd84593b0 <line:4338:38, col:40> 'int' <LValueToRValue>
|   |     | | |     |       | `-ParenExpr 0x7fffd8459348 <col:38, col:40> 'int' lvalue
|   |     | | |     |       |   `-DeclRefExpr 0x7fffd8459320 <line:4443:42> 'int' lvalue Var 0x7fffd8458a70 'x1' 'int'
|   |     | | |     |       `-ImplicitCastExpr 0x7fffd84593c8 <line:4338:44, col:46> 'int' <LValueToRValue>
|   |     | | |     |         `-ParenExpr 0x7fffd8459390 <col:44, col:46> 'int' lvalue
|   |     | | |     |           `-DeclRefExpr 0x7fffd8459368 <line:4443:45> 'int' lvalue Var 0x7fffd8458e00 'x2' 'int'
|   |     | | |     |-ImplicitCastExpr 0x7fffd84596f0 <line:4338:38, col:40> 'int' <LValueToRValue>
|   |     | | |     | `-ParenExpr 0x7fffd84594b8 <col:38, col:40> 'int' lvalue
|   |     | | |     |   `-DeclRefExpr 0x7fffd8459490 <line:4443:29> 'int' lvalue Var 0x7fffd8458638 'x0' 'int'
|   |     | | |     `-ParenExpr 0x7fffd84596d0 <line:4338:44, col:46> 'int'
|   |     | | |       `-ParenExpr 0x7fffd84596b0 <col:25, col:47> 'int'
|   |     | | |         `-ConditionalOperator 0x7fffd8459680 <col:26, col:46> 'int'
|   |     | | |           |-BinaryOperator 0x7fffd8459598 <col:26, col:34> 'int' '<'
|   |     | | |           | |-ImplicitCastExpr 0x7fffd8459568 <col:26, col:28> 'int' <LValueToRValue>
|   |     | | |           | | `-ParenExpr 0x7fffd8459500 <col:26, col:28> 'int' lvalue
|   |     | | |           | |   `-DeclRefExpr 0x7fffd84594d8 <line:4443:42> 'int' lvalue Var 0x7fffd8458a70 'x1' 'int'
|   |     | | |           | `-ImplicitCastExpr 0x7fffd8459580 <line:4338:32, col:34> 'int' <LValueToRValue>
|   |     | | |           |   `-ParenExpr 0x7fffd8459548 <col:32, col:34> 'int' lvalue
|   |     | | |           |     `-DeclRefExpr 0x7fffd8459520 <line:4443:45> 'int' lvalue Var 0x7fffd8458e00 'x2' 'int'
|   |     | | |           |-ImplicitCastExpr 0x7fffd8459650 <line:4338:38, col:40> 'int' <LValueToRValue>
|   |     | | |           | `-ParenExpr 0x7fffd84595e8 <col:38, col:40> 'int' lvalue
|   |     | | |           |   `-DeclRefExpr 0x7fffd84595c0 <line:4443:42> 'int' lvalue Var 0x7fffd8458a70 'x1' 'int'
|   |     | | |           `-ImplicitCastExpr 0x7fffd8459668 <line:4338:44, col:46> 'int' <LValueToRValue>
|   |     | | |             `-ParenExpr 0x7fffd8459630 <col:44, col:46> 'int' lvalue
|   |     | | |               `-DeclRefExpr 0x7fffd8459608 <line:4443:45> 'int' lvalue Var 0x7fffd8458e00 'x2' 'int'
|   |     | | `-VarDecl 0x7fffd8459770 <col:10, line:4338:47> line:4443:51 used ay 'int' cinit
|   |     | |   `-ParenExpr 0x7fffd8459d18 <line:4338:25, col:47> 'int'
|   |     | |     `-ConditionalOperator 0x7fffd8459ce8 <col:26, col:46> 'int'
|   |     | |       |-BinaryOperator 0x7fffd8459a48 <col:26, col:34> 'int' '<'
|   |     | |       | |-ImplicitCastExpr 0x7fffd8459a30 <col:26, col:28> 'int' <LValueToRValue>
|   |     | |       | | `-ParenExpr 0x7fffd84597f8 <col:26, col:28> 'int' lvalue
|   |     | |       | |   `-DeclRefExpr 0x7fffd84597d0 <line:4443:66> 'int' lvalue Var 0x7fffd8458848 'y0' 'int'
|   |     | |       | `-ParenExpr 0x7fffd8459a10 <line:4338:32, col:34> 'int'
|   |     | |       |   `-ParenExpr 0x7fffd84599f0 <col:25, col:47> 'int'
|   |     | |       |     `-ConditionalOperator 0x7fffd84599c0 <col:26, col:46> 'int'
|   |     | |       |       |-BinaryOperator 0x7fffd84598d8 <col:26, col:34> 'int' '<'
|   |     | |       |       | |-ImplicitCastExpr 0x7fffd84598a8 <col:26, col:28> 'int' <LValueToRValue>
|   |     | |       |       | | `-ParenExpr 0x7fffd8459840 <col:26, col:28> 'int' lvalue
|   |     | |       |       | |   `-DeclRefExpr 0x7fffd8459818 <line:4443:79> 'int' lvalue Var 0x7fffd8458c20 'y1' 'int'
|   |     | |       |       | `-ImplicitCastExpr 0x7fffd84598c0 <line:4338:32, col:34> 'int' <LValueToRValue>
|   |     | |       |       |   `-ParenExpr 0x7fffd8459888 <col:32, col:34> 'int' lvalue
|   |     | |       |       |     `-DeclRefExpr 0x7fffd8459860 <line:4443:82> 'int' lvalue Var 0x7fffd8458fb0 'y2' 'int'
|   |     | |       |       |-ImplicitCastExpr 0x7fffd8459990 <line:4338:38, col:40> 'int' <LValueToRValue>
|   |     | |       |       | `-ParenExpr 0x7fffd8459928 <col:38, col:40> 'int' lvalue
|   |     | |       |       |   `-DeclRefExpr 0x7fffd8459900 <line:4443:79> 'int' lvalue Var 0x7fffd8458c20 'y1' 'int'
|   |     | |       |       `-ImplicitCastExpr 0x7fffd84599a8 <line:4338:44, col:46> 'int' <LValueToRValue>
|   |     | |       |         `-ParenExpr 0x7fffd8459970 <col:44, col:46> 'int' lvalue
|   |     | |       |           `-DeclRefExpr 0x7fffd8459948 <line:4443:82> 'int' lvalue Var 0x7fffd8458fb0 'y2' 'int'
|   |     | |       |-ImplicitCastExpr 0x7fffd8459cd0 <line:4338:38, col:40> 'int' <LValueToRValue>
|   |     | |       | `-ParenExpr 0x7fffd8459a98 <col:38, col:40> 'int' lvalue
|   |     | |       |   `-DeclRefExpr 0x7fffd8459a70 <line:4443:66> 'int' lvalue Var 0x7fffd8458848 'y0' 'int'
|   |     | |       `-ParenExpr 0x7fffd8459cb0 <line:4338:44, col:46> 'int'
|   |     | |         `-ParenExpr 0x7fffd8459c90 <col:25, col:47> 'int'
|   |     | |           `-ConditionalOperator 0x7fffd8459c60 <col:26, col:46> 'int'
|   |     | |             |-BinaryOperator 0x7fffd8459b78 <col:26, col:34> 'int' '<'
|   |     | |             | |-ImplicitCastExpr 0x7fffd8459b48 <col:26, col:28> 'int' <LValueToRValue>
|   |     | |             | | `-ParenExpr 0x7fffd8459ae0 <col:26, col:28> 'int' lvalue
|   |     | |             | |   `-DeclRefExpr 0x7fffd8459ab8 <line:4443:79> 'int' lvalue Var 0x7fffd8458c20 'y1' 'int'
|   |     | |             | `-ImplicitCastExpr 0x7fffd8459b60 <line:4338:32, col:34> 'int' <LValueToRValue>
|   |     | |             |   `-ParenExpr 0x7fffd8459b28 <col:32, col:34> 'int' lvalue
|   |     | |             |     `-DeclRefExpr 0x7fffd8459b00 <line:4443:82> 'int' lvalue Var 0x7fffd8458fb0 'y2' 'int'
|   |     | |             |-ImplicitCastExpr 0x7fffd8459c30 <line:4338:38, col:40> 'int' <LValueToRValue>
|   |     | |             | `-ParenExpr 0x7fffd8459bc8 <col:38, col:40> 'int' lvalue
|   |     | |             |   `-DeclRefExpr 0x7fffd8459ba0 <line:4443:79> 'int' lvalue Var 0x7fffd8458c20 'y1' 'int'
|   |     | |             `-ImplicitCastExpr 0x7fffd8459c48 <line:4338:44, col:46> 'int' <LValueToRValue>
|   |     | |               `-ParenExpr 0x7fffd8459c10 <col:44, col:46> 'int' lvalue
|   |     | |                 `-DeclRefExpr 0x7fffd8459be8 <line:4443:82> 'int' lvalue Var 0x7fffd8458fb0 'y2' 'int'
|   |     | |-DeclStmt 0x7fffd845a348 <line:4444:10, col:49>
|   |     | | `-VarDecl 0x7fffd8459d80 <col:10, line:4339:47> line:4444:14 used by 'int' cinit
|   |     | |   `-ParenExpr 0x7fffd845a328 <line:4339:25, col:47> 'int'
|   |     | |     `-ConditionalOperator 0x7fffd845a2f8 <col:26, col:46> 'int'
|   |     | |       |-BinaryOperator 0x7fffd845a058 <col:26, col:34> 'int' '<'
|   |     | |       | |-ImplicitCastExpr 0x7fffd845a040 <col:26, col:28> 'int' <LValueToRValue>
|   |     | |       | | `-ParenExpr 0x7fffd8459e08 <col:26, col:28> 'int' lvalue
|   |     | |       | |   `-DeclRefExpr 0x7fffd8459de0 <line:4444:29> 'int' lvalue Var 0x7fffd8458848 'y0' 'int'
|   |     | |       | `-ParenExpr 0x7fffd845a020 <line:4339:32, col:34> 'int'
|   |     | |       |   `-ParenExpr 0x7fffd845a000 <col:25, col:47> 'int'
|   |     | |       |     `-ConditionalOperator 0x7fffd8459fd0 <col:26, col:46> 'int'
|   |     | |       |       |-BinaryOperator 0x7fffd8459ee8 <col:26, col:34> 'int' '<'
|   |     | |       |       | |-ImplicitCastExpr 0x7fffd8459eb8 <col:26, col:28> 'int' <LValueToRValue>
|   |     | |       |       | | `-ParenExpr 0x7fffd8459e50 <col:26, col:28> 'int' lvalue
|   |     | |       |       | |   `-DeclRefExpr 0x7fffd8459e28 <line:4444:42> 'int' lvalue Var 0x7fffd8458c20 'y1' 'int'
|   |     | |       |       | `-ImplicitCastExpr 0x7fffd8459ed0 <line:4339:32, col:34> 'int' <LValueToRValue>
|   |     | |       |       |   `-ParenExpr 0x7fffd8459e98 <col:32, col:34> 'int' lvalue
|   |     | |       |       |     `-DeclRefExpr 0x7fffd8459e70 <line:4444:45> 'int' lvalue Var 0x7fffd8458fb0 'y2' 'int'
|   |     | |       |       |-ImplicitCastExpr 0x7fffd8459fa0 <line:4339:38, col:40> 'int' <LValueToRValue>
|   |     | |       |       | `-ParenExpr 0x7fffd8459f38 <col:38, col:40> 'int' lvalue
|   |     | |       |       |   `-DeclRefExpr 0x7fffd8459f10 <line:4444:45> 'int' lvalue Var 0x7fffd8458fb0 'y2' 'int'
|   |     | |       |       `-ImplicitCastExpr 0x7fffd8459fb8 <line:4339:44, col:46> 'int' <LValueToRValue>
|   |     | |       |         `-ParenExpr 0x7fffd8459f80 <col:44, col:46> 'int' lvalue
|   |     | |       |           `-DeclRefExpr 0x7fffd8459f58 <line:4444:42> 'int' lvalue Var 0x7fffd8458c20 'y1' 'int'
|   |     | |       |-ParenExpr 0x7fffd845a278 <line:4339:38, col:40> 'int'
|   |     | |       | `-ParenExpr 0x7fffd845a258 <col:25, col:47> 'int'
|   |     | |       |   `-ConditionalOperator 0x7fffd845a228 <col:26, col:46> 'int'
|   |     | |       |     |-BinaryOperator 0x7fffd845a140 <col:26, col:34> 'int' '<'
|   |     | |       |     | |-ImplicitCastExpr 0x7fffd845a110 <col:26, col:28> 'int' <LValueToRValue>
|   |     | |       |     | | `-ParenExpr 0x7fffd845a0a8 <col:26, col:28> 'int' lvalue
|   |     | |       |     | |   `-DeclRefExpr 0x7fffd845a080 <line:4444:42> 'int' lvalue Var 0x7fffd8458c20 'y1' 'int'
|   |     | |       |     | `-ImplicitCastExpr 0x7fffd845a128 <line:4339:32, col:34> 'int' <LValueToRValue>
|   |     | |       |     |   `-ParenExpr 0x7fffd845a0f0 <col:32, col:34> 'int' lvalue
|   |     | |       |     |     `-DeclRefExpr 0x7fffd845a0c8 <line:4444:45> 'int' lvalue Var 0x7fffd8458fb0 'y2' 'int'
|   |     | |       |     |-ImplicitCastExpr 0x7fffd845a1f8 <line:4339:38, col:40> 'int' <LValueToRValue>
|   |     | |       |     | `-ParenExpr 0x7fffd845a190 <col:38, col:40> 'int' lvalue
|   |     | |       |     |   `-DeclRefExpr 0x7fffd845a168 <line:4444:45> 'int' lvalue Var 0x7fffd8458fb0 'y2' 'int'
|   |     | |       |     `-ImplicitCastExpr 0x7fffd845a210 <line:4339:44, col:46> 'int' <LValueToRValue>
|   |     | |       |       `-ParenExpr 0x7fffd845a1d8 <col:44, col:46> 'int' lvalue
|   |     | |       |         `-DeclRefExpr 0x7fffd845a1b0 <line:4444:42> 'int' lvalue Var 0x7fffd8458c20 'y1' 'int'
|   |     | |       `-ImplicitCastExpr 0x7fffd845a2e0 <line:4339:44, col:46> 'int' <LValueToRValue>
|   |     | |         `-ParenExpr 0x7fffd845a2c0 <col:44, col:46> 'int' lvalue
|   |     | |           `-DeclRefExpr 0x7fffd845a298 <line:4444:29> 'int' lvalue Var 0x7fffd8458848 'y0' 'int'
|   |     | `-IfStmt 0x7fffd845d588 <line:4445:10, line:4473:10>
|   |     |   |-<<<NULL>>>
|   |     |   |-<<<NULL>>>
|   |     |   |-BinaryOperator 0x7fffd845a5c8 <line:4445:14, col:38> 'int' '&&'
|   |     |   | |-BinaryOperator 0x7fffd845a4e0 <col:14, col:28> 'int' '&&'
|   |     |   | | |-BinaryOperator 0x7fffd845a3f8 <col:14, col:18> 'int' '>'
|   |     |   | | | |-ImplicitCastExpr 0x7fffd845a3b0 <col:14> 'float' <LValueToRValue>
|   |     |   | | | | `-DeclRefExpr 0x7fffd845a360 <col:14> 'float' lvalue ParmVar 0x7fffd8455cc0 'y' 'float'
|   |     |   | | | `-ImplicitCastExpr 0x7fffd845a3e0 <col:18> 'float' <IntegralToFloating>
|   |     |   | | |   `-ImplicitCastExpr 0x7fffd845a3c8 <col:18> 'int' <LValueToRValue>
|   |     |   | | |     `-DeclRefExpr 0x7fffd845a388 <col:18> 'int' lvalue Var 0x7fffd8459770 'ay' 'int'
|   |     |   | | `-BinaryOperator 0x7fffd845a4b8 <col:24, col:28> 'int' '<'
|   |     |   | |   |-ImplicitCastExpr 0x7fffd845a470 <col:24> 'float' <LValueToRValue>
|   |     |   | |   | `-DeclRefExpr 0x7fffd845a420 <col:24> 'float' lvalue ParmVar 0x7fffd8455cc0 'y' 'float'
|   |     |   | |   `-ImplicitCastExpr 0x7fffd845a4a0 <col:28> 'float' <IntegralToFloating>
|   |     |   | |     `-ImplicitCastExpr 0x7fffd845a488 <col:28> 'int' <LValueToRValue>
|   |     |   | |       `-DeclRefExpr 0x7fffd845a448 <col:28> 'int' lvalue Var 0x7fffd8459d80 'by' 'int'
|   |     |   | `-BinaryOperator 0x7fffd845a5a0 <col:34, col:38> 'int' '>'
|   |     |   |   |-ImplicitCastExpr 0x7fffd845a558 <col:34> 'float' <LValueToRValue>
|   |     |   |   | `-DeclRefExpr 0x7fffd845a508 <col:34> 'float' lvalue ParmVar 0x7fffd8455c48 'x' 'float'
|   |     |   |   `-ImplicitCastExpr 0x7fffd845a588 <col:38> 'float' <IntegralToFloating>
|   |     |   |     `-ImplicitCastExpr 0x7fffd845a570 <col:38> 'int' <LValueToRValue>
|   |     |   |       `-DeclRefExpr 0x7fffd845a530 <col:38> 'int' lvalue Var 0x7fffd8459190 'ax' 'int'
|   |     |   |-CompoundStmt 0x7fffd845d530 <col:42, line:4473:10>
|   |     |   | |-DeclStmt 0x7fffd845a808 <line:4446:13, col:36>
|   |     |   | | |-VarDecl 0x7fffd845a638 <col:13, col:23> col:19 used q0 'float [2]'
|   |     |   | | |-VarDecl 0x7fffd845a6e0 <col:13, col:29> col:25 used q1 'float [2]'
|   |     |   | | `-VarDecl 0x7fffd845a788 <col:13, col:35> col:31 used q2 'float [2]'
|   |     |   | |-DeclStmt 0x7fffd845a918 <line:4447:13, col:29>
|   |     |   | | `-VarDecl 0x7fffd845a8b8 <col:13, col:28> col:19 used hits 'float [2][2]'
|   |     |   | |-BinaryOperator 0x7fffd845aa38 <line:4448:13, col:28> 'float' '='
|   |     |   | | |-ArraySubscriptExpr 0x7fffd845a990 <col:13, col:17> 'float' lvalue
|   |     |   | | | |-ImplicitCastExpr 0x7fffd845a978 <col:13> 'float *' <ArrayToPointerDecay>
|   |     |   | | | | `-DeclRefExpr 0x7fffd845a930 <col:13> 'float [2]' lvalue Var 0x7fffd845a638 'q0' 'float [2]'
|   |     |   | | | `-IntegerLiteral 0x7fffd845a958 <col:16> 'int' 0
|   |     |   | | `-CStyleCastExpr 0x7fffd845aa10 <col:21, col:28> 'float' <IntegralToFloating>
|   |     |   | |   `-ImplicitCastExpr 0x7fffd845a9f8 <col:28> 'int' <LValueToRValue>
|   |     |   | |     `-DeclRefExpr 0x7fffd845a9b8 <col:28> 'int' lvalue Var 0x7fffd8458638 'x0' 'int'
|   |     |   | |-BinaryOperator 0x7fffd845ab68 <line:4449:13, col:28> 'float' '='
|   |     |   | | |-ArraySubscriptExpr 0x7fffd845aac0 <col:13, col:17> 'float' lvalue
|   |     |   | | | |-ImplicitCastExpr 0x7fffd845aaa8 <col:13> 'float *' <ArrayToPointerDecay>
|   |     |   | | | | `-DeclRefExpr 0x7fffd845aa60 <col:13> 'float [2]' lvalue Var 0x7fffd845a638 'q0' 'float [2]'
|   |     |   | | | `-IntegerLiteral 0x7fffd845aa88 <col:16> 'int' 1
|   |     |   | | `-CStyleCastExpr 0x7fffd845ab40 <col:21, col:28> 'float' <IntegralToFloating>
|   |     |   | |   `-ImplicitCastExpr 0x7fffd845ab28 <col:28> 'int' <LValueToRValue>
|   |     |   | |     `-DeclRefExpr 0x7fffd845aae8 <col:28> 'int' lvalue Var 0x7fffd8458848 'y0' 'int'
|   |     |   | |-BinaryOperator 0x7fffd845ac98 <line:4450:13, col:28> 'float' '='
|   |     |   | | |-ArraySubscriptExpr 0x7fffd845abf0 <col:13, col:17> 'float' lvalue
|   |     |   | | | |-ImplicitCastExpr 0x7fffd845abd8 <col:13> 'float *' <ArrayToPointerDecay>
|   |     |   | | | | `-DeclRefExpr 0x7fffd845ab90 <col:13> 'float [2]' lvalue Var 0x7fffd845a6e0 'q1' 'float [2]'
|   |     |   | | | `-IntegerLiteral 0x7fffd845abb8 <col:16> 'int' 0
|   |     |   | | `-CStyleCastExpr 0x7fffd845ac70 <col:21, col:28> 'float' <IntegralToFloating>
|   |     |   | |   `-ImplicitCastExpr 0x7fffd845ac58 <col:28> 'int' <LValueToRValue>
|   |     |   | |     `-DeclRefExpr 0x7fffd845ac18 <col:28> 'int' lvalue Var 0x7fffd8458a70 'x1' 'int'
|   |     |   | |-BinaryOperator 0x7fffd845adc8 <line:4451:13, col:28> 'float' '='
|   |     |   | | |-ArraySubscriptExpr 0x7fffd845ad20 <col:13, col:17> 'float' lvalue
|   |     |   | | | |-ImplicitCastExpr 0x7fffd845ad08 <col:13> 'float *' <ArrayToPointerDecay>
|   |     |   | | | | `-DeclRefExpr 0x7fffd845acc0 <col:13> 'float [2]' lvalue Var 0x7fffd845a6e0 'q1' 'float [2]'
|   |     |   | | | `-IntegerLiteral 0x7fffd845ace8 <col:16> 'int' 1
|   |     |   | | `-CStyleCastExpr 0x7fffd845ada0 <col:21, col:28> 'float' <IntegralToFloating>
|   |     |   | |   `-ImplicitCastExpr 0x7fffd845ad88 <col:28> 'int' <LValueToRValue>
|   |     |   | |     `-DeclRefExpr 0x7fffd845ad48 <col:28> 'int' lvalue Var 0x7fffd8458c20 'y1' 'int'
|   |     |   | |-BinaryOperator 0x7fffd845aef8 <line:4452:13, col:28> 'float' '='
|   |     |   | | |-ArraySubscriptExpr 0x7fffd845ae50 <col:13, col:17> 'float' lvalue
|   |     |   | | | |-ImplicitCastExpr 0x7fffd845ae38 <col:13> 'float *' <ArrayToPointerDecay>
|   |     |   | | | | `-DeclRefExpr 0x7fffd845adf0 <col:13> 'float [2]' lvalue Var 0x7fffd845a788 'q2' 'float [2]'
|   |     |   | | | `-IntegerLiteral 0x7fffd845ae18 <col:16> 'int' 0
|   |     |   | | `-CStyleCastExpr 0x7fffd845aed0 <col:21, col:28> 'float' <IntegralToFloating>
|   |     |   | |   `-ImplicitCastExpr 0x7fffd845aeb8 <col:28> 'int' <LValueToRValue>
|   |     |   | |     `-DeclRefExpr 0x7fffd845ae78 <col:28> 'int' lvalue Var 0x7fffd8458e00 'x2' 'int'
|   |     |   | |-BinaryOperator 0x7fffd845b028 <line:4453:13, col:28> 'float' '='
|   |     |   | | |-ArraySubscriptExpr 0x7fffd845af80 <col:13, col:17> 'float' lvalue
|   |     |   | | | |-ImplicitCastExpr 0x7fffd845af68 <col:13> 'float *' <ArrayToPointerDecay>
|   |     |   | | | | `-DeclRefExpr 0x7fffd845af20 <col:13> 'float [2]' lvalue Var 0x7fffd845a788 'q2' 'float [2]'
|   |     |   | | | `-IntegerLiteral 0x7fffd845af48 <col:16> 'int' 1
|   |     |   | | `-CStyleCastExpr 0x7fffd845b000 <col:21, col:28> 'float' <IntegralToFloating>
|   |     |   | |   `-ImplicitCastExpr 0x7fffd845afe8 <col:28> 'int' <LValueToRValue>
|   |     |   | |     `-DeclRefExpr 0x7fffd845afa8 <col:28> 'int' lvalue Var 0x7fffd8458fb0 'y2' 'int'
|   |     |   | `-IfStmt 0x7fffd845d4f8 <line:4454:13, line:4472:13>
|   |     |   |   |-<<<NULL>>>
|   |     |   |   |-<<<NULL>>>
|   |     |   |   |-BinaryOperator 0x7fffd845b270 <line:4454:17, col:44> 'int' '||'
|   |     |   |   | |-CallExpr 0x7fffd845b110 <col:17, col:28> 'int'
|   |     |   |   | | |-ImplicitCastExpr 0x7fffd845b0f8 <col:17> 'int (*)(float *, float *)' <FunctionToPointerDecay>
|   |     |   |   | | | `-DeclRefExpr 0x7fffd845b050 <col:17> 'int (float *, float *)' Function 0x7fffd8455838 'equal' 'int (float *, float *)'
|   |     |   |   | | |-ImplicitCastExpr 0x7fffd845b148 <col:23> 'float *' <ArrayToPointerDecay>
|   |     |   |   | | | `-DeclRefExpr 0x7fffd845b078 <col:23> 'float [2]' lvalue Var 0x7fffd845a638 'q0' 'float [2]'
|   |     |   |   | | `-ImplicitCastExpr 0x7fffd845b160 <col:26> 'float *' <ArrayToPointerDecay>
|   |     |   |   | |   `-DeclRefExpr 0x7fffd845b0a0 <col:26> 'float [2]' lvalue Var 0x7fffd845a6e0 'q1' 'float [2]'
|   |     |   |   | `-CallExpr 0x7fffd845b208 <col:33, col:44> 'int'
|   |     |   |   |   |-ImplicitCastExpr 0x7fffd845b1f0 <col:33> 'int (*)(float *, float *)' <FunctionToPointerDecay>
|   |     |   |   |   | `-DeclRefExpr 0x7fffd845b178 <col:33> 'int (float *, float *)' Function 0x7fffd8455838 'equal' 'int (float *, float *)'
|   |     |   |   |   |-ImplicitCastExpr 0x7fffd845b240 <col:39> 'float *' <ArrayToPointerDecay>
|   |     |   |   |   | `-DeclRefExpr 0x7fffd845b1a0 <col:39> 'float [2]' lvalue Var 0x7fffd845a6e0 'q1' 'float [2]'
|   |     |   |   |   `-ImplicitCastExpr 0x7fffd845b258 <col:42> 'float *' <ArrayToPointerDecay>
|   |     |   |   |     `-DeclRefExpr 0x7fffd845b1c8 <col:42> 'float [2]' lvalue Var 0x7fffd845a788 'q2' 'float [2]'
|   |     |   |   |-CompoundStmt 0x7fffd845c7f0 <col:47, line:4464:13>
|   |     |   |   | |-BinaryOperator 0x7fffd845b440 <line:4455:16, col:37> 'int' '='
|   |     |   |   | | |-DeclRefExpr 0x7fffd845b298 <col:16> 'int' lvalue Var 0x7fffd8458638 'x0' 'int'
|   |     |   |   | | `-CStyleCastExpr 0x7fffd845b418 <col:21, col:37> 'int' <IntegralCast>
|   |     |   |   | |   `-ImplicitCastExpr 0x7fffd845b400 <col:26, col:37> 'short' <LValueToRValue>
|   |     |   |   | |     `-MemberExpr 0x7fffd845b3b0 <col:26, col:37> 'short' lvalue .x 0x7fffd83517d8
|   |     |   |   | |       `-ArraySubscriptExpr 0x7fffd845b388 <col:26, col:35> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |     |   |   | |         |-ImplicitCastExpr 0x7fffd845b370 <col:26> 'stbtt_vertex *' <LValueToRValue>
|   |     |   |   | |         | `-DeclRefExpr 0x7fffd845b2c0 <col:26> 'stbtt_vertex *' lvalue ParmVar 0x7fffd8455da8 'verts' 'stbtt_vertex *'
|   |     |   |   | |         `-BinaryOperator 0x7fffd845b348 <col:32, col:34> 'int' '-'
|   |     |   |   | |           |-ImplicitCastExpr 0x7fffd845b330 <col:32> 'int' <LValueToRValue>
|   |     |   |   | |           | `-DeclRefExpr 0x7fffd845b2e8 <col:32> 'int' lvalue Var 0x7fffd8455fd0 'i' 'int'
|   |     |   |   | |           `-IntegerLiteral 0x7fffd845b310 <col:34> 'int' 1
|   |     |   |   | |-BinaryOperator 0x7fffd845b610 <line:4456:16, col:37> 'int' '='
|   |     |   |   | | |-DeclRefExpr 0x7fffd845b468 <col:16> 'int' lvalue Var 0x7fffd8458848 'y0' 'int'
|   |     |   |   | | `-CStyleCastExpr 0x7fffd845b5e8 <col:21, col:37> 'int' <IntegralCast>
|   |     |   |   | |   `-ImplicitCastExpr 0x7fffd845b5d0 <col:26, col:37> 'short' <LValueToRValue>
|   |     |   |   | |     `-MemberExpr 0x7fffd845b580 <col:26, col:37> 'short' lvalue .y 0x7fffd8351838
|   |     |   |   | |       `-ArraySubscriptExpr 0x7fffd845b558 <col:26, col:35> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |     |   |   | |         |-ImplicitCastExpr 0x7fffd845b540 <col:26> 'stbtt_vertex *' <LValueToRValue>
|   |     |   |   | |         | `-DeclRefExpr 0x7fffd845b490 <col:26> 'stbtt_vertex *' lvalue ParmVar 0x7fffd8455da8 'verts' 'stbtt_vertex *'
|   |     |   |   | |         `-BinaryOperator 0x7fffd845b518 <col:32, col:34> 'int' '-'
|   |     |   |   | |           |-ImplicitCastExpr 0x7fffd845b500 <col:32> 'int' <LValueToRValue>
|   |     |   |   | |           | `-DeclRefExpr 0x7fffd845b4b8 <col:32> 'int' lvalue Var 0x7fffd8455fd0 'i' 'int'
|   |     |   |   | |           `-IntegerLiteral 0x7fffd845b4e0 <col:34> 'int' 1
|   |     |   |   | |-BinaryOperator 0x7fffd845b798 <line:4457:16, col:37> 'int' '='
|   |     |   |   | | |-DeclRefExpr 0x7fffd845b638 <col:16> 'int' lvalue Var 0x7fffd8458a70 'x1' 'int'
|   |     |   |   | | `-CStyleCastExpr 0x7fffd845b770 <col:21, col:37> 'int' <IntegralCast>
|   |     |   |   | |   `-ImplicitCastExpr 0x7fffd845b758 <col:26, col:37> 'short' <LValueToRValue>
|   |     |   |   | |     `-MemberExpr 0x7fffd845b708 <col:26, col:37> 'short' lvalue .x 0x7fffd83517d8
|   |     |   |   | |       `-ArraySubscriptExpr 0x7fffd845b6e0 <col:26, col:35> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |     |   |   | |         |-ImplicitCastExpr 0x7fffd845b6b0 <col:26> 'stbtt_vertex *' <LValueToRValue>
|   |     |   |   | |         | `-DeclRefExpr 0x7fffd845b660 <col:26> 'stbtt_vertex *' lvalue ParmVar 0x7fffd8455da8 'verts' 'stbtt_vertex *'
|   |     |   |   | |         `-ImplicitCastExpr 0x7fffd845b6c8 <col:32> 'int' <LValueToRValue>
|   |     |   |   | |           `-DeclRefExpr 0x7fffd845b688 <col:32> 'int' lvalue Var 0x7fffd8455fd0 'i' 'int'
|   |     |   |   | |-BinaryOperator 0x7fffd845b920 <line:4458:16, col:37> 'int' '='
|   |     |   |   | | |-DeclRefExpr 0x7fffd845b7c0 <col:16> 'int' lvalue Var 0x7fffd8458c20 'y1' 'int'
|   |     |   |   | | `-CStyleCastExpr 0x7fffd845b8f8 <col:21, col:37> 'int' <IntegralCast>
|   |     |   |   | |   `-ImplicitCastExpr 0x7fffd845b8e0 <col:26, col:37> 'short' <LValueToRValue>
|   |     |   |   | |     `-MemberExpr 0x7fffd845b890 <col:26, col:37> 'short' lvalue .y 0x7fffd8351838
|   |     |   |   | |       `-ArraySubscriptExpr 0x7fffd845b868 <col:26, col:35> 'stbtt_vertex':'stbtt_vertex' lvalue
|   |     |   |   | |         |-ImplicitCastExpr 0x7fffd845b838 <col:26> 'stbtt_vertex *' <LValueToRValue>
|   |     |   |   | |         | `-DeclRefExpr 0x7fffd845b7e8 <col:26> 'stbtt_vertex *' lvalue ParmVar 0x7fffd8455da8 'verts' 'stbtt_vertex *'
|   |     |   |   | |         `-ImplicitCastExpr 0x7fffd845b850 <col:32> 'int' <LValueToRValue>
|   |     |   |   | |           `-DeclRefExpr 0x7fffd845b810 <col:32> 'int' lvalue Var 0x7fffd8455fd0 'i' 'int'
|   |     |   |   | `-IfStmt 0x7fffd845c7b8 <line:4459:16, line:4463:16>
|   |     |   |   |   |-<<<NULL>>>
|   |     |   |   |   |-<<<NULL>>>
|   |     |   |   |   |-BinaryOperator 0x7fffd845c0d8 <line:4459:20, line:4338:47> 'int' '&&'
|   |     |   |   |   | |-BinaryOperator 0x7fffd845be38 <line:4459:20, line:4339:47> 'int' '&&'
|   |     |   |   |   | | |-BinaryOperator 0x7fffd845bb98 <line:4459:20, line:4338:47> 'int' '>'
|   |     |   |   |   | | | |-ImplicitCastExpr 0x7fffd845bb68 <line:4459:20> 'float' <LValueToRValue>
|   |     |   |   |   | | | | `-DeclRefExpr 0x7fffd845b948 <col:20> 'float' lvalue ParmVar 0x7fffd8455cc0 'y' 'float'
|   |     |   |   |   | | | `-ImplicitCastExpr 0x7fffd845bb80 <line:4338:25, col:47> 'float' <IntegralToFloating>
|   |     |   |   |   | | |   `-ParenExpr 0x7fffd845bb48 <col:25, col:47> 'int'
|   |     |   |   |   | | |     `-ConditionalOperator 0x7fffd845bb18 <col:26, col:46> 'int'
|   |     |   |   |   | | |       |-BinaryOperator 0x7fffd845ba30 <col:26, col:34> 'int' '<'
|   |     |   |   |   | | |       | |-ImplicitCastExpr 0x7fffd845ba00 <col:26, col:28> 'int' <LValueToRValue>
|   |     |   |   |   | | |       | | `-ParenExpr 0x7fffd845b998 <col:26, col:28> 'int' lvalue
|   |     |   |   |   | | |       | |   `-DeclRefExpr 0x7fffd845b970 <line:4459:34> 'int' lvalue Var 0x7fffd8458848 'y0' 'int'
|   |     |   |   |   | | |       | `-ImplicitCastExpr 0x7fffd845ba18 <line:4338:32, col:34> 'int' <LValueToRValue>
|   |     |   |   |   | | |       |   `-ParenExpr 0x7fffd845b9e0 <col:32, col:34> 'int' lvalue
|   |     |   |   |   | | |       |     `-DeclRefExpr 0x7fffd845b9b8 <line:4459:37> 'int' lvalue Var 0x7fffd8458c20 'y1' 'int'
|   |     |   |   |   | | |       |-ImplicitCastExpr 0x7fffd845bae8 <line:4338:38, col:40> 'int' <LValueToRValue>
|   |     |   |   |   | | |       | `-ParenExpr 0x7fffd845ba80 <col:38, col:40> 'int' lvalue
|   |     |   |   |   | | |       |   `-DeclRefExpr 0x7fffd845ba58 <line:4459:34> 'int' lvalue Var 0x7fffd8458848 'y0' 'int'
|   |     |   |   |   | | |       `-ImplicitCastExpr 0x7fffd845bb00 <line:4338:44, col:46> 'int' <LValueToRValue>
|   |     |   |   |   | | |         `-ParenExpr 0x7fffd845bac8 <col:44, col:46> 'int' lvalue
|   |     |   |   |   | | |           `-DeclRefExpr 0x7fffd845baa0 <line:4459:37> 'int' lvalue Var 0x7fffd8458c20 'y1' 'int'
|   |     |   |   |   | | `-BinaryOperator 0x7fffd845be10 <col:44, line:4339:47> 'int' '<'
|   |     |   |   |   | |   |-ImplicitCastExpr 0x7fffd845bde0 <line:4459:44> 'float' <LValueToRValue>
|   |     |   |   |   | |   | `-DeclRefExpr 0x7fffd845bbc0 <col:44> 'float' lvalue ParmVar 0x7fffd8455cc0 'y' 'float'
|   |     |   |   |   | |   `-ImplicitCastExpr 0x7fffd845bdf8 <line:4339:25, col:47> 'float' <IntegralToFloating>
|   |     |   |   |   | |     `-ParenExpr 0x7fffd845bdc0 <col:25, col:47> 'int'
|   |     |   |   |   | |       `-ConditionalOperator 0x7fffd845bd90 <col:26, col:46> 'int'
|   |     |   |   |   | |         |-BinaryOperator 0x7fffd845bca8 <col:26, col:34> 'int' '<'
|   |     |   |   |   | |         | |-ImplicitCastExpr 0x7fffd845bc78 <col:26, col:28> 'int' <LValueToRValue>
|   |     |   |   |   | |         | | `-ParenExpr 0x7fffd845bc10 <col:26, col:28> 'int' lvalue
|   |     |   |   |   | |         | |   `-DeclRefExpr 0x7fffd845bbe8 <line:4459:58> 'int' lvalue Var 0x7fffd8458848 'y0' 'int'
|   |     |   |   |   | |         | `-ImplicitCastExpr 0x7fffd845bc90 <line:4339:32, col:34> 'int' <LValueToRValue>
|   |     |   |   |   | |         |   `-ParenExpr 0x7fffd845bc58 <col:32, col:34> 'int' lvalue
|   |     |   |   |   | |         |     `-DeclRefExpr 0x7fffd845bc30 <line:4459:61> 'int' lvalue Var 0x7fffd8458c20 'y1' 'int'
|   |     |   |   |   | |         |-ImplicitCastExpr 0x7fffd845bd60 <line:4339:38, col:40> 'int' <LValueToRValue>
|   |     |   |   |   | |         | `-ParenExpr 0x7fffd845bcf8 <col:38, col:40> 'int' lvalue
|   |     |   |   |   | |         |   `-DeclRefExpr 0x7fffd845bcd0 <line:4459:61> 'int' lvalue Var 0x7fffd8458c20 'y1' 'int'
|   |     |   |   |   | |         `-ImplicitCastExpr 0x7fffd845bd78 <line:4339:44, col:46> 'int' <LValueToRValue>
|   |     |   |   |   | |           `-ParenExpr 0x7fffd845bd40 <col:44, col:46> 'int' lvalue
|   |     |   |   |   | |             `-DeclRefExpr 0x7fffd845bd18 <line:4459:58> 'int' lvalue Var 0x7fffd8458848 'y0' 'int'
|   |     |   |   |   | `-BinaryOperator 0x7fffd845c0b0 <col:68, line:4338:47> 'int' '>'
|   |     |   |   |   |   |-ImplicitCastExpr 0x7fffd845c080 <line:4459:68> 'float' <LValueToRValue>
|   |     |   |   |   |   | `-DeclRefExpr 0x7fffd845be60 <col:68> 'float' lvalue ParmVar 0x7fffd8455c48 'x' 'float'
|   |     |   |   |   |   `-ImplicitCastExpr 0x7fffd845c098 <line:4338:25, col:47> 'float' <IntegralToFloating>
|   |     |   |   |   |     `-ParenExpr 0x7fffd845c060 <col:25, col:47> 'int'
|   |     |   |   |   |       `-ConditionalOperator 0x7fffd845c030 <col:26, col:46> 'int'
|   |     |   |   |   |         |-BinaryOperator 0x7fffd845bf48 <col:26, col:34> 'int' '<'
|   |     |   |   |   |         | |-ImplicitCastExpr 0x7fffd845bf18 <col:26, col:28> 'int' <LValueToRValue>
|   |     |   |   |   |         | | `-ParenExpr 0x7fffd845beb0 <col:26, col:28> 'int' lvalue
|   |     |   |   |   |         | |   `-DeclRefExpr 0x7fffd845be88 <line:4459:82> 'int' lvalue Var 0x7fffd8458638 'x0' 'int'
|   |     |   |   |   |         | `-ImplicitCastExpr 0x7fffd845bf30 <line:4338:32, col:34> 'int' <LValueToRValue>
|   |     |   |   |   |         |   `-ParenExpr 0x7fffd845bef8 <col:32, col:34> 'int' lvalue
|   |     |   |   |   |         |     `-DeclRefExpr 0x7fffd845bed0 <line:4459:85> 'int' lvalue Var 0x7fffd8458a70 'x1' 'int'
|   |     |   |   |   |         |-ImplicitCastExpr 0x7fffd845c000 <line:4338:38, col:40> 'int' <LValueToRValue>
|   |     |   |   |   |         | `-ParenExpr 0x7fffd845bf98 <col:38, col:40> 'int' lvalue
|   |     |   |   |   |         |   `-DeclRefExpr 0x7fffd845bf70 <line:4459:82> 'int' lvalue Var 0x7fffd8458638 'x0' 'int'
|   |     |   |   |   |         `-ImplicitCastExpr 0x7fffd845c018 <line:4338:44, col:46> 'int' <LValueToRValue>
|   |     |   |   |   |           `-ParenExpr 0x7fffd845bfe0 <col:44, col:46> 'int' lvalue
|   |     |   |   |   |             `-DeclRefExpr 0x7fffd845bfb8 <line:4459:85> 'int' lvalue Var 0x7fffd8458a70 'x1' 'int'
|   |     |   |   |   |-CompoundStmt 0x7fffd845c798 <col:90, line:4463:16>
|   |     |   |   |   | |-DeclStmt 0x7fffd845c4e8 <line:4460:19, col:70>
|   |     |   |   |   | | `-VarDecl 0x7fffd845c118 <col:19, col:68> col:25 used x_inter 'float' cinit
|   |     |   |   |   | |   `-BinaryOperator 0x7fffd845c4c0 <col:35, col:68> 'float' '+'
|   |     |   |   |   | |     |-BinaryOperator 0x7fffd845c440 <col:35, col:64> 'float' '*'
|   |     |   |   |   | |     | |-BinaryOperator 0x7fffd845c338 <col:35, col:54> 'float' '/'
|   |     |   |   |   | |     | | |-ParenExpr 0x7fffd845c238 <col:35, col:42> 'float'
|   |     |   |   |   | |     | | | `-BinaryOperator 0x7fffd845c210 <col:36, col:40> 'float' '-'
|   |     |   |   |   | |     | | |   |-ImplicitCastExpr 0x7fffd845c1c8 <col:36> 'float' <LValueToRValue>
|   |     |   |   |   | |     | | |   | `-DeclRefExpr 0x7fffd845c178 <col:36> 'float' lvalue ParmVar 0x7fffd8455cc0 'y' 'float'
|   |     |   |   |   | |     | | |   `-ImplicitCastExpr 0x7fffd845c1f8 <col:40> 'float' <IntegralToFloating>
|   |     |   |   |   | |     | | |     `-ImplicitCastExpr 0x7fffd845c1e0 <col:40> 'int' <LValueToRValue>
|   |     |   |   |   | |     | | |       `-DeclRefExpr 0x7fffd845c1a0 <col:40> 'int' lvalue Var 0x7fffd8458848 'y0' 'int'
|   |     |   |   |   | |     | | `-ImplicitCastExpr 0x7fffd845c320 <col:46, col:54> 'float' <IntegralToFloating>
|   |     |   |   |   | |     | |   `-ParenExpr 0x7fffd845c300 <col:46, col:54> 'int'
|   |     |   |   |   | |     | |     `-BinaryOperator 0x7fffd845c2d8 <col:47, col:52> 'int' '-'
|   |     |   |   |   | |     | |       |-ImplicitCastExpr 0x7fffd845c2a8 <col:47> 'int' <LValueToRValue>
|   |     |   |   |   | |     | |       | `-DeclRefExpr 0x7fffd845c258 <col:47> 'int' lvalue Var 0x7fffd8458c20 'y1' 'int'
|   |     |   |   |   | |     | |       `-ImplicitCastExpr 0x7fffd845c2c0 <col:52> 'int' <LValueToRValue>
|   |     |   |   |   | |     | |         `-DeclRefExpr 0x7fffd845c280 <col:52> 'int' lvalue Var 0x7fffd8458848 'y0' 'int'
|   |     |   |   |   | |     | `-ImplicitCastExpr 0x7fffd845c428 <col:58, col:64> 'float' <IntegralToFloating>
|   |     |   |   |   | |     |   `-ParenExpr 0x7fffd845c408 <col:58, col:64> 'int'
|   |     |   |   |   | |     |     `-BinaryOperator 0x7fffd845c3e0 <col:59, col:62> 'int' '-'
|   |     |   |   |   | |     |       |-ImplicitCastExpr 0x7fffd845c3b0 <col:59> 'int' <LValueToRValue>
|   |     |   |   |   | |     |       | `-DeclRefExpr 0x7fffd845c360 <col:59> 'int' lvalue Var 0x7fffd8458a70 'x1' 'int'
|   |     |   |   |   | |     |       `-ImplicitCastExpr 0x7fffd845c3c8 <col:62> 'int' <LValueToRValue>
|   |     |   |   |   | |     |         `-DeclRefExpr 0x7fffd845c388 <col:62> 'int' lvalue Var 0x7fffd8458638 'x0' 'int'
|   |     |   |   |   | |     `-ImplicitCastExpr 0x7fffd845c4a8 <col:68> 'float' <IntegralToFloating>
|   |     |   |   |   | |       `-ImplicitCastExpr 0x7fffd845c490 <col:68> 'int' <LValueToRValue>
|   |     |   |   |   | |         `-DeclRefExpr 0x7fffd845c468 <col:68> 'int' lvalue Var 0x7fffd8458638 'x0' 'int'
|   |     |   |   |   | `-IfStmt 0x7fffd845c760 <line:4461:19, line:4462:50>
|   |     |   |   |   |   |-<<<NULL>>>
|   |     |   |   |   |   |-<<<NULL>>>
|   |     |   |   |   |   |-BinaryOperator 0x7fffd845c580 <line:4461:23, col:33> 'int' '<'
|   |     |   |   |   |   | |-ImplicitCastExpr 0x7fffd845c550 <col:23> 'float' <LValueToRValue>
|   |     |   |   |   |   | | `-DeclRefExpr 0x7fffd845c500 <col:23> 'float' lvalue Var 0x7fffd845c118 'x_inter' 'float'
|   |     |   |   |   |   | `-ImplicitCastExpr 0x7fffd845c568 <col:33> 'float' <LValueToRValue>
|   |     |   |   |   |   |   `-DeclRefExpr 0x7fffd845c528 <col:33> 'float' lvalue ParmVar 0x7fffd8455c48 'x' 'float'
|   |     |   |   |   |   |-CompoundAssignOperator 0x7fffd845c728 <line:4462:22, col:50> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |     |   |   |   |   | |-DeclRefExpr 0x7fffd845c5a8 <col:22> 'int' lvalue Var 0x7fffd8456380 'winding' 'int'
|   |     |   |   |   |   | `-ConditionalOperator 0x7fffd845c6f8 <col:33, col:50> 'int'
|   |     |   |   |   |   |   |-ParenExpr 0x7fffd845c678 <col:33, col:41> 'int'
|   |     |   |   |   |   |   | `-BinaryOperator 0x7fffd845c650 <col:34, col:39> 'int' '<'
|   |     |   |   |   |   |   |   |-ImplicitCastExpr 0x7fffd845c620 <col:34> 'int' <LValueToRValue>
|   |     |   |   |   |   |   |   | `-DeclRefExpr 0x7fffd845c5d0 <col:34> 'int' lvalue Var 0x7fffd8458848 'y0' 'int'
|   |     |   |   |   |   |   |   `-ImplicitCastExpr 0x7fffd845c638 <col:39> 'int' <LValueToRValue>
|   |     |   |   |   |   |   |     `-DeclRefExpr 0x7fffd845c5f8 <col:39> 'int' lvalue Var 0x7fffd8458c20 'y1' 'int'
|   |     |   |   |   |   |   |-IntegerLiteral 0x7fffd845c698 <col:45> 'int' 1
|   |     |   |   |   |   |   `-UnaryOperator 0x7fffd845c6d8 <col:49, col:50> 'int' prefix '-'
|   |     |   |   |   |   |     `-IntegerLiteral 0x7fffd845c6b8 <col:50> 'int' 1
|   |     |   |   |   |   `-<<<NULL>>>
|   |     |   |   |   `-<<<NULL>>>
|   |     |   |   `-CompoundStmt 0x7fffd845d4d0 <line:4464:20, line:4472:13>
|   |     |   |     |-DeclStmt 0x7fffd845cb28 <line:4465:16, col:87>
|   |     |   |     | `-VarDecl 0x7fffd845c850 <col:16, col:86> col:20 used num_hits 'int' cinit
|   |     |   |     |   `-CallExpr 0x7fffd845ca40 <col:31, col:86> 'int'
|   |     |   |     |     |-ImplicitCastExpr 0x7fffd845ca28 <col:31> 'int (*)(float *, float *, float *, float *, float *, float (*)[2])' <FunctionToPointerDecay>
|   |     |   |     |     | `-DeclRefExpr 0x7fffd845c8b0 <col:31> 'int (float *, float *, float *, float *, float *, float (*)[2])' Function 0x7fffd8450658 'stbtt__ray_intersect_bezier' 'int (float *, float *, float *, float *, float *, float (*)[2])'
|   |     |   |     |     |-ImplicitCastExpr 0x7fffd845ca98 <col:59> 'float *' <ArrayToPointerDecay>
|   |     |   |     |     | `-DeclRefExpr 0x7fffd845c8d8 <col:59> 'float [2]' lvalue Var 0x7fffd8456090 'orig' 'float [2]'
|   |     |   |     |     |-ImplicitCastExpr 0x7fffd845cab0 <col:65> 'float *' <ArrayToPointerDecay>
|   |     |   |     |     | `-DeclRefExpr 0x7fffd845c900 <col:65> 'float [2]' lvalue Var 0x7fffd8456138 'ray' 'float [2]'
|   |     |   |     |     |-ImplicitCastExpr 0x7fffd845cac8 <col:70> 'float *' <ArrayToPointerDecay>
|   |     |   |     |     | `-DeclRefExpr 0x7fffd845c928 <col:70> 'float [2]' lvalue Var 0x7fffd845a638 'q0' 'float [2]'
|   |     |   |     |     |-ImplicitCastExpr 0x7fffd845cae0 <col:74> 'float *' <ArrayToPointerDecay>
|   |     |   |     |     | `-DeclRefExpr 0x7fffd845c950 <col:74> 'float [2]' lvalue Var 0x7fffd845a6e0 'q1' 'float [2]'
|   |     |   |     |     |-ImplicitCastExpr 0x7fffd845caf8 <col:78> 'float *' <ArrayToPointerDecay>
|   |     |   |     |     | `-DeclRefExpr 0x7fffd845c978 <col:78> 'float [2]' lvalue Var 0x7fffd845a788 'q2' 'float [2]'
|   |     |   |     |     `-ImplicitCastExpr 0x7fffd845cb10 <col:82> 'float (*)[2]' <ArrayToPointerDecay>
|   |     |   |     |       `-DeclRefExpr 0x7fffd845c9a0 <col:82> 'float [2][2]' lvalue Var 0x7fffd845a8b8 'hits' 'float [2][2]'
|   |     |   |     |-IfStmt 0x7fffd845cfd0 <line:4466:16, line:4468:57>
|   |     |   |     | |-<<<NULL>>>
|   |     |   |     | |-<<<NULL>>>
|   |     |   |     | |-BinaryOperator 0x7fffd845cba0 <line:4466:20, col:32> 'int' '>='
|   |     |   |     | | |-ImplicitCastExpr 0x7fffd845cb88 <col:20> 'int' <LValueToRValue>
|   |     |   |     | | | `-DeclRefExpr 0x7fffd845cb40 <col:20> 'int' lvalue Var 0x7fffd845c850 'num_hits' 'int'
|   |     |   |     | | `-IntegerLiteral 0x7fffd845cb68 <col:32> 'int' 1
|   |     |   |     | |-IfStmt 0x7fffd845cf98 <line:4467:19, line:4468:57>
|   |     |   |     | | |-<<<NULL>>>
|   |     |   |     | | |-<<<NULL>>>
|   |     |   |     | | |-BinaryOperator 0x7fffd845cd00 <line:4467:23, col:36> 'int' '<'
|   |     |   |     | | | |-ImplicitCastExpr 0x7fffd845ccd0 <col:23, col:32> 'float' <LValueToRValue>
|   |     |   |     | | | | `-ArraySubscriptExpr 0x7fffd845cc88 <col:23, col:32> 'float' lvalue
|   |     |   |     | | | |   |-ImplicitCastExpr 0x7fffd845cc70 <col:23, col:29> 'float *' <ArrayToPointerDecay>
|   |     |   |     | | | |   | `-ArraySubscriptExpr 0x7fffd845cc28 <col:23, col:29> 'float [2]' lvalue
|   |     |   |     | | | |   |   |-ImplicitCastExpr 0x7fffd845cc10 <col:23> 'float (*)[2]' <ArrayToPointerDecay>
|   |     |   |     | | | |   |   | `-DeclRefExpr 0x7fffd845cbc8 <col:23> 'float [2][2]' lvalue Var 0x7fffd845a8b8 'hits' 'float [2][2]'
|   |     |   |     | | | |   |   `-IntegerLiteral 0x7fffd845cbf0 <col:28> 'int' 0
|   |     |   |     | | | |   `-IntegerLiteral 0x7fffd845cc50 <col:31> 'int' 0
|   |     |   |     | | | `-ImplicitCastExpr 0x7fffd845cce8 <col:36> 'float' <IntegralToFloating>
|   |     |   |     | | |   `-IntegerLiteral 0x7fffd845ccb0 <col:36> 'int' 0
|   |     |   |     | | |-CompoundAssignOperator 0x7fffd845cf60 <line:4468:22, col:57> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |     |   |     | | | |-DeclRefExpr 0x7fffd845cd28 <col:22> 'int' lvalue Var 0x7fffd8456380 'winding' 'int'
|   |     |   |     | | | `-ParenExpr 0x7fffd845cf40 <col:33, col:57> 'int'
|   |     |   |     | | |   `-ConditionalOperator 0x7fffd845cf10 <col:34, col:56> 'int'
|   |     |   |     | | |     |-BinaryOperator 0x7fffd845ce88 <col:34, col:47> 'int' '<'
|   |     |   |     | | |     | |-ImplicitCastExpr 0x7fffd845ce58 <col:34, col:43> 'float' <LValueToRValue>
|   |     |   |     | | |     | | `-ArraySubscriptExpr 0x7fffd845ce10 <col:34, col:43> 'float' lvalue
|   |     |   |     | | |     | |   |-ImplicitCastExpr 0x7fffd845cdf8 <col:34, col:40> 'float *' <ArrayToPointerDecay>
|   |     |   |     | | |     | |   | `-ArraySubscriptExpr 0x7fffd845cdb0 <col:34, col:40> 'float [2]' lvalue
|   |     |   |     | | |     | |   |   |-ImplicitCastExpr 0x7fffd845cd98 <col:34> 'float (*)[2]' <ArrayToPointerDecay>
|   |     |   |     | | |     | |   |   | `-DeclRefExpr 0x7fffd845cd50 <col:34> 'float [2][2]' lvalue Var 0x7fffd845a8b8 'hits' 'float [2][2]'
|   |     |   |     | | |     | |   |   `-IntegerLiteral 0x7fffd845cd78 <col:39> 'int' 0
|   |     |   |     | | |     | |   `-IntegerLiteral 0x7fffd845cdd8 <col:42> 'int' 1
|   |     |   |     | | |     | `-ImplicitCastExpr 0x7fffd845ce70 <col:47> 'float' <IntegralToFloating>
|   |     |   |     | | |     |   `-IntegerLiteral 0x7fffd845ce38 <col:47> 'int' 0
|   |     |   |     | | |     |-UnaryOperator 0x7fffd845ced0 <col:51, col:52> 'int' prefix '-'
|   |     |   |     | | |     | `-IntegerLiteral 0x7fffd845ceb0 <col:52> 'int' 1
|   |     |   |     | | |     `-IntegerLiteral 0x7fffd845cef0 <col:56> 'int' 1
|   |     |   |     | | `-<<<NULL>>>
|   |     |   |     | `-<<<NULL>>>
|   |     |   |     `-IfStmt 0x7fffd845d498 <line:4469:16, line:4471:57>
|   |     |   |       |-<<<NULL>>>
|   |     |   |       |-<<<NULL>>>
|   |     |   |       |-BinaryOperator 0x7fffd845d068 <line:4469:20, col:32> 'int' '>='
|   |     |   |       | |-ImplicitCastExpr 0x7fffd845d050 <col:20> 'int' <LValueToRValue>
|   |     |   |       | | `-DeclRefExpr 0x7fffd845d008 <col:20> 'int' lvalue Var 0x7fffd845c850 'num_hits' 'int'
|   |     |   |       | `-IntegerLiteral 0x7fffd845d030 <col:32> 'int' 2
|   |     |   |       |-IfStmt 0x7fffd845d460 <line:4470:19, line:4471:57>
|   |     |   |       | |-<<<NULL>>>
|   |     |   |       | |-<<<NULL>>>
|   |     |   |       | |-BinaryOperator 0x7fffd845d1c8 <line:4470:23, col:36> 'int' '<'
|   |     |   |       | | |-ImplicitCastExpr 0x7fffd845d198 <col:23, col:32> 'float' <LValueToRValue>
|   |     |   |       | | | `-ArraySubscriptExpr 0x7fffd845d150 <col:23, col:32> 'float' lvalue
|   |     |   |       | | |   |-ImplicitCastExpr 0x7fffd845d138 <col:23, col:29> 'float *' <ArrayToPointerDecay>
|   |     |   |       | | |   | `-ArraySubscriptExpr 0x7fffd845d0f0 <col:23, col:29> 'float [2]' lvalue
|   |     |   |       | | |   |   |-ImplicitCastExpr 0x7fffd845d0d8 <col:23> 'float (*)[2]' <ArrayToPointerDecay>
|   |     |   |       | | |   |   | `-DeclRefExpr 0x7fffd845d090 <col:23> 'float [2][2]' lvalue Var 0x7fffd845a8b8 'hits' 'float [2][2]'
|   |     |   |       | | |   |   `-IntegerLiteral 0x7fffd845d0b8 <col:28> 'int' 1
|   |     |   |       | | |   `-IntegerLiteral 0x7fffd845d118 <col:31> 'int' 0
|   |     |   |       | | `-ImplicitCastExpr 0x7fffd845d1b0 <col:36> 'float' <IntegralToFloating>
|   |     |   |       | |   `-IntegerLiteral 0x7fffd845d178 <col:36> 'int' 0
|   |     |   |       | |-CompoundAssignOperator 0x7fffd845d428 <line:4471:22, col:57> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |     |   |       | | |-DeclRefExpr 0x7fffd845d1f0 <col:22> 'int' lvalue Var 0x7fffd8456380 'winding' 'int'
|   |     |   |       | | `-ParenExpr 0x7fffd845d408 <col:33, col:57> 'int'
|   |     |   |       | |   `-ConditionalOperator 0x7fffd845d3d8 <col:34, col:56> 'int'
|   |     |   |       | |     |-BinaryOperator 0x7fffd845d350 <col:34, col:47> 'int' '<'
|   |     |   |       | |     | |-ImplicitCastExpr 0x7fffd845d320 <col:34, col:43> 'float' <LValueToRValue>
|   |     |   |       | |     | | `-ArraySubscriptExpr 0x7fffd845d2d8 <col:34, col:43> 'float' lvalue
|   |     |   |       | |     | |   |-ImplicitCastExpr 0x7fffd845d2c0 <col:34, col:40> 'float *' <ArrayToPointerDecay>
|   |     |   |       | |     | |   | `-ArraySubscriptExpr 0x7fffd845d278 <col:34, col:40> 'float [2]' lvalue
|   |     |   |       | |     | |   |   |-ImplicitCastExpr 0x7fffd845d260 <col:34> 'float (*)[2]' <ArrayToPointerDecay>
|   |     |   |       | |     | |   |   | `-DeclRefExpr 0x7fffd845d218 <col:34> 'float [2][2]' lvalue Var 0x7fffd845a8b8 'hits' 'float [2][2]'
|   |     |   |       | |     | |   |   `-IntegerLiteral 0x7fffd845d240 <col:39> 'int' 1
|   |     |   |       | |     | |   `-IntegerLiteral 0x7fffd845d2a0 <col:42> 'int' 1
|   |     |   |       | |     | `-ImplicitCastExpr 0x7fffd845d338 <col:47> 'float' <IntegralToFloating>
|   |     |   |       | |     |   `-IntegerLiteral 0x7fffd845d300 <col:47> 'int' 0
|   |     |   |       | |     |-UnaryOperator 0x7fffd845d398 <col:51, col:52> 'int' prefix '-'
|   |     |   |       | |     | `-IntegerLiteral 0x7fffd845d378 <col:52> 'int' 1
|   |     |   |       | |     `-IntegerLiteral 0x7fffd845d3b8 <col:56> 'int' 1
|   |     |   |       | `-<<<NULL>>>
|   |     |   |       `-<<<NULL>>>
|   |     |   `-<<<NULL>>>
|   |     `-<<<NULL>>>
|   `-ReturnStmt 0x7fffd845d6d0 <line:4476:4, col:11>
|     `-ImplicitCastExpr 0x7fffd845d6b8 <col:11> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd845d690 <col:11> 'int' lvalue Var 0x7fffd8456380 'winding' 'int'
|-FunctionDecl 0x7fffd845d7f8 <line:4479:1, line:4485:1> line:4479:14 used stbtt__cuberoot 'float (float)' static
| |-ParmVarDecl 0x7fffd845d768 <col:31, col:37> col:37 used x 'float'
| `-CompoundStmt 0x7fffd845dd08 <line:4480:1, line:4485:1>
|   `-IfStmt 0x7fffd845dcd0 <line:4481:4, line:445:38>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fffd845d918 <line:4481:8, col:10> 'int' '<'
|     | |-ImplicitCastExpr 0x7fffd845d8e8 <col:8> 'float' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fffd845d8a0 <col:8> 'float' lvalue ParmVar 0x7fffd845d768 'x' 'float'
|     | `-ImplicitCastExpr 0x7fffd845d900 <col:10> 'float' <IntegralToFloating>
|     |   `-IntegerLiteral 0x7fffd845d8c8 <col:10> 'int' 0
|     |-ReturnStmt 0x7fffd845db10 <line:4482:7, line:445:38>
|     | `-UnaryOperator 0x7fffd845daf0 <line:4482:14, line:445:38> 'float' prefix '-'
|     |   `-CStyleCastExpr 0x7fffd845dac8 <line:4482:15, line:445:38> 'float' <FloatingCast>
|     |     `-CallExpr 0x7fffd845da48 <col:31, col:38> 'double'
|     |       |-ImplicitCastExpr 0x7fffd845da30 <col:31> 'double (*)(double, double)' <FunctionToPointerDecay>
|     |       | `-DeclRefExpr 0x7fffd845d940 <col:31> 'double (double, double)' Function 0x7fffd828e4e0 'pow' 'double (double, double)'
|     |       |-ImplicitCastExpr 0x7fffd845da80 <line:4482:33, col:34> 'double' <FloatingCast>
|     |       | `-UnaryOperator 0x7fffd845d9a8 <col:33, col:34> 'float' prefix '-'
|     |       |   `-ImplicitCastExpr 0x7fffd845d990 <col:34> 'float' <LValueToRValue>
|     |       |     `-DeclRefExpr 0x7fffd845d968 <col:34> 'float' lvalue ParmVar 0x7fffd845d768 'x' 'float'
|     |       `-ImplicitCastExpr 0x7fffd845da98 <col:36, col:41> 'double' <FloatingCast>
|     |         `-BinaryOperator 0x7fffd845da08 <col:36, col:41> 'float' '/'
|     |           |-FloatingLiteral 0x7fffd845d9c8 <col:36> 'float' 1.000000e+00
|     |           `-FloatingLiteral 0x7fffd845d9e8 <col:41> 'float' 3.000000e+00
|     `-ReturnStmt 0x7fffd845dcb8 <line:4484:7, line:445:38>
|       `-CStyleCastExpr 0x7fffd845dc90 <line:4484:15, line:445:38> 'float' <FloatingCast>
|         `-CallExpr 0x7fffd845dbf8 <col:31, col:38> 'double'
|           |-ImplicitCastExpr 0x7fffd845dbe0 <col:31> 'double (*)(double, double)' <FunctionToPointerDecay>
|           | `-DeclRefExpr 0x7fffd845db28 <col:31> 'double (double, double)' Function 0x7fffd828e4e0 'pow' 'double (double, double)'
|           |-ImplicitCastExpr 0x7fffd845dc48 <line:4484:34> 'double' <FloatingCast>
|           | `-ImplicitCastExpr 0x7fffd845dc30 <col:34> 'float' <LValueToRValue>
|           |   `-DeclRefExpr 0x7fffd845db50 <col:34> 'float' lvalue ParmVar 0x7fffd845d768 'x' 'float'
|           `-ImplicitCastExpr 0x7fffd845dc60 <col:36, col:41> 'double' <FloatingCast>
|             `-BinaryOperator 0x7fffd845dbb8 <col:36, col:41> 'float' '/'
|               |-FloatingLiteral 0x7fffd845db78 <col:36> 'float' 1.000000e+00
|               `-FloatingLiteral 0x7fffd845db98 <col:41> 'float' 3.000000e+00
|-FunctionDecl 0x7fffd845df98 <line:4488:1, line:4517:1> line:4488:12 used stbtt__solve_cubic 'int (float, float, float, float *)' static
| |-ParmVarDecl 0x7fffd845dd38 <col:31, col:37> col:37 used a 'float'
| |-ParmVarDecl 0x7fffd845ddb0 <col:40, col:46> col:46 used b 'float'
| |-ParmVarDecl 0x7fffd845de28 <col:49, col:55> col:55 used c 'float'
| |-ParmVarDecl 0x7fffd845dea0 <col:58, col:65> col:65 used r 'float *'
| `-CompoundStmt 0x7fffd8460750 <line:4489:1, line:4517:1>
|   |-DeclStmt 0x7fffd845e190 <line:4490:2, col:18>
|   | `-VarDecl 0x7fffd845e070 <col:2, col:17> col:8 used s 'float' cinit
|   |   `-BinaryOperator 0x7fffd845e168 <col:12, col:17> 'float' '/'
|   |     |-UnaryOperator 0x7fffd845e110 <col:12, col:13> 'float' prefix '-'
|   |     | `-ImplicitCastExpr 0x7fffd845e0f8 <col:13> 'float' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fffd845e0d0 <col:13> 'float' lvalue ParmVar 0x7fffd845dd38 'a' 'float'
|   |     `-ImplicitCastExpr 0x7fffd845e150 <col:17> 'float' <IntegralToFloating>
|   |       `-IntegerLiteral 0x7fffd845e130 <col:17> 'int' 3
|   |-DeclStmt 0x7fffd845e390 <line:4491:2, col:23>
|   | `-VarDecl 0x7fffd845e1c0 <col:2, col:22> col:8 used p 'float' cinit
|   |   `-BinaryOperator 0x7fffd845e368 <col:12, col:22> 'float' '-'
|   |     |-ImplicitCastExpr 0x7fffd845e350 <col:12> 'float' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd845e220 <col:12> 'float' lvalue ParmVar 0x7fffd845ddb0 'b' 'float'
|   |     `-BinaryOperator 0x7fffd845e328 <col:16, col:22> 'float' '/'
|   |       |-BinaryOperator 0x7fffd845e2c8 <col:16, col:18> 'float' '*'
|   |       | |-ImplicitCastExpr 0x7fffd845e298 <col:16> 'float' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x7fffd845e248 <col:16> 'float' lvalue ParmVar 0x7fffd845dd38 'a' 'float'
|   |       | `-ImplicitCastExpr 0x7fffd845e2b0 <col:18> 'float' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x7fffd845e270 <col:18> 'float' lvalue ParmVar 0x7fffd845dd38 'a' 'float'
|   |       `-ImplicitCastExpr 0x7fffd845e310 <col:22> 'float' <IntegralToFloating>
|   |         `-IntegerLiteral 0x7fffd845e2f0 <col:22> 'int' 3
|   |-DeclStmt 0x7fffd845e740 <line:4492:2, col:38>
|   | `-VarDecl 0x7fffd845e3c0 <col:2, col:37> col:8 used q 'float' cinit
|   |   `-BinaryOperator 0x7fffd845e718 <col:12, col:37> 'float' '+'
|   |     |-BinaryOperator 0x7fffd845e6b0 <col:12, col:32> 'float' '/'
|   |     | |-BinaryOperator 0x7fffd845e650 <col:12, col:28> 'float' '*'
|   |     | | |-ImplicitCastExpr 0x7fffd845e638 <col:12> 'float' <LValueToRValue>
|   |     | | | `-DeclRefExpr 0x7fffd845e420 <col:12> 'float' lvalue ParmVar 0x7fffd845dd38 'a' 'float'
|   |     | | `-ParenExpr 0x7fffd845e618 <col:16, col:28> 'float'
|   |     | |   `-BinaryOperator 0x7fffd845e5f0 <col:17, col:27> 'float' '-'
|   |     | |     |-BinaryOperator 0x7fffd845e528 <col:17, col:21> 'float' '*'
|   |     | |     | |-BinaryOperator 0x7fffd845e4c0 <col:17, col:19> 'float' '*'
|   |     | |     | | |-ImplicitCastExpr 0x7fffd845e4a8 <col:17> 'float' <IntegralToFloating>
|   |     | |     | | | `-IntegerLiteral 0x7fffd845e448 <col:17> 'int' 2
|   |     | |     | | `-ImplicitCastExpr 0x7fffd845e490 <col:19> 'float' <LValueToRValue>
|   |     | |     | |   `-DeclRefExpr 0x7fffd845e468 <col:19> 'float' lvalue ParmVar 0x7fffd845dd38 'a' 'float'
|   |     | |     | `-ImplicitCastExpr 0x7fffd845e510 <col:21> 'float' <LValueToRValue>
|   |     | |     |   `-DeclRefExpr 0x7fffd845e4e8 <col:21> 'float' lvalue ParmVar 0x7fffd845dd38 'a' 'float'
|   |     | |     `-BinaryOperator 0x7fffd845e5c8 <col:25, col:27> 'float' '*'
|   |     | |       |-ImplicitCastExpr 0x7fffd845e5b0 <col:25> 'float' <IntegralToFloating>
|   |     | |       | `-IntegerLiteral 0x7fffd845e550 <col:25> 'int' 9
|   |     | |       `-ImplicitCastExpr 0x7fffd845e598 <col:27> 'float' <LValueToRValue>
|   |     | |         `-DeclRefExpr 0x7fffd845e570 <col:27> 'float' lvalue ParmVar 0x7fffd845ddb0 'b' 'float'
|   |     | `-ImplicitCastExpr 0x7fffd845e698 <col:32> 'float' <IntegralToFloating>
|   |     |   `-IntegerLiteral 0x7fffd845e678 <col:32> 'int' 27
|   |     `-ImplicitCastExpr 0x7fffd845e700 <col:37> 'float' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd845e6d8 <col:37> 'float' lvalue ParmVar 0x7fffd845de28 'c' 'float'
|   |-DeclStmt 0x7fffd845e8f0 <line:4493:4, col:20>
|   | `-VarDecl 0x7fffd845e770 <col:4, col:19> col:10 used p3 'float' cinit
|   |   `-BinaryOperator 0x7fffd845e8c8 <col:15, col:19> 'float' '*'
|   |     |-BinaryOperator 0x7fffd845e860 <col:15, col:17> 'float' '*'
|   |     | |-ImplicitCastExpr 0x7fffd845e820 <col:15> 'float' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x7fffd845e7d0 <col:15> 'float' lvalue Var 0x7fffd845e1c0 'p' 'float'
|   |     | `-ImplicitCastExpr 0x7fffd845e838 <col:17> 'float' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fffd845e7f8 <col:17> 'float' lvalue Var 0x7fffd845e1c0 'p' 'float'
|   |     `-ImplicitCastExpr 0x7fffd845e8b0 <col:19> 'float' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd845e888 <col:19> 'float' lvalue Var 0x7fffd845e1c0 'p' 'float'
|   |-DeclStmt 0x7fffd845eb50 <line:4494:2, col:27>
|   | `-VarDecl 0x7fffd845e920 <col:2, col:25> col:8 used d 'float' cinit
|   |   `-BinaryOperator 0x7fffd845eb28 <col:12, col:25> 'float' '+'
|   |     |-BinaryOperator 0x7fffd845ea00 <col:12, col:14> 'float' '*'
|   |     | |-ImplicitCastExpr 0x7fffd845e9d0 <col:12> 'float' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x7fffd845e980 <col:12> 'float' lvalue Var 0x7fffd845e3c0 'q' 'float'
|   |     | `-ImplicitCastExpr 0x7fffd845e9e8 <col:14> 'float' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fffd845e9a8 <col:14> 'float' lvalue Var 0x7fffd845e3c0 'q' 'float'
|   |     `-BinaryOperator 0x7fffd845eb00 <col:18, col:25> 'float' '/'
|   |       |-BinaryOperator 0x7fffd845eaa0 <col:18, col:20> 'float' '*'
|   |       | |-ImplicitCastExpr 0x7fffd845ea88 <col:18> 'float' <IntegralToFloating>
|   |       | | `-IntegerLiteral 0x7fffd845ea28 <col:18> 'int' 4
|   |       | `-ImplicitCastExpr 0x7fffd845ea70 <col:20> 'float' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x7fffd845ea48 <col:20> 'float' lvalue Var 0x7fffd845e770 'p3' 'float'
|   |       `-ImplicitCastExpr 0x7fffd845eae8 <col:25> 'float' <IntegralToFloating>
|   |         `-IntegerLiteral 0x7fffd845eac8 <col:25> 'int' 27
|   `-IfStmt 0x7fffd8460718 <line:4495:2, line:4516:4>
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-BinaryOperator 0x7fffd845ebe0 <line:4495:6, col:11> 'int' '>='
|     | |-ImplicitCastExpr 0x7fffd845ebb0 <col:6> 'float' <LValueToRValue>
|     | | `-DeclRefExpr 0x7fffd845eb68 <col:6> 'float' lvalue Var 0x7fffd845e920 'd' 'float'
|     | `-ImplicitCastExpr 0x7fffd845ebc8 <col:11> 'float' <IntegralToFloating>
|     |   `-IntegerLiteral 0x7fffd845eb90 <col:11> 'int' 0
|     |-CompoundStmt 0x7fffd845f578 <col:14, line:4503:2>
|     | |-DeclStmt 0x7fffd845ed88 <line:4496:3, col:34>
|     | | `-VarDecl 0x7fffd845ec20 <col:3, line:444:37> line:4496:9 used z 'float' cinit
|     | |   `-CStyleCastExpr 0x7fffd845ed60 <col:13, line:444:37> 'float' <FloatingCast>
|     | |     `-CallExpr 0x7fffd845ece8 <col:31, col:37> 'double'
|     | |       |-ImplicitCastExpr 0x7fffd845ecd0 <col:31> 'double (*)(double)' <FunctionToPointerDecay>
|     | |       | `-DeclRefExpr 0x7fffd845ec80 <col:31> 'double (double)' Function 0x7fffd828e9f0 'sqrt' 'double (double)'
|     | |       `-ImplicitCastExpr 0x7fffd845ed30 <line:4496:32> 'double' <FloatingCast>
|     | |         `-ImplicitCastExpr 0x7fffd845ed18 <col:32> 'float' <LValueToRValue>
|     | |           `-DeclRefExpr 0x7fffd845eca8 <col:32> 'float' lvalue Var 0x7fffd845e920 'd' 'float'
|     | |-DeclStmt 0x7fffd845ef60 <line:4497:3, col:25>
|     | | `-VarDecl 0x7fffd845edb8 <col:3, col:24> col:9 used u 'float' cinit
|     | |   `-BinaryOperator 0x7fffd845ef38 <col:13, col:24> 'float' '/'
|     | |     |-ParenExpr 0x7fffd845eee0 <col:13, col:20> 'float'
|     | |     | `-BinaryOperator 0x7fffd845eeb8 <col:14, col:19> 'float' '+'
|     | |     |   |-UnaryOperator 0x7fffd845ee58 <col:14, col:15> 'float' prefix '-'
|     | |     |   | `-ImplicitCastExpr 0x7fffd845ee40 <col:15> 'float' <LValueToRValue>
|     | |     |   |   `-DeclRefExpr 0x7fffd845ee18 <col:15> 'float' lvalue Var 0x7fffd845e3c0 'q' 'float'
|     | |     |   `-ImplicitCastExpr 0x7fffd845eea0 <col:19> 'float' <LValueToRValue>
|     | |     |     `-DeclRefExpr 0x7fffd845ee78 <col:19> 'float' lvalue Var 0x7fffd845ec20 'z' 'float'
|     | |     `-ImplicitCastExpr 0x7fffd845ef20 <col:24> 'float' <IntegralToFloating>
|     | |       `-IntegerLiteral 0x7fffd845ef00 <col:24> 'int' 2
|     | |-DeclStmt 0x7fffd845f138 <line:4498:3, col:25>
|     | | `-VarDecl 0x7fffd845ef90 <col:3, col:24> col:9 used v 'float' cinit
|     | |   `-BinaryOperator 0x7fffd845f110 <col:13, col:24> 'float' '/'
|     | |     |-ParenExpr 0x7fffd845f0b8 <col:13, col:20> 'float'
|     | |     | `-BinaryOperator 0x7fffd845f090 <col:14, col:19> 'float' '-'
|     | |     |   |-UnaryOperator 0x7fffd845f030 <col:14, col:15> 'float' prefix '-'
|     | |     |   | `-ImplicitCastExpr 0x7fffd845f018 <col:15> 'float' <LValueToRValue>
|     | |     |   |   `-DeclRefExpr 0x7fffd845eff0 <col:15> 'float' lvalue Var 0x7fffd845e3c0 'q' 'float'
|     | |     |   `-ImplicitCastExpr 0x7fffd845f078 <col:19> 'float' <LValueToRValue>
|     | |     |     `-DeclRefExpr 0x7fffd845f050 <col:19> 'float' lvalue Var 0x7fffd845ec20 'z' 'float'
|     | |     `-ImplicitCastExpr 0x7fffd845f0f8 <col:24> 'float' <IntegralToFloating>
|     | |       `-IntegerLiteral 0x7fffd845f0d8 <col:24> 'int' 2
|     | |-BinaryOperator 0x7fffd845f258 <line:4499:3, col:24> 'float' '='
|     | | |-DeclRefExpr 0x7fffd845f150 <col:3> 'float' lvalue Var 0x7fffd845edb8 'u' 'float'
|     | | `-CallExpr 0x7fffd845f210 <col:7, col:24> 'float'
|     | |   |-ImplicitCastExpr 0x7fffd845f1f8 <col:7> 'float (*)(float)' <FunctionToPointerDecay>
|     | |   | `-DeclRefExpr 0x7fffd845f178 <col:7> 'float (float)' Function 0x7fffd845d7f8 'stbtt__cuberoot' 'float (float)'
|     | |   `-ImplicitCastExpr 0x7fffd845f240 <col:23> 'float' <LValueToRValue>
|     | |     `-DeclRefExpr 0x7fffd845f1a0 <col:23> 'float' lvalue Var 0x7fffd845edb8 'u' 'float'
|     | |-BinaryOperator 0x7fffd845f358 <line:4500:3, col:24> 'float' '='
|     | | |-DeclRefExpr 0x7fffd845f280 <col:3> 'float' lvalue Var 0x7fffd845ef90 'v' 'float'
|     | | `-CallExpr 0x7fffd845f310 <col:7, col:24> 'float'
|     | |   |-ImplicitCastExpr 0x7fffd845f2f8 <col:7> 'float (*)(float)' <FunctionToPointerDecay>
|     | |   | `-DeclRefExpr 0x7fffd845f2a8 <col:7> 'float (float)' Function 0x7fffd845d7f8 'stbtt__cuberoot' 'float (float)'
|     | |   `-ImplicitCastExpr 0x7fffd845f340 <col:23> 'float' <LValueToRValue>
|     | |     `-DeclRefExpr 0x7fffd845f2d0 <col:23> 'float' lvalue Var 0x7fffd845ef90 'v' 'float'
|     | |-BinaryOperator 0x7fffd845f518 <line:4501:3, col:18> 'float' '='
|     | | |-ArraySubscriptExpr 0x7fffd845f3e0 <col:3, col:6> 'float' lvalue
|     | | | |-ImplicitCastExpr 0x7fffd845f3c8 <col:3> 'float *' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x7fffd845f380 <col:3> 'float *' lvalue ParmVar 0x7fffd845dea0 'r' 'float *'
|     | | | `-IntegerLiteral 0x7fffd845f3a8 <col:5> 'int' 0
|     | | `-BinaryOperator 0x7fffd845f4f0 <col:10, col:18> 'float' '+'
|     | |   |-BinaryOperator 0x7fffd845f488 <col:10, col:14> 'float' '+'
|     | |   | |-ImplicitCastExpr 0x7fffd845f458 <col:10> 'float' <LValueToRValue>
|     | |   | | `-DeclRefExpr 0x7fffd845f408 <col:10> 'float' lvalue Var 0x7fffd845e070 's' 'float'
|     | |   | `-ImplicitCastExpr 0x7fffd845f470 <col:14> 'float' <LValueToRValue>
|     | |   |   `-DeclRefExpr 0x7fffd845f430 <col:14> 'float' lvalue Var 0x7fffd845edb8 'u' 'float'
|     | |   `-ImplicitCastExpr 0x7fffd845f4d8 <col:18> 'float' <LValueToRValue>
|     | |     `-DeclRefExpr 0x7fffd845f4b0 <col:18> 'float' lvalue Var 0x7fffd845ef90 'v' 'float'
|     | `-ReturnStmt 0x7fffd845f560 <line:4502:3, col:10>
|     |   `-IntegerLiteral 0x7fffd845f540 <col:10> 'int' 1
|     `-CompoundStmt 0x7fffd84606c8 <line:4503:9, line:4516:4>
|       |-DeclStmt 0x7fffd845f7c0 <line:4504:5, col:39>
|       | `-VarDecl 0x7fffd845f5d8 <col:5, line:444:37> line:4504:11 used u 'float' cinit
|       |   `-CStyleCastExpr 0x7fffd845f798 <col:15, line:444:37> 'float' <FloatingCast>
|       |     `-CallExpr 0x7fffd845f738 <col:31, col:37> 'double'
|       |       |-ImplicitCastExpr 0x7fffd845f720 <col:31> 'double (*)(double)' <FunctionToPointerDecay>
|       |       | `-DeclRefExpr 0x7fffd845f638 <col:31> 'double (double)' Function 0x7fffd828e9f0 'sqrt' 'double (double)'
|       |       `-ImplicitCastExpr 0x7fffd845f768 <line:4504:34, col:37> 'double' <FloatingCast>
|       |         `-BinaryOperator 0x7fffd845f6f8 <col:34, col:37> 'float' '/'
|       |           |-UnaryOperator 0x7fffd845f6a0 <col:34, col:35> 'float' prefix '-'
|       |           | `-ImplicitCastExpr 0x7fffd845f688 <col:35> 'float' <LValueToRValue>
|       |           |   `-DeclRefExpr 0x7fffd845f660 <col:35> 'float' lvalue Var 0x7fffd845e1c0 'p' 'float'
|       |           `-ImplicitCastExpr 0x7fffd845f6e0 <col:37> 'float' <IntegralToFloating>
|       |             `-IntegerLiteral 0x7fffd845f6c0 <col:37> 'int' 3
|       |-DeclStmt 0x7fffd845fba8 <line:4505:5, col:66>
|       | `-VarDecl 0x7fffd845f7f0 <col:5, col:65> col:11 used v 'float' cinit
|       |   `-BinaryOperator 0x7fffd845fb80 <col:15, col:65> 'float' '/'
|       |     |-CStyleCastExpr 0x7fffd845fb20 <col:15, line:456:37> 'float' <FloatingCast>
|       |     | `-CallExpr 0x7fffd845fad8 <col:31, col:37> 'double'
|       |     |   |-ImplicitCastExpr 0x7fffd845fac0 <col:31> 'double (*)(double)' <FunctionToPointerDecay>
|       |     |   | `-DeclRefExpr 0x7fffd845f850 <col:31> 'double (double)' Function 0x7fffd8278d98 'acos' 'double (double)'
|       |     |   `-BinaryOperator 0x7fffd845fa98 <line:4505:34, col:60> 'double' '/'
|       |     |     |-BinaryOperator 0x7fffd845fa38 <col:34, col:56> 'double' '*'
|       |     |     | |-UnaryOperator 0x7fffd845f9c0 <col:34, line:444:37> 'double' prefix '-'
|       |     |     | | `-CallExpr 0x7fffd845f978 <col:31, col:37> 'double'
|       |     |     | |   |-ImplicitCastExpr 0x7fffd845f960 <col:31> 'double (*)(double)' <FunctionToPointerDecay>
|       |     |     | |   | `-DeclRefExpr 0x7fffd845f878 <col:31> 'double (double)' Function 0x7fffd828e9f0 'sqrt' 'double (double)'
|       |     |     | |   `-ImplicitCastExpr 0x7fffd845f9a8 <line:4505:46, col:50> 'double' <FloatingCast>
|       |     |     | |     `-BinaryOperator 0x7fffd845f938 <col:46, col:50> 'float' '/'
|       |     |     | |       |-ImplicitCastExpr 0x7fffd845f920 <col:46, col:47> 'float' <IntegralToFloating>
|       |     |     | |       | `-UnaryOperator 0x7fffd845f8c0 <col:46, col:47> 'int' prefix '-'
|       |     |     | |       |   `-IntegerLiteral 0x7fffd845f8a0 <col:47> 'int' 27
|       |     |     | |       `-ImplicitCastExpr 0x7fffd845f908 <col:50> 'float' <LValueToRValue>
|       |     |     | |         `-DeclRefExpr 0x7fffd845f8e0 <col:50> 'float' lvalue Var 0x7fffd845e770 'p3' 'float'
|       |     |     | `-ImplicitCastExpr 0x7fffd845fa20 <col:56> 'double' <FloatingCast>
|       |     |     |   `-ImplicitCastExpr 0x7fffd845fa08 <col:56> 'float' <LValueToRValue>
|       |     |     |     `-DeclRefExpr 0x7fffd845f9e0 <col:56> 'float' lvalue Var 0x7fffd845e3c0 'q' 'float'
|       |     |     `-ImplicitCastExpr 0x7fffd845fa80 <col:60> 'double' <IntegralToFloating>
|       |     |       `-IntegerLiteral 0x7fffd845fa60 <col:60> 'int' 2
|       |     `-ImplicitCastExpr 0x7fffd845fb68 <col:65> 'float' <IntegralToFloating>
|       |       `-IntegerLiteral 0x7fffd845fb48 <col:65> 'int' 3
|       |-DeclStmt 0x7fffd845fd40 <line:4506:5, col:35>
|       | `-VarDecl 0x7fffd845fbd8 <col:5, line:455:36> line:4506:11 used m 'float' cinit
|       |   `-CStyleCastExpr 0x7fffd845fd18 <col:15, line:455:36> 'float' <FloatingCast>
|       |     `-CallExpr 0x7fffd845fca0 <col:31, col:36> 'double'
|       |       |-ImplicitCastExpr 0x7fffd845fc88 <col:31> 'double (*)(double)' <FunctionToPointerDecay>
|       |       | `-DeclRefExpr 0x7fffd845fc38 <col:31> 'double (double)' Function 0x7fffd8280330 'cos' 'double (double)'
|       |       `-ImplicitCastExpr 0x7fffd845fce8 <line:4506:33> 'double' <FloatingCast>
|       |         `-ImplicitCastExpr 0x7fffd845fcd0 <col:33> 'float' <LValueToRValue>
|       |           `-DeclRefExpr 0x7fffd845fc60 <col:33> 'float' lvalue Var 0x7fffd845f7f0 'v' 'float'
|       |-DeclStmt 0x7fffd845ffc8 <line:4507:7, col:61>
|       | `-VarDecl 0x7fffd845fd70 <col:7, col:49> col:13 used n 'float' cinit
|       |   `-BinaryOperator 0x7fffd845ffa0 <col:17, col:49> 'float' '*'
|       |     |-CStyleCastExpr 0x7fffd845ff58 <col:17, line:455:36> 'float' <FloatingCast>
|       |     | `-CallExpr 0x7fffd845ff10 <col:31, col:36> 'double'
|       |     |   |-ImplicitCastExpr 0x7fffd845fef8 <col:31> 'double (*)(double)' <FunctionToPointerDecay>
|       |     |   | `-DeclRefExpr 0x7fffd845fdd0 <col:31> 'double (double)' Function 0x7fffd8280330 'cos' 'double (double)'
|       |     |   `-BinaryOperator 0x7fffd845fed0 <line:4507:35, col:46> 'double' '-'
|       |     |     |-ImplicitCastExpr 0x7fffd845feb8 <col:35> 'double' <FloatingCast>
|       |     |     | `-ImplicitCastExpr 0x7fffd845fea0 <col:35> 'float' <LValueToRValue>
|       |     |     |   `-DeclRefExpr 0x7fffd845fdf8 <col:35> 'float' lvalue Var 0x7fffd845f7f0 'v' 'float'
|       |     |     `-BinaryOperator 0x7fffd845fe78 <col:37, col:46> 'double' '/'
|       |     |       |-FloatingLiteral 0x7fffd845fe20 <col:37> 'double' 3.141592e+00
|       |     |       `-ImplicitCastExpr 0x7fffd845fe60 <col:46> 'double' <IntegralToFloating>
|       |     |         `-IntegerLiteral 0x7fffd845fe40 <col:46> 'int' 2
|       |     `-FloatingLiteral 0x7fffd845ff80 <col:49> 'float' 1.732051e+00
|       |-BinaryOperator 0x7fffd84601d8 <line:4508:5, col:24> 'float' '='
|       | |-ArraySubscriptExpr 0x7fffd8460040 <col:5, col:8> 'float' lvalue
|       | | |-ImplicitCastExpr 0x7fffd8460028 <col:5> 'float *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fffd845ffe0 <col:5> 'float *' lvalue ParmVar 0x7fffd845dea0 'r' 'float *'
|       | | `-IntegerLiteral 0x7fffd8460008 <col:7> 'int' 0
|       | `-BinaryOperator 0x7fffd84601b0 <col:12, col:24> 'float' '+'
|       |   |-ImplicitCastExpr 0x7fffd8460198 <col:12> 'float' <LValueToRValue>
|       |   | `-DeclRefExpr 0x7fffd8460068 <col:12> 'float' lvalue Var 0x7fffd845e070 's' 'float'
|       |   `-BinaryOperator 0x7fffd8460170 <col:16, col:24> 'float' '*'
|       |     |-BinaryOperator 0x7fffd8460108 <col:16, col:20> 'float' '*'
|       |     | |-ImplicitCastExpr 0x7fffd84600d8 <col:16> 'float' <LValueToRValue>
|       |     | | `-DeclRefExpr 0x7fffd8460090 <col:16> 'float' lvalue Var 0x7fffd845f5d8 'u' 'float'
|       |     | `-ImplicitCastExpr 0x7fffd84600f0 <col:20> 'float' <IntegralToFloating>
|       |     |   `-IntegerLiteral 0x7fffd84600b8 <col:20> 'int' 2
|       |     `-ImplicitCastExpr 0x7fffd8460158 <col:24> 'float' <LValueToRValue>
|       |       `-DeclRefExpr 0x7fffd8460130 <col:24> 'float' lvalue Var 0x7fffd845fbd8 'm' 'float'
|       |-BinaryOperator 0x7fffd8460420 <line:4509:5, col:26> 'float' '='
|       | |-ArraySubscriptExpr 0x7fffd8460260 <col:5, col:8> 'float' lvalue
|       | | |-ImplicitCastExpr 0x7fffd8460248 <col:5> 'float *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fffd8460200 <col:5> 'float *' lvalue ParmVar 0x7fffd845dea0 'r' 'float *'
|       | | `-IntegerLiteral 0x7fffd8460228 <col:7> 'int' 1
|       | `-BinaryOperator 0x7fffd84603f8 <col:12, col:26> 'float' '-'
|       |   |-ImplicitCastExpr 0x7fffd84603e0 <col:12> 'float' <LValueToRValue>
|       |   | `-DeclRefExpr 0x7fffd8460288 <col:12> 'float' lvalue Var 0x7fffd845e070 's' 'float'
|       |   `-BinaryOperator 0x7fffd84603b8 <col:16, col:26> 'float' '*'
|       |     |-ImplicitCastExpr 0x7fffd84603a0 <col:16> 'float' <LValueToRValue>
|       |     | `-DeclRefExpr 0x7fffd84602b0 <col:16> 'float' lvalue Var 0x7fffd845f5d8 'u' 'float'
|       |     `-ParenExpr 0x7fffd8460380 <col:20, col:26> 'float'
|       |       `-BinaryOperator 0x7fffd8460358 <col:21, col:25> 'float' '+'
|       |         |-ImplicitCastExpr 0x7fffd8460328 <col:21> 'float' <LValueToRValue>
|       |         | `-DeclRefExpr 0x7fffd84602d8 <col:21> 'float' lvalue Var 0x7fffd845fbd8 'm' 'float'
|       |         `-ImplicitCastExpr 0x7fffd8460340 <col:25> 'float' <LValueToRValue>
|       |           `-DeclRefExpr 0x7fffd8460300 <col:25> 'float' lvalue Var 0x7fffd845fd70 'n' 'float'
|       |-BinaryOperator 0x7fffd8460668 <line:4510:5, col:26> 'float' '='
|       | |-ArraySubscriptExpr 0x7fffd84604a8 <col:5, col:8> 'float' lvalue
|       | | |-ImplicitCastExpr 0x7fffd8460490 <col:5> 'float *' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fffd8460448 <col:5> 'float *' lvalue ParmVar 0x7fffd845dea0 'r' 'float *'
|       | | `-IntegerLiteral 0x7fffd8460470 <col:7> 'int' 2
|       | `-BinaryOperator 0x7fffd8460640 <col:12, col:26> 'float' '-'
|       |   |-ImplicitCastExpr 0x7fffd8460628 <col:12> 'float' <LValueToRValue>
|       |   | `-DeclRefExpr 0x7fffd84604d0 <col:12> 'float' lvalue Var 0x7fffd845e070 's' 'float'
|       |   `-BinaryOperator 0x7fffd8460600 <col:16, col:26> 'float' '*'
|       |     |-ImplicitCastExpr 0x7fffd84605e8 <col:16> 'float' <LValueToRValue>
|       |     | `-DeclRefExpr 0x7fffd84604f8 <col:16> 'float' lvalue Var 0x7fffd845f5d8 'u' 'float'
|       |     `-ParenExpr 0x7fffd84605c8 <col:20, col:26> 'float'
|       |       `-BinaryOperator 0x7fffd84605a0 <col:21, col:25> 'float' '-'
|       |         |-ImplicitCastExpr 0x7fffd8460570 <col:21> 'float' <LValueToRValue>
|       |         | `-DeclRefExpr 0x7fffd8460520 <col:21> 'float' lvalue Var 0x7fffd845fbd8 'm' 'float'
|       |         `-ImplicitCastExpr 0x7fffd8460588 <col:25> 'float' <LValueToRValue>
|       |           `-DeclRefExpr 0x7fffd8460548 <col:25> 'float' lvalue Var 0x7fffd845fd70 'n' 'float'
|       `-ReturnStmt 0x7fffd84606b0 <line:4515:5, col:12>
|         `-IntegerLiteral 0x7fffd8460690 <col:12> 'int' 3
|-FunctionDecl 0x7fffd8460d08 prev 0x7fffd835ac58 <line:501:19, line:4698:1> line:4519:27 used stbtt_GetGlyphSDF 'unsigned char *(const stbtt_fontinfo *, float, int, int, unsigned char, float, int *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd84607a0 <col:45, col:67> col:67 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8460870 <col:73, col:79> col:79 used scale 'float'
| |-ParmVarDecl 0x7fffd84608e8 <col:86, col:90> col:90 used glyph 'int'
| |-ParmVarDecl 0x7fffd8460960 <col:97, col:101> col:101 used padding 'int'
| |-ParmVarDecl 0x7fffd84609d8 <col:110, col:124> col:124 used onedge_value 'unsigned char'
| |-ParmVarDecl 0x7fffd8460a50 <col:138, col:144> col:144 used pixel_dist_scale 'float'
| |-ParmVarDecl 0x7fffd8460ac8 <col:162, col:167> col:167 used width 'int *'
| |-ParmVarDecl 0x7fffd8460b40 <col:174, col:179> col:179 used height 'int *'
| |-ParmVarDecl 0x7fffd8460bb8 <col:187, col:192> col:192 used xoff 'int *'
| |-ParmVarDecl 0x7fffd8460c30 <col:198, col:203> col:203 used yoff 'int *'
| `-CompoundStmt 0x7fffd8473df8 <line:4520:1, line:4698:1>
|   |-DeclStmt 0x7fffd8460f80 <line:4521:4, col:42>
|   | |-VarDecl 0x7fffd8460e10 <col:4, col:20> col:10 used scale_x 'float' cinit
|   | | `-ImplicitCastExpr 0x7fffd8460e98 <col:20> 'float' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8460e70 <col:20> 'float' lvalue ParmVar 0x7fffd8460870 'scale' 'float'
|   | `-VarDecl 0x7fffd8460ec8 <col:4, col:37> col:27 used scale_y 'float' cinit
|   |   `-ImplicitCastExpr 0x7fffd8460f50 <col:37> 'float' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd8460f28 <col:37> 'float' lvalue ParmVar 0x7fffd8460870 'scale' 'float'
|   |-DeclStmt 0x7fffd84611a0 <line:4522:4, col:23>
|   | |-VarDecl 0x7fffd8460fb0 <col:4, col:8> col:8 used ix0 'int'
|   | |-VarDecl 0x7fffd8461028 <col:4, col:12> col:12 used iy0 'int'
|   | |-VarDecl 0x7fffd84610a0 <col:4, col:16> col:16 used ix1 'int'
|   | `-VarDecl 0x7fffd8461118 <col:4, col:20> col:20 used iy1 'int'
|   |-DeclStmt 0x7fffd84612c0 <line:4523:4, col:11>
|   | |-VarDecl 0x7fffd84611d0 <col:4, col:8> col:8 used w 'int'
|   | `-VarDecl 0x7fffd8461248 <col:4, col:10> col:10 used h 'int'
|   |-DeclStmt 0x7fffd8461350 <line:4524:4, col:23>
|   | `-VarDecl 0x7fffd84612f0 <col:4, col:19> col:19 used data 'unsigned char *'
|   |-IfStmt 0x7fffd84614b8 <line:4526:4, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd84613e0 <././stb/stb_truetype.h:4526:8, col:17> 'int' '=='
|   | | |-ImplicitCastExpr 0x7fffd84613b0 <col:8> 'float' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd8461368 <col:8> 'float' lvalue ParmVar 0x7fffd8460870 'scale' 'float'
|   | | `-ImplicitCastExpr 0x7fffd84613c8 <col:17> 'float' <IntegralToFloating>
|   | |   `-IntegerLiteral 0x7fffd8461390 <col:17> 'int' 0
|   | |-ReturnStmt 0x7fffd84614a0 <col:20, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25>
|   | | `-ImplicitCastExpr 0x7fffd8461488 <col:16, col:25> 'unsigned char *' <NullToPointer>
|   | |   `-ParenExpr 0x7fffd8461468 <col:16, col:25> 'void *'
|   | |     `-CStyleCastExpr 0x7fffd8461440 <col:17, col:24> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x7fffd8461408 <col:24> 'int' 0
|   | `-<<<NULL>>>
|   |-CallExpr 0x7fffd8461730 <././stb/stb_truetype.h:4528:4, col:93> 'void'
|   | |-ImplicitCastExpr 0x7fffd8461718 <col:4> 'void (*)(const stbtt_fontinfo *, int, float, float, float, float, int *, int *, int *, int *)' <FunctionToPointerDecay>
|   | | `-DeclRefExpr 0x7fffd84614f0 <col:4> 'void (const stbtt_fontinfo *, int, float, float, float, float, int *, int *, int *, int *)' Function 0x7fffd83db948 'stbtt_GetGlyphBitmapBoxSubpixel' 'void (const stbtt_fontinfo *, int, float, float, float, float, int *, int *, int *, int *)'
|   | |-ImplicitCastExpr 0x7fffd84617a8 <col:36> 'const stbtt_fontinfo *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd8461518 <col:36> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd84607a0 'info' 'const stbtt_fontinfo *'
|   | |-ImplicitCastExpr 0x7fffd84617c0 <col:42> 'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd8461540 <col:42> 'int' lvalue ParmVar 0x7fffd84608e8 'glyph' 'int'
|   | |-ImplicitCastExpr 0x7fffd84617d8 <col:49> 'float' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd8461568 <col:49> 'float' lvalue ParmVar 0x7fffd8460870 'scale' 'float'
|   | |-ImplicitCastExpr 0x7fffd84617f0 <col:56> 'float' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd8461590 <col:56> 'float' lvalue ParmVar 0x7fffd8460870 'scale' 'float'
|   | |-FloatingLiteral 0x7fffd84615b8 <col:63> 'float' 0.000000e+00
|   | |-FloatingLiteral 0x7fffd84615d8 <col:68> 'float' 0.000000e+00
|   | |-UnaryOperator 0x7fffd8461620 <col:74, col:75> 'int *' prefix '&'
|   | | `-DeclRefExpr 0x7fffd84615f8 <col:75> 'int' lvalue Var 0x7fffd8460fb0 'ix0' 'int'
|   | |-UnaryOperator 0x7fffd8461668 <col:79, col:80> 'int *' prefix '&'
|   | | `-DeclRefExpr 0x7fffd8461640 <col:80> 'int' lvalue Var 0x7fffd8461028 'iy0' 'int'
|   | |-UnaryOperator 0x7fffd84616b0 <col:84, col:85> 'int *' prefix '&'
|   | | `-DeclRefExpr 0x7fffd8461688 <col:85> 'int' lvalue Var 0x7fffd84610a0 'ix1' 'int'
|   | `-UnaryOperator 0x7fffd84616f8 <col:89, col:90> 'int *' prefix '&'
|   |   `-DeclRefExpr 0x7fffd84616d0 <col:90> 'int' lvalue Var 0x7fffd8461118 'iy1' 'int'
|   |-IfStmt 0x7fffd8461a30 <line:4531:4, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd8461958 <././stb/stb_truetype.h:4531:8, col:29> 'int' '||'
|   | | |-BinaryOperator 0x7fffd8461888 <col:8, col:15> 'int' '=='
|   | | | |-ImplicitCastExpr 0x7fffd8461858 <col:8> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x7fffd8461808 <col:8> 'int' lvalue Var 0x7fffd8460fb0 'ix0' 'int'
|   | | | `-ImplicitCastExpr 0x7fffd8461870 <col:15> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd8461830 <col:15> 'int' lvalue Var 0x7fffd84610a0 'ix1' 'int'
|   | | `-BinaryOperator 0x7fffd8461930 <col:22, col:29> 'int' '=='
|   | |   |-ImplicitCastExpr 0x7fffd8461900 <col:22> 'int' <LValueToRValue>
|   | |   | `-DeclRefExpr 0x7fffd84618b0 <col:22> 'int' lvalue Var 0x7fffd8461028 'iy0' 'int'
|   | |   `-ImplicitCastExpr 0x7fffd8461918 <col:29> 'int' <LValueToRValue>
|   | |     `-DeclRefExpr 0x7fffd84618d8 <col:29> 'int' lvalue Var 0x7fffd8461118 'iy1' 'int'
|   | |-ReturnStmt 0x7fffd8461a18 <line:4532:7, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25>
|   | | `-ImplicitCastExpr 0x7fffd8461a00 <col:16, col:25> 'unsigned char *' <NullToPointer>
|   | |   `-ParenExpr 0x7fffd84619e0 <col:16, col:25> 'void *'
|   | |     `-CStyleCastExpr 0x7fffd84619b8 <col:17, col:24> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x7fffd8461980 <col:24> 'int' 0
|   | `-<<<NULL>>>
|   |-CompoundAssignOperator 0x7fffd8461ad0 <././stb/stb_truetype.h:4534:4, col:11> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x7fffd8461a68 <col:4> 'int' lvalue Var 0x7fffd8460fb0 'ix0' 'int'
|   | `-ImplicitCastExpr 0x7fffd8461ab8 <col:11> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd8461a90 <col:11> 'int' lvalue ParmVar 0x7fffd8460960 'padding' 'int'
|   |-CompoundAssignOperator 0x7fffd8461b70 <line:4535:4, col:11> 'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x7fffd8461b08 <col:4> 'int' lvalue Var 0x7fffd8461028 'iy0' 'int'
|   | `-ImplicitCastExpr 0x7fffd8461b58 <col:11> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd8461b30 <col:11> 'int' lvalue ParmVar 0x7fffd8460960 'padding' 'int'
|   |-CompoundAssignOperator 0x7fffd8461c10 <line:4536:4, col:11> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x7fffd8461ba8 <col:4> 'int' lvalue Var 0x7fffd84610a0 'ix1' 'int'
|   | `-ImplicitCastExpr 0x7fffd8461bf8 <col:11> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd8461bd0 <col:11> 'int' lvalue ParmVar 0x7fffd8460960 'padding' 'int'
|   |-CompoundAssignOperator 0x7fffd8461cb0 <line:4537:4, col:11> 'int' '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   | |-DeclRefExpr 0x7fffd8461c48 <col:4> 'int' lvalue Var 0x7fffd8461118 'iy1' 'int'
|   | `-ImplicitCastExpr 0x7fffd8461c98 <col:11> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x7fffd8461c70 <col:11> 'int' lvalue ParmVar 0x7fffd8460960 'padding' 'int'
|   |-BinaryOperator 0x7fffd8461dd8 <line:4539:4, col:18> 'int' '='
|   | |-DeclRefExpr 0x7fffd8461ce8 <col:4> 'int' lvalue Var 0x7fffd84611d0 'w' 'int'
|   | `-ParenExpr 0x7fffd8461db8 <col:8, col:18> 'int'
|   |   `-BinaryOperator 0x7fffd8461d90 <col:9, col:15> 'int' '-'
|   |     |-ImplicitCastExpr 0x7fffd8461d60 <col:9> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd8461d10 <col:9> 'int' lvalue Var 0x7fffd84610a0 'ix1' 'int'
|   |     `-ImplicitCastExpr 0x7fffd8461d78 <col:15> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd8461d38 <col:15> 'int' lvalue Var 0x7fffd8460fb0 'ix0' 'int'
|   |-BinaryOperator 0x7fffd8461ef0 <line:4540:4, col:18> 'int' '='
|   | |-DeclRefExpr 0x7fffd8461e00 <col:4> 'int' lvalue Var 0x7fffd8461248 'h' 'int'
|   | `-ParenExpr 0x7fffd8461ed0 <col:8, col:18> 'int'
|   |   `-BinaryOperator 0x7fffd8461ea8 <col:9, col:15> 'int' '-'
|   |     |-ImplicitCastExpr 0x7fffd8461e78 <col:9> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd8461e28 <col:9> 'int' lvalue Var 0x7fffd8461118 'iy1' 'int'
|   |     `-ImplicitCastExpr 0x7fffd8461e90 <col:15> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x7fffd8461e50 <col:15> 'int' lvalue Var 0x7fffd8461028 'iy0' 'int'
|   |-IfStmt 0x7fffd8462020 <line:4542:4, col:26>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd8461f40 <col:8> 'int *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd8461f18 <col:8> 'int *' lvalue ParmVar 0x7fffd8460ac8 'width' 'int *'
|   | |-BinaryOperator 0x7fffd8461ff8 <col:16, col:26> 'int' '='
|   | | |-UnaryOperator 0x7fffd8461f98 <col:16, col:17> 'int' lvalue prefix '*'
|   | | | `-ImplicitCastExpr 0x7fffd8461f80 <col:17> 'int *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd8461f58 <col:17> 'int *' lvalue ParmVar 0x7fffd8460ac8 'width' 'int *'
|   | | `-ImplicitCastExpr 0x7fffd8461fe0 <col:26> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8461fb8 <col:26> 'int' lvalue Var 0x7fffd84611d0 'w' 'int'
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd8462160 <line:4543:4, col:26>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd8462080 <col:8> 'int *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd8462058 <col:8> 'int *' lvalue ParmVar 0x7fffd8460b40 'height' 'int *'
|   | |-BinaryOperator 0x7fffd8462138 <col:16, col:26> 'int' '='
|   | | |-UnaryOperator 0x7fffd84620d8 <col:16, col:17> 'int' lvalue prefix '*'
|   | | | `-ImplicitCastExpr 0x7fffd84620c0 <col:17> 'int *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd8462098 <col:17> 'int *' lvalue ParmVar 0x7fffd8460b40 'height' 'int *'
|   | | `-ImplicitCastExpr 0x7fffd8462120 <col:26> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd84620f8 <col:26> 'int' lvalue Var 0x7fffd8461248 'h' 'int'
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd84622a0 <line:4544:4, col:26>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd84621c0 <col:8> 'int *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd8462198 <col:8> 'int *' lvalue ParmVar 0x7fffd8460bb8 'xoff' 'int *'
|   | |-BinaryOperator 0x7fffd8462278 <col:16, col:26> 'int' '='
|   | | |-UnaryOperator 0x7fffd8462218 <col:16, col:17> 'int' lvalue prefix '*'
|   | | | `-ImplicitCastExpr 0x7fffd8462200 <col:17> 'int *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd84621d8 <col:17> 'int *' lvalue ParmVar 0x7fffd8460bb8 'xoff' 'int *'
|   | | `-ImplicitCastExpr 0x7fffd8462260 <col:26> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8462238 <col:26> 'int' lvalue Var 0x7fffd8460fb0 'ix0' 'int'
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd84623e0 <line:4545:4, col:26>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd8462300 <col:8> 'int *' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd84622d8 <col:8> 'int *' lvalue ParmVar 0x7fffd8460c30 'yoff' 'int *'
|   | |-BinaryOperator 0x7fffd84623b8 <col:16, col:26> 'int' '='
|   | | |-UnaryOperator 0x7fffd8462358 <col:16, col:17> 'int' lvalue prefix '*'
|   | | | `-ImplicitCastExpr 0x7fffd8462340 <col:17> 'int *' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd8462318 <col:17> 'int *' lvalue ParmVar 0x7fffd8460c30 'yoff' 'int *'
|   | | `-ImplicitCastExpr 0x7fffd84623a0 <col:26> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd8462378 <col:26> 'int' lvalue Var 0x7fffd8461028 'iy0' 'int'
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x7fffd84624a0 <line:4548:4, col:15> 'float' '='
|   | |-DeclRefExpr 0x7fffd8462418 <col:4> 'float' lvalue Var 0x7fffd8460ec8 'scale_y' 'float'
|   | `-UnaryOperator 0x7fffd8462480 <col:14, col:15> 'float' prefix '-'
|   |   `-ImplicitCastExpr 0x7fffd8462468 <col:15> 'float' <LValueToRValue>
|   |     `-DeclRefExpr 0x7fffd8462440 <col:15> 'float' lvalue Var 0x7fffd8460ec8 'scale_y' 'float'
|   |-CompoundStmt 0x7fffd8473d40 <line:4550:4, line:4696:4>
|   | |-DeclStmt 0x7fffd84626d0 <line:4551:7, col:18>
|   | | |-VarDecl 0x7fffd84624e0 <col:7, col:11> col:11 used x 'int'
|   | | |-VarDecl 0x7fffd8462558 <col:7, col:13> col:13 used y 'int'
|   | | |-VarDecl 0x7fffd84625d0 <col:7, col:15> col:15 used i 'int'
|   | | `-VarDecl 0x7fffd8462648 <col:7, col:17> col:17 used j 'int'
|   | |-DeclStmt 0x7fffd8462760 <line:4552:7, col:24>
|   | | `-VarDecl 0x7fffd8462700 <col:7, col:14> col:14 used precompute 'float *'
|   | |-DeclStmt 0x7fffd84627e8 <line:4553:7, col:26>
|   | | `-VarDecl 0x7fffd8462788 <col:7, col:21> col:21 used verts 'stbtt_vertex *'
|   | |-DeclStmt 0x7fffd8462a28 <line:4554:7, col:63>
|   | | `-VarDecl 0x7fffd8462880 <col:7, col:62> col:11 used num_verts 'int' cinit
|   | |   `-CallExpr 0x7fffd84629b8 <col:23, col:62> 'int'
|   | |     |-ImplicitCastExpr 0x7fffd84629a0 <col:23> 'int (*)(const stbtt_fontinfo *, int, stbtt_vertex **)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x7fffd84628e0 <col:23> 'int (const stbtt_fontinfo *, int, stbtt_vertex **)' Function 0x7fffd83bf8a8 'stbtt_GetGlyphShape' 'int (const stbtt_fontinfo *, int, stbtt_vertex **)'
|   | |     |-ImplicitCastExpr 0x7fffd84629f8 <col:43> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x7fffd8462908 <col:43> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd84607a0 'info' 'const stbtt_fontinfo *'
|   | |     |-ImplicitCastExpr 0x7fffd8462a10 <col:49> 'int' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x7fffd8462930 <col:49> 'int' lvalue ParmVar 0x7fffd84608e8 'glyph' 'int'
|   | |     `-UnaryOperator 0x7fffd8462980 <col:56, col:57> 'stbtt_vertex **' prefix '&'
|   | |       `-DeclRefExpr 0x7fffd8462958 <col:57> 'stbtt_vertex *' lvalue Var 0x7fffd8462788 'verts' 'stbtt_vertex *'
|   | |-BinaryOperator 0x7fffd8462d70 <line:4555:7, line:467:51> 'unsigned char *' '='
|   | | |-DeclRefExpr 0x7fffd8462a40 <line:4555:7> 'unsigned char *' lvalue Var 0x7fffd84612f0 'data' 'unsigned char *'
|   | | `-CStyleCastExpr 0x7fffd8462d48 <col:14, line:467:51> 'unsigned char *' <BitCast>
|   | |   `-ParenExpr 0x7fffd8462d28 <col:31, col:51> 'void *'
|   | |     `-BinaryOperator 0x7fffd8462d00 <col:32, col:50> 'void *' ','
|   | |       |-CStyleCastExpr 0x7fffd8462b58 <col:32, col:40> 'void' <ToVoid>
|   | |       | `-ImplicitCastExpr 0x7fffd8462b40 <col:38, col:40> 'void *' <LValueToRValue>
|   | |       |   `-ParenExpr 0x7fffd8462b20 <col:38, col:40> 'void *const' lvalue
|   | |       |     `-MemberExpr 0x7fffd8462aa8 <line:4555:52, col:58> 'void *const' lvalue ->userdata 0x7fffd834cb78
|   | |       |       `-ImplicitCastExpr 0x7fffd8462a90 <col:52> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |       |         `-DeclRefExpr 0x7fffd8462a68 <col:52> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd84607a0 'info' 'const stbtt_fontinfo *'
|   | |       `-CallExpr 0x7fffd8462c68 <line:467:42, col:50> 'void *'
|   | |         |-ImplicitCastExpr 0x7fffd8462c50 <col:42> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|   | |         | `-DeclRefExpr 0x7fffd8462b80 <col:42> 'void *(unsigned long)' Function 0x7fffd831b4b0 'malloc' 'void *(unsigned long)'
|   | |         `-ImplicitCastExpr 0x7fffd8462c98 <line:4555:45, col:49> 'unsigned long' <IntegralCast>
|   | |           `-BinaryOperator 0x7fffd8462c28 <col:45, col:49> 'int' '*'
|   | |             |-ImplicitCastExpr 0x7fffd8462bf8 <col:45> 'int' <LValueToRValue>
|   | |             | `-DeclRefExpr 0x7fffd8462ba8 <col:45> 'int' lvalue Var 0x7fffd84611d0 'w' 'int'
|   | |             `-ImplicitCastExpr 0x7fffd8462c10 <col:49> 'int' <LValueToRValue>
|   | |               `-DeclRefExpr 0x7fffd8462bd0 <col:49> 'int' lvalue Var 0x7fffd8461248 'h' 'int'
|   | |-BinaryOperator 0x7fffd84630c0 <line:4556:7, line:467:51> 'float *' '='
|   | | |-DeclRefExpr 0x7fffd8462d98 <line:4556:7> 'float *' lvalue Var 0x7fffd8462700 'precompute' 'float *'
|   | | `-CStyleCastExpr 0x7fffd8463098 <col:20, line:467:51> 'float *' <BitCast>
|   | |   `-ParenExpr 0x7fffd8463078 <col:31, col:51> 'void *'
|   | |     `-BinaryOperator 0x7fffd8463050 <col:32, col:50> 'void *' ','
|   | |       |-CStyleCastExpr 0x7fffd8462eb0 <col:32, col:40> 'void' <ToVoid>
|   | |       | `-ImplicitCastExpr 0x7fffd8462e98 <col:38, col:40> 'void *' <LValueToRValue>
|   | |       |   `-ParenExpr 0x7fffd8462e78 <col:38, col:40> 'void *const' lvalue
|   | |       |     `-MemberExpr 0x7fffd8462e00 <line:4556:70, col:76> 'void *const' lvalue ->userdata 0x7fffd834cb78
|   | |       |       `-ImplicitCastExpr 0x7fffd8462de8 <col:70> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |       |         `-DeclRefExpr 0x7fffd8462dc0 <col:70> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd84607a0 'info' 'const stbtt_fontinfo *'
|   | |       `-CallExpr 0x7fffd8462fd0 <line:467:42, col:50> 'void *'
|   | |         |-ImplicitCastExpr 0x7fffd8462fb8 <col:42> 'void *(*)(unsigned long)' <FunctionToPointerDecay>
|   | |         | `-DeclRefExpr 0x7fffd8462ed8 <col:42> 'void *(unsigned long)' Function 0x7fffd831b4b0 'malloc' 'void *(unsigned long)'
|   | |         `-BinaryOperator 0x7fffd8462f90 <line:4556:43, col:67> 'unsigned long' '*'
|   | |           |-ImplicitCastExpr 0x7fffd8462f78 <col:43> 'unsigned long' <IntegralCast>
|   | |           | `-ImplicitCastExpr 0x7fffd8462f60 <col:43> 'int' <LValueToRValue>
|   | |           |   `-DeclRefExpr 0x7fffd8462f00 <col:43> 'int' lvalue Var 0x7fffd8462880 'num_verts' 'int'
|   | |           `-UnaryExprOrTypeTraitExpr 0x7fffd8462f40 <col:55, col:67> 'unsigned long' sizeof 'float'
|   | |-ForStmt 0x7fffd8465f50 <line:4558:7, line:4576:7>
|   | | |-BinaryOperator 0x7fffd8463230 <line:4558:12, col:28> 'int' ','
|   | | | |-BinaryOperator 0x7fffd8463130 <col:12, col:14> 'int' '='
|   | | | | |-DeclRefExpr 0x7fffd84630e8 <col:12> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | | | | `-IntegerLiteral 0x7fffd8463110 <col:14> 'int' 0
|   | | | `-BinaryOperator 0x7fffd8463208 <col:16, col:28> 'int' '='
|   | | |   |-DeclRefExpr 0x7fffd8463158 <col:16> 'int' lvalue Var 0x7fffd8462648 'j' 'int'
|   | | |   `-BinaryOperator 0x7fffd84631e0 <col:18, col:28> 'int' '-'
|   | | |     |-ImplicitCastExpr 0x7fffd84631c8 <col:18> 'int' <LValueToRValue>
|   | | |     | `-DeclRefExpr 0x7fffd8463180 <col:18> 'int' lvalue Var 0x7fffd8462880 'num_verts' 'int'
|   | | |     `-IntegerLiteral 0x7fffd84631a8 <col:28> 'int' 1
|   | | |-<<<NULL>>>
|   | | |-BinaryOperator 0x7fffd84632d8 <col:31, col:35> 'int' '<'
|   | | | |-ImplicitCastExpr 0x7fffd84632a8 <col:31> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x7fffd8463258 <col:31> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | | | `-ImplicitCastExpr 0x7fffd84632c0 <col:35> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd8463280 <col:35> 'int' lvalue Var 0x7fffd8462880 'num_verts' 'int'
|   | | |-BinaryOperator 0x7fffd8463370 <col:46, col:49> 'int' '='
|   | | | |-DeclRefExpr 0x7fffd8463300 <col:46> 'int' lvalue Var 0x7fffd8462648 'j' 'int'
|   | | | `-UnaryOperator 0x7fffd8463350 <col:48, col:49> 'int' postfix '++'
|   | | |   `-DeclRefExpr 0x7fffd8463328 <col:48> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | | `-CompoundStmt 0x7fffd8465f38 <col:53, line:4576:7>
|   | |   `-IfStmt 0x7fffd8465f00 <line:4559:10, line:4575:29>
|   | |     |-<<<NULL>>>
|   | |     |-<<<NULL>>>
|   | |     |-BinaryOperator 0x7fffd84634d0 <line:4559:14, col:31> 'int' '=='
|   | |     | |-ImplicitCastExpr 0x7fffd84634b8 <col:14, col:23> 'int' <IntegralCast>
|   | |     | | `-ImplicitCastExpr 0x7fffd84634a0 <col:14, col:23> 'unsigned char' <LValueToRValue>
|   | |     | |   `-MemberExpr 0x7fffd8463440 <col:14, col:23> 'unsigned char' lvalue .type 0x7fffd8351a18
|   | |     | |     `-ArraySubscriptExpr 0x7fffd8463418 <col:14, col:21> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | |     | |       |-ImplicitCastExpr 0x7fffd84633e8 <col:14> 'stbtt_vertex *' <LValueToRValue>
|   | |     | |       | `-DeclRefExpr 0x7fffd8463398 <col:14> 'stbtt_vertex *' lvalue Var 0x7fffd8462788 'verts' 'stbtt_vertex *'
|   | |     | |       `-ImplicitCastExpr 0x7fffd8463400 <col:20> 'int' <LValueToRValue>
|   | |     | |         `-DeclRefExpr 0x7fffd84633c0 <col:20> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |     | `-DeclRefExpr 0x7fffd8463478 <col:31> 'int' EnumConstant 0x7fffd8351638 'STBTT_vline' 'int'
|   | |     |-CompoundStmt 0x7fffd84644d0 <col:44, line:4564:10>
|   | |     | |-DeclStmt 0x7fffd8463920 <line:4560:13, col:67>
|   | |     | | |-VarDecl 0x7fffd8463510 <col:13, col:35> col:19 used x0 'float' cinit
|   | |     | | | `-BinaryOperator 0x7fffd84636d8 <col:24, col:35> 'float' '*'
|   | |     | | |   |-ImplicitCastExpr 0x7fffd84636c0 <col:24, col:33> 'float' <IntegralToFloating>
|   | |     | | |   | `-ImplicitCastExpr 0x7fffd8463690 <col:24, col:33> 'int' <IntegralCast>
|   | |     | | |   |   `-ImplicitCastExpr 0x7fffd8463678 <col:24, col:33> 'short' <LValueToRValue>
|   | |     | | |   |     `-MemberExpr 0x7fffd8463618 <col:24, col:33> 'short' lvalue .x 0x7fffd83517d8
|   | |     | | |   |       `-ArraySubscriptExpr 0x7fffd84635f0 <col:24, col:31> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | |     | | |   |         |-ImplicitCastExpr 0x7fffd84635c0 <col:24> 'stbtt_vertex *' <LValueToRValue>
|   | |     | | |   |         | `-DeclRefExpr 0x7fffd8463570 <col:24> 'stbtt_vertex *' lvalue Var 0x7fffd8462788 'verts' 'stbtt_vertex *'
|   | |     | | |   |         `-ImplicitCastExpr 0x7fffd84635d8 <col:30> 'int' <LValueToRValue>
|   | |     | | |   |           `-DeclRefExpr 0x7fffd8463598 <col:30> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |     | | |   `-ImplicitCastExpr 0x7fffd84636a8 <col:35> 'float' <LValueToRValue>
|   | |     | | |     `-DeclRefExpr 0x7fffd8463650 <col:35> 'float' lvalue Var 0x7fffd8460e10 'scale_x' 'float'
|   | |     | | `-VarDecl 0x7fffd8463718 <col:13, col:60> col:44 used y0 'float' cinit
|   | |     | |   `-BinaryOperator 0x7fffd84638e0 <col:49, col:60> 'float' '*'
|   | |     | |     |-ImplicitCastExpr 0x7fffd84638c8 <col:49, col:58> 'float' <IntegralToFloating>
|   | |     | |     | `-ImplicitCastExpr 0x7fffd8463898 <col:49, col:58> 'int' <IntegralCast>
|   | |     | |     |   `-ImplicitCastExpr 0x7fffd8463880 <col:49, col:58> 'short' <LValueToRValue>
|   | |     | |     |     `-MemberExpr 0x7fffd8463820 <col:49, col:58> 'short' lvalue .y 0x7fffd8351838
|   | |     | |     |       `-ArraySubscriptExpr 0x7fffd84637f8 <col:49, col:56> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | |     | |     |         |-ImplicitCastExpr 0x7fffd84637c8 <col:49> 'stbtt_vertex *' <LValueToRValue>
|   | |     | |     |         | `-DeclRefExpr 0x7fffd8463778 <col:49> 'stbtt_vertex *' lvalue Var 0x7fffd8462788 'verts' 'stbtt_vertex *'
|   | |     | |     |         `-ImplicitCastExpr 0x7fffd84637e0 <col:55> 'int' <LValueToRValue>
|   | |     | |     |           `-DeclRefExpr 0x7fffd84637a0 <col:55> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |     | |     `-ImplicitCastExpr 0x7fffd84638b0 <col:60> 'float' <LValueToRValue>
|   | |     | |       `-DeclRefExpr 0x7fffd8463858 <col:60> 'float' lvalue Var 0x7fffd8460ec8 'scale_y' 'float'
|   | |     | |-DeclStmt 0x7fffd8463d60 <line:4561:13, col:67>
|   | |     | | |-VarDecl 0x7fffd8463950 <col:13, col:35> col:19 used x1 'float' cinit
|   | |     | | | `-BinaryOperator 0x7fffd8463b18 <col:24, col:35> 'float' '*'
|   | |     | | |   |-ImplicitCastExpr 0x7fffd8463b00 <col:24, col:33> 'float' <IntegralToFloating>
|   | |     | | |   | `-ImplicitCastExpr 0x7fffd8463ad0 <col:24, col:33> 'int' <IntegralCast>
|   | |     | | |   |   `-ImplicitCastExpr 0x7fffd8463ab8 <col:24, col:33> 'short' <LValueToRValue>
|   | |     | | |   |     `-MemberExpr 0x7fffd8463a58 <col:24, col:33> 'short' lvalue .x 0x7fffd83517d8
|   | |     | | |   |       `-ArraySubscriptExpr 0x7fffd8463a30 <col:24, col:31> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | |     | | |   |         |-ImplicitCastExpr 0x7fffd8463a00 <col:24> 'stbtt_vertex *' <LValueToRValue>
|   | |     | | |   |         | `-DeclRefExpr 0x7fffd84639b0 <col:24> 'stbtt_vertex *' lvalue Var 0x7fffd8462788 'verts' 'stbtt_vertex *'
|   | |     | | |   |         `-ImplicitCastExpr 0x7fffd8463a18 <col:30> 'int' <LValueToRValue>
|   | |     | | |   |           `-DeclRefExpr 0x7fffd84639d8 <col:30> 'int' lvalue Var 0x7fffd8462648 'j' 'int'
|   | |     | | |   `-ImplicitCastExpr 0x7fffd8463ae8 <col:35> 'float' <LValueToRValue>
|   | |     | | |     `-DeclRefExpr 0x7fffd8463a90 <col:35> 'float' lvalue Var 0x7fffd8460e10 'scale_x' 'float'
|   | |     | | `-VarDecl 0x7fffd8463b58 <col:13, col:60> col:44 used y1 'float' cinit
|   | |     | |   `-BinaryOperator 0x7fffd8463d20 <col:49, col:60> 'float' '*'
|   | |     | |     |-ImplicitCastExpr 0x7fffd8463d08 <col:49, col:58> 'float' <IntegralToFloating>
|   | |     | |     | `-ImplicitCastExpr 0x7fffd8463cd8 <col:49, col:58> 'int' <IntegralCast>
|   | |     | |     |   `-ImplicitCastExpr 0x7fffd8463cc0 <col:49, col:58> 'short' <LValueToRValue>
|   | |     | |     |     `-MemberExpr 0x7fffd8463c60 <col:49, col:58> 'short' lvalue .y 0x7fffd8351838
|   | |     | |     |       `-ArraySubscriptExpr 0x7fffd8463c38 <col:49, col:56> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | |     | |     |         |-ImplicitCastExpr 0x7fffd8463c08 <col:49> 'stbtt_vertex *' <LValueToRValue>
|   | |     | |     |         | `-DeclRefExpr 0x7fffd8463bb8 <col:49> 'stbtt_vertex *' lvalue Var 0x7fffd8462788 'verts' 'stbtt_vertex *'
|   | |     | |     |         `-ImplicitCastExpr 0x7fffd8463c20 <col:55> 'int' <LValueToRValue>
|   | |     | |     |           `-DeclRefExpr 0x7fffd8463be0 <col:55> 'int' lvalue Var 0x7fffd8462648 'j' 'int'
|   | |     | |     `-ImplicitCastExpr 0x7fffd8463cf0 <col:60> 'float' <LValueToRValue>
|   | |     | |       `-DeclRefExpr 0x7fffd8463c98 <col:60> 'float' lvalue Var 0x7fffd8460ec8 'scale_y' 'float'
|   | |     | |-DeclStmt 0x7fffd8464250 <line:4562:13, col:79>
|   | |     | | `-VarDecl 0x7fffd8463d90 <col:13, line:444:37> line:4562:19 used dist 'float' cinit
|   | |     | |   `-CStyleCastExpr 0x7fffd8464228 <col:26, line:444:37> 'float' <FloatingCast>
|   | |     | |     `-CallExpr 0x7fffd84641c8 <col:31, col:37> 'double'
|   | |     | |       |-ImplicitCastExpr 0x7fffd84641b0 <col:31> 'double (*)(double)' <FunctionToPointerDecay>
|   | |     | |       | `-DeclRefExpr 0x7fffd8463df0 <col:31> 'double (double)' Function 0x7fffd828e9f0 'sqrt' 'double (double)'
|   | |     | |       `-ImplicitCastExpr 0x7fffd84641f8 <line:4562:45, col:77> 'double' <FloatingCast>
|   | |     | |         `-BinaryOperator 0x7fffd8464188 <col:45, col:77> 'float' '+'
|   | |     | |           |-BinaryOperator 0x7fffd8463fa8 <col:45, col:59> 'float' '*'
|   | |     | |           | |-ParenExpr 0x7fffd8463ec0 <col:45, col:51> 'float'
|   | |     | |           | | `-BinaryOperator 0x7fffd8463e98 <col:46, col:49> 'float' '-'
|   | |     | |           | |   |-ImplicitCastExpr 0x7fffd8463e68 <col:46> 'float' <LValueToRValue>
|   | |     | |           | |   | `-DeclRefExpr 0x7fffd8463e18 <col:46> 'float' lvalue Var 0x7fffd8463950 'x1' 'float'
|   | |     | |           | |   `-ImplicitCastExpr 0x7fffd8463e80 <col:49> 'float' <LValueToRValue>
|   | |     | |           | |     `-DeclRefExpr 0x7fffd8463e40 <col:49> 'float' lvalue Var 0x7fffd8463510 'x0' 'float'
|   | |     | |           | `-ParenExpr 0x7fffd8463f88 <col:53, col:59> 'float'
|   | |     | |           |   `-BinaryOperator 0x7fffd8463f60 <col:54, col:57> 'float' '-'
|   | |     | |           |     |-ImplicitCastExpr 0x7fffd8463f30 <col:54> 'float' <LValueToRValue>
|   | |     | |           |     | `-DeclRefExpr 0x7fffd8463ee0 <col:54> 'float' lvalue Var 0x7fffd8463950 'x1' 'float'
|   | |     | |           |     `-ImplicitCastExpr 0x7fffd8463f48 <col:57> 'float' <LValueToRValue>
|   | |     | |           |       `-DeclRefExpr 0x7fffd8463f08 <col:57> 'float' lvalue Var 0x7fffd8463510 'x0' 'float'
|   | |     | |           `-BinaryOperator 0x7fffd8464160 <col:63, col:77> 'float' '*'
|   | |     | |             |-ParenExpr 0x7fffd8464078 <col:63, col:69> 'float'
|   | |     | |             | `-BinaryOperator 0x7fffd8464050 <col:64, col:67> 'float' '-'
|   | |     | |             |   |-ImplicitCastExpr 0x7fffd8464020 <col:64> 'float' <LValueToRValue>
|   | |     | |             |   | `-DeclRefExpr 0x7fffd8463fd0 <col:64> 'float' lvalue Var 0x7fffd8463b58 'y1' 'float'
|   | |     | |             |   `-ImplicitCastExpr 0x7fffd8464038 <col:67> 'float' <LValueToRValue>
|   | |     | |             |     `-DeclRefExpr 0x7fffd8463ff8 <col:67> 'float' lvalue Var 0x7fffd8463718 'y0' 'float'
|   | |     | |             `-ParenExpr 0x7fffd8464140 <col:71, col:77> 'float'
|   | |     | |               `-BinaryOperator 0x7fffd8464118 <col:72, col:75> 'float' '-'
|   | |     | |                 |-ImplicitCastExpr 0x7fffd84640e8 <col:72> 'float' <LValueToRValue>
|   | |     | |                 | `-DeclRefExpr 0x7fffd8464098 <col:72> 'float' lvalue Var 0x7fffd8463b58 'y1' 'float'
|   | |     | |                 `-ImplicitCastExpr 0x7fffd8464100 <col:75> 'float' <LValueToRValue>
|   | |     | |                   `-DeclRefExpr 0x7fffd84640c0 <col:75> 'float' lvalue Var 0x7fffd8463718 'y0' 'float'
|   | |     | `-BinaryOperator 0x7fffd84644a8 <line:4563:13, col:57> 'float' '='
|   | |     |   |-ArraySubscriptExpr 0x7fffd84642e8 <col:13, col:25> 'float' lvalue
|   | |     |   | |-ImplicitCastExpr 0x7fffd84642b8 <col:13> 'float *' <LValueToRValue>
|   | |     |   | | `-DeclRefExpr 0x7fffd8464268 <col:13> 'float *' lvalue Var 0x7fffd8462700 'precompute' 'float *'
|   | |     |   | `-ImplicitCastExpr 0x7fffd84642d0 <col:24> 'int' <LValueToRValue>
|   | |     |   |   `-DeclRefExpr 0x7fffd8464290 <col:24> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |     |   `-ConditionalOperator 0x7fffd8464478 <col:29, col:57> 'float'
|   | |     |     |-ParenExpr 0x7fffd84643b0 <col:29, col:39> 'int'
|   | |     |     | `-BinaryOperator 0x7fffd8464388 <col:30, col:38> 'int' '=='
|   | |     |     |   |-ImplicitCastExpr 0x7fffd8464358 <col:30> 'float' <LValueToRValue>
|   | |     |     |   | `-DeclRefExpr 0x7fffd8464310 <col:30> 'float' lvalue Var 0x7fffd8463d90 'dist' 'float'
|   | |     |     |   `-ImplicitCastExpr 0x7fffd8464370 <col:38> 'float' <IntegralToFloating>
|   | |     |     |     `-IntegerLiteral 0x7fffd8464338 <col:38> 'int' 0
|   | |     |     |-FloatingLiteral 0x7fffd84643d0 <col:43> 'float' 0.000000e+00
|   | |     |     `-BinaryOperator 0x7fffd8464450 <col:50, col:57> 'float' '/'
|   | |     |       |-FloatingLiteral 0x7fffd84643f0 <col:50> 'float' 1.000000e+00
|   | |     |       `-ImplicitCastExpr 0x7fffd8464438 <col:57> 'float' <LValueToRValue>
|   | |     |         `-DeclRefExpr 0x7fffd8464410 <col:57> 'float' lvalue Var 0x7fffd8463d90 'dist' 'float'
|   | |     `-IfStmt 0x7fffd8465ec8 <line:4564:17, line:4575:29>
|   | |       |-<<<NULL>>>
|   | |       |-<<<NULL>>>
|   | |       |-BinaryOperator 0x7fffd8464638 <line:4564:21, col:38> 'int' '=='
|   | |       | |-ImplicitCastExpr 0x7fffd8464620 <col:21, col:30> 'int' <IntegralCast>
|   | |       | | `-ImplicitCastExpr 0x7fffd8464608 <col:21, col:30> 'unsigned char' <LValueToRValue>
|   | |       | |   `-MemberExpr 0x7fffd84645a8 <col:21, col:30> 'unsigned char' lvalue .type 0x7fffd8351a18
|   | |       | |     `-ArraySubscriptExpr 0x7fffd8464580 <col:21, col:28> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | |       | |       |-ImplicitCastExpr 0x7fffd8464550 <col:21> 'stbtt_vertex *' <LValueToRValue>
|   | |       | |       | `-DeclRefExpr 0x7fffd8464500 <col:21> 'stbtt_vertex *' lvalue Var 0x7fffd8462788 'verts' 'stbtt_vertex *'
|   | |       | |       `-ImplicitCastExpr 0x7fffd8464568 <col:27> 'int' <LValueToRValue>
|   | |       | |         `-DeclRefExpr 0x7fffd8464528 <col:27> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |       | `-DeclRefExpr 0x7fffd84645e0 <col:38> 'int' EnumConstant 0x7fffd8351680 'STBTT_vcurve' 'int'
|   | |       |-CompoundStmt 0x7fffd8465d98 <col:52, line:4574:10>
|   | |       | |-DeclStmt 0x7fffd8464a98 <line:4565:13, col:69>
|   | |       | | |-VarDecl 0x7fffd8464678 <col:13, col:36> col:19 used x2 'float' cinit
|   | |       | | | `-BinaryOperator 0x7fffd8464840 <col:24, col:36> 'float' '*'
|   | |       | | |   |-ImplicitCastExpr 0x7fffd8464828 <col:24, col:33> 'float' <IntegralToFloating>
|   | |       | | |   | `-ImplicitCastExpr 0x7fffd84647f8 <col:24, col:33> 'int' <IntegralCast>
|   | |       | | |   |   `-ImplicitCastExpr 0x7fffd84647e0 <col:24, col:33> 'short' <LValueToRValue>
|   | |       | | |   |     `-MemberExpr 0x7fffd8464780 <col:24, col:33> 'short' lvalue .x 0x7fffd83517d8
|   | |       | | |   |       `-ArraySubscriptExpr 0x7fffd8464758 <col:24, col:31> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | |       | | |   |         |-ImplicitCastExpr 0x7fffd8464728 <col:24> 'stbtt_vertex *' <LValueToRValue>
|   | |       | | |   |         | `-DeclRefExpr 0x7fffd84646d8 <col:24> 'stbtt_vertex *' lvalue Var 0x7fffd8462788 'verts' 'stbtt_vertex *'
|   | |       | | |   |         `-ImplicitCastExpr 0x7fffd8464740 <col:30> 'int' <LValueToRValue>
|   | |       | | |   |           `-DeclRefExpr 0x7fffd8464700 <col:30> 'int' lvalue Var 0x7fffd8462648 'j' 'int'
|   | |       | | |   `-ImplicitCastExpr 0x7fffd8464810 <col:36> 'float' <LValueToRValue>
|   | |       | | |     `-DeclRefExpr 0x7fffd84647b8 <col:36> 'float' lvalue Var 0x7fffd8460e10 'scale_x' 'float'
|   | |       | | `-VarDecl 0x7fffd8464890 <col:13, col:62> col:45 used y2 'float' cinit
|   | |       | |   `-BinaryOperator 0x7fffd8464a58 <col:50, col:62> 'float' '*'
|   | |       | |     |-ImplicitCastExpr 0x7fffd8464a40 <col:50, col:59> 'float' <IntegralToFloating>
|   | |       | |     | `-ImplicitCastExpr 0x7fffd8464a10 <col:50, col:59> 'int' <IntegralCast>
|   | |       | |     |   `-ImplicitCastExpr 0x7fffd84649f8 <col:50, col:59> 'short' <LValueToRValue>
|   | |       | |     |     `-MemberExpr 0x7fffd8464998 <col:50, col:59> 'short' lvalue .y 0x7fffd8351838
|   | |       | |     |       `-ArraySubscriptExpr 0x7fffd8464970 <col:50, col:57> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | |       | |     |         |-ImplicitCastExpr 0x7fffd8464940 <col:50> 'stbtt_vertex *' <LValueToRValue>
|   | |       | |     |         | `-DeclRefExpr 0x7fffd84648f0 <col:50> 'stbtt_vertex *' lvalue Var 0x7fffd8462788 'verts' 'stbtt_vertex *'
|   | |       | |     |         `-ImplicitCastExpr 0x7fffd8464958 <col:56> 'int' <LValueToRValue>
|   | |       | |     |           `-DeclRefExpr 0x7fffd8464918 <col:56> 'int' lvalue Var 0x7fffd8462648 'j' 'int'
|   | |       | |     `-ImplicitCastExpr 0x7fffd8464a28 <col:62> 'float' <LValueToRValue>
|   | |       | |       `-DeclRefExpr 0x7fffd84649d0 <col:62> 'float' lvalue Var 0x7fffd8460ec8 'scale_y' 'float'
|   | |       | |-DeclStmt 0x7fffd8464ed8 <line:4566:13, col:69>
|   | |       | | |-VarDecl 0x7fffd8464ac8 <col:13, col:36> col:19 used x1 'float' cinit
|   | |       | | | `-BinaryOperator 0x7fffd8464c90 <col:24, col:36> 'float' '*'
|   | |       | | |   |-ImplicitCastExpr 0x7fffd8464c78 <col:24, col:33> 'float' <IntegralToFloating>
|   | |       | | |   | `-ImplicitCastExpr 0x7fffd8464c48 <col:24, col:33> 'int' <IntegralCast>
|   | |       | | |   |   `-ImplicitCastExpr 0x7fffd8464c30 <col:24, col:33> 'short' <LValueToRValue>
|   | |       | | |   |     `-MemberExpr 0x7fffd8464bd0 <col:24, col:33> 'short' lvalue .cx 0x7fffd8351898
|   | |       | | |   |       `-ArraySubscriptExpr 0x7fffd8464ba8 <col:24, col:31> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | |       | | |   |         |-ImplicitCastExpr 0x7fffd8464b78 <col:24> 'stbtt_vertex *' <LValueToRValue>
|   | |       | | |   |         | `-DeclRefExpr 0x7fffd8464b28 <col:24> 'stbtt_vertex *' lvalue Var 0x7fffd8462788 'verts' 'stbtt_vertex *'
|   | |       | | |   |         `-ImplicitCastExpr 0x7fffd8464b90 <col:30> 'int' <LValueToRValue>
|   | |       | | |   |           `-DeclRefExpr 0x7fffd8464b50 <col:30> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |       | | |   `-ImplicitCastExpr 0x7fffd8464c60 <col:36> 'float' <LValueToRValue>
|   | |       | | |     `-DeclRefExpr 0x7fffd8464c08 <col:36> 'float' lvalue Var 0x7fffd8460e10 'scale_x' 'float'
|   | |       | | `-VarDecl 0x7fffd8464cd0 <col:13, col:62> col:45 used y1 'float' cinit
|   | |       | |   `-BinaryOperator 0x7fffd8464e98 <col:50, col:62> 'float' '*'
|   | |       | |     |-ImplicitCastExpr 0x7fffd8464e80 <col:50, col:59> 'float' <IntegralToFloating>
|   | |       | |     | `-ImplicitCastExpr 0x7fffd8464e50 <col:50, col:59> 'int' <IntegralCast>
|   | |       | |     |   `-ImplicitCastExpr 0x7fffd8464e38 <col:50, col:59> 'short' <LValueToRValue>
|   | |       | |     |     `-MemberExpr 0x7fffd8464dd8 <col:50, col:59> 'short' lvalue .cy 0x7fffd83518f8
|   | |       | |     |       `-ArraySubscriptExpr 0x7fffd8464db0 <col:50, col:57> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | |       | |     |         |-ImplicitCastExpr 0x7fffd8464d80 <col:50> 'stbtt_vertex *' <LValueToRValue>
|   | |       | |     |         | `-DeclRefExpr 0x7fffd8464d30 <col:50> 'stbtt_vertex *' lvalue Var 0x7fffd8462788 'verts' 'stbtt_vertex *'
|   | |       | |     |         `-ImplicitCastExpr 0x7fffd8464d98 <col:56> 'int' <LValueToRValue>
|   | |       | |     |           `-DeclRefExpr 0x7fffd8464d58 <col:56> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |       | |     `-ImplicitCastExpr 0x7fffd8464e68 <col:62> 'float' <LValueToRValue>
|   | |       | |       `-DeclRefExpr 0x7fffd8464e10 <col:62> 'float' lvalue Var 0x7fffd8460ec8 'scale_y' 'float'
|   | |       | |-DeclStmt 0x7fffd8465318 <line:4567:13, col:69>
|   | |       | | |-VarDecl 0x7fffd8464f08 <col:13, col:36> col:19 used x0 'float' cinit
|   | |       | | | `-BinaryOperator 0x7fffd84650d0 <col:24, col:36> 'float' '*'
|   | |       | | |   |-ImplicitCastExpr 0x7fffd84650b8 <col:24, col:33> 'float' <IntegralToFloating>
|   | |       | | |   | `-ImplicitCastExpr 0x7fffd8465088 <col:24, col:33> 'int' <IntegralCast>
|   | |       | | |   |   `-ImplicitCastExpr 0x7fffd8465070 <col:24, col:33> 'short' <LValueToRValue>
|   | |       | | |   |     `-MemberExpr 0x7fffd8465010 <col:24, col:33> 'short' lvalue .x 0x7fffd83517d8
|   | |       | | |   |       `-ArraySubscriptExpr 0x7fffd8464fe8 <col:24, col:31> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | |       | | |   |         |-ImplicitCastExpr 0x7fffd8464fb8 <col:24> 'stbtt_vertex *' <LValueToRValue>
|   | |       | | |   |         | `-DeclRefExpr 0x7fffd8464f68 <col:24> 'stbtt_vertex *' lvalue Var 0x7fffd8462788 'verts' 'stbtt_vertex *'
|   | |       | | |   |         `-ImplicitCastExpr 0x7fffd8464fd0 <col:30> 'int' <LValueToRValue>
|   | |       | | |   |           `-DeclRefExpr 0x7fffd8464f90 <col:30> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |       | | |   `-ImplicitCastExpr 0x7fffd84650a0 <col:36> 'float' <LValueToRValue>
|   | |       | | |     `-DeclRefExpr 0x7fffd8465048 <col:36> 'float' lvalue Var 0x7fffd8460e10 'scale_x' 'float'
|   | |       | | `-VarDecl 0x7fffd8465110 <col:13, col:62> col:45 used y0 'float' cinit
|   | |       | |   `-BinaryOperator 0x7fffd84652d8 <col:50, col:62> 'float' '*'
|   | |       | |     |-ImplicitCastExpr 0x7fffd84652c0 <col:50, col:59> 'float' <IntegralToFloating>
|   | |       | |     | `-ImplicitCastExpr 0x7fffd8465290 <col:50, col:59> 'int' <IntegralCast>
|   | |       | |     |   `-ImplicitCastExpr 0x7fffd8465278 <col:50, col:59> 'short' <LValueToRValue>
|   | |       | |     |     `-MemberExpr 0x7fffd8465218 <col:50, col:59> 'short' lvalue .y 0x7fffd8351838
|   | |       | |     |       `-ArraySubscriptExpr 0x7fffd84651f0 <col:50, col:57> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | |       | |     |         |-ImplicitCastExpr 0x7fffd84651c0 <col:50> 'stbtt_vertex *' <LValueToRValue>
|   | |       | |     |         | `-DeclRefExpr 0x7fffd8465170 <col:50> 'stbtt_vertex *' lvalue Var 0x7fffd8462788 'verts' 'stbtt_vertex *'
|   | |       | |     |         `-ImplicitCastExpr 0x7fffd84651d8 <col:56> 'int' <LValueToRValue>
|   | |       | |     |           `-DeclRefExpr 0x7fffd8465198 <col:56> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |       | |     `-ImplicitCastExpr 0x7fffd84652a8 <col:62> 'float' <LValueToRValue>
|   | |       | |       `-DeclRefExpr 0x7fffd8465250 <col:62> 'float' lvalue Var 0x7fffd8460ec8 'scale_y' 'float'
|   | |       | |-DeclStmt 0x7fffd8465718 <line:4568:13, col:59>
|   | |       | | |-VarDecl 0x7fffd8465348 <col:13, col:36> col:19 used bx 'float' cinit
|   | |       | | | `-BinaryOperator 0x7fffd84654f0 <col:24, col:36> 'float' '+'
|   | |       | | |   |-BinaryOperator 0x7fffd8465488 <col:24, col:31> 'float' '-'
|   | |       | | |   | |-ImplicitCastExpr 0x7fffd8465470 <col:24> 'float' <LValueToRValue>
|   | |       | | |   | | `-DeclRefExpr 0x7fffd84653a8 <col:24> 'float' lvalue Var 0x7fffd8464f08 'x0' 'float'
|   | |       | | |   | `-BinaryOperator 0x7fffd8465448 <col:29, col:31> 'float' '*'
|   | |       | | |   |   |-ImplicitCastExpr 0x7fffd8465430 <col:29> 'float' <IntegralToFloating>
|   | |       | | |   |   | `-IntegerLiteral 0x7fffd84653d0 <col:29> 'int' 2
|   | |       | | |   |   `-ImplicitCastExpr 0x7fffd8465418 <col:31> 'float' <LValueToRValue>
|   | |       | | |   |     `-DeclRefExpr 0x7fffd84653f0 <col:31> 'float' lvalue Var 0x7fffd8464ac8 'x1' 'float'
|   | |       | | |   `-ImplicitCastExpr 0x7fffd84654d8 <col:36> 'float' <LValueToRValue>
|   | |       | | |     `-DeclRefExpr 0x7fffd84654b0 <col:36> 'float' lvalue Var 0x7fffd8464678 'x2' 'float'
|   | |       | | `-VarDecl 0x7fffd8465530 <col:13, col:57> col:40 used by 'float' cinit
|   | |       | |   `-BinaryOperator 0x7fffd84656d8 <col:45, col:57> 'float' '+'
|   | |       | |     |-BinaryOperator 0x7fffd8465670 <col:45, col:52> 'float' '-'
|   | |       | |     | |-ImplicitCastExpr 0x7fffd8465658 <col:45> 'float' <LValueToRValue>
|   | |       | |     | | `-DeclRefExpr 0x7fffd8465590 <col:45> 'float' lvalue Var 0x7fffd8465110 'y0' 'float'
|   | |       | |     | `-BinaryOperator 0x7fffd8465630 <col:50, col:52> 'float' '*'
|   | |       | |     |   |-ImplicitCastExpr 0x7fffd8465618 <col:50> 'float' <IntegralToFloating>
|   | |       | |     |   | `-IntegerLiteral 0x7fffd84655b8 <col:50> 'int' 2
|   | |       | |     |   `-ImplicitCastExpr 0x7fffd8465600 <col:52> 'float' <LValueToRValue>
|   | |       | |     |     `-DeclRefExpr 0x7fffd84655d8 <col:52> 'float' lvalue Var 0x7fffd8464cd0 'y1' 'float'
|   | |       | |     `-ImplicitCastExpr 0x7fffd84656c0 <col:57> 'float' <LValueToRValue>
|   | |       | |       `-DeclRefExpr 0x7fffd8465698 <col:57> 'float' lvalue Var 0x7fffd8464890 'y2' 'float'
|   | |       | |-DeclStmt 0x7fffd8465920 <line:4569:13, col:39>
|   | |       | | `-VarDecl 0x7fffd8465748 <col:13, col:37> col:19 used len2 'float' cinit
|   | |       | |   `-BinaryOperator 0x7fffd84658f8 <col:26, col:37> 'float' '+'
|   | |       | |     |-BinaryOperator 0x7fffd8465828 <col:26, col:29> 'float' '*'
|   | |       | |     | |-ImplicitCastExpr 0x7fffd84657f8 <col:26> 'float' <LValueToRValue>
|   | |       | |     | | `-DeclRefExpr 0x7fffd84657a8 <col:26> 'float' lvalue Var 0x7fffd8465348 'bx' 'float'
|   | |       | |     | `-ImplicitCastExpr 0x7fffd8465810 <col:29> 'float' <LValueToRValue>
|   | |       | |     |   `-DeclRefExpr 0x7fffd84657d0 <col:29> 'float' lvalue Var 0x7fffd8465348 'bx' 'float'
|   | |       | |     `-BinaryOperator 0x7fffd84658d0 <col:34, col:37> 'float' '*'
|   | |       | |       |-ImplicitCastExpr 0x7fffd84658a0 <col:34> 'float' <LValueToRValue>
|   | |       | |       | `-DeclRefExpr 0x7fffd8465850 <col:34> 'float' lvalue Var 0x7fffd8465530 'by' 'float'
|   | |       | |       `-ImplicitCastExpr 0x7fffd84658b8 <col:37> 'float' <LValueToRValue>
|   | |       | |         `-DeclRefExpr 0x7fffd8465878 <col:37> 'float' lvalue Var 0x7fffd8465530 'by' 'float'
|   | |       | `-IfStmt 0x7fffd8465d60 <line:4570:13, line:4573:32>
|   | |       |   |-<<<NULL>>>
|   | |       |   |-<<<NULL>>>
|   | |       |   |-BinaryOperator 0x7fffd8465998 <line:4570:17, col:25> 'int' '!='
|   | |       |   | |-ImplicitCastExpr 0x7fffd8465980 <col:17> 'float' <LValueToRValue>
|   | |       |   | | `-DeclRefExpr 0x7fffd8465938 <col:17> 'float' lvalue Var 0x7fffd8465748 'len2' 'float'
|   | |       |   | `-FloatingLiteral 0x7fffd8465960 <col:25> 'float' 0.000000e+00
|   | |       |   |-BinaryOperator 0x7fffd8465c48 <line:4571:16, col:53> 'float' '='
|   | |       |   | |-ArraySubscriptExpr 0x7fffd8465a40 <col:16, col:28> 'float' lvalue
|   | |       |   | | |-ImplicitCastExpr 0x7fffd8465a10 <col:16> 'float *' <LValueToRValue>
|   | |       |   | | | `-DeclRefExpr 0x7fffd84659c0 <col:16> 'float *' lvalue Var 0x7fffd8462700 'precompute' 'float *'
|   | |       |   | | `-ImplicitCastExpr 0x7fffd8465a28 <col:27> 'int' <LValueToRValue>
|   | |       |   | |   `-DeclRefExpr 0x7fffd84659e8 <col:27> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |       |   | `-BinaryOperator 0x7fffd8465c20 <col:32, col:53> 'float' '/'
|   | |       |   |   |-FloatingLiteral 0x7fffd8465a68 <col:32> 'float' 1.000000e+00
|   | |       |   |   `-ParenExpr 0x7fffd8465c00 <col:39, col:53> 'float'
|   | |       |   |     `-BinaryOperator 0x7fffd8465bd8 <col:40, col:51> 'float' '+'
|   | |       |   |       |-BinaryOperator 0x7fffd8465b08 <col:40, col:43> 'float' '*'
|   | |       |   |       | |-ImplicitCastExpr 0x7fffd8465ad8 <col:40> 'float' <LValueToRValue>
|   | |       |   |       | | `-DeclRefExpr 0x7fffd8465a88 <col:40> 'float' lvalue Var 0x7fffd8465348 'bx' 'float'
|   | |       |   |       | `-ImplicitCastExpr 0x7fffd8465af0 <col:43> 'float' <LValueToRValue>
|   | |       |   |       |   `-DeclRefExpr 0x7fffd8465ab0 <col:43> 'float' lvalue Var 0x7fffd8465348 'bx' 'float'
|   | |       |   |       `-BinaryOperator 0x7fffd8465bb0 <col:48, col:51> 'float' '*'
|   | |       |   |         |-ImplicitCastExpr 0x7fffd8465b80 <col:48> 'float' <LValueToRValue>
|   | |       |   |         | `-DeclRefExpr 0x7fffd8465b30 <col:48> 'float' lvalue Var 0x7fffd8465530 'by' 'float'
|   | |       |   |         `-ImplicitCastExpr 0x7fffd8465b98 <col:51> 'float' <LValueToRValue>
|   | |       |   |           `-DeclRefExpr 0x7fffd8465b58 <col:51> 'float' lvalue Var 0x7fffd8465530 'by' 'float'
|   | |       |   `-BinaryOperator 0x7fffd8465d38 <line:4573:16, col:32> 'float' '='
|   | |       |     |-ArraySubscriptExpr 0x7fffd8465cf0 <col:16, col:28> 'float' lvalue
|   | |       |     | |-ImplicitCastExpr 0x7fffd8465cc0 <col:16> 'float *' <LValueToRValue>
|   | |       |     | | `-DeclRefExpr 0x7fffd8465c70 <col:16> 'float *' lvalue Var 0x7fffd8462700 'precompute' 'float *'
|   | |       |     | `-ImplicitCastExpr 0x7fffd8465cd8 <col:27> 'int' <LValueToRValue>
|   | |       |     |   `-DeclRefExpr 0x7fffd8465c98 <col:27> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |       |     `-FloatingLiteral 0x7fffd8465d18 <col:32> 'float' 0.000000e+00
|   | |       `-BinaryOperator 0x7fffd8465ea0 <line:4575:13, col:29> 'float' '='
|   | |         |-ArraySubscriptExpr 0x7fffd8465e58 <col:13, col:25> 'float' lvalue
|   | |         | |-ImplicitCastExpr 0x7fffd8465e28 <col:13> 'float *' <LValueToRValue>
|   | |         | | `-DeclRefExpr 0x7fffd8465dd8 <col:13> 'float *' lvalue Var 0x7fffd8462700 'precompute' 'float *'
|   | |         | `-ImplicitCastExpr 0x7fffd8465e40 <col:24> 'int' <LValueToRValue>
|   | |         |   `-DeclRefExpr 0x7fffd8465e00 <col:24> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |         `-FloatingLiteral 0x7fffd8465e80 <col:29> 'float' 0.000000e+00
|   | |-ForStmt 0x7fffd84738b8 <line:4578:7, line:4693:7>
|   | | |-BinaryOperator 0x7fffd8465ff0 <line:4578:12, col:14> 'int' '='
|   | | | |-DeclRefExpr 0x7fffd8465f88 <col:12> 'int' lvalue Var 0x7fffd8462558 'y' 'int'
|   | | | `-ImplicitCastExpr 0x7fffd8465fd8 <col:14> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd8465fb0 <col:14> 'int' lvalue Var 0x7fffd8461028 'iy0' 'int'
|   | | |-<<<NULL>>>
|   | | |-BinaryOperator 0x7fffd8466098 <col:19, col:23> 'int' '<'
|   | | | |-ImplicitCastExpr 0x7fffd8466068 <col:19> 'int' <LValueToRValue>
|   | | | | `-DeclRefExpr 0x7fffd8466018 <col:19> 'int' lvalue Var 0x7fffd8462558 'y' 'int'
|   | | | `-ImplicitCastExpr 0x7fffd8466080 <col:23> 'int' <LValueToRValue>
|   | | |   `-DeclRefExpr 0x7fffd8466040 <col:23> 'int' lvalue Var 0x7fffd8461118 'iy1' 'int'
|   | | |-UnaryOperator 0x7fffd84660e8 <col:28, col:30> 'int' prefix '++'
|   | | | `-DeclRefExpr 0x7fffd84660c0 <col:30> 'int' lvalue Var 0x7fffd8462558 'y' 'int'
|   | | `-CompoundStmt 0x7fffd84738a0 <col:33, line:4693:7>
|   | |   `-ForStmt 0x7fffd8473868 <line:4579:10, line:4692:10>
|   | |     |-BinaryOperator 0x7fffd8466170 <line:4579:15, col:17> 'int' '='
|   | |     | |-DeclRefExpr 0x7fffd8466108 <col:15> 'int' lvalue Var 0x7fffd84624e0 'x' 'int'
|   | |     | `-ImplicitCastExpr 0x7fffd8466158 <col:17> 'int' <LValueToRValue>
|   | |     |   `-DeclRefExpr 0x7fffd8466130 <col:17> 'int' lvalue Var 0x7fffd8460fb0 'ix0' 'int'
|   | |     |-<<<NULL>>>
|   | |     |-BinaryOperator 0x7fffd8466218 <col:22, col:26> 'int' '<'
|   | |     | |-ImplicitCastExpr 0x7fffd84661e8 <col:22> 'int' <LValueToRValue>
|   | |     | | `-DeclRefExpr 0x7fffd8466198 <col:22> 'int' lvalue Var 0x7fffd84624e0 'x' 'int'
|   | |     | `-ImplicitCastExpr 0x7fffd8466200 <col:26> 'int' <LValueToRValue>
|   | |     |   `-DeclRefExpr 0x7fffd84661c0 <col:26> 'int' lvalue Var 0x7fffd84610a0 'ix1' 'int'
|   | |     |-UnaryOperator 0x7fffd8466268 <col:31, col:33> 'int' prefix '++'
|   | |     | `-DeclRefExpr 0x7fffd8466240 <col:33> 'int' lvalue Var 0x7fffd84624e0 'x' 'int'
|   | |     `-CompoundStmt 0x7fffd84737f8 <col:36, line:4692:10>
|   | |       |-DeclStmt 0x7fffd8466300 <line:4580:13, col:22>
|   | |       | `-VarDecl 0x7fffd84662a0 <col:13, col:19> col:19 used val 'float'
|   | |       |-DeclStmt 0x7fffd84663b0 <line:4581:13, col:39>
|   | |       | `-VarDecl 0x7fffd8466330 <col:13, col:30> col:19 used min_dist 'float' cinit
|   | |       |   `-FloatingLiteral 0x7fffd8466390 <col:30> 'float' 9.999990e+05
|   | |       |-DeclStmt 0x7fffd8466508 <line:4582:13, col:40>
|   | |       | `-VarDecl 0x7fffd84663e0 <col:13, col:36> col:19 used sx 'float' cinit
|   | |       |   `-BinaryOperator 0x7fffd84664e0 <col:24, col:36> 'float' '+'
|   | |       |     |-CStyleCastExpr 0x7fffd8466498 <col:24, col:32> 'float' <IntegralToFloating>
|   | |       |     | `-ImplicitCastExpr 0x7fffd8466480 <col:32> 'int' <LValueToRValue>
|   | |       |     |   `-DeclRefExpr 0x7fffd8466440 <col:32> 'int' lvalue Var 0x7fffd84624e0 'x' 'int'
|   | |       |     `-FloatingLiteral 0x7fffd84664c0 <col:36> 'float' 5.000000e-01
|   | |       |-DeclStmt 0x7fffd8466660 <line:4583:13, col:40>
|   | |       | `-VarDecl 0x7fffd8466538 <col:13, col:36> col:19 used sy 'float' cinit
|   | |       |   `-BinaryOperator 0x7fffd8466638 <col:24, col:36> 'float' '+'
|   | |       |     |-CStyleCastExpr 0x7fffd84665f0 <col:24, col:32> 'float' <IntegralToFloating>
|   | |       |     | `-ImplicitCastExpr 0x7fffd84665d8 <col:32> 'int' <LValueToRValue>
|   | |       |     |   `-DeclRefExpr 0x7fffd8466598 <col:32> 'int' lvalue Var 0x7fffd8462558 'y' 'int'
|   | |       |     `-FloatingLiteral 0x7fffd8466618 <col:36> 'float' 5.000000e-01
|   | |       |-DeclStmt 0x7fffd84667b8 <line:4584:13, col:44>
|   | |       | `-VarDecl 0x7fffd8466690 <col:13, col:43> col:19 used x_gspace 'float' cinit
|   | |       |   `-ParenExpr 0x7fffd8466798 <col:30, col:43> 'float'
|   | |       |     `-BinaryOperator 0x7fffd8466770 <col:31, col:36> 'float' '/'
|   | |       |       |-ImplicitCastExpr 0x7fffd8466740 <col:31> 'float' <LValueToRValue>
|   | |       |       | `-DeclRefExpr 0x7fffd84666f0 <col:31> 'float' lvalue Var 0x7fffd84663e0 'sx' 'float'
|   | |       |       `-ImplicitCastExpr 0x7fffd8466758 <col:36> 'float' <LValueToRValue>
|   | |       |         `-DeclRefExpr 0x7fffd8466718 <col:36> 'float' lvalue Var 0x7fffd8460e10 'scale_x' 'float'
|   | |       |-DeclStmt 0x7fffd8466940 <line:4585:13, col:44>
|   | |       | `-VarDecl 0x7fffd84667e8 <col:13, col:43> col:19 used y_gspace 'float' cinit
|   | |       |   `-ParenExpr 0x7fffd8466920 <col:30, col:43> 'float'
|   | |       |     `-BinaryOperator 0x7fffd84668f8 <col:31, col:36> 'float' '/'
|   | |       |       |-ImplicitCastExpr 0x7fffd84668c8 <col:31> 'float' <LValueToRValue>
|   | |       |       | `-DeclRefExpr 0x7fffd8466848 <col:31> 'float' lvalue Var 0x7fffd8466538 'sy' 'float'
|   | |       |       `-ImplicitCastExpr 0x7fffd84668e0 <col:36> 'float' <LValueToRValue>
|   | |       |         `-DeclRefExpr 0x7fffd84668a0 <col:36> 'float' lvalue Var 0x7fffd8460ec8 'scale_y' 'float'
|   | |       |-DeclStmt 0x7fffd8466bb8 <line:4587:13, col:91>
|   | |       | `-VarDecl 0x7fffd8466970 <col:13, col:90> col:17 used winding 'int' cinit
|   | |       |   `-CallExpr 0x7fffd8466b10 <col:27, col:90> 'int'
|   | |       |     |-ImplicitCastExpr 0x7fffd8466af8 <col:27> 'int (*)(float, float, int, stbtt_vertex *)' <FunctionToPointerDecay>
|   | |       |     | `-DeclRefExpr 0x7fffd84669d0 <col:27> 'int (float, float, int, stbtt_vertex *)' Function 0x7fffd8455ef8 'stbtt__compute_crossings_x' 'int (float, float, int, stbtt_vertex *)'
|   | |       |     |-ImplicitCastExpr 0x7fffd8466b58 <col:54> 'float' <LValueToRValue>
|   | |       |     | `-DeclRefExpr 0x7fffd84669f8 <col:54> 'float' lvalue Var 0x7fffd8466690 'x_gspace' 'float'
|   | |       |     |-ImplicitCastExpr 0x7fffd8466b70 <col:64> 'float' <LValueToRValue>
|   | |       |     | `-DeclRefExpr 0x7fffd8466a20 <col:64> 'float' lvalue Var 0x7fffd84667e8 'y_gspace' 'float'
|   | |       |     |-ImplicitCastExpr 0x7fffd8466b88 <col:74> 'int' <LValueToRValue>
|   | |       |     | `-DeclRefExpr 0x7fffd8466a48 <col:74> 'int' lvalue Var 0x7fffd8462880 'num_verts' 'int'
|   | |       |     `-ImplicitCastExpr 0x7fffd8466ba0 <col:85> 'stbtt_vertex *' <LValueToRValue>
|   | |       |       `-DeclRefExpr 0x7fffd8466a70 <col:85> 'stbtt_vertex *' lvalue Var 0x7fffd8462788 'verts' 'stbtt_vertex *'
|   | |       |-ForStmt 0x7fffd8472ed0 <line:4589:13, line:4683:13>
|   | |       | |-BinaryOperator 0x7fffd8466c18 <line:4589:18, col:20> 'int' '='
|   | |       | | |-DeclRefExpr 0x7fffd8466bd0 <col:18> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |       | | `-IntegerLiteral 0x7fffd8466bf8 <col:20> 'int' 0
|   | |       | |-<<<NULL>>>
|   | |       | |-BinaryOperator 0x7fffd8466cc0 <col:23, col:27> 'int' '<'
|   | |       | | |-ImplicitCastExpr 0x7fffd8466c90 <col:23> 'int' <LValueToRValue>
|   | |       | | | `-DeclRefExpr 0x7fffd8466c40 <col:23> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |       | | `-ImplicitCastExpr 0x7fffd8466ca8 <col:27> 'int' <LValueToRValue>
|   | |       | |   `-DeclRefExpr 0x7fffd8466c68 <col:27> 'int' lvalue Var 0x7fffd8462880 'num_verts' 'int'
|   | |       | |-UnaryOperator 0x7fffd8466d10 <col:38, col:40> 'int' prefix '++'
|   | |       | | `-DeclRefExpr 0x7fffd8466ce8 <col:40> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |       | `-CompoundStmt 0x7fffd8472ea0 <col:43, line:4683:13>
|   | |       |   |-DeclStmt 0x7fffd8467158 <line:4590:16, col:70>
|   | |       |   | |-VarDecl 0x7fffd8466d48 <col:16, col:38> col:22 used x0 'float' cinit
|   | |       |   | | `-BinaryOperator 0x7fffd8466f10 <col:27, col:38> 'float' '*'
|   | |       |   | |   |-ImplicitCastExpr 0x7fffd8466ef8 <col:27, col:36> 'float' <IntegralToFloating>
|   | |       |   | |   | `-ImplicitCastExpr 0x7fffd8466ec8 <col:27, col:36> 'int' <IntegralCast>
|   | |       |   | |   |   `-ImplicitCastExpr 0x7fffd8466eb0 <col:27, col:36> 'short' <LValueToRValue>
|   | |       |   | |   |     `-MemberExpr 0x7fffd8466e50 <col:27, col:36> 'short' lvalue .x 0x7fffd83517d8
|   | |       |   | |   |       `-ArraySubscriptExpr 0x7fffd8466e28 <col:27, col:34> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | |       |   | |   |         |-ImplicitCastExpr 0x7fffd8466df8 <col:27> 'stbtt_vertex *' <LValueToRValue>
|   | |       |   | |   |         | `-DeclRefExpr 0x7fffd8466da8 <col:27> 'stbtt_vertex *' lvalue Var 0x7fffd8462788 'verts' 'stbtt_vertex *'
|   | |       |   | |   |         `-ImplicitCastExpr 0x7fffd8466e10 <col:33> 'int' <LValueToRValue>
|   | |       |   | |   |           `-DeclRefExpr 0x7fffd8466dd0 <col:33> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |       |   | |   `-ImplicitCastExpr 0x7fffd8466ee0 <col:38> 'float' <LValueToRValue>
|   | |       |   | |     `-DeclRefExpr 0x7fffd8466e88 <col:38> 'float' lvalue Var 0x7fffd8460e10 'scale_x' 'float'
|   | |       |   | `-VarDecl 0x7fffd8466f50 <col:16, col:63> col:47 used y0 'float' cinit
|   | |       |   |   `-BinaryOperator 0x7fffd8467118 <col:52, col:63> 'float' '*'
|   | |       |   |     |-ImplicitCastExpr 0x7fffd8467100 <col:52, col:61> 'float' <IntegralToFloating>
|   | |       |   |     | `-ImplicitCastExpr 0x7fffd84670d0 <col:52, col:61> 'int' <IntegralCast>
|   | |       |   |     |   `-ImplicitCastExpr 0x7fffd84670b8 <col:52, col:61> 'short' <LValueToRValue>
|   | |       |   |     |     `-MemberExpr 0x7fffd8467058 <col:52, col:61> 'short' lvalue .y 0x7fffd8351838
|   | |       |   |     |       `-ArraySubscriptExpr 0x7fffd8467030 <col:52, col:59> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | |       |   |     |         |-ImplicitCastExpr 0x7fffd8467000 <col:52> 'stbtt_vertex *' <LValueToRValue>
|   | |       |   |     |         | `-DeclRefExpr 0x7fffd8466fb0 <col:52> 'stbtt_vertex *' lvalue Var 0x7fffd8462788 'verts' 'stbtt_vertex *'
|   | |       |   |     |         `-ImplicitCastExpr 0x7fffd8467018 <col:58> 'int' <LValueToRValue>
|   | |       |   |     |           `-DeclRefExpr 0x7fffd8466fd8 <col:58> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |       |   |     `-ImplicitCastExpr 0x7fffd84670e8 <col:63> 'float' <LValueToRValue>
|   | |       |   |       `-DeclRefExpr 0x7fffd8467090 <col:63> 'float' lvalue Var 0x7fffd8460ec8 'scale_y' 'float'
|   | |       |   |-DeclStmt 0x7fffd8467580 <line:4593:16, col:63>
|   | |       |   | `-VarDecl 0x7fffd8467188 <col:16, col:62> col:22 used dist2 'float' cinit
|   | |       |   |   `-BinaryOperator 0x7fffd8467558 <col:30, col:62> 'float' '+'
|   | |       |   |     |-BinaryOperator 0x7fffd8467378 <col:30, col:44> 'float' '*'
|   | |       |   |     | |-ParenExpr 0x7fffd8467290 <col:30, col:36> 'float'
|   | |       |   |     | | `-BinaryOperator 0x7fffd8467268 <col:31, col:34> 'float' '-'
|   | |       |   |     | |   |-ImplicitCastExpr 0x7fffd8467238 <col:31> 'float' <LValueToRValue>
|   | |       |   |     | |   | `-DeclRefExpr 0x7fffd84671e8 <col:31> 'float' lvalue Var 0x7fffd8466d48 'x0' 'float'
|   | |       |   |     | |   `-ImplicitCastExpr 0x7fffd8467250 <col:34> 'float' <LValueToRValue>
|   | |       |   |     | |     `-DeclRefExpr 0x7fffd8467210 <col:34> 'float' lvalue Var 0x7fffd84663e0 'sx' 'float'
|   | |       |   |     | `-ParenExpr 0x7fffd8467358 <col:38, col:44> 'float'
|   | |       |   |     |   `-BinaryOperator 0x7fffd8467330 <col:39, col:42> 'float' '-'
|   | |       |   |     |     |-ImplicitCastExpr 0x7fffd8467300 <col:39> 'float' <LValueToRValue>
|   | |       |   |     |     | `-DeclRefExpr 0x7fffd84672b0 <col:39> 'float' lvalue Var 0x7fffd8466d48 'x0' 'float'
|   | |       |   |     |     `-ImplicitCastExpr 0x7fffd8467318 <col:42> 'float' <LValueToRValue>
|   | |       |   |     |       `-DeclRefExpr 0x7fffd84672d8 <col:42> 'float' lvalue Var 0x7fffd84663e0 'sx' 'float'
|   | |       |   |     `-BinaryOperator 0x7fffd8467530 <col:48, col:62> 'float' '*'
|   | |       |   |       |-ParenExpr 0x7fffd8467448 <col:48, col:54> 'float'
|   | |       |   |       | `-BinaryOperator 0x7fffd8467420 <col:49, col:52> 'float' '-'
|   | |       |   |       |   |-ImplicitCastExpr 0x7fffd84673f0 <col:49> 'float' <LValueToRValue>
|   | |       |   |       |   | `-DeclRefExpr 0x7fffd84673a0 <col:49> 'float' lvalue Var 0x7fffd8466f50 'y0' 'float'
|   | |       |   |       |   `-ImplicitCastExpr 0x7fffd8467408 <col:52> 'float' <LValueToRValue>
|   | |       |   |       |     `-DeclRefExpr 0x7fffd84673c8 <col:52> 'float' lvalue Var 0x7fffd8466538 'sy' 'float'
|   | |       |   |       `-ParenExpr 0x7fffd8467510 <col:56, col:62> 'float'
|   | |       |   |         `-BinaryOperator 0x7fffd84674e8 <col:57, col:60> 'float' '-'
|   | |       |   |           |-ImplicitCastExpr 0x7fffd84674b8 <col:57> 'float' <LValueToRValue>
|   | |       |   |           | `-DeclRefExpr 0x7fffd8467468 <col:57> 'float' lvalue Var 0x7fffd8466f50 'y0' 'float'
|   | |       |   |           `-ImplicitCastExpr 0x7fffd84674d0 <col:60> 'float' <LValueToRValue>
|   | |       |   |             `-DeclRefExpr 0x7fffd8467490 <col:60> 'float' lvalue Var 0x7fffd8466538 'sy' 'float'
|   | |       |   |-IfStmt 0x7fffd8467800 <line:4594:16, line:444:37>
|   | |       |   | |-<<<NULL>>>
|   | |       |   | |-<<<NULL>>>
|   | |       |   | |-BinaryOperator 0x7fffd8467680 <line:4594:20, col:37> 'int' '<'
|   | |       |   | | |-ImplicitCastExpr 0x7fffd8467668 <col:20> 'float' <LValueToRValue>
|   | |       |   | | | `-DeclRefExpr 0x7fffd8467598 <col:20> 'float' lvalue Var 0x7fffd8467188 'dist2' 'float'
|   | |       |   | | `-BinaryOperator 0x7fffd8467640 <col:28, col:37> 'float' '*'
|   | |       |   | |   |-ImplicitCastExpr 0x7fffd8467610 <col:28> 'float' <LValueToRValue>
|   | |       |   | |   | `-DeclRefExpr 0x7fffd84675c0 <col:28> 'float' lvalue Var 0x7fffd8466330 'min_dist' 'float'
|   | |       |   | |   `-ImplicitCastExpr 0x7fffd8467628 <col:37> 'float' <LValueToRValue>
|   | |       |   | |     `-DeclRefExpr 0x7fffd84675e8 <col:37> 'float' lvalue Var 0x7fffd8466330 'min_dist' 'float'
|   | |       |   | |-BinaryOperator 0x7fffd84677d8 <line:4595:19, line:444:37> 'float' '='
|   | |       |   | | |-DeclRefExpr 0x7fffd84676a8 <line:4595:19> 'float' lvalue Var 0x7fffd8466330 'min_dist' 'float'
|   | |       |   | | `-CStyleCastExpr 0x7fffd84677b0 <col:30, line:444:37> 'float' <FloatingCast>
|   | |       |   | |   `-CallExpr 0x7fffd8467738 <col:31, col:37> 'double'
|   | |       |   | |     |-ImplicitCastExpr 0x7fffd8467720 <col:31> 'double (*)(double)' <FunctionToPointerDecay>
|   | |       |   | |     | `-DeclRefExpr 0x7fffd84676d0 <col:31> 'double (double)' Function 0x7fffd828e9f0 'sqrt' 'double (double)'
|   | |       |   | |     `-ImplicitCastExpr 0x7fffd8467780 <line:4595:49> 'double' <FloatingCast>
|   | |       |   | |       `-ImplicitCastExpr 0x7fffd8467768 <col:49> 'float' <LValueToRValue>
|   | |       |   | |         `-DeclRefExpr 0x7fffd84676f8 <col:49> 'float' lvalue Var 0x7fffd8467188 'dist2' 'float'
|   | |       |   | `-<<<NULL>>>
|   | |       |   `-IfStmt 0x7fffd8472e68 <line:4597:16, line:4682:16>
|   | |       |     |-<<<NULL>>>
|   | |       |     |-<<<NULL>>>
|   | |       |     |-BinaryOperator 0x7fffd8467970 <line:4597:20, col:37> 'int' '=='
|   | |       |     | |-ImplicitCastExpr 0x7fffd8467958 <col:20, col:29> 'int' <IntegralCast>
|   | |       |     | | `-ImplicitCastExpr 0x7fffd8467940 <col:20, col:29> 'unsigned char' <LValueToRValue>
|   | |       |     | |   `-MemberExpr 0x7fffd84678e0 <col:20, col:29> 'unsigned char' lvalue .type 0x7fffd8351a18
|   | |       |     | |     `-ArraySubscriptExpr 0x7fffd84678b8 <col:20, col:27> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | |       |     | |       |-ImplicitCastExpr 0x7fffd8467888 <col:20> 'stbtt_vertex *' <LValueToRValue>
|   | |       |     | |       | `-DeclRefExpr 0x7fffd8467838 <col:20> 'stbtt_vertex *' lvalue Var 0x7fffd8462788 'verts' 'stbtt_vertex *'
|   | |       |     | |       `-ImplicitCastExpr 0x7fffd84678a0 <col:26> 'int' <LValueToRValue>
|   | |       |     | |         `-DeclRefExpr 0x7fffd8467860 <col:26> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |       |     | `-DeclRefExpr 0x7fffd8467918 <col:37> 'int' EnumConstant 0x7fffd8351638 'STBTT_vline' 'int'
|   | |       |     |-CompoundStmt 0x7fffd8469690 <col:50, line:4617:16>
|   | |       |     | |-DeclStmt 0x7fffd8467e50 <line:4598:19, col:77>
|   | |       |     | | |-VarDecl 0x7fffd84679b0 <col:19, col:43> col:25 used x1 'float' cinit
|   | |       |     | | | `-BinaryOperator 0x7fffd8467bc0 <col:30, col:43> 'float' '*'
|   | |       |     | | |   |-ImplicitCastExpr 0x7fffd8467ba8 <col:30, col:41> 'float' <IntegralToFloating>
|   | |       |     | | |   | `-ImplicitCastExpr 0x7fffd8467b78 <col:30, col:41> 'int' <IntegralCast>
|   | |       |     | | |   |   `-ImplicitCastExpr 0x7fffd8467b60 <col:30, col:41> 'short' <LValueToRValue>
|   | |       |     | | |   |     `-MemberExpr 0x7fffd8467b00 <col:30, col:41> 'short' lvalue .x 0x7fffd83517d8
|   | |       |     | | |   |       `-ArraySubscriptExpr 0x7fffd8467ad8 <col:30, col:39> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | |       |     | | |   |         |-ImplicitCastExpr 0x7fffd8467ac0 <col:30> 'stbtt_vertex *' <LValueToRValue>
|   | |       |     | | |   |         | `-DeclRefExpr 0x7fffd8467a10 <col:30> 'stbtt_vertex *' lvalue Var 0x7fffd8462788 'verts' 'stbtt_vertex *'
|   | |       |     | | |   |         `-BinaryOperator 0x7fffd8467a98 <col:36, col:38> 'int' '-'
|   | |       |     | | |   |           |-ImplicitCastExpr 0x7fffd8467a80 <col:36> 'int' <LValueToRValue>
|   | |       |     | | |   |           | `-DeclRefExpr 0x7fffd8467a38 <col:36> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |       |     | | |   |           `-IntegerLiteral 0x7fffd8467a60 <col:38> 'int' 1
|   | |       |     | | |   `-ImplicitCastExpr 0x7fffd8467b90 <col:43> 'float' <LValueToRValue>
|   | |       |     | | |     `-DeclRefExpr 0x7fffd8467b38 <col:43> 'float' lvalue Var 0x7fffd8460e10 'scale_x' 'float'
|   | |       |     | | `-VarDecl 0x7fffd8467c00 <col:19, col:70> col:52 used y1 'float' cinit
|   | |       |     | |   `-BinaryOperator 0x7fffd8467e10 <col:57, col:70> 'float' '*'
|   | |       |     | |     |-ImplicitCastExpr 0x7fffd8467df8 <col:57, col:68> 'float' <IntegralToFloating>
|   | |       |     | |     | `-ImplicitCastExpr 0x7fffd8467dc8 <col:57, col:68> 'int' <IntegralCast>
|   | |       |     | |     |   `-ImplicitCastExpr 0x7fffd8467db0 <col:57, col:68> 'short' <LValueToRValue>
|   | |       |     | |     |     `-MemberExpr 0x7fffd8467d50 <col:57, col:68> 'short' lvalue .y 0x7fffd8351838
|   | |       |     | |     |       `-ArraySubscriptExpr 0x7fffd8467d28 <col:57, col:66> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | |       |     | |     |         |-ImplicitCastExpr 0x7fffd8467d10 <col:57> 'stbtt_vertex *' <LValueToRValue>
|   | |       |     | |     |         | `-DeclRefExpr 0x7fffd8467c60 <col:57> 'stbtt_vertex *' lvalue Var 0x7fffd8462788 'verts' 'stbtt_vertex *'
|   | |       |     | |     |         `-BinaryOperator 0x7fffd8467ce8 <col:63, col:65> 'int' '-'
|   | |       |     | |     |           |-ImplicitCastExpr 0x7fffd8467cd0 <col:63> 'int' <LValueToRValue>
|   | |       |     | |     |           | `-DeclRefExpr 0x7fffd8467c88 <col:63> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |       |     | |     |           `-IntegerLiteral 0x7fffd8467cb0 <col:65> 'int' 1
|   | |       |     | |     `-ImplicitCastExpr 0x7fffd8467de0 <col:70> 'float' <LValueToRValue>
|   | |       |     | |       `-DeclRefExpr 0x7fffd8467d88 <col:70> 'float' lvalue Var 0x7fffd8460ec8 'scale_y' 'float'
|   | |       |     | |-DeclStmt 0x7fffd8468428 <line:4603:19, col:101>
|   | |       |     | | `-VarDecl 0x7fffd8467e80 <col:19, col:100> col:25 used dist 'float' cinit
|   | |       |     | |   `-BinaryOperator 0x7fffd8468400 <col:32, col:100> 'float' '*'
|   | |       |     | |     |-CStyleCastExpr 0x7fffd8468318 <col:32, line:461:37> 'float' <FloatingCast>
|   | |       |     | |     | `-CallExpr 0x7fffd84682b8 <col:31, col:37> 'double'
|   | |       |     | |     |   |-ImplicitCastExpr 0x7fffd84682a0 <col:31> 'double (*)(double)' <FunctionToPointerDecay>
|   | |       |     | |     |   | `-DeclRefExpr 0x7fffd8467ee0 <col:31> 'double (double)' Function 0x7fffd82913a0 'fabs' 'double (double)'
|   | |       |     | |     |   `-ImplicitCastExpr 0x7fffd84682e8 <line:4603:51, col:83> 'double' <FloatingCast>
|   | |       |     | |     |     `-BinaryOperator 0x7fffd8468278 <col:51, col:83> 'float' '-'
|   | |       |     | |     |       |-BinaryOperator 0x7fffd8468098 <col:51, col:65> 'float' '*'
|   | |       |     | |     |       | |-ParenExpr 0x7fffd8467fb0 <col:51, col:57> 'float'
|   | |       |     | |     |       | | `-BinaryOperator 0x7fffd8467f88 <col:52, col:55> 'float' '-'
|   | |       |     | |     |       | |   |-ImplicitCastExpr 0x7fffd8467f58 <col:52> 'float' <LValueToRValue>
|   | |       |     | |     |       | |   | `-DeclRefExpr 0x7fffd8467f08 <col:52> 'float' lvalue Var 0x7fffd84679b0 'x1' 'float'
|   | |       |     | |     |       | |   `-ImplicitCastExpr 0x7fffd8467f70 <col:55> 'float' <LValueToRValue>
|   | |       |     | |     |       | |     `-DeclRefExpr 0x7fffd8467f30 <col:55> 'float' lvalue Var 0x7fffd8466d48 'x0' 'float'
|   | |       |     | |     |       | `-ParenExpr 0x7fffd8468078 <col:59, col:65> 'float'
|   | |       |     | |     |       |   `-BinaryOperator 0x7fffd8468050 <col:60, col:63> 'float' '-'
|   | |       |     | |     |       |     |-ImplicitCastExpr 0x7fffd8468020 <col:60> 'float' <LValueToRValue>
|   | |       |     | |     |       |     | `-DeclRefExpr 0x7fffd8467fd0 <col:60> 'float' lvalue Var 0x7fffd8466f50 'y0' 'float'
|   | |       |     | |     |       |     `-ImplicitCastExpr 0x7fffd8468038 <col:63> 'float' <LValueToRValue>
|   | |       |     | |     |       |       `-DeclRefExpr 0x7fffd8467ff8 <col:63> 'float' lvalue Var 0x7fffd8466538 'sy' 'float'
|   | |       |     | |     |       `-BinaryOperator 0x7fffd8468250 <col:69, col:83> 'float' '*'
|   | |       |     | |     |         |-ParenExpr 0x7fffd8468168 <col:69, col:75> 'float'
|   | |       |     | |     |         | `-BinaryOperator 0x7fffd8468140 <col:70, col:73> 'float' '-'
|   | |       |     | |     |         |   |-ImplicitCastExpr 0x7fffd8468110 <col:70> 'float' <LValueToRValue>
|   | |       |     | |     |         |   | `-DeclRefExpr 0x7fffd84680c0 <col:70> 'float' lvalue Var 0x7fffd8467c00 'y1' 'float'
|   | |       |     | |     |         |   `-ImplicitCastExpr 0x7fffd8468128 <col:73> 'float' <LValueToRValue>
|   | |       |     | |     |         |     `-DeclRefExpr 0x7fffd84680e8 <col:73> 'float' lvalue Var 0x7fffd8466f50 'y0' 'float'
|   | |       |     | |     |         `-ParenExpr 0x7fffd8468230 <col:77, col:83> 'float'
|   | |       |     | |     |           `-BinaryOperator 0x7fffd8468208 <col:78, col:81> 'float' '-'
|   | |       |     | |     |             |-ImplicitCastExpr 0x7fffd84681d8 <col:78> 'float' <LValueToRValue>
|   | |       |     | |     |             | `-DeclRefExpr 0x7fffd8468188 <col:78> 'float' lvalue Var 0x7fffd8466d48 'x0' 'float'
|   | |       |     | |     |             `-ImplicitCastExpr 0x7fffd84681f0 <col:81> 'float' <LValueToRValue>
|   | |       |     | |     |               `-DeclRefExpr 0x7fffd84681b0 <col:81> 'float' lvalue Var 0x7fffd84663e0 'sx' 'float'
|   | |       |     | |     `-ImplicitCastExpr 0x7fffd84683e8 <col:88, col:100> 'float' <LValueToRValue>
|   | |       |     | |       `-ArraySubscriptExpr 0x7fffd84683c0 <col:88, col:100> 'float' lvalue
|   | |       |     | |         |-ImplicitCastExpr 0x7fffd8468390 <col:88> 'float *' <LValueToRValue>
|   | |       |     | |         | `-DeclRefExpr 0x7fffd8468340 <col:88> 'float *' lvalue Var 0x7fffd8462700 'precompute' 'float *'
|   | |       |     | |         `-ImplicitCastExpr 0x7fffd84683a8 <col:99> 'int' <LValueToRValue>
|   | |       |     | |           `-DeclRefExpr 0x7fffd8468368 <col:99> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |       |     | |-ParenExpr 0x7fffd8468a78 </usr/include/assert.h:108:3, line:113:7> 'void'
|   | |       |     | | `-BinaryOperator 0x7fffd8468a50 <line:108:4, line:113:6> 'void' ','
|   | |       |     | |   |-CStyleCastExpr 0x7fffd84685a8 <line:108:4, col:33> 'void' <ToVoid>
|   | |       |     | |   | `-UnaryExprOrTypeTraitExpr 0x7fffd8468578 <col:11, col:33> 'unsigned long' sizeof
|   | |       |     | |   |   `-ParenExpr 0x7fffd8468558 <col:18, col:33> 'int'
|   | |       |     | |   |     `-ConditionalOperator 0x7fffd8468528 <col:19, col:32> 'int'
|   | |       |     | |   |       |-ParenExpr 0x7fffd84684c8 <col:19, col:24> 'int'
|   | |       |     | |   |       | `-BinaryOperator 0x7fffd84684a0 <././stb/stb_truetype.h:4604:32, col:37> 'int' '!='
|   | |       |     | |   |       |   |-ImplicitCastExpr 0x7fffd8468488 <col:32> 'int' <LValueToRValue>
|   | |       |     | |   |       |   | `-DeclRefExpr 0x7fffd8468440 <col:32> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |       |     | |   |       |   `-IntegerLiteral 0x7fffd8468468 <col:37> 'int' 0
|   | |       |     | |   |       |-IntegerLiteral 0x7fffd84684e8 </usr/include/assert.h:108:28> 'int' 1
|   | |       |     | |   |       `-IntegerLiteral 0x7fffd8468508 <col:32> 'int' 0
|   | |       |     | |   `-UnaryOperator 0x7fffd8468a30 <col:36, line:113:6> 'void' prefix '__extension__'
|   | |       |     | |     `-StmtExpr 0x7fffd8468a10 <line:108:50, line:113:6> 'void'
|   | |       |     | |       `-CompoundStmt 0x7fffd84689f8 <line:108:51, line:113:5>
|   | |       |     | |         `-IfStmt 0x7fffd84689c0 <line:109:7, line:112:68>
|   | |       |     | |           |-<<<NULL>>>
|   | |       |     | |           |-<<<NULL>>>
|   | |       |     | |           |-BinaryOperator 0x7fffd8468630 <././stb/stb_truetype.h:4604:32, col:37> 'int' '!='
|   | |       |     | |           | |-ImplicitCastExpr 0x7fffd8468618 <col:32> 'int' <LValueToRValue>
|   | |       |     | |           | | `-DeclRefExpr 0x7fffd84685d0 <col:32> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |       |     | |           | `-IntegerLiteral 0x7fffd84685f8 <col:37> 'int' 0
|   | |       |     | |           |-NullStmt 0x7fffd8468658 </usr/include/assert.h:110:9>
|   | |       |     | |           `-CallExpr 0x7fffd84688e8 <line:112:9, col:68> 'void'
|   | |       |     | |             |-ImplicitCastExpr 0x7fffd84688d0 <col:9> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' <FunctionToPointerDecay>
|   | |       |     | |             | `-DeclRefExpr 0x7fffd8468668 <col:9> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))' Function 0x7fffd8326dd0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn))'
|   | |       |     | |             |-ImplicitCastExpr 0x7fffd8468948 <<scratch space>:40:1> 'const char *' <BitCast>
|   | |       |     | |             | `-ImplicitCastExpr 0x7fffd8468930 <col:1> 'char *' <ArrayToPointerDecay>
|   | |       |     | |             |   `-StringLiteral 0x7fffd84686c8 <col:1> 'char [7]' lvalue "i != 0"
|   | |       |     | |             |-ImplicitCastExpr 0x7fffd8468978 <line:41:1> 'const char *' <BitCast>
|   | |       |     | |             | `-ImplicitCastExpr 0x7fffd8468960 <col:1> 'char *' <ArrayToPointerDecay>
|   | |       |     | |             |   `-StringLiteral 0x7fffd84686f8 <col:1> 'char [23]' lvalue "././stb/stb_truetype.h"
|   | |       |     | |             |-ImplicitCastExpr 0x7fffd8468990 <line:42:1> 'unsigned int' <IntegralCast>
|   | |       |     | |             | `-IntegerLiteral 0x7fffd8468738 <col:1> 'int' 4604
|   | |       |     | |             `-ImplicitCastExpr 0x7fffd84689a8 </usr/include/assert.h:129:30, col:44> 'const char *' <ArrayToPointerDecay>
|   | |       |     | |               `-UnaryOperator 0x7fffd84688b0 <col:30, col:44> 'const char [124]' lvalue prefix '__extension__'
|   | |       |     | |                 `-PredefinedExpr 0x7fffd8468880 <col:44> 'const char [124]' lvalue __PRETTY_FUNCTION__
|   | |       |     | |                   `-StringLiteral 0x7fffd84687d8 <col:44> 'const char [124]' lvalue "unsigned char *stbtt_GetGlyphSDF(const stbtt_fontinfo *, float, int, int, unsigned char, float, int *, int *, int *, int *)"
|   | |       |     | `-IfStmt 0x7fffd8469658 <././stb/stb_truetype.h:4605:19, line:4616:19>
|   | |       |     |   |-<<<NULL>>>
|   | |       |     |   |-<<<NULL>>>
|   | |       |     |   |-BinaryOperator 0x7fffd8468b18 <line:4605:23, col:30> 'int' '<'
|   | |       |     |   | |-ImplicitCastExpr 0x7fffd8468ae8 <col:23> 'float' <LValueToRValue>
|   | |       |     |   | | `-DeclRefExpr 0x7fffd8468a98 <col:23> 'float' lvalue Var 0x7fffd8467e80 'dist' 'float'
|   | |       |     |   | `-ImplicitCastExpr 0x7fffd8468b00 <col:30> 'float' <LValueToRValue>
|   | |       |     |   |   `-DeclRefExpr 0x7fffd8468ac0 <col:30> 'float' lvalue Var 0x7fffd8466330 'min_dist' 'float'
|   | |       |     |   |-CompoundStmt 0x7fffd8469628 <col:40, line:4616:19>
|   | |       |     |   | |-DeclStmt 0x7fffd8468d98 <line:4609:22, col:50>
|   | |       |     |   | | |-VarDecl 0x7fffd8468b58 <col:22, col:36> col:28 used dx 'float' cinit
|   | |       |     |   | | | `-BinaryOperator 0x7fffd8468c38 <col:33, col:36> 'float' '-'
|   | |       |     |   | | |   |-ImplicitCastExpr 0x7fffd8468c08 <col:33> 'float' <LValueToRValue>
|   | |       |     |   | | |   | `-DeclRefExpr 0x7fffd8468bb8 <col:33> 'float' lvalue Var 0x7fffd84679b0 'x1' 'float'
|   | |       |     |   | | |   `-ImplicitCastExpr 0x7fffd8468c20 <col:36> 'float' <LValueToRValue>
|   | |       |     |   | | |     `-DeclRefExpr 0x7fffd8468be0 <col:36> 'float' lvalue Var 0x7fffd8466d48 'x0' 'float'
|   | |       |     |   | | `-VarDecl 0x7fffd8468c78 <col:22, col:48> col:40 used dy 'float' cinit
|   | |       |     |   | |   `-BinaryOperator 0x7fffd8468d58 <col:45, col:48> 'float' '-'
|   | |       |     |   | |     |-ImplicitCastExpr 0x7fffd8468d28 <col:45> 'float' <LValueToRValue>
|   | |       |     |   | |     | `-DeclRefExpr 0x7fffd8468cd8 <col:45> 'float' lvalue Var 0x7fffd8467c00 'y1' 'float'
|   | |       |     |   | |     `-ImplicitCastExpr 0x7fffd8468d40 <col:48> 'float' <LValueToRValue>
|   | |       |     |   | |       `-DeclRefExpr 0x7fffd8468d00 <col:48> 'float' lvalue Var 0x7fffd8466f50 'y0' 'float'
|   | |       |     |   | |-DeclStmt 0x7fffd8469008 <line:4610:22, col:50>
|   | |       |     |   | | |-VarDecl 0x7fffd8468dc8 <col:22, col:36> col:28 used px 'float' cinit
|   | |       |     |   | | | `-BinaryOperator 0x7fffd8468ea8 <col:33, col:36> 'float' '-'
|   | |       |     |   | | |   |-ImplicitCastExpr 0x7fffd8468e78 <col:33> 'float' <LValueToRValue>
|   | |       |     |   | | |   | `-DeclRefExpr 0x7fffd8468e28 <col:33> 'float' lvalue Var 0x7fffd8466d48 'x0' 'float'
|   | |       |     |   | | |   `-ImplicitCastExpr 0x7fffd8468e90 <col:36> 'float' <LValueToRValue>
|   | |       |     |   | | |     `-DeclRefExpr 0x7fffd8468e50 <col:36> 'float' lvalue Var 0x7fffd84663e0 'sx' 'float'
|   | |       |     |   | | `-VarDecl 0x7fffd8468ee8 <col:22, col:48> col:40 used py 'float' cinit
|   | |       |     |   | |   `-BinaryOperator 0x7fffd8468fc8 <col:45, col:48> 'float' '-'
|   | |       |     |   | |     |-ImplicitCastExpr 0x7fffd8468f98 <col:45> 'float' <LValueToRValue>
|   | |       |     |   | |     | `-DeclRefExpr 0x7fffd8468f48 <col:45> 'float' lvalue Var 0x7fffd8466f50 'y0' 'float'
|   | |       |     |   | |     `-ImplicitCastExpr 0x7fffd8468fb0 <col:48> 'float' <LValueToRValue>
|   | |       |     |   | |       `-DeclRefExpr 0x7fffd8468f70 <col:48> 'float' lvalue Var 0x7fffd8466538 'sy' 'float'
|   | |       |     |   | |-DeclStmt 0x7fffd8469410 <line:4613:22, col:66>
|   | |       |     |   | | `-VarDecl 0x7fffd8469038 <col:22, col:65> col:28 used t 'float' cinit
|   | |       |     |   | |   `-BinaryOperator 0x7fffd84693e8 <col:32, col:65> 'float' '/'
|   | |       |     |   | |     |-UnaryOperator 0x7fffd8469230 <col:32, col:47> 'float' prefix '-'
|   | |       |     |   | |     | `-ParenExpr 0x7fffd8469210 <col:33, col:47> 'float'
|   | |       |     |   | |     |   `-BinaryOperator 0x7fffd84691e8 <col:34, col:45> 'float' '+'
|   | |       |     |   | |     |     |-BinaryOperator 0x7fffd8469118 <col:34, col:37> 'float' '*'
|   | |       |     |   | |     |     | |-ImplicitCastExpr 0x7fffd84690e8 <col:34> 'float' <LValueToRValue>
|   | |       |     |   | |     |     | | `-DeclRefExpr 0x7fffd8469098 <col:34> 'float' lvalue Var 0x7fffd8468dc8 'px' 'float'
|   | |       |     |   | |     |     | `-ImplicitCastExpr 0x7fffd8469100 <col:37> 'float' <LValueToRValue>
|   | |       |     |   | |     |     |   `-DeclRefExpr 0x7fffd84690c0 <col:37> 'float' lvalue Var 0x7fffd8468b58 'dx' 'float'
|   | |       |     |   | |     |     `-BinaryOperator 0x7fffd84691c0 <col:42, col:45> 'float' '*'
|   | |       |     |   | |     |       |-ImplicitCastExpr 0x7fffd8469190 <col:42> 'float' <LValueToRValue>
|   | |       |     |   | |     |       | `-DeclRefExpr 0x7fffd8469140 <col:42> 'float' lvalue Var 0x7fffd8468ee8 'py' 'float'
|   | |       |     |   | |     |       `-ImplicitCastExpr 0x7fffd84691a8 <col:45> 'float' <LValueToRValue>
|   | |       |     |   | |     |         `-DeclRefExpr 0x7fffd8469168 <col:45> 'float' lvalue Var 0x7fffd8468c78 'dy' 'float'
|   | |       |     |   | |     `-ParenExpr 0x7fffd84693c8 <col:51, col:65> 'float'
|   | |       |     |   | |       `-BinaryOperator 0x7fffd84693a0 <col:52, col:63> 'float' '+'
|   | |       |     |   | |         |-BinaryOperator 0x7fffd84692d0 <col:52, col:55> 'float' '*'
|   | |       |     |   | |         | |-ImplicitCastExpr 0x7fffd84692a0 <col:52> 'float' <LValueToRValue>
|   | |       |     |   | |         | | `-DeclRefExpr 0x7fffd8469250 <col:52> 'float' lvalue Var 0x7fffd8468b58 'dx' 'float'
|   | |       |     |   | |         | `-ImplicitCastExpr 0x7fffd84692b8 <col:55> 'float' <LValueToRValue>
|   | |       |     |   | |         |   `-DeclRefExpr 0x7fffd8469278 <col:55> 'float' lvalue Var 0x7fffd8468b58 'dx' 'float'
|   | |       |     |   | |         `-BinaryOperator 0x7fffd8469378 <col:60, col:63> 'float' '*'
|   | |       |     |   | |           |-ImplicitCastExpr 0x7fffd8469348 <col:60> 'float' <LValueToRValue>
|   | |       |     |   | |           | `-DeclRefExpr 0x7fffd84692f8 <col:60> 'float' lvalue Var 0x7fffd8468c78 'dy' 'float'
|   | |       |     |   | |           `-ImplicitCastExpr 0x7fffd8469360 <col:63> 'float' <LValueToRValue>
|   | |       |     |   | |             `-DeclRefExpr 0x7fffd8469320 <col:63> 'float' lvalue Var 0x7fffd8468c78 'dy' 'float'
|   | |       |     |   | `-IfStmt 0x7fffd84695f0 <line:4614:22, line:4615:36>
|   | |       |     |   |   |-<<<NULL>>>
|   | |       |     |   |   |-<<<NULL>>>
|   | |       |     |   |   |-BinaryOperator 0x7fffd8469538 <line:4614:26, col:44> 'int' '&&'
|   | |       |     |   |   | |-BinaryOperator 0x7fffd8469488 <col:26, col:31> 'int' '>='
|   | |       |     |   |   | | |-ImplicitCastExpr 0x7fffd8469470 <col:26> 'float' <LValueToRValue>
|   | |       |     |   |   | | | `-DeclRefExpr 0x7fffd8469428 <col:26> 'float' lvalue Var 0x7fffd8469038 't' 'float'
|   | |       |     |   |   | | `-FloatingLiteral 0x7fffd8469450 <col:31> 'float' 0.000000e+00
|   | |       |     |   |   | `-BinaryOperator 0x7fffd8469510 <col:39, col:44> 'int' '<='
|   | |       |     |   |   |   |-ImplicitCastExpr 0x7fffd84694f8 <col:39> 'float' <LValueToRValue>
|   | |       |     |   |   |   | `-DeclRefExpr 0x7fffd84694b0 <col:39> 'float' lvalue Var 0x7fffd8469038 't' 'float'
|   | |       |     |   |   |   `-FloatingLiteral 0x7fffd84694d8 <col:44> 'float' 1.000000e+00
|   | |       |     |   |   |-BinaryOperator 0x7fffd84695c8 <line:4615:25, col:36> 'float' '='
|   | |       |     |   |   | |-DeclRefExpr 0x7fffd8469560 <col:25> 'float' lvalue Var 0x7fffd8466330 'min_dist' 'float'
|   | |       |     |   |   | `-ImplicitCastExpr 0x7fffd84695b0 <col:36> 'float' <LValueToRValue>
|   | |       |     |   |   |   `-DeclRefExpr 0x7fffd8469588 <col:36> 'float' lvalue Var 0x7fffd8467e80 'dist' 'float'
|   | |       |     |   |   `-<<<NULL>>>
|   | |       |     |   `-<<<NULL>>>
|   | |       |     `-IfStmt 0x7fffd8472e30 <line:4617:23, line:4682:16>
|   | |       |       |-<<<NULL>>>
|   | |       |       |-<<<NULL>>>
|   | |       |       |-BinaryOperator 0x7fffd84697f8 <line:4617:27, col:44> 'int' '=='
|   | |       |       | |-ImplicitCastExpr 0x7fffd84697e0 <col:27, col:36> 'int' <IntegralCast>
|   | |       |       | | `-ImplicitCastExpr 0x7fffd84697c8 <col:27, col:36> 'unsigned char' <LValueToRValue>
|   | |       |       | |   `-MemberExpr 0x7fffd8469768 <col:27, col:36> 'unsigned char' lvalue .type 0x7fffd8351a18
|   | |       |       | |     `-ArraySubscriptExpr 0x7fffd8469740 <col:27, col:34> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | |       |       | |       |-ImplicitCastExpr 0x7fffd8469710 <col:27> 'stbtt_vertex *' <LValueToRValue>
|   | |       |       | |       | `-DeclRefExpr 0x7fffd84696c0 <col:27> 'stbtt_vertex *' lvalue Var 0x7fffd8462788 'verts' 'stbtt_vertex *'
|   | |       |       | |       `-ImplicitCastExpr 0x7fffd8469728 <col:33> 'int' <LValueToRValue>
|   | |       |       | |         `-DeclRefExpr 0x7fffd84696e8 <col:33> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |       |       | `-DeclRefExpr 0x7fffd84697a0 <col:44> 'int' EnumConstant 0x7fffd8351680 'STBTT_vcurve' 'int'
|   | |       |       |-CompoundStmt 0x7fffd8472de8 <col:58, line:4682:16>
|   | |       |       | |-DeclStmt 0x7fffd8469cd8 <line:4618:19, col:79>
|   | |       |       | | |-VarDecl 0x7fffd8469838 <col:19, col:44> col:25 used x2 'float' cinit
|   | |       |       | | | `-BinaryOperator 0x7fffd8469a48 <col:30, col:44> 'float' '*'
|   | |       |       | | |   |-ImplicitCastExpr 0x7fffd8469a30 <col:30, col:41> 'float' <IntegralToFloating>
|   | |       |       | | |   | `-ImplicitCastExpr 0x7fffd8469a00 <col:30, col:41> 'int' <IntegralCast>
|   | |       |       | | |   |   `-ImplicitCastExpr 0x7fffd84699e8 <col:30, col:41> 'short' <LValueToRValue>
|   | |       |       | | |   |     `-MemberExpr 0x7fffd8469988 <col:30, col:41> 'short' lvalue .x 0x7fffd83517d8
|   | |       |       | | |   |       `-ArraySubscriptExpr 0x7fffd8469960 <col:30, col:39> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | |       |       | | |   |         |-ImplicitCastExpr 0x7fffd8469948 <col:30> 'stbtt_vertex *' <LValueToRValue>
|   | |       |       | | |   |         | `-DeclRefExpr 0x7fffd8469898 <col:30> 'stbtt_vertex *' lvalue Var 0x7fffd8462788 'verts' 'stbtt_vertex *'
|   | |       |       | | |   |         `-BinaryOperator 0x7fffd8469920 <col:36, col:38> 'int' '-'
|   | |       |       | | |   |           |-ImplicitCastExpr 0x7fffd8469908 <col:36> 'int' <LValueToRValue>
|   | |       |       | | |   |           | `-DeclRefExpr 0x7fffd84698c0 <col:36> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |       |       | | |   |           `-IntegerLiteral 0x7fffd84698e8 <col:38> 'int' 1
|   | |       |       | | |   `-ImplicitCastExpr 0x7fffd8469a18 <col:44> 'float' <LValueToRValue>
|   | |       |       | | |     `-DeclRefExpr 0x7fffd84699c0 <col:44> 'float' lvalue Var 0x7fffd8460e10 'scale_x' 'float'
|   | |       |       | | `-VarDecl 0x7fffd8469a88 <col:19, col:72> col:53 used y2 'float' cinit
|   | |       |       | |   `-BinaryOperator 0x7fffd8469c98 <col:58, col:72> 'float' '*'
|   | |       |       | |     |-ImplicitCastExpr 0x7fffd8469c80 <col:58, col:69> 'float' <IntegralToFloating>
|   | |       |       | |     | `-ImplicitCastExpr 0x7fffd8469c50 <col:58, col:69> 'int' <IntegralCast>
|   | |       |       | |     |   `-ImplicitCastExpr 0x7fffd8469c38 <col:58, col:69> 'short' <LValueToRValue>
|   | |       |       | |     |     `-MemberExpr 0x7fffd8469bd8 <col:58, col:69> 'short' lvalue .y 0x7fffd8351838
|   | |       |       | |     |       `-ArraySubscriptExpr 0x7fffd8469bb0 <col:58, col:67> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | |       |       | |     |         |-ImplicitCastExpr 0x7fffd8469b98 <col:58> 'stbtt_vertex *' <LValueToRValue>
|   | |       |       | |     |         | `-DeclRefExpr 0x7fffd8469ae8 <col:58> 'stbtt_vertex *' lvalue Var 0x7fffd8462788 'verts' 'stbtt_vertex *'
|   | |       |       | |     |         `-BinaryOperator 0x7fffd8469b70 <col:64, col:66> 'int' '-'
|   | |       |       | |     |           |-ImplicitCastExpr 0x7fffd8469b58 <col:64> 'int' <LValueToRValue>
|   | |       |       | |     |           | `-DeclRefExpr 0x7fffd8469b10 <col:64> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |       |       | |     |           `-IntegerLiteral 0x7fffd8469b38 <col:66> 'int' 1
|   | |       |       | |     `-ImplicitCastExpr 0x7fffd8469c68 <col:72> 'float' <LValueToRValue>
|   | |       |       | |       `-DeclRefExpr 0x7fffd8469c10 <col:72> 'float' lvalue Var 0x7fffd8460ec8 'scale_y' 'float'
|   | |       |       | |-DeclStmt 0x7fffd846a118 <line:4619:19, col:79>
|   | |       |       | | |-VarDecl 0x7fffd8469d08 <col:19, col:44> col:25 used x1 'float' cinit
|   | |       |       | | | `-BinaryOperator 0x7fffd8469ed0 <col:30, col:44> 'float' '*'
|   | |       |       | | |   |-ImplicitCastExpr 0x7fffd8469eb8 <col:30, col:41> 'float' <IntegralToFloating>
|   | |       |       | | |   | `-ImplicitCastExpr 0x7fffd8469e88 <col:30, col:41> 'int' <IntegralCast>
|   | |       |       | | |   |   `-ImplicitCastExpr 0x7fffd8469e70 <col:30, col:41> 'short' <LValueToRValue>
|   | |       |       | | |   |     `-MemberExpr 0x7fffd8469e10 <col:30, col:41> 'short' lvalue .cx 0x7fffd8351898
|   | |       |       | | |   |       `-ArraySubscriptExpr 0x7fffd8469de8 <col:30, col:39> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | |       |       | | |   |         |-ImplicitCastExpr 0x7fffd8469db8 <col:30> 'stbtt_vertex *' <LValueToRValue>
|   | |       |       | | |   |         | `-DeclRefExpr 0x7fffd8469d68 <col:30> 'stbtt_vertex *' lvalue Var 0x7fffd8462788 'verts' 'stbtt_vertex *'
|   | |       |       | | |   |         `-ImplicitCastExpr 0x7fffd8469dd0 <col:36> 'int' <LValueToRValue>
|   | |       |       | | |   |           `-DeclRefExpr 0x7fffd8469d90 <col:36> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |       |       | | |   `-ImplicitCastExpr 0x7fffd8469ea0 <col:44> 'float' <LValueToRValue>
|   | |       |       | | |     `-DeclRefExpr 0x7fffd8469e48 <col:44> 'float' lvalue Var 0x7fffd8460e10 'scale_x' 'float'
|   | |       |       | | `-VarDecl 0x7fffd8469f10 <col:19, col:72> col:53 used y1 'float' cinit
|   | |       |       | |   `-BinaryOperator 0x7fffd846a0d8 <col:58, col:72> 'float' '*'
|   | |       |       | |     |-ImplicitCastExpr 0x7fffd846a0c0 <col:58, col:69> 'float' <IntegralToFloating>
|   | |       |       | |     | `-ImplicitCastExpr 0x7fffd846a090 <col:58, col:69> 'int' <IntegralCast>
|   | |       |       | |     |   `-ImplicitCastExpr 0x7fffd846a078 <col:58, col:69> 'short' <LValueToRValue>
|   | |       |       | |     |     `-MemberExpr 0x7fffd846a018 <col:58, col:69> 'short' lvalue .cy 0x7fffd83518f8
|   | |       |       | |     |       `-ArraySubscriptExpr 0x7fffd8469ff0 <col:58, col:67> 'stbtt_vertex':'stbtt_vertex' lvalue
|   | |       |       | |     |         |-ImplicitCastExpr 0x7fffd8469fc0 <col:58> 'stbtt_vertex *' <LValueToRValue>
|   | |       |       | |     |         | `-DeclRefExpr 0x7fffd8469f70 <col:58> 'stbtt_vertex *' lvalue Var 0x7fffd8462788 'verts' 'stbtt_vertex *'
|   | |       |       | |     |         `-ImplicitCastExpr 0x7fffd8469fd8 <col:64> 'int' <LValueToRValue>
|   | |       |       | |     |           `-DeclRefExpr 0x7fffd8469f98 <col:64> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |       |       | |     `-ImplicitCastExpr 0x7fffd846a0a8 <col:72> 'float' <LValueToRValue>
|   | |       |       | |       `-DeclRefExpr 0x7fffd846a050 <col:72> 'float' lvalue Var 0x7fffd8460ec8 'scale_y' 'float'
|   | |       |       | |-DeclStmt 0x7fffd846a710 <line:4620:19, col:64>
|   | |       |       | | `-VarDecl 0x7fffd846a148 <col:19, line:4338:47> line:4620:25 used box_x0 'float' cinit
|   | |       |       | |   `-ParenExpr 0x7fffd846a6f0 <line:4338:25, col:47> 'float'
|   | |       |       | |     `-ConditionalOperator 0x7fffd846a6c0 <col:26, col:46> 'float'
|   | |       |       | |       |-BinaryOperator 0x7fffd846a420 <col:26, col:34> 'int' '<'
|   | |       |       | |       | |-ParenExpr 0x7fffd846a3a0 <col:26, col:28> 'float'
|   | |       |       | |       | | `-ParenExpr 0x7fffd846a380 <col:25, col:47> 'float'
|   | |       |       | |       | |   `-ConditionalOperator 0x7fffd846a350 <col:26, col:46> 'float'
|   | |       |       | |       | |     |-BinaryOperator 0x7fffd846a268 <col:26, col:34> 'int' '<'
|   | |       |       | |       | |     | |-ImplicitCastExpr 0x7fffd846a238 <col:26, col:28> 'float' <LValueToRValue>
|   | |       |       | |       | |     | | `-ParenExpr 0x7fffd846a1d0 <col:26, col:28> 'float' lvalue
|   | |       |       | |       | |     | |   `-DeclRefExpr 0x7fffd846a1a8 <line:4620:54> 'float' lvalue Var 0x7fffd8466d48 'x0' 'float'
|   | |       |       | |       | |     | `-ImplicitCastExpr 0x7fffd846a250 <line:4338:32, col:34> 'float' <LValueToRValue>
|   | |       |       | |       | |     |   `-ParenExpr 0x7fffd846a218 <col:32, col:34> 'float' lvalue
|   | |       |       | |       | |     |     `-DeclRefExpr 0x7fffd846a1f0 <line:4620:57> 'float' lvalue Var 0x7fffd8469d08 'x1' 'float'
|   | |       |       | |       | |     |-ImplicitCastExpr 0x7fffd846a320 <line:4338:38, col:40> 'float' <LValueToRValue>
|   | |       |       | |       | |     | `-ParenExpr 0x7fffd846a2b8 <col:38, col:40> 'float' lvalue
|   | |       |       | |       | |     |   `-DeclRefExpr 0x7fffd846a290 <line:4620:54> 'float' lvalue Var 0x7fffd8466d48 'x0' 'float'
|   | |       |       | |       | |     `-ImplicitCastExpr 0x7fffd846a338 <line:4338:44, col:46> 'float' <LValueToRValue>
|   | |       |       | |       | |       `-ParenExpr 0x7fffd846a300 <col:44, col:46> 'float' lvalue
|   | |       |       | |       | |         `-DeclRefExpr 0x7fffd846a2d8 <line:4620:57> 'float' lvalue Var 0x7fffd8469d08 'x1' 'float'
|   | |       |       | |       | `-ImplicitCastExpr 0x7fffd846a408 <line:4338:32, col:34> 'float' <LValueToRValue>
|   | |       |       | |       |   `-ParenExpr 0x7fffd846a3e8 <col:32, col:34> 'float' lvalue
|   | |       |       | |       |     `-DeclRefExpr 0x7fffd846a3c0 <line:4620:61> 'float' lvalue Var 0x7fffd8469838 'x2' 'float'
|   | |       |       | |       |-ParenExpr 0x7fffd846a640 <line:4338:38, col:40> 'float'
|   | |       |       | |       | `-ParenExpr 0x7fffd846a620 <col:25, col:47> 'float'
|   | |       |       | |       |   `-ConditionalOperator 0x7fffd846a5f0 <col:26, col:46> 'float'
|   | |       |       | |       |     |-BinaryOperator 0x7fffd846a508 <col:26, col:34> 'int' '<'
|   | |       |       | |       |     | |-ImplicitCastExpr 0x7fffd846a4d8 <col:26, col:28> 'float' <LValueToRValue>
|   | |       |       | |       |     | | `-ParenExpr 0x7fffd846a470 <col:26, col:28> 'float' lvalue
|   | |       |       | |       |     | |   `-DeclRefExpr 0x7fffd846a448 <line:4620:54> 'float' lvalue Var 0x7fffd8466d48 'x0' 'float'
|   | |       |       | |       |     | `-ImplicitCastExpr 0x7fffd846a4f0 <line:4338:32, col:34> 'float' <LValueToRValue>
|   | |       |       | |       |     |   `-ParenExpr 0x7fffd846a4b8 <col:32, col:34> 'float' lvalue
|   | |       |       | |       |     |     `-DeclRefExpr 0x7fffd846a490 <line:4620:57> 'float' lvalue Var 0x7fffd8469d08 'x1' 'float'
|   | |       |       | |       |     |-ImplicitCastExpr 0x7fffd846a5c0 <line:4338:38, col:40> 'float' <LValueToRValue>
|   | |       |       | |       |     | `-ParenExpr 0x7fffd846a558 <col:38, col:40> 'float' lvalue
|   | |       |       | |       |     |   `-DeclRefExpr 0x7fffd846a530 <line:4620:54> 'float' lvalue Var 0x7fffd8466d48 'x0' 'float'
|   | |       |       | |       |     `-ImplicitCastExpr 0x7fffd846a5d8 <line:4338:44, col:46> 'float' <LValueToRValue>
|   | |       |       | |       |       `-ParenExpr 0x7fffd846a5a0 <col:44, col:46> 'float' lvalue
|   | |       |       | |       |         `-DeclRefExpr 0x7fffd846a578 <line:4620:57> 'float' lvalue Var 0x7fffd8469d08 'x1' 'float'
|   | |       |       | |       `-ImplicitCastExpr 0x7fffd846a6a8 <line:4338:44, col:46> 'float' <LValueToRValue>
|   | |       |       | |         `-ParenExpr 0x7fffd846a688 <col:44, col:46> 'float' lvalue
|   | |       |       | |           `-DeclRefExpr 0x7fffd846a660 <line:4620:61> 'float' lvalue Var 0x7fffd8469838 'x2' 'float'
|   | |       |       | |-DeclStmt 0x7fffd846ad18 <line:4621:19, col:64>
|   | |       |       | | `-VarDecl 0x7fffd846a740 <col:19, line:4338:47> line:4621:25 used box_y0 'float' cinit
|   | |       |       | |   `-ParenExpr 0x7fffd846acf8 <line:4338:25, col:47> 'float'
|   | |       |       | |     `-ConditionalOperator 0x7fffd846acc8 <col:26, col:46> 'float'
|   | |       |       | |       |-BinaryOperator 0x7fffd846aa28 <col:26, col:34> 'int' '<'
|   | |       |       | |       | |-ParenExpr 0x7fffd846a9a8 <col:26, col:28> 'float'
|   | |       |       | |       | | `-ParenExpr 0x7fffd846a988 <col:25, col:47> 'float'
|   | |       |       | |       | |   `-ConditionalOperator 0x7fffd846a958 <col:26, col:46> 'float'
|   | |       |       | |       | |     |-BinaryOperator 0x7fffd846a860 <col:26, col:34> 'int' '<'
|   | |       |       | |       | |     | |-ImplicitCastExpr 0x7fffd846a830 <col:26, col:28> 'float' <LValueToRValue>
|   | |       |       | |       | |     | | `-ParenExpr 0x7fffd846a7c8 <col:26, col:28> 'float' lvalue
|   | |       |       | |       | |     | |   `-DeclRefExpr 0x7fffd846a7a0 <line:4621:54> 'float' lvalue Var 0x7fffd8466f50 'y0' 'float'
|   | |       |       | |       | |     | `-ImplicitCastExpr 0x7fffd846a848 <line:4338:32, col:34> 'float' <LValueToRValue>
|   | |       |       | |       | |     |   `-ParenExpr 0x7fffd846a810 <col:32, col:34> 'float' lvalue
|   | |       |       | |       | |     |     `-DeclRefExpr 0x7fffd846a7e8 <line:4621:57> 'float' lvalue Var 0x7fffd8469f10 'y1' 'float'
|   | |       |       | |       | |     |-ImplicitCastExpr 0x7fffd846a928 <line:4338:38, col:40> 'float' <LValueToRValue>
|   | |       |       | |       | |     | `-ParenExpr 0x7fffd846a8c0 <col:38, col:40> 'float' lvalue
|   | |       |       | |       | |     |   `-DeclRefExpr 0x7fffd846a888 <line:4621:54> 'float' lvalue Var 0x7fffd8466f50 'y0' 'float'
|   | |       |       | |       | |     `-ImplicitCastExpr 0x7fffd846a940 <line:4338:44, col:46> 'float' <LValueToRValue>
|   | |       |       | |       | |       `-ParenExpr 0x7fffd846a908 <col:44, col:46> 'float' lvalue
|   | |       |       | |       | |         `-DeclRefExpr 0x7fffd846a8e0 <line:4621:57> 'float' lvalue Var 0x7fffd8469f10 'y1' 'float'
|   | |       |       | |       | `-ImplicitCastExpr 0x7fffd846aa10 <line:4338:32, col:34> 'float' <LValueToRValue>
|   | |       |       | |       |   `-ParenExpr 0x7fffd846a9f0 <col:32, col:34> 'float' lvalue
|   | |       |       | |       |     `-DeclRefExpr 0x7fffd846a9c8 <line:4621:61> 'float' lvalue Var 0x7fffd8469a88 'y2' 'float'
|   | |       |       | |       |-ParenExpr 0x7fffd846ac48 <line:4338:38, col:40> 'float'
|   | |       |       | |       | `-ParenExpr 0x7fffd846ac28 <col:25, col:47> 'float'
|   | |       |       | |       |   `-ConditionalOperator 0x7fffd846abf8 <col:26, col:46> 'float'
|   | |       |       | |       |     |-BinaryOperator 0x7fffd846ab10 <col:26, col:34> 'int' '<'
|   | |       |       | |       |     | |-ImplicitCastExpr 0x7fffd846aae0 <col:26, col:28> 'float' <LValueToRValue>
|   | |       |       | |       |     | | `-ParenExpr 0x7fffd846aa78 <col:26, col:28> 'float' lvalue
|   | |       |       | |       |     | |   `-DeclRefExpr 0x7fffd846aa50 <line:4621:54> 'float' lvalue Var 0x7fffd8466f50 'y0' 'float'
|   | |       |       | |       |     | `-ImplicitCastExpr 0x7fffd846aaf8 <line:4338:32, col:34> 'float' <LValueToRValue>
|   | |       |       | |       |     |   `-ParenExpr 0x7fffd846aac0 <col:32, col:34> 'float' lvalue
|   | |       |       | |       |     |     `-DeclRefExpr 0x7fffd846aa98 <line:4621:57> 'float' lvalue Var 0x7fffd8469f10 'y1' 'float'
|   | |       |       | |       |     |-ImplicitCastExpr 0x7fffd846abc8 <line:4338:38, col:40> 'float' <LValueToRValue>
|   | |       |       | |       |     | `-ParenExpr 0x7fffd846ab60 <col:38, col:40> 'float' lvalue
|   | |       |       | |       |     |   `-DeclRefExpr 0x7fffd846ab38 <line:4621:54> 'float' lvalue Var 0x7fffd8466f50 'y0' 'float'
|   | |       |       | |       |     `-ImplicitCastExpr 0x7fffd846abe0 <line:4338:44, col:46> 'float' <LValueToRValue>
|   | |       |       | |       |       `-ParenExpr 0x7fffd846aba8 <col:44, col:46> 'float' lvalue
|   | |       |       | |       |         `-DeclRefExpr 0x7fffd846ab80 <line:4621:57> 'float' lvalue Var 0x7fffd8469f10 'y1' 'float'
|   | |       |       | |       `-ImplicitCastExpr 0x7fffd846acb0 <line:4338:44, col:46> 'float' <LValueToRValue>
|   | |       |       | |         `-ParenExpr 0x7fffd846ac90 <col:44, col:46> 'float' lvalue
|   | |       |       | |           `-DeclRefExpr 0x7fffd846ac68 <line:4621:61> 'float' lvalue Var 0x7fffd8469a88 'y2' 'float'
|   | |       |       | |-DeclStmt 0x7fffd846b310 <line:4622:19, col:64>
|   | |       |       | | `-VarDecl 0x7fffd846ad48 <col:19, line:4339:47> line:4622:25 used box_x1 'float' cinit
|   | |       |       | |   `-ParenExpr 0x7fffd846b2f0 <line:4339:25, col:47> 'float'
|   | |       |       | |     `-ConditionalOperator 0x7fffd846b2c0 <col:26, col:46> 'float'
|   | |       |       | |       |-BinaryOperator 0x7fffd846b020 <col:26, col:34> 'int' '<'
|   | |       |       | |       | |-ParenExpr 0x7fffd846afa0 <col:26, col:28> 'float'
|   | |       |       | |       | | `-ParenExpr 0x7fffd846af80 <col:25, col:47> 'float'
|   | |       |       | |       | |   `-ConditionalOperator 0x7fffd846af50 <col:26, col:46> 'float'
|   | |       |       | |       | |     |-BinaryOperator 0x7fffd846ae68 <col:26, col:34> 'int' '<'
|   | |       |       | |       | |     | |-ImplicitCastExpr 0x7fffd846ae38 <col:26, col:28> 'float' <LValueToRValue>
|   | |       |       | |       | |     | | `-ParenExpr 0x7fffd846add0 <col:26, col:28> 'float' lvalue
|   | |       |       | |       | |     | |   `-DeclRefExpr 0x7fffd846ada8 <line:4622:54> 'float' lvalue Var 0x7fffd8466d48 'x0' 'float'
|   | |       |       | |       | |     | `-ImplicitCastExpr 0x7fffd846ae50 <line:4339:32, col:34> 'float' <LValueToRValue>
|   | |       |       | |       | |     |   `-ParenExpr 0x7fffd846ae18 <col:32, col:34> 'float' lvalue
|   | |       |       | |       | |     |     `-DeclRefExpr 0x7fffd846adf0 <line:4622:57> 'float' lvalue Var 0x7fffd8469d08 'x1' 'float'
|   | |       |       | |       | |     |-ImplicitCastExpr 0x7fffd846af20 <line:4339:38, col:40> 'float' <LValueToRValue>
|   | |       |       | |       | |     | `-ParenExpr 0x7fffd846aeb8 <col:38, col:40> 'float' lvalue
|   | |       |       | |       | |     |   `-DeclRefExpr 0x7fffd846ae90 <line:4622:57> 'float' lvalue Var 0x7fffd8469d08 'x1' 'float'
|   | |       |       | |       | |     `-ImplicitCastExpr 0x7fffd846af38 <line:4339:44, col:46> 'float' <LValueToRValue>
|   | |       |       | |       | |       `-ParenExpr 0x7fffd846af00 <col:44, col:46> 'float' lvalue
|   | |       |       | |       | |         `-DeclRefExpr 0x7fffd846aed8 <line:4622:54> 'float' lvalue Var 0x7fffd8466d48 'x0' 'float'
|   | |       |       | |       | `-ImplicitCastExpr 0x7fffd846b008 <line:4339:32, col:34> 'float' <LValueToRValue>
|   | |       |       | |       |   `-ParenExpr 0x7fffd846afe8 <col:32, col:34> 'float' lvalue
|   | |       |       | |       |     `-DeclRefExpr 0x7fffd846afc0 <line:4622:61> 'float' lvalue Var 0x7fffd8469838 'x2' 'float'
|   | |       |       | |       |-ImplicitCastExpr 0x7fffd846b2a8 <line:4339:38, col:40> 'float' <LValueToRValue>
|   | |       |       | |       | `-ParenExpr 0x7fffd846b070 <col:38, col:40> 'float' lvalue
|   | |       |       | |       |   `-DeclRefExpr 0x7fffd846b048 <line:4622:61> 'float' lvalue Var 0x7fffd8469838 'x2' 'float'
|   | |       |       | |       `-ParenExpr 0x7fffd846b288 <line:4339:44, col:46> 'float'
|   | |       |       | |         `-ParenExpr 0x7fffd846b268 <col:25, col:47> 'float'
|   | |       |       | |           `-ConditionalOperator 0x7fffd846b238 <col:26, col:46> 'float'
|   | |       |       | |             |-BinaryOperator 0x7fffd846b150 <col:26, col:34> 'int' '<'
|   | |       |       | |             | |-ImplicitCastExpr 0x7fffd846b120 <col:26, col:28> 'float' <LValueToRValue>
|   | |       |       | |             | | `-ParenExpr 0x7fffd846b0b8 <col:26, col:28> 'float' lvalue
|   | |       |       | |             | |   `-DeclRefExpr 0x7fffd846b090 <line:4622:54> 'float' lvalue Var 0x7fffd8466d48 'x0' 'float'
|   | |       |       | |             | `-ImplicitCastExpr 0x7fffd846b138 <line:4339:32, col:34> 'float' <LValueToRValue>
|   | |       |       | |             |   `-ParenExpr 0x7fffd846b100 <col:32, col:34> 'float' lvalue
|   | |       |       | |             |     `-DeclRefExpr 0x7fffd846b0d8 <line:4622:57> 'float' lvalue Var 0x7fffd8469d08 'x1' 'float'
|   | |       |       | |             |-ImplicitCastExpr 0x7fffd846b208 <line:4339:38, col:40> 'float' <LValueToRValue>
|   | |       |       | |             | `-ParenExpr 0x7fffd846b1a0 <col:38, col:40> 'float' lvalue
|   | |       |       | |             |   `-DeclRefExpr 0x7fffd846b178 <line:4622:57> 'float' lvalue Var 0x7fffd8469d08 'x1' 'float'
|   | |       |       | |             `-ImplicitCastExpr 0x7fffd846b220 <line:4339:44, col:46> 'float' <LValueToRValue>
|   | |       |       | |               `-ParenExpr 0x7fffd846b1e8 <col:44, col:46> 'float' lvalue
|   | |       |       | |                 `-DeclRefExpr 0x7fffd846b1c0 <line:4622:54> 'float' lvalue Var 0x7fffd8466d48 'x0' 'float'
|   | |       |       | |-DeclStmt 0x7fffd846b908 <line:4623:19, col:64>
|   | |       |       | | `-VarDecl 0x7fffd846b340 <col:19, line:4339:47> line:4623:25 used box_y1 'float' cinit
|   | |       |       | |   `-ParenExpr 0x7fffd846b8e8 <line:4339:25, col:47> 'float'
|   | |       |       | |     `-ConditionalOperator 0x7fffd846b8b8 <col:26, col:46> 'float'
|   | |       |       | |       |-BinaryOperator 0x7fffd846b618 <col:26, col:34> 'int' '<'
|   | |       |       | |       | |-ParenExpr 0x7fffd846b598 <col:26, col:28> 'float'
|   | |       |       | |       | | `-ParenExpr 0x7fffd846b578 <col:25, col:47> 'float'
|   | |       |       | |       | |   `-ConditionalOperator 0x7fffd846b548 <col:26, col:46> 'float'
|   | |       |       | |       | |     |-BinaryOperator 0x7fffd846b460 <col:26, col:34> 'int' '<'
|   | |       |       | |       | |     | |-ImplicitCastExpr 0x7fffd846b430 <col:26, col:28> 'float' <LValueToRValue>
|   | |       |       | |       | |     | | `-ParenExpr 0x7fffd846b3c8 <col:26, col:28> 'float' lvalue
|   | |       |       | |       | |     | |   `-DeclRefExpr 0x7fffd846b3a0 <line:4623:54> 'float' lvalue Var 0x7fffd8466f50 'y0' 'float'
|   | |       |       | |       | |     | `-ImplicitCastExpr 0x7fffd846b448 <line:4339:32, col:34> 'float' <LValueToRValue>
|   | |       |       | |       | |     |   `-ParenExpr 0x7fffd846b410 <col:32, col:34> 'float' lvalue
|   | |       |       | |       | |     |     `-DeclRefExpr 0x7fffd846b3e8 <line:4623:57> 'float' lvalue Var 0x7fffd8469f10 'y1' 'float'
|   | |       |       | |       | |     |-ImplicitCastExpr 0x7fffd846b518 <line:4339:38, col:40> 'float' <LValueToRValue>
|   | |       |       | |       | |     | `-ParenExpr 0x7fffd846b4b0 <col:38, col:40> 'float' lvalue
|   | |       |       | |       | |     |   `-DeclRefExpr 0x7fffd846b488 <line:4623:57> 'float' lvalue Var 0x7fffd8469f10 'y1' 'float'
|   | |       |       | |       | |     `-ImplicitCastExpr 0x7fffd846b530 <line:4339:44, col:46> 'float' <LValueToRValue>
|   | |       |       | |       | |       `-ParenExpr 0x7fffd846b4f8 <col:44, col:46> 'float' lvalue
|   | |       |       | |       | |         `-DeclRefExpr 0x7fffd846b4d0 <line:4623:54> 'float' lvalue Var 0x7fffd8466f50 'y0' 'float'
|   | |       |       | |       | `-ImplicitCastExpr 0x7fffd846b600 <line:4339:32, col:34> 'float' <LValueToRValue>
|   | |       |       | |       |   `-ParenExpr 0x7fffd846b5e0 <col:32, col:34> 'float' lvalue
|   | |       |       | |       |     `-DeclRefExpr 0x7fffd846b5b8 <line:4623:61> 'float' lvalue Var 0x7fffd8469a88 'y2' 'float'
|   | |       |       | |       |-ImplicitCastExpr 0x7fffd846b8a0 <line:4339:38, col:40> 'float' <LValueToRValue>
|   | |       |       | |       | `-ParenExpr 0x7fffd846b668 <col:38, col:40> 'float' lvalue
|   | |       |       | |       |   `-DeclRefExpr 0x7fffd846b640 <line:4623:61> 'float' lvalue Var 0x7fffd8469a88 'y2' 'float'
|   | |       |       | |       `-ParenExpr 0x7fffd846b880 <line:4339:44, col:46> 'float'
|   | |       |       | |         `-ParenExpr 0x7fffd846b860 <col:25, col:47> 'float'
|   | |       |       | |           `-ConditionalOperator 0x7fffd846b830 <col:26, col:46> 'float'
|   | |       |       | |             |-BinaryOperator 0x7fffd846b748 <col:26, col:34> 'int' '<'
|   | |       |       | |             | |-ImplicitCastExpr 0x7fffd846b718 <col:26, col:28> 'float' <LValueToRValue>
|   | |       |       | |             | | `-ParenExpr 0x7fffd846b6b0 <col:26, col:28> 'float' lvalue
|   | |       |       | |             | |   `-DeclRefExpr 0x7fffd846b688 <line:4623:54> 'float' lvalue Var 0x7fffd8466f50 'y0' 'float'
|   | |       |       | |             | `-ImplicitCastExpr 0x7fffd846b730 <line:4339:32, col:34> 'float' <LValueToRValue>
|   | |       |       | |             |   `-ParenExpr 0x7fffd846b6f8 <col:32, col:34> 'float' lvalue
|   | |       |       | |             |     `-DeclRefExpr 0x7fffd846b6d0 <line:4623:57> 'float' lvalue Var 0x7fffd8469f10 'y1' 'float'
|   | |       |       | |             |-ImplicitCastExpr 0x7fffd846b800 <line:4339:38, col:40> 'float' <LValueToRValue>
|   | |       |       | |             | `-ParenExpr 0x7fffd846b798 <col:38, col:40> 'float' lvalue
|   | |       |       | |             |   `-DeclRefExpr 0x7fffd846b770 <line:4623:57> 'float' lvalue Var 0x7fffd8469f10 'y1' 'float'
|   | |       |       | |             `-ImplicitCastExpr 0x7fffd846b818 <line:4339:44, col:46> 'float' <LValueToRValue>
|   | |       |       | |               `-ParenExpr 0x7fffd846b7e0 <col:44, col:46> 'float' lvalue
|   | |       |       | |                 `-DeclRefExpr 0x7fffd846b7b8 <line:4623:54> 'float' lvalue Var 0x7fffd8466f50 'y0' 'float'
|   | |       |       | `-IfStmt 0x7fffd8472db0 <line:4625:19, line:4681:19>
|   | |       |       |   |-<<<NULL>>>
|   | |       |       |   |-<<<NULL>>>
|   | |       |       |   |-BinaryOperator 0x7fffd846bdb0 <line:4625:23, col:107> 'int' '&&'
|   | |       |       |   | |-BinaryOperator 0x7fffd846bc78 <col:23, col:83> 'int' '&&'
|   | |       |       |   | | |-BinaryOperator 0x7fffd846bb40 <col:23, col:59> 'int' '&&'
|   | |       |       |   | | | |-BinaryOperator 0x7fffd846ba08 <col:23, col:35> 'int' '>'
|   | |       |       |   | | | | |-ImplicitCastExpr 0x7fffd846b9f0 <col:23> 'float' <LValueToRValue>
|   | |       |       |   | | | | | `-DeclRefExpr 0x7fffd846b920 <col:23> 'float' lvalue Var 0x7fffd84663e0 'sx' 'float'
|   | |       |       |   | | | | `-BinaryOperator 0x7fffd846b9c8 <col:28, col:35> 'float' '-'
|   | |       |       |   | | | |   |-ImplicitCastExpr 0x7fffd846b998 <col:28> 'float' <LValueToRValue>
|   | |       |       |   | | | |   | `-DeclRefExpr 0x7fffd846b948 <col:28> 'float' lvalue Var 0x7fffd846a148 'box_x0' 'float'
|   | |       |       |   | | | |   `-ImplicitCastExpr 0x7fffd846b9b0 <col:35> 'float' <LValueToRValue>
|   | |       |       |   | | | |     `-DeclRefExpr 0x7fffd846b970 <col:35> 'float' lvalue Var 0x7fffd8466330 'min_dist' 'float'
|   | |       |       |   | | | `-BinaryOperator 0x7fffd846bb18 <col:47, col:59> 'int' '<'
|   | |       |       |   | | |   |-ImplicitCastExpr 0x7fffd846bb00 <col:47> 'float' <LValueToRValue>
|   | |       |       |   | | |   | `-DeclRefExpr 0x7fffd846ba30 <col:47> 'float' lvalue Var 0x7fffd84663e0 'sx' 'float'
|   | |       |       |   | | |   `-BinaryOperator 0x7fffd846bad8 <col:52, col:59> 'float' '+'
|   | |       |       |   | | |     |-ImplicitCastExpr 0x7fffd846baa8 <col:52> 'float' <LValueToRValue>
|   | |       |       |   | | |     | `-DeclRefExpr 0x7fffd846ba58 <col:52> 'float' lvalue Var 0x7fffd846ad48 'box_x1' 'float'
|   | |       |       |   | | |     `-ImplicitCastExpr 0x7fffd846bac0 <col:59> 'float' <LValueToRValue>
|   | |       |       |   | | |       `-DeclRefExpr 0x7fffd846ba80 <col:59> 'float' lvalue Var 0x7fffd8466330 'min_dist' 'float'
|   | |       |       |   | | `-BinaryOperator 0x7fffd846bc50 <col:71, col:83> 'int' '>'
|   | |       |       |   | |   |-ImplicitCastExpr 0x7fffd846bc38 <col:71> 'float' <LValueToRValue>
|   | |       |       |   | |   | `-DeclRefExpr 0x7fffd846bb68 <col:71> 'float' lvalue Var 0x7fffd8466538 'sy' 'float'
|   | |       |       |   | |   `-BinaryOperator 0x7fffd846bc10 <col:76, col:83> 'float' '-'
|   | |       |       |   | |     |-ImplicitCastExpr 0x7fffd846bbe0 <col:76> 'float' <LValueToRValue>
|   | |       |       |   | |     | `-DeclRefExpr 0x7fffd846bb90 <col:76> 'float' lvalue Var 0x7fffd846a740 'box_y0' 'float'
|   | |       |       |   | |     `-ImplicitCastExpr 0x7fffd846bbf8 <col:83> 'float' <LValueToRValue>
|   | |       |       |   | |       `-DeclRefExpr 0x7fffd846bbb8 <col:83> 'float' lvalue Var 0x7fffd8466330 'min_dist' 'float'
|   | |       |       |   | `-BinaryOperator 0x7fffd846bd88 <col:95, col:107> 'int' '<'
|   | |       |       |   |   |-ImplicitCastExpr 0x7fffd846bd70 <col:95> 'float' <LValueToRValue>
|   | |       |       |   |   | `-DeclRefExpr 0x7fffd846bca0 <col:95> 'float' lvalue Var 0x7fffd8466538 'sy' 'float'
|   | |       |       |   |   `-BinaryOperator 0x7fffd846bd48 <col:100, col:107> 'float' '+'
|   | |       |       |   |     |-ImplicitCastExpr 0x7fffd846bd18 <col:100> 'float' <LValueToRValue>
|   | |       |       |   |     | `-DeclRefExpr 0x7fffd846bcc8 <col:100> 'float' lvalue Var 0x7fffd846b340 'box_y1' 'float'
|   | |       |       |   |     `-ImplicitCastExpr 0x7fffd846bd30 <col:107> 'float' <LValueToRValue>
|   | |       |       |   |       `-DeclRefExpr 0x7fffd846bcf0 <col:107> 'float' lvalue Var 0x7fffd8466330 'min_dist' 'float'
|   | |       |       |   |-CompoundStmt 0x7fffd8472d50 <col:117, line:4681:19>
|   | |       |       |   | |-DeclStmt 0x7fffd846be70 <line:4626:22, col:31>
|   | |       |       |   | | `-VarDecl 0x7fffd846bdf0 <col:22, col:30> col:26 used num 'int' cinit
|   | |       |       |   | |   `-IntegerLiteral 0x7fffd846be50 <col:30> 'int' 0
|   | |       |       |   | |-DeclStmt 0x7fffd846c0e0 <line:4627:22, col:50>
|   | |       |       |   | | |-VarDecl 0x7fffd846bea0 <col:22, col:36> col:28 used ax 'float' cinit
|   | |       |       |   | | | `-BinaryOperator 0x7fffd846bf80 <col:33, col:36> 'float' '-'
|   | |       |       |   | | |   |-ImplicitCastExpr 0x7fffd846bf50 <col:33> 'float' <LValueToRValue>
|   | |       |       |   | | |   | `-DeclRefExpr 0x7fffd846bf00 <col:33> 'float' lvalue Var 0x7fffd8469d08 'x1' 'float'
|   | |       |       |   | | |   `-ImplicitCastExpr 0x7fffd846bf68 <col:36> 'float' <LValueToRValue>
|   | |       |       |   | | |     `-DeclRefExpr 0x7fffd846bf28 <col:36> 'float' lvalue Var 0x7fffd8466d48 'x0' 'float'
|   | |       |       |   | | `-VarDecl 0x7fffd846bfc0 <col:22, col:48> col:40 used ay 'float' cinit
|   | |       |       |   | |   `-BinaryOperator 0x7fffd846c0a0 <col:45, col:48> 'float' '-'
|   | |       |       |   | |     |-ImplicitCastExpr 0x7fffd846c070 <col:45> 'float' <LValueToRValue>
|   | |       |       |   | |     | `-DeclRefExpr 0x7fffd846c020 <col:45> 'float' lvalue Var 0x7fffd8469f10 'y1' 'float'
|   | |       |       |   | |     `-ImplicitCastExpr 0x7fffd846c088 <col:48> 'float' <LValueToRValue>
|   | |       |       |   | |       `-DeclRefExpr 0x7fffd846c048 <col:48> 'float' lvalue Var 0x7fffd8466f50 'y0' 'float'
|   | |       |       |   | |-DeclStmt 0x7fffd846c4e0 <line:4628:22, col:68>
|   | |       |       |   | | |-VarDecl 0x7fffd846c110 <col:22, col:45> col:28 used bx 'float' cinit
|   | |       |       |   | | | `-BinaryOperator 0x7fffd846c2b8 <col:33, col:45> 'float' '+'
|   | |       |       |   | | |   |-BinaryOperator 0x7fffd846c250 <col:33, col:40> 'float' '-'
|   | |       |       |   | | |   | |-ImplicitCastExpr 0x7fffd846c238 <col:33> 'float' <LValueToRValue>
|   | |       |       |   | | |   | | `-DeclRefExpr 0x7fffd846c170 <col:33> 'float' lvalue Var 0x7fffd8466d48 'x0' 'float'
|   | |       |       |   | | |   | `-BinaryOperator 0x7fffd846c210 <col:38, col:40> 'float' '*'
|   | |       |       |   | | |   |   |-ImplicitCastExpr 0x7fffd846c1f8 <col:38> 'float' <IntegralToFloating>
|   | |       |       |   | | |   |   | `-IntegerLiteral 0x7fffd846c198 <col:38> 'int' 2
|   | |       |       |   | | |   |   `-ImplicitCastExpr 0x7fffd846c1e0 <col:40> 'float' <LValueToRValue>
|   | |       |       |   | | |   |     `-DeclRefExpr 0x7fffd846c1b8 <col:40> 'float' lvalue Var 0x7fffd8469d08 'x1' 'float'
|   | |       |       |   | | |   `-ImplicitCastExpr 0x7fffd846c2a0 <col:45> 'float' <LValueToRValue>
|   | |       |       |   | | |     `-DeclRefExpr 0x7fffd846c278 <col:45> 'float' lvalue Var 0x7fffd8469838 'x2' 'float'
|   | |       |       |   | | `-VarDecl 0x7fffd846c2f8 <col:22, col:66> col:49 used by 'float' cinit
|   | |       |       |   | |   `-BinaryOperator 0x7fffd846c4a0 <col:54, col:66> 'float' '+'
|   | |       |       |   | |     |-BinaryOperator 0x7fffd846c438 <col:54, col:61> 'float' '-'
|   | |       |       |   | |     | |-ImplicitCastExpr 0x7fffd846c420 <col:54> 'float' <LValueToRValue>
|   | |       |       |   | |     | | `-DeclRefExpr 0x7fffd846c358 <col:54> 'float' lvalue Var 0x7fffd8466f50 'y0' 'float'
|   | |       |       |   | |     | `-BinaryOperator 0x7fffd846c3f8 <col:59, col:61> 'float' '*'
|   | |       |       |   | |     |   |-ImplicitCastExpr 0x7fffd846c3e0 <col:59> 'float' <IntegralToFloating>
|   | |       |       |   | |     |   | `-IntegerLiteral 0x7fffd846c380 <col:59> 'int' 2
|   | |       |       |   | |     |   `-ImplicitCastExpr 0x7fffd846c3c8 <col:61> 'float' <LValueToRValue>
|   | |       |       |   | |     |     `-DeclRefExpr 0x7fffd846c3a0 <col:61> 'float' lvalue Var 0x7fffd8469f10 'y1' 'float'
|   | |       |       |   | |     `-ImplicitCastExpr 0x7fffd846c488 <col:66> 'float' <LValueToRValue>
|   | |       |       |   | |       `-DeclRefExpr 0x7fffd846c460 <col:66> 'float' lvalue Var 0x7fffd8469a88 'y2' 'float'
|   | |       |       |   | |-DeclStmt 0x7fffd846c750 <line:4629:22, col:54>
|   | |       |       |   | | |-VarDecl 0x7fffd846c510 <col:22, col:38> col:28 used mx 'float' cinit
|   | |       |       |   | | | `-BinaryOperator 0x7fffd846c5f0 <col:33, col:38> 'float' '-'
|   | |       |       |   | | |   |-ImplicitCastExpr 0x7fffd846c5c0 <col:33> 'float' <LValueToRValue>
|   | |       |       |   | | |   | `-DeclRefExpr 0x7fffd846c570 <col:33> 'float' lvalue Var 0x7fffd8466d48 'x0' 'float'
|   | |       |       |   | | |   `-ImplicitCastExpr 0x7fffd846c5d8 <col:38> 'float' <LValueToRValue>
|   | |       |       |   | | |     `-DeclRefExpr 0x7fffd846c598 <col:38> 'float' lvalue Var 0x7fffd84663e0 'sx' 'float'
|   | |       |       |   | | `-VarDecl 0x7fffd846c630 <col:22, col:52> col:42 used my 'float' cinit
|   | |       |       |   | |   `-BinaryOperator 0x7fffd846c710 <col:47, col:52> 'float' '-'
|   | |       |       |   | |     |-ImplicitCastExpr 0x7fffd846c6e0 <col:47> 'float' <LValueToRValue>
|   | |       |       |   | |     | `-DeclRefExpr 0x7fffd846c690 <col:47> 'float' lvalue Var 0x7fffd8466f50 'y0' 'float'
|   | |       |       |   | |     `-ImplicitCastExpr 0x7fffd846c6f8 <col:52> 'float' <LValueToRValue>
|   | |       |       |   | |       `-DeclRefExpr 0x7fffd846c6b8 <col:52> 'float' lvalue Var 0x7fffd8466538 'sy' 'float'
|   | |       |       |   | |-DeclStmt 0x7fffd846cac8 <line:4630:22, col:45>
|   | |       |       |   | | |-VarDecl 0x7fffd846c7f0 <col:22, col:33> col:28 used res 'float [3]'
|   | |       |       |   | | |-VarDecl 0x7fffd846c8d0 <col:22, col:35> col:35 used px 'float'
|   | |       |       |   | | |-VarDecl 0x7fffd846c948 <col:22, col:38> col:38 used py 'float'
|   | |       |       |   | | |-VarDecl 0x7fffd846c9c0 <col:22, col:41> col:41 used t 'float'
|   | |       |       |   | | `-VarDecl 0x7fffd846ca38 <col:22, col:43> col:43 used it 'float'
|   | |       |       |   | |-DeclStmt 0x7fffd846cc18 <line:4631:22, col:49>
|   | |       |       |   | | `-VarDecl 0x7fffd846caf8 <col:22, col:48> col:28 used a_inv 'float' cinit
|   | |       |       |   | |   `-ImplicitCastExpr 0x7fffd846cc00 <col:36, col:48> 'float' <LValueToRValue>
|   | |       |       |   | |     `-ArraySubscriptExpr 0x7fffd846cbd8 <col:36, col:48> 'float' lvalue
|   | |       |       |   | |       |-ImplicitCastExpr 0x7fffd846cba8 <col:36> 'float *' <LValueToRValue>
|   | |       |       |   | |       | `-DeclRefExpr 0x7fffd846cb58 <col:36> 'float *' lvalue Var 0x7fffd8462700 'precompute' 'float *'
|   | |       |       |   | |       `-ImplicitCastExpr 0x7fffd846cbc0 <col:47> 'int' <LValueToRValue>
|   | |       |       |   | |         `-DeclRefExpr 0x7fffd846cb80 <col:47> 'int' lvalue Var 0x7fffd84625d0 'i' 'int'
|   | |       |       |   | |-IfStmt 0x7fffd846f110 <line:4632:22, line:4656:22>
|   | |       |       |   | | |-<<<NULL>>>
|   | |       |       |   | | |-<<<NULL>>>
|   | |       |       |   | | |-BinaryOperator 0x7fffd846cca8 <line:4632:26, col:35> 'int' '=='
|   | |       |       |   | | | |-ImplicitCastExpr 0x7fffd846cc90 <col:26> 'double' <FloatingCast>
|   | |       |       |   | | | | `-ImplicitCastExpr 0x7fffd846cc78 <col:26> 'float' <LValueToRValue>
|   | |       |       |   | | | |   `-DeclRefExpr 0x7fffd846cc30 <col:26> 'float' lvalue Var 0x7fffd846caf8 'a_inv' 'float'
|   | |       |       |   | | | `-FloatingLiteral 0x7fffd846cc58 <col:35> 'double' 0.000000e+00
|   | |       |       |   | | |-CompoundStmt 0x7fffd846e430 <col:40, line:4651:22>
|   | |       |       |   | | | |-DeclStmt 0x7fffd846cf40 <line:4633:25, col:52>
|   | |       |       |   | | | | `-VarDecl 0x7fffd846cce8 <col:25, col:51> col:31 used a 'float' cinit
|   | |       |       |   | | | |   `-BinaryOperator 0x7fffd846cf18 <col:35, col:51> 'float' '*'
|   | |       |       |   | | | |     |-ImplicitCastExpr 0x7fffd846cf00 <col:35> 'float' <IntegralToFloating>
|   | |       |       |   | | | |     | `-IntegerLiteral 0x7fffd846cd48 <col:35> 'int' 3
|   | |       |       |   | | | |     `-ParenExpr 0x7fffd846cee0 <col:37, col:51> 'float'
|   | |       |       |   | | | |       `-BinaryOperator 0x7fffd846ceb8 <col:38, col:49> 'float' '+'
|   | |       |       |   | | | |         |-BinaryOperator 0x7fffd846cde8 <col:38, col:41> 'float' '*'
|   | |       |       |   | | | |         | |-ImplicitCastExpr 0x7fffd846cdb8 <col:38> 'float' <LValueToRValue>
|   | |       |       |   | | | |         | | `-DeclRefExpr 0x7fffd846cd68 <col:38> 'float' lvalue Var 0x7fffd846bea0 'ax' 'float'
|   | |       |       |   | | | |         | `-ImplicitCastExpr 0x7fffd846cdd0 <col:41> 'float' <LValueToRValue>
|   | |       |       |   | | | |         |   `-DeclRefExpr 0x7fffd846cd90 <col:41> 'float' lvalue Var 0x7fffd846c110 'bx' 'float'
|   | |       |       |   | | | |         `-BinaryOperator 0x7fffd846ce90 <col:46, col:49> 'float' '*'
|   | |       |       |   | | | |           |-ImplicitCastExpr 0x7fffd846ce60 <col:46> 'float' <LValueToRValue>
|   | |       |       |   | | | |           | `-DeclRefExpr 0x7fffd846ce10 <col:46> 'float' lvalue Var 0x7fffd846bfc0 'ay' 'float'
|   | |       |       |   | | | |           `-ImplicitCastExpr 0x7fffd846ce78 <col:49> 'float' <LValueToRValue>
|   | |       |       |   | | | |             `-DeclRefExpr 0x7fffd846ce38 <col:49> 'float' lvalue Var 0x7fffd846c2f8 'by' 'float'
|   | |       |       |   | | | |-DeclStmt 0x7fffd846d388 <line:4634:25, col:68>
|   | |       |       |   | | | | `-VarDecl 0x7fffd846cf70 <col:25, col:67> col:31 used b 'float' cinit
|   | |       |       |   | | | |   `-BinaryOperator 0x7fffd846d360 <col:35, col:67> 'float' '+'
|   | |       |       |   | | | |     |-BinaryOperator 0x7fffd846d1a0 <col:35, col:51> 'float' '*'
|   | |       |       |   | | | |     | |-ImplicitCastExpr 0x7fffd846d188 <col:35> 'float' <IntegralToFloating>
|   | |       |       |   | | | |     | | `-IntegerLiteral 0x7fffd846cfd0 <col:35> 'int' 2
|   | |       |       |   | | | |     | `-ParenExpr 0x7fffd846d168 <col:37, col:51> 'float'
|   | |       |       |   | | | |     |   `-BinaryOperator 0x7fffd846d140 <col:38, col:49> 'float' '+'
|   | |       |       |   | | | |     |     |-BinaryOperator 0x7fffd846d070 <col:38, col:41> 'float' '*'
|   | |       |       |   | | | |     |     | |-ImplicitCastExpr 0x7fffd846d040 <col:38> 'float' <LValueToRValue>
|   | |       |       |   | | | |     |     | | `-DeclRefExpr 0x7fffd846cff0 <col:38> 'float' lvalue Var 0x7fffd846bea0 'ax' 'float'
|   | |       |       |   | | | |     |     | `-ImplicitCastExpr 0x7fffd846d058 <col:41> 'float' <LValueToRValue>
|   | |       |       |   | | | |     |     |   `-DeclRefExpr 0x7fffd846d018 <col:41> 'float' lvalue Var 0x7fffd846bea0 'ax' 'float'
|   | |       |       |   | | | |     |     `-BinaryOperator 0x7fffd846d118 <col:46, col:49> 'float' '*'
|   | |       |       |   | | | |     |       |-ImplicitCastExpr 0x7fffd846d0e8 <col:46> 'float' <LValueToRValue>
|   | |       |       |   | | | |     |       | `-DeclRefExpr 0x7fffd846d098 <col:46> 'float' lvalue Var 0x7fffd846bfc0 'ay' 'float'
|   | |       |       |   | | | |     |       `-ImplicitCastExpr 0x7fffd846d100 <col:49> 'float' <LValueToRValue>
|   | |       |       |   | | | |     |         `-DeclRefExpr 0x7fffd846d0c0 <col:49> 'float' lvalue Var 0x7fffd846bfc0 'ay' 'float'
|   | |       |       |   | | | |     `-ParenExpr 0x7fffd846d340 <col:55, col:67> 'float'
|   | |       |       |   | | | |       `-BinaryOperator 0x7fffd846d318 <col:56, col:65> 'float' '+'
|   | |       |       |   | | | |         |-BinaryOperator 0x7fffd846d248 <col:56, col:59> 'float' '*'
|   | |       |       |   | | | |         | |-ImplicitCastExpr 0x7fffd846d218 <col:56> 'float' <LValueToRValue>
|   | |       |       |   | | | |         | | `-DeclRefExpr 0x7fffd846d1c8 <col:56> 'float' lvalue Var 0x7fffd846c510 'mx' 'float'
|   | |       |       |   | | | |         | `-ImplicitCastExpr 0x7fffd846d230 <col:59> 'float' <LValueToRValue>
|   | |       |       |   | | | |         |   `-DeclRefExpr 0x7fffd846d1f0 <col:59> 'float' lvalue Var 0x7fffd846c110 'bx' 'float'
|   | |       |       |   | | | |         `-BinaryOperator 0x7fffd846d2f0 <col:62, col:65> 'float' '*'
|   | |       |       |   | | | |           |-ImplicitCastExpr 0x7fffd846d2c0 <col:62> 'float' <LValueToRValue>
|   | |       |       |   | | | |           | `-DeclRefExpr 0x7fffd846d270 <col:62> 'float' lvalue Var 0x7fffd846c630 'my' 'float'
|   | |       |       |   | | | |           `-ImplicitCastExpr 0x7fffd846d2d8 <col:65> 'float' <LValueToRValue>
|   | |       |       |   | | | |             `-DeclRefExpr 0x7fffd846d298 <col:65> 'float' lvalue Var 0x7fffd846c2f8 'by' 'float'
|   | |       |       |   | | | |-DeclStmt 0x7fffd846d590 <line:4635:25, col:46>
|   | |       |       |   | | | | `-VarDecl 0x7fffd846d3b8 <col:25, col:44> col:31 used c 'float' cinit
|   | |       |       |   | | | |   `-BinaryOperator 0x7fffd846d568 <col:35, col:44> 'float' '+'
|   | |       |       |   | | | |     |-BinaryOperator 0x7fffd846d498 <col:35, col:38> 'float' '*'
|   | |       |       |   | | | |     | |-ImplicitCastExpr 0x7fffd846d468 <col:35> 'float' <LValueToRValue>
|   | |       |       |   | | | |     | | `-DeclRefExpr 0x7fffd846d418 <col:35> 'float' lvalue Var 0x7fffd846c510 'mx' 'float'
|   | |       |       |   | | | |     | `-ImplicitCastExpr 0x7fffd846d480 <col:38> 'float' <LValueToRValue>
|   | |       |       |   | | | |     |   `-DeclRefExpr 0x7fffd846d440 <col:38> 'float' lvalue Var 0x7fffd846bea0 'ax' 'float'
|   | |       |       |   | | | |     `-BinaryOperator 0x7fffd846d540 <col:41, col:44> 'float' '*'
|   | |       |       |   | | | |       |-ImplicitCastExpr 0x7fffd846d510 <col:41> 'float' <LValueToRValue>
|   | |       |       |   | | | |       | `-DeclRefExpr 0x7fffd846d4c0 <col:41> 'float' lvalue Var 0x7fffd846c630 'my' 'float'
|   | |       |       |   | | | |       `-ImplicitCastExpr 0x7fffd846d528 <col:44> 'float' <LValueToRValue>
|   | |       |       |   | | | |         `-DeclRefExpr 0x7fffd846d4e8 <col:44> 'float' lvalue Var 0x7fffd846bfc0 'ay' 'float'
|   | |       |       |   | | | `-IfStmt 0x7fffd846e3f8 <line:4636:25, line:4650:25>
|   | |       |       |   | | |   |-<<<NULL>>>
|   | |       |       |   | | |   |-<<<NULL>>>
|   | |       |       |   | | |   |-BinaryOperator 0x7fffd846d620 <line:4636:29, col:34> 'int' '=='
|   | |       |       |   | | |   | |-ImplicitCastExpr 0x7fffd846d608 <col:29> 'double' <FloatingCast>
|   | |       |       |   | | |   | | `-ImplicitCastExpr 0x7fffd846d5f0 <col:29> 'float' <LValueToRValue>
|   | |       |       |   | | |   | |   `-DeclRefExpr 0x7fffd846d5a8 <col:29> 'float' lvalue Var 0x7fffd846cce8 'a' 'float'
|   | |       |       |   | | |   | `-FloatingLiteral 0x7fffd846d5d0 <col:34> 'double' 0.000000e+00
|   | |       |       |   | | |   |-CompoundStmt 0x7fffd846d8d8 <col:39, line:4640:25>
|   | |       |       |   | | |   | `-IfStmt 0x7fffd846d8a0 <line:4637:28, line:4639:28>
|   | |       |       |   | | |   |   |-<<<NULL>>>
|   | |       |       |   | | |   |   |-<<<NULL>>>
|   | |       |       |   | | |   |   |-BinaryOperator 0x7fffd846d6c0 <line:4637:32, col:37> 'int' '!='
|   | |       |       |   | | |   |   | |-ImplicitCastExpr 0x7fffd846d6a8 <col:32> 'double' <FloatingCast>
|   | |       |       |   | | |   |   | | `-ImplicitCastExpr 0x7fffd846d690 <col:32> 'float' <LValueToRValue>
|   | |       |       |   | | |   |   | |   `-DeclRefExpr 0x7fffd846d648 <col:32> 'float' lvalue Var 0x7fffd846cf70 'b' 'float'
|   | |       |       |   | | |   |   | `-FloatingLiteral 0x7fffd846d670 <col:37> 'double' 0.000000e+00
|   | |       |       |   | | |   |   |-CompoundStmt 0x7fffd846d888 <col:42, line:4639:28>
|   | |       |       |   | | |   |   | `-BinaryOperator 0x7fffd846d860 <line:4638:31, col:47> 'float' '='
|   | |       |       |   | | |   |   |   |-ArraySubscriptExpr 0x7fffd846d770 <col:31, col:40> 'float' lvalue
|   | |       |       |   | | |   |   |   | |-ImplicitCastExpr 0x7fffd846d758 <col:31> 'float *' <ArrayToPointerDecay>
|   | |       |       |   | | |   |   |   | | `-DeclRefExpr 0x7fffd846d6e8 <col:31> 'float [3]' lvalue Var 0x7fffd846c7f0 'res' 'float [3]'
|   | |       |       |   | | |   |   |   | `-UnaryOperator 0x7fffd846d738 <col:35, col:38> 'int' postfix '++'
|   | |       |       |   | | |   |   |   |   `-DeclRefExpr 0x7fffd846d710 <col:35> 'int' lvalue Var 0x7fffd846bdf0 'num' 'int'
|   | |       |       |   | | |   |   |   `-BinaryOperator 0x7fffd846d838 <col:44, col:47> 'float' '/'
|   | |       |       |   | | |   |   |     |-UnaryOperator 0x7fffd846d7d8 <col:44, col:45> 'float' prefix '-'
|   | |       |       |   | | |   |   |     | `-ImplicitCastExpr 0x7fffd846d7c0 <col:45> 'float' <LValueToRValue>
|   | |       |       |   | | |   |   |     |   `-DeclRefExpr 0x7fffd846d798 <col:45> 'float' lvalue Var 0x7fffd846d3b8 'c' 'float'
|   | |       |       |   | | |   |   |     `-ImplicitCastExpr 0x7fffd846d820 <col:47> 'float' <LValueToRValue>
|   | |       |       |   | | |   |   |       `-DeclRefExpr 0x7fffd846d7f8 <col:47> 'float' lvalue Var 0x7fffd846cf70 'b' 'float'
|   | |       |       |   | | |   |   `-<<<NULL>>>
|   | |       |       |   | | |   `-CompoundStmt 0x7fffd846e3d8 <line:4640:32, line:4650:25>
|   | |       |       |   | | |     |-DeclStmt 0x7fffd846db40 <line:4641:28, col:60>
|   | |       |       |   | | |     | `-VarDecl 0x7fffd846d908 <col:28, col:59> col:34 used discriminant 'float' cinit
|   | |       |       |   | | |     |   `-BinaryOperator 0x7fffd846db18 <col:49, col:59> 'float' '-'
|   | |       |       |   | | |     |     |-BinaryOperator 0x7fffd846d9e8 <col:49, col:51> 'float' '*'
|   | |       |       |   | | |     |     | |-ImplicitCastExpr 0x7fffd846d9b8 <col:49> 'float' <LValueToRValue>
|   | |       |       |   | | |     |     | | `-DeclRefExpr 0x7fffd846d968 <col:49> 'float' lvalue Var 0x7fffd846cf70 'b' 'float'
|   | |       |       |   | | |     |     | `-ImplicitCastExpr 0x7fffd846d9d0 <col:51> 'float' <LValueToRValue>
|   | |       |       |   | | |     |     |   `-DeclRefExpr 0x7fffd846d990 <col:51> 'float' lvalue Var 0x7fffd846cf70 'b' 'float'
|   | |       |       |   | | |     |     `-BinaryOperator 0x7fffd846daf0 <col:55, col:59> 'float' '*'
|   | |       |       |   | | |     |       |-BinaryOperator 0x7fffd846da88 <col:55, col:57> 'float' '*'
|   | |       |       |   | | |     |       | |-ImplicitCastExpr 0x7fffd846da70 <col:55> 'float' <IntegralToFloating>
|   | |       |       |   | | |     |       | | `-IntegerLiteral 0x7fffd846da10 <col:55> 'int' 4
|   | |       |       |   | | |     |       | `-ImplicitCastExpr 0x7fffd846da58 <col:57> 'float' <LValueToRValue>
|   | |       |       |   | | |     |       |   `-DeclRefExpr 0x7fffd846da30 <col:57> 'float' lvalue Var 0x7fffd846cce8 'a' 'float'
|   | |       |       |   | | |     |       `-ImplicitCastExpr 0x7fffd846dad8 <col:59> 'float' <LValueToRValue>
|   | |       |       |   | | |     |         `-DeclRefExpr 0x7fffd846dab0 <col:59> 'float' lvalue Var 0x7fffd846d3b8 'c' 'float'
|   | |       |       |   | | |     `-IfStmt 0x7fffd846e3a0 <line:4642:28, line:4649:28>
|   | |       |       |   | | |       |-<<<NULL>>>
|   | |       |       |   | | |       |-<<<NULL>>>
|   | |       |       |   | | |       |-BinaryOperator 0x7fffd846dbd0 <line:4642:32, col:47> 'int' '<'
|   | |       |       |   | | |       | |-ImplicitCastExpr 0x7fffd846dba0 <col:32> 'float' <LValueToRValue>
|   | |       |       |   | | |       | | `-DeclRefExpr 0x7fffd846db58 <col:32> 'float' lvalue Var 0x7fffd846d908 'discriminant' 'float'
|   | |       |       |   | | |       | `-ImplicitCastExpr 0x7fffd846dbb8 <col:47> 'float' <IntegralToFloating>
|   | |       |       |   | | |       |   `-IntegerLiteral 0x7fffd846db80 <col:47> 'int' 0
|   | |       |       |   | | |       |-BinaryOperator 0x7fffd846dc40 <line:4643:31, col:37> 'int' '='
|   | |       |       |   | | |       | |-DeclRefExpr 0x7fffd846dbf8 <col:31> 'int' lvalue Var 0x7fffd846bdf0 'num' 'int'
|   | |       |       |   | | |       | `-IntegerLiteral 0x7fffd846dc20 <col:37> 'int' 0
|   | |       |       |   | | |       `-CompoundStmt 0x7fffd846e370 <line:4644:33, line:4649:28>
|   | |       |       |   | | |         |-DeclStmt 0x7fffd846dde8 <line:4645:31, col:76>
|   | |       |       |   | | |         | `-VarDecl 0x7fffd846dc80 <col:31, line:444:37> line:4645:37 used root 'float' cinit
|   | |       |       |   | | |         |   `-CStyleCastExpr 0x7fffd846ddc0 <col:44, line:444:37> 'float' <FloatingCast>
|   | |       |       |   | | |         |     `-CallExpr 0x7fffd846dd48 <col:31, col:37> 'double'
|   | |       |       |   | | |         |       |-ImplicitCastExpr 0x7fffd846dd30 <col:31> 'double (*)(double)' <FunctionToPointerDecay>
|   | |       |       |   | | |         |       | `-DeclRefExpr 0x7fffd846dce0 <col:31> 'double (double)' Function 0x7fffd828e9f0 'sqrt' 'double (double)'
|   | |       |       |   | | |         |       `-ImplicitCastExpr 0x7fffd846dd90 <line:4645:63> 'double' <FloatingCast>
|   | |       |       |   | | |         |         `-ImplicitCastExpr 0x7fffd846dd78 <col:63> 'float' <LValueToRValue>
|   | |       |       |   | | |         |           `-DeclRefExpr 0x7fffd846dd08 <col:63> 'float' lvalue Var 0x7fffd846d908 'discriminant' 'float'
|   | |       |       |   | | |         |-BinaryOperator 0x7fffd846e058 <line:4646:31, col:56> 'float' '='
|   | |       |       |   | | |         | |-ArraySubscriptExpr 0x7fffd846de60 <col:31, col:36> 'float' lvalue
|   | |       |       |   | | |         | | |-ImplicitCastExpr 0x7fffd846de48 <col:31> 'float *' <ArrayToPointerDecay>
|   | |       |       |   | | |         | | | `-DeclRefExpr 0x7fffd846de00 <col:31> 'float [3]' lvalue Var 0x7fffd846c7f0 'res' 'float [3]'
|   | |       |       |   | | |         | | `-IntegerLiteral 0x7fffd846de28 <col:35> 'int' 0
|   | |       |       |   | | |         | `-BinaryOperator 0x7fffd846e030 <col:40, col:56> 'float' '/'
|   | |       |       |   | | |         |   |-ParenExpr 0x7fffd846df50 <col:40, col:50> 'float'
|   | |       |       |   | | |         |   | `-BinaryOperator 0x7fffd846df28 <col:41, col:46> 'float' '-'
|   | |       |       |   | | |         |   |   |-UnaryOperator 0x7fffd846dec8 <col:41, col:42> 'float' prefix '-'
|   | |       |       |   | | |         |   |   | `-ImplicitCastExpr 0x7fffd846deb0 <col:42> 'float' <LValueToRValue>
|   | |       |       |   | | |         |   |   |   `-DeclRefExpr 0x7fffd846de88 <col:42> 'float' lvalue Var 0x7fffd846cf70 'b' 'float'
|   | |       |       |   | | |         |   |   `-ImplicitCastExpr 0x7fffd846df10 <col:46> 'float' <LValueToRValue>
|   | |       |       |   | | |         |   |     `-DeclRefExpr 0x7fffd846dee8 <col:46> 'float' lvalue Var 0x7fffd846dc80 'root' 'float'
|   | |       |       |   | | |         |   `-ParenExpr 0x7fffd846e010 <col:52, col:56> 'float'
|   | |       |       |   | | |         |     `-BinaryOperator 0x7fffd846dfe8 <col:53, col:55> 'float' '*'
|   | |       |       |   | | |         |       |-ImplicitCastExpr 0x7fffd846dfd0 <col:53> 'float' <IntegralToFloating>
|   | |       |       |   | | |         |       | `-IntegerLiteral 0x7fffd846df70 <col:53> 'int' 2
|   | |       |       |   | | |         |       `-ImplicitCastExpr 0x7fffd846dfb8 <col:55> 'float' <LValueToRValue>
|   | |       |       |   | | |         |         `-DeclRefExpr 0x7fffd846df90 <col:55> 'float' lvalue Var 0x7fffd846cce8 'a' 'float'
|   | |       |       |   | | |         |-BinaryOperator 0x7fffd846e2d8 <line:4647:31, col:56> 'float' '='
|   | |       |       |   | | |         | |-ArraySubscriptExpr 0x7fffd846e0e0 <col:31, col:36> 'float' lvalue
|   | |       |       |   | | |         | | |-ImplicitCastExpr 0x7fffd846e0c8 <col:31> 'float *' <ArrayToPointerDecay>
|   | |       |       |   | | |         | | | `-DeclRefExpr 0x7fffd846e080 <col:31> 'float [3]' lvalue Var 0x7fffd846c7f0 'res' 'float [3]'
|   | |       |       |   | | |         | | `-IntegerLiteral 0x7fffd846e0a8 <col:35> 'int' 1
|   | |       |       |   | | |         | `-BinaryOperator 0x7fffd846e2b0 <col:40, col:56> 'float' '/'
|   | |       |       |   | | |         |   |-ParenExpr 0x7fffd846e1d0 <col:40, col:50> 'float'
|   | |       |       |   | | |         |   | `-BinaryOperator 0x7fffd846e1a8 <col:41, col:46> 'float' '+'
|   | |       |       |   | | |         |   |   |-UnaryOperator 0x7fffd846e148 <col:41, col:42> 'float' prefix '-'
|   | |       |       |   | | |         |   |   | `-ImplicitCastExpr 0x7fffd846e130 <col:42> 'float' <LValueToRValue>
|   | |       |       |   | | |         |   |   |   `-DeclRefExpr 0x7fffd846e108 <col:42> 'float' lvalue Var 0x7fffd846cf70 'b' 'float'
|   | |       |       |   | | |         |   |   `-ImplicitCastExpr 0x7fffd846e190 <col:46> 'float' <LValueToRValue>
|   | |       |       |   | | |         |   |     `-DeclRefExpr 0x7fffd846e168 <col:46> 'float' lvalue Var 0x7fffd846dc80 'root' 'float'
|   | |       |       |   | | |         |   `-ParenExpr 0x7fffd846e290 <col:52, col:56> 'float'
|   | |       |       |   | | |         |     `-BinaryOperator 0x7fffd846e268 <col:53, col:55> 'float' '*'
|   | |       |       |   | | |         |       |-ImplicitCastExpr 0x7fffd846e250 <col:53> 'float' <IntegralToFloating>
|   | |       |       |   | | |         |       | `-IntegerLiteral 0x7fffd846e1f0 <col:53> 'int' 2
|   | |       |       |   | | |         |       `-ImplicitCastExpr 0x7fffd846e238 <col:55> 'float' <LValueToRValue>
|   | |       |       |   | | |         |         `-DeclRefExpr 0x7fffd846e210 <col:55> 'float' lvalue Var 0x7fffd846cce8 'a' 'float'
|   | |       |       |   | | |         `-BinaryOperator 0x7fffd846e348 <line:4648:31, col:37> 'int' '='
|   | |       |       |   | | |           |-DeclRefExpr 0x7fffd846e300 <col:31> 'int' lvalue Var 0x7fffd846bdf0 'num' 'int'
|   | |       |       |   | | |           `-IntegerLiteral 0x7fffd846e328 <col:37> 'int' 2
|   | |       |       |   | | `-CompoundStmt 0x7fffd846f0e0 <line:4651:29, line:4656:22>
|   | |       |       |   | |   |-DeclStmt 0x7fffd846e738 <line:4652:25, col:60>
|   | |       |       |   | |   | `-VarDecl 0x7fffd846e478 <col:25, col:55> col:31 used b 'float' cinit
|   | |       |       |   | |   |   `-BinaryOperator 0x7fffd846e710 <col:35, col:55> 'float' '*'
|   | |       |       |   | |   |     |-BinaryOperator 0x7fffd846e6a8 <col:35, col:51> 'float' '*'
|   | |       |       |   | |   |     | |-ImplicitCastExpr 0x7fffd846e690 <col:35> 'float' <IntegralToFloating>
|   | |       |       |   | |   |     | | `-IntegerLiteral 0x7fffd846e4d8 <col:35> 'int' 3
|   | |       |       |   | |   |     | `-ParenExpr 0x7fffd846e670 <col:37, col:51> 'float'
|   | |       |       |   | |   |     |   `-BinaryOperator 0x7fffd846e648 <col:38, col:49> 'float' '+'
|   | |       |       |   | |   |     |     |-BinaryOperator 0x7fffd846e578 <col:38, col:41> 'float' '*'
|   | |       |       |   | |   |     |     | |-ImplicitCastExpr 0x7fffd846e548 <col:38> 'float' <LValueToRValue>
|   | |       |       |   | |   |     |     | | `-DeclRefExpr 0x7fffd846e4f8 <col:38> 'float' lvalue Var 0x7fffd846bea0 'ax' 'float'
|   | |       |       |   | |   |     |     | `-ImplicitCastExpr 0x7fffd846e560 <col:41> 'float' <LValueToRValue>
|   | |       |       |   | |   |     |     |   `-DeclRefExpr 0x7fffd846e520 <col:41> 'float' lvalue Var 0x7fffd846c110 'bx' 'float'
|   | |       |       |   | |   |     |     `-BinaryOperator 0x7fffd846e620 <col:46, col:49> 'float' '*'
|   | |       |       |   | |   |     |       |-ImplicitCastExpr 0x7fffd846e5f0 <col:46> 'float' <LValueToRValue>
|   | |       |       |   | |   |     |       | `-DeclRefExpr 0x7fffd846e5a0 <col:46> 'float' lvalue Var 0x7fffd846bfc0 'ay' 'float'
|   | |       |       |   | |   |     |       `-ImplicitCastExpr 0x7fffd846e608 <col:49> 'float' <LValueToRValue>
|   | |       |       |   | |   |     |         `-DeclRefExpr 0x7fffd846e5c8 <col:49> 'float' lvalue Var 0x7fffd846c2f8 'by' 'float'
|   | |       |       |   | |   |     `-ImplicitCastExpr 0x7fffd846e6f8 <col:55> 'float' <LValueToRValue>
|   | |       |       |   | |   |       `-DeclRefExpr 0x7fffd846e6d0 <col:55> 'float' lvalue Var 0x7fffd846caf8 'a_inv' 'float'
|   | |       |       |   | |   |-DeclStmt 0x7fffd846ec30 <line:4653:25, col:78>
|   | |       |       |   | |   | `-VarDecl 0x7fffd846e768 <col:25, col:73> col:31 used c 'float' cinit
|   | |       |       |   | |   |   `-BinaryOperator 0x7fffd846ec08 <col:35, col:73> 'float' '*'
|   | |       |       |   | |   |     |-ParenExpr 0x7fffd846eba8 <col:35, col:69> 'float'
|   | |       |       |   | |   |     | `-BinaryOperator 0x7fffd846eb80 <col:36, col:68> 'float' '+'
|   | |       |       |   | |   |     |   |-BinaryOperator 0x7fffd846e9c0 <col:36, col:52> 'float' '*'
|   | |       |       |   | |   |     |   | |-ImplicitCastExpr 0x7fffd846e9a8 <col:36> 'float' <IntegralToFloating>
|   | |       |       |   | |   |     |   | | `-IntegerLiteral 0x7fffd846e7c8 <col:36> 'int' 2
|   | |       |       |   | |   |     |   | `-ParenExpr 0x7fffd846e988 <col:38, col:52> 'float'
|   | |       |       |   | |   |     |   |   `-BinaryOperator 0x7fffd846e960 <col:39, col:50> 'float' '+'
|   | |       |       |   | |   |     |   |     |-BinaryOperator 0x7fffd846e868 <col:39, col:42> 'float' '*'
|   | |       |       |   | |   |     |   |     | |-ImplicitCastExpr 0x7fffd846e838 <col:39> 'float' <LValueToRValue>
|   | |       |       |   | |   |     |   |     | | `-DeclRefExpr 0x7fffd846e7e8 <col:39> 'float' lvalue Var 0x7fffd846bea0 'ax' 'float'
|   | |       |       |   | |   |     |   |     | `-ImplicitCastExpr 0x7fffd846e850 <col:42> 'float' <LValueToRValue>
|   | |       |       |   | |   |     |   |     |   `-DeclRefExpr 0x7fffd846e810 <col:42> 'float' lvalue Var 0x7fffd846bea0 'ax' 'float'
|   | |       |       |   | |   |     |   |     `-BinaryOperator 0x7fffd846e938 <col:47, col:50> 'float' '*'
|   | |       |       |   | |   |     |   |       |-ImplicitCastExpr 0x7fffd846e908 <col:47> 'float' <LValueToRValue>
|   | |       |       |   | |   |     |   |       | `-DeclRefExpr 0x7fffd846e890 <col:47> 'float' lvalue Var 0x7fffd846bfc0 'ay' 'float'
|   | |       |       |   | |   |     |   |       `-ImplicitCastExpr 0x7fffd846e920 <col:50> 'float' <LValueToRValue>
|   | |       |       |   | |   |     |   |         `-DeclRefExpr 0x7fffd846e8e0 <col:50> 'float' lvalue Var 0x7fffd846bfc0 'ay' 'float'
|   | |       |       |   | |   |     |   `-ParenExpr 0x7fffd846eb60 <col:56, col:68> 'float'
|   | |       |       |   | |   |     |     `-BinaryOperator 0x7fffd846eb38 <col:57, col:66> 'float' '+'
|   | |       |       |   | |   |     |       |-BinaryOperator 0x7fffd846ea68 <col:57, col:60> 'float' '*'
|   | |       |       |   | |   |     |       | |-ImplicitCastExpr 0x7fffd846ea38 <col:57> 'float' <LValueToRValue>
|   | |       |       |   | |   |     |       | | `-DeclRefExpr 0x7fffd846e9e8 <col:57> 'float' lvalue Var 0x7fffd846c510 'mx' 'float'
|   | |       |       |   | |   |     |       | `-ImplicitCastExpr 0x7fffd846ea50 <col:60> 'float' <LValueToRValue>
|   | |       |       |   | |   |     |       |   `-DeclRefExpr 0x7fffd846ea10 <col:60> 'float' lvalue Var 0x7fffd846c110 'bx' 'float'
|   | |       |       |   | |   |     |       `-BinaryOperator 0x7fffd846eb10 <col:63, col:66> 'float' '*'
|   | |       |       |   | |   |     |         |-ImplicitCastExpr 0x7fffd846eae0 <col:63> 'float' <LValueToRValue>
|   | |       |       |   | |   |     |         | `-DeclRefExpr 0x7fffd846ea90 <col:63> 'float' lvalue Var 0x7fffd846c630 'my' 'float'
|   | |       |       |   | |   |     |         `-ImplicitCastExpr 0x7fffd846eaf8 <col:66> 'float' <LValueToRValue>
|   | |       |       |   | |   |     |           `-DeclRefExpr 0x7fffd846eab8 <col:66> 'float' lvalue Var 0x7fffd846c2f8 'by' 'float'
|   | |       |       |   | |   |     `-ImplicitCastExpr 0x7fffd846ebf0 <col:73> 'float' <LValueToRValue>
|   | |       |       |   | |   |       `-DeclRefExpr 0x7fffd846ebc8 <col:73> 'float' lvalue Var 0x7fffd846caf8 'a_inv' 'float'
|   | |       |       |   | |   |-DeclStmt 0x7fffd846eec0 <line:4654:25, col:56>
|   | |       |       |   | |   | `-VarDecl 0x7fffd846ec60 <col:25, col:51> col:31 used d 'float' cinit
|   | |       |       |   | |   |   `-BinaryOperator 0x7fffd846ee98 <col:35, col:51> 'float' '*'
|   | |       |       |   | |   |     |-ParenExpr 0x7fffd846ee38 <col:35, col:47> 'float'
|   | |       |       |   | |   |     | `-BinaryOperator 0x7fffd846ee10 <col:36, col:45> 'float' '+'
|   | |       |       |   | |   |     |   |-BinaryOperator 0x7fffd846ed40 <col:36, col:39> 'float' '*'
|   | |       |       |   | |   |     |   | |-ImplicitCastExpr 0x7fffd846ed10 <col:36> 'float' <LValueToRValue>
|   | |       |       |   | |   |     |   | | `-DeclRefExpr 0x7fffd846ecc0 <col:36> 'float' lvalue Var 0x7fffd846c510 'mx' 'float'
|   | |       |       |   | |   |     |   | `-ImplicitCastExpr 0x7fffd846ed28 <col:39> 'float' <LValueToRValue>
|   | |       |       |   | |   |     |   |   `-DeclRefExpr 0x7fffd846ece8 <col:39> 'float' lvalue Var 0x7fffd846bea0 'ax' 'float'
|   | |       |       |   | |   |     |   `-BinaryOperator 0x7fffd846ede8 <col:42, col:45> 'float' '*'
|   | |       |       |   | |   |     |     |-ImplicitCastExpr 0x7fffd846edb8 <col:42> 'float' <LValueToRValue>
|   | |       |       |   | |   |     |     | `-DeclRefExpr 0x7fffd846ed68 <col:42> 'float' lvalue Var 0x7fffd846c630 'my' 'float'
|   | |       |       |   | |   |     |     `-ImplicitCastExpr 0x7fffd846edd0 <col:45> 'float' <LValueToRValue>
|   | |       |       |   | |   |     |       `-DeclRefExpr 0x7fffd846ed90 <col:45> 'float' lvalue Var 0x7fffd846bfc0 'ay' 'float'
|   | |       |       |   | |   |     `-ImplicitCastExpr 0x7fffd846ee80 <col:51> 'float' <LValueToRValue>
|   | |       |       |   | |   |       `-DeclRefExpr 0x7fffd846ee58 <col:51> 'float' lvalue Var 0x7fffd846caf8 'a_inv' 'float'
|   | |       |       |   | |   `-BinaryOperator 0x7fffd846f0b8 <line:4655:25, col:62> 'int' '='
|   | |       |       |   | |     |-DeclRefExpr 0x7fffd846eed8 <col:25> 'int' lvalue Var 0x7fffd846bdf0 'num' 'int'
|   | |       |       |   | |     `-CallExpr 0x7fffd846f010 <col:31, col:62> 'int'
|   | |       |       |   | |       |-ImplicitCastExpr 0x7fffd846eff8 <col:31> 'int (*)(float, float, float, float *)' <FunctionToPointerDecay>
|   | |       |       |   | |       | `-DeclRefExpr 0x7fffd846ef00 <col:31> 'int (float, float, float, float *)' Function 0x7fffd845df98 'stbtt__solve_cubic' 'int (float, float, float, float *)'
|   | |       |       |   | |       |-ImplicitCastExpr 0x7fffd846f058 <col:50> 'float' <LValueToRValue>
|   | |       |       |   | |       | `-DeclRefExpr 0x7fffd846ef28 <col:50> 'float' lvalue Var 0x7fffd846e478 'b' 'float'
|   | |       |       |   | |       |-ImplicitCastExpr 0x7fffd846f070 <col:53> 'float' <LValueToRValue>
|   | |       |       |   | |       | `-DeclRefExpr 0x7fffd846ef50 <col:53> 'float' lvalue Var 0x7fffd846e768 'c' 'float'
|   | |       |       |   | |       |-ImplicitCastExpr 0x7fffd846f088 <col:56> 'float' <LValueToRValue>
|   | |       |       |   | |       | `-DeclRefExpr 0x7fffd846ef78 <col:56> 'float' lvalue Var 0x7fffd846ec60 'd' 'float'
|   | |       |       |   | |       `-ImplicitCastExpr 0x7fffd846f0a0 <col:59> 'float *' <ArrayToPointerDecay>
|   | |       |       |   | |         `-DeclRefExpr 0x7fffd846efa0 <col:59> 'float [3]' lvalue Var 0x7fffd846c7f0 'res' 'float [3]'
|   | |       |       |   | |-IfStmt 0x7fffd8470500 <line:4657:22, line:4664:22>
|   | |       |       |   | | |-<<<NULL>>>
|   | |       |       |   | | |-<<<NULL>>>
|   | |       |       |   | | |-BinaryOperator 0x7fffd846f3c8 <line:4657:26, col:66> 'int' '&&'
|   | |       |       |   | | | |-BinaryOperator 0x7fffd846f2b8 <col:26, col:48> 'int' '&&'
|   | |       |       |   | | | | |-BinaryOperator 0x7fffd846f1a8 <col:26, col:33> 'int' '>='
|   | |       |       |   | | | | | |-ImplicitCastExpr 0x7fffd846f190 <col:26> 'int' <LValueToRValue>
|   | |       |       |   | | | | | | `-DeclRefExpr 0x7fffd846f148 <col:26> 'int' lvalue Var 0x7fffd846bdf0 'num' 'int'
|   | |       |       |   | | | | | `-IntegerLiteral 0x7fffd846f170 <col:33> 'int' 1
|   | |       |       |   | | | | `-BinaryOperator 0x7fffd846f290 <col:38, col:48> 'int' '>='
|   | |       |       |   | | | |   |-ImplicitCastExpr 0x7fffd846f278 <col:38, col:43> 'float' <LValueToRValue>
|   | |       |       |   | | | |   | `-ArraySubscriptExpr 0x7fffd846f230 <col:38, col:43> 'float' lvalue
|   | |       |       |   | | | |   |   |-ImplicitCastExpr 0x7fffd846f218 <col:38> 'float *' <ArrayToPointerDecay>
|   | |       |       |   | | | |   |   | `-DeclRefExpr 0x7fffd846f1d0 <col:38> 'float [3]' lvalue Var 0x7fffd846c7f0 'res' 'float [3]'
|   | |       |       |   | | | |   |   `-IntegerLiteral 0x7fffd846f1f8 <col:42> 'int' 0
|   | |       |       |   | | | |   `-FloatingLiteral 0x7fffd846f258 <col:48> 'float' 0.000000e+00
|   | |       |       |   | | | `-BinaryOperator 0x7fffd846f3a0 <col:56, col:66> 'int' '<='
|   | |       |       |   | | |   |-ImplicitCastExpr 0x7fffd846f388 <col:56, col:61> 'float' <LValueToRValue>
|   | |       |       |   | | |   | `-ArraySubscriptExpr 0x7fffd846f340 <col:56, col:61> 'float' lvalue
|   | |       |       |   | | |   |   |-ImplicitCastExpr 0x7fffd846f328 <col:56> 'float *' <ArrayToPointerDecay>
|   | |       |       |   | | |   |   | `-DeclRefExpr 0x7fffd846f2e0 <col:56> 'float [3]' lvalue Var 0x7fffd846c7f0 'res' 'float [3]'
|   | |       |       |   | | |   |   `-IntegerLiteral 0x7fffd846f308 <col:60> 'int' 0
|   | |       |       |   | | |   `-FloatingLiteral 0x7fffd846f368 <col:66> 'float' 1.000000e+00
|   | |       |       |   | | |-CompoundStmt 0x7fffd84704c8 <col:72, line:4664:22>
|   | |       |       |   | | | |-BinaryOperator 0x7fffd846f5b8 <line:4658:25, col:49> 'float' ','
|   | |       |       |   | | | | |-BinaryOperator 0x7fffd846f4b8 <col:25, col:34> 'float' '='
|   | |       |       |   | | | | | |-DeclRefExpr 0x7fffd846f3f0 <col:25> 'float' lvalue Var 0x7fffd846c9c0 't' 'float'
|   | |       |       |   | | | | | `-ImplicitCastExpr 0x7fffd846f4a0 <col:29, col:34> 'float' <LValueToRValue>
|   | |       |       |   | | | | |   `-ArraySubscriptExpr 0x7fffd846f478 <col:29, col:34> 'float' lvalue
|   | |       |       |   | | | | |     |-ImplicitCastExpr 0x7fffd846f460 <col:29> 'float *' <ArrayToPointerDecay>
|   | |       |       |   | | | | |     | `-DeclRefExpr 0x7fffd846f418 <col:29> 'float [3]' lvalue Var 0x7fffd846c7f0 'res' 'float [3]'
|   | |       |       |   | | | | |     `-IntegerLiteral 0x7fffd846f440 <col:33> 'int' 0
|   | |       |       |   | | | | `-BinaryOperator 0x7fffd846f590 <col:37, col:49> 'float' '='
|   | |       |       |   | | | |   |-DeclRefExpr 0x7fffd846f4e0 <col:37> 'float' lvalue Var 0x7fffd846ca38 'it' 'float'
|   | |       |       |   | | | |   `-BinaryOperator 0x7fffd846f568 <col:42, col:49> 'float' '-'
|   | |       |       |   | | | |     |-FloatingLiteral 0x7fffd846f508 <col:42> 'float' 1.000000e+00
|   | |       |       |   | | | |     `-ImplicitCastExpr 0x7fffd846f550 <col:49> 'float' <LValueToRValue>
|   | |       |       |   | | | |       `-DeclRefExpr 0x7fffd846f528 <col:49> 'float' lvalue Var 0x7fffd846c9c0 't' 'float'
|   | |       |       |   | | | |-BinaryOperator 0x7fffd846f9e8 <line:4659:25, col:57> 'float' '='
|   | |       |       |   | | | | |-DeclRefExpr 0x7fffd846f5e0 <col:25> 'float' lvalue Var 0x7fffd846c8d0 'px' 'float'
|   | |       |       |   | | | | `-BinaryOperator 0x7fffd846f9c0 <col:30, col:57> 'float' '+'
|   | |       |       |   | | | |   |-BinaryOperator 0x7fffd846f888 <col:30, col:48> 'float' '+'
|   | |       |       |   | | | |   | |-BinaryOperator 0x7fffd846f6f0 <col:30, col:36> 'float' '*'
|   | |       |       |   | | | |   | | |-BinaryOperator 0x7fffd846f688 <col:30, col:33> 'float' '*'
|   | |       |       |   | | | |   | | | |-ImplicitCastExpr 0x7fffd846f658 <col:30> 'float' <LValueToRValue>
|   | |       |       |   | | | |   | | | | `-DeclRefExpr 0x7fffd846f608 <col:30> 'float' lvalue Var 0x7fffd846ca38 'it' 'float'
|   | |       |       |   | | | |   | | | `-ImplicitCastExpr 0x7fffd846f670 <col:33> 'float' <LValueToRValue>
|   | |       |       |   | | | |   | | |   `-DeclRefExpr 0x7fffd846f630 <col:33> 'float' lvalue Var 0x7fffd846ca38 'it' 'float'
|   | |       |       |   | | | |   | | `-ImplicitCastExpr 0x7fffd846f6d8 <col:36> 'float' <LValueToRValue>
|   | |       |       |   | | | |   | |   `-DeclRefExpr 0x7fffd846f6b0 <col:36> 'float' lvalue Var 0x7fffd8466d48 'x0' 'float'
|   | |       |       |   | | | |   | `-BinaryOperator 0x7fffd846f860 <col:41, col:48> 'float' '*'
|   | |       |       |   | | | |   |   |-BinaryOperator 0x7fffd846f7f8 <col:41, col:45> 'float' '*'
|   | |       |       |   | | | |   |   | |-BinaryOperator 0x7fffd846f790 <col:41, col:43> 'float' '*'
|   | |       |       |   | | | |   |   | | |-ImplicitCastExpr 0x7fffd846f778 <col:41> 'float' <IntegralToFloating>
|   | |       |       |   | | | |   |   | | | `-IntegerLiteral 0x7fffd846f718 <col:41> 'int' 2
|   | |       |       |   | | | |   |   | | `-ImplicitCastExpr 0x7fffd846f760 <col:43> 'float' <LValueToRValue>
|   | |       |       |   | | | |   |   | |   `-DeclRefExpr 0x7fffd846f738 <col:43> 'float' lvalue Var 0x7fffd846c9c0 't' 'float'
|   | |       |       |   | | | |   |   | `-ImplicitCastExpr 0x7fffd846f7e0 <col:45> 'float' <LValueToRValue>
|   | |       |       |   | | | |   |   |   `-DeclRefExpr 0x7fffd846f7b8 <col:45> 'float' lvalue Var 0x7fffd846ca38 'it' 'float'
|   | |       |       |   | | | |   |   `-ImplicitCastExpr 0x7fffd846f848 <col:48> 'float' <LValueToRValue>
|   | |       |       |   | | | |   |     `-DeclRefExpr 0x7fffd846f820 <col:48> 'float' lvalue Var 0x7fffd8469d08 'x1' 'float'
|   | |       |       |   | | | |   `-BinaryOperator 0x7fffd846f998 <col:53, col:57> 'float' '*'
|   | |       |       |   | | | |     |-BinaryOperator 0x7fffd846f930 <col:53, col:55> 'float' '*'
|   | |       |       |   | | | |     | |-ImplicitCastExpr 0x7fffd846f900 <col:53> 'float' <LValueToRValue>
|   | |       |       |   | | | |     | | `-DeclRefExpr 0x7fffd846f8b0 <col:53> 'float' lvalue Var 0x7fffd846c9c0 't' 'float'
|   | |       |       |   | | | |     | `-ImplicitCastExpr 0x7fffd846f918 <col:55> 'float' <LValueToRValue>
|   | |       |       |   | | | |     |   `-DeclRefExpr 0x7fffd846f8d8 <col:55> 'float' lvalue Var 0x7fffd846c9c0 't' 'float'
|   | |       |       |   | | | |     `-ImplicitCastExpr 0x7fffd846f980 <col:57> 'float' <LValueToRValue>
|   | |       |       |   | | | |       `-DeclRefExpr 0x7fffd846f958 <col:57> 'float' lvalue Var 0x7fffd8469838 'x2' 'float'
|   | |       |       |   | | | |-BinaryOperator 0x7fffd846fe18 <line:4660:25, col:57> 'float' '='
|   | |       |       |   | | | | |-DeclRefExpr 0x7fffd846fa10 <col:25> 'float' lvalue Var 0x7fffd846c948 'py' 'float'
|   | |       |       |   | | | | `-BinaryOperator 0x7fffd846fdf0 <col:30, col:57> 'float' '+'
|   | |       |       |   | | | |   |-BinaryOperator 0x7fffd846fcb8 <col:30, col:48> 'float' '+'
|   | |       |       |   | | | |   | |-BinaryOperator 0x7fffd846fb20 <col:30, col:36> 'float' '*'
|   | |       |       |   | | | |   | | |-BinaryOperator 0x7fffd846fab8 <col:30, col:33> 'float' '*'
|   | |       |       |   | | | |   | | | |-ImplicitCastExpr 0x7fffd846fa88 <col:30> 'float' <LValueToRValue>
|   | |       |       |   | | | |   | | | | `-DeclRefExpr 0x7fffd846fa38 <col:30> 'float' lvalue Var 0x7fffd846ca38 'it' 'float'
|   | |       |       |   | | | |   | | | `-ImplicitCastExpr 0x7fffd846faa0 <col:33> 'float' <LValueToRValue>
|   | |       |       |   | | | |   | | |   `-DeclRefExpr 0x7fffd846fa60 <col:33> 'float' lvalue Var 0x7fffd846ca38 'it' 'float'
|   | |       |       |   | | | |   | | `-ImplicitCastExpr 0x7fffd846fb08 <col:36> 'float' <LValueToRValue>
|   | |       |       |   | | | |   | |   `-DeclRefExpr 0x7fffd846fae0 <col:36> 'float' lvalue Var 0x7fffd8466f50 'y0' 'float'
|   | |       |       |   | | | |   | `-BinaryOperator 0x7fffd846fc90 <col:41, col:48> 'float' '*'
|   | |       |       |   | | | |   |   |-BinaryOperator 0x7fffd846fc28 <col:41, col:45> 'float' '*'
|   | |       |       |   | | | |   |   | |-BinaryOperator 0x7fffd846fbc0 <col:41, col:43> 'float' '*'
|   | |       |       |   | | | |   |   | | |-ImplicitCastExpr 0x7fffd846fba8 <col:41> 'float' <IntegralToFloating>
|   | |       |       |   | | | |   |   | | | `-IntegerLiteral 0x7fffd846fb48 <col:41> 'int' 2
|   | |       |       |   | | | |   |   | | `-ImplicitCastExpr 0x7fffd846fb90 <col:43> 'float' <LValueToRValue>
|   | |       |       |   | | | |   |   | |   `-DeclRefExpr 0x7fffd846fb68 <col:43> 'float' lvalue Var 0x7fffd846c9c0 't' 'float'
|   | |       |       |   | | | |   |   | `-ImplicitCastExpr 0x7fffd846fc10 <col:45> 'float' <LValueToRValue>
|   | |       |       |   | | | |   |   |   `-DeclRefExpr 0x7fffd846fbe8 <col:45> 'float' lvalue Var 0x7fffd846ca38 'it' 'float'
|   | |       |       |   | | | |   |   `-ImplicitCastExpr 0x7fffd846fc78 <col:48> 'float' <LValueToRValue>
|   | |       |       |   | | | |   |     `-DeclRefExpr 0x7fffd846fc50 <col:48> 'float' lvalue Var 0x7fffd8469f10 'y1' 'float'
|   | |       |       |   | | | |   `-BinaryOperator 0x7fffd846fdc8 <col:53, col:57> 'float' '*'
|   | |       |       |   | | | |     |-BinaryOperator 0x7fffd846fd60 <col:53, col:55> 'float' '*'
|   | |       |       |   | | | |     | |-ImplicitCastExpr 0x7fffd846fd30 <col:53> 'float' <LValueToRValue>
|   | |       |       |   | | | |     | | `-DeclRefExpr 0x7fffd846fce0 <col:53> 'float' lvalue Var 0x7fffd846c9c0 't' 'float'
|   | |       |       |   | | | |     | `-ImplicitCastExpr 0x7fffd846fd48 <col:55> 'float' <LValueToRValue>
|   | |       |       |   | | | |     |   `-DeclRefExpr 0x7fffd846fd08 <col:55> 'float' lvalue Var 0x7fffd846c9c0 't' 'float'
|   | |       |       |   | | | |     `-ImplicitCastExpr 0x7fffd846fdb0 <col:57> 'float' <LValueToRValue>
|   | |       |       |   | | | |       `-DeclRefExpr 0x7fffd846fd88 <col:57> 'float' lvalue Var 0x7fffd8469a88 'y2' 'float'
|   | |       |       |   | | | |-BinaryOperator 0x7fffd8470200 <line:4661:25, col:65> 'float' '='
|   | |       |       |   | | | | |-DeclRefExpr 0x7fffd846fe40 <col:25> 'float' lvalue Var 0x7fffd8467188 'dist2' 'float'
|   | |       |       |   | | | | `-BinaryOperator 0x7fffd84701d8 <col:33, col:65> 'float' '+'
|   | |       |       |   | | | |   |-BinaryOperator 0x7fffd846fff8 <col:33, col:47> 'float' '*'
|   | |       |       |   | | | |   | |-ParenExpr 0x7fffd846ff10 <col:33, col:39> 'float'
|   | |       |       |   | | | |   | | `-BinaryOperator 0x7fffd846fee8 <col:34, col:37> 'float' '-'
|   | |       |       |   | | | |   | |   |-ImplicitCastExpr 0x7fffd846feb8 <col:34> 'float' <LValueToRValue>
|   | |       |       |   | | | |   | |   | `-DeclRefExpr 0x7fffd846fe68 <col:34> 'float' lvalue Var 0x7fffd846c8d0 'px' 'float'
|   | |       |       |   | | | |   | |   `-ImplicitCastExpr 0x7fffd846fed0 <col:37> 'float' <LValueToRValue>
|   | |       |       |   | | | |   | |     `-DeclRefExpr 0x7fffd846fe90 <col:37> 'float' lvalue Var 0x7fffd84663e0 'sx' 'float'
|   | |       |       |   | | | |   | `-ParenExpr 0x7fffd846ffd8 <col:41, col:47> 'float'
|   | |       |       |   | | | |   |   `-BinaryOperator 0x7fffd846ffb0 <col:42, col:45> 'float' '-'
|   | |       |       |   | | | |   |     |-ImplicitCastExpr 0x7fffd846ff80 <col:42> 'float' <LValueToRValue>
|   | |       |       |   | | | |   |     | `-DeclRefExpr 0x7fffd846ff30 <col:42> 'float' lvalue Var 0x7fffd846c8d0 'px' 'float'
|   | |       |       |   | | | |   |     `-ImplicitCastExpr 0x7fffd846ff98 <col:45> 'float' <LValueToRValue>
|   | |       |       |   | | | |   |       `-DeclRefExpr 0x7fffd846ff58 <col:45> 'float' lvalue Var 0x7fffd84663e0 'sx' 'float'
|   | |       |       |   | | | |   `-BinaryOperator 0x7fffd84701b0 <col:51, col:65> 'float' '*'
|   | |       |       |   | | | |     |-ParenExpr 0x7fffd84700c8 <col:51, col:57> 'float'
|   | |       |       |   | | | |     | `-BinaryOperator 0x7fffd84700a0 <col:52, col:55> 'float' '-'
|   | |       |       |   | | | |     |   |-ImplicitCastExpr 0x7fffd8470070 <col:52> 'float' <LValueToRValue>
|   | |       |       |   | | | |     |   | `-DeclRefExpr 0x7fffd8470020 <col:52> 'float' lvalue Var 0x7fffd846c948 'py' 'float'
|   | |       |       |   | | | |     |   `-ImplicitCastExpr 0x7fffd8470088 <col:55> 'float' <LValueToRValue>
|   | |       |       |   | | | |     |     `-DeclRefExpr 0x7fffd8470048 <col:55> 'float' lvalue Var 0x7fffd8466538 'sy' 'float'
|   | |       |       |   | | | |     `-ParenExpr 0x7fffd8470190 <col:59, col:65> 'float'
|   | |       |       |   | | | |       `-BinaryOperator 0x7fffd8470168 <col:60, col:63> 'float' '-'
|   | |       |       |   | | | |         |-ImplicitCastExpr 0x7fffd8470138 <col:60> 'float' <LValueToRValue>
|   | |       |       |   | | | |         | `-DeclRefExpr 0x7fffd84700e8 <col:60> 'float' lvalue Var 0x7fffd846c948 'py' 'float'
|   | |       |       |   | | | |         `-ImplicitCastExpr 0x7fffd8470150 <col:63> 'float' <LValueToRValue>
|   | |       |       |   | | | |           `-DeclRefExpr 0x7fffd8470110 <col:63> 'float' lvalue Var 0x7fffd8466538 'sy' 'float'
|   | |       |       |   | | | `-IfStmt 0x7fffd8470490 <line:4662:25, line:444:37>
|   | |       |       |   | | |   |-<<<NULL>>>
|   | |       |       |   | | |   |-<<<NULL>>>
|   | |       |       |   | | |   |-BinaryOperator 0x7fffd8470310 <line:4662:29, col:48> 'int' '<'
|   | |       |       |   | | |   | |-ImplicitCastExpr 0x7fffd84702f8 <col:29> 'float' <LValueToRValue>
|   | |       |       |   | | |   | | `-DeclRefExpr 0x7fffd8470228 <col:29> 'float' lvalue Var 0x7fffd8467188 'dist2' 'float'
|   | |       |       |   | | |   | `-BinaryOperator 0x7fffd84702d0 <col:37, col:48> 'float' '*'
|   | |       |       |   | | |   |   |-ImplicitCastExpr 0x7fffd84702a0 <col:37> 'float' <LValueToRValue>
|   | |       |       |   | | |   |   | `-DeclRefExpr 0x7fffd8470250 <col:37> 'float' lvalue Var 0x7fffd8466330 'min_dist' 'float'
|   | |       |       |   | | |   |   `-ImplicitCastExpr 0x7fffd84702b8 <col:48> 'float' <LValueToRValue>
|   | |       |       |   | | |   |     `-DeclRefExpr 0x7fffd8470278 <col:48> 'float' lvalue Var 0x7fffd8466330 'min_dist' 'float'
|   | |       |       |   | | |   |-BinaryOperator 0x7fffd8470468 <line:4663:28, line:444:37> 'float' '='
|   | |       |       |   | | |   | |-DeclRefExpr 0x7fffd8470338 <line:4663:28> 'float' lvalue Var 0x7fffd8466330 'min_dist' 'float'
|   | |       |       |   | | |   | `-CStyleCastExpr 0x7fffd8470440 <col:39, line:444:37> 'float' <FloatingCast>
|   | |       |       |   | | |   |   `-CallExpr 0x7fffd84703c8 <col:31, col:37> 'double'
|   | |       |       |   | | |   |     |-ImplicitCastExpr 0x7fffd84703b0 <col:31> 'double (*)(double)' <FunctionToPointerDecay>
|   | |       |       |   | | |   |     | `-DeclRefExpr 0x7fffd8470360 <col:31> 'double (double)' Function 0x7fffd828e9f0 'sqrt' 'double (double)'
|   | |       |       |   | | |   |     `-ImplicitCastExpr 0x7fffd8470410 <line:4663:58> 'double' <FloatingCast>
|   | |       |       |   | | |   |       `-ImplicitCastExpr 0x7fffd84703f8 <col:58> 'float' <LValueToRValue>
|   | |       |       |   | | |   |         `-DeclRefExpr 0x7fffd8470388 <col:58> 'float' lvalue Var 0x7fffd8467188 'dist2' 'float'
|   | |       |       |   | | |   `-<<<NULL>>>
|   | |       |       |   | | `-<<<NULL>>>
|   | |       |       |   | |-IfStmt 0x7fffd8471910 <line:4665:22, line:4672:22>
|   | |       |       |   | | |-<<<NULL>>>
|   | |       |       |   | | |-<<<NULL>>>
|   | |       |       |   | | |-BinaryOperator 0x7fffd84707b8 <line:4665:26, col:66> 'int' '&&'
|   | |       |       |   | | | |-BinaryOperator 0x7fffd84706a8 <col:26, col:48> 'int' '&&'
|   | |       |       |   | | | | |-BinaryOperator 0x7fffd8470598 <col:26, col:33> 'int' '>='
|   | |       |       |   | | | | | |-ImplicitCastExpr 0x7fffd8470580 <col:26> 'int' <LValueToRValue>
|   | |       |       |   | | | | | | `-DeclRefExpr 0x7fffd8470538 <col:26> 'int' lvalue Var 0x7fffd846bdf0 'num' 'int'
|   | |       |       |   | | | | | `-IntegerLiteral 0x7fffd8470560 <col:33> 'int' 2
|   | |       |       |   | | | | `-BinaryOperator 0x7fffd8470680 <col:38, col:48> 'int' '>='
|   | |       |       |   | | | |   |-ImplicitCastExpr 0x7fffd8470668 <col:38, col:43> 'float' <LValueToRValue>
|   | |       |       |   | | | |   | `-ArraySubscriptExpr 0x7fffd8470620 <col:38, col:43> 'float' lvalue
|   | |       |       |   | | | |   |   |-ImplicitCastExpr 0x7fffd8470608 <col:38> 'float *' <ArrayToPointerDecay>
|   | |       |       |   | | | |   |   | `-DeclRefExpr 0x7fffd84705c0 <col:38> 'float [3]' lvalue Var 0x7fffd846c7f0 'res' 'float [3]'
|   | |       |       |   | | | |   |   `-IntegerLiteral 0x7fffd84705e8 <col:42> 'int' 1
|   | |       |       |   | | | |   `-FloatingLiteral 0x7fffd8470648 <col:48> 'float' 0.000000e+00
|   | |       |       |   | | | `-BinaryOperator 0x7fffd8470790 <col:56, col:66> 'int' '<='
|   | |       |       |   | | |   |-ImplicitCastExpr 0x7fffd8470778 <col:56, col:61> 'float' <LValueToRValue>
|   | |       |       |   | | |   | `-ArraySubscriptExpr 0x7fffd8470730 <col:56, col:61> 'float' lvalue
|   | |       |       |   | | |   |   |-ImplicitCastExpr 0x7fffd8470718 <col:56> 'float *' <ArrayToPointerDecay>
|   | |       |       |   | | |   |   | `-DeclRefExpr 0x7fffd84706d0 <col:56> 'float [3]' lvalue Var 0x7fffd846c7f0 'res' 'float [3]'
|   | |       |       |   | | |   |   `-IntegerLiteral 0x7fffd84706f8 <col:60> 'int' 1
|   | |       |       |   | | |   `-FloatingLiteral 0x7fffd8470758 <col:66> 'float' 1.000000e+00
|   | |       |       |   | | |-CompoundStmt 0x7fffd84718d8 <col:72, line:4672:22>
|   | |       |       |   | | | |-BinaryOperator 0x7fffd84709c8 <line:4666:25, col:49> 'float' ','
|   | |       |       |   | | | | |-BinaryOperator 0x7fffd84708a8 <col:25, col:34> 'float' '='
|   | |       |       |   | | | | | |-DeclRefExpr 0x7fffd84707e0 <col:25> 'float' lvalue Var 0x7fffd846c9c0 't' 'float'
|   | |       |       |   | | | | | `-ImplicitCastExpr 0x7fffd8470890 <col:29, col:34> 'float' <LValueToRValue>
|   | |       |       |   | | | | |   `-ArraySubscriptExpr 0x7fffd8470868 <col:29, col:34> 'float' lvalue
|   | |       |       |   | | | | |     |-ImplicitCastExpr 0x7fffd8470850 <col:29> 'float *' <ArrayToPointerDecay>
|   | |       |       |   | | | | |     | `-DeclRefExpr 0x7fffd8470808 <col:29> 'float [3]' lvalue Var 0x7fffd846c7f0 'res' 'float [3]'
|   | |       |       |   | | | | |     `-IntegerLiteral 0x7fffd8470830 <col:33> 'int' 1
|   | |       |       |   | | | | `-BinaryOperator 0x7fffd84709a0 <col:37, col:49> 'float' '='
|   | |       |       |   | | | |   |-DeclRefExpr 0x7fffd84708f0 <col:37> 'float' lvalue Var 0x7fffd846ca38 'it' 'float'
|   | |       |       |   | | | |   `-BinaryOperator 0x7fffd8470978 <col:42, col:49> 'float' '-'
|   | |       |       |   | | | |     |-FloatingLiteral 0x7fffd8470918 <col:42> 'float' 1.000000e+00
|   | |       |       |   | | | |     `-ImplicitCastExpr 0x7fffd8470960 <col:49> 'float' <LValueToRValue>
|   | |       |       |   | | | |       `-DeclRefExpr 0x7fffd8470938 <col:49> 'float' lvalue Var 0x7fffd846c9c0 't' 'float'
|   | |       |       |   | | | |-BinaryOperator 0x7fffd8470df8 <line:4667:25, col:57> 'float' '='
|   | |       |       |   | | | | |-DeclRefExpr 0x7fffd84709f0 <col:25> 'float' lvalue Var 0x7fffd846c8d0 'px' 'float'
|   | |       |       |   | | | | `-BinaryOperator 0x7fffd8470dd0 <col:30, col:57> 'float' '+'
|   | |       |       |   | | | |   |-BinaryOperator 0x7fffd8470c98 <col:30, col:48> 'float' '+'
|   | |       |       |   | | | |   | |-BinaryOperator 0x7fffd8470b00 <col:30, col:36> 'float' '*'
|   | |       |       |   | | | |   | | |-BinaryOperator 0x7fffd8470a98 <col:30, col:33> 'float' '*'
|   | |       |       |   | | | |   | | | |-ImplicitCastExpr 0x7fffd8470a68 <col:30> 'float' <LValueToRValue>
|   | |       |       |   | | | |   | | | | `-DeclRefExpr 0x7fffd8470a18 <col:30> 'float' lvalue Var 0x7fffd846ca38 'it' 'float'
|   | |       |       |   | | | |   | | | `-ImplicitCastExpr 0x7fffd8470a80 <col:33> 'float' <LValueToRValue>
|   | |       |       |   | | | |   | | |   `-DeclRefExpr 0x7fffd8470a40 <col:33> 'float' lvalue Var 0x7fffd846ca38 'it' 'float'
|   | |       |       |   | | | |   | | `-ImplicitCastExpr 0x7fffd8470ae8 <col:36> 'float' <LValueToRValue>
|   | |       |       |   | | | |   | |   `-DeclRefExpr 0x7fffd8470ac0 <col:36> 'float' lvalue Var 0x7fffd8466d48 'x0' 'float'
|   | |       |       |   | | | |   | `-BinaryOperator 0x7fffd8470c70 <col:41, col:48> 'float' '*'
|   | |       |       |   | | | |   |   |-BinaryOperator 0x7fffd8470c08 <col:41, col:45> 'float' '*'
|   | |       |       |   | | | |   |   | |-BinaryOperator 0x7fffd8470ba0 <col:41, col:43> 'float' '*'
|   | |       |       |   | | | |   |   | | |-ImplicitCastExpr 0x7fffd8470b88 <col:41> 'float' <IntegralToFloating>
|   | |       |       |   | | | |   |   | | | `-IntegerLiteral 0x7fffd8470b28 <col:41> 'int' 2
|   | |       |       |   | | | |   |   | | `-ImplicitCastExpr 0x7fffd8470b70 <col:43> 'float' <LValueToRValue>
|   | |       |       |   | | | |   |   | |   `-DeclRefExpr 0x7fffd8470b48 <col:43> 'float' lvalue Var 0x7fffd846c9c0 't' 'float'
|   | |       |       |   | | | |   |   | `-ImplicitCastExpr 0x7fffd8470bf0 <col:45> 'float' <LValueToRValue>
|   | |       |       |   | | | |   |   |   `-DeclRefExpr 0x7fffd8470bc8 <col:45> 'float' lvalue Var 0x7fffd846ca38 'it' 'float'
|   | |       |       |   | | | |   |   `-ImplicitCastExpr 0x7fffd8470c58 <col:48> 'float' <LValueToRValue>
|   | |       |       |   | | | |   |     `-DeclRefExpr 0x7fffd8470c30 <col:48> 'float' lvalue Var 0x7fffd8469d08 'x1' 'float'
|   | |       |       |   | | | |   `-BinaryOperator 0x7fffd8470da8 <col:53, col:57> 'float' '*'
|   | |       |       |   | | | |     |-BinaryOperator 0x7fffd8470d40 <col:53, col:55> 'float' '*'
|   | |       |       |   | | | |     | |-ImplicitCastExpr 0x7fffd8470d10 <col:53> 'float' <LValueToRValue>
|   | |       |       |   | | | |     | | `-DeclRefExpr 0x7fffd8470cc0 <col:53> 'float' lvalue Var 0x7fffd846c9c0 't' 'float'
|   | |       |       |   | | | |     | `-ImplicitCastExpr 0x7fffd8470d28 <col:55> 'float' <LValueToRValue>
|   | |       |       |   | | | |     |   `-DeclRefExpr 0x7fffd8470ce8 <col:55> 'float' lvalue Var 0x7fffd846c9c0 't' 'float'
|   | |       |       |   | | | |     `-ImplicitCastExpr 0x7fffd8470d90 <col:57> 'float' <LValueToRValue>
|   | |       |       |   | | | |       `-DeclRefExpr 0x7fffd8470d68 <col:57> 'float' lvalue Var 0x7fffd8469838 'x2' 'float'
|   | |       |       |   | | | |-BinaryOperator 0x7fffd8471228 <line:4668:25, col:57> 'float' '='
|   | |       |       |   | | | | |-DeclRefExpr 0x7fffd8470e20 <col:25> 'float' lvalue Var 0x7fffd846c948 'py' 'float'
|   | |       |       |   | | | | `-BinaryOperator 0x7fffd8471200 <col:30, col:57> 'float' '+'
|   | |       |       |   | | | |   |-BinaryOperator 0x7fffd84710c8 <col:30, col:48> 'float' '+'
|   | |       |       |   | | | |   | |-BinaryOperator 0x7fffd8470f30 <col:30, col:36> 'float' '*'
|   | |       |       |   | | | |   | | |-BinaryOperator 0x7fffd8470ec8 <col:30, col:33> 'float' '*'
|   | |       |       |   | | | |   | | | |-ImplicitCastExpr 0x7fffd8470e98 <col:30> 'float' <LValueToRValue>
|   | |       |       |   | | | |   | | | | `-DeclRefExpr 0x7fffd8470e48 <col:30> 'float' lvalue Var 0x7fffd846ca38 'it' 'float'
|   | |       |       |   | | | |   | | | `-ImplicitCastExpr 0x7fffd8470eb0 <col:33> 'float' <LValueToRValue>
|   | |       |       |   | | | |   | | |   `-DeclRefExpr 0x7fffd8470e70 <col:33> 'float' lvalue Var 0x7fffd846ca38 'it' 'float'
|   | |       |       |   | | | |   | | `-ImplicitCastExpr 0x7fffd8470f18 <col:36> 'float' <LValueToRValue>
|   | |       |       |   | | | |   | |   `-DeclRefExpr 0x7fffd8470ef0 <col:36> 'float' lvalue Var 0x7fffd8466f50 'y0' 'float'
|   | |       |       |   | | | |   | `-BinaryOperator 0x7fffd84710a0 <col:41, col:48> 'float' '*'
|   | |       |       |   | | | |   |   |-BinaryOperator 0x7fffd8471038 <col:41, col:45> 'float' '*'
|   | |       |       |   | | | |   |   | |-BinaryOperator 0x7fffd8470fd0 <col:41, col:43> 'float' '*'
|   | |       |       |   | | | |   |   | | |-ImplicitCastExpr 0x7fffd8470fb8 <col:41> 'float' <IntegralToFloating>
|   | |       |       |   | | | |   |   | | | `-IntegerLiteral 0x7fffd8470f58 <col:41> 'int' 2
|   | |       |       |   | | | |   |   | | `-ImplicitCastExpr 0x7fffd8470fa0 <col:43> 'float' <LValueToRValue>
|   | |       |       |   | | | |   |   | |   `-DeclRefExpr 0x7fffd8470f78 <col:43> 'float' lvalue Var 0x7fffd846c9c0 't' 'float'
|   | |       |       |   | | | |   |   | `-ImplicitCastExpr 0x7fffd8471020 <col:45> 'float' <LValueToRValue>
|   | |       |       |   | | | |   |   |   `-DeclRefExpr 0x7fffd8470ff8 <col:45> 'float' lvalue Var 0x7fffd846ca38 'it' 'float'
|   | |       |       |   | | | |   |   `-ImplicitCastExpr 0x7fffd8471088 <col:48> 'float' <LValueToRValue>
|   | |       |       |   | | | |   |     `-DeclRefExpr 0x7fffd8471060 <col:48> 'float' lvalue Var 0x7fffd8469f10 'y1' 'float'
|   | |       |       |   | | | |   `-BinaryOperator 0x7fffd84711d8 <col:53, col:57> 'float' '*'
|   | |       |       |   | | | |     |-BinaryOperator 0x7fffd8471170 <col:53, col:55> 'float' '*'
|   | |       |       |   | | | |     | |-ImplicitCastExpr 0x7fffd8471140 <col:53> 'float' <LValueToRValue>
|   | |       |       |   | | | |     | | `-DeclRefExpr 0x7fffd84710f0 <col:53> 'float' lvalue Var 0x7fffd846c9c0 't' 'float'
|   | |       |       |   | | | |     | `-ImplicitCastExpr 0x7fffd8471158 <col:55> 'float' <LValueToRValue>
|   | |       |       |   | | | |     |   `-DeclRefExpr 0x7fffd8471118 <col:55> 'float' lvalue Var 0x7fffd846c9c0 't' 'float'
|   | |       |       |   | | | |     `-ImplicitCastExpr 0x7fffd84711c0 <col:57> 'float' <LValueToRValue>
|   | |       |       |   | | | |       `-DeclRefExpr 0x7fffd8471198 <col:57> 'float' lvalue Var 0x7fffd8469a88 'y2' 'float'
|   | |       |       |   | | | |-BinaryOperator 0x7fffd8471610 <line:4669:25, col:65> 'float' '='
|   | |       |       |   | | | | |-DeclRefExpr 0x7fffd8471250 <col:25> 'float' lvalue Var 0x7fffd8467188 'dist2' 'float'
|   | |       |       |   | | | | `-BinaryOperator 0x7fffd84715e8 <col:33, col:65> 'float' '+'
|   | |       |       |   | | | |   |-BinaryOperator 0x7fffd8471408 <col:33, col:47> 'float' '*'
|   | |       |       |   | | | |   | |-ParenExpr 0x7fffd8471320 <col:33, col:39> 'float'
|   | |       |       |   | | | |   | | `-BinaryOperator 0x7fffd84712f8 <col:34, col:37> 'float' '-'
|   | |       |       |   | | | |   | |   |-ImplicitCastExpr 0x7fffd84712c8 <col:34> 'float' <LValueToRValue>
|   | |       |       |   | | | |   | |   | `-DeclRefExpr 0x7fffd8471278 <col:34> 'float' lvalue Var 0x7fffd846c8d0 'px' 'float'
|   | |       |       |   | | | |   | |   `-ImplicitCastExpr 0x7fffd84712e0 <col:37> 'float' <LValueToRValue>
|   | |       |       |   | | | |   | |     `-DeclRefExpr 0x7fffd84712a0 <col:37> 'float' lvalue Var 0x7fffd84663e0 'sx' 'float'
|   | |       |       |   | | | |   | `-ParenExpr 0x7fffd84713e8 <col:41, col:47> 'float'
|   | |       |       |   | | | |   |   `-BinaryOperator 0x7fffd84713c0 <col:42, col:45> 'float' '-'
|   | |       |       |   | | | |   |     |-ImplicitCastExpr 0x7fffd8471390 <col:42> 'float' <LValueToRValue>
|   | |       |       |   | | | |   |     | `-DeclRefExpr 0x7fffd8471340 <col:42> 'float' lvalue Var 0x7fffd846c8d0 'px' 'float'
|   | |       |       |   | | | |   |     `-ImplicitCastExpr 0x7fffd84713a8 <col:45> 'float' <LValueToRValue>
|   | |       |       |   | | | |   |       `-DeclRefExpr 0x7fffd8471368 <col:45> 'float' lvalue Var 0x7fffd84663e0 'sx' 'float'
|   | |       |       |   | | | |   `-BinaryOperator 0x7fffd84715c0 <col:51, col:65> 'float' '*'
|   | |       |       |   | | | |     |-ParenExpr 0x7fffd84714d8 <col:51, col:57> 'float'
|   | |       |       |   | | | |     | `-BinaryOperator 0x7fffd84714b0 <col:52, col:55> 'float' '-'
|   | |       |       |   | | | |     |   |-ImplicitCastExpr 0x7fffd8471480 <col:52> 'float' <LValueToRValue>
|   | |       |       |   | | | |     |   | `-DeclRefExpr 0x7fffd8471430 <col:52> 'float' lvalue Var 0x7fffd846c948 'py' 'float'
|   | |       |       |   | | | |     |   `-ImplicitCastExpr 0x7fffd8471498 <col:55> 'float' <LValueToRValue>
|   | |       |       |   | | | |     |     `-DeclRefExpr 0x7fffd8471458 <col:55> 'float' lvalue Var 0x7fffd8466538 'sy' 'float'
|   | |       |       |   | | | |     `-ParenExpr 0x7fffd84715a0 <col:59, col:65> 'float'
|   | |       |       |   | | | |       `-BinaryOperator 0x7fffd8471578 <col:60, col:63> 'float' '-'
|   | |       |       |   | | | |         |-ImplicitCastExpr 0x7fffd8471548 <col:60> 'float' <LValueToRValue>
|   | |       |       |   | | | |         | `-DeclRefExpr 0x7fffd84714f8 <col:60> 'float' lvalue Var 0x7fffd846c948 'py' 'float'
|   | |       |       |   | | | |         `-ImplicitCastExpr 0x7fffd8471560 <col:63> 'float' <LValueToRValue>
|   | |       |       |   | | | |           `-DeclRefExpr 0x7fffd8471520 <col:63> 'float' lvalue Var 0x7fffd8466538 'sy' 'float'
|   | |       |       |   | | | `-IfStmt 0x7fffd84718a0 <line:4670:25, line:444:37>
|   | |       |       |   | | |   |-<<<NULL>>>
|   | |       |       |   | | |   |-<<<NULL>>>
|   | |       |       |   | | |   |-BinaryOperator 0x7fffd8471720 <line:4670:29, col:48> 'int' '<'
|   | |       |       |   | | |   | |-ImplicitCastExpr 0x7fffd8471708 <col:29> 'float' <LValueToRValue>
|   | |       |       |   | | |   | | `-DeclRefExpr 0x7fffd8471638 <col:29> 'float' lvalue Var 0x7fffd8467188 'dist2' 'float'
|   | |       |       |   | | |   | `-BinaryOperator 0x7fffd84716e0 <col:37, col:48> 'float' '*'
|   | |       |       |   | | |   |   |-ImplicitCastExpr 0x7fffd84716b0 <col:37> 'float' <LValueToRValue>
|   | |       |       |   | | |   |   | `-DeclRefExpr 0x7fffd8471660 <col:37> 'float' lvalue Var 0x7fffd8466330 'min_dist' 'float'
|   | |       |       |   | | |   |   `-ImplicitCastExpr 0x7fffd84716c8 <col:48> 'float' <LValueToRValue>
|   | |       |       |   | | |   |     `-DeclRefExpr 0x7fffd8471688 <col:48> 'float' lvalue Var 0x7fffd8466330 'min_dist' 'float'
|   | |       |       |   | | |   |-BinaryOperator 0x7fffd8471878 <line:4671:28, line:444:37> 'float' '='
|   | |       |       |   | | |   | |-DeclRefExpr 0x7fffd8471748 <line:4671:28> 'float' lvalue Var 0x7fffd8466330 'min_dist' 'float'
|   | |       |       |   | | |   | `-CStyleCastExpr 0x7fffd8471850 <col:39, line:444:37> 'float' <FloatingCast>
|   | |       |       |   | | |   |   `-CallExpr 0x7fffd84717d8 <col:31, col:37> 'double'
|   | |       |       |   | | |   |     |-ImplicitCastExpr 0x7fffd84717c0 <col:31> 'double (*)(double)' <FunctionToPointerDecay>
|   | |       |       |   | | |   |     | `-DeclRefExpr 0x7fffd8471770 <col:31> 'double (double)' Function 0x7fffd828e9f0 'sqrt' 'double (double)'
|   | |       |       |   | | |   |     `-ImplicitCastExpr 0x7fffd8471820 <line:4671:58> 'double' <FloatingCast>
|   | |       |       |   | | |   |       `-ImplicitCastExpr 0x7fffd8471808 <col:58> 'float' <LValueToRValue>
|   | |       |       |   | | |   |         `-DeclRefExpr 0x7fffd8471798 <col:58> 'float' lvalue Var 0x7fffd8467188 'dist2' 'float'
|   | |       |       |   | | |   `-<<<NULL>>>
|   | |       |       |   | | `-<<<NULL>>>
|   | |       |       |   | `-IfStmt 0x7fffd8472d18 <line:4673:22, line:4680:22>
|   | |       |       |   |   |-<<<NULL>>>
|   | |       |       |   |   |-<<<NULL>>>
|   | |       |       |   |   |-BinaryOperator 0x7fffd8471bc8 <line:4673:26, col:66> 'int' '&&'
|   | |       |       |   |   | |-BinaryOperator 0x7fffd8471ab8 <col:26, col:48> 'int' '&&'
|   | |       |       |   |   | | |-BinaryOperator 0x7fffd84719a8 <col:26, col:33> 'int' '>='
|   | |       |       |   |   | | | |-ImplicitCastExpr 0x7fffd8471990 <col:26> 'int' <LValueToRValue>
|   | |       |       |   |   | | | | `-DeclRefExpr 0x7fffd8471948 <col:26> 'int' lvalue Var 0x7fffd846bdf0 'num' 'int'
|   | |       |       |   |   | | | `-IntegerLiteral 0x7fffd8471970 <col:33> 'int' 3
|   | |       |       |   |   | | `-BinaryOperator 0x7fffd8471a90 <col:38, col:48> 'int' '>='
|   | |       |       |   |   | |   |-ImplicitCastExpr 0x7fffd8471a78 <col:38, col:43> 'float' <LValueToRValue>
|   | |       |       |   |   | |   | `-ArraySubscriptExpr 0x7fffd8471a30 <col:38, col:43> 'float' lvalue
|   | |       |       |   |   | |   |   |-ImplicitCastExpr 0x7fffd8471a18 <col:38> 'float *' <ArrayToPointerDecay>
|   | |       |       |   |   | |   |   | `-DeclRefExpr 0x7fffd84719d0 <col:38> 'float [3]' lvalue Var 0x7fffd846c7f0 'res' 'float [3]'
|   | |       |       |   |   | |   |   `-IntegerLiteral 0x7fffd84719f8 <col:42> 'int' 2
|   | |       |       |   |   | |   `-FloatingLiteral 0x7fffd8471a58 <col:48> 'float' 0.000000e+00
|   | |       |       |   |   | `-BinaryOperator 0x7fffd8471ba0 <col:56, col:66> 'int' '<='
|   | |       |       |   |   |   |-ImplicitCastExpr 0x7fffd8471b88 <col:56, col:61> 'float' <LValueToRValue>
|   | |       |       |   |   |   | `-ArraySubscriptExpr 0x7fffd8471b40 <col:56, col:61> 'float' lvalue
|   | |       |       |   |   |   |   |-ImplicitCastExpr 0x7fffd8471b28 <col:56> 'float *' <ArrayToPointerDecay>
|   | |       |       |   |   |   |   | `-DeclRefExpr 0x7fffd8471ae0 <col:56> 'float [3]' lvalue Var 0x7fffd846c7f0 'res' 'float [3]'
|   | |       |       |   |   |   |   `-IntegerLiteral 0x7fffd8471b08 <col:60> 'int' 2
|   | |       |       |   |   |   `-FloatingLiteral 0x7fffd8471b68 <col:66> 'float' 1.000000e+00
|   | |       |       |   |   |-CompoundStmt 0x7fffd8472ce0 <col:72, line:4680:22>
|   | |       |       |   |   | |-BinaryOperator 0x7fffd8471db8 <line:4674:25, col:49> 'float' ','
|   | |       |       |   |   | | |-BinaryOperator 0x7fffd8471cb8 <col:25, col:34> 'float' '='
|   | |       |       |   |   | | | |-DeclRefExpr 0x7fffd8471bf0 <col:25> 'float' lvalue Var 0x7fffd846c9c0 't' 'float'
|   | |       |       |   |   | | | `-ImplicitCastExpr 0x7fffd8471ca0 <col:29, col:34> 'float' <LValueToRValue>
|   | |       |       |   |   | | |   `-ArraySubscriptExpr 0x7fffd8471c78 <col:29, col:34> 'float' lvalue
|   | |       |       |   |   | | |     |-ImplicitCastExpr 0x7fffd8471c60 <col:29> 'float *' <ArrayToPointerDecay>
|   | |       |       |   |   | | |     | `-DeclRefExpr 0x7fffd8471c18 <col:29> 'float [3]' lvalue Var 0x7fffd846c7f0 'res' 'float [3]'
|   | |       |       |   |   | | |     `-IntegerLiteral 0x7fffd8471c40 <col:33> 'int' 2
|   | |       |       |   |   | | `-BinaryOperator 0x7fffd8471d90 <col:37, col:49> 'float' '='
|   | |       |       |   |   | |   |-DeclRefExpr 0x7fffd8471ce0 <col:37> 'float' lvalue Var 0x7fffd846ca38 'it' 'float'
|   | |       |       |   |   | |   `-BinaryOperator 0x7fffd8471d68 <col:42, col:49> 'float' '-'
|   | |       |       |   |   | |     |-FloatingLiteral 0x7fffd8471d08 <col:42> 'float' 1.000000e+00
|   | |       |       |   |   | |     `-ImplicitCastExpr 0x7fffd8471d50 <col:49> 'float' <LValueToRValue>
|   | |       |       |   |   | |       `-DeclRefExpr 0x7fffd8471d28 <col:49> 'float' lvalue Var 0x7fffd846c9c0 't' 'float'
|   | |       |       |   |   | |-BinaryOperator 0x7fffd84721e8 <line:4675:25, col:57> 'float' '='
|   | |       |       |   |   | | |-DeclRefExpr 0x7fffd8471de0 <col:25> 'float' lvalue Var 0x7fffd846c8d0 'px' 'float'
|   | |       |       |   |   | | `-BinaryOperator 0x7fffd84721c0 <col:30, col:57> 'float' '+'
|   | |       |       |   |   | |   |-BinaryOperator 0x7fffd8472088 <col:30, col:48> 'float' '+'
|   | |       |       |   |   | |   | |-BinaryOperator 0x7fffd8471ef0 <col:30, col:36> 'float' '*'
|   | |       |       |   |   | |   | | |-BinaryOperator 0x7fffd8471e88 <col:30, col:33> 'float' '*'
|   | |       |       |   |   | |   | | | |-ImplicitCastExpr 0x7fffd8471e58 <col:30> 'float' <LValueToRValue>
|   | |       |       |   |   | |   | | | | `-DeclRefExpr 0x7fffd8471e08 <col:30> 'float' lvalue Var 0x7fffd846ca38 'it' 'float'
|   | |       |       |   |   | |   | | | `-ImplicitCastExpr 0x7fffd8471e70 <col:33> 'float' <LValueToRValue>
|   | |       |       |   |   | |   | | |   `-DeclRefExpr 0x7fffd8471e30 <col:33> 'float' lvalue Var 0x7fffd846ca38 'it' 'float'
|   | |       |       |   |   | |   | | `-ImplicitCastExpr 0x7fffd8471ed8 <col:36> 'float' <LValueToRValue>
|   | |       |       |   |   | |   | |   `-DeclRefExpr 0x7fffd8471eb0 <col:36> 'float' lvalue Var 0x7fffd8466d48 'x0' 'float'
|   | |       |       |   |   | |   | `-BinaryOperator 0x7fffd8472060 <col:41, col:48> 'float' '*'
|   | |       |       |   |   | |   |   |-BinaryOperator 0x7fffd8471ff8 <col:41, col:45> 'float' '*'
|   | |       |       |   |   | |   |   | |-BinaryOperator 0x7fffd8471f90 <col:41, col:43> 'float' '*'
|   | |       |       |   |   | |   |   | | |-ImplicitCastExpr 0x7fffd8471f78 <col:41> 'float' <IntegralToFloating>
|   | |       |       |   |   | |   |   | | | `-IntegerLiteral 0x7fffd8471f18 <col:41> 'int' 2
|   | |       |       |   |   | |   |   | | `-ImplicitCastExpr 0x7fffd8471f60 <col:43> 'float' <LValueToRValue>
|   | |       |       |   |   | |   |   | |   `-DeclRefExpr 0x7fffd8471f38 <col:43> 'float' lvalue Var 0x7fffd846c9c0 't' 'float'
|   | |       |       |   |   | |   |   | `-ImplicitCastExpr 0x7fffd8471fe0 <col:45> 'float' <LValueToRValue>
|   | |       |       |   |   | |   |   |   `-DeclRefExpr 0x7fffd8471fb8 <col:45> 'float' lvalue Var 0x7fffd846ca38 'it' 'float'
|   | |       |       |   |   | |   |   `-ImplicitCastExpr 0x7fffd8472048 <col:48> 'float' <LValueToRValue>
|   | |       |       |   |   | |   |     `-DeclRefExpr 0x7fffd8472020 <col:48> 'float' lvalue Var 0x7fffd8469d08 'x1' 'float'
|   | |       |       |   |   | |   `-BinaryOperator 0x7fffd8472198 <col:53, col:57> 'float' '*'
|   | |       |       |   |   | |     |-BinaryOperator 0x7fffd8472130 <col:53, col:55> 'float' '*'
|   | |       |       |   |   | |     | |-ImplicitCastExpr 0x7fffd8472100 <col:53> 'float' <LValueToRValue>
|   | |       |       |   |   | |     | | `-DeclRefExpr 0x7fffd84720b0 <col:53> 'float' lvalue Var 0x7fffd846c9c0 't' 'float'
|   | |       |       |   |   | |     | `-ImplicitCastExpr 0x7fffd8472118 <col:55> 'float' <LValueToRValue>
|   | |       |       |   |   | |     |   `-DeclRefExpr 0x7fffd84720d8 <col:55> 'float' lvalue Var 0x7fffd846c9c0 't' 'float'
|   | |       |       |   |   | |     `-ImplicitCastExpr 0x7fffd8472180 <col:57> 'float' <LValueToRValue>
|   | |       |       |   |   | |       `-DeclRefExpr 0x7fffd8472158 <col:57> 'float' lvalue Var 0x7fffd8469838 'x2' 'float'
|   | |       |       |   |   | |-BinaryOperator 0x7fffd8472618 <line:4676:25, col:57> 'float' '='
|   | |       |       |   |   | | |-DeclRefExpr 0x7fffd8472210 <col:25> 'float' lvalue Var 0x7fffd846c948 'py' 'float'
|   | |       |       |   |   | | `-BinaryOperator 0x7fffd84725f0 <col:30, col:57> 'float' '+'
|   | |       |       |   |   | |   |-BinaryOperator 0x7fffd84724b8 <col:30, col:48> 'float' '+'
|   | |       |       |   |   | |   | |-BinaryOperator 0x7fffd8472320 <col:30, col:36> 'float' '*'
|   | |       |       |   |   | |   | | |-BinaryOperator 0x7fffd84722b8 <col:30, col:33> 'float' '*'
|   | |       |       |   |   | |   | | | |-ImplicitCastExpr 0x7fffd8472288 <col:30> 'float' <LValueToRValue>
|   | |       |       |   |   | |   | | | | `-DeclRefExpr 0x7fffd8472238 <col:30> 'float' lvalue Var 0x7fffd846ca38 'it' 'float'
|   | |       |       |   |   | |   | | | `-ImplicitCastExpr 0x7fffd84722a0 <col:33> 'float' <LValueToRValue>
|   | |       |       |   |   | |   | | |   `-DeclRefExpr 0x7fffd8472260 <col:33> 'float' lvalue Var 0x7fffd846ca38 'it' 'float'
|   | |       |       |   |   | |   | | `-ImplicitCastExpr 0x7fffd8472308 <col:36> 'float' <LValueToRValue>
|   | |       |       |   |   | |   | |   `-DeclRefExpr 0x7fffd84722e0 <col:36> 'float' lvalue Var 0x7fffd8466f50 'y0' 'float'
|   | |       |       |   |   | |   | `-BinaryOperator 0x7fffd8472490 <col:41, col:48> 'float' '*'
|   | |       |       |   |   | |   |   |-BinaryOperator 0x7fffd8472428 <col:41, col:45> 'float' '*'
|   | |       |       |   |   | |   |   | |-BinaryOperator 0x7fffd84723c0 <col:41, col:43> 'float' '*'
|   | |       |       |   |   | |   |   | | |-ImplicitCastExpr 0x7fffd84723a8 <col:41> 'float' <IntegralToFloating>
|   | |       |       |   |   | |   |   | | | `-IntegerLiteral 0x7fffd8472348 <col:41> 'int' 2
|   | |       |       |   |   | |   |   | | `-ImplicitCastExpr 0x7fffd8472390 <col:43> 'float' <LValueToRValue>
|   | |       |       |   |   | |   |   | |   `-DeclRefExpr 0x7fffd8472368 <col:43> 'float' lvalue Var 0x7fffd846c9c0 't' 'float'
|   | |       |       |   |   | |   |   | `-ImplicitCastExpr 0x7fffd8472410 <col:45> 'float' <LValueToRValue>
|   | |       |       |   |   | |   |   |   `-DeclRefExpr 0x7fffd84723e8 <col:45> 'float' lvalue Var 0x7fffd846ca38 'it' 'float'
|   | |       |       |   |   | |   |   `-ImplicitCastExpr 0x7fffd8472478 <col:48> 'float' <LValueToRValue>
|   | |       |       |   |   | |   |     `-DeclRefExpr 0x7fffd8472450 <col:48> 'float' lvalue Var 0x7fffd8469f10 'y1' 'float'
|   | |       |       |   |   | |   `-BinaryOperator 0x7fffd84725c8 <col:53, col:57> 'float' '*'
|   | |       |       |   |   | |     |-BinaryOperator 0x7fffd8472560 <col:53, col:55> 'float' '*'
|   | |       |       |   |   | |     | |-ImplicitCastExpr 0x7fffd8472530 <col:53> 'float' <LValueToRValue>
|   | |       |       |   |   | |     | | `-DeclRefExpr 0x7fffd84724e0 <col:53> 'float' lvalue Var 0x7fffd846c9c0 't' 'float'
|   | |       |       |   |   | |     | `-ImplicitCastExpr 0x7fffd8472548 <col:55> 'float' <LValueToRValue>
|   | |       |       |   |   | |     |   `-DeclRefExpr 0x7fffd8472508 <col:55> 'float' lvalue Var 0x7fffd846c9c0 't' 'float'
|   | |       |       |   |   | |     `-ImplicitCastExpr 0x7fffd84725b0 <col:57> 'float' <LValueToRValue>
|   | |       |       |   |   | |       `-DeclRefExpr 0x7fffd8472588 <col:57> 'float' lvalue Var 0x7fffd8469a88 'y2' 'float'
|   | |       |       |   |   | |-BinaryOperator 0x7fffd8472a18 <line:4677:25, col:65> 'float' '='
|   | |       |       |   |   | | |-DeclRefExpr 0x7fffd8472640 <col:25> 'float' lvalue Var 0x7fffd8467188 'dist2' 'float'
|   | |       |       |   |   | | `-BinaryOperator 0x7fffd84729f0 <col:33, col:65> 'float' '+'
|   | |       |       |   |   | |   |-BinaryOperator 0x7fffd84727f8 <col:33, col:47> 'float' '*'
|   | |       |       |   |   | |   | |-ParenExpr 0x7fffd8472710 <col:33, col:39> 'float'
|   | |       |       |   |   | |   | | `-BinaryOperator 0x7fffd84726e8 <col:34, col:37> 'float' '-'
|   | |       |       |   |   | |   | |   |-ImplicitCastExpr 0x7fffd84726b8 <col:34> 'float' <LValueToRValue>
|   | |       |       |   |   | |   | |   | `-DeclRefExpr 0x7fffd8472668 <col:34> 'float' lvalue Var 0x7fffd846c8d0 'px' 'float'
|   | |       |       |   |   | |   | |   `-ImplicitCastExpr 0x7fffd84726d0 <col:37> 'float' <LValueToRValue>
|   | |       |       |   |   | |   | |     `-DeclRefExpr 0x7fffd8472690 <col:37> 'float' lvalue Var 0x7fffd84663e0 'sx' 'float'
|   | |       |       |   |   | |   | `-ParenExpr 0x7fffd84727d8 <col:41, col:47> 'float'
|   | |       |       |   |   | |   |   `-BinaryOperator 0x7fffd84727b0 <col:42, col:45> 'float' '-'
|   | |       |       |   |   | |   |     |-ImplicitCastExpr 0x7fffd8472780 <col:42> 'float' <LValueToRValue>
|   | |       |       |   |   | |   |     | `-DeclRefExpr 0x7fffd8472730 <col:42> 'float' lvalue Var 0x7fffd846c8d0 'px' 'float'
|   | |       |       |   |   | |   |     `-ImplicitCastExpr 0x7fffd8472798 <col:45> 'float' <LValueToRValue>
|   | |       |       |   |   | |   |       `-DeclRefExpr 0x7fffd8472758 <col:45> 'float' lvalue Var 0x7fffd84663e0 'sx' 'float'
|   | |       |       |   |   | |   `-BinaryOperator 0x7fffd84729c8 <col:51, col:65> 'float' '*'
|   | |       |       |   |   | |     |-ParenExpr 0x7fffd84728c8 <col:51, col:57> 'float'
|   | |       |       |   |   | |     | `-BinaryOperator 0x7fffd84728a0 <col:52, col:55> 'float' '-'
|   | |       |       |   |   | |     |   |-ImplicitCastExpr 0x7fffd8472870 <col:52> 'float' <LValueToRValue>
|   | |       |       |   |   | |     |   | `-DeclRefExpr 0x7fffd8472820 <col:52> 'float' lvalue Var 0x7fffd846c948 'py' 'float'
|   | |       |       |   |   | |     |   `-ImplicitCastExpr 0x7fffd8472888 <col:55> 'float' <LValueToRValue>
|   | |       |       |   |   | |     |     `-DeclRefExpr 0x7fffd8472848 <col:55> 'float' lvalue Var 0x7fffd8466538 'sy' 'float'
|   | |       |       |   |   | |     `-ParenExpr 0x7fffd84729a8 <col:59, col:65> 'float'
|   | |       |       |   |   | |       `-BinaryOperator 0x7fffd8472980 <col:60, col:63> 'float' '-'
|   | |       |       |   |   | |         |-ImplicitCastExpr 0x7fffd8472950 <col:60> 'float' <LValueToRValue>
|   | |       |       |   |   | |         | `-DeclRefExpr 0x7fffd8472900 <col:60> 'float' lvalue Var 0x7fffd846c948 'py' 'float'
|   | |       |       |   |   | |         `-ImplicitCastExpr 0x7fffd8472968 <col:63> 'float' <LValueToRValue>
|   | |       |       |   |   | |           `-DeclRefExpr 0x7fffd8472928 <col:63> 'float' lvalue Var 0x7fffd8466538 'sy' 'float'
|   | |       |       |   |   | `-IfStmt 0x7fffd8472ca8 <line:4678:25, line:444:37>
|   | |       |       |   |   |   |-<<<NULL>>>
|   | |       |       |   |   |   |-<<<NULL>>>
|   | |       |       |   |   |   |-BinaryOperator 0x7fffd8472b28 <line:4678:29, col:48> 'int' '<'
|   | |       |       |   |   |   | |-ImplicitCastExpr 0x7fffd8472b10 <col:29> 'float' <LValueToRValue>
|   | |       |       |   |   |   | | `-DeclRefExpr 0x7fffd8472a40 <col:29> 'float' lvalue Var 0x7fffd8467188 'dist2' 'float'
|   | |       |       |   |   |   | `-BinaryOperator 0x7fffd8472ae8 <col:37, col:48> 'float' '*'
|   | |       |       |   |   |   |   |-ImplicitCastExpr 0x7fffd8472ab8 <col:37> 'float' <LValueToRValue>
|   | |       |       |   |   |   |   | `-DeclRefExpr 0x7fffd8472a68 <col:37> 'float' lvalue Var 0x7fffd8466330 'min_dist' 'float'
|   | |       |       |   |   |   |   `-ImplicitCastExpr 0x7fffd8472ad0 <col:48> 'float' <LValueToRValue>
|   | |       |       |   |   |   |     `-DeclRefExpr 0x7fffd8472a90 <col:48> 'float' lvalue Var 0x7fffd8466330 'min_dist' 'float'
|   | |       |       |   |   |   |-BinaryOperator 0x7fffd8472c80 <line:4679:28, line:444:37> 'float' '='
|   | |       |       |   |   |   | |-DeclRefExpr 0x7fffd8472b50 <line:4679:28> 'float' lvalue Var 0x7fffd8466330 'min_dist' 'float'
|   | |       |       |   |   |   | `-CStyleCastExpr 0x7fffd8472c58 <col:39, line:444:37> 'float' <FloatingCast>
|   | |       |       |   |   |   |   `-CallExpr 0x7fffd8472be0 <col:31, col:37> 'double'
|   | |       |       |   |   |   |     |-ImplicitCastExpr 0x7fffd8472bc8 <col:31> 'double (*)(double)' <FunctionToPointerDecay>
|   | |       |       |   |   |   |     | `-DeclRefExpr 0x7fffd8472b78 <col:31> 'double (double)' Function 0x7fffd828e9f0 'sqrt' 'double (double)'
|   | |       |       |   |   |   |     `-ImplicitCastExpr 0x7fffd8472c28 <line:4679:58> 'double' <FloatingCast>
|   | |       |       |   |   |   |       `-ImplicitCastExpr 0x7fffd8472c10 <col:58> 'float' <LValueToRValue>
|   | |       |       |   |   |   |         `-DeclRefExpr 0x7fffd8472ba0 <col:58> 'float' lvalue Var 0x7fffd8467188 'dist2' 'float'
|   | |       |       |   |   |   `-<<<NULL>>>
|   | |       |       |   |   `-<<<NULL>>>
|   | |       |       |   `-<<<NULL>>>
|   | |       |       `-<<<NULL>>>
|   | |       |-IfStmt 0x7fffd8473040 <line:4684:13, line:4685:28>
|   | |       | |-<<<NULL>>>
|   | |       | |-<<<NULL>>>
|   | |       | |-BinaryOperator 0x7fffd8472f68 <line:4684:17, col:28> 'int' '=='
|   | |       | | |-ImplicitCastExpr 0x7fffd8472f50 <col:17> 'int' <LValueToRValue>
|   | |       | | | `-DeclRefExpr 0x7fffd8472f08 <col:17> 'int' lvalue Var 0x7fffd8466970 'winding' 'int'
|   | |       | | `-IntegerLiteral 0x7fffd8472f30 <col:28> 'int' 0
|   | |       | |-BinaryOperator 0x7fffd8473018 <line:4685:16, col:28> 'float' '='
|   | |       | | |-DeclRefExpr 0x7fffd8472f90 <col:16> 'float' lvalue Var 0x7fffd8466330 'min_dist' 'float'
|   | |       | | `-UnaryOperator 0x7fffd8472ff8 <col:27, col:28> 'float' prefix '-'
|   | |       | |   `-ImplicitCastExpr 0x7fffd8472fe0 <col:28> 'float' <LValueToRValue>
|   | |       | |     `-DeclRefExpr 0x7fffd8472fb8 <col:28> 'float' lvalue Var 0x7fffd8466330 'min_dist' 'float'
|   | |       | `-<<<NULL>>>
|   | |       |-BinaryOperator 0x7fffd84731e0 <line:4686:13, col:53> 'float' '='
|   | |       | |-DeclRefExpr 0x7fffd8473078 <col:13> 'float' lvalue Var 0x7fffd84662a0 'val' 'float'
|   | |       | `-BinaryOperator 0x7fffd84731b8 <col:19, col:53> 'float' '+'
|   | |       |   |-ImplicitCastExpr 0x7fffd84731a0 <col:19> 'float' <IntegralToFloating>
|   | |       |   | `-ImplicitCastExpr 0x7fffd8473188 <col:19> 'int' <IntegralCast>
|   | |       |   |   `-ImplicitCastExpr 0x7fffd8473170 <col:19> 'unsigned char' <LValueToRValue>
|   | |       |   |     `-DeclRefExpr 0x7fffd84730a0 <col:19> 'unsigned char' lvalue ParmVar 0x7fffd84609d8 'onedge_value' 'unsigned char'
|   | |       |   `-BinaryOperator 0x7fffd8473148 <col:34, col:53> 'float' '*'
|   | |       |     |-ImplicitCastExpr 0x7fffd8473118 <col:34> 'float' <LValueToRValue>
|   | |       |     | `-DeclRefExpr 0x7fffd84730c8 <col:34> 'float' lvalue ParmVar 0x7fffd8460a50 'pixel_dist_scale' 'float'
|   | |       |     `-ImplicitCastExpr 0x7fffd8473130 <col:53> 'float' <LValueToRValue>
|   | |       |       `-DeclRefExpr 0x7fffd84730f0 <col:53> 'float' lvalue Var 0x7fffd8466330 'min_dist' 'float'
|   | |       |-IfStmt 0x7fffd8473490 <line:4687:13, line:4690:22>
|   | |       | |-<<<NULL>>>
|   | |       | |-<<<NULL>>>
|   | |       | |-BinaryOperator 0x7fffd8473280 <line:4687:17, col:23> 'int' '<'
|   | |       | | |-ImplicitCastExpr 0x7fffd8473250 <col:17> 'float' <LValueToRValue>
|   | |       | | | `-DeclRefExpr 0x7fffd8473208 <col:17> 'float' lvalue Var 0x7fffd84662a0 'val' 'float'
|   | |       | | `-ImplicitCastExpr 0x7fffd8473268 <col:23> 'float' <IntegralToFloating>
|   | |       | |   `-IntegerLiteral 0x7fffd8473230 <col:23> 'int' 0
|   | |       | |-BinaryOperator 0x7fffd8473308 <line:4688:16, col:22> 'float' '='
|   | |       | | |-DeclRefExpr 0x7fffd84732a8 <col:16> 'float' lvalue Var 0x7fffd84662a0 'val' 'float'
|   | |       | | `-ImplicitCastExpr 0x7fffd84732f0 <col:22> 'float' <IntegralToFloating>
|   | |       | |   `-IntegerLiteral 0x7fffd84732d0 <col:22> 'int' 0
|   | |       | `-IfStmt 0x7fffd8473458 <line:4689:18, line:4690:22>
|   | |       |   |-<<<NULL>>>
|   | |       |   |-<<<NULL>>>
|   | |       |   |-BinaryOperator 0x7fffd84733a8 <line:4689:22, col:28> 'int' '>'
|   | |       |   | |-ImplicitCastExpr 0x7fffd8473378 <col:22> 'float' <LValueToRValue>
|   | |       |   | | `-DeclRefExpr 0x7fffd8473330 <col:22> 'float' lvalue Var 0x7fffd84662a0 'val' 'float'
|   | |       |   | `-ImplicitCastExpr 0x7fffd8473390 <col:28> 'float' <IntegralToFloating>
|   | |       |   |   `-IntegerLiteral 0x7fffd8473358 <col:28> 'int' 255
|   | |       |   |-BinaryOperator 0x7fffd8473430 <line:4690:16, col:22> 'float' '='
|   | |       |   | |-DeclRefExpr 0x7fffd84733d0 <col:16> 'float' lvalue Var 0x7fffd84662a0 'val' 'float'
|   | |       |   | `-ImplicitCastExpr 0x7fffd8473418 <col:22> 'float' <IntegralToFloating>
|   | |       |   |   `-IntegerLiteral 0x7fffd84733f8 <col:22> 'int' 255
|   | |       |   `-<<<NULL>>>
|   | |       `-BinaryOperator 0x7fffd84737d0 <line:4691:13, col:55> 'unsigned char' '='
|   | |         |-ArraySubscriptExpr 0x7fffd8473728 <col:13, col:35> 'unsigned char' lvalue
|   | |         | |-ImplicitCastExpr 0x7fffd8473710 <col:13> 'unsigned char *' <LValueToRValue>
|   | |         | | `-DeclRefExpr 0x7fffd84734c8 <col:13> 'unsigned char *' lvalue Var 0x7fffd84612f0 'data' 'unsigned char *'
|   | |         | `-BinaryOperator 0x7fffd84736e8 <col:18, col:34> 'int' '+'
|   | |         |   |-BinaryOperator 0x7fffd84735f8 <col:18, col:26> 'int' '*'
|   | |         |   | |-ParenExpr 0x7fffd8473598 <col:18, col:24> 'int'
|   | |         |   | | `-BinaryOperator 0x7fffd8473570 <col:19, col:21> 'int' '-'
|   | |         |   | |   |-ImplicitCastExpr 0x7fffd8473540 <col:19> 'int' <LValueToRValue>
|   | |         |   | |   | `-DeclRefExpr 0x7fffd84734f0 <col:19> 'int' lvalue Var 0x7fffd8462558 'y' 'int'
|   | |         |   | |   `-ImplicitCastExpr 0x7fffd8473558 <col:21> 'int' <LValueToRValue>
|   | |         |   | |     `-DeclRefExpr 0x7fffd8473518 <col:21> 'int' lvalue Var 0x7fffd8461028 'iy0' 'int'
|   | |         |   | `-ImplicitCastExpr 0x7fffd84735e0 <col:26> 'int' <LValueToRValue>
|   | |         |   |   `-DeclRefExpr 0x7fffd84735b8 <col:26> 'int' lvalue Var 0x7fffd84611d0 'w' 'int'
|   | |         |   `-ParenExpr 0x7fffd84736c8 <col:28, col:34> 'int'
|   | |         |     `-BinaryOperator 0x7fffd84736a0 <col:29, col:31> 'int' '-'
|   | |         |       |-ImplicitCastExpr 0x7fffd8473670 <col:29> 'int' <LValueToRValue>
|   | |         |       | `-DeclRefExpr 0x7fffd8473620 <col:29> 'int' lvalue Var 0x7fffd84624e0 'x' 'int'
|   | |         |       `-ImplicitCastExpr 0x7fffd8473688 <col:31> 'int' <LValueToRValue>
|   | |         |         `-DeclRefExpr 0x7fffd8473648 <col:31> 'int' lvalue Var 0x7fffd8460fb0 'ix0' 'int'
|   | |         `-CStyleCastExpr 0x7fffd84737a8 <col:39, col:55> 'unsigned char' <FloatingToIntegral>
|   | |           `-ImplicitCastExpr 0x7fffd8473790 <col:55> 'float' <LValueToRValue>
|   | |             `-DeclRefExpr 0x7fffd8473750 <col:55> 'float' lvalue Var 0x7fffd84662a0 'val' 'float'
|   | |-ParenExpr 0x7fffd8473af8 <line:468:31, col:49> 'void'
|   | | `-BinaryOperator 0x7fffd8473ad0 <col:32, col:48> 'void' ','
|   | |   |-CStyleCastExpr 0x7fffd84739e0 <col:32, col:40> 'void' <ToVoid>
|   | |   | `-ImplicitCastExpr 0x7fffd84739c8 <col:38, col:40> 'void *' <LValueToRValue>
|   | |   |   `-ParenExpr 0x7fffd84739a8 <col:38, col:40> 'void *const' lvalue
|   | |   |     `-MemberExpr 0x7fffd8473930 <line:4694:30, col:36> 'void *const' lvalue ->userdata 0x7fffd834cb78
|   | |   |       `-ImplicitCastExpr 0x7fffd8473918 <col:30> 'const stbtt_fontinfo *' <LValueToRValue>
|   | |   |         `-DeclRefExpr 0x7fffd84738f0 <col:30> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd84607a0 'info' 'const stbtt_fontinfo *'
|   | |   `-CallExpr 0x7fffd8473a70 <line:468:42, col:48> 'void'
|   | |     |-ImplicitCastExpr 0x7fffd8473a58 <col:42> 'void (*)(void *)' <FunctionToPointerDecay>
|   | |     | `-DeclRefExpr 0x7fffd8473a08 <col:42> 'void (void *)' Function 0x7fffd831bec0 'free' 'void (void *)'
|   | |     `-ImplicitCastExpr 0x7fffd8473ab8 <line:4694:18> 'void *' <BitCast>
|   | |       `-ImplicitCastExpr 0x7fffd8473aa0 <col:18> 'float *' <LValueToRValue>
|   | |         `-DeclRefExpr 0x7fffd8473a30 <col:18> 'float *' lvalue Var 0x7fffd8462700 'precompute' 'float *'
|   | `-ParenExpr 0x7fffd8473d20 <line:468:31, col:49> 'void'
|   |   `-BinaryOperator 0x7fffd8473cf8 <col:32, col:48> 'void' ','
|   |     |-CStyleCastExpr 0x7fffd8473c08 <col:32, col:40> 'void' <ToVoid>
|   |     | `-ImplicitCastExpr 0x7fffd8473bf0 <col:38, col:40> 'void *' <LValueToRValue>
|   |     |   `-ParenExpr 0x7fffd8473bd0 <col:38, col:40> 'void *const' lvalue
|   |     |     `-MemberExpr 0x7fffd8473b58 <line:4695:25, col:31> 'void *const' lvalue ->userdata 0x7fffd834cb78
|   |     |       `-ImplicitCastExpr 0x7fffd8473b40 <col:25> 'const stbtt_fontinfo *' <LValueToRValue>
|   |     |         `-DeclRefExpr 0x7fffd8473b18 <col:25> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd84607a0 'info' 'const stbtt_fontinfo *'
|   |     `-CallExpr 0x7fffd8473c98 <line:468:42, col:48> 'void'
|   |       |-ImplicitCastExpr 0x7fffd8473c80 <col:42> 'void (*)(void *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x7fffd8473c30 <col:42> 'void (void *)' Function 0x7fffd831bec0 'free' 'void (void *)'
|   |       `-ImplicitCastExpr 0x7fffd8473ce0 <line:4695:18> 'void *' <BitCast>
|   |         `-ImplicitCastExpr 0x7fffd8473cc8 <col:18> 'stbtt_vertex *' <LValueToRValue>
|   |           `-DeclRefExpr 0x7fffd8473c58 <col:18> 'stbtt_vertex *' lvalue Var 0x7fffd8462788 'verts' 'stbtt_vertex *'
|   `-ReturnStmt 0x7fffd8473de0 <line:4697:4, col:11>
|     `-ImplicitCastExpr 0x7fffd8473dc8 <col:11> 'unsigned char *' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd8473da0 <col:11> 'unsigned char *' lvalue Var 0x7fffd84612f0 'data' 'unsigned char *'
|-FunctionDecl 0x7fffd84743c8 prev 0x7fffd835b2b8 <line:501:19, line:4703:1> line:4700:27 stbtt_GetCodepointSDF 'unsigned char *(const stbtt_fontinfo *, float, int, int, unsigned char, float, int *, int *, int *, int *)' extern
| |-ParmVarDecl 0x7fffd8473eb8 <col:49, col:71> col:71 used info 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8473f30 <col:77, col:83> col:83 used scale 'float'
| |-ParmVarDecl 0x7fffd8473fa8 <col:90, col:94> col:94 used codepoint 'int'
| |-ParmVarDecl 0x7fffd8474020 <col:105, col:109> col:109 used padding 'int'
| |-ParmVarDecl 0x7fffd8474098 <col:118, col:132> col:132 used onedge_value 'unsigned char'
| |-ParmVarDecl 0x7fffd8474110 <col:146, col:152> col:152 used pixel_dist_scale 'float'
| |-ParmVarDecl 0x7fffd8474188 <col:170, col:175> col:175 used width 'int *'
| |-ParmVarDecl 0x7fffd8474200 <col:182, col:187> col:187 used height 'int *'
| |-ParmVarDecl 0x7fffd8474278 <col:195, col:200> col:200 used xoff 'int *'
| |-ParmVarDecl 0x7fffd84742f0 <col:206, col:211> col:211 used yoff 'int *'
| `-CompoundStmt 0x7fffd8474928 <line:4701:1, line:4703:1>
|   `-ReturnStmt 0x7fffd8474910 <line:4702:4, col:147>
|     `-CallExpr 0x7fffd84747b0 <col:11, col:147> 'unsigned char *'
|       |-ImplicitCastExpr 0x7fffd8474798 <col:11> 'unsigned char *(*)(const stbtt_fontinfo *, float, int, int, unsigned char, float, int *, int *, int *, int *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x7fffd84744b8 <col:11> 'unsigned char *(const stbtt_fontinfo *, float, int, int, unsigned char, float, int *, int *, int *, int *)' Function 0x7fffd8460d08 'stbtt_GetGlyphSDF' 'unsigned char *(const stbtt_fontinfo *, float, int, int, unsigned char, float, int *, int *, int *, int *)'
|       |-ImplicitCastExpr 0x7fffd8474828 <col:29> 'const stbtt_fontinfo *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd84744e0 <col:29> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd8473eb8 'info' 'const stbtt_fontinfo *'
|       |-ImplicitCastExpr 0x7fffd8474840 <col:35> 'float' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd8474508 <col:35> 'float' lvalue ParmVar 0x7fffd8473f30 'scale' 'float'
|       |-CallExpr 0x7fffd84745c0 <col:42, col:78> 'int'
|       | |-ImplicitCastExpr 0x7fffd84745a8 <col:42> 'int (*)(const stbtt_fontinfo *, int)' <FunctionToPointerDecay>
|       | | `-DeclRefExpr 0x7fffd8474530 <col:42> 'int (const stbtt_fontinfo *, int)' Function 0x7fffd83829f0 'stbtt_FindGlyphIndex' 'int (const stbtt_fontinfo *, int)'
|       | |-ImplicitCastExpr 0x7fffd84745f8 <col:63> 'const stbtt_fontinfo *' <LValueToRValue>
|       | | `-DeclRefExpr 0x7fffd8474558 <col:63> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd8473eb8 'info' 'const stbtt_fontinfo *'
|       | `-ImplicitCastExpr 0x7fffd8474610 <col:69> 'int' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fffd8474580 <col:69> 'int' lvalue ParmVar 0x7fffd8473fa8 'codepoint' 'int'
|       |-ImplicitCastExpr 0x7fffd8474858 <col:81> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd8474628 <col:81> 'int' lvalue ParmVar 0x7fffd8474020 'padding' 'int'
|       |-ImplicitCastExpr 0x7fffd8474870 <col:90> 'unsigned char' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd8474650 <col:90> 'unsigned char' lvalue ParmVar 0x7fffd8474098 'onedge_value' 'unsigned char'
|       |-ImplicitCastExpr 0x7fffd8474888 <col:104> 'float' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd8474678 <col:104> 'float' lvalue ParmVar 0x7fffd8474110 'pixel_dist_scale' 'float'
|       |-ImplicitCastExpr 0x7fffd84748a0 <col:122> 'int *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd84746a0 <col:122> 'int *' lvalue ParmVar 0x7fffd8474188 'width' 'int *'
|       |-ImplicitCastExpr 0x7fffd84748b8 <col:129> 'int *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd84746c8 <col:129> 'int *' lvalue ParmVar 0x7fffd8474200 'height' 'int *'
|       |-ImplicitCastExpr 0x7fffd84748d0 <col:137> 'int *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd84746f0 <col:137> 'int *' lvalue ParmVar 0x7fffd8474278 'xoff' 'int *'
|       `-ImplicitCastExpr 0x7fffd84748e8 <col:143> 'int *' <LValueToRValue>
|         `-DeclRefExpr 0x7fffd8474718 <col:143> 'int *' lvalue ParmVar 0x7fffd84742f0 'yoff' 'int *'
|-FunctionDecl 0x7fffd8474a60 prev 0x7fffd835a588 <line:501:19, line:4708:1> line:4705:16 stbtt_FreeSDF 'void (unsigned char *, void *)' extern
| |-ParmVarDecl 0x7fffd8474958 <col:30, col:45> col:45 used bitmap 'unsigned char *'
| |-ParmVarDecl 0x7fffd84749d0 <col:53, col:59> col:59 used userdata 'void *'
| `-CompoundStmt 0x7fffd8474d18 <line:4706:1, line:4708:1>
|   `-ParenExpr 0x7fffd8474cc8 <line:468:31, col:49> 'void'
|     `-BinaryOperator 0x7fffd8474ca0 <col:32, col:48> 'void' ','
|       |-CStyleCastExpr 0x7fffd8474bb0 <col:32, col:40> 'void' <ToVoid>
|       | `-ImplicitCastExpr 0x7fffd8474b98 <col:38, col:40> 'void *' <LValueToRValue>
|       |   `-ParenExpr 0x7fffd8474b78 <col:38, col:40> 'void *' lvalue
|       |     `-DeclRefExpr 0x7fffd8474b10 <line:4707:23> 'void *' lvalue ParmVar 0x7fffd84749d0 'userdata' 'void *'
|       `-CallExpr 0x7fffd8474c40 <line:468:42, col:48> 'void'
|         |-ImplicitCastExpr 0x7fffd8474c28 <col:42> 'void (*)(void *)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x7fffd8474bd8 <col:42> 'void (void *)' Function 0x7fffd831bec0 'free' 'void (void *)'
|         `-ImplicitCastExpr 0x7fffd8474c88 <line:4707:15> 'void *' <BitCast>
|           `-ImplicitCastExpr 0x7fffd8474c70 <col:15> 'unsigned char *' <LValueToRValue>
|             `-DeclRefExpr 0x7fffd8474c00 <col:15> 'unsigned char *' lvalue ParmVar 0x7fffd8474958 'bitmap' 'unsigned char *'
|-FunctionDecl 0x7fffd8474fd0 <line:4716:1, line:4753:1> line:4716:20 used stbtt__CompareUTF8toUTF16_bigendian_prefix 'stbtt_int32 (stbtt_uint8 *, stbtt_int32, stbtt_uint8 *, stbtt_int32)' static
| |-ParmVarDecl 0x7fffd8474d40 <col:63, col:76> col:76 used s1 'stbtt_uint8 *'
| |-ParmVarDecl 0x7fffd8474db0 <col:80, col:92> col:92 used len1 'stbtt_int32':'int'
| |-ParmVarDecl 0x7fffd8474e20 <col:98, col:111> col:111 used s2 'stbtt_uint8 *'
| |-ParmVarDecl 0x7fffd8474e90 <col:115, col:127> col:127 used len2 'stbtt_int32':'int'
| `-CompoundStmt 0x7fffd84783b8 <line:4717:1, line:4753:1>
|   |-DeclStmt 0x7fffd8475120 <line:4718:4, col:19>
|   | `-VarDecl 0x7fffd84750a0 <col:4, col:18> col:16 used i 'stbtt_int32':'int' cinit
|   |   `-IntegerLiteral 0x7fffd8475100 <col:18> 'int' 0
|   |-WhileStmt 0x7fffd8478340 <line:4721:4, line:4751:4>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd8475160 <line:4721:11> 'stbtt_int32':'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd8475138 <col:11> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd8474e90 'len2' 'stbtt_int32':'int'
|   | `-CompoundStmt 0x7fffd8478310 <col:17, line:4751:4>
|   |   |-DeclStmt 0x7fffd84753e0 <line:4722:7, col:42>
|   |   | `-VarDecl 0x7fffd8475188 <col:7, col:41> col:20 used ch 'stbtt_uint16':'unsigned short' cinit
|   |   |   `-ImplicitCastExpr 0x7fffd84753c8 <col:25, col:41> 'stbtt_uint16':'unsigned short' <IntegralCast>
|   |   |     `-BinaryOperator 0x7fffd84753a0 <col:25, col:41> 'int' '+'
|   |   |       |-BinaryOperator 0x7fffd84752c0 <col:25, col:31> 'int' '*'
|   |   |       | |-ImplicitCastExpr 0x7fffd84752a8 <col:25, col:29> 'int' <IntegralCast>
|   |   |       | | `-ImplicitCastExpr 0x7fffd8475290 <col:25, col:29> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   |   |       | |   `-ArraySubscriptExpr 0x7fffd8475248 <col:25, col:29> 'stbtt_uint8':'unsigned char' lvalue
|   |   |       | |     |-ImplicitCastExpr 0x7fffd8475230 <col:25> 'stbtt_uint8 *' <LValueToRValue>
|   |   |       | |     | `-DeclRefExpr 0x7fffd84751e8 <col:25> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8474e20 's2' 'stbtt_uint8 *'
|   |   |       | |     `-IntegerLiteral 0x7fffd8475210 <col:28> 'int' 0
|   |   |       | `-IntegerLiteral 0x7fffd8475270 <col:31> 'int' 256
|   |   |       `-ImplicitCastExpr 0x7fffd8475388 <col:37, col:41> 'int' <IntegralCast>
|   |   |         `-ImplicitCastExpr 0x7fffd8475370 <col:37, col:41> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   |   |           `-ArraySubscriptExpr 0x7fffd8475348 <col:37, col:41> 'stbtt_uint8':'unsigned char' lvalue
|   |   |             |-ImplicitCastExpr 0x7fffd8475330 <col:37> 'stbtt_uint8 *' <LValueToRValue>
|   |   |             | `-DeclRefExpr 0x7fffd84752e8 <col:37> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8474e20 's2' 'stbtt_uint8 *'
|   |   |             `-IntegerLiteral 0x7fffd8475310 <col:40> 'int' 1
|   |   |-IfStmt 0x7fffd84781d8 <line:4723:7, line:4748:7>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-BinaryOperator 0x7fffd8475470 <line:4723:11, col:16> 'int' '<'
|   |   | | |-ImplicitCastExpr 0x7fffd8475458 <col:11> 'int' <IntegralCast>
|   |   | | | `-ImplicitCastExpr 0x7fffd8475440 <col:11> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   | | |   `-DeclRefExpr 0x7fffd84753f8 <col:11> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8475188 'ch' 'stbtt_uint16':'unsigned short'
|   |   | | `-IntegerLiteral 0x7fffd8475420 <col:16> 'int' 128
|   |   | |-CompoundStmt 0x7fffd84757c0 <col:22, line:4726:7>
|   |   | | |-IfStmt 0x7fffd8475598 <line:4724:10, col:33>
|   |   | | | |-<<<NULL>>>
|   |   | | | |-<<<NULL>>>
|   |   | | | |-BinaryOperator 0x7fffd8475518 <col:14, col:19> 'int' '>='
|   |   | | | | |-ImplicitCastExpr 0x7fffd84754e8 <col:14> 'stbtt_int32':'int' <LValueToRValue>
|   |   | | | | | `-DeclRefExpr 0x7fffd8475498 <col:14> 'stbtt_int32':'int' lvalue Var 0x7fffd84750a0 'i' 'stbtt_int32':'int'
|   |   | | | | `-ImplicitCastExpr 0x7fffd8475500 <col:19> 'stbtt_int32':'int' <LValueToRValue>
|   |   | | | |   `-DeclRefExpr 0x7fffd84754c0 <col:19> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd8474db0 'len1' 'stbtt_int32':'int'
|   |   | | | |-ReturnStmt 0x7fffd8475580 <col:25, col:33>
|   |   | | | | `-UnaryOperator 0x7fffd8475560 <col:32, col:33> 'int' prefix '-'
|   |   | | | |   `-IntegerLiteral 0x7fffd8475540 <col:33> 'int' 1
|   |   | | | `-<<<NULL>>>
|   |   | | `-IfStmt 0x7fffd8475788 <line:4725:10, col:37>
|   |   | |   |-<<<NULL>>>
|   |   | |   |-<<<NULL>>>
|   |   | |   |-BinaryOperator 0x7fffd8475708 <col:14, col:25> 'int' '!='
|   |   | |   | |-ImplicitCastExpr 0x7fffd84756c0 <col:14, col:20> 'int' <IntegralCast>
|   |   | |   | | `-ImplicitCastExpr 0x7fffd84756a8 <col:14, col:20> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   |   | |   | |   `-ArraySubscriptExpr 0x7fffd8475658 <col:14, col:20> 'stbtt_uint8':'unsigned char' lvalue
|   |   | |   | |     |-ImplicitCastExpr 0x7fffd8475640 <col:14> 'stbtt_uint8 *' <LValueToRValue>
|   |   | |   | |     | `-DeclRefExpr 0x7fffd84755d0 <col:14> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8474d40 's1' 'stbtt_uint8 *'
|   |   | |   | |     `-UnaryOperator 0x7fffd8475620 <col:17, col:18> 'stbtt_int32':'int' postfix '++'
|   |   | |   | |       `-DeclRefExpr 0x7fffd84755f8 <col:17> 'stbtt_int32':'int' lvalue Var 0x7fffd84750a0 'i' 'stbtt_int32':'int'
|   |   | |   | `-ImplicitCastExpr 0x7fffd84756f0 <col:25> 'int' <IntegralCast>
|   |   | |   |   `-ImplicitCastExpr 0x7fffd84756d8 <col:25> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x7fffd8475680 <col:25> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8475188 'ch' 'stbtt_uint16':'unsigned short'
|   |   | |   |-ReturnStmt 0x7fffd8475770 <col:29, col:37>
|   |   | |   | `-UnaryOperator 0x7fffd8475750 <col:36, col:37> 'int' prefix '-'
|   |   | |   |   `-IntegerLiteral 0x7fffd8475730 <col:37> 'int' 1
|   |   | |   `-<<<NULL>>>
|   |   | `-IfStmt 0x7fffd84781a0 <line:4726:14, line:4748:7>
|   |   |   |-<<<NULL>>>
|   |   |   |-<<<NULL>>>
|   |   |   |-BinaryOperator 0x7fffd8475858 <line:4726:18, col:23> 'int' '<'
|   |   |   | |-ImplicitCastExpr 0x7fffd8475840 <col:18> 'int' <IntegralCast>
|   |   |   | | `-ImplicitCastExpr 0x7fffd8475828 <col:18> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |   | |   `-DeclRefExpr 0x7fffd84757e0 <col:18> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8475188 'ch' 'stbtt_uint16':'unsigned short'
|   |   |   | `-IntegerLiteral 0x7fffd8475808 <col:23> 'int' 2048
|   |   |   |-CompoundStmt 0x7fffd8475f40 <col:30, line:4730:7>
|   |   |   | |-IfStmt 0x7fffd84759c8 <line:4727:10, col:35>
|   |   |   | | |-<<<NULL>>>
|   |   |   | | |-<<<NULL>>>
|   |   |   | | |-BinaryOperator 0x7fffd8475948 <col:14, col:21> 'int' '>='
|   |   |   | | | |-BinaryOperator 0x7fffd84758e0 <col:14, col:16> 'int' '+'
|   |   |   | | | | |-ImplicitCastExpr 0x7fffd84758c8 <col:14> 'stbtt_int32':'int' <LValueToRValue>
|   |   |   | | | | | `-DeclRefExpr 0x7fffd8475880 <col:14> 'stbtt_int32':'int' lvalue Var 0x7fffd84750a0 'i' 'stbtt_int32':'int'
|   |   |   | | | | `-IntegerLiteral 0x7fffd84758a8 <col:16> 'int' 1
|   |   |   | | | `-ImplicitCastExpr 0x7fffd8475930 <col:21> 'stbtt_int32':'int' <LValueToRValue>
|   |   |   | | |   `-DeclRefExpr 0x7fffd8475908 <col:21> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd8474db0 'len1' 'stbtt_int32':'int'
|   |   |   | | |-ReturnStmt 0x7fffd84759b0 <col:27, col:35>
|   |   |   | | | `-UnaryOperator 0x7fffd8475990 <col:34, col:35> 'int' prefix '-'
|   |   |   | | |   `-IntegerLiteral 0x7fffd8475970 <col:35> 'int' 1
|   |   |   | | `-<<<NULL>>>
|   |   |   | |-IfStmt 0x7fffd8475c68 <line:4728:10, col:51>
|   |   |   | | |-<<<NULL>>>
|   |   |   | | |-<<<NULL>>>
|   |   |   | | |-BinaryOperator 0x7fffd8475be8 <col:14, col:40> 'int' '!='
|   |   |   | | | |-ImplicitCastExpr 0x7fffd8475bd0 <col:14, col:20> 'int' <IntegralCast>
|   |   |   | | | | `-ImplicitCastExpr 0x7fffd8475bb8 <col:14, col:20> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   |   |   | | | |   `-ArraySubscriptExpr 0x7fffd8475a88 <col:14, col:20> 'stbtt_uint8':'unsigned char' lvalue
|   |   |   | | | |     |-ImplicitCastExpr 0x7fffd8475a70 <col:14> 'stbtt_uint8 *' <LValueToRValue>
|   |   |   | | | |     | `-DeclRefExpr 0x7fffd8475a00 <col:14> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8474d40 's1' 'stbtt_uint8 *'
|   |   |   | | | |     `-UnaryOperator 0x7fffd8475a50 <col:17, col:18> 'stbtt_int32':'int' postfix '++'
|   |   |   | | | |       `-DeclRefExpr 0x7fffd8475a28 <col:17> 'stbtt_int32':'int' lvalue Var 0x7fffd84750a0 'i' 'stbtt_int32':'int'
|   |   |   | | | `-BinaryOperator 0x7fffd8475b90 <col:25, col:40> 'int' '+'
|   |   |   | | |   |-IntegerLiteral 0x7fffd8475ab0 <col:25> 'int' 192
|   |   |   | | |   `-ParenExpr 0x7fffd8475b70 <col:32, col:40> 'int'
|   |   |   | | |     `-BinaryOperator 0x7fffd8475b48 <col:33, col:39> 'int' '>>'
|   |   |   | | |       |-ImplicitCastExpr 0x7fffd8475b30 <col:33> 'int' <IntegralCast>
|   |   |   | | |       | `-ImplicitCastExpr 0x7fffd8475b18 <col:33> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |   | | |       |   `-DeclRefExpr 0x7fffd8475ad0 <col:33> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8475188 'ch' 'stbtt_uint16':'unsigned short'
|   |   |   | | |       `-IntegerLiteral 0x7fffd8475af8 <col:39> 'int' 6
|   |   |   | | |-ReturnStmt 0x7fffd8475c50 <col:43, col:51>
|   |   |   | | | `-UnaryOperator 0x7fffd8475c30 <col:50, col:51> 'int' prefix '-'
|   |   |   | | |   `-IntegerLiteral 0x7fffd8475c10 <col:51> 'int' 1
|   |   |   | | `-<<<NULL>>>
|   |   |   | `-IfStmt 0x7fffd8475f08 <line:4729:10, col:53>
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-<<<NULL>>>
|   |   |   |   |-BinaryOperator 0x7fffd8475e88 <col:14, col:42> 'int' '!='
|   |   |   |   | |-ImplicitCastExpr 0x7fffd8475e70 <col:14, col:20> 'int' <IntegralCast>
|   |   |   |   | | `-ImplicitCastExpr 0x7fffd8475e58 <col:14, col:20> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   |   |   |   | |   `-ArraySubscriptExpr 0x7fffd8475d28 <col:14, col:20> 'stbtt_uint8':'unsigned char' lvalue
|   |   |   |   | |     |-ImplicitCastExpr 0x7fffd8475d10 <col:14> 'stbtt_uint8 *' <LValueToRValue>
|   |   |   |   | |     | `-DeclRefExpr 0x7fffd8475ca0 <col:14> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8474d40 's1' 'stbtt_uint8 *'
|   |   |   |   | |     `-UnaryOperator 0x7fffd8475cf0 <col:17, col:18> 'stbtt_int32':'int' postfix '++'
|   |   |   |   | |       `-DeclRefExpr 0x7fffd8475cc8 <col:17> 'stbtt_int32':'int' lvalue Var 0x7fffd84750a0 'i' 'stbtt_int32':'int'
|   |   |   |   | `-BinaryOperator 0x7fffd8475e30 <col:25, col:42> 'int' '+'
|   |   |   |   |   |-IntegerLiteral 0x7fffd8475d50 <col:25> 'int' 128
|   |   |   |   |   `-ParenExpr 0x7fffd8475e10 <col:32, col:42> 'int'
|   |   |   |   |     `-BinaryOperator 0x7fffd8475de8 <col:33, col:38> 'int' '&'
|   |   |   |   |       |-ImplicitCastExpr 0x7fffd8475dd0 <col:33> 'int' <IntegralCast>
|   |   |   |   |       | `-ImplicitCastExpr 0x7fffd8475db8 <col:33> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |   |   |       |   `-DeclRefExpr 0x7fffd8475d70 <col:33> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8475188 'ch' 'stbtt_uint16':'unsigned short'
|   |   |   |   |       `-IntegerLiteral 0x7fffd8475d98 <col:38> 'int' 63
|   |   |   |   |-ReturnStmt 0x7fffd8475ef0 <col:45, col:53>
|   |   |   |   | `-UnaryOperator 0x7fffd8475ed0 <col:52, col:53> 'int' prefix '-'
|   |   |   |   |   `-IntegerLiteral 0x7fffd8475eb0 <col:53> 'int' 1
|   |   |   |   `-<<<NULL>>>
|   |   |   `-IfStmt 0x7fffd8478168 <line:4730:14, line:4748:7>
|   |   |     |-<<<NULL>>>
|   |   |     |-<<<NULL>>>
|   |   |     |-BinaryOperator 0x7fffd84760a8 <line:4730:18, col:39> 'int' '&&'
|   |   |     | |-BinaryOperator 0x7fffd8475fe0 <col:18, col:24> 'int' '>='
|   |   |     | | |-ImplicitCastExpr 0x7fffd8475fc8 <col:18> 'int' <IntegralCast>
|   |   |     | | | `-ImplicitCastExpr 0x7fffd8475fb0 <col:18> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |     | | |   `-DeclRefExpr 0x7fffd8475f68 <col:18> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8475188 'ch' 'stbtt_uint16':'unsigned short'
|   |   |     | | `-IntegerLiteral 0x7fffd8475f90 <col:24> 'int' 55296
|   |   |     | `-BinaryOperator 0x7fffd8476080 <col:34, col:39> 'int' '<'
|   |   |     |   |-ImplicitCastExpr 0x7fffd8476068 <col:34> 'int' <IntegralCast>
|   |   |     |   | `-ImplicitCastExpr 0x7fffd8476050 <col:34> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |     |   |   `-DeclRefExpr 0x7fffd8476008 <col:34> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8475188 'ch' 'stbtt_uint16':'unsigned short'
|   |   |     |   `-IntegerLiteral 0x7fffd8476030 <col:39> 'int' 56320
|   |   |     |-CompoundStmt 0x7fffd84774e0 <col:47, line:4741:7>
|   |   |     | |-DeclStmt 0x7fffd8476140 <line:4731:10, col:24>
|   |   |     | | `-VarDecl 0x7fffd84760e0 <col:10, col:23> col:23 used c 'stbtt_uint32':'unsigned int'
|   |   |     | |-DeclStmt 0x7fffd84763c0 <line:4732:10, col:46>
|   |   |     | | `-VarDecl 0x7fffd8476168 <col:10, col:45> col:23 used ch2 'stbtt_uint16':'unsigned short' cinit
|   |   |     | |   `-ImplicitCastExpr 0x7fffd84763a8 <col:29, col:45> 'stbtt_uint16':'unsigned short' <IntegralCast>
|   |   |     | |     `-BinaryOperator 0x7fffd8476380 <col:29, col:45> 'int' '+'
|   |   |     | |       |-BinaryOperator 0x7fffd84762a0 <col:29, col:35> 'int' '*'
|   |   |     | |       | |-ImplicitCastExpr 0x7fffd8476288 <col:29, col:33> 'int' <IntegralCast>
|   |   |     | |       | | `-ImplicitCastExpr 0x7fffd8476270 <col:29, col:33> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   |   |     | |       | |   `-ArraySubscriptExpr 0x7fffd8476228 <col:29, col:33> 'stbtt_uint8':'unsigned char' lvalue
|   |   |     | |       | |     |-ImplicitCastExpr 0x7fffd8476210 <col:29> 'stbtt_uint8 *' <LValueToRValue>
|   |   |     | |       | |     | `-DeclRefExpr 0x7fffd84761c8 <col:29> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8474e20 's2' 'stbtt_uint8 *'
|   |   |     | |       | |     `-IntegerLiteral 0x7fffd84761f0 <col:32> 'int' 2
|   |   |     | |       | `-IntegerLiteral 0x7fffd8476250 <col:35> 'int' 256
|   |   |     | |       `-ImplicitCastExpr 0x7fffd8476368 <col:41, col:45> 'int' <IntegralCast>
|   |   |     | |         `-ImplicitCastExpr 0x7fffd8476350 <col:41, col:45> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   |   |     | |           `-ArraySubscriptExpr 0x7fffd8476328 <col:41, col:45> 'stbtt_uint8':'unsigned char' lvalue
|   |   |     | |             |-ImplicitCastExpr 0x7fffd8476310 <col:41> 'stbtt_uint8 *' <LValueToRValue>
|   |   |     | |             | `-DeclRefExpr 0x7fffd84762c8 <col:41> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8474e20 's2' 'stbtt_uint8 *'
|   |   |     | |             `-IntegerLiteral 0x7fffd84762f0 <col:44> 'int' 3
|   |   |     | |-IfStmt 0x7fffd8476520 <line:4733:10, col:35>
|   |   |     | | |-<<<NULL>>>
|   |   |     | | |-<<<NULL>>>
|   |   |     | | |-BinaryOperator 0x7fffd84764a0 <col:14, col:21> 'int' '>='
|   |   |     | | | |-BinaryOperator 0x7fffd8476438 <col:14, col:16> 'int' '+'
|   |   |     | | | | |-ImplicitCastExpr 0x7fffd8476420 <col:14> 'stbtt_int32':'int' <LValueToRValue>
|   |   |     | | | | | `-DeclRefExpr 0x7fffd84763d8 <col:14> 'stbtt_int32':'int' lvalue Var 0x7fffd84750a0 'i' 'stbtt_int32':'int'
|   |   |     | | | | `-IntegerLiteral 0x7fffd8476400 <col:16> 'int' 3
|   |   |     | | | `-ImplicitCastExpr 0x7fffd8476488 <col:21> 'stbtt_int32':'int' <LValueToRValue>
|   |   |     | | |   `-DeclRefExpr 0x7fffd8476460 <col:21> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd8474db0 'len1' 'stbtt_int32':'int'
|   |   |     | | |-ReturnStmt 0x7fffd8476508 <col:27, col:35>
|   |   |     | | | `-UnaryOperator 0x7fffd84764e8 <col:34, col:35> 'int' prefix '-'
|   |   |     | | |   `-IntegerLiteral 0x7fffd84764c8 <col:35> 'int' 1
|   |   |     | | `-<<<NULL>>>
|   |   |     | |-BinaryOperator 0x7fffd84767f0 <line:4734:10, col:55> 'stbtt_uint32':'unsigned int' '='
|   |   |     | | |-DeclRefExpr 0x7fffd8476558 <col:10> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd84760e0 'c' 'stbtt_uint32':'unsigned int'
|   |   |     | | `-ImplicitCastExpr 0x7fffd84767d8 <col:14, col:55> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |   |     | |   `-BinaryOperator 0x7fffd84767b0 <col:14, col:55> 'int' '+'
|   |   |     | |     |-BinaryOperator 0x7fffd8476768 <col:14, col:51> 'int' '+'
|   |   |     | |     | |-ParenExpr 0x7fffd8476688 <col:14, col:34> 'int'
|   |   |     | |     | | `-BinaryOperator 0x7fffd8476660 <col:15, col:32> 'int' '<<'
|   |   |     | |     | |   |-ParenExpr 0x7fffd8476620 <col:15, col:27> 'int'
|   |   |     | |     | |   | `-BinaryOperator 0x7fffd84765f8 <col:16, col:21> 'int' '-'
|   |   |     | |     | |   |   |-ImplicitCastExpr 0x7fffd84765e0 <col:16> 'int' <IntegralCast>
|   |   |     | |     | |   |   | `-ImplicitCastExpr 0x7fffd84765c8 <col:16> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |     | |     | |   |   |   `-DeclRefExpr 0x7fffd8476580 <col:16> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8475188 'ch' 'stbtt_uint16':'unsigned short'
|   |   |     | |     | |   |   `-IntegerLiteral 0x7fffd84765a8 <col:21> 'int' 55296
|   |   |     | |     | |   `-IntegerLiteral 0x7fffd8476640 <col:32> 'int' 10
|   |   |     | |     | `-ParenExpr 0x7fffd8476748 <col:38, col:51> 'int'
|   |   |     | |     |   `-BinaryOperator 0x7fffd8476720 <col:39, col:45> 'int' '-'
|   |   |     | |     |     |-ImplicitCastExpr 0x7fffd8476708 <col:39> 'int' <IntegralCast>
|   |   |     | |     |     | `-ImplicitCastExpr 0x7fffd84766f0 <col:39> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |     | |     |     |   `-DeclRefExpr 0x7fffd84766a8 <col:39> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8476168 'ch2' 'stbtt_uint16':'unsigned short'
|   |   |     | |     |     `-IntegerLiteral 0x7fffd84766d0 <col:45> 'int' 56320
|   |   |     | |     `-IntegerLiteral 0x7fffd8476790 <col:55> 'int' 65536
|   |   |     | |-IfStmt 0x7fffd8476a90 <line:4735:10, col:51>
|   |   |     | | |-<<<NULL>>>
|   |   |     | | |-<<<NULL>>>
|   |   |     | | |-BinaryOperator 0x7fffd8476a10 <col:14, col:40> 'int' '!='
|   |   |     | | | |-ImplicitCastExpr 0x7fffd84769f8 <col:14, col:20> 'unsigned int' <IntegralCast>
|   |   |     | | | | `-ImplicitCastExpr 0x7fffd84769e0 <col:14, col:20> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   |   |     | | | |   `-ArraySubscriptExpr 0x7fffd84768a0 <col:14, col:20> 'stbtt_uint8':'unsigned char' lvalue
|   |   |     | | | |     |-ImplicitCastExpr 0x7fffd8476888 <col:14> 'stbtt_uint8 *' <LValueToRValue>
|   |   |     | | | |     | `-DeclRefExpr 0x7fffd8476818 <col:14> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8474d40 's1' 'stbtt_uint8 *'
|   |   |     | | | |     `-UnaryOperator 0x7fffd8476868 <col:17, col:18> 'stbtt_int32':'int' postfix '++'
|   |   |     | | | |       `-DeclRefExpr 0x7fffd8476840 <col:17> 'stbtt_int32':'int' lvalue Var 0x7fffd84750a0 'i' 'stbtt_int32':'int'
|   |   |     | | | `-BinaryOperator 0x7fffd84769b8 <col:25, col:40> 'unsigned int' '+'
|   |   |     | | |   |-ImplicitCastExpr 0x7fffd84769a0 <col:25> 'unsigned int' <IntegralCast>
|   |   |     | | |   | `-IntegerLiteral 0x7fffd84768c8 <col:25> 'int' 240
|   |   |     | | |   `-ParenExpr 0x7fffd8476980 <col:32, col:40> 'stbtt_uint32':'unsigned int'
|   |   |     | | |     `-BinaryOperator 0x7fffd8476958 <col:33, col:38> 'stbtt_uint32':'unsigned int' '>>'
|   |   |     | | |       |-ImplicitCastExpr 0x7fffd8476940 <col:33> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   |     | | |       | `-DeclRefExpr 0x7fffd84768e8 <col:33> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd84760e0 'c' 'stbtt_uint32':'unsigned int'
|   |   |     | | |       `-IntegerLiteral 0x7fffd8476920 <col:38> 'int' 18
|   |   |     | | |-ReturnStmt 0x7fffd8476a78 <col:43, col:51>
|   |   |     | | | `-UnaryOperator 0x7fffd8476a58 <col:50, col:51> 'int' prefix '-'
|   |   |     | | |   `-IntegerLiteral 0x7fffd8476a38 <col:51> 'int' 1
|   |   |     | | `-<<<NULL>>>
|   |   |     | |-IfStmt 0x7fffd8476db0 <line:4736:10, col:60>
|   |   |     | | |-<<<NULL>>>
|   |   |     | | |-<<<NULL>>>
|   |   |     | | |-BinaryOperator 0x7fffd8476d30 <col:14, col:49> 'int' '!='
|   |   |     | | | |-ImplicitCastExpr 0x7fffd8476d18 <col:14, col:20> 'unsigned int' <IntegralCast>
|   |   |     | | | | `-ImplicitCastExpr 0x7fffd8476d00 <col:14, col:20> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   |   |     | | | |   `-ArraySubscriptExpr 0x7fffd8476b50 <col:14, col:20> 'stbtt_uint8':'unsigned char' lvalue
|   |   |     | | | |     |-ImplicitCastExpr 0x7fffd8476b38 <col:14> 'stbtt_uint8 *' <LValueToRValue>
|   |   |     | | | |     | `-DeclRefExpr 0x7fffd8476ac8 <col:14> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8474d40 's1' 'stbtt_uint8 *'
|   |   |     | | | |     `-UnaryOperator 0x7fffd8476b18 <col:17, col:18> 'stbtt_int32':'int' postfix '++'
|   |   |     | | | |       `-DeclRefExpr 0x7fffd8476af0 <col:17> 'stbtt_int32':'int' lvalue Var 0x7fffd84750a0 'i' 'stbtt_int32':'int'
|   |   |     | | | `-BinaryOperator 0x7fffd8476cd8 <col:25, col:49> 'unsigned int' '+'
|   |   |     | | |   |-ImplicitCastExpr 0x7fffd8476cc0 <col:25> 'unsigned int' <IntegralCast>
|   |   |     | | |   | `-IntegerLiteral 0x7fffd8476b78 <col:25> 'int' 128
|   |   |     | | |   `-ParenExpr 0x7fffd8476ca0 <col:32, col:49> 'unsigned int'
|   |   |     | | |     `-BinaryOperator 0x7fffd8476c78 <col:33, col:45> 'unsigned int' '&'
|   |   |     | | |       |-ParenExpr 0x7fffd8476c20 <col:33, col:41> 'stbtt_uint32':'unsigned int'
|   |   |     | | |       | `-BinaryOperator 0x7fffd8476bf8 <col:34, col:39> 'stbtt_uint32':'unsigned int' '>>'
|   |   |     | | |       |   |-ImplicitCastExpr 0x7fffd8476be0 <col:34> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   |     | | |       |   | `-DeclRefExpr 0x7fffd8476b98 <col:34> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd84760e0 'c' 'stbtt_uint32':'unsigned int'
|   |   |     | | |       |   `-IntegerLiteral 0x7fffd8476bc0 <col:39> 'int' 12
|   |   |     | | |       `-ImplicitCastExpr 0x7fffd8476c60 <col:45> 'unsigned int' <IntegralCast>
|   |   |     | | |         `-IntegerLiteral 0x7fffd8476c40 <col:45> 'int' 63
|   |   |     | | |-ReturnStmt 0x7fffd8476d98 <col:52, col:60>
|   |   |     | | | `-UnaryOperator 0x7fffd8476d78 <col:59, col:60> 'int' prefix '-'
|   |   |     | | |   `-IntegerLiteral 0x7fffd8476d58 <col:60> 'int' 1
|   |   |     | | `-<<<NULL>>>
|   |   |     | |-IfStmt 0x7fffd84770d0 <line:4737:10, col:60>
|   |   |     | | |-<<<NULL>>>
|   |   |     | | |-<<<NULL>>>
|   |   |     | | |-BinaryOperator 0x7fffd8477050 <col:14, col:49> 'int' '!='
|   |   |     | | | |-ImplicitCastExpr 0x7fffd8477038 <col:14, col:20> 'unsigned int' <IntegralCast>
|   |   |     | | | | `-ImplicitCastExpr 0x7fffd8477020 <col:14, col:20> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   |   |     | | | |   `-ArraySubscriptExpr 0x7fffd8476e70 <col:14, col:20> 'stbtt_uint8':'unsigned char' lvalue
|   |   |     | | | |     |-ImplicitCastExpr 0x7fffd8476e58 <col:14> 'stbtt_uint8 *' <LValueToRValue>
|   |   |     | | | |     | `-DeclRefExpr 0x7fffd8476de8 <col:14> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8474d40 's1' 'stbtt_uint8 *'
|   |   |     | | | |     `-UnaryOperator 0x7fffd8476e38 <col:17, col:18> 'stbtt_int32':'int' postfix '++'
|   |   |     | | | |       `-DeclRefExpr 0x7fffd8476e10 <col:17> 'stbtt_int32':'int' lvalue Var 0x7fffd84750a0 'i' 'stbtt_int32':'int'
|   |   |     | | | `-BinaryOperator 0x7fffd8476ff8 <col:25, col:49> 'unsigned int' '+'
|   |   |     | | |   |-ImplicitCastExpr 0x7fffd8476fe0 <col:25> 'unsigned int' <IntegralCast>
|   |   |     | | |   | `-IntegerLiteral 0x7fffd8476e98 <col:25> 'int' 128
|   |   |     | | |   `-ParenExpr 0x7fffd8476fc0 <col:32, col:49> 'unsigned int'
|   |   |     | | |     `-BinaryOperator 0x7fffd8476f98 <col:33, col:45> 'unsigned int' '&'
|   |   |     | | |       |-ParenExpr 0x7fffd8476f40 <col:33, col:41> 'stbtt_uint32':'unsigned int'
|   |   |     | | |       | `-BinaryOperator 0x7fffd8476f18 <col:34, col:40> 'stbtt_uint32':'unsigned int' '>>'
|   |   |     | | |       |   |-ImplicitCastExpr 0x7fffd8476f00 <col:34> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   |     | | |       |   | `-DeclRefExpr 0x7fffd8476eb8 <col:34> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd84760e0 'c' 'stbtt_uint32':'unsigned int'
|   |   |     | | |       |   `-IntegerLiteral 0x7fffd8476ee0 <col:40> 'int' 6
|   |   |     | | |       `-ImplicitCastExpr 0x7fffd8476f80 <col:45> 'unsigned int' <IntegralCast>
|   |   |     | | |         `-IntegerLiteral 0x7fffd8476f60 <col:45> 'int' 63
|   |   |     | | |-ReturnStmt 0x7fffd84770b8 <col:52, col:60>
|   |   |     | | | `-UnaryOperator 0x7fffd8477098 <col:59, col:60> 'int' prefix '-'
|   |   |     | | |   `-IntegerLiteral 0x7fffd8477078 <col:60> 'int' 1
|   |   |     | | `-<<<NULL>>>
|   |   |     | |-IfStmt 0x7fffd84773a8 <line:4738:10, col:60>
|   |   |     | | |-<<<NULL>>>
|   |   |     | | |-<<<NULL>>>
|   |   |     | | |-BinaryOperator 0x7fffd8477328 <col:14, col:49> 'int' '!='
|   |   |     | | | |-ImplicitCastExpr 0x7fffd8477310 <col:14, col:20> 'unsigned int' <IntegralCast>
|   |   |     | | | | `-ImplicitCastExpr 0x7fffd84772f8 <col:14, col:20> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   |   |     | | | |   `-ArraySubscriptExpr 0x7fffd8477190 <col:14, col:20> 'stbtt_uint8':'unsigned char' lvalue
|   |   |     | | | |     |-ImplicitCastExpr 0x7fffd8477178 <col:14> 'stbtt_uint8 *' <LValueToRValue>
|   |   |     | | | |     | `-DeclRefExpr 0x7fffd8477108 <col:14> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8474d40 's1' 'stbtt_uint8 *'
|   |   |     | | | |     `-UnaryOperator 0x7fffd8477158 <col:17, col:18> 'stbtt_int32':'int' postfix '++'
|   |   |     | | | |       `-DeclRefExpr 0x7fffd8477130 <col:17> 'stbtt_int32':'int' lvalue Var 0x7fffd84750a0 'i' 'stbtt_int32':'int'
|   |   |     | | | `-BinaryOperator 0x7fffd84772d0 <col:25, col:49> 'unsigned int' '+'
|   |   |     | | |   |-ImplicitCastExpr 0x7fffd84772b8 <col:25> 'unsigned int' <IntegralCast>
|   |   |     | | |   | `-IntegerLiteral 0x7fffd84771b8 <col:25> 'int' 128
|   |   |     | | |   `-ParenExpr 0x7fffd8477298 <col:32, col:49> 'unsigned int'
|   |   |     | | |     `-BinaryOperator 0x7fffd8477270 <col:33, col:45> 'unsigned int' '&'
|   |   |     | | |       |-ImplicitCastExpr 0x7fffd8477240 <col:33, col:41> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   |     | | |       | `-ParenExpr 0x7fffd8477200 <col:33, col:41> 'stbtt_uint32':'unsigned int' lvalue
|   |   |     | | |       |   `-DeclRefExpr 0x7fffd84771d8 <col:34> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd84760e0 'c' 'stbtt_uint32':'unsigned int'
|   |   |     | | |       `-ImplicitCastExpr 0x7fffd8477258 <col:45> 'unsigned int' <IntegralCast>
|   |   |     | | |         `-IntegerLiteral 0x7fffd8477220 <col:45> 'int' 63
|   |   |     | | |-ReturnStmt 0x7fffd8477390 <col:52, col:60>
|   |   |     | | | `-UnaryOperator 0x7fffd8477370 <col:59, col:60> 'int' prefix '-'
|   |   |     | | |   `-IntegerLiteral 0x7fffd8477350 <col:60> 'int' 1
|   |   |     | | `-<<<NULL>>>
|   |   |     | |-CompoundAssignOperator 0x7fffd8477428 <line:4739:10, col:16> 'stbtt_uint8 *' '+=' ComputeLHSTy='stbtt_uint8 *' ComputeResultTy='stbtt_uint8 *'
|   |   |     | | |-DeclRefExpr 0x7fffd84773e0 <col:10> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8474e20 's2' 'stbtt_uint8 *'
|   |   |     | | `-IntegerLiteral 0x7fffd8477408 <col:16> 'int' 2
|   |   |     | `-CompoundAssignOperator 0x7fffd84774a8 <line:4740:10, col:18> 'stbtt_int32':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   |   |     |   |-DeclRefExpr 0x7fffd8477460 <col:10> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd8474e90 'len2' 'stbtt_int32':'int'
|   |   |     |   `-IntegerLiteral 0x7fffd8477488 <col:18> 'int' 2
|   |   |     `-IfStmt 0x7fffd8478130 <line:4741:14, line:4748:7>
|   |   |       |-<<<NULL>>>
|   |   |       |-<<<NULL>>>
|   |   |       |-BinaryOperator 0x7fffd8477680 <line:4741:18, col:39> 'int' '&&'
|   |   |       | |-BinaryOperator 0x7fffd84775b8 <col:18, col:24> 'int' '>='
|   |   |       | | |-ImplicitCastExpr 0x7fffd84775a0 <col:18> 'int' <IntegralCast>
|   |   |       | | | `-ImplicitCastExpr 0x7fffd8477588 <col:18> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |       | | |   `-DeclRefExpr 0x7fffd8477540 <col:18> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8475188 'ch' 'stbtt_uint16':'unsigned short'
|   |   |       | | `-IntegerLiteral 0x7fffd8477568 <col:24> 'int' 56320
|   |   |       | `-BinaryOperator 0x7fffd8477658 <col:34, col:39> 'int' '<'
|   |   |       |   |-ImplicitCastExpr 0x7fffd8477640 <col:34> 'int' <IntegralCast>
|   |   |       |   | `-ImplicitCastExpr 0x7fffd8477628 <col:34> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |       |   |   `-DeclRefExpr 0x7fffd84775e0 <col:34> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8475188 'ch' 'stbtt_uint16':'unsigned short'
|   |   |       |   `-IntegerLiteral 0x7fffd8477608 <col:39> 'int' 57344
|   |   |       |-CompoundStmt 0x7fffd8477700 <col:47, line:4743:7>
|   |   |       | `-ReturnStmt 0x7fffd84776e8 <line:4742:10, col:18>
|   |   |       |   `-UnaryOperator 0x7fffd84776c8 <col:17, col:18> 'int' prefix '-'
|   |   |       |     `-IntegerLiteral 0x7fffd84776a8 <col:18> 'int' 1
|   |   |       `-CompoundStmt 0x7fffd8478100 <line:4743:14, line:4748:7>
|   |   |         |-IfStmt 0x7fffd8477860 <line:4744:10, col:35>
|   |   |         | |-<<<NULL>>>
|   |   |         | |-<<<NULL>>>
|   |   |         | |-BinaryOperator 0x7fffd84777e0 <col:14, col:21> 'int' '>='
|   |   |         | | |-BinaryOperator 0x7fffd8477778 <col:14, col:16> 'int' '+'
|   |   |         | | | |-ImplicitCastExpr 0x7fffd8477760 <col:14> 'stbtt_int32':'int' <LValueToRValue>
|   |   |         | | | | `-DeclRefExpr 0x7fffd8477718 <col:14> 'stbtt_int32':'int' lvalue Var 0x7fffd84750a0 'i' 'stbtt_int32':'int'
|   |   |         | | | `-IntegerLiteral 0x7fffd8477740 <col:16> 'int' 2
|   |   |         | | `-ImplicitCastExpr 0x7fffd84777c8 <col:21> 'stbtt_int32':'int' <LValueToRValue>
|   |   |         | |   `-DeclRefExpr 0x7fffd84777a0 <col:21> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd8474db0 'len1' 'stbtt_int32':'int'
|   |   |         | |-ReturnStmt 0x7fffd8477848 <col:27, col:35>
|   |   |         | | `-UnaryOperator 0x7fffd8477828 <col:34, col:35> 'int' prefix '-'
|   |   |         | |   `-IntegerLiteral 0x7fffd8477808 <col:35> 'int' 1
|   |   |         | `-<<<NULL>>>
|   |   |         |-IfStmt 0x7fffd8477b00 <line:4745:10, col:52>
|   |   |         | |-<<<NULL>>>
|   |   |         | |-<<<NULL>>>
|   |   |         | |-BinaryOperator 0x7fffd8477a80 <col:14, col:41> 'int' '!='
|   |   |         | | |-ImplicitCastExpr 0x7fffd8477a68 <col:14, col:20> 'int' <IntegralCast>
|   |   |         | | | `-ImplicitCastExpr 0x7fffd8477a50 <col:14, col:20> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   |   |         | | |   `-ArraySubscriptExpr 0x7fffd8477920 <col:14, col:20> 'stbtt_uint8':'unsigned char' lvalue
|   |   |         | | |     |-ImplicitCastExpr 0x7fffd8477908 <col:14> 'stbtt_uint8 *' <LValueToRValue>
|   |   |         | | |     | `-DeclRefExpr 0x7fffd8477898 <col:14> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8474d40 's1' 'stbtt_uint8 *'
|   |   |         | | |     `-UnaryOperator 0x7fffd84778e8 <col:17, col:18> 'stbtt_int32':'int' postfix '++'
|   |   |         | | |       `-DeclRefExpr 0x7fffd84778c0 <col:17> 'stbtt_int32':'int' lvalue Var 0x7fffd84750a0 'i' 'stbtt_int32':'int'
|   |   |         | | `-BinaryOperator 0x7fffd8477a28 <col:25, col:41> 'int' '+'
|   |   |         | |   |-IntegerLiteral 0x7fffd8477948 <col:25> 'int' 224
|   |   |         | |   `-ParenExpr 0x7fffd8477a08 <col:32, col:41> 'int'
|   |   |         | |     `-BinaryOperator 0x7fffd84779e0 <col:33, col:39> 'int' '>>'
|   |   |         | |       |-ImplicitCastExpr 0x7fffd84779c8 <col:33> 'int' <IntegralCast>
|   |   |         | |       | `-ImplicitCastExpr 0x7fffd84779b0 <col:33> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |         | |       |   `-DeclRefExpr 0x7fffd8477968 <col:33> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8475188 'ch' 'stbtt_uint16':'unsigned short'
|   |   |         | |       `-IntegerLiteral 0x7fffd8477990 <col:39> 'int' 12
|   |   |         | |-ReturnStmt 0x7fffd8477ae8 <col:44, col:52>
|   |   |         | | `-UnaryOperator 0x7fffd8477ac8 <col:51, col:52> 'int' prefix '-'
|   |   |         | |   `-IntegerLiteral 0x7fffd8477aa8 <col:52> 'int' 1
|   |   |         | `-<<<NULL>>>
|   |   |         |-IfStmt 0x7fffd8477e08 <line:4746:10, col:60>
|   |   |         | |-<<<NULL>>>
|   |   |         | |-<<<NULL>>>
|   |   |         | |-BinaryOperator 0x7fffd8477d88 <col:14, col:49> 'int' '!='
|   |   |         | | |-ImplicitCastExpr 0x7fffd8477d70 <col:14, col:20> 'int' <IntegralCast>
|   |   |         | | | `-ImplicitCastExpr 0x7fffd8477d58 <col:14, col:20> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   |   |         | | |   `-ArraySubscriptExpr 0x7fffd8477bc0 <col:14, col:20> 'stbtt_uint8':'unsigned char' lvalue
|   |   |         | | |     |-ImplicitCastExpr 0x7fffd8477ba8 <col:14> 'stbtt_uint8 *' <LValueToRValue>
|   |   |         | | |     | `-DeclRefExpr 0x7fffd8477b38 <col:14> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8474d40 's1' 'stbtt_uint8 *'
|   |   |         | | |     `-UnaryOperator 0x7fffd8477b88 <col:17, col:18> 'stbtt_int32':'int' postfix '++'
|   |   |         | | |       `-DeclRefExpr 0x7fffd8477b60 <col:17> 'stbtt_int32':'int' lvalue Var 0x7fffd84750a0 'i' 'stbtt_int32':'int'
|   |   |         | | `-BinaryOperator 0x7fffd8477d30 <col:25, col:49> 'int' '+'
|   |   |         | |   |-IntegerLiteral 0x7fffd8477be8 <col:25> 'int' 128
|   |   |         | |   `-ParenExpr 0x7fffd8477d10 <col:32, col:49> 'int'
|   |   |         | |     `-BinaryOperator 0x7fffd8477ce8 <col:33, col:45> 'int' '&'
|   |   |         | |       |-ParenExpr 0x7fffd8477ca8 <col:33, col:41> 'int'
|   |   |         | |       | `-BinaryOperator 0x7fffd8477c80 <col:34, col:40> 'int' '>>'
|   |   |         | |       |   |-ImplicitCastExpr 0x7fffd8477c68 <col:34> 'int' <IntegralCast>
|   |   |         | |       |   | `-ImplicitCastExpr 0x7fffd8477c50 <col:34> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |         | |       |   |   `-DeclRefExpr 0x7fffd8477c08 <col:34> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8475188 'ch' 'stbtt_uint16':'unsigned short'
|   |   |         | |       |   `-IntegerLiteral 0x7fffd8477c30 <col:40> 'int' 6
|   |   |         | |       `-IntegerLiteral 0x7fffd8477cc8 <col:45> 'int' 63
|   |   |         | |-ReturnStmt 0x7fffd8477df0 <col:52, col:60>
|   |   |         | | `-UnaryOperator 0x7fffd8477dd0 <col:59, col:60> 'int' prefix '-'
|   |   |         | |   `-IntegerLiteral 0x7fffd8477db0 <col:60> 'int' 1
|   |   |         | `-<<<NULL>>>
|   |   |         `-IfStmt 0x7fffd84780c8 <line:4747:10, col:60>
|   |   |           |-<<<NULL>>>
|   |   |           |-<<<NULL>>>
|   |   |           |-BinaryOperator 0x7fffd8478048 <col:14, col:49> 'int' '!='
|   |   |           | |-ImplicitCastExpr 0x7fffd8478030 <col:14, col:20> 'int' <IntegralCast>
|   |   |           | | `-ImplicitCastExpr 0x7fffd8478018 <col:14, col:20> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   |   |           | |   `-ArraySubscriptExpr 0x7fffd8477ec8 <col:14, col:20> 'stbtt_uint8':'unsigned char' lvalue
|   |   |           | |     |-ImplicitCastExpr 0x7fffd8477eb0 <col:14> 'stbtt_uint8 *' <LValueToRValue>
|   |   |           | |     | `-DeclRefExpr 0x7fffd8477e40 <col:14> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8474d40 's1' 'stbtt_uint8 *'
|   |   |           | |     `-UnaryOperator 0x7fffd8477e90 <col:17, col:18> 'stbtt_int32':'int' postfix '++'
|   |   |           | |       `-DeclRefExpr 0x7fffd8477e68 <col:17> 'stbtt_int32':'int' lvalue Var 0x7fffd84750a0 'i' 'stbtt_int32':'int'
|   |   |           | `-BinaryOperator 0x7fffd8477ff0 <col:25, col:49> 'int' '+'
|   |   |           |   |-IntegerLiteral 0x7fffd8477ef0 <col:25> 'int' 128
|   |   |           |   `-ParenExpr 0x7fffd8477fd0 <col:32, col:49> 'int'
|   |   |           |     `-BinaryOperator 0x7fffd8477fa8 <col:33, col:45> 'int' '&'
|   |   |           |       |-ImplicitCastExpr 0x7fffd8477f90 <col:33, col:41> 'int' <IntegralCast>
|   |   |           |       | `-ImplicitCastExpr 0x7fffd8477f78 <col:33, col:41> 'stbtt_uint16':'unsigned short' <LValueToRValue>
|   |   |           |       |   `-ParenExpr 0x7fffd8477f38 <col:33, col:41> 'stbtt_uint16':'unsigned short' lvalue
|   |   |           |       |     `-DeclRefExpr 0x7fffd8477f10 <col:34> 'stbtt_uint16':'unsigned short' lvalue Var 0x7fffd8475188 'ch' 'stbtt_uint16':'unsigned short'
|   |   |           |       `-IntegerLiteral 0x7fffd8477f58 <col:45> 'int' 63
|   |   |           |-ReturnStmt 0x7fffd84780b0 <col:52, col:60>
|   |   |           | `-UnaryOperator 0x7fffd8478090 <col:59, col:60> 'int' prefix '-'
|   |   |           |   `-IntegerLiteral 0x7fffd8478070 <col:60> 'int' 1
|   |   |           `-<<<NULL>>>
|   |   |-CompoundAssignOperator 0x7fffd8478258 <line:4749:7, col:13> 'stbtt_uint8 *' '+=' ComputeLHSTy='stbtt_uint8 *' ComputeResultTy='stbtt_uint8 *'
|   |   | |-DeclRefExpr 0x7fffd8478210 <col:7> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd8474e20 's2' 'stbtt_uint8 *'
|   |   | `-IntegerLiteral 0x7fffd8478238 <col:13> 'int' 2
|   |   `-CompoundAssignOperator 0x7fffd84782d8 <line:4750:7, col:15> 'stbtt_int32':'int' '-=' ComputeLHSTy='int' ComputeResultTy='int'
|   |     |-DeclRefExpr 0x7fffd8478290 <col:7> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd8474e90 'len2' 'stbtt_int32':'int'
|   |     `-IntegerLiteral 0x7fffd84782b8 <col:15> 'int' 2
|   `-ReturnStmt 0x7fffd84783a0 <line:4752:4, col:11>
|     `-ImplicitCastExpr 0x7fffd8478388 <col:11> 'stbtt_int32':'int' <LValueToRValue>
|       `-DeclRefExpr 0x7fffd8478360 <col:11> 'stbtt_int32':'int' lvalue Var 0x7fffd84750a0 'i' 'stbtt_int32':'int'
|-FunctionDecl 0x7fffd8478658 <line:4755:1, line:4758:1> line:4755:12 used stbtt_CompareUTF8toUTF16_bigendian_internal 'int (char *, int, char *, int)' static
| |-ParmVarDecl 0x7fffd84783f8 <col:56, col:62> col:62 used s1 'char *'
| |-ParmVarDecl 0x7fffd8478470 <col:66, col:70> col:70 used len1 'int'
| |-ParmVarDecl 0x7fffd84784e8 <col:76, col:82> col:82 used s2 'char *'
| |-ParmVarDecl 0x7fffd8478560 <col:86, col:90> col:90 used len2 'int'
| `-CompoundStmt 0x7fffd84789f0 <line:4756:1, line:4758:1>
|   `-ReturnStmt 0x7fffd84789d8 <line:4757:4, col:110>
|     `-BinaryOperator 0x7fffd84789b0 <col:11, col:110> 'int' '=='
|       |-ImplicitCastExpr 0x7fffd8478998 <col:11> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd8478718 <col:11> 'int' lvalue ParmVar 0x7fffd8478470 'len1' 'int'
|       `-CallExpr 0x7fffd8478920 <col:19, col:110> 'stbtt_int32':'int'
|         |-ImplicitCastExpr 0x7fffd8478908 <col:19> 'stbtt_int32 (*)(stbtt_uint8 *, stbtt_int32, stbtt_uint8 *, stbtt_int32)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x7fffd8478740 <col:19> 'stbtt_int32 (stbtt_uint8 *, stbtt_int32, stbtt_uint8 *, stbtt_int32)' Function 0x7fffd8474fd0 'stbtt__CompareUTF8toUTF16_bigendian_prefix' 'stbtt_int32 (stbtt_uint8 *, stbtt_int32, stbtt_uint8 *, stbtt_int32)'
|         |-CStyleCastExpr 0x7fffd84787b8 <col:62, col:77> 'stbtt_uint8 *' <BitCast>
|         | `-ImplicitCastExpr 0x7fffd84787a0 <col:77> 'char *' <LValueToRValue>
|         |   `-DeclRefExpr 0x7fffd8478768 <col:77> 'char *' lvalue ParmVar 0x7fffd84783f8 's1' 'char *'
|         |-ImplicitCastExpr 0x7fffd8478968 <col:81> 'int' <LValueToRValue>
|         | `-DeclRefExpr 0x7fffd84787e0 <col:81> 'int' lvalue ParmVar 0x7fffd8478470 'len1' 'int'
|         |-CStyleCastExpr 0x7fffd8478858 <col:87, col:102> 'stbtt_uint8 *' <BitCast>
|         | `-ImplicitCastExpr 0x7fffd8478840 <col:102> 'char *' <LValueToRValue>
|         |   `-DeclRefExpr 0x7fffd8478808 <col:102> 'char *' lvalue ParmVar 0x7fffd84784e8 's2' 'char *'
|         `-ImplicitCastExpr 0x7fffd8478980 <col:106> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x7fffd8478880 <col:106> 'int' lvalue ParmVar 0x7fffd8478560 'len2' 'int'
|-FunctionDecl 0x7fffd8478d28 prev 0x7fffd835bd98 <line:501:19, line:4781:1> line:4762:23 stbtt_GetFontNameString 'const char *(const stbtt_fontinfo *, int *, int, int, int, int)' extern
| |-ParmVarDecl 0x7fffd8478a18 <col:47, col:69> col:69 used font 'const stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8478a90 <col:75, col:80> col:80 used length 'int *'
| |-ParmVarDecl 0x7fffd8478b08 <col:88, col:92> col:92 used platformID 'int'
| |-ParmVarDecl 0x7fffd8478b80 <col:104, col:108> col:108 used encodingID 'int'
| |-ParmVarDecl 0x7fffd8478bf8 <col:120, col:124> col:124 used languageID 'int'
| |-ParmVarDecl 0x7fffd8478c70 <col:136, col:140> col:140 used nameID 'int'
| `-CompoundStmt 0x7fffd847aad0 <line:4763:1, line:4781:1>
|   |-DeclStmt 0x7fffd8478f68 <line:4764:4, col:36>
|   | |-VarDecl 0x7fffd8478e08 <col:4, col:16> col:16 used i 'stbtt_int32':'int'
|   | |-VarDecl 0x7fffd8478e78 <col:4, col:18> col:18 used count 'stbtt_int32':'int'
|   | `-VarDecl 0x7fffd8478ee8 <col:4, col:24> col:24 used stringOffset 'stbtt_int32':'int'
|   |-DeclStmt 0x7fffd8479080 <line:4765:4, col:32>
|   | `-VarDecl 0x7fffd8478f90 <col:4, col:28> col:17 used fc 'stbtt_uint8 *' cinit
|   |   `-ImplicitCastExpr 0x7fffd8479068 <col:22, col:28> 'unsigned char *' <LValueToRValue>
|   |     `-MemberExpr 0x7fffd8479030 <col:22, col:28> 'unsigned char *const' lvalue ->data 0x7fffd834cbd8
|   |       `-ImplicitCastExpr 0x7fffd8479018 <col:22> 'const stbtt_fontinfo *' <LValueToRValue>
|   |         `-DeclRefExpr 0x7fffd8478ff0 <col:22> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd8478a18 'font' 'const stbtt_fontinfo *'
|   |-DeclStmt 0x7fffd84791b0 <line:4766:4, col:41>
|   | `-VarDecl 0x7fffd84790a8 <col:4, col:32> col:17 used offset 'stbtt_uint32':'unsigned int' cinit
|   |   `-ImplicitCastExpr 0x7fffd8479198 <col:26, col:32> 'stbtt_uint32':'unsigned int' <IntegralCast>
|   |     `-ImplicitCastExpr 0x7fffd8479180 <col:26, col:32> 'int' <LValueToRValue>
|   |       `-MemberExpr 0x7fffd8479148 <col:26, col:32> 'const int' lvalue ->fontstart 0x7fffd834cc38
|   |         `-ImplicitCastExpr 0x7fffd8479130 <col:26> 'const stbtt_fontinfo *' <LValueToRValue>
|   |           `-DeclRefExpr 0x7fffd8479108 <col:26> 'const stbtt_fontinfo *' lvalue ParmVar 0x7fffd8478a18 'font' 'const stbtt_fontinfo *'
|   |-DeclStmt 0x7fffd8479398 <line:4767:4, col:59>
|   | `-VarDecl 0x7fffd84791d8 <col:4, col:58> col:17 used nm 'stbtt_uint32':'unsigned int' cinit
|   |   `-CallExpr 0x7fffd84792f8 <col:22, col:58> 'stbtt_uint32':'unsigned int'
|   |     |-ImplicitCastExpr 0x7fffd84792e0 <col:22> 'stbtt_uint32 (*)(stbtt_uint8 *, stbtt_uint32, const char *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd8479238 <col:22> 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)' Function 0x7fffd83758f0 'stbtt__find_table' 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)'
|   |     |-ImplicitCastExpr 0x7fffd8479338 <col:40> 'stbtt_uint8 *' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd8479260 <col:40> 'stbtt_uint8 *' lvalue Var 0x7fffd8478f90 'fc' 'stbtt_uint8 *'
|   |     |-ImplicitCastExpr 0x7fffd8479350 <col:44> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd8479288 <col:44> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd84790a8 'offset' 'stbtt_uint32':'unsigned int'
|   |     `-ImplicitCastExpr 0x7fffd8479380 <col:52> 'const char *' <BitCast>
|   |       `-ImplicitCastExpr 0x7fffd8479368 <col:52> 'char *' <ArrayToPointerDecay>
|   |         `-StringLiteral 0x7fffd84792b0 <col:52> 'char [5]' lvalue "name"
|   |-IfStmt 0x7fffd84794c0 <line:4768:4, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-UnaryOperator 0x7fffd84793f0 <././stb/stb_truetype.h:4768:8, col:9> 'int' prefix '!'
|   | | `-ImplicitCastExpr 0x7fffd84793d8 <col:9> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd84793b0 <col:9> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd84791d8 'nm' 'stbtt_uint32':'unsigned int'
|   | |-ReturnStmt 0x7fffd84794a8 <col:13, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25>
|   | | `-ImplicitCastExpr 0x7fffd8479490 <col:16, col:25> 'const char *' <NullToPointer>
|   | |   `-ParenExpr 0x7fffd8479470 <col:16, col:25> 'void *'
|   | |     `-CStyleCastExpr 0x7fffd8479448 <col:17, col:24> 'void *' <NullToPointer>
|   | |       `-IntegerLiteral 0x7fffd8479410 <col:24> 'int' 0
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x7fffd8479698 <././stb/stb_truetype.h:4770:4, col:28> 'stbtt_int32':'int' '='
|   | |-DeclRefExpr 0x7fffd84794f8 <col:4> 'stbtt_int32':'int' lvalue Var 0x7fffd8478e78 'count' 'stbtt_int32':'int'
|   | `-ImplicitCastExpr 0x7fffd8479680 <col:12, col:28> 'stbtt_int32':'int' <IntegralCast>
|   |   `-CallExpr 0x7fffd8479650 <col:12, col:28> 'stbtt_uint16':'unsigned short'
|   |     |-ImplicitCastExpr 0x7fffd8479638 <col:12> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x7fffd8479520 <col:12> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     `-BinaryOperator 0x7fffd8479610 <col:21, col:27> 'stbtt_uint8 *' '+'
|   |       |-BinaryOperator 0x7fffd84795c8 <col:21, col:24> 'stbtt_uint8 *' '+'
|   |       | |-ImplicitCastExpr 0x7fffd8479598 <col:21> 'stbtt_uint8 *' <LValueToRValue>
|   |       | | `-DeclRefExpr 0x7fffd8479548 <col:21> 'stbtt_uint8 *' lvalue Var 0x7fffd8478f90 'fc' 'stbtt_uint8 *'
|   |       | `-ImplicitCastExpr 0x7fffd84795b0 <col:24> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       |   `-DeclRefExpr 0x7fffd8479570 <col:24> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd84791d8 'nm' 'stbtt_uint32':'unsigned int'
|   |       `-IntegerLiteral 0x7fffd84795f0 <col:27> 'int' 2
|   |-BinaryOperator 0x7fffd84798e0 <line:4771:4, col:40> 'stbtt_int32':'int' '='
|   | |-DeclRefExpr 0x7fffd84796c0 <col:4> 'stbtt_int32':'int' lvalue Var 0x7fffd8478ee8 'stringOffset' 'stbtt_int32':'int'
|   | `-ImplicitCastExpr 0x7fffd84798c8 <col:19, col:40> 'stbtt_int32':'int' <IntegralCast>
|   |   `-BinaryOperator 0x7fffd84798a0 <col:19, col:40> 'unsigned int' '+'
|   |     |-ImplicitCastExpr 0x7fffd8479870 <col:19> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x7fffd84796e8 <col:19> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd84791d8 'nm' 'stbtt_uint32':'unsigned int'
|   |     `-ImplicitCastExpr 0x7fffd8479888 <col:24, col:40> 'unsigned int' <IntegralCast>
|   |       `-CallExpr 0x7fffd8479840 <col:24, col:40> 'stbtt_uint16':'unsigned short'
|   |         |-ImplicitCastExpr 0x7fffd8479828 <col:24> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x7fffd8479710 <col:24> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |         `-BinaryOperator 0x7fffd8479800 <col:33, col:39> 'stbtt_uint8 *' '+'
|   |           |-BinaryOperator 0x7fffd84797b8 <col:33, col:36> 'stbtt_uint8 *' '+'
|   |           | |-ImplicitCastExpr 0x7fffd8479788 <col:33> 'stbtt_uint8 *' <LValueToRValue>
|   |           | | `-DeclRefExpr 0x7fffd8479738 <col:33> 'stbtt_uint8 *' lvalue Var 0x7fffd8478f90 'fc' 'stbtt_uint8 *'
|   |           | `-ImplicitCastExpr 0x7fffd84797a0 <col:36> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |           |   `-DeclRefExpr 0x7fffd8479760 <col:36> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd84791d8 'nm' 'stbtt_uint32':'unsigned int'
|   |           `-IntegerLiteral 0x7fffd84797e0 <col:39> 'int' 4
|   |-ForStmt 0x7fffd847a9e8 <line:4772:4, line:4779:4>
|   | |-BinaryOperator 0x7fffd8479950 <line:4772:9, col:11> 'stbtt_int32':'int' '='
|   | | |-DeclRefExpr 0x7fffd8479908 <col:9> 'stbtt_int32':'int' lvalue Var 0x7fffd8478e08 'i' 'stbtt_int32':'int'
|   | | `-IntegerLiteral 0x7fffd8479930 <col:11> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd84799f8 <col:14, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd84799c8 <col:14> 'stbtt_int32':'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd8479978 <col:14> 'stbtt_int32':'int' lvalue Var 0x7fffd8478e08 'i' 'stbtt_int32':'int'
|   | | `-ImplicitCastExpr 0x7fffd84799e0 <col:18> 'stbtt_int32':'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd84799a0 <col:18> 'stbtt_int32':'int' lvalue Var 0x7fffd8478e78 'count' 'stbtt_int32':'int'
|   | |-UnaryOperator 0x7fffd8479a48 <col:25, col:27> 'stbtt_int32':'int' prefix '++'
|   | | `-DeclRefExpr 0x7fffd8479a20 <col:27> 'stbtt_int32':'int' lvalue Var 0x7fffd8478e08 'i' 'stbtt_int32':'int'
|   | `-CompoundStmt 0x7fffd847a9c8 <col:30, line:4779:4>
|   |   |-DeclStmt 0x7fffd8479c40 <line:4773:7, col:41>
|   |   | `-VarDecl 0x7fffd8479a78 <col:7, col:40> col:20 used loc 'stbtt_uint32':'unsigned int' cinit
|   |   |   `-BinaryOperator 0x7fffd8479c18 <col:26, col:40> 'unsigned int' '+'
|   |   |     |-BinaryOperator 0x7fffd8479b50 <col:26, col:31> 'unsigned int' '+'
|   |   |     | |-ImplicitCastExpr 0x7fffd8479b20 <col:26> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x7fffd8479ad8 <col:26> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd84791d8 'nm' 'stbtt_uint32':'unsigned int'
|   |   |     | `-ImplicitCastExpr 0x7fffd8479b38 <col:31> 'unsigned int' <IntegralCast>
|   |   |     |   `-IntegerLiteral 0x7fffd8479b00 <col:31> 'int' 6
|   |   |     `-ImplicitCastExpr 0x7fffd8479c00 <col:35, col:40> 'unsigned int' <IntegralCast>
|   |   |       `-BinaryOperator 0x7fffd8479bd8 <col:35, col:40> 'int' '*'
|   |   |         |-IntegerLiteral 0x7fffd8479b78 <col:35> 'int' 12
|   |   |         `-ImplicitCastExpr 0x7fffd8479bc0 <col:40> 'stbtt_int32':'int' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x7fffd8479b98 <col:40> 'stbtt_int32':'int' lvalue Var 0x7fffd8478e08 'i' 'stbtt_int32':'int'
|   |   `-IfStmt 0x7fffd847a990 <line:4774:7, line:4778:7>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x7fffd847a428 <line:4774:11, line:4775:77> 'int' '&&'
|   |     | |-BinaryOperator 0x7fffd847a220 <line:4774:11, line:4775:45> 'int' '&&'
|   |     | | |-BinaryOperator 0x7fffd847a018 <line:4774:11, col:78> 'int' '&&'
|   |     | | | |-BinaryOperator 0x7fffd8479e10 <col:11, col:42> 'int' '=='
|   |     | | | | |-ImplicitCastExpr 0x7fffd8479de0 <col:11> 'int' <LValueToRValue>
|   |     | | | | | `-DeclRefExpr 0x7fffd8479c58 <col:11> 'int' lvalue ParmVar 0x7fffd8478b08 'platformID' 'int'
|   |     | | | | `-ImplicitCastExpr 0x7fffd8479df8 <col:25, col:42> 'int' <IntegralCast>
|   |     | | | |   `-CallExpr 0x7fffd8479db0 <col:25, col:42> 'stbtt_uint16':'unsigned short'
|   |     | | | |     |-ImplicitCastExpr 0x7fffd8479d98 <col:25> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     | | | |     | `-DeclRefExpr 0x7fffd8479c80 <col:25> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     | | | |     `-BinaryOperator 0x7fffd8479d70 <col:34, col:41> 'stbtt_uint8 *' '+'
|   |     | | | |       |-BinaryOperator 0x7fffd8479d28 <col:34, col:37> 'stbtt_uint8 *' '+'
|   |     | | | |       | |-ImplicitCastExpr 0x7fffd8479cf8 <col:34> 'stbtt_uint8 *' <LValueToRValue>
|   |     | | | |       | | `-DeclRefExpr 0x7fffd8479ca8 <col:34> 'stbtt_uint8 *' lvalue Var 0x7fffd8478f90 'fc' 'stbtt_uint8 *'
|   |     | | | |       | `-ImplicitCastExpr 0x7fffd8479d10 <col:37> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     | | | |       |   `-DeclRefExpr 0x7fffd8479cd0 <col:37> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8479a78 'loc' 'stbtt_uint32':'unsigned int'
|   |     | | | |       `-IntegerLiteral 0x7fffd8479d50 <col:41> 'int' 0
|   |     | | | `-BinaryOperator 0x7fffd8479ff0 <col:47, col:78> 'int' '=='
|   |     | | |   |-ImplicitCastExpr 0x7fffd8479fc0 <col:47> 'int' <LValueToRValue>
|   |     | | |   | `-DeclRefExpr 0x7fffd8479e38 <col:47> 'int' lvalue ParmVar 0x7fffd8478b80 'encodingID' 'int'
|   |     | | |   `-ImplicitCastExpr 0x7fffd8479fd8 <col:61, col:78> 'int' <IntegralCast>
|   |     | | |     `-CallExpr 0x7fffd8479f90 <col:61, col:78> 'stbtt_uint16':'unsigned short'
|   |     | | |       |-ImplicitCastExpr 0x7fffd8479f78 <col:61> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     | | |       | `-DeclRefExpr 0x7fffd8479e60 <col:61> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     | | |       `-BinaryOperator 0x7fffd8479f50 <col:70, col:77> 'stbtt_uint8 *' '+'
|   |     | | |         |-BinaryOperator 0x7fffd8479f08 <col:70, col:73> 'stbtt_uint8 *' '+'
|   |     | | |         | |-ImplicitCastExpr 0x7fffd8479ed8 <col:70> 'stbtt_uint8 *' <LValueToRValue>
|   |     | | |         | | `-DeclRefExpr 0x7fffd8479e88 <col:70> 'stbtt_uint8 *' lvalue Var 0x7fffd8478f90 'fc' 'stbtt_uint8 *'
|   |     | | |         | `-ImplicitCastExpr 0x7fffd8479ef0 <col:73> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     | | |         |   `-DeclRefExpr 0x7fffd8479eb0 <col:73> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8479a78 'loc' 'stbtt_uint32':'unsigned int'
|   |     | | |         `-IntegerLiteral 0x7fffd8479f30 <col:77> 'int' 2
|   |     | | `-BinaryOperator 0x7fffd847a1f8 <line:4775:14, col:45> 'int' '=='
|   |     | |   |-ImplicitCastExpr 0x7fffd847a1c8 <col:14> 'int' <LValueToRValue>
|   |     | |   | `-DeclRefExpr 0x7fffd847a040 <col:14> 'int' lvalue ParmVar 0x7fffd8478bf8 'languageID' 'int'
|   |     | |   `-ImplicitCastExpr 0x7fffd847a1e0 <col:28, col:45> 'int' <IntegralCast>
|   |     | |     `-CallExpr 0x7fffd847a198 <col:28, col:45> 'stbtt_uint16':'unsigned short'
|   |     | |       |-ImplicitCastExpr 0x7fffd847a180 <col:28> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     | |       | `-DeclRefExpr 0x7fffd847a068 <col:28> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     | |       `-BinaryOperator 0x7fffd847a158 <col:37, col:44> 'stbtt_uint8 *' '+'
|   |     | |         |-BinaryOperator 0x7fffd847a110 <col:37, col:40> 'stbtt_uint8 *' '+'
|   |     | |         | |-ImplicitCastExpr 0x7fffd847a0e0 <col:37> 'stbtt_uint8 *' <LValueToRValue>
|   |     | |         | | `-DeclRefExpr 0x7fffd847a090 <col:37> 'stbtt_uint8 *' lvalue Var 0x7fffd8478f90 'fc' 'stbtt_uint8 *'
|   |     | |         | `-ImplicitCastExpr 0x7fffd847a0f8 <col:40> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     | |         |   `-DeclRefExpr 0x7fffd847a0b8 <col:40> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8479a78 'loc' 'stbtt_uint32':'unsigned int'
|   |     | |         `-IntegerLiteral 0x7fffd847a138 <col:44> 'int' 4
|   |     | `-BinaryOperator 0x7fffd847a400 <col:50, col:77> 'int' '=='
|   |     |   |-ImplicitCastExpr 0x7fffd847a3d0 <col:50> 'int' <LValueToRValue>
|   |     |   | `-DeclRefExpr 0x7fffd847a248 <col:50> 'int' lvalue ParmVar 0x7fffd8478c70 'nameID' 'int'
|   |     |   `-ImplicitCastExpr 0x7fffd847a3e8 <col:60, col:77> 'int' <IntegralCast>
|   |     |     `-CallExpr 0x7fffd847a3a0 <col:60, col:77> 'stbtt_uint16':'unsigned short'
|   |     |       |-ImplicitCastExpr 0x7fffd847a388 <col:60> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     |       | `-DeclRefExpr 0x7fffd847a270 <col:60> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     |       `-BinaryOperator 0x7fffd847a360 <col:69, col:76> 'stbtt_uint8 *' '+'
|   |     |         |-BinaryOperator 0x7fffd847a318 <col:69, col:72> 'stbtt_uint8 *' '+'
|   |     |         | |-ImplicitCastExpr 0x7fffd847a2e8 <col:69> 'stbtt_uint8 *' <LValueToRValue>
|   |     |         | | `-DeclRefExpr 0x7fffd847a298 <col:69> 'stbtt_uint8 *' lvalue Var 0x7fffd8478f90 'fc' 'stbtt_uint8 *'
|   |     |         | `-ImplicitCastExpr 0x7fffd847a300 <col:72> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     |         |   `-DeclRefExpr 0x7fffd847a2c0 <col:72> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8479a78 'loc' 'stbtt_uint32':'unsigned int'
|   |     |         `-IntegerLiteral 0x7fffd847a340 <col:76> 'int' 6
|   |     |-CompoundStmt 0x7fffd847a970 <col:80, line:4778:7>
|   |     | |-BinaryOperator 0x7fffd847a628 <line:4776:10, col:37> 'int' '='
|   |     | | |-UnaryOperator 0x7fffd847a490 <col:10, col:11> 'int' lvalue prefix '*'
|   |     | | | `-ImplicitCastExpr 0x7fffd847a478 <col:11> 'int *' <LValueToRValue>
|   |     | | |   `-DeclRefExpr 0x7fffd847a450 <col:11> 'int *' lvalue ParmVar 0x7fffd8478a90 'length' 'int *'
|   |     | | `-ImplicitCastExpr 0x7fffd847a610 <col:20, col:37> 'int' <IntegralCast>
|   |     | |   `-CallExpr 0x7fffd847a5e0 <col:20, col:37> 'stbtt_uint16':'unsigned short'
|   |     | |     |-ImplicitCastExpr 0x7fffd847a5c8 <col:20> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     | |     | `-DeclRefExpr 0x7fffd847a4b0 <col:20> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     | |     `-BinaryOperator 0x7fffd847a5a0 <col:29, col:36> 'stbtt_uint8 *' '+'
|   |     | |       |-BinaryOperator 0x7fffd847a558 <col:29, col:32> 'stbtt_uint8 *' '+'
|   |     | |       | |-ImplicitCastExpr 0x7fffd847a528 <col:29> 'stbtt_uint8 *' <LValueToRValue>
|   |     | |       | | `-DeclRefExpr 0x7fffd847a4d8 <col:29> 'stbtt_uint8 *' lvalue Var 0x7fffd8478f90 'fc' 'stbtt_uint8 *'
|   |     | |       | `-ImplicitCastExpr 0x7fffd847a540 <col:32> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     | |       |   `-DeclRefExpr 0x7fffd847a500 <col:32> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8479a78 'loc' 'stbtt_uint32':'unsigned int'
|   |     | |       `-IntegerLiteral 0x7fffd847a580 <col:36> 'int' 8
|   |     | `-ReturnStmt 0x7fffd847a958 <line:4777:10, col:68>
|   |     |   `-CStyleCastExpr 0x7fffd847a930 <col:17, col:68> 'const char *' <BitCast>
|   |     |     `-ParenExpr 0x7fffd847a8e0 <col:32, col:68> 'stbtt_uint8 *'
|   |     |       `-BinaryOperator 0x7fffd847a870 <col:33, col:67> 'stbtt_uint8 *' '+'
|   |     |         |-BinaryOperator 0x7fffd847a6d0 <col:33, col:36> 'stbtt_uint8 *' '+'
|   |     |         | |-ImplicitCastExpr 0x7fffd847a6a0 <col:33> 'stbtt_uint8 *' <LValueToRValue>
|   |     |         | | `-DeclRefExpr 0x7fffd847a650 <col:33> 'stbtt_uint8 *' lvalue Var 0x7fffd8478f90 'fc' 'stbtt_uint8 *'
|   |     |         | `-ImplicitCastExpr 0x7fffd847a6b8 <col:36> 'stbtt_int32':'int' <LValueToRValue>
|   |     |         |   `-DeclRefExpr 0x7fffd847a678 <col:36> 'stbtt_int32':'int' lvalue Var 0x7fffd8478ee8 'stringOffset' 'stbtt_int32':'int'
|   |     |         `-ImplicitCastExpr 0x7fffd847a858 <col:49, col:67> 'int' <IntegralCast>
|   |     |           `-CallExpr 0x7fffd847a828 <col:49, col:67> 'stbtt_uint16':'unsigned short'
|   |     |             |-ImplicitCastExpr 0x7fffd847a810 <col:49> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     |             | `-DeclRefExpr 0x7fffd847a6f8 <col:49> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     |             `-BinaryOperator 0x7fffd847a7e8 <col:58, col:65> 'stbtt_uint8 *' '+'
|   |     |               |-BinaryOperator 0x7fffd847a7a0 <col:58, col:61> 'stbtt_uint8 *' '+'
|   |     |               | |-ImplicitCastExpr 0x7fffd847a770 <col:58> 'stbtt_uint8 *' <LValueToRValue>
|   |     |               | | `-DeclRefExpr 0x7fffd847a720 <col:58> 'stbtt_uint8 *' lvalue Var 0x7fffd8478f90 'fc' 'stbtt_uint8 *'
|   |     |               | `-ImplicitCastExpr 0x7fffd847a788 <col:61> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     |               |   `-DeclRefExpr 0x7fffd847a748 <col:61> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd8479a78 'loc' 'stbtt_uint32':'unsigned int'
|   |     |               `-IntegerLiteral 0x7fffd847a7c8 <col:65> 'int' 10
|   |     `-<<<NULL>>>
|   `-ReturnStmt 0x7fffd847aab8 <line:4780:4, /usr/lib/llvm-6.0/lib/clang/6.0.0/include/stddef.h:105:25>
|     `-ImplicitCastExpr 0x7fffd847aaa0 <col:16, col:25> 'const char *' <NullToPointer>
|       `-ParenExpr 0x7fffd847aa80 <col:16, col:25> 'void *'
|         `-CStyleCastExpr 0x7fffd847aa58 <col:17, col:24> 'void *' <NullToPointer>
|           `-IntegerLiteral 0x7fffd847aa20 <col:24> 'int' 0
|-FunctionDecl 0x7fffd847aee8 <././stb/stb_truetype.h:4783:1, line:4828:1> line:4783:12 used stbtt__matchpair 'int (stbtt_uint8 *, stbtt_uint32, stbtt_uint8 *, stbtt_int32, stbtt_int32, stbtt_int32)' static
| |-ParmVarDecl 0x7fffd847ab38 <col:29, col:42> col:42 used fc 'stbtt_uint8 *'
| |-ParmVarDecl 0x7fffd847aba8 <col:46, col:59> col:59 used nm 'stbtt_uint32':'unsigned int'
| |-ParmVarDecl 0x7fffd847ac18 <col:63, col:76> col:76 used name 'stbtt_uint8 *'
| |-ParmVarDecl 0x7fffd847ac88 <col:82, col:94> col:94 used nlen 'stbtt_int32':'int'
| |-ParmVarDecl 0x7fffd847acf8 <col:100, col:112> col:112 used target_id 'stbtt_int32':'int'
| |-ParmVarDecl 0x7fffd847ad68 <col:123, col:135> col:135 used next_id 'stbtt_int32':'int'
| `-CompoundStmt 0x7fffd847e638 <line:4784:1, line:4828:1>
|   |-DeclStmt 0x7fffd847b028 <line:4785:4, col:17>
|   | `-VarDecl 0x7fffd847afc8 <col:4, col:16> col:16 used i 'stbtt_int32':'int'
|   |-DeclStmt 0x7fffd847b228 <line:4786:4, col:41>
|   | `-VarDecl 0x7fffd847b050 <col:4, col:40> col:16 used count 'stbtt_int32':'int' cinit
|   |   `-ImplicitCastExpr 0x7fffd847b210 <col:24, col:40> 'stbtt_int32':'int' <IntegralCast>
|   |     `-CallExpr 0x7fffd847b1e0 <col:24, col:40> 'stbtt_uint16':'unsigned short'
|   |       |-ImplicitCastExpr 0x7fffd847b1c8 <col:24> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x7fffd847b0b0 <col:24> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |       `-BinaryOperator 0x7fffd847b1a0 <col:33, col:39> 'stbtt_uint8 *' '+'
|   |         |-BinaryOperator 0x7fffd847b158 <col:33, col:36> 'stbtt_uint8 *' '+'
|   |         | |-ImplicitCastExpr 0x7fffd847b128 <col:33> 'stbtt_uint8 *' <LValueToRValue>
|   |         | | `-DeclRefExpr 0x7fffd847b0d8 <col:33> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847ab38 'fc' 'stbtt_uint8 *'
|   |         | `-ImplicitCastExpr 0x7fffd847b140 <col:36> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |         |   `-DeclRefExpr 0x7fffd847b100 <col:36> 'stbtt_uint32':'unsigned int' lvalue ParmVar 0x7fffd847aba8 'nm' 'stbtt_uint32':'unsigned int'
|   |         `-IntegerLiteral 0x7fffd847b180 <col:39> 'int' 2
|   |-DeclStmt 0x7fffd847b4a8 <line:4787:4, col:53>
|   | `-VarDecl 0x7fffd847b250 <col:4, col:52> col:16 used stringOffset 'stbtt_int32':'int' cinit
|   |   `-ImplicitCastExpr 0x7fffd847b490 <col:31, col:52> 'stbtt_int32':'int' <IntegralCast>
|   |     `-BinaryOperator 0x7fffd847b468 <col:31, col:52> 'unsigned int' '+'
|   |       |-ImplicitCastExpr 0x7fffd847b438 <col:31> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x7fffd847b2b0 <col:31> 'stbtt_uint32':'unsigned int' lvalue ParmVar 0x7fffd847aba8 'nm' 'stbtt_uint32':'unsigned int'
|   |       `-ImplicitCastExpr 0x7fffd847b450 <col:36, col:52> 'unsigned int' <IntegralCast>
|   |         `-CallExpr 0x7fffd847b408 <col:36, col:52> 'stbtt_uint16':'unsigned short'
|   |           |-ImplicitCastExpr 0x7fffd847b3f0 <col:36> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |           | `-DeclRefExpr 0x7fffd847b2d8 <col:36> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |           `-BinaryOperator 0x7fffd847b3c8 <col:45, col:51> 'stbtt_uint8 *' '+'
|   |             |-BinaryOperator 0x7fffd847b380 <col:45, col:48> 'stbtt_uint8 *' '+'
|   |             | |-ImplicitCastExpr 0x7fffd847b350 <col:45> 'stbtt_uint8 *' <LValueToRValue>
|   |             | | `-DeclRefExpr 0x7fffd847b300 <col:45> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847ab38 'fc' 'stbtt_uint8 *'
|   |             | `-ImplicitCastExpr 0x7fffd847b368 <col:48> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |             |   `-DeclRefExpr 0x7fffd847b328 <col:48> 'stbtt_uint32':'unsigned int' lvalue ParmVar 0x7fffd847aba8 'nm' 'stbtt_uint32':'unsigned int'
|   |             `-IntegerLiteral 0x7fffd847b3a8 <col:51> 'int' 4
|   |-ForStmt 0x7fffd847e5c8 <line:4789:4, line:4826:4>
|   | |-BinaryOperator 0x7fffd847b508 <line:4789:9, col:11> 'stbtt_int32':'int' '='
|   | | |-DeclRefExpr 0x7fffd847b4c0 <col:9> 'stbtt_int32':'int' lvalue Var 0x7fffd847afc8 'i' 'stbtt_int32':'int'
|   | | `-IntegerLiteral 0x7fffd847b4e8 <col:11> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x7fffd847b5b0 <col:14, col:18> 'int' '<'
|   | | |-ImplicitCastExpr 0x7fffd847b580 <col:14> 'stbtt_int32':'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x7fffd847b530 <col:14> 'stbtt_int32':'int' lvalue Var 0x7fffd847afc8 'i' 'stbtt_int32':'int'
|   | | `-ImplicitCastExpr 0x7fffd847b598 <col:18> 'stbtt_int32':'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd847b558 <col:18> 'stbtt_int32':'int' lvalue Var 0x7fffd847b050 'count' 'stbtt_int32':'int'
|   | |-UnaryOperator 0x7fffd847b600 <col:25, col:27> 'stbtt_int32':'int' prefix '++'
|   | | `-DeclRefExpr 0x7fffd847b5d8 <col:27> 'stbtt_int32':'int' lvalue Var 0x7fffd847afc8 'i' 'stbtt_int32':'int'
|   | `-CompoundStmt 0x7fffd847e5a0 <col:30, line:4826:4>
|   |   |-DeclStmt 0x7fffd847b7f8 <line:4790:7, col:41>
|   |   | `-VarDecl 0x7fffd847b630 <col:7, col:40> col:20 used loc 'stbtt_uint32':'unsigned int' cinit
|   |   |   `-BinaryOperator 0x7fffd847b7d0 <col:26, col:40> 'unsigned int' '+'
|   |   |     |-BinaryOperator 0x7fffd847b708 <col:26, col:31> 'unsigned int' '+'
|   |   |     | |-ImplicitCastExpr 0x7fffd847b6d8 <col:26> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   |     | | `-DeclRefExpr 0x7fffd847b690 <col:26> 'stbtt_uint32':'unsigned int' lvalue ParmVar 0x7fffd847aba8 'nm' 'stbtt_uint32':'unsigned int'
|   |   |     | `-ImplicitCastExpr 0x7fffd847b6f0 <col:31> 'unsigned int' <IntegralCast>
|   |   |     |   `-IntegerLiteral 0x7fffd847b6b8 <col:31> 'int' 6
|   |   |     `-ImplicitCastExpr 0x7fffd847b7b8 <col:35, col:40> 'unsigned int' <IntegralCast>
|   |   |       `-BinaryOperator 0x7fffd847b790 <col:35, col:40> 'int' '*'
|   |   |         |-IntegerLiteral 0x7fffd847b730 <col:35> 'int' 12
|   |   |         `-ImplicitCastExpr 0x7fffd847b778 <col:40> 'stbtt_int32':'int' <LValueToRValue>
|   |   |           `-DeclRefExpr 0x7fffd847b750 <col:40> 'stbtt_int32':'int' lvalue Var 0x7fffd847afc8 'i' 'stbtt_int32':'int'
|   |   |-DeclStmt 0x7fffd847b9f8 <line:4791:7, col:42>
|   |   | `-VarDecl 0x7fffd847b820 <col:7, col:41> col:19 used id 'stbtt_int32':'int' cinit
|   |   |   `-ImplicitCastExpr 0x7fffd847b9e0 <col:24, col:41> 'stbtt_int32':'int' <IntegralCast>
|   |   |     `-CallExpr 0x7fffd847b9b0 <col:24, col:41> 'stbtt_uint16':'unsigned short'
|   |   |       |-ImplicitCastExpr 0x7fffd847b998 <col:24> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x7fffd847b880 <col:24> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |   |       `-BinaryOperator 0x7fffd847b970 <col:33, col:40> 'stbtt_uint8 *' '+'
|   |   |         |-BinaryOperator 0x7fffd847b928 <col:33, col:36> 'stbtt_uint8 *' '+'
|   |   |         | |-ImplicitCastExpr 0x7fffd847b8f8 <col:33> 'stbtt_uint8 *' <LValueToRValue>
|   |   |         | | `-DeclRefExpr 0x7fffd847b8a8 <col:33> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847ab38 'fc' 'stbtt_uint8 *'
|   |   |         | `-ImplicitCastExpr 0x7fffd847b910 <col:36> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   |         |   `-DeclRefExpr 0x7fffd847b8d0 <col:36> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd847b630 'loc' 'stbtt_uint32':'unsigned int'
|   |   |         `-IntegerLiteral 0x7fffd847b950 <col:40> 'int' 6
|   |   `-IfStmt 0x7fffd847e568 <line:4792:7, line:4825:7>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-BinaryOperator 0x7fffd847ba90 <line:4792:11, col:17> 'int' '=='
|   |     | |-ImplicitCastExpr 0x7fffd847ba60 <col:11> 'stbtt_int32':'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x7fffd847ba10 <col:11> 'stbtt_int32':'int' lvalue Var 0x7fffd847b820 'id' 'stbtt_int32':'int'
|   |     | `-ImplicitCastExpr 0x7fffd847ba78 <col:17> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x7fffd847ba38 <col:17> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd847acf8 'target_id' 'stbtt_int32':'int'
|   |     |-CompoundStmt 0x7fffd847e548 <col:28, line:4825:7>
|   |     | |-DeclStmt 0x7fffd847c090 <line:4794:10, col:113>
|   |     | | |-VarDecl 0x7fffd847bac8 <col:10, col:50> col:22 used platform 'stbtt_int32':'int' cinit
|   |     | | | `-ImplicitCastExpr 0x7fffd847bc88 <col:33, col:50> 'stbtt_int32':'int' <IntegralCast>
|   |     | | |   `-CallExpr 0x7fffd847bc58 <col:33, col:50> 'stbtt_uint16':'unsigned short'
|   |     | | |     |-ImplicitCastExpr 0x7fffd847bc40 <col:33> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     | | |     | `-DeclRefExpr 0x7fffd847bb28 <col:33> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     | | |     `-BinaryOperator 0x7fffd847bc18 <col:42, col:49> 'stbtt_uint8 *' '+'
|   |     | | |       |-BinaryOperator 0x7fffd847bbd0 <col:42, col:45> 'stbtt_uint8 *' '+'
|   |     | | |       | |-ImplicitCastExpr 0x7fffd847bba0 <col:42> 'stbtt_uint8 *' <LValueToRValue>
|   |     | | |       | | `-DeclRefExpr 0x7fffd847bb50 <col:42> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847ab38 'fc' 'stbtt_uint8 *'
|   |     | | |       | `-ImplicitCastExpr 0x7fffd847bbb8 <col:45> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     | | |       |   `-DeclRefExpr 0x7fffd847bb78 <col:45> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd847b630 'loc' 'stbtt_uint32':'unsigned int'
|   |     | | |       `-IntegerLiteral 0x7fffd847bbf8 <col:49> 'int' 0
|   |     | | |-VarDecl 0x7fffd847bcb0 <col:10, col:81> col:53 used encoding 'stbtt_int32':'int' cinit
|   |     | | | `-ImplicitCastExpr 0x7fffd847be70 <col:64, col:81> 'stbtt_int32':'int' <IntegralCast>
|   |     | | |   `-CallExpr 0x7fffd847be40 <col:64, col:81> 'stbtt_uint16':'unsigned short'
|   |     | | |     |-ImplicitCastExpr 0x7fffd847be28 <col:64> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     | | |     | `-DeclRefExpr 0x7fffd847bd10 <col:64> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     | | |     `-BinaryOperator 0x7fffd847be00 <col:73, col:80> 'stbtt_uint8 *' '+'
|   |     | | |       |-BinaryOperator 0x7fffd847bdb8 <col:73, col:76> 'stbtt_uint8 *' '+'
|   |     | | |       | |-ImplicitCastExpr 0x7fffd847bd88 <col:73> 'stbtt_uint8 *' <LValueToRValue>
|   |     | | |       | | `-DeclRefExpr 0x7fffd847bd38 <col:73> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847ab38 'fc' 'stbtt_uint8 *'
|   |     | | |       | `-ImplicitCastExpr 0x7fffd847bda0 <col:76> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     | | |       |   `-DeclRefExpr 0x7fffd847bd60 <col:76> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd847b630 'loc' 'stbtt_uint32':'unsigned int'
|   |     | | |       `-IntegerLiteral 0x7fffd847bde0 <col:80> 'int' 2
|   |     | | `-VarDecl 0x7fffd847be98 <col:10, col:112> col:84 used language 'stbtt_int32':'int' cinit
|   |     | |   `-ImplicitCastExpr 0x7fffd847c058 <col:95, col:112> 'stbtt_int32':'int' <IntegralCast>
|   |     | |     `-CallExpr 0x7fffd847c028 <col:95, col:112> 'stbtt_uint16':'unsigned short'
|   |     | |       |-ImplicitCastExpr 0x7fffd847c010 <col:95> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     | |       | `-DeclRefExpr 0x7fffd847bef8 <col:95> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     | |       `-BinaryOperator 0x7fffd847bfe8 <col:104, col:111> 'stbtt_uint8 *' '+'
|   |     | |         |-BinaryOperator 0x7fffd847bfa0 <col:104, col:107> 'stbtt_uint8 *' '+'
|   |     | |         | |-ImplicitCastExpr 0x7fffd847bf70 <col:104> 'stbtt_uint8 *' <LValueToRValue>
|   |     | |         | | `-DeclRefExpr 0x7fffd847bf20 <col:104> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847ab38 'fc' 'stbtt_uint8 *'
|   |     | |         | `-ImplicitCastExpr 0x7fffd847bf88 <col:107> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     | |         |   `-DeclRefExpr 0x7fffd847bf48 <col:107> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd847b630 'loc' 'stbtt_uint32':'unsigned int'
|   |     | |         `-IntegerLiteral 0x7fffd847bfc8 <col:111> 'int' 4
|   |     | `-IfStmt 0x7fffd847e510 <line:4797:10, line:4822:10>
|   |     |   |-<<<NULL>>>
|   |     |   |-<<<NULL>>>
|   |     |   |-BinaryOperator 0x7fffd847c408 <line:4797:14, col:99> 'int' '||'
|   |     |   | |-BinaryOperator 0x7fffd847c288 <col:14, col:62> 'int' '||'
|   |     |   | | |-BinaryOperator 0x7fffd847c108 <col:14, col:26> 'int' '=='
|   |     |   | | | |-ImplicitCastExpr 0x7fffd847c0f0 <col:14> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   | | | | `-DeclRefExpr 0x7fffd847c0a8 <col:14> 'stbtt_int32':'int' lvalue Var 0x7fffd847bac8 'platform' 'stbtt_int32':'int'
|   |     |   | | | `-IntegerLiteral 0x7fffd847c0d0 <col:26> 'int' 0
|   |     |   | | `-ParenExpr 0x7fffd847c268 <col:31, col:62> 'int'
|   |     |   | |   `-BinaryOperator 0x7fffd847c240 <col:32, col:61> 'int' '&&'
|   |     |   | |     |-BinaryOperator 0x7fffd847c190 <col:32, col:44> 'int' '=='
|   |     |   | |     | |-ImplicitCastExpr 0x7fffd847c178 <col:32> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   | |     | | `-DeclRefExpr 0x7fffd847c130 <col:32> 'stbtt_int32':'int' lvalue Var 0x7fffd847bac8 'platform' 'stbtt_int32':'int'
|   |     |   | |     | `-IntegerLiteral 0x7fffd847c158 <col:44> 'int' 3
|   |     |   | |     `-BinaryOperator 0x7fffd847c218 <col:49, col:61> 'int' '=='
|   |     |   | |       |-ImplicitCastExpr 0x7fffd847c200 <col:49> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   | |       | `-DeclRefExpr 0x7fffd847c1b8 <col:49> 'stbtt_int32':'int' lvalue Var 0x7fffd847bcb0 'encoding' 'stbtt_int32':'int'
|   |     |   | |       `-IntegerLiteral 0x7fffd847c1e0 <col:61> 'int' 1
|   |     |   | `-ParenExpr 0x7fffd847c3e8 <col:67, col:99> 'int'
|   |     |   |   `-BinaryOperator 0x7fffd847c3c0 <col:68, col:97> 'int' '&&'
|   |     |   |     |-BinaryOperator 0x7fffd847c310 <col:68, col:80> 'int' '=='
|   |     |   |     | |-ImplicitCastExpr 0x7fffd847c2f8 <col:68> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   |     | | `-DeclRefExpr 0x7fffd847c2b0 <col:68> 'stbtt_int32':'int' lvalue Var 0x7fffd847bac8 'platform' 'stbtt_int32':'int'
|   |     |   |     | `-IntegerLiteral 0x7fffd847c2d8 <col:80> 'int' 3
|   |     |   |     `-BinaryOperator 0x7fffd847c398 <col:85, col:97> 'int' '=='
|   |     |   |       |-ImplicitCastExpr 0x7fffd847c380 <col:85> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   |       | `-DeclRefExpr 0x7fffd847c338 <col:85> 'stbtt_int32':'int' lvalue Var 0x7fffd847bcb0 'encoding' 'stbtt_int32':'int'
|   |     |   |       `-IntegerLiteral 0x7fffd847c360 <col:97> 'int' 10
|   |     |   |-CompoundStmt 0x7fffd847e4e0 <col:102, line:4822:10>
|   |     |   | |-DeclStmt 0x7fffd847c618 <line:4798:13, col:50>
|   |     |   | | `-VarDecl 0x7fffd847c440 <col:13, col:49> col:25 used slen 'stbtt_int32':'int' cinit
|   |     |   | |   `-ImplicitCastExpr 0x7fffd847c600 <col:32, col:49> 'stbtt_int32':'int' <IntegralCast>
|   |     |   | |     `-CallExpr 0x7fffd847c5d0 <col:32, col:49> 'stbtt_uint16':'unsigned short'
|   |     |   | |       |-ImplicitCastExpr 0x7fffd847c5b8 <col:32> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     |   | |       | `-DeclRefExpr 0x7fffd847c4a0 <col:32> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     |   | |       `-BinaryOperator 0x7fffd847c590 <col:41, col:48> 'stbtt_uint8 *' '+'
|   |     |   | |         |-BinaryOperator 0x7fffd847c548 <col:41, col:44> 'stbtt_uint8 *' '+'
|   |     |   | |         | |-ImplicitCastExpr 0x7fffd847c518 <col:41> 'stbtt_uint8 *' <LValueToRValue>
|   |     |   | |         | | `-DeclRefExpr 0x7fffd847c4c8 <col:41> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847ab38 'fc' 'stbtt_uint8 *'
|   |     |   | |         | `-ImplicitCastExpr 0x7fffd847c530 <col:44> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     |   | |         |   `-DeclRefExpr 0x7fffd847c4f0 <col:44> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd847b630 'loc' 'stbtt_uint32':'unsigned int'
|   |     |   | |         `-IntegerLiteral 0x7fffd847c570 <col:48> 'int' 8
|   |     |   | |-DeclStmt 0x7fffd847c818 <line:4799:13, col:50>
|   |     |   | | `-VarDecl 0x7fffd847c640 <col:13, col:49> col:25 used off 'stbtt_int32':'int' cinit
|   |     |   | |   `-ImplicitCastExpr 0x7fffd847c800 <col:31, col:49> 'stbtt_int32':'int' <IntegralCast>
|   |     |   | |     `-CallExpr 0x7fffd847c7d0 <col:31, col:49> 'stbtt_uint16':'unsigned short'
|   |     |   | |       |-ImplicitCastExpr 0x7fffd847c7b8 <col:31> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     |   | |       | `-DeclRefExpr 0x7fffd847c6a0 <col:31> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     |   | |       `-BinaryOperator 0x7fffd847c790 <col:40, col:47> 'stbtt_uint8 *' '+'
|   |     |   | |         |-BinaryOperator 0x7fffd847c748 <col:40, col:43> 'stbtt_uint8 *' '+'
|   |     |   | |         | |-ImplicitCastExpr 0x7fffd847c718 <col:40> 'stbtt_uint8 *' <LValueToRValue>
|   |     |   | |         | | `-DeclRefExpr 0x7fffd847c6c8 <col:40> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847ab38 'fc' 'stbtt_uint8 *'
|   |     |   | |         | `-ImplicitCastExpr 0x7fffd847c730 <col:43> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     |   | |         |   `-DeclRefExpr 0x7fffd847c6f0 <col:43> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd847b630 'loc' 'stbtt_uint32':'unsigned int'
|   |     |   | |         `-IntegerLiteral 0x7fffd847c770 <col:47> 'int' 10
|   |     |   | |-DeclStmt 0x7fffd847caf8 <line:4802:13, col:116>
|   |     |   | | `-VarDecl 0x7fffd847c840 <col:13, col:115> col:25 used matchlen 'stbtt_int32':'int' cinit
|   |     |   | |   `-CallExpr 0x7fffd847ca68 <col:36, col:115> 'stbtt_int32':'int'
|   |     |   | |     |-ImplicitCastExpr 0x7fffd847ca50 <col:36> 'stbtt_int32 (*)(stbtt_uint8 *, stbtt_int32, stbtt_uint8 *, stbtt_int32)' <FunctionToPointerDecay>
|   |     |   | |     | `-DeclRefExpr 0x7fffd847c8a0 <col:36> 'stbtt_int32 (stbtt_uint8 *, stbtt_int32, stbtt_uint8 *, stbtt_int32)' Function 0x7fffd8474fd0 'stbtt__CompareUTF8toUTF16_bigendian_prefix' 'stbtt_int32 (stbtt_uint8 *, stbtt_int32, stbtt_uint8 *, stbtt_int32)'
|   |     |   | |     |-ImplicitCastExpr 0x7fffd847cab0 <col:79> 'stbtt_uint8 *' <LValueToRValue>
|   |     |   | |     | `-DeclRefExpr 0x7fffd847c8c8 <col:79> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847ac18 'name' 'stbtt_uint8 *'
|   |     |   | |     |-ImplicitCastExpr 0x7fffd847cac8 <col:85> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   | |     | `-DeclRefExpr 0x7fffd847c8f0 <col:85> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd847ac88 'nlen' 'stbtt_int32':'int'
|   |     |   | |     |-BinaryOperator 0x7fffd847ca00 <col:91, col:107> 'stbtt_uint8 *' '+'
|   |     |   | |     | |-BinaryOperator 0x7fffd847c998 <col:91, col:94> 'stbtt_uint8 *' '+'
|   |     |   | |     | | |-ImplicitCastExpr 0x7fffd847c968 <col:91> 'stbtt_uint8 *' <LValueToRValue>
|   |     |   | |     | | | `-DeclRefExpr 0x7fffd847c918 <col:91> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847ab38 'fc' 'stbtt_uint8 *'
|   |     |   | |     | | `-ImplicitCastExpr 0x7fffd847c980 <col:94> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   | |     | |   `-DeclRefExpr 0x7fffd847c940 <col:94> 'stbtt_int32':'int' lvalue Var 0x7fffd847b250 'stringOffset' 'stbtt_int32':'int'
|   |     |   | |     | `-ImplicitCastExpr 0x7fffd847c9e8 <col:107> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   | |     |   `-DeclRefExpr 0x7fffd847c9c0 <col:107> 'stbtt_int32':'int' lvalue Var 0x7fffd847c640 'off' 'stbtt_int32':'int'
|   |     |   | |     `-ImplicitCastExpr 0x7fffd847cae0 <col:111> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   | |       `-DeclRefExpr 0x7fffd847ca28 <col:111> 'stbtt_int32':'int' lvalue Var 0x7fffd847c440 'slen' 'stbtt_int32':'int'
|   |     |   | `-IfStmt 0x7fffd847e4a8 <line:4803:13, line:4821:13>
|   |     |   |   |-<<<NULL>>>
|   |     |   |   |-<<<NULL>>>
|   |     |   |   |-BinaryOperator 0x7fffd847cb70 <line:4803:17, col:29> 'int' '>='
|   |     |   |   | |-ImplicitCastExpr 0x7fffd847cb58 <col:17> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   |   | | `-DeclRefExpr 0x7fffd847cb10 <col:17> 'stbtt_int32':'int' lvalue Var 0x7fffd847c840 'matchlen' 'stbtt_int32':'int'
|   |     |   |   | `-IntegerLiteral 0x7fffd847cb38 <col:29> 'int' 0
|   |     |   |   |-CompoundStmt 0x7fffd847e490 <col:32, line:4821:13>
|   |     |   |   | `-IfStmt 0x7fffd847e458 <line:4805:16, line:4820:16>
|   |     |   |   |   |-<<<NULL>>>
|   |     |   |   |   |-<<<NULL>>>
|   |     |   |   |   |-BinaryOperator 0x7fffd847d558 <line:4805:20, col:168> 'int' '&&'
|   |     |   |   |   | |-BinaryOperator 0x7fffd847d308 <col:20, col:131> 'int' '&&'
|   |     |   |   |   | | |-BinaryOperator 0x7fffd847d0b8 <col:20, col:94> 'int' '&&'
|   |     |   |   |   | | | |-BinaryOperator 0x7fffd847ceb0 <col:20, col:60> 'int' '&&'
|   |     |   |   |   | | | | |-BinaryOperator 0x7fffd847cc60 <col:20, col:26> 'int' '<'
|   |     |   |   |   | | | | | |-BinaryOperator 0x7fffd847cbf8 <col:20, col:22> 'int' '+'
|   |     |   |   |   | | | | | | |-ImplicitCastExpr 0x7fffd847cbe0 <col:20> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   |   |   | | | | | | | `-DeclRefExpr 0x7fffd847cb98 <col:20> 'stbtt_int32':'int' lvalue Var 0x7fffd847afc8 'i' 'stbtt_int32':'int'
|   |     |   |   |   | | | | | | `-IntegerLiteral 0x7fffd847cbc0 <col:22> 'int' 1
|   |     |   |   |   | | | | | `-ImplicitCastExpr 0x7fffd847cc48 <col:26> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   |   |   | | | | |   `-DeclRefExpr 0x7fffd847cc20 <col:26> 'stbtt_int32':'int' lvalue Var 0x7fffd847b050 'count' 'stbtt_int32':'int'
|   |     |   |   |   | | | | `-BinaryOperator 0x7fffd847ce88 <col:35, col:60> 'int' '=='
|   |     |   |   |   | | | |   |-ImplicitCastExpr 0x7fffd847ce58 <col:35, col:55> 'int' <IntegralCast>
|   |     |   |   |   | | | |   | `-CallExpr 0x7fffd847ce00 <col:35, col:55> 'stbtt_uint16':'unsigned short'
|   |     |   |   |   | | | |   |   |-ImplicitCastExpr 0x7fffd847cde8 <col:35> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     |   |   |   | | | |   |   | `-DeclRefExpr 0x7fffd847cc88 <col:35> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     |   |   |   | | | |   |   `-BinaryOperator 0x7fffd847cdc0 <col:44, col:54> 'stbtt_uint8 *' '+'
|   |     |   |   |   | | | |   |     |-BinaryOperator 0x7fffd847cd78 <col:44, col:51> 'stbtt_uint8 *' '+'
|   |     |   |   |   | | | |   |     | |-BinaryOperator 0x7fffd847cd30 <col:44, col:47> 'stbtt_uint8 *' '+'
|   |     |   |   |   | | | |   |     | | |-ImplicitCastExpr 0x7fffd847cd00 <col:44> 'stbtt_uint8 *' <LValueToRValue>
|   |     |   |   |   | | | |   |     | | | `-DeclRefExpr 0x7fffd847ccb0 <col:44> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847ab38 'fc' 'stbtt_uint8 *'
|   |     |   |   |   | | | |   |     | | `-ImplicitCastExpr 0x7fffd847cd18 <col:47> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     |   |   |   | | | |   |     | |   `-DeclRefExpr 0x7fffd847ccd8 <col:47> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd847b630 'loc' 'stbtt_uint32':'unsigned int'
|   |     |   |   |   | | | |   |     | `-IntegerLiteral 0x7fffd847cd58 <col:51> 'int' 12
|   |     |   |   |   | | | |   |     `-IntegerLiteral 0x7fffd847cda0 <col:54> 'int' 6
|   |     |   |   |   | | | |   `-ImplicitCastExpr 0x7fffd847ce70 <col:60> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   |   |   | | | |     `-DeclRefExpr 0x7fffd847ce30 <col:60> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd847ad68 'next_id' 'stbtt_int32':'int'
|   |     |   |   |   | | | `-BinaryOperator 0x7fffd847d090 <col:71, col:94> 'int' '=='
|   |     |   |   |   | | |   |-ImplicitCastExpr 0x7fffd847d060 <col:71, col:89> 'int' <IntegralCast>
|   |     |   |   |   | | |   | `-CallExpr 0x7fffd847d008 <col:71, col:89> 'stbtt_uint16':'unsigned short'
|   |     |   |   |   | | |   |   |-ImplicitCastExpr 0x7fffd847cff0 <col:71> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     |   |   |   | | |   |   | `-DeclRefExpr 0x7fffd847ced8 <col:71> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     |   |   |   | | |   |   `-BinaryOperator 0x7fffd847cfc8 <col:80, col:87> 'stbtt_uint8 *' '+'
|   |     |   |   |   | | |   |     |-BinaryOperator 0x7fffd847cf80 <col:80, col:83> 'stbtt_uint8 *' '+'
|   |     |   |   |   | | |   |     | |-ImplicitCastExpr 0x7fffd847cf50 <col:80> 'stbtt_uint8 *' <LValueToRValue>
|   |     |   |   |   | | |   |     | | `-DeclRefExpr 0x7fffd847cf00 <col:80> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847ab38 'fc' 'stbtt_uint8 *'
|   |     |   |   |   | | |   |     | `-ImplicitCastExpr 0x7fffd847cf68 <col:83> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     |   |   |   | | |   |     |   `-DeclRefExpr 0x7fffd847cf28 <col:83> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd847b630 'loc' 'stbtt_uint32':'unsigned int'
|   |     |   |   |   | | |   |     `-IntegerLiteral 0x7fffd847cfa8 <col:87> 'int' 12
|   |     |   |   |   | | |   `-ImplicitCastExpr 0x7fffd847d078 <col:94> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   |   |   | | |     `-DeclRefExpr 0x7fffd847d038 <col:94> 'stbtt_int32':'int' lvalue Var 0x7fffd847bac8 'platform' 'stbtt_int32':'int'
|   |     |   |   |   | | `-BinaryOperator 0x7fffd847d2e0 <col:106, col:131> 'int' '=='
|   |     |   |   |   | |   |-ImplicitCastExpr 0x7fffd847d2b0 <col:106, col:126> 'int' <IntegralCast>
|   |     |   |   |   | |   | `-CallExpr 0x7fffd847d258 <col:106, col:126> 'stbtt_uint16':'unsigned short'
|   |     |   |   |   | |   |   |-ImplicitCastExpr 0x7fffd847d240 <col:106> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     |   |   |   | |   |   | `-DeclRefExpr 0x7fffd847d0e0 <col:106> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     |   |   |   | |   |   `-BinaryOperator 0x7fffd847d218 <col:115, col:125> 'stbtt_uint8 *' '+'
|   |     |   |   |   | |   |     |-BinaryOperator 0x7fffd847d1d0 <col:115, col:122> 'stbtt_uint8 *' '+'
|   |     |   |   |   | |   |     | |-BinaryOperator 0x7fffd847d188 <col:115, col:118> 'stbtt_uint8 *' '+'
|   |     |   |   |   | |   |     | | |-ImplicitCastExpr 0x7fffd847d158 <col:115> 'stbtt_uint8 *' <LValueToRValue>
|   |     |   |   |   | |   |     | | | `-DeclRefExpr 0x7fffd847d108 <col:115> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847ab38 'fc' 'stbtt_uint8 *'
|   |     |   |   |   | |   |     | | `-ImplicitCastExpr 0x7fffd847d170 <col:118> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     |   |   |   | |   |     | |   `-DeclRefExpr 0x7fffd847d130 <col:118> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd847b630 'loc' 'stbtt_uint32':'unsigned int'
|   |     |   |   |   | |   |     | `-IntegerLiteral 0x7fffd847d1b0 <col:122> 'int' 12
|   |     |   |   |   | |   |     `-IntegerLiteral 0x7fffd847d1f8 <col:125> 'int' 2
|   |     |   |   |   | |   `-ImplicitCastExpr 0x7fffd847d2c8 <col:131> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   |   |   | |     `-DeclRefExpr 0x7fffd847d288 <col:131> 'stbtt_int32':'int' lvalue Var 0x7fffd847bcb0 'encoding' 'stbtt_int32':'int'
|   |     |   |   |   | `-BinaryOperator 0x7fffd847d530 <col:143, col:168> 'int' '=='
|   |     |   |   |   |   |-ImplicitCastExpr 0x7fffd847d500 <col:143, col:163> 'int' <IntegralCast>
|   |     |   |   |   |   | `-CallExpr 0x7fffd847d4a8 <col:143, col:163> 'stbtt_uint16':'unsigned short'
|   |     |   |   |   |   |   |-ImplicitCastExpr 0x7fffd847d490 <col:143> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     |   |   |   |   |   | `-DeclRefExpr 0x7fffd847d330 <col:143> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     |   |   |   |   |   `-BinaryOperator 0x7fffd847d468 <col:152, col:162> 'stbtt_uint8 *' '+'
|   |     |   |   |   |   |     |-BinaryOperator 0x7fffd847d420 <col:152, col:159> 'stbtt_uint8 *' '+'
|   |     |   |   |   |   |     | |-BinaryOperator 0x7fffd847d3d8 <col:152, col:155> 'stbtt_uint8 *' '+'
|   |     |   |   |   |   |     | | |-ImplicitCastExpr 0x7fffd847d3a8 <col:152> 'stbtt_uint8 *' <LValueToRValue>
|   |     |   |   |   |   |     | | | `-DeclRefExpr 0x7fffd847d358 <col:152> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847ab38 'fc' 'stbtt_uint8 *'
|   |     |   |   |   |   |     | | `-ImplicitCastExpr 0x7fffd847d3c0 <col:155> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     |   |   |   |   |     | |   `-DeclRefExpr 0x7fffd847d380 <col:155> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd847b630 'loc' 'stbtt_uint32':'unsigned int'
|   |     |   |   |   |   |     | `-IntegerLiteral 0x7fffd847d400 <col:159> 'int' 12
|   |     |   |   |   |   |     `-IntegerLiteral 0x7fffd847d448 <col:162> 'int' 4
|   |     |   |   |   |   `-ImplicitCastExpr 0x7fffd847d518 <col:168> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   |   |   |     `-DeclRefExpr 0x7fffd847d4d8 <col:168> 'stbtt_int32':'int' lvalue Var 0x7fffd847be98 'language' 'stbtt_int32':'int'
|   |     |   |   |   |-CompoundStmt 0x7fffd847e300 <col:178, line:4816:16>
|   |     |   |   |   | |-BinaryOperator 0x7fffd847d768 <line:4806:19, col:46> 'stbtt_int32':'int' '='
|   |     |   |   |   | | |-DeclRefExpr 0x7fffd847d580 <col:19> 'stbtt_int32':'int' lvalue Var 0x7fffd847c440 'slen' 'stbtt_int32':'int'
|   |     |   |   |   | | `-ImplicitCastExpr 0x7fffd847d750 <col:26, col:46> 'stbtt_int32':'int' <IntegralCast>
|   |     |   |   |   | |   `-CallExpr 0x7fffd847d720 <col:26, col:46> 'stbtt_uint16':'unsigned short'
|   |     |   |   |   | |     |-ImplicitCastExpr 0x7fffd847d708 <col:26> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     |   |   |   | |     | `-DeclRefExpr 0x7fffd847d5a8 <col:26> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     |   |   |   | |     `-BinaryOperator 0x7fffd847d6e0 <col:35, col:45> 'stbtt_uint8 *' '+'
|   |     |   |   |   | |       |-BinaryOperator 0x7fffd847d698 <col:35, col:42> 'stbtt_uint8 *' '+'
|   |     |   |   |   | |       | |-BinaryOperator 0x7fffd847d650 <col:35, col:38> 'stbtt_uint8 *' '+'
|   |     |   |   |   | |       | | |-ImplicitCastExpr 0x7fffd847d620 <col:35> 'stbtt_uint8 *' <LValueToRValue>
|   |     |   |   |   | |       | | | `-DeclRefExpr 0x7fffd847d5d0 <col:35> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847ab38 'fc' 'stbtt_uint8 *'
|   |     |   |   |   | |       | | `-ImplicitCastExpr 0x7fffd847d638 <col:38> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     |   |   |   | |       | |   `-DeclRefExpr 0x7fffd847d5f8 <col:38> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd847b630 'loc' 'stbtt_uint32':'unsigned int'
|   |     |   |   |   | |       | `-IntegerLiteral 0x7fffd847d678 <col:42> 'int' 12
|   |     |   |   |   | |       `-IntegerLiteral 0x7fffd847d6c0 <col:45> 'int' 8
|   |     |   |   |   | |-BinaryOperator 0x7fffd847d978 <line:4807:19, col:46> 'stbtt_int32':'int' '='
|   |     |   |   |   | | |-DeclRefExpr 0x7fffd847d790 <col:19> 'stbtt_int32':'int' lvalue Var 0x7fffd847c640 'off' 'stbtt_int32':'int'
|   |     |   |   |   | | `-ImplicitCastExpr 0x7fffd847d960 <col:25, col:46> 'stbtt_int32':'int' <IntegralCast>
|   |     |   |   |   | |   `-CallExpr 0x7fffd847d930 <col:25, col:46> 'stbtt_uint16':'unsigned short'
|   |     |   |   |   | |     |-ImplicitCastExpr 0x7fffd847d918 <col:25> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   |     |   |   |   | |     | `-DeclRefExpr 0x7fffd847d7b8 <col:25> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   |     |   |   |   | |     `-BinaryOperator 0x7fffd847d8f0 <col:34, col:44> 'stbtt_uint8 *' '+'
|   |     |   |   |   | |       |-BinaryOperator 0x7fffd847d8a8 <col:34, col:41> 'stbtt_uint8 *' '+'
|   |     |   |   |   | |       | |-BinaryOperator 0x7fffd847d860 <col:34, col:37> 'stbtt_uint8 *' '+'
|   |     |   |   |   | |       | | |-ImplicitCastExpr 0x7fffd847d830 <col:34> 'stbtt_uint8 *' <LValueToRValue>
|   |     |   |   |   | |       | | | `-DeclRefExpr 0x7fffd847d7e0 <col:34> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847ab38 'fc' 'stbtt_uint8 *'
|   |     |   |   |   | |       | | `-ImplicitCastExpr 0x7fffd847d848 <col:37> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     |   |   |   | |       | |   `-DeclRefExpr 0x7fffd847d808 <col:37> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd847b630 'loc' 'stbtt_uint32':'unsigned int'
|   |     |   |   |   | |       | `-IntegerLiteral 0x7fffd847d888 <col:41> 'int' 12
|   |     |   |   |   | |       `-IntegerLiteral 0x7fffd847d8d0 <col:44> 'int' 10
|   |     |   |   |   | `-IfStmt 0x7fffd847e2c8 <line:4808:19, line:4815:19>
|   |     |   |   |   |   |-<<<NULL>>>
|   |     |   |   |   |   |-<<<NULL>>>
|   |     |   |   |   |   |-BinaryOperator 0x7fffd847da00 <line:4808:23, col:31> 'int' '=='
|   |     |   |   |   |   | |-ImplicitCastExpr 0x7fffd847d9e8 <col:23> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   |   |   |   | | `-DeclRefExpr 0x7fffd847d9a0 <col:23> 'stbtt_int32':'int' lvalue Var 0x7fffd847c440 'slen' 'stbtt_int32':'int'
|   |     |   |   |   |   | `-IntegerLiteral 0x7fffd847d9c8 <col:31> 'int' 0
|   |     |   |   |   |   |-CompoundStmt 0x7fffd847db40 <col:34, line:4811:19>
|   |     |   |   |   |   | `-IfStmt 0x7fffd847db08 <line:4809:22, line:4810:32>
|   |     |   |   |   |   |   |-<<<NULL>>>
|   |     |   |   |   |   |   |-<<<NULL>>>
|   |     |   |   |   |   |   |-BinaryOperator 0x7fffd847daa8 <line:4809:26, col:38> 'int' '=='
|   |     |   |   |   |   |   | |-ImplicitCastExpr 0x7fffd847da78 <col:26> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   |   |   |   |   | | `-DeclRefExpr 0x7fffd847da28 <col:26> 'stbtt_int32':'int' lvalue Var 0x7fffd847c840 'matchlen' 'stbtt_int32':'int'
|   |     |   |   |   |   |   | `-ImplicitCastExpr 0x7fffd847da90 <col:38> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   |   |   |   |   |   `-DeclRefExpr 0x7fffd847da50 <col:38> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd847ac88 'nlen' 'stbtt_int32':'int'
|   |     |   |   |   |   |   |-ReturnStmt 0x7fffd847daf0 <line:4810:25, col:32>
|   |     |   |   |   |   |   | `-IntegerLiteral 0x7fffd847dad0 <col:32> 'int' 1
|   |     |   |   |   |   |   `-<<<NULL>>>
|   |     |   |   |   |   `-IfStmt 0x7fffd847e290 <line:4811:26, line:4815:19>
|   |     |   |   |   |     |-<<<NULL>>>
|   |     |   |   |   |     |-<<<NULL>>>
|   |     |   |   |   |     |-BinaryOperator 0x7fffd847dd18 <line:4811:30, col:67> 'int' '&&'
|   |     |   |   |   |     | |-BinaryOperator 0x7fffd847dbd8 <col:30, col:41> 'int' '<'
|   |     |   |   |   |     | | |-ImplicitCastExpr 0x7fffd847dba8 <col:30> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   |   |   |     | | | `-DeclRefExpr 0x7fffd847db58 <col:30> 'stbtt_int32':'int' lvalue Var 0x7fffd847c840 'matchlen' 'stbtt_int32':'int'
|   |     |   |   |   |     | | `-ImplicitCastExpr 0x7fffd847dbc0 <col:41> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   |   |   |     | |   `-DeclRefExpr 0x7fffd847db80 <col:41> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd847ac88 'nlen' 'stbtt_int32':'int'
|   |     |   |   |   |     | `-BinaryOperator 0x7fffd847dcf0 <col:49, col:67> 'int' '=='
|   |     |   |   |   |     |   |-ImplicitCastExpr 0x7fffd847dcd8 <col:49, col:62> 'int' <IntegralCast>
|   |     |   |   |   |     |   | `-ImplicitCastExpr 0x7fffd847dcc0 <col:49, col:62> 'stbtt_uint8':'unsigned char' <LValueToRValue>
|   |     |   |   |   |     |   |   `-ArraySubscriptExpr 0x7fffd847dc80 <col:49, col:62> 'stbtt_uint8':'unsigned char' lvalue
|   |     |   |   |   |     |   |     |-ImplicitCastExpr 0x7fffd847dc50 <col:49> 'stbtt_uint8 *' <LValueToRValue>
|   |     |   |   |   |     |   |     | `-DeclRefExpr 0x7fffd847dc00 <col:49> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847ac18 'name' 'stbtt_uint8 *'
|   |     |   |   |   |     |   |     `-ImplicitCastExpr 0x7fffd847dc68 <col:54> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   |   |   |     |   |       `-DeclRefExpr 0x7fffd847dc28 <col:54> 'stbtt_int32':'int' lvalue Var 0x7fffd847c840 'matchlen' 'stbtt_int32':'int'
|   |     |   |   |   |     |   `-CharacterLiteral 0x7fffd847dca8 <col:67> 'int' 32
|   |     |   |   |   |     |-CompoundStmt 0x7fffd847e270 <col:72, line:4815:19>
|   |     |   |   |   |     | |-UnaryOperator 0x7fffd847dd68 <line:4812:22, col:24> 'stbtt_int32':'int' prefix '++'
|   |     |   |   |   |     | | `-DeclRefExpr 0x7fffd847dd40 <col:24> 'stbtt_int32':'int' lvalue Var 0x7fffd847c840 'matchlen' 'stbtt_int32':'int'
|   |     |   |   |   |     | `-IfStmt 0x7fffd847e238 <line:4813:22, line:4814:32>
|   |     |   |   |   |     |   |-<<<NULL>>>
|   |     |   |   |   |     |   |-<<<NULL>>>
|   |     |   |   |   |     |   |-CallExpr 0x7fffd847e1a0 <line:4813:26, col:143> 'int'
|   |     |   |   |   |     |   | |-ImplicitCastExpr 0x7fffd847e188 <col:26> 'int (*)(char *, int, char *, int)' <FunctionToPointerDecay>
|   |     |   |   |   |     |   | | `-DeclRefExpr 0x7fffd847dd88 <col:26> 'int (char *, int, char *, int)' Function 0x7fffd8478658 'stbtt_CompareUTF8toUTF16_bigendian_internal' 'int (char *, int, char *, int)'
|   |     |   |   |   |     |   | |-CStyleCastExpr 0x7fffd847dec0 <col:70, col:92> 'char *' <BitCast>
|   |     |   |   |   |     |   | | `-ParenExpr 0x7fffd847dea0 <col:78, col:92> 'stbtt_uint8 *'
|   |     |   |   |   |     |   | |   `-BinaryOperator 0x7fffd847de30 <col:79, col:84> 'stbtt_uint8 *' '+'
|   |     |   |   |   |     |   | |     |-ImplicitCastExpr 0x7fffd847de00 <col:79> 'stbtt_uint8 *' <LValueToRValue>
|   |     |   |   |   |     |   | |     | `-DeclRefExpr 0x7fffd847ddb0 <col:79> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847ac18 'name' 'stbtt_uint8 *'
|   |     |   |   |   |     |   | |     `-ImplicitCastExpr 0x7fffd847de18 <col:84> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   |   |   |     |   | |       `-DeclRefExpr 0x7fffd847ddd8 <col:84> 'stbtt_int32':'int' lvalue Var 0x7fffd847c840 'matchlen' 'stbtt_int32':'int'
|   |     |   |   |   |     |   | |-BinaryOperator 0x7fffd847df68 <col:95, col:100> 'int' '-'
|   |     |   |   |   |     |   | | |-ImplicitCastExpr 0x7fffd847df38 <col:95> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   |   |   |     |   | | | `-DeclRefExpr 0x7fffd847dee8 <col:95> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd847ac88 'nlen' 'stbtt_int32':'int'
|   |     |   |   |   |     |   | | `-ImplicitCastExpr 0x7fffd847df50 <col:100> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   |   |   |     |   | |   `-DeclRefExpr 0x7fffd847df10 <col:100> 'stbtt_int32':'int' lvalue Var 0x7fffd847c840 'matchlen' 'stbtt_int32':'int'
|   |     |   |   |   |     |   | |-CStyleCastExpr 0x7fffd847e108 <col:110, col:137> 'char *' <BitCast>
|   |     |   |   |   |     |   | | `-ParenExpr 0x7fffd847e0e8 <col:117, col:137> 'stbtt_uint8 *'
|   |     |   |   |   |     |   | |   `-BinaryOperator 0x7fffd847e078 <col:118, col:134> 'stbtt_uint8 *' '+'
|   |     |   |   |   |     |   | |     |-BinaryOperator 0x7fffd847e010 <col:118, col:121> 'stbtt_uint8 *' '+'
|   |     |   |   |   |     |   | |     | |-ImplicitCastExpr 0x7fffd847dfe0 <col:118> 'stbtt_uint8 *' <LValueToRValue>
|   |     |   |   |   |     |   | |     | | `-DeclRefExpr 0x7fffd847df90 <col:118> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847ab38 'fc' 'stbtt_uint8 *'
|   |     |   |   |   |     |   | |     | `-ImplicitCastExpr 0x7fffd847dff8 <col:121> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   |   |   |     |   | |     |   `-DeclRefExpr 0x7fffd847dfb8 <col:121> 'stbtt_int32':'int' lvalue Var 0x7fffd847b250 'stringOffset' 'stbtt_int32':'int'
|   |     |   |   |   |     |   | |     `-ImplicitCastExpr 0x7fffd847e060 <col:134> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   |   |   |     |   | |       `-DeclRefExpr 0x7fffd847e038 <col:134> 'stbtt_int32':'int' lvalue Var 0x7fffd847c640 'off' 'stbtt_int32':'int'
|   |     |   |   |   |     |   | `-ImplicitCastExpr 0x7fffd847e1e8 <col:139> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   |   |   |     |   |   `-DeclRefExpr 0x7fffd847e130 <col:139> 'stbtt_int32':'int' lvalue Var 0x7fffd847c440 'slen' 'stbtt_int32':'int'
|   |     |   |   |   |     |   |-ReturnStmt 0x7fffd847e220 <line:4814:25, col:32>
|   |     |   |   |   |     |   | `-IntegerLiteral 0x7fffd847e200 <col:32> 'int' 1
|   |     |   |   |   |     |   `-<<<NULL>>>
|   |     |   |   |   |     `-<<<NULL>>>
|   |     |   |   |   `-CompoundStmt 0x7fffd847e440 <line:4816:23, line:4820:16>
|   |     |   |   |     `-IfStmt 0x7fffd847e408 <line:4818:19, line:4819:29>
|   |     |   |   |       |-<<<NULL>>>
|   |     |   |   |       |-<<<NULL>>>
|   |     |   |   |       |-BinaryOperator 0x7fffd847e3a8 <line:4818:23, col:35> 'int' '=='
|   |     |   |   |       | |-ImplicitCastExpr 0x7fffd847e378 <col:23> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   |   |       | | `-DeclRefExpr 0x7fffd847e328 <col:23> 'stbtt_int32':'int' lvalue Var 0x7fffd847c840 'matchlen' 'stbtt_int32':'int'
|   |     |   |   |       | `-ImplicitCastExpr 0x7fffd847e390 <col:35> 'stbtt_int32':'int' <LValueToRValue>
|   |     |   |   |       |   `-DeclRefExpr 0x7fffd847e350 <col:35> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd847ac88 'nlen' 'stbtt_int32':'int'
|   |     |   |   |       |-ReturnStmt 0x7fffd847e3f0 <line:4819:22, col:29>
|   |     |   |   |       | `-IntegerLiteral 0x7fffd847e3d0 <col:29> 'int' 1
|   |     |   |   |       `-<<<NULL>>>
|   |     |   |   `-<<<NULL>>>
|   |     |   `-<<<NULL>>>
|   |     `-<<<NULL>>>
|   `-ReturnStmt 0x7fffd847e620 <line:4827:4, col:11>
|     `-IntegerLiteral 0x7fffd847e600 <col:11> 'int' 0
|-FunctionDecl 0x7fffd847e940 <line:4830:1, line:4857:1> line:4830:12 used stbtt__matches 'int (stbtt_uint8 *, stbtt_uint32, stbtt_uint8 *, stbtt_int32)' static
| |-ParmVarDecl 0x7fffd847e680 <col:27, col:40> col:40 used fc 'stbtt_uint8 *'
| |-ParmVarDecl 0x7fffd847e6f0 <col:44, col:57> col:57 used offset 'stbtt_uint32':'unsigned int'
| |-ParmVarDecl 0x7fffd847e760 <col:65, col:78> col:78 used name 'stbtt_uint8 *'
| |-ParmVarDecl 0x7fffd847e7d0 <col:84, col:96> col:96 used flags 'stbtt_int32':'int'
| `-CompoundStmt 0x7fffd8480620 <line:4831:1, line:4857:1>
|   |-DeclStmt 0x7fffd847ebe0 <line:4832:4, col:64>
|   | `-VarDecl 0x7fffd847ea10 <col:4, line:478:39> line:4832:16 used nlen 'stbtt_int32':'int' cinit
|   |   `-CStyleCastExpr 0x7fffd847ebb8 <col:23, line:478:39> 'stbtt_int32':'int' <IntegralCast>
|   |     `-CallExpr 0x7fffd847eb60 <col:31, col:39> 'unsigned long'
|   |       |-ImplicitCastExpr 0x7fffd847eb48 <col:31> 'unsigned long (*)(const char *)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x7fffd847ea70 <col:31> 'unsigned long (const char *)' Function 0x7fffd8335d10 'strlen' 'unsigned long (const char *)'
|   |       `-ImplicitCastExpr 0x7fffd847eb90 <line:4832:50, col:59> 'const char *' <BitCast>
|   |         `-CStyleCastExpr 0x7fffd847eaf0 <col:50, col:59> 'char *' <BitCast>
|   |           `-ImplicitCastExpr 0x7fffd847ead8 <col:59> 'stbtt_uint8 *' <LValueToRValue>
|   |             `-DeclRefExpr 0x7fffd847ea98 <col:59> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847e760 'name' 'stbtt_uint8 *'
|   |-DeclStmt 0x7fffd847ecf0 <line:4833:4, col:22>
|   | |-VarDecl 0x7fffd847ec08 <col:4, col:17> col:17 used nm 'stbtt_uint32':'unsigned int'
|   | `-VarDecl 0x7fffd847ec78 <col:4, col:20> col:20 used hd 'stbtt_uint32':'unsigned int'
|   |-IfStmt 0x7fffd847ee78 <line:4834:4, col:42>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-UnaryOperator 0x7fffd847ee20 <col:8, col:32> 'int' prefix '!'
|   | | `-CallExpr 0x7fffd847edf0 <col:9, col:32> 'int'
|   | |   |-ImplicitCastExpr 0x7fffd847edd8 <col:9> 'int (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | |   | `-DeclRefExpr 0x7fffd847ed08 <col:9> 'int (stbtt_uint8 *)' Function 0x7fffd8371f78 'stbtt__isfont' 'int (stbtt_uint8 *)'
|   | |   `-BinaryOperator 0x7fffd847edb0 <col:23, col:26> 'stbtt_uint8 *' '+'
|   | |     |-ImplicitCastExpr 0x7fffd847ed80 <col:23> 'stbtt_uint8 *' <LValueToRValue>
|   | |     | `-DeclRefExpr 0x7fffd847ed30 <col:23> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847e680 'fc' 'stbtt_uint8 *'
|   | |     `-ImplicitCastExpr 0x7fffd847ed98 <col:26> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   | |       `-DeclRefExpr 0x7fffd847ed58 <col:26> 'stbtt_uint32':'unsigned int' lvalue ParmVar 0x7fffd847e6f0 'offset' 'stbtt_uint32':'unsigned int'
|   | |-ReturnStmt 0x7fffd847ee60 <col:35, col:42>
|   | | `-IntegerLiteral 0x7fffd847ee40 <col:42> 'int' 0
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd847f3e0 <line:4837:4, line:4840:4>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd847eed8 <line:4837:8> 'stbtt_int32':'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd847eeb0 <col:8> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd847e7d0 'flags' 'stbtt_int32':'int'
|   | |-CompoundStmt 0x7fffd847f3c0 <col:15, line:4840:4>
|   | | |-BinaryOperator 0x7fffd847f078 <line:4838:7, col:48> 'stbtt_uint32':'unsigned int' '='
|   | | | |-DeclRefExpr 0x7fffd847eef0 <col:7> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd847ec78 'hd' 'stbtt_uint32':'unsigned int'
|   | | | `-CallExpr 0x7fffd847efd8 <col:12, col:48> 'stbtt_uint32':'unsigned int'
|   | | |   |-ImplicitCastExpr 0x7fffd847efc0 <col:12> 'stbtt_uint32 (*)(stbtt_uint8 *, stbtt_uint32, const char *)' <FunctionToPointerDecay>
|   | | |   | `-DeclRefExpr 0x7fffd847ef18 <col:12> 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)' Function 0x7fffd83758f0 'stbtt__find_table' 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)'
|   | | |   |-ImplicitCastExpr 0x7fffd847f018 <col:30> 'stbtt_uint8 *' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x7fffd847ef40 <col:30> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847e680 'fc' 'stbtt_uint8 *'
|   | | |   |-ImplicitCastExpr 0x7fffd847f030 <col:34> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   | | |   | `-DeclRefExpr 0x7fffd847ef68 <col:34> 'stbtt_uint32':'unsigned int' lvalue ParmVar 0x7fffd847e6f0 'offset' 'stbtt_uint32':'unsigned int'
|   | | |   `-ImplicitCastExpr 0x7fffd847f060 <col:42> 'const char *' <BitCast>
|   | | |     `-ImplicitCastExpr 0x7fffd847f048 <col:42> 'char *' <ArrayToPointerDecay>
|   | | |       `-StringLiteral 0x7fffd847ef90 <col:42> 'char [5]' lvalue "head"
|   | | `-IfStmt 0x7fffd847f388 <line:4839:7, col:59>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-BinaryOperator 0x7fffd847f328 <col:11, col:49> 'int' '!='
|   | |   | |-ParenExpr 0x7fffd847f260 <col:11, col:34> 'int'
|   | |   | | `-BinaryOperator 0x7fffd847f238 <col:12, col:33> 'int' '&'
|   | |   | |   |-ImplicitCastExpr 0x7fffd847f220 <col:12, col:29> 'int' <IntegralCast>
|   | |   | |   | `-CallExpr 0x7fffd847f1d0 <col:12, col:29> 'stbtt_uint16':'unsigned short'
|   | |   | |   |   |-ImplicitCastExpr 0x7fffd847f1b8 <col:12> 'stbtt_uint16 (*)(stbtt_uint8 *)' <FunctionToPointerDecay>
|   | |   | |   |   | `-DeclRefExpr 0x7fffd847f0a0 <col:12> 'stbtt_uint16 (stbtt_uint8 *)' Function 0x7fffd8370ae0 'ttUSHORT' 'stbtt_uint16 (stbtt_uint8 *)'
|   | |   | |   |   `-BinaryOperator 0x7fffd847f190 <col:21, col:27> 'stbtt_uint8 *' '+'
|   | |   | |   |     |-BinaryOperator 0x7fffd847f148 <col:21, col:24> 'stbtt_uint8 *' '+'
|   | |   | |   |     | |-ImplicitCastExpr 0x7fffd847f118 <col:21> 'stbtt_uint8 *' <LValueToRValue>
|   | |   | |   |     | | `-DeclRefExpr 0x7fffd847f0c8 <col:21> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847e680 'fc' 'stbtt_uint8 *'
|   | |   | |   |     | `-ImplicitCastExpr 0x7fffd847f130 <col:24> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   | |   | |   |     |   `-DeclRefExpr 0x7fffd847f0f0 <col:24> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd847ec78 'hd' 'stbtt_uint32':'unsigned int'
|   | |   | |   |     `-IntegerLiteral 0x7fffd847f170 <col:27> 'int' 44
|   | |   | |   `-IntegerLiteral 0x7fffd847f200 <col:33> 'int' 7
|   | |   | `-ParenExpr 0x7fffd847f308 <col:39, col:49> 'int'
|   | |   |   `-BinaryOperator 0x7fffd847f2e0 <col:40, col:48> 'int' '&'
|   | |   |     |-ImplicitCastExpr 0x7fffd847f2c8 <col:40> 'stbtt_int32':'int' <LValueToRValue>
|   | |   |     | `-DeclRefExpr 0x7fffd847f280 <col:40> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd847e7d0 'flags' 'stbtt_int32':'int'
|   | |   |     `-IntegerLiteral 0x7fffd847f2a8 <col:48> 'int' 7
|   | |   |-ReturnStmt 0x7fffd847f370 <col:52, col:59>
|   | |   | `-IntegerLiteral 0x7fffd847f350 <col:59> 'int' 0
|   | |   `-<<<NULL>>>
|   | `-<<<NULL>>>
|   |-BinaryOperator 0x7fffd847f5a0 <line:4842:4, col:45> 'stbtt_uint32':'unsigned int' '='
|   | |-DeclRefExpr 0x7fffd847f418 <col:4> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd847ec08 'nm' 'stbtt_uint32':'unsigned int'
|   | `-CallExpr 0x7fffd847f500 <col:9, col:45> 'stbtt_uint32':'unsigned int'
|   |   |-ImplicitCastExpr 0x7fffd847f4e8 <col:9> 'stbtt_uint32 (*)(stbtt_uint8 *, stbtt_uint32, const char *)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x7fffd847f440 <col:9> 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)' Function 0x7fffd83758f0 'stbtt__find_table' 'stbtt_uint32 (stbtt_uint8 *, stbtt_uint32, const char *)'
|   |   |-ImplicitCastExpr 0x7fffd847f540 <col:27> 'stbtt_uint8 *' <LValueToRValue>
|   |   | `-DeclRefExpr 0x7fffd847f468 <col:27> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847e680 'fc' 'stbtt_uint8 *'
|   |   |-ImplicitCastExpr 0x7fffd847f558 <col:31> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x7fffd847f490 <col:31> 'stbtt_uint32':'unsigned int' lvalue ParmVar 0x7fffd847e6f0 'offset' 'stbtt_uint32':'unsigned int'
|   |   `-ImplicitCastExpr 0x7fffd847f588 <col:39> 'const char *' <BitCast>
|   |     `-ImplicitCastExpr 0x7fffd847f570 <col:39> 'char *' <ArrayToPointerDecay>
|   |       `-StringLiteral 0x7fffd847f4b8 <col:39> 'char [5]' lvalue "name"
|   |-IfStmt 0x7fffd847f660 <line:4843:4, col:20>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-UnaryOperator 0x7fffd847f608 <col:8, col:9> 'int' prefix '!'
|   | | `-ImplicitCastExpr 0x7fffd847f5f0 <col:9> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x7fffd847f5c8 <col:9> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd847ec08 'nm' 'stbtt_uint32':'unsigned int'
|   | |-ReturnStmt 0x7fffd847f648 <col:13, col:20>
|   | | `-IntegerLiteral 0x7fffd847f628 <col:20> 'int' 0
|   | `-<<<NULL>>>
|   |-IfStmt 0x7fffd84805b0 <line:4845:4, line:4854:4>
|   | |-<<<NULL>>>
|   | |-<<<NULL>>>
|   | |-ImplicitCastExpr 0x7fffd847f6c0 <line:4845:8> 'stbtt_int32':'int' <LValueToRValue>
|   | | `-DeclRefExpr 0x7fffd847f698 <col:8> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd847e7d0 'flags' 'stbtt_int32':'int'
|   | |-CompoundStmt 0x7fffd847fe68 <col:15, line:4850:4>
|   | | |-IfStmt 0x7fffd847f960 <line:4847:7, col:65>
|   | | | |-<<<NULL>>>
|   | | | |-<<<NULL>>>
|   | | | |-CallExpr 0x7fffd847f870 <col:11, col:54> 'int'
|   | | | | |-ImplicitCastExpr 0x7fffd847f858 <col:11> 'int (*)(stbtt_uint8 *, stbtt_uint32, stbtt_uint8 *, stbtt_int32, stbtt_int32, stbtt_int32)' <FunctionToPointerDecay>
|   | | | | | `-DeclRefExpr 0x7fffd847f6d8 <col:11> 'int (stbtt_uint8 *, stbtt_uint32, stbtt_uint8 *, stbtt_int32, stbtt_int32, stbtt_int32)' Function 0x7fffd847aee8 'stbtt__matchpair' 'int (stbtt_uint8 *, stbtt_uint32, stbtt_uint8 *, stbtt_int32, stbtt_int32, stbtt_int32)'
|   | | | | |-ImplicitCastExpr 0x7fffd847f8c8 <col:28> 'stbtt_uint8 *' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x7fffd847f700 <col:28> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847e680 'fc' 'stbtt_uint8 *'
|   | | | | |-ImplicitCastExpr 0x7fffd847f8e0 <col:32> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x7fffd847f728 <col:32> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd847ec08 'nm' 'stbtt_uint32':'unsigned int'
|   | | | | |-ImplicitCastExpr 0x7fffd847f8f8 <col:36> 'stbtt_uint8 *' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x7fffd847f750 <col:36> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847e760 'name' 'stbtt_uint8 *'
|   | | | | |-ImplicitCastExpr 0x7fffd847f910 <col:42> 'stbtt_int32':'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x7fffd847f778 <col:42> 'stbtt_int32':'int' lvalue Var 0x7fffd847ea10 'nlen' 'stbtt_int32':'int'
|   | | | | |-IntegerLiteral 0x7fffd847f7a0 <col:48> 'int' 16
|   | | | | `-UnaryOperator 0x7fffd847f7e0 <col:52, col:53> 'int' prefix '-'
|   | | | |   `-IntegerLiteral 0x7fffd847f7c0 <col:53> 'int' 1
|   | | | |-ReturnStmt 0x7fffd847f948 <col:58, col:65>
|   | | | | `-IntegerLiteral 0x7fffd847f928 <col:65> 'int' 1
|   | | | `-<<<NULL>>>
|   | | |-IfStmt 0x7fffd847fbc8 <line:4848:7, col:65>
|   | | | |-<<<NULL>>>
|   | | | |-<<<NULL>>>
|   | | | |-CallExpr 0x7fffd847fad8 <col:11, col:54> 'int'
|   | | | | |-ImplicitCastExpr 0x7fffd847fac0 <col:11> 'int (*)(stbtt_uint8 *, stbtt_uint32, stbtt_uint8 *, stbtt_int32, stbtt_int32, stbtt_int32)' <FunctionToPointerDecay>
|   | | | | | `-DeclRefExpr 0x7fffd847f998 <col:11> 'int (stbtt_uint8 *, stbtt_uint32, stbtt_uint8 *, stbtt_int32, stbtt_int32, stbtt_int32)' Function 0x7fffd847aee8 'stbtt__matchpair' 'int (stbtt_uint8 *, stbtt_uint32, stbtt_uint8 *, stbtt_int32, stbtt_int32, stbtt_int32)'
|   | | | | |-ImplicitCastExpr 0x7fffd847fb30 <col:28> 'stbtt_uint8 *' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x7fffd847f9c0 <col:28> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847e680 'fc' 'stbtt_uint8 *'
|   | | | | |-ImplicitCastExpr 0x7fffd847fb48 <col:32> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x7fffd847f9e8 <col:32> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd847ec08 'nm' 'stbtt_uint32':'unsigned int'
|   | | | | |-ImplicitCastExpr 0x7fffd847fb60 <col:36> 'stbtt_uint8 *' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x7fffd847fa10 <col:36> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847e760 'name' 'stbtt_uint8 *'
|   | | | | |-ImplicitCastExpr 0x7fffd847fb78 <col:42> 'stbtt_int32':'int' <LValueToRValue>
|   | | | | | `-DeclRefExpr 0x7fffd847fa38 <col:42> 'stbtt_int32':'int' lvalue Var 0x7fffd847ea10 'nlen' 'stbtt_int32':'int'
|   | | | | |-IntegerLiteral 0x7fffd847fa60 <col:49> 'int' 1
|   | | | | `-UnaryOperator 0x7fffd847faa0 <col:52, col:53> 'int' prefix '-'
|   | | | |   `-IntegerLiteral 0x7fffd847fa80 <col:53> 'int' 1
|   | | | |-ReturnStmt 0x7fffd847fbb0 <col:58, col:65>
|   | | | | `-IntegerLiteral 0x7fffd847fb90 <col:65> 'int' 1
|   | | | `-<<<NULL>>>
|   | | `-IfStmt 0x7fffd847fe30 <line:4849:7, col:65>
|   | |   |-<<<NULL>>>
|   | |   |-<<<NULL>>>
|   | |   |-CallExpr 0x7fffd847fd40 <col:11, col:54> 'int'
|   | |   | |-ImplicitCastExpr 0x7fffd847fd28 <col:11> 'int (*)(stbtt_uint8 *, stbtt_uint32, stbtt_uint8 *, stbtt_int32, stbtt_int32, stbtt_int32)' <FunctionToPointerDecay>
|   | |   | | `-DeclRefExpr 0x7fffd847fc00 <col:11> 'int (stbtt_uint8 *, stbtt_uint32, stbtt_uint8 *, stbtt_int32, stbtt_int32, stbtt_int32)' Function 0x7fffd847aee8 'stbtt__matchpair' 'int (stbtt_uint8 *, stbtt_uint32, stbtt_uint8 *, stbtt_int32, stbtt_int32, stbtt_int32)'
|   | |   | |-ImplicitCastExpr 0x7fffd847fd98 <col:28> 'stbtt_uint8 *' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x7fffd847fc28 <col:28> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847e680 'fc' 'stbtt_uint8 *'
|   | |   | |-ImplicitCastExpr 0x7fffd847fdb0 <col:32> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x7fffd847fc50 <col:32> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd847ec08 'nm' 'stbtt_uint32':'unsigned int'
|   | |   | |-ImplicitCastExpr 0x7fffd847fdc8 <col:36> 'stbtt_uint8 *' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x7fffd847fc78 <col:36> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847e760 'name' 'stbtt_uint8 *'
|   | |   | |-ImplicitCastExpr 0x7fffd847fde0 <col:42> 'stbtt_int32':'int' <LValueToRValue>
|   | |   | | `-DeclRefExpr 0x7fffd847fca0 <col:42> 'stbtt_int32':'int' lvalue Var 0x7fffd847ea10 'nlen' 'stbtt_int32':'int'
|   | |   | |-IntegerLiteral 0x7fffd847fcc8 <col:49> 'int' 3
|   | |   | `-UnaryOperator 0x7fffd847fd08 <col:52, col:53> 'int' prefix '-'
|   | |   |   `-IntegerLiteral 0x7fffd847fce8 <col:53> 'int' 1
|   | |   |-ReturnStmt 0x7fffd847fe18 <col:58, col:65>
|   | |   | `-IntegerLiteral 0x7fffd847fdf8 <col:65> 'int' 1
|   | |   `-<<<NULL>>>
|   | `-CompoundStmt 0x7fffd8480588 <line:4850:11, line:4854:4>
|   |   |-IfStmt 0x7fffd84800a0 <line:4851:7, col:65>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-CallExpr 0x7fffd847ffb0 <col:11, col:54> 'int'
|   |   | | |-ImplicitCastExpr 0x7fffd847ff98 <col:11> 'int (*)(stbtt_uint8 *, stbtt_uint32, stbtt_uint8 *, stbtt_int32, stbtt_int32, stbtt_int32)' <FunctionToPointerDecay>
|   |   | | | `-DeclRefExpr 0x7fffd847fe90 <col:11> 'int (stbtt_uint8 *, stbtt_uint32, stbtt_uint8 *, stbtt_int32, stbtt_int32, stbtt_int32)' Function 0x7fffd847aee8 'stbtt__matchpair' 'int (stbtt_uint8 *, stbtt_uint32, stbtt_uint8 *, stbtt_int32, stbtt_int32, stbtt_int32)'
|   |   | | |-ImplicitCastExpr 0x7fffd8480008 <col:28> 'stbtt_uint8 *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x7fffd847feb8 <col:28> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847e680 'fc' 'stbtt_uint8 *'
|   |   | | |-ImplicitCastExpr 0x7fffd8480020 <col:32> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x7fffd847fee0 <col:32> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd847ec08 'nm' 'stbtt_uint32':'unsigned int'
|   |   | | |-ImplicitCastExpr 0x7fffd8480038 <col:36> 'stbtt_uint8 *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x7fffd847ff08 <col:36> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847e760 'name' 'stbtt_uint8 *'
|   |   | | |-ImplicitCastExpr 0x7fffd8480050 <col:42> 'stbtt_int32':'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x7fffd847ff30 <col:42> 'stbtt_int32':'int' lvalue Var 0x7fffd847ea10 'nlen' 'stbtt_int32':'int'
|   |   | | |-IntegerLiteral 0x7fffd847ff58 <col:48> 'int' 16
|   |   | | `-IntegerLiteral 0x7fffd847ff78 <col:52> 'int' 17
|   |   | |-ReturnStmt 0x7fffd8480088 <col:58, col:65>
|   |   | | `-IntegerLiteral 0x7fffd8480068 <col:65> 'int' 1
|   |   | `-<<<NULL>>>
|   |   |-IfStmt 0x7fffd84802e8 <line:4852:7, col:65>
|   |   | |-<<<NULL>>>
|   |   | |-<<<NULL>>>
|   |   | |-CallExpr 0x7fffd84801f8 <col:11, col:54> 'int'
|   |   | | |-ImplicitCastExpr 0x7fffd84801e0 <col:11> 'int (*)(stbtt_uint8 *, stbtt_uint32, stbtt_uint8 *, stbtt_int32, stbtt_int32, stbtt_int32)' <FunctionToPointerDecay>
|   |   | | | `-DeclRefExpr 0x7fffd84800d8 <col:11> 'int (stbtt_uint8 *, stbtt_uint32, stbtt_uint8 *, stbtt_int32, stbtt_int32, stbtt_int32)' Function 0x7fffd847aee8 'stbtt__matchpair' 'int (stbtt_uint8 *, stbtt_uint32, stbtt_uint8 *, stbtt_int32, stbtt_int32, stbtt_int32)'
|   |   | | |-ImplicitCastExpr 0x7fffd8480250 <col:28> 'stbtt_uint8 *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x7fffd8480100 <col:28> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847e680 'fc' 'stbtt_uint8 *'
|   |   | | |-ImplicitCastExpr 0x7fffd8480268 <col:32> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x7fffd8480128 <col:32> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd847ec08 'nm' 'stbtt_uint32':'unsigned int'
|   |   | | |-ImplicitCastExpr 0x7fffd8480280 <col:36> 'stbtt_uint8 *' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x7fffd8480150 <col:36> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847e760 'name' 'stbtt_uint8 *'
|   |   | | |-ImplicitCastExpr 0x7fffd8480298 <col:42> 'stbtt_int32':'int' <LValueToRValue>
|   |   | | | `-DeclRefExpr 0x7fffd8480178 <col:42> 'stbtt_int32':'int' lvalue Var 0x7fffd847ea10 'nlen' 'stbtt_int32':'int'
|   |   | | |-IntegerLiteral 0x7fffd84801a0 <col:49> 'int' 1
|   |   | | `-IntegerLiteral 0x7fffd84801c0 <col:53> 'int' 2
|   |   | |-ReturnStmt 0x7fffd84802d0 <col:58, col:65>
|   |   | | `-IntegerLiteral 0x7fffd84802b0 <col:65> 'int' 1
|   |   | `-<<<NULL>>>
|   |   `-IfStmt 0x7fffd8480550 <line:4853:7, col:65>
|   |     |-<<<NULL>>>
|   |     |-<<<NULL>>>
|   |     |-CallExpr 0x7fffd8480460 <col:11, col:54> 'int'
|   |     | |-ImplicitCastExpr 0x7fffd8480448 <col:11> 'int (*)(stbtt_uint8 *, stbtt_uint32, stbtt_uint8 *, stbtt_int32, stbtt_int32, stbtt_int32)' <FunctionToPointerDecay>
|   |     | | `-DeclRefExpr 0x7fffd8480320 <col:11> 'int (stbtt_uint8 *, stbtt_uint32, stbtt_uint8 *, stbtt_int32, stbtt_int32, stbtt_int32)' Function 0x7fffd847aee8 'stbtt__matchpair' 'int (stbtt_uint8 *, stbtt_uint32, stbtt_uint8 *, stbtt_int32, stbtt_int32, stbtt_int32)'
|   |     | |-ImplicitCastExpr 0x7fffd84804b8 <col:28> 'stbtt_uint8 *' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x7fffd8480348 <col:28> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847e680 'fc' 'stbtt_uint8 *'
|   |     | |-ImplicitCastExpr 0x7fffd84804d0 <col:32> 'stbtt_uint32':'unsigned int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x7fffd8480370 <col:32> 'stbtt_uint32':'unsigned int' lvalue Var 0x7fffd847ec08 'nm' 'stbtt_uint32':'unsigned int'
|   |     | |-ImplicitCastExpr 0x7fffd84804e8 <col:36> 'stbtt_uint8 *' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x7fffd8480398 <col:36> 'stbtt_uint8 *' lvalue ParmVar 0x7fffd847e760 'name' 'stbtt_uint8 *'
|   |     | |-ImplicitCastExpr 0x7fffd8480500 <col:42> 'stbtt_int32':'int' <LValueToRValue>
|   |     | | `-DeclRefExpr 0x7fffd84803c0 <col:42> 'stbtt_int32':'int' lvalue Var 0x7fffd847ea10 'nlen' 'stbtt_int32':'int'
|   |     | |-IntegerLiteral 0x7fffd84803e8 <col:49> 'int' 3
|   |     | `-UnaryOperator 0x7fffd8480428 <col:52, col:53> 'int' prefix '-'
|   |     |   `-IntegerLiteral 0x7fffd8480408 <col:53> 'int' 1
|   |     |-ReturnStmt 0x7fffd8480538 <col:58, col:65>
|   |     | `-IntegerLiteral 0x7fffd8480518 <col:65> 'int' 1
|   |     `-<<<NULL>>>
|   `-ReturnStmt 0x7fffd8480608 <line:4856:4, col:11>
|     `-IntegerLiteral 0x7fffd84805e8 <col:11> 'int' 0
|-FunctionDecl 0x7fffd84808a8 <line:4859:1, line:4868:1> line:4859:12 used stbtt_FindMatchingFont_internal 'int (unsigned char *, char *, stbtt_int32)' static
| |-ParmVarDecl 0x7fffd8480688 <col:44, col:59> col:59 used font_collection 'unsigned char *'
| |-ParmVarDecl 0x7fffd8480700 <col:76, col:82> col:82 used name_utf8 'char *'
| |-ParmVarDecl 0x7fffd8480770 <col:93, col:105> col:105 used flags 'stbtt_int32':'int'
| `-CompoundStmt 0x7fffd84810b0 <line:4860:1, line:4868:1>
|   |-DeclStmt 0x7fffd84809d0 <line:4861:4, col:17>
|   | `-VarDecl 0x7fffd8480970 <col:4, col:16> col:16 used i 'stbtt_int32':'int'
|   `-ForStmt 0x7fffd8481078 <line:4862:4, line:4867:4>
|     |-BinaryOperator 0x7fffd8480a30 <line:4862:9, col:11> 'stbtt_int32':'int' '='
|     | |-DeclRefExpr 0x7fffd84809e8 <col:9> 'stbtt_int32':'int' lvalue Var 0x7fffd8480970 'i' 'stbtt_int32':'int'
|     | `-IntegerLiteral 0x7fffd8480a10 <col:11> 'int' 0
|     |-<<<NULL>>>
|     |-<<<NULL>>>
|     |-UnaryOperator 0x7fffd8480a80 <col:14, col:16> 'stbtt_int32':'int' prefix '++'
|     | `-DeclRefExpr 0x7fffd8480a58 <col:16> 'stbtt_int32':'int' lvalue Var 0x7fffd8480970 'i' 'stbtt_int32':'int'
|     `-CompoundStmt 0x7fffd8481050 <col:19, line:4867:4>
|       |-DeclStmt 0x7fffd8480c20 <line:4863:7, col:72>
|       | `-VarDecl 0x7fffd8480ab0 <col:7, col:71> col:19 used off 'stbtt_int32':'int' cinit
|       |   `-CallExpr 0x7fffd8480ba0 <col:25, col:71> 'int'
|       |     |-ImplicitCastExpr 0x7fffd8480b88 <col:25> 'int (*)(const unsigned char *, int)' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x7fffd8480b10 <col:25> 'int (const unsigned char *, int)' Function 0x7fffd834ca28 'stbtt_GetFontOffsetForIndex' 'int (const unsigned char *, int)'
|       |     |-ImplicitCastExpr 0x7fffd8480bf0 <col:53> 'const unsigned char *' <BitCast>
|       |     | `-ImplicitCastExpr 0x7fffd8480bd8 <col:53> 'unsigned char *' <LValueToRValue>
|       |     |   `-DeclRefExpr 0x7fffd8480b38 <col:53> 'unsigned char *' lvalue ParmVar 0x7fffd8480688 'font_collection' 'unsigned char *'
|       |     `-ImplicitCastExpr 0x7fffd8480c08 <col:70> 'stbtt_int32':'int' <LValueToRValue>
|       |       `-DeclRefExpr 0x7fffd8480b60 <col:70> 'stbtt_int32':'int' lvalue Var 0x7fffd8480970 'i' 'stbtt_int32':'int'
|       |-IfStmt 0x7fffd8480d18 <line:4864:7, col:27>
|       | |-<<<NULL>>>
|       | |-<<<NULL>>>
|       | |-BinaryOperator 0x7fffd8480c98 <col:11, col:17> 'int' '<'
|       | | |-ImplicitCastExpr 0x7fffd8480c80 <col:11> 'stbtt_int32':'int' <LValueToRValue>
|       | | | `-DeclRefExpr 0x7fffd8480c38 <col:11> 'stbtt_int32':'int' lvalue Var 0x7fffd8480ab0 'off' 'stbtt_int32':'int'
|       | | `-IntegerLiteral 0x7fffd8480c60 <col:17> 'int' 0
|       | |-ReturnStmt 0x7fffd8480d00 <col:20, col:27>
|       | | `-ImplicitCastExpr 0x7fffd8480ce8 <col:27> 'stbtt_int32':'int' <LValueToRValue>
|       | |   `-DeclRefExpr 0x7fffd8480cc0 <col:27> 'stbtt_int32':'int' lvalue Var 0x7fffd8480ab0 'off' 'stbtt_int32':'int'
|       | `-<<<NULL>>>
|       `-IfStmt 0x7fffd8481018 <line:4865:7, line:4866:17>
|         |-<<<NULL>>>
|         |-<<<NULL>>>
|         |-CallExpr 0x7fffd8480f30 <line:4865:11, col:95> 'int'
|         | |-ImplicitCastExpr 0x7fffd8480f18 <col:11> 'int (*)(stbtt_uint8 *, stbtt_uint32, stbtt_uint8 *, stbtt_int32)' <FunctionToPointerDecay>
|         | | `-DeclRefExpr 0x7fffd8480d50 <col:11> 'int (stbtt_uint8 *, stbtt_uint32, stbtt_uint8 *, stbtt_int32)' Function 0x7fffd847e940 'stbtt__matches' 'int (stbtt_uint8 *, stbtt_uint32, stbtt_uint8 *, stbtt_int32)'
|         | |-CStyleCastExpr 0x7fffd8480dc8 <col:26, col:42> 'stbtt_uint8 *' <NoOp>
|         | | `-ImplicitCastExpr 0x7fffd8480db0 <col:42> 'unsigned char *' <LValueToRValue>
|         | |   `-DeclRefExpr 0x7fffd8480d78 <col:42> 'unsigned char *' lvalue ParmVar 0x7fffd8480688 'font_collection' 'unsigned char *'
|         | |-ImplicitCastExpr 0x7fffd8480f90 <col:59> 'stbtt_uint32':'unsigned int' <IntegralCast>
|         | | `-ImplicitCastExpr 0x7fffd8480f78 <col:59> 'stbtt_int32':'int' <LValueToRValue>
|         | |   `-DeclRefExpr 0x7fffd8480df0 <col:59> 'stbtt_int32':'int' lvalue Var 0x7fffd8480ab0 'off' 'stbtt_int32':'int'
|         | |-CStyleCastExpr 0x7fffd8480e68 <col:64, col:79> 'stbtt_uint8 *' <BitCast>
|         | | `-ImplicitCastExpr 0x7fffd8480e50 <col:79> 'char *' <LValueToRValue>
|         | |   `-DeclRefExpr 0x7fffd8480e18 <col:79> 'char *' lvalue ParmVar 0x7fffd8480700 'name_utf8' 'char *'
|         | `-ImplicitCastExpr 0x7fffd8480fa8 <col:90> 'stbtt_int32':'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x7fffd8480e90 <col:90> 'stbtt_int32':'int' lvalue ParmVar 0x7fffd8480770 'flags' 'stbtt_int32':'int'
|         |-ReturnStmt 0x7fffd8481000 <line:4866:10, col:17>
|         | `-ImplicitCastExpr 0x7fffd8480fe8 <col:17> 'stbtt_int32':'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x7fffd8480fc0 <col:17> 'stbtt_int32':'int' lvalue Var 0x7fffd8480ab0 'off' 'stbtt_int32':'int'
|         `-<<<NULL>>>
|-FunctionDecl 0x7fffd8481570 prev 0x7fffd82a8068 <line:501:19, line:4880:1> line:4875:15 stbtt_BakeFontBitmap 'int (const unsigned char *, int, float, unsigned char *, int, int, int, int, stbtt_bakedchar *)' extern
| |-ParmVarDecl 0x7fffd84810e8 <col:36, col:57> col:57 used data 'const unsigned char *'
| |-ParmVarDecl 0x7fffd8481160 <col:63, col:67> col:67 used offset 'int'
| |-ParmVarDecl 0x7fffd84811d8 <line:4876:33, col:39> col:39 used pixel_height 'float'
| |-ParmVarDecl 0x7fffd8481250 <col:53, col:68> col:68 used pixels 'unsigned char *'
| |-ParmVarDecl 0x7fffd84812c8 <col:76, col:80> col:80 used pw 'int'
| |-ParmVarDecl 0x7fffd8481340 <col:84, col:88> col:88 used ph 'int'
| |-ParmVarDecl 0x7fffd84813b8 <line:4877:33, col:37> col:37 used first_char 'int'
| |-ParmVarDecl 0x7fffd8481430 <col:49, col:53> col:53 used num_chars 'int'
| |-ParmVarDecl 0x7fffd84814a0 <col:64, col:81> col:81 used chardata 'stbtt_bakedchar *'
| `-CompoundStmt 0x7fffd84819f8 <line:4878:1, line:4880:1>
|   `-ReturnStmt 0x7fffd84819e0 <line:4879:4, col:134>
|     `-CallExpr 0x7fffd84818b0 <col:11, col:134> 'int'
|       |-ImplicitCastExpr 0x7fffd8481898 <col:11> 'int (*)(unsigned char *, int, float, unsigned char *, int, int, int, int, stbtt_bakedchar *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x7fffd8481658 <col:11> 'int (unsigned char *, int, float, unsigned char *, int, int, int, int, stbtt_bakedchar *)' Function 0x7fffd841f7d8 'stbtt_BakeFontBitmap_internal' 'int (unsigned char *, int, float, unsigned char *, int, int, int, int, stbtt_bakedchar *)'
|       |-CStyleCastExpr 0x7fffd84816d8 <col:41, col:59> 'unsigned char *' <BitCast>
|       | `-ImplicitCastExpr 0x7fffd84816c0 <col:59> 'const unsigned char *' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fffd8481680 <col:59> 'const unsigned char *' lvalue ParmVar 0x7fffd84810e8 'data' 'const unsigned char *'
|       |-ImplicitCastExpr 0x7fffd8481920 <col:65> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd8481700 <col:65> 'int' lvalue ParmVar 0x7fffd8481160 'offset' 'int'
|       |-ImplicitCastExpr 0x7fffd8481938 <col:73> 'float' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd8481728 <col:73> 'float' lvalue ParmVar 0x7fffd84811d8 'pixel_height' 'float'
|       |-ImplicitCastExpr 0x7fffd8481950 <col:87> 'unsigned char *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd8481750 <col:87> 'unsigned char *' lvalue ParmVar 0x7fffd8481250 'pixels' 'unsigned char *'
|       |-ImplicitCastExpr 0x7fffd8481968 <col:95> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd8481778 <col:95> 'int' lvalue ParmVar 0x7fffd84812c8 'pw' 'int'
|       |-ImplicitCastExpr 0x7fffd8481980 <col:99> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd84817a0 <col:99> 'int' lvalue ParmVar 0x7fffd8481340 'ph' 'int'
|       |-ImplicitCastExpr 0x7fffd8481998 <col:103> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd84817c8 <col:103> 'int' lvalue ParmVar 0x7fffd84813b8 'first_char' 'int'
|       |-ImplicitCastExpr 0x7fffd84819b0 <col:115> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd84817f0 <col:115> 'int' lvalue ParmVar 0x7fffd8481430 'num_chars' 'int'
|       `-ImplicitCastExpr 0x7fffd84819c8 <col:126> 'stbtt_bakedchar *' <LValueToRValue>
|         `-DeclRefExpr 0x7fffd8481818 <col:126> 'stbtt_bakedchar *' lvalue ParmVar 0x7fffd84814a0 'chardata' 'stbtt_bakedchar *'
|-FunctionDecl 0x7fffd8481b38 prev 0x7fffd834ca28 <line:501:19, line:4885:1> line:4882:15 used stbtt_GetFontOffsetForIndex 'int (const unsigned char *, int)' extern
| |-ParmVarDecl 0x7fffd8481a28 <col:43, col:64> col:64 used data 'const unsigned char *'
| |-ParmVarDecl 0x7fffd8481aa0 <col:70, col:74> col:74 used index 'int'
| `-CompoundStmt 0x7fffd8481d38 <line:4883:1, line:4885:1>
|   `-ReturnStmt 0x7fffd8481d20 <line:4884:4, col:77>
|     `-CallExpr 0x7fffd8481cd0 <col:11, col:77> 'int'
|       |-ImplicitCastExpr 0x7fffd8481cb8 <col:11> 'int (*)(unsigned char *, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x7fffd8481be8 <col:11> 'int (unsigned char *, int)' Function 0x7fffd8376fa8 'stbtt_GetFontOffsetForIndex_internal' 'int (unsigned char *, int)'
|       |-CStyleCastExpr 0x7fffd8481c68 <col:48, col:66> 'unsigned char *' <BitCast>
|       | `-ImplicitCastExpr 0x7fffd8481c50 <col:66> 'const unsigned char *' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fffd8481c10 <col:66> 'const unsigned char *' lvalue ParmVar 0x7fffd8481a28 'data' 'const unsigned char *'
|       `-ImplicitCastExpr 0x7fffd8481d08 <col:72> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x7fffd8481c90 <col:72> 'int' lvalue ParmVar 0x7fffd8481aa0 'index' 'int'
|-FunctionDecl 0x7fffd8481df8 prev 0x7fffd834c818 <line:501:19, line:4890:1> line:4887:15 stbtt_GetNumberOfFonts 'int (const unsigned char *)' extern
| |-ParmVarDecl 0x7fffd8481d68 <col:38, col:59> col:59 used data 'const unsigned char *'
| `-CompoundStmt 0x7fffd8481fa8 <line:4888:1, line:4890:1>
|   `-ReturnStmt 0x7fffd8481f90 <line:4889:4, col:65>
|     `-CallExpr 0x7fffd8481f60 <col:11, col:65> 'int'
|       |-ImplicitCastExpr 0x7fffd8481f48 <col:11> 'int (*)(unsigned char *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x7fffd8481ea0 <col:11> 'int (unsigned char *)' Function 0x7fffd8378460 'stbtt_GetNumberOfFonts_internal' 'int (unsigned char *)'
|       `-CStyleCastExpr 0x7fffd8481f20 <col:43, col:61> 'unsigned char *' <BitCast>
|         `-ImplicitCastExpr 0x7fffd8481f08 <col:61> 'const unsigned char *' <LValueToRValue>
|           `-DeclRefExpr 0x7fffd8481ec8 <col:61> 'const unsigned char *' lvalue ParmVar 0x7fffd8481d68 'data' 'const unsigned char *'
|-FunctionDecl 0x7fffd8482160 prev 0x7fffd834d5a8 <line:501:19, line:4895:1> line:4892:15 used stbtt_InitFont 'int (stbtt_fontinfo *, const unsigned char *, int)' extern
| |-ParmVarDecl 0x7fffd8481fd0 <col:30, col:46> col:46 used info 'stbtt_fontinfo *'
| |-ParmVarDecl 0x7fffd8482048 <col:52, col:73> col:73 used data 'const unsigned char *'
| |-ParmVarDecl 0x7fffd84820c0 <col:79, col:83> col:83 used offset 'int'
| `-CompoundStmt 0x7fffd8482408 <line:4893:1, line:4895:1>
|   `-ReturnStmt 0x7fffd84823f0 <line:4894:4, col:71>
|     `-CallExpr 0x7fffd8482380 <col:11, col:71> 'int'
|       |-ImplicitCastExpr 0x7fffd8482368 <col:11> 'int (*)(stbtt_fontinfo *, unsigned char *, int)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x7fffd8482218 <col:11> 'int (stbtt_fontinfo *, unsigned char *, int)' Function 0x7fffd837c5a8 'stbtt_InitFont_internal' 'int (stbtt_fontinfo *, unsigned char *, int)'
|       |-ImplicitCastExpr 0x7fffd84823c0 <col:35> 'stbtt_fontinfo *' <LValueToRValue>
|       | `-DeclRefExpr 0x7fffd8482240 <col:35> 'stbtt_fontinfo *' lvalue ParmVar 0x7fffd8481fd0 'info' 'stbtt_fontinfo *'
|       |-CStyleCastExpr 0x7fffd84822c0 <col:41, col:59> 'unsigned char *' <BitCast>
|       | `-ImplicitCastExpr 0x7fffd84822a8 <col:59> 'const unsigned char *' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fffd8482268 <col:59> 'const unsigned char *' lvalue ParmVar 0x7fffd8482048 'data' 'const unsigned char *'
|       `-ImplicitCastExpr 0x7fffd84823d8 <col:65> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x7fffd84822e8 <col:65> 'int' lvalue ParmVar 0x7fffd84820c0 'offset' 'int'
|-FunctionDecl 0x7fffd84825c8 prev 0x7fffd835b5c8 <line:501:19, line:4900:1> line:4897:15 stbtt_FindMatchingFont 'int (const unsigned char *, const char *, int)' extern
| |-ParmVarDecl 0x7fffd8482438 <col:38, col:59> col:59 used fontdata 'const unsigned char *'
| |-ParmVarDecl 0x7fffd84824b0 <col:69, col:81> col:81 used name 'const char *'
| |-ParmVarDecl 0x7fffd8482528 <col:87, col:91> col:91 used flags 'int'
| `-CompoundStmt 0x7fffd84828b0 <line:4898:1, line:4900:1>
|   `-ReturnStmt 0x7fffd8482898 <line:4899:4, col:91>
|     `-CallExpr 0x7fffd8482840 <col:11, col:91> 'int'
|       |-ImplicitCastExpr 0x7fffd8482828 <col:11> 'int (*)(unsigned char *, char *, stbtt_int32)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x7fffd8482680 <col:11> 'int (unsigned char *, char *, stbtt_int32)' Function 0x7fffd84808a8 'stbtt_FindMatchingFont_internal' 'int (unsigned char *, char *, stbtt_int32)'
|       |-CStyleCastExpr 0x7fffd8482700 <col:43, col:61> 'unsigned char *' <BitCast>
|       | `-ImplicitCastExpr 0x7fffd84826e8 <col:61> 'const unsigned char *' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fffd84826a8 <col:61> 'const unsigned char *' lvalue ParmVar 0x7fffd8482438 'fontdata' 'const unsigned char *'
|       |-CStyleCastExpr 0x7fffd8482780 <col:71, col:80> 'char *' <BitCast>
|       | `-ImplicitCastExpr 0x7fffd8482768 <col:80> 'const char *' <LValueToRValue>
|       |   `-DeclRefExpr 0x7fffd8482728 <col:80> 'const char *' lvalue ParmVar 0x7fffd84824b0 'name' 'const char *'
|       `-ImplicitCastExpr 0x7fffd8482880 <col:86> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x7fffd84827a8 <col:86> 'int' lvalue ParmVar 0x7fffd8482528 'flags' 'int'
`-FunctionDecl 0x7fffd8482b00 prev 0x7fffd835b8f8 <line:501:19, line:4905:1> line:4902:15 stbtt_CompareUTF8toUTF16_bigendian 'int (const char *, int, const char *, int)' extern
  |-ParmVarDecl 0x7fffd84828e0 <col:50, col:62> col:62 used s1 'const char *'
  |-ParmVarDecl 0x7fffd8482968 <col:66, col:70> col:70 used len1 'int'
  |-ParmVarDecl 0x7fffd84829e0 <col:76, col:88> col:88 used s2 'const char *'
  |-ParmVarDecl 0x7fffd8482a58 <col:92, col:96> col:96 used len2 'int'
  `-CompoundStmt 0x7fffd8482de0 <line:4903:1, line:4905:1>
    `-ReturnStmt 0x7fffd8482dc8 <line:4904:4, col:91>
      `-CallExpr 0x7fffd8482d50 <col:11, col:91> 'int'
        |-ImplicitCastExpr 0x7fffd8482d38 <col:11> 'int (*)(char *, int, char *, int)' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x7fffd8482bc0 <col:11> 'int (char *, int, char *, int)' Function 0x7fffd8478658 'stbtt_CompareUTF8toUTF16_bigendian_internal' 'int (char *, int, char *, int)'
        |-CStyleCastExpr 0x7fffd8482c40 <col:55, col:64> 'char *' <BitCast>
        | `-ImplicitCastExpr 0x7fffd8482c28 <col:64> 'const char *' <LValueToRValue>
        |   `-DeclRefExpr 0x7fffd8482be8 <col:64> 'const char *' lvalue ParmVar 0x7fffd84828e0 's1' 'const char *'
        |-ImplicitCastExpr 0x7fffd8482d98 <col:68> 'int' <LValueToRValue>
        | `-DeclRefExpr 0x7fffd8482c68 <col:68> 'int' lvalue ParmVar 0x7fffd8482968 'len1' 'int'
        |-CStyleCastExpr 0x7fffd8482ce8 <col:74, col:83> 'char *' <BitCast>
        | `-ImplicitCastExpr 0x7fffd8482cd0 <col:83> 'const char *' <LValueToRValue>
        |   `-DeclRefExpr 0x7fffd8482c90 <col:83> 'const char *' lvalue ParmVar 0x7fffd84829e0 's2' 'const char *'
        `-ImplicitCastExpr 0x7fffd8482db0 <col:87> 'int' <LValueToRValue>
          `-DeclRefExpr 0x7fffd8482d10 <col:87> 'int' lvalue ParmVar 0x7fffd8482a58 'len2' 'int'
